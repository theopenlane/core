#!/bin/bash
# GitHub-specific utility functions for Buildkite automation scripts

# Source common utilities
GITHUB_LIB_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${GITHUB_LIB_DIR}/common.sh"

# Function to create a PR comment
create_pr_comment() {
    local pr_number="$1"
    local repo="$2"
    local comment_body="$3"

    if gh pr comment "$pr_number" --repo "$repo" --body "$comment_body"; then
        echo "✅ Comment added to PR #$pr_number"
        return 0
    else
        echo "⚠️  Failed to add comment to PR #$pr_number"
        return 1
    fi
}

# Function to create a draft PR
create_draft_pr() {
    local repo="$1"
    local head_branch="$2"
    local title="$3"
    local body="$4"

    if gh pr create \
        --repo "$repo" \
        --head "$head_branch" \
        --title "$title" \
        --body "$body" \
        --draft; then
        echo "✅ Draft PR created successfully"
        return 0
    else
        echo "❌ Failed to create draft PR"
        return 1
    fi
}

# Function to create a regular PR
create_pr() {
    local repo="$1"
    local head_branch="$2"
    local title="$3"
    local body="$4"

    if gh pr create \
        --repo "$repo" \
        --head "$head_branch" \
        --title "$title" \
        --body "$body"; then
        echo "✅ PR created successfully"
        return 0
    else
        echo "❌ Failed to create PR"
        return 1
    fi
}

# Function to convert draft PR to ready
convert_draft_to_ready() {
    local pr_number="$1"
    local repo="$2"

    if gh pr ready "$pr_number" --repo "$repo"; then
        echo "✅ PR #$pr_number converted from draft to ready"
        return 0
    else
        echo "⚠️  Failed to convert PR #$pr_number from draft to ready"
        return 1
    fi
}

# Function to close a PR
close_pr() {
    local pr_number="$1"
    local repo="$2"
    local comment="${3:-}"

    # Add comment before closing if provided
    if [[ -n "$comment" ]]; then
        create_pr_comment "$pr_number" "$repo" "$comment"
    fi

    if gh pr close "$pr_number" --repo "$repo"; then
        echo "✅ PR #$pr_number closed successfully"
        return 0
    else
        echo "⚠️  Failed to close PR #$pr_number"
        return 1
    fi
}

# Function to update PR title and body
update_pr() {
    local pr_number="$1"
    local repo="$2"
    local title="$3"
    local body="$4"

    if gh pr edit "$pr_number" --repo "$repo" --title "$title" --body "$body"; then
        echo "✅ PR #$pr_number updated successfully"
        return 0
    else
        echo "⚠️  Failed to update PR #$pr_number"
        return 1
    fi
}

# Function to get PR URL
get_pr_url() {
    local pr_number="$1"
    local repo="$2"

    gh pr view "$pr_number" --repo "$repo" --json url --jq '.url' 2>/dev/null || echo ""
}

# Function to find draft PRs matching a pattern
find_draft_prs() {
    local repo="$1"
    local pattern="$2"
    local output_format="${3:-number:headRefName:title}"

    gh pr list --repo "$repo" --state open --draft --json number,title,headRefName \
        | jq -r ".[] | select(.title | test(\"$pattern\")) | \"\\(.number):\\(.headRefName):\\(.title)\""
}

# Function to check if PR exists and get its info
get_pr_info() {
    local pr_number="$1"
    local repo="$2"
    local fields="${3:-state,title,updatedAt}"

    gh pr view "$pr_number" --repo "$repo" --json "$fields" 2>/dev/null || echo ""
}

# Function to find existing draft PR for a core PR
find_existing_draft_pr() {
    local repo="$1"
    local core_pr_number="$2"

    local existing_pr=$(gh pr list --repo "$repo" --state open --draft --json title,number --jq ".[] | select(.title | contains(\"core PR #${core_pr_number}\")) | .number" | head -1)
    echo "$existing_pr"
}

# Function to get the branch name from a PR
get_pr_branch() {
    local pr_number="$1"
    local repo="$2"

    gh pr view "$pr_number" --repo "$repo" --json headRefName --jq '.headRefName' 2>/dev/null || echo ""
}

# Function to generate PR body for core config changes
generate_core_config_pr_body() {
    local core_pr_number="$1"
    local changes="$2"
    local build_number="${3:-${BUILDKITE_BUILD_NUMBER:-unknown}}"
    local commit="${4:-${BUILDKITE_COMMIT:-unknown}}"
    local branch="${5:-${BUILDKITE_BRANCH:-unknown}}"

    cat << EOF
## 🤖 Automated Helm Chart Update

This PR updates the Helm chart based on changes in the core configuration structure.

### 📋 Changes Made:$changes

### 🔧 Build Information:
- **Build Number**: $build_number
- **Source Commit**: [\`${commit:0:8}\`](https://github.com/theopenlane/core/commit/${commit})
- **Source Branch**: \`$branch\`

### 🔍 What This Updates:
- **Helm Values**: Configuration schema and default values
- **External Secrets**: Secret management templates for sensitive configuration
- **ConfigMaps**: Non-sensitive configuration templates
- **Chart Version**: Automatically incremented patch version

This PR was automatically generated by the Buildkite pipeline and should be safe to merge after review.
EOF
}

# Function to generate draft PR body
generate_draft_pr_body() {
    local core_pr_number="$1"
    local changes="$2"
    local commit="${3:-${BUILDKITE_COMMIT:-unknown}}"
    local branch="${4:-${BUILDKITE_BRANCH:-unknown}}"

    cat << EOF
## 🚧 DRAFT: Config Changes from Core PR #$core_pr_number

⚠️ **This is a DRAFT PR** - automatically converts to ready for review once [core PR #$core_pr_number](https://github.com/theopenlane/core/pull/$core_pr_number) is merged.

### Changes:
$changes

### Source:
- **Core PR**: [#$core_pr_number](https://github.com/theopenlane/core/pull/$core_pr_number)
- **Branch**: [\`$branch\`](https://github.com/theopenlane/core/tree/$branch)
- **Commit**: [\`${commit:0:8}\`](https://github.com/theopenlane/core/commit/${commit})
EOF
}

# Function to generate PR closure comment
generate_closure_comment() {
    local core_pr_number="$1"
    local reason="${2:-merged}"

    case "$reason" in
        "merged")
            cat << EOF
## 🗑️ Closing Draft PR - Core PR Merged

This draft PR is being automatically closed because the related core repository PR #$core_pr_number has been merged and no infrastructure configuration changes were needed.

### 📋 Summary:
- ✅ Core PR #$core_pr_number has been merged successfully
- ℹ️  No Helm chart configuration changes were detected
- ℹ️  No external secrets updates were required
- ℹ️  No infrastructure deployment changes necessary

### 🔄 What This Means:
The core repository changes were code-only modifications that don't affect the infrastructure configuration. Therefore, no infrastructure PR is needed.

---
*This PR was automatically closed by the cleanup automation.*
EOF
            ;;
        "closed")
            cat << EOF
## 🗑️ Closing Draft PR - Core PR Closed

This draft PR is being automatically closed because the related core repository PR #$core_pr_number has been closed without merging.

### 📋 Summary:
- ❌ Core PR #$core_pr_number was closed without merging
- ℹ️  No infrastructure changes will be deployed
- ℹ️  This draft PR is no longer needed

---
*This PR was automatically closed by the cleanup automation.*
EOF
            ;;
        *)
            echo "Unknown reason: $reason" >&2
            return 1
            ;;
    esac
}

# Function to generate PR ready comment
generate_ready_comment() {
    local core_pr_number="$1"
    local changes="$2"

    cat << EOF
## ✅ PR Ready for Review

This PR has been automatically converted from draft to ready for review because the related core repository changes have been merged.

### 🔄 Status Update
- ✅ Core PR #$core_pr_number merged to main branch
- ✅ Configuration changes finalized
- ✅ Chart version incremented
- ✅ Ready for infrastructure deployment

### 📋 Final Review Checklist
- [ ] Review all configuration changes
- [ ] Verify chart version increment is appropriate
- [ ] Confirm external secrets configuration is correct
- [ ] Approve and merge to deploy changes

### 🔧 Changes Applied:
$changes

---
*This PR was automatically updated after the core repository merge.*
EOF
}