#!/bin/bash

set -euo pipefail

echo "🔧 Setting up build environment..."

# Create cache directories (tools may not be available yet)
mkdir -p $HOME/.cache/go-build 2>/dev/null || true
mkdir -p $HOME/.cache/golangci-lint 2>/dev/null || true
mkdir -p $HOME/.cache/go/pkg/mod 2>/dev/null || true

# Docker layer caching setup (Docker handled via plugins)
export DOCKER_BUILDKIT=1
export COMPOSE_DOCKER_CLI_BUILD=1

# Basic tool availability checks (only for tools that should be on base VM)
echo "🔍 Checking base system tools..."
if ! command -v git >/dev/null 2>&1; then
    echo "❌ Git not found in PATH"
    exit 1
fi

# Common environment validation
if [[ -z "${BUILDKITE_BUILD_ID:-}" ]]; then
    echo "⚠️  Not running in Buildkite environment"
fi

# Create temporary directories for build artifacts
mkdir -p "${BUILDKITE_BUILD_PATH:-/tmp}/artifacts"
mkdir -p "${BUILDKITE_BUILD_PATH:-/tmp}/test-results"

# Check disk space before starting build
echo "📊 Checking disk space..."
if disk_usage=$(df -h . 2>/dev/null | tail -1 | awk '{print $5}' 2>/dev/null | sed 's/%//' 2>/dev/null) && [[ -n "$disk_usage" ]] && [[ "$disk_usage" =~ ^[0-9]+$ ]]; then
    echo "📊 Current disk usage: ${disk_usage}%"

    if [[ $disk_usage -gt 90 ]]; then
        echo "🚨 CRITICAL: Disk usage is ${disk_usage}% - build may fail due to lack of space!"
        echo "🧹 Running emergency Docker cleanup..."

        if command -v docker >/dev/null 2>&1; then
            # Emergency cleanup - remove stopped containers and dangling images only
            echo "🧹 Emergency cleanup..."
            docker container prune -f >/dev/null 2>&1 || true
            docker image prune -f >/dev/null 2>&1 || true

            # Check if cleanup helped
            if new_usage=$(df -h . 2>/dev/null | tail -1 | awk '{print $5}' 2>/dev/null | sed 's/%//' 2>/dev/null) && [[ -n "$new_usage" ]] && [[ "$new_usage" =~ ^[0-9]+$ ]]; then
                echo "📊 Disk usage after emergency cleanup: ${new_usage}%"

                if [[ $new_usage -gt 85 ]]; then
                    echo "❌ Disk usage still critically high after cleanup"
                    echo "⚠️  Build may fail due to insufficient disk space"
                else
                    echo "✅ Emergency cleanup successful"
                fi
            else
                echo "⚠️  Could not determine disk usage after cleanup"
            fi
        fi
    elif [[ $disk_usage -gt 80 ]]; then
        echo "⚠️  WARNING: Disk usage is ${disk_usage}% - cleanup recommended"
    fi
else
    echo "⚠️  Could not determine disk usage, skipping disk space check"
fi

echo "✅ Build environment setup complete"