#!/bin/bash

set -euo pipefail

echo "🧹 Running post-command cleanup..."

# Check if command succeeded or failed
if [[ "${BUILDKITE_COMMAND_EXIT_STATUS:-0}" -ne 0 ]]; then
    echo "⚠️  Command failed with exit status: ${BUILDKITE_COMMAND_EXIT_STATUS}"
fi

# Clean up temporary files from this build step
if [[ -n "${BUILDKITE_BUILD_PATH:-}" ]]; then
    # Clean up any temp files that might have been created
    find "${BUILDKITE_BUILD_PATH}" -name "*.tmp" -type f -delete 2>/dev/null || true
    find "${BUILDKITE_BUILD_PATH}" -name "*.temp" -type f -delete 2>/dev/null || true
fi

# Prune Go module cache (keep last 14 days)
if [[ -d "$HOME/.cache/go/pkg/mod" ]]; then
    cache_size=$(du -sh "$HOME/.cache/go/pkg/mod" 2>/dev/null | cut -f1 || echo "unknown")
    echo "📦 Go module cache size: $cache_size"
    find "$HOME/.cache/go/pkg/mod" -type f -mtime +14 -delete 2>/dev/null || true
fi

# Prune golangci-lint cache (keep last 14 days)
if [[ -d "$HOME/.cache/golangci-lint" ]]; then
    cache_size=$(du -sh "$HOME/.cache/golangci-lint" 2>/dev/null | cut -f1 || echo "unknown")
    echo "🔍 Golangci-lint cache size: $cache_size"
    find "$HOME/.cache/golangci-lint" -type f -mtime +14 -delete 2>/dev/null || true
fi

# Archive build artifacts if they exist
if [[ -d "${BUILDKITE_BUILD_PATH:-/tmp}/artifacts" ]]; then
    artifact_count=$(find "${BUILDKITE_BUILD_PATH:-/tmp}/artifacts" -type f | wc -l)
    if [[ $artifact_count -gt 0 ]]; then
        echo "📁 Found $artifact_count build artifacts"
        # Upload artifacts if buildkite-agent is available
        if command -v buildkite-agent >/dev/null 2>&1; then
            buildkite-agent artifact upload "${BUILDKITE_BUILD_PATH:-/tmp}/artifacts/*" || true
        fi
    fi
fi

# Archive test results if they exist
if [[ -d "${BUILDKITE_BUILD_PATH:-/tmp}/test-results" ]]; then
    test_file_count=$(find "${BUILDKITE_BUILD_PATH:-/tmp}/test-results" -type f | wc -l)
    if [[ $test_file_count -gt 0 ]]; then
        echo "📋 Found $test_file_count test result files"
        # Upload test results if buildkite-agent is available
        if command -v buildkite-agent >/dev/null 2>&1; then
            buildkite-agent artifact upload "${BUILDKITE_BUILD_PATH:-/tmp}/test-results/*" || true
        fi
    fi
fi

# Docker cleanup
if command -v docker >/dev/null 2>&1; then
    echo "🐳 Running Docker cleanup..."

    # Get initial disk usage
    if initial_usage=$(df -h . 2>/dev/null | tail -1 | awk '{print $5}' 2>/dev/null | sed 's/%//' 2>/dev/null) && [[ -n "$initial_usage" ]] && [[ "$initial_usage" =~ ^[0-9]+$ ]]; then
        echo "📊 Initial disk usage: ${initial_usage}%"
    else
        echo "⚠️  Could not determine initial disk usage, running cleanup anyway"
        initial_usage=0
    fi

    # Remove stopped/dead containers only
    stopped_containers=$(docker ps -aq --filter "status=exited" --filter "status=dead")
    if [[ -n "$stopped_containers" ]]; then
        echo "🗑️  Removing stopped/dead containers..."
        docker rm $stopped_containers >/dev/null 2>&1 || true
    fi

    # Remove dangling images (untagged images)
    dangling_images=$(docker images -f "dangling=true" -q)
    if [[ -n "$dangling_images" ]]; then
        echo "🖼️  Removing dangling images..."
        docker rmi $dangling_images >/dev/null 2>&1 || true
    fi

    # Remove unused images older than 7 days
    echo "🖼️  Removing unused images older than 7 days..."
    docker image prune -f --filter "until=168h" >/dev/null 2>&1 || true

    # Skip network cleanup to avoid interfering with concurrent builds
    echo "🌐 Skipping network cleanup"

    # Remove volumes unused for 7+ days
    echo "💾 Removing volumes unused for 7+ days..."
    docker volume prune -f --filter "until=168h" >/dev/null 2>&1 || true

    # Remove build cache older than 7 days
    echo "🏗️  Removing build cache older than 7 days..."
    docker builder prune -f --filter "until=168h" >/dev/null 2>&1 || true

    # If disk usage is still high, do more aggressive cleanup
    if current_usage=$(df -h . 2>/dev/null | tail -1 | awk '{print $5}' 2>/dev/null | sed 's/%//' 2>/dev/null) && [[ -n "$current_usage" ]] && [[ "$current_usage" =~ ^[0-9]+$ ]]; then
        echo "📊 Current disk usage: ${current_usage}%"
    else
        echo "⚠️  Could not determine current disk usage"
        current_usage=0
    fi

    # Warn if disk usage is still high after cleanup
    if [[ $current_usage -gt 85 ]]; then
        echo "⚠️  WARNING: Disk usage is critically high (${current_usage}%)"
        echo "💡 Recommend running docker-cleanup.sh during maintenance"
    elif [[ $current_usage -gt 80 ]]; then
        echo "⚠️  WARNING: Disk usage is high (${current_usage}%)"
        echo "💡 Consider running docker-cleanup.sh during off-peak hours"
    fi

    # Final disk usage check
    if final_usage=$(df -h . 2>/dev/null | tail -1 | awk '{print $5}' 2>/dev/null | sed 's/%//' 2>/dev/null) && [[ -n "$final_usage" ]] && [[ "$final_usage" =~ ^[0-9]+$ ]]; then
        echo "📊 Final disk usage: ${final_usage}%"

        # Calculate space freed (only if we have valid numbers)
        if [[ $initial_usage -gt 0 ]]; then
            space_freed=$((initial_usage - final_usage))
            if [[ $space_freed -gt 0 ]]; then
                echo "✨ Freed ${space_freed}% disk space"
            fi
        fi
    else
        echo "⚠️  Could not determine final disk usage"
    fi

    # Show Docker space usage summary
    echo "🐳 Docker space usage summary:"
    docker system df 2>/dev/null || true
fi

echo "✅ Post-command cleanup complete"