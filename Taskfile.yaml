version: "3"

includes:
  cli:
    taskfile: ./cmd/cli/Taskfile.yaml
    dir: ./cmd/cli
  docker:
    taskfile: ./docker/Taskfile.yaml
    dir: ./docker
    aliases: [compose]
  fga:
    taskfile: ./fga/Taskfile.yaml
    dir: ./fga
  db:
    taskfile: ./db/Taskfile.yaml
    dir: ./db
    aliases: [atlas]
  config:
    taskfile: ./jsonschema/Taskfile.yaml
  catalog:
    taskfile: ./pkg/catalog/Taskfile.yaml
    dir: ./pkg/catalog
  bats:
    taskfile: ./.buildkite/tests/Taskfile.yaml


env:
  ATLAS_POSTGRES_DB_URI: "postgres:17-alpine"
  TEST_DB_URL: "docker://postgres:17-alpine"
  TEST_DB_CONTAINER_EXPIRY: "5" # in minutes
  TEST_FGA_URL: "localhost:8080"
  ENV: config
  # go build
  GOFLAGS: -buildvcs=false
  # for test container settings
  RYUK_CONNECTION_TIMEOUT: "5m"
  RYUK_VERBOSE: "true"
  ## generate env vars for caching
  GO_GENERATE_FAST_DEBUG: "false" # set to true to debug go-generate-fast
  GO_GENERATE_FAST_CACHE_DIR: "/tmp/.cache"
  GO_GENERATE_FAST_DISABLE: "false" # set to true to disable cached entries
  GO_GENERATE_FAST_RECACHE: "false" # set to true to recache all entries
  COMPOSE_PROJECT_NAME: openlane
  # CLI demo environment variables
  ADMIN_USER_EMAIL: "admin@admin.theopenlane.io"

# load the .env file for windmill
dotenv: ['docker/configs/windmill/.env']

tasks:
  default:
    silent: true
    cmds:
      - task --list

  generate:ci:
    desc: a combination of the ent, graph, and gqlgen tasks which are required to fully generate the necessary graph, server, resolvers, client, etc.
    cmds:
      - go generate ./...
      - task: tidy

  generate:
    desc: a combination of the ent, graph, and gqlgen tasks which are required to fully generate the necessary graph, server, resolvers, client, etc.
    cmds:
      - go-generate-fast ./...
      - task: tidy

  regenerate:
    desc: a combination of the ent, graph, and gqlgen tasks which are required to fully generate the necessary graph, server, resolvers, client, etc.
    env:
      GO_GENERATE_FAST_RECACHE: "true"
    cmds:
      - go-generate-fast ./...
      - task: tidy

  generate:checksums:
    desc: Generate with checksum tracking for CI optimization
    cmds:
      - task: generate:ent:smart
      - task: generate:graphql:smart
      - task: generate:others:smart
      - task: tidy

  generate:ent:smart:
    internal: true
    sources:
      - internal/ent/schema/**/*.go
      - internal/ent/generate/**/*.go
      - internal/ent/mixin/**/*.go
      - internal/ent/templates/**/*
    generates:
      - internal/ent/generated/**/*.go
    method: checksum
    cmds:
      - go generate internal/ent/generate/generate.go

  generate:graphql:smart:
    internal: true
    sources:
      - internal/graphapi/generate/**/*.go
      - internal/graphapi/schema/**/*.graphql
      - internal/graphapi/query/**/*.graphql
      - internal/ent/generated/**/*.go
    generates:
      - internal/graphapi/generated/**/*.go
      - internal/graphapi/model/gen_models.go
      - internal/graphapi/*.resolvers.go
      - internal/graphapi/testclient/graphqlclient.go
      - internal/graphapi/testclient/models.go
      - pkg/openlaneclient/models.go
      - pkg/openlaneclient/graphqlclient.go
      - pkg/openlaneclient/models.go
      - internal/httpserve/handlers/csv/sample_*.csv
    method: checksum
    cmds:
      - go generate internal/graphapi/generate/generate.go

  generate:others:smart:
    internal: true
    sources:
      - pkg/catalog/**/*.go
      - pkg/corejobs/internal/**/*.go
      - pkg/objects/**/*.go
      - .mockery.yml
    generates:
      - pkg/catalog/**/*.yaml
      - pkg/catalog/**/*.json
      - pkg/corejobs/internal/cloudflare/mocks/mocks.go
      - pkg/objects/mocks/mocks.go
    method: checksum
    cmds:
      - go generate pkg/catalog/generate.go
      - go generate pkg/corejobs/internal/generate.go
      - go generate pkg/objects/objects.go

  # Buildkite automation tasks
  buildkite:draft-pr:
    desc: Create draft PR for config changes
    cmds:
      - sh -c "apk add --no-cache bash >/dev/null 2>&1 && bash .buildkite/draft-pr-automation.sh"
    preconditions:
      - sh: '[[ -n "${BUILDKITE_PULL_REQUEST:-}" && "${BUILDKITE_PULL_REQUEST}" != "false" ]]'
        msg: "Only runs in PR context"

  buildkite:helm-update:
    desc: Update helm chart from config changes
    cmds:
      - sh -c "apk add --no-cache bash >/dev/null 2>&1 && bash .buildkite/helm-automation.sh"
    preconditions:
      - sh: '[[ "${BUILDKITE_BRANCH:-}" == "main" ]]'
        msg: "Only runs on main branch"

  buildkite:link-prs:
    desc: Link PRs after draft creation
    deps: ['buildkite:draft-pr']
    cmds:
      - sh -c "apk add --no-cache bash >/dev/null 2>&1 && bash .buildkite/link-pr-automation.sh"
    preconditions:
      - sh: '[[ -n "${BUILDKITE_PULL_REQUEST:-}" && "${BUILDKITE_PULL_REQUEST}" != "false" ]]'
        msg: "Only runs in PR context"

  buildkite:post-merge:
    desc: Finalize config PRs after merge
    deps: ['buildkite:helm-update']
    cmds:
      - sh -c "apk add --no-cache bash >/dev/null 2>&1 && bash .buildkite/post-merge-pr-automation.sh"
    preconditions:
      - sh: '[[ "${BUILDKITE_BRANCH:-}" == "main" ]]'
        msg: "Only runs on main branch"

  buildkite:cleanup:
    desc: Cleanup draft PRs
    deps: ['buildkite:post-merge']
    cmds:
      - sh -c "apk add --no-cache bash >/dev/null 2>&1 && bash .buildkite/cleanup-draft-prs.sh"
    preconditions:
      - sh: '[[ "${BUILDKITE_BRANCH:-}" == "main" ]]'
        msg: "Only runs on main branch"

  buildkite:image-tag:
    desc: Update image tag for release
    cmds:
      - sh -c "apk add --no-cache bash >/dev/null 2>&1 && bash .buildkite/image-tag-automation.sh"
    preconditions:
      - sh: '[[ -n "${BUILDKITE_TAG:-}" ]]'
        msg: "Only runs on tag builds"

  generate:ent:
    desc: generate ent models
    cmds:
      - go-generate-fast internal/ent/generate/generate.go
      - task: tidy

  generate:gql:
    desc: generate gql graphql models and resolvers, along with the client
    cmds:
      - go-generate-fast internal/graphapi/generate/generate.go
      - task: tidy

  ## Go tasks
  go:lint:
    desc: runs golangci-lint (optionally only on changed files with --changed=true)
    vars:
      CHANGED: '{{.CHANGED | default "false"}}'
    silent: true
    cmds:
      - |
        branch=$(git rev-parse --abbrev-ref HEAD)

        if [ "$branch" = "main" ]; then
          echo "üîé On main branch ‚Äî running full linter only..."
          golangci-lint run --config=.golangci.yaml --verbose
          # return the exit code from the linter
          exit $?
        fi

        if [ "{{.CHANGED}}" = "true" ]; then
          changed_files=$(git diff origin/main --name-only --diff-filter=ACMRTUXB | grep '\.go$' || true)

          if [ -n "$changed_files" ]; then
            echo "üîç Linting changed files only (grouped by directory):"
            echo "$changed_files"

            echo "$changed_files" | xargs -n1 dirname | sort -u | while read -r dir; do
            if [ -d "$dir" ]; then
              echo "‚û°Ô∏è  Linting directory: $dir"
              golangci-lint run --config=.golangci.yaml --verbose --fix --show-stats "$dir"
            fi
          done
          else
            echo "‚úÖ No changed Go files to lint."
          fi
        else
          echo "üßπ Linting all Go files..."
          golangci-lint run --config=.golangci.yaml --verbose
        fi

  go:lint:ci:
    desc: runs golangci-lint, the most annoying opinionated linter ever, for CI
    ## do not use --fix in CI
    cmds:
      - golangci-lint run --config=.golangci.yaml --verbose --concurrency 8 --print-resources-usage

  go:test:
    desc: runs and outputs results of created go tests
    aliases: ["go:test:psql", "test:psql"]
    env:
      TEST_DB_URL: "docker://postgres:17-alpine"
    cmds:
      - go test -v ./... -tags test

  go:test:cover:
    desc: runs and outputs results of created go tests with coverage
    aliases: [cover]
    cmds:
      - go test -v ./... -coverprofile=coverage.out -timeout 20m -tags test

  go:test:coverout:
    desc: runs and outputs results of created go tests with coverage
    aliases: [cover]
    cmds:
      - task: go:test:cover
      - go tool cover -html=coverage.out

  go:testsum:local:
    silent: true
    desc: runs tests using gotestsum
    aliases: [testsum]
    cmds:
      - gotestsum --format-hide-empty-pkg --packages "./..." --format-hide-empty-pkg --rerun-fails --hide-summary output -- -p 20 -tags test

  go:testsum:verbose:
    silent: true
    desc: runs tests using gotestsum
    aliases: [testsum]
    cmds:
      - gotestsum --format standard-verbose --format-hide-empty-pkg --packages "./..." --format-hide-empty-pkg --rerun-fails --hide-summary output -- -p 20 -tags test

  go:testsum:slow:
    silent: true
    desc: finds slow tests using gotestsum
    aliases: ['testsum:slow']
    cmds:
      - gotestsum tool slowest

  go:testsum:ci:
    desc: runs tests using gotestsum for CI
    silent: true
    aliases: ['testsum:ci']
    cmds:
      - go run gotest.tools/gotestsum@latest --junitfile junit.xml --junitfile-hide-empty-pkg --packages "./..." --format-hide-empty-pkg --format-icons hivis --rerun-fails=3 --rerun-fails-run-root-test  --hide-summary output -- -p 20 -coverprofile=coverage.out -tags test

  go:testsum:ci:cover:
    desc: pushes test results to buildkite using gotestsum
    silent: true
    aliases: ['testsum:ci:cover']
    cmds:
      - |
        curl \
        -X POST \
        --fail-with-body \
        -H "Authorization: Token token=\"$ANALYTICS_TOKEN\"" \
        -F "data=@junit.xml" \
        -F "format=junit" \
        -F "run_env[CI]=buildkite" \
        -F "run_env[key]=$BUILDKITE_BUILD_ID" \
        -F "run_env[number]=$BUILDKITE_BUILD_NUMBER" \
        -F "run_env[job_id]=$BUILDKITE_JOB_ID" \
        -F "run_env[branch]=$BUILDKITE_BRANCH" \
        -F "run_env[commit_sha]=$BUILDKITE_COMMIT" \
        -F "run_env[message]=$BUILDKITE_MESSAGE" \
        -F "run_env[url]=$BUILDKITE_BUILD_URL" \
        https://analytics-api.buildkite.com/v1/uploads

  go:testsum:graph:
    desc: runs only the graph tests using gotestsum
    silent: true
    aliases: ['testsum:graph']
    cmds:
      - gotestsum --packages "github.com/theopenlane/core/internal/graphapi" --format-hide-empty-pkg --rerun-fails --format-icons hivis --hide-summary output -- -p 20 -tags test

  go:fmt:
    desc: format all go code
    cmds:
      - go fmt ./...

  go:tidy:
    desc: Runs go mod tidy on the backend
    aliases: [tidy]
    cmds:
      - go mod tidy

  go:build:
    desc: Runs go build for the core server
    cmds:
      - "{{ .GOOS }} {{ .GOARCH }} go build -o core"

  go:build:ci:
    desc: Runs go build for the core server
    cmds:
      - go build -mod=readonly -a -o bin/core

  go:build-cli:
    aliases: [buildcli]
    desc: Runs go build for the openlane cli
    cmds:
      - go build -tags cli -o openlane-cli ./cmd/cli

  go:build-cli:ci:
    desc: Runs go build for the openlane cli in CI
    cmds:
      - go build -tags cli -mod=readonly -a -o bin/openlane-cli ./cmd/cli

  go:all:
    aliases: [go]
    desc: Runs all go test and lint related tasks
    cmds:
      - task: go:tidy
      - task: go:fmt
      - task: go:lint
      - task: go:test

  hush:keyset:
    desc: Generates a new Tink keyset for field encryption
    cmds:
      - go run -tags generate ./internal/ent/hush/cmd/hush generate

  hush:quiet:
    desc: Generates a new Tink keyset (output only)
    cmds:
      - go run -tags generate ./internal/ent/hush/cmd/hush generate --quiet

  hush:export:
    desc: Generates a new Tink keyset in export format
    cmds:
      - go run -tags generate ./internal/ent/hush/cmd/hush generate --export

  # dev tasks
  run-dev:
    dotenv: ["{{.ENV}}/.env-dev"]
    desc: runs the core server in dev mode with the minimum parts
    cmds:
      - task: compose:redis
      - task: compose:fga
      - task: compose:riverboat
      - task: run-api

  run-dev-full:
    dotenv: ["{{.ENV}}/.env-dev"]
    desc: runs the core server in dev mode with riverboat and metrics
    deps: ['go:build-cli']
    cmds:
      - task: compose:redis
      - task: compose:fga
      - task: compose:riverboat
      - task: compose:metrics
      - task: run-api

  run-api:
    dotenv: ["{{.ENV}}/.env-dev"]
    env:
      CORE_AUTHZ_HOSTURL: http://localhost:8080
    desc: runs the core server in dev mode, assumes all other dependencies are running
    cmds:
      - go run main.go serve --debug --pretty

  oauth-test-ui:
    desc: runs the OAuth integration test UI on port 3004
    cmds:
      - docker compose -f ./docker/docker-compose-oauth-test.yml up -d

  oauth-test-ui:down:
    desc: stops the OAuth integration test UI
    cmds:
      - docker compose -f ./docker/docker-compose-oauth-test.yml down

  pr:
    desc: runs the comprehensive roll-up tasks required to ensure all files are being committed / pushed as a part of opening a PR
    cmds:
      - task: regenerate
      - task: config:generate
      - task: atlas:create
      - task: go
      - task: fga:test

  ci:
    desc: a task that runs during CI
    cmds:
      - task: generate:ci
      - task: tidy
      - "git config --global --add safe.directory /workdir"
      - |
        status=$(git status --porcelain)
        if [ -n "$status" ]; then
        echo "detected git diff after running generate; please re-run tasks"
        echo "$status"
        exit 1
        fi

  clean:local:
    desc: cleans up core.db and openlane-cli local
    cmds:
      - "rm -f core.db"
      - "rm -f openlane-cli"
      - task: buildcli

  shell:
    desc: open a new shell to launch server as a dep
    cmds:
      - rm -f core.db
      - rm -f openlane-cli
      - osascript -e 'tell app "Terminal" to do script "cd {{.PWD}} && task run-dev"'
    vars:
      PWD:
        sh: pwd

  install:all:
    desc: installs all dependencies for the project
    aliases: [install]
    cmds:
      - task: brew-install
      - task: local-setup

  update-brew:
    desc: Update Homebrew and upgrade all packages
    cmds:
      - brew update && brew upgrade && brew cleanup || true

  local-setup:
    desc: Setup the project dependencies
    cmds:
      - command -v gcloud &> /dev/null || curl https://sdk.cloud.google.com | bash
      - sudo npm install jsonschema2mk --global
      - sudo npm install format-graphql
      - go mod download
      - pre-commit install && pre-commit install-hooks
      - pre-commit autoupdate
      - go mod tidy && go get -u ./... &> /dev/null
      - pre-commit run --show-diff-on-failure --color=always --all-files
      - task: rover:install

  precommit-full:
    desc: Lint the project against all files
    cmds:
      - pre-commit install && pre-commit install-hooks
      - pre-commit autoupdate
      - pre-commit run --show-diff-on-failure --color=always --all-files

  brew-install:
    desc: Install workstation dependencies with Brew
    cmds:
      - task: update-brew
      - echo "Installing {{.DEPS}} via homebrew..."
      - brew install {{.DEPS}} {{.CLI_ARGS}}
      - echo "Installed {{.DEPS}} via homebrew!"
    deps:
      - task: brew-installed
    status:
      - "[ -f $(brew --prefix)/bin/{{.DEPS}} ]"
    vars:
      DEPS: >-
        age helm kubernetes-cli yq jq gomplate golangci-lint openfga/tap/fga pre-commit ariga/tap/atlas rover theopenlane/tap/openlane #magic___^_^___line

  brew-installed:
    silent: true
    desc: check if Homebrew is installed
    cmds:
      - '[ -x "$(command -v brew)" ] || (echo "Homebrew is not installed, please install it from https://brew.sh" && exit 1)'

  go:dist:
    desc: Downloads a Golang distribution
    silent: true
    vars:
      GO_VERSION:
        sh: curl -sk "https://go.dev/VERSION?m=text" | head -n 1 |  sed 's/go//g'
      GO_URL: https://go.dev/dl/go{{.GO_VERSION}}.darwin-arm64.tar.gz
    cmds:
      - test -d /usr/local/go-{{.GO_VERSION}} || curl -L -o go{{.GO_VERSION}}.darwin-arm64.tar.gz {{.GO_URL}} && sudo tar -C /usr/local -xzf go{{.GO_VERSION}}.darwin-arm64.tar.gz
    status:
      - test -d /usr/local/go-{{.GO_VERSION}}

  rover:
    aliases:
      - docker:rover # adding for backwards compatibility
    desc: launches an interactive browser to navigate the configured graph schema
    cmds:
      - 'open "http://localhost:4000"'
      - rover dev --skip-update-check --skip-update -u http://localhost:17608/query -s schema.graphql -n core --elv2-license=accept

  rover:update:
    desc: updates rover, if updates are available, and launches an interactive browser to navigate the configured graph schema
    cmds:
      - 'open "http://localhost:4000"'
      - rover dev -u http://localhost:17608/query -s schema.graphql -n core --elv2-license=accept

  rover:install:
    desc: installs the rover plugins for supergraph and router
    cmds:
      - rover install --plugin supergraph@v2.8.2
      - rover install --plugin router@v1.50.0
