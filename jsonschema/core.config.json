{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/theopenlane/core/config/config.-config",
  "$defs": {
    "[]*river.PeriodicJob": {
      "items": {
        "$ref": "#/$defs/river.PeriodicJob"
      },
      "type": "array"
    },
    "[]rivertype.JobInsertMiddleware": {
      "items": true,
      "type": "array"
    },
    "[]rivertype.WorkerMiddleware": {
      "items": true,
      "type": "array"
    },
    "[]string": {
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "cache.Config": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "address": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "db": {
          "type": "integer"
        },
        "dialTimeout": {
          "type": "integer"
        },
        "readTimeout": {
          "type": "integer"
        },
        "writeTimeout": {
          "type": "integer"
        },
        "maxRetries": {
          "type": "integer"
        },
        "minIdleConns": {
          "type": "integer"
        },
        "maxIdleConns": {
          "type": "integer"
        },
        "maxActiveConns": {
          "type": "integer"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "cachecontrol.Config": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "noCacheHeaders": {
          "$ref": "#/$defs/map[string]string",
          "description": "noCacheHeaders is the header \u003c-\u003e match map pair to match in http for entity headers to remove"
        },
        "etagHeaders": {
          "$ref": "#/$defs/[]string",
          "description": "etagHeaders is the string of entity headers to remove"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Config is the config values for the cache-control middleware"
    },
    "config.Auth": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enabled authentication on the server, not recommended to disable"
        },
        "token": {
          "$ref": "#/$defs/tokens.Config",
          "description": "Token contains the token config settings for the issued tokens"
        },
        "supportedProviders": {
          "$ref": "#/$defs/[]string",
          "description": "SupportedProviders are the supported oauth providers that have been configured"
        },
        "providers": {
          "$ref": "#/$defs/handlers.OauthProviderConfig",
          "description": "Providers contains supported oauth2 providers configuration"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "token"
      ],
      "description": "Auth settings including oauth2 providers and token configuration"
    },
    "config.PondPool": {
      "properties": {
        "maxWorkers": {
          "type": "integer",
          "description": "MaxWorkers is the maximum number of workers in the pool"
        },
        "maxCapacity": {
          "type": "integer",
          "description": "MaxCapacity is the maximum number of tasks that can be queued"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "PondPool contains the settings for the goroutine pool"
    },
    "config.Server": {
      "properties": {
        "debug": {
          "type": "boolean",
          "description": "Debug enables debug mode for the server"
        },
        "dev": {
          "type": "boolean",
          "description": "Dev enables echo's dev mode options"
        },
        "listen": {
          "type": "string",
          "description": "Listen sets the listen address to serve the echo server on"
        },
        "shutdownGracePeriod": {
          "type": "integer",
          "description": "ShutdownGracePeriod sets the grace period for in flight requests before shutting down"
        },
        "readTimeout": {
          "type": "integer",
          "description": "ReadTimeout sets the maximum duration for reading the entire request including the body"
        },
        "writeTimeout": {
          "type": "integer",
          "description": "WriteTimeout sets the maximum duration before timing out writes of the response"
        },
        "idleTimeout": {
          "type": "integer",
          "description": "IdleTimeout sets the maximum amount of time to wait for the next request when keep-alives are enabled"
        },
        "readHeaderTimeout": {
          "type": "integer",
          "description": "ReadHeaderTimeout sets the amount of time allowed to read request headers"
        },
        "tls": {
          "$ref": "#/$defs/config.TLS",
          "description": "TLS contains the tls configuration settings"
        },
        "cors": {
          "$ref": "#/$defs/cors.Config",
          "description": "CORS contains settings to allow cross origin settings and insecure cookies"
        },
        "secure": {
          "$ref": "#/$defs/secure.Config",
          "description": "Secure contains settings for the secure middleware"
        },
        "redirects": {
          "$ref": "#/$defs/redirect.Config",
          "description": "Redirect contains settings for the redirect middleware"
        },
        "cacheControl": {
          "$ref": "#/$defs/cachecontrol.Config",
          "description": "CacheControl contains settings for the cache control middleware"
        },
        "mime": {
          "$ref": "#/$defs/mime.Config",
          "description": "Mime contains settings for the mime middleware"
        },
        "graphPool": {
          "$ref": "#/$defs/config.PondPool",
          "description": "GraphPool contains settings for the goroutine pool used by the graph resolvers"
        },
        "enableGraphExtensions": {
          "type": "boolean",
          "description": "EnableGraphExtensions enables the graph extensions for the graph resolvers"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "listen"
      ],
      "description": "Server settings for the echo server"
    },
    "config.TLS": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enabled turns on TLS settings for the server"
        },
        "certFile": {
          "type": "string",
          "description": "CertFile location for the TLS server"
        },
        "certKey": {
          "type": "string",
          "description": "CertKey file location for the TLS server"
        },
        "autoCert": {
          "type": "boolean",
          "description": "AutoCert generates the cert with letsencrypt, this does not work on localhost"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "TLS settings for the server for secure connections"
    },
    "cors.Config": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable or disable the CORS middleware"
        },
        "prefixes": {
          "$ref": "#/$defs/map[string][]string",
          "description": "Prefixes is a map of prefixes to allowed origins"
        },
        "allowOrigins": {
          "$ref": "#/$defs/[]string",
          "description": "AllowOrigins is a list of allowed origins"
        },
        "cookieInsecure": {
          "type": "boolean",
          "description": "CookieInsecure sets the cookie to be insecure"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Config holds the cors configuration settings"
    },
    "emailtemplates.Config": {
      "properties": {
        "companyName": {
          "type": "string"
        },
        "companyAddress": {
          "type": "string"
        },
        "corporation": {
          "type": "string"
        },
        "fromEmail": {
          "type": "string"
        },
        "supportEmail": {
          "type": "string"
        },
        "logoURL": {
          "type": "string"
        },
        "urls": {
          "$ref": "#/$defs/emailtemplates.URLConfig"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "emailtemplates.URLConfig": {
      "properties": {
        "root": {
          "type": "string"
        },
        "product": {
          "type": "string"
        },
        "docs": {
          "type": "string"
        },
        "verify": {
          "type": "string"
        },
        "invite": {
          "type": "string"
        },
        "reset": {
          "type": "string"
        },
        "verifySubscriber": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "entconfig.Config": {
      "properties": {
        "flags": {
          "$ref": "#/$defs/entconfig.Flags",
          "description": "flags for the server"
        },
        "entityTypes": {
          "$ref": "#/$defs/[]string",
          "description": "EntityTypes is the list of entity types to create by default for the organization"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Config holds the configuration for the ent server"
    },
    "entconfig.Flags": {
      "properties": {
        "useListUserService": {
          "type": "boolean",
          "description": "use list services endpoint for object access"
        },
        "useListObjectServices": {
          "type": "boolean",
          "description": "use list object services endpoint for object access"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Flags contains the flags for the server to allow use to test different code paths"
    },
    "entx.Config": {
      "properties": {
        "debug": {
          "type": "boolean",
          "description": "debug enables printing the debug database logs"
        },
        "databaseName": {
          "type": "string",
          "description": "the name of the database to use with otel tracing"
        },
        "driverName": {
          "type": "string",
          "description": "sql driver name"
        },
        "multiWrite": {
          "type": "boolean",
          "description": "enables writing to two databases simultaneously"
        },
        "primaryDbSource": {
          "type": "string",
          "description": "dsn of the primary database"
        },
        "secondaryDbSource": {
          "type": "string",
          "description": "dsn of the secondary database if multi-write is enabled"
        },
        "cacheTTL": {
          "type": "integer",
          "description": "cache results for subsequent requests"
        },
        "runMigrations": {
          "type": "boolean",
          "description": "run migrations on startup"
        },
        "migrationProvider": {
          "type": "string",
          "description": "migration provider to use for running migrations"
        },
        "enableHistory": {
          "type": "boolean",
          "description": "enable history data to be logged to the database"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "primaryDbSource"
      ]
    },
    "fgax.Config": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "enables authorization checks with openFGA"
        },
        "storeName": {
          "type": "string",
          "description": "name of openFGA store"
        },
        "hostUrl": {
          "type": "string",
          "description": "host url with scheme of the openFGA API"
        },
        "storeId": {
          "type": "string",
          "description": "id of openFGA store"
        },
        "modelId": {
          "type": "string",
          "description": "id of openFGA model"
        },
        "createNewModel": {
          "type": "boolean",
          "description": "force create a new model"
        },
        "modelFile": {
          "type": "string",
          "description": "path to the fga model file"
        },
        "credentials": {
          "$ref": "#/$defs/fgax.Credentials",
          "description": "credentials for the openFGA client"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "hostUrl"
      ]
    },
    "fgax.Credentials": {
      "properties": {
        "apiToken": {
          "type": "string",
          "description": "api token for the openFGA client"
        },
        "clientId": {
          "type": "string",
          "description": "client id for the openFGA client"
        },
        "clientSecret": {
          "type": "string",
          "description": "client secret for the openFGA client"
        },
        "audience": {
          "type": "string",
          "description": "audience for the openFGA client"
        },
        "issuer": {
          "type": "string",
          "description": "issuer for the openFGA client"
        },
        "scopes": {
          "type": "string",
          "description": "scopes for the openFGA client"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "github.ProviderConfig": {
      "properties": {
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "clientEndpoint": {
          "type": "string"
        },
        "scopes": {
          "$ref": "#/$defs/[]string"
        },
        "redirectUrl": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "clientId",
        "clientSecret",
        "scopes",
        "redirectUrl"
      ]
    },
    "google.ProviderConfig": {
      "properties": {
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "clientEndpoint": {
          "type": "string"
        },
        "scopes": {
          "$ref": "#/$defs/[]string"
        },
        "redirectUrl": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "clientId",
        "clientSecret",
        "scopes",
        "redirectUrl"
      ]
    },
    "handlers.OauthProviderConfig": {
      "properties": {
        "redirectUrl": {
          "type": "string",
          "description": "RedirectURL is the URL that the OAuth2 client will redirect to after authentication is complete"
        },
        "github": {
          "$ref": "#/$defs/github.ProviderConfig",
          "description": "Github contains the configuration settings for the Github Oauth Provider"
        },
        "google": {
          "$ref": "#/$defs/google.ProviderConfig",
          "description": "Google contains the configuration settings for the Google Oauth Provider"
        },
        "webauthn": {
          "$ref": "#/$defs/webauthn.ProviderConfig",
          "description": "Webauthn contains the configuration settings for the Webauthn Oauth Provider"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "OauthProviderConfig represents the configuration for OAuth providers such as Github and Google"
    },
    "map[string][]string": {
      "additionalProperties": {
        "$ref": "#/$defs/[]string"
      },
      "type": "object"
    },
    "map[string]river.QueueConfig": {
      "additionalProperties": {
        "$ref": "#/$defs/river.QueueConfig"
      },
      "type": "object"
    },
    "map[string]string": {
      "additionalProperties": {
        "type": "string"
      },
      "type": "object"
    },
    "mime.Config": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enabled indicates if the mime middleware should be enabled"
        },
        "mimeTypesFile": {
          "type": "string",
          "description": "MimeTypesFile is the file to load mime types from"
        },
        "defaultContentType": {
          "type": "string",
          "description": "DefaultContentType is the default content type to set if no mime type is found"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Config defines the config for Mime middleware"
    },
    "otelx.Config": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "provider": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "stdout": {
          "$ref": "#/$defs/otelx.StdOut"
        },
        "otlp": {
          "$ref": "#/$defs/otelx.OTLP"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "otelx.OTLP": {
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "insecure": {
          "type": "boolean"
        },
        "certificate": {
          "type": "string"
        },
        "headers": {
          "$ref": "#/$defs/[]string"
        },
        "compression": {
          "type": "string"
        },
        "timeout": {
          "type": "integer"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "otelx.StdOut": {
      "properties": {
        "pretty": {
          "type": "boolean"
        },
        "disableTimestamp": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ratelimit.Config": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "limit": {
          "type": "number"
        },
        "burst": {
          "type": "integer"
        },
        "expires": {
          "type": "integer"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Config defines the configuration settings for the default rate limiter"
    },
    "redirect.Config": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enabled indicates if the redirect middleware should be enabled"
        },
        "redirects": {
          "$ref": "#/$defs/map[string]string",
          "description": "Redirects is a map of paths to redirect to"
        },
        "code": {
          "type": "integer",
          "description": "Code is the HTTP status code to use for the redirect"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Config contains the types used in executing redirects via the redirect middleware"
    },
    "river.Config": {
      "properties": {
        "AdvisoryLockPrefix": {
          "type": "integer"
        },
        "CancelledJobRetentionPeriod": {
          "type": "integer"
        },
        "CompletedJobRetentionPeriod": {
          "type": "integer"
        },
        "DiscardedJobRetentionPeriod": {
          "type": "integer"
        },
        "ErrorHandler": true,
        "FetchCooldown": {
          "type": "integer"
        },
        "FetchPollInterval": {
          "type": "integer"
        },
        "ID": {
          "type": "string"
        },
        "JobCleanerTimeout": {
          "type": "integer"
        },
        "JobInsertMiddleware": {
          "$ref": "#/$defs/[]rivertype.JobInsertMiddleware"
        },
        "JobTimeout": {
          "type": "integer"
        },
        "Logger": {
          "$ref": "#/$defs/slog.Logger"
        },
        "MaxAttempts": {
          "type": "integer"
        },
        "PeriodicJobs": {
          "$ref": "#/$defs/[]*river.PeriodicJob"
        },
        "PollOnly": {
          "type": "boolean"
        },
        "Queues": {
          "$ref": "#/$defs/map[string]river.QueueConfig"
        },
        "ReindexerSchedule": true,
        "RescueStuckJobsAfter": {
          "type": "integer"
        },
        "RetryPolicy": true,
        "TestOnly": {
          "type": "boolean"
        },
        "Workers": {
          "$ref": "#/$defs/river.Workers"
        },
        "WorkerMiddleware": {
          "$ref": "#/$defs/[]rivertype.WorkerMiddleware"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "river.PeriodicJob": {
      "properties": {},
      "additionalProperties": false,
      "type": "object"
    },
    "river.QueueConfig": {
      "properties": {
        "MaxWorkers": {
          "type": "integer"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "river.Workers": {
      "properties": {},
      "additionalProperties": false,
      "type": "object"
    },
    "riverqueue.Config": {
      "properties": {
        "connectionURI": {
          "type": "string"
        },
        "runMigrations": {
          "type": "boolean"
        },
        "riverConf": {
          "$ref": "#/$defs/river.Config"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "secure.Config": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enabled indicates if the secure middleware should be enabled"
        },
        "xssprotection": {
          "type": "string",
          "description": "XSSProtection is the value to set the X-XSS-Protection header to - default is 1; mode=block"
        },
        "contenttypenosniff": {
          "type": "string",
          "description": "ContentTypeNosniff is the value to set the X-Content-Type-Options header to - default is nosniff"
        },
        "xframeoptions": {
          "type": "string",
          "description": "XFrameOptions is the value to set the X-Frame-Options header to - default is SAMEORIGIN"
        },
        "hstspreloadenabled": {
          "type": "boolean",
          "description": "HSTSPreloadEnabled is a boolean to enable HSTS preloading - default is false"
        },
        "hstsmaxage": {
          "type": "integer",
          "description": "HSTSMaxAge is the max age to set the HSTS header to - default is 31536000"
        },
        "contentsecuritypolicy": {
          "type": "string",
          "description": "ContentSecurityPolicy is the value to set the Content-Security-Policy header to - default is default-src 'self'"
        },
        "referrerpolicy": {
          "type": "string",
          "description": "ReferrerPolicy is the value to set the Referrer-Policy header to - default is same-origin"
        },
        "cspreportonly": {
          "type": "boolean",
          "description": "CSPReportOnly is a boolean to enable the Content-Security-Policy-Report-Only header - default is false"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Config contains the types used in the mw middleware"
    },
    "sessions.Config": {
      "properties": {
        "signingKey": {
          "type": "string"
        },
        "encryptionKey": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "slog.Logger": {
      "properties": {},
      "additionalProperties": false,
      "type": "object"
    },
    "tokens.Config": {
      "properties": {
        "kid": {
          "type": "string"
        },
        "audience": {
          "type": "string"
        },
        "refreshAudience": {
          "type": "string"
        },
        "issuer": {
          "type": "string"
        },
        "accessDuration": {
          "type": "integer"
        },
        "refreshDuration": {
          "type": "integer"
        },
        "refreshOverlap": {
          "type": "integer"
        },
        "jwksEndpoint": {
          "type": "string"
        },
        "keys": {
          "$ref": "#/$defs/map[string]string"
        },
        "generateKeys": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "kid",
        "audience",
        "issuer",
        "keys"
      ]
    },
    "totp.Config": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "codeLength": {
          "type": "integer"
        },
        "issuer": {
          "type": "string"
        },
        "redis": {
          "type": "boolean"
        },
        "secret": {
          "type": "string"
        },
        "recoveryCodeCount": {
          "type": "integer"
        },
        "recoveryCodeLength": {
          "type": "integer"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "webauthn.ProviderConfig": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "relyingPartyId": {
          "type": "string"
        },
        "requestOrigins": {
          "$ref": "#/$defs/[]string"
        },
        "maxDevices": {
          "type": "integer"
        },
        "enforceTimeout": {
          "type": "boolean"
        },
        "timeout": {
          "type": "integer"
        },
        "debug": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "displayName",
        "relyingPartyId",
        "requestOrigins"
      ]
    }
  },
  "properties": {
    "refreshInterval": {
      "type": "integer",
      "description": "RefreshInterval determines how often to reload the config"
    },
    "server": {
      "$ref": "#/$defs/config.Server",
      "description": "Server contains the echo server settings"
    },
    "entConfig": {
      "$ref": "#/$defs/entconfig.Config",
      "description": "EntConfig contains the ent configuration used by the ent middleware"
    },
    "auth": {
      "$ref": "#/$defs/config.Auth",
      "description": "Auth contains the authentication token settings and provider(s)"
    },
    "authz": {
      "$ref": "#/$defs/fgax.Config",
      "description": "Authz contains the authorization settings for fine grained access control"
    },
    "db": {
      "$ref": "#/$defs/entx.Config",
      "description": "DB contains the database configuration for the ent client"
    },
    "jobQueue": {
      "$ref": "#/$defs/riverqueue.Config",
      "description": "JobQueue contains the configuration for the job queue (river) client"
    },
    "redis": {
      "$ref": "#/$defs/cache.Config",
      "description": "Redis contains the redis configuration for the key-value store"
    },
    "tracer": {
      "$ref": "#/$defs/otelx.Config",
      "description": "Tracer contains the tracing config for opentelemetry"
    },
    "email": {
      "$ref": "#/$defs/emailtemplates.Config",
      "description": "Email contains email sending configuration for the server"
    },
    "sessions": {
      "$ref": "#/$defs/sessions.Config",
      "description": "Sessions config for user sessions and cookies"
    },
    "totp": {
      "$ref": "#/$defs/totp.Config",
      "description": "TOTP contains the configuration for the TOTP provider"
    },
    "ratelimit": {
      "$ref": "#/$defs/ratelimit.Config",
      "description": "Ratelimit contains the configuration for the rate limiter"
    }
  },
  "additionalProperties": false,
  "type": "object",
  "description": "Config contains the configuration for the core server"
}