version: "3"

env:
  DEFAULT_USER_EMAIL: "mitb@theopenlane.io"
  ADMIN_USER_EMAIL: "admin@admin.theopenlane.io"
  DEFAULT_ORG_NAME: "meowmeow"
  OPENLANE_API_HOST: "http://localhost:17608"

tasks:
  default:
    silent: true
    cmds:
      - task --list
  # === Core Development Tasks ===
  generate:
    desc: generates a new cli cmd
    interactive: true
    cmds:
      - go run ../../pkg/gencmd/generate/main.go generate

  generate:enum:
    desc: generates a new enum
    interactive: true
    cmds:
      - go run ../../pkg/genenum/cmd/main.go

  # === Basic User Management ===
  user:register:
    desc: register and verify a new user
    aliases: [register]
    cmds:
      - curl http://localhost:17608/v1/verify?token={{.VERIFY_TOKEN}}
    vars:
      VERIFY_TOKEN:
        sh: go run main.go register --email="{{ .EMAIL_ADDRESS | default .DEFAULT_USER_EMAIL }}" --first-name="Test" --last-name="User" --password="mattisthebest1234" | jq -r .token

  user:login:
    desc: login an existing user
    aliases: [login]
    env:
      CORE_PASSWORD: mattisthebest1234
    cmds:
      - go run main.go login -u {{ .EMAIL_ADDRESS | default .DEFAULT_USER_EMAIL }}

  org:create:
    desc: create an organization for the current user
    aliases: [org]
    cmds:
      - go run main.go org create -n {{ .ORG_NAME | default .DEFAULT_ORG_NAME }} -d "Test organization"

  org:get:
    output: true
    silent: true
    desc: a task to get the current organization
    cmds:
      - go run main.go org get -c -z json | jq -r '.organization.id'

  user:setup:
    desc: complete user setup with default privileges
    cmds:
      - task: user:register
      - task: user:login
      - task: org:create
      - task: token:create

  # === Admin Setup (for Impersonation) ===
  admin:setup:
    desc: complete admin user setup with system admin privileges
    cmds:
      - task: user:register
        vars:
          EMAIL_ADDRESS: "{{ .ADMIN_USER_EMAIL }}"
      - task: user:login
        vars:
          EMAIL_ADDRESS: "{{ .ADMIN_USER_EMAIL }}"
      - task: org:create
        vars:
          ORG_NAME: "admin-org"
      - task: token:create
      - task: admin:grant:fga

  token:create:
    desc: create PAT for the user
    cmds:
      - go run main.go pat create -n "generated-token" -o {{.ORG_ID}}
    vars:
      ORG_ID:
        sh: task org:get

  admin:grant:fga:
    desc: grant system admin FGA privileges
    internal: true
    vars:
      FGA_API_TOKEN: '{{ .FGA_API_TOKEN | default "QKwHEmWX99RnFh28eSRJ3GWlfb2FQkL7toh1GJpzch1mMkVeMg" }}'
      STORE_ID:
        sh: fga store list --api-token={{ .FGA_API_TOKEN }} | jq -r '.stores.[].id'
      USER_ID:
        sh: ../../openlane-cli user get -z json --host {{ .OPENLANE_API_HOST }} | jq -r '.self.id'
    cmds:
      - fga tuple write --store-id={{ .STORE_ID }} user:{{ .USER_ID }} system_admin system:openlane_core --api-token={{ .FGA_API_TOKEN }}

  admin:token:get:
    desc: get the admin token for use in demos
    aliases: [admin-token]
    env:
      CORE_PASSWORD: mattisthebest1234
    cmds:
      - go run main.go login -u {{ .ADMIN_USER_EMAIL }}
      - go run main.go pat get -z json | jq -r '.personalAccessTokens.edges[-1].node.token'

  admin:token:store:
    desc: store admin token in environment file for demos
    env:
      CORE_PASSWORD: mattisthebest1234
    cmds:
      - go run main.go login -u {{ .ADMIN_USER_EMAIL }}
      - echo "OPENLANE_SYSTEM_ADMIN_TOKEN=$(go run main.go pat get -z json | jq -r '.personalAccessTokens.edges[-1].node.token')" > .env-admin-token

  # === Target User Setup (for Impersonation Testing) ===
  target:setup:
    desc: create target users for impersonation testing
    cmds:
      - task: user:register
        vars:
          EMAIL_ADDRESS: "target1@example.com"
      - task: user:login
        vars:
          EMAIL_ADDRESS: "target1@example.com"
      - task: org:create
        vars:
          ORG_NAME: "target1-org"
      - task: user:register
        vars:
          EMAIL_ADDRESS: "target2@example.com"
      - task: user:login
        vars:
          EMAIL_ADDRESS: "target2@example.com"
      - task: org:create
        vars:
          ORG_NAME: "target2-org"

  target:list:
    desc: list available target users for impersonation
    env:
      CORE_PASSWORD: mattisthebest1234
    cmds:
      - task: user:login
        vars:
          EMAIL_ADDRESS: "{{ .ADMIN_USER_EMAIL }}"
      - go run main.go user get -z json | jq -r '.users.edges[] | "  " + .node.id + " - " + .node.email'

  # === Impersonation Demo ===
  demo:impersonation:
    desc: open the impersonation demo UI
    cmds:
      - open "../../demo/impersonation/index.html" || echo "Open the file manually in your browser"

  demo:setup:all:
    desc: complete setup for impersonation demo (admin + targets)
    cmds:
      - task: admin:setup
      - task: target:setup
      - task: admin:token:store

  # === Quick Start ===
  quickstart:
    desc: quick setup and demo launch
    aliases: [start]
    cmds:
      - task: demo:setup:all
      - task: demo:impersonation

  # === Testing Utilities ===
  test:connection:
    desc: test API connection
    cmds:
      - curl -f {{ .OPENLANE_API_HOST }}/livez || echo "Server not running on {{ .OPENLANE_API_HOST }}"

  test:admin:token:
    desc: test admin token validity
    vars:
      ADMIN_TOKEN:
        sh: task admin:token:get
    cmds:
      - 'curl -H "Authorization: Bearer {{ .ADMIN_TOKEN }}" {{ .OPENLANE_API_HOST }}/v1/users/me | jq .'

  # === Cleanup ===
  clean:
    desc: clean up demo files and tokens
    cmds:
      - rm -f .env-admin-token


  # === Legacy/Advanced (Hidden) ===
  generate:all:history:
    desc: generates cli commands for all history schemas
    internal: true
    vars:
      SCHEMAS:
        sh: ls -d ../../query/* | cut -f1 |grep history | sed -e "s/query\///" |sed -e "s/.graphql//" | sed -e "s/history/History/" | sed -e "s/..\/..\///"
    cmds:
      - for: {var: SCHEMAS, as: SCHEMA}
        cmd: go run ../../pkg/gencmd/generate/main.go generate --name={{ .SCHEMA }} --read-only

  template:create:
    desc: create root templates for all models
    internal: true
    vars:
      MODELS:
        sh: ls -d ../../jsonschema/models/* | cut -f5 -d'/'
    cmds:
      - for: {var: MODELS, as: MODEL}
        cmd: go run main.go template create -n {{ .MODEL }} -t ROOTTEMPLATE --jsonconfig="../../jsonschema/models/{{ .MODEL }}/generate/{{ .MODEL }}.json"
