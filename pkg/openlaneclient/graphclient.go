// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package openlaneclient

import (
	"context"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/Yamashou/gqlgenc/clientv2"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"
	"github.com/theopenlane/entx/history"
)

type OpenlaneGraphClient interface {
	CreateBulkCSVActionPlan(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVActionPlan, error)
	CreateBulkActionPlan(ctx context.Context, input []*CreateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkActionPlan, error)
	CreateActionPlan(ctx context.Context, input CreateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*CreateActionPlan, error)
	DeleteActionPlan(ctx context.Context, deleteActionPlanID string, interceptors ...clientv2.RequestInterceptor) (*DeleteActionPlan, error)
	GetAllActionPlans(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllActionPlans, error)
	GetActionPlanByID(ctx context.Context, actionPlanID string, interceptors ...clientv2.RequestInterceptor) (*GetActionPlanByID, error)
	GetActionPlans(ctx context.Context, first *int64, last *int64, where *ActionPlanWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetActionPlans, error)
	UpdateActionPlan(ctx context.Context, updateActionPlanID string, input UpdateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*UpdateActionPlan, error)
	GetAllActionPlanHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllActionPlanHistories, error)
	GetActionPlanHistories(ctx context.Context, first *int64, last *int64, where *ActionPlanHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetActionPlanHistories, error)
	CreateAPIToken(ctx context.Context, input CreateAPITokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateAPIToken, error)
	CreateBulkAPIToken(ctx context.Context, input []*CreateAPITokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkAPIToken, error)
	CreateBulkCSVAPIToken(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVAPIToken, error)
	DeleteAPIToken(ctx context.Context, deleteAPITokenID string, interceptors ...clientv2.RequestInterceptor) (*DeleteAPIToken, error)
	GetAllAPITokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllAPITokens, error)
	GetAPITokenByID(ctx context.Context, apiTokenID string, interceptors ...clientv2.RequestInterceptor) (*GetAPITokenByID, error)
	GetAPITokens(ctx context.Context, first *int64, last *int64, where *APITokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetAPITokens, error)
	UpdateAPIToken(ctx context.Context, updateAPITokenID string, input UpdateAPITokenInput, interceptors ...clientv2.RequestInterceptor) (*UpdateAPIToken, error)
	CreateBulkCSVAsset(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVAsset, error)
	CreateBulkAsset(ctx context.Context, input []*CreateAssetInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkAsset, error)
	CreateAsset(ctx context.Context, input CreateAssetInput, interceptors ...clientv2.RequestInterceptor) (*CreateAsset, error)
	DeleteAsset(ctx context.Context, deleteAssetID string, interceptors ...clientv2.RequestInterceptor) (*DeleteAsset, error)
	GetAllAssets(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllAssets, error)
	GetAssetByID(ctx context.Context, assetID string, interceptors ...clientv2.RequestInterceptor) (*GetAssetByID, error)
	GetAssets(ctx context.Context, first *int64, last *int64, where *AssetWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetAssets, error)
	UpdateAsset(ctx context.Context, updateAssetID string, input UpdateAssetInput, interceptors ...clientv2.RequestInterceptor) (*UpdateAsset, error)
	GetAllAssetHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllAssetHistories, error)
	GetAssetHistories(ctx context.Context, first *int64, last *int64, where *AssetHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetAssetHistories, error)
	CreateBulkCSVContact(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVContact, error)
	CreateBulkContact(ctx context.Context, input []*CreateContactInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkContact, error)
	CreateContact(ctx context.Context, input CreateContactInput, interceptors ...clientv2.RequestInterceptor) (*CreateContact, error)
	DeleteContact(ctx context.Context, deleteContactID string, interceptors ...clientv2.RequestInterceptor) (*DeleteContact, error)
	GetAllContacts(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllContacts, error)
	GetContactByID(ctx context.Context, contactID string, interceptors ...clientv2.RequestInterceptor) (*GetContactByID, error)
	GetContacts(ctx context.Context, first *int64, last *int64, where *ContactWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetContacts, error)
	UpdateContact(ctx context.Context, updateContactID string, input UpdateContactInput, interceptors ...clientv2.RequestInterceptor) (*UpdateContact, error)
	GetAllContactHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllContactHistories, error)
	GetContactHistories(ctx context.Context, first *int64, last *int64, where *ContactHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetContactHistories, error)
	CreateBulkCSVControl(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVControl, error)
	CreateBulkControl(ctx context.Context, input []*CreateControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkControl, error)
	CreateControl(ctx context.Context, input CreateControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateControl, error)
	DeleteControl(ctx context.Context, deleteControlID string, interceptors ...clientv2.RequestInterceptor) (*DeleteControl, error)
	GetAllControls(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControls, error)
	GetControlByID(ctx context.Context, controlID string, interceptors ...clientv2.RequestInterceptor) (*GetControlByID, error)
	GetControls(ctx context.Context, first *int64, last *int64, where *ControlWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControls, error)
	UpdateControl(ctx context.Context, updateControlID string, input UpdateControlInput, interceptors ...clientv2.RequestInterceptor) (*UpdateControl, error)
	CreateControlsByClone(ctx context.Context, input CloneControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateControlsByClone, error)
	CreateControlsByCloneReturnID(ctx context.Context, input CloneControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateControlsByCloneReturnID, error)
	GetControlCategories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetControlCategories, error)
	GetControlCategoriesWithFramework(ctx context.Context, where *ControlWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlCategoriesWithFramework, error)
	GetControlsGroupByCategory(ctx context.Context, first *int64, last *int64, after *string, before *string, where *ControlWhereInput, orderBy []*ControlOrder, category *string, interceptors ...clientv2.RequestInterceptor) (*GetControlsGroupByCategory, error)
	GetControlSubcategories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetControlSubcategories, error)
	GetControlSubcategoriesWithFramework(ctx context.Context, where *ControlWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlSubcategoriesWithFramework, error)
	GetAllControlHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlHistories, error)
	GetControlHistories(ctx context.Context, first *int64, last *int64, where *ControlHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlHistories, error)
	CreateBulkCSVControlImplementation(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVControlImplementation, error)
	CreateBulkControlImplementation(ctx context.Context, input []*CreateControlImplementationInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkControlImplementation, error)
	CreateControlImplementation(ctx context.Context, input CreateControlImplementationInput, interceptors ...clientv2.RequestInterceptor) (*CreateControlImplementation, error)
	DeleteControlImplementation(ctx context.Context, deleteControlImplementationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteControlImplementation, error)
	GetAllControlImplementations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlImplementations, error)
	GetControlImplementationByID(ctx context.Context, controlImplementationID string, interceptors ...clientv2.RequestInterceptor) (*GetControlImplementationByID, error)
	GetControlImplementations(ctx context.Context, first *int64, last *int64, where *ControlImplementationWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlImplementations, error)
	UpdateControlImplementation(ctx context.Context, updateControlImplementationID string, input UpdateControlImplementationInput, interceptors ...clientv2.RequestInterceptor) (*UpdateControlImplementation, error)
	GetAllControlImplementationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlImplementationHistories, error)
	GetControlImplementationHistories(ctx context.Context, first *int64, last *int64, where *ControlImplementationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlImplementationHistories, error)
	CreateBulkControlObjective(ctx context.Context, input []*CreateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkControlObjective, error)
	CreateBulkCSVControlObjective(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVControlObjective, error)
	CreateControlObjective(ctx context.Context, input CreateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*CreateControlObjective, error)
	DeleteControlObjective(ctx context.Context, deleteControlObjectiveID string, interceptors ...clientv2.RequestInterceptor) (*DeleteControlObjective, error)
	GetAllControlObjectives(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlObjectives, error)
	GetControlObjectiveByID(ctx context.Context, controlObjectiveID string, interceptors ...clientv2.RequestInterceptor) (*GetControlObjectiveByID, error)
	GetControlObjectives(ctx context.Context, first *int64, last *int64, where *ControlObjectiveWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlObjectives, error)
	UpdateControlObjective(ctx context.Context, updateControlObjectiveID string, input UpdateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*UpdateControlObjective, error)
	GetAllControlObjectiveHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlObjectiveHistories, error)
	GetControlObjectiveHistories(ctx context.Context, first *int64, last *int64, where *ControlObjectiveHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlObjectiveHistories, error)
	CreateBulkCSVCustomDomain(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVCustomDomain, error)
	CreateBulkCustomDomain(ctx context.Context, input []*CreateCustomDomainInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCustomDomain, error)
	CreateCustomDomain(ctx context.Context, input CreateCustomDomainInput, interceptors ...clientv2.RequestInterceptor) (*CreateCustomDomain, error)
	DeleteCustomDomain(ctx context.Context, deleteCustomDomainID string, interceptors ...clientv2.RequestInterceptor) (*DeleteCustomDomain, error)
	GetAllCustomDomains(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllCustomDomains, error)
	GetCustomDomainByID(ctx context.Context, customDomainID string, interceptors ...clientv2.RequestInterceptor) (*GetCustomDomainByID, error)
	GetCustomDomains(ctx context.Context, first *int64, last *int64, where *CustomDomainWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetCustomDomains, error)
	UpdateCustomDomain(ctx context.Context, updateCustomDomainID string, input UpdateCustomDomainInput, interceptors ...clientv2.RequestInterceptor) (*UpdateCustomDomain, error)
	GetAllCustomDomainHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllCustomDomainHistories, error)
	GetCustomDomainHistories(ctx context.Context, first *int64, last *int64, where *CustomDomainHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetCustomDomainHistories, error)
	CreateBulkCSVDNSVerification(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVDNSVerification, error)
	CreateBulkDNSVerification(ctx context.Context, input []*CreateDNSVerificationInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkDNSVerification, error)
	CreateDNSVerification(ctx context.Context, input CreateDNSVerificationInput, interceptors ...clientv2.RequestInterceptor) (*CreateDNSVerification, error)
	DeleteDNSVerification(ctx context.Context, deleteDNSVerificationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteDNSVerification, error)
	GetAllDNSVerifications(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllDNSVerifications, error)
	GetDNSVerificationByID(ctx context.Context, dnsVerificationID string, interceptors ...clientv2.RequestInterceptor) (*GetDNSVerificationByID, error)
	GetDNSVerifications(ctx context.Context, first *int64, last *int64, where *DNSVerificationWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetDNSVerifications, error)
	UpdateDNSVerification(ctx context.Context, updateDNSVerificationID string, input UpdateDNSVerificationInput, interceptors ...clientv2.RequestInterceptor) (*UpdateDNSVerification, error)
	GetAllDNSVerificationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllDNSVerificationHistories, error)
	GetDNSVerificationHistories(ctx context.Context, first *int64, last *int64, where *DNSVerificationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetDNSVerificationHistories, error)
	CreateBulkCSVDocumentData(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVDocumentData, error)
	CreateBulkDocumentData(ctx context.Context, input []*CreateDocumentDataInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkDocumentData, error)
	CreateDocumentData(ctx context.Context, input CreateDocumentDataInput, interceptors ...clientv2.RequestInterceptor) (*CreateDocumentData, error)
	DeleteDocumentData(ctx context.Context, deleteDocumentDataID string, interceptors ...clientv2.RequestInterceptor) (*DeleteDocumentData, error)
	GetDocumentDataByID(ctx context.Context, documentDataID string, interceptors ...clientv2.RequestInterceptor) (*GetDocumentDataByID, error)
	UpdateDocumentData(ctx context.Context, updateDocumentDataID string, input UpdateDocumentDataInput, interceptors ...clientv2.RequestInterceptor) (*UpdateDocumentData, error)
	GetAllDocumentDataHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllDocumentDataHistories, error)
	GetDocumentDataHistories(ctx context.Context, first *int64, last *int64, where *DocumentDataHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetDocumentDataHistories, error)
	CreateBulkCSVEntity(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntity, error)
	CreateBulkEntity(ctx context.Context, input []*CreateEntityInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntity, error)
	CreateEntity(ctx context.Context, input CreateEntityInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntity, error)
	DeleteEntity(ctx context.Context, deleteEntityID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntity, error)
	GetAllEntities(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntities, error)
	GetEntities(ctx context.Context, first *int64, last *int64, where *EntityWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntities, error)
	GetEntityByID(ctx context.Context, entityID string, interceptors ...clientv2.RequestInterceptor) (*GetEntityByID, error)
	UpdateEntity(ctx context.Context, updateEntityID string, input UpdateEntityInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntity, error)
	GetAllEntityHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntityHistories, error)
	GetEntityHistories(ctx context.Context, first *int64, last *int64, where *EntityHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntityHistories, error)
	CreateBulkCSVEntityType(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntityType, error)
	CreateBulkEntityType(ctx context.Context, input []*CreateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntityType, error)
	CreateEntityType(ctx context.Context, input CreateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntityType, error)
	DeleteEntityType(ctx context.Context, deleteEntityTypeID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntityType, error)
	GetAllEntityTypes(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntityTypes, error)
	GetEntityTypeByID(ctx context.Context, entityTypeID string, interceptors ...clientv2.RequestInterceptor) (*GetEntityTypeByID, error)
	GetEntityTypes(ctx context.Context, first *int64, last *int64, where *EntityTypeWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntityTypes, error)
	UpdateEntityType(ctx context.Context, updateEntityTypeID string, input UpdateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntityType, error)
	GetAllEntityTypeHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntityTypeHistories, error)
	GetEntityTypeHistories(ctx context.Context, first *int64, last *int64, where *EntityTypeHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntityTypeHistories, error)
	CreateBulkCSVEvent(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEvent, error)
	CreateBulkEvent(ctx context.Context, input []*CreateEventInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEvent, error)
	CreateEvent(ctx context.Context, input CreateEventInput, interceptors ...clientv2.RequestInterceptor) (*CreateEvent, error)
	DeleteEvent(ctx context.Context, deleteEventID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEvent, error)
	GetAllEvents(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEvents, error)
	GetEventByID(ctx context.Context, eventID string, interceptors ...clientv2.RequestInterceptor) (*GetEventByID, error)
	GetEvents(ctx context.Context, first *int64, last *int64, where *EventWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEvents, error)
	UpdateEvent(ctx context.Context, updateEventID string, input UpdateEventInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEvent, error)
	CreateEvidence(ctx context.Context, input CreateEvidenceInput, evidenceFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateEvidence, error)
	DeleteEvidence(ctx context.Context, deleteEvidenceID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEvidence, error)
	GetAllEvidences(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEvidences, error)
	GetEvidenceByID(ctx context.Context, evidenceID string, interceptors ...clientv2.RequestInterceptor) (*GetEvidenceByID, error)
	GetEvidences(ctx context.Context, first *int64, last *int64, where *EvidenceWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEvidences, error)
	UpdateEvidence(ctx context.Context, updateEvidenceID string, input UpdateEvidenceInput, evidenceFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateEvidence, error)
	GetAllEvidenceHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEvidenceHistories, error)
	GetEvidenceHistories(ctx context.Context, first *int64, last *int64, where *EvidenceHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEvidenceHistories, error)
	CreateExport(ctx context.Context, input CreateExportInput, interceptors ...clientv2.RequestInterceptor) (*CreateExport, error)
	GetAllExports(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllExports, error)
	GetExportByID(ctx context.Context, exportID string, interceptors ...clientv2.RequestInterceptor) (*GetExportByID, error)
	GetExports(ctx context.Context, first *int64, last *int64, where *ExportWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetExports, error)
	UpdateExport(ctx context.Context, id string, input UpdateExportInput, exportFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateExport, error)
	DeleteExport(ctx context.Context, deleteExportID string, interceptors ...clientv2.RequestInterceptor) (*DeleteExport, error)
	DeleteBulkExport(ctx context.Context, ids []string, interceptors ...clientv2.RequestInterceptor) (*DeleteBulkExport, error)
	DeleteFile(ctx context.Context, deleteFileID string, interceptors ...clientv2.RequestInterceptor) (*DeleteFile, error)
	GetAllFiles(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllFiles, error)
	GetFileByID(ctx context.Context, fileID string, interceptors ...clientv2.RequestInterceptor) (*GetFileByID, error)
	GetFiles(ctx context.Context, first *int64, last *int64, where *FileWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetFiles, error)
	GetAllFileHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllFileHistories, error)
	GetFileHistories(ctx context.Context, first *int64, last *int64, where *FileHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetFileHistories, error)
	CreateBulkCSVGroup(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVGroup, error)
	CreateBulkGroup(ctx context.Context, input []*CreateGroupInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkGroup, error)
	CreateGroup(ctx context.Context, input CreateGroupInput, interceptors ...clientv2.RequestInterceptor) (*CreateGroup, error)
	DeleteGroup(ctx context.Context, deleteGroupID string, interceptors ...clientv2.RequestInterceptor) (*DeleteGroup, error)
	GetAllGroups(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroups, error)
	GetGroupByID(ctx context.Context, groupID string, interceptors ...clientv2.RequestInterceptor) (*GetGroupByID, error)
	GetGroups(ctx context.Context, first *int64, last *int64, where *GroupWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroups, error)
	UpdateGroup(ctx context.Context, updateGroupID string, input UpdateGroupInput, interceptors ...clientv2.RequestInterceptor) (*UpdateGroup, error)
	GetAllGroupHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupHistories, error)
	GetGroupHistories(ctx context.Context, first *int64, last *int64, where *GroupHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupHistories, error)
	CreateBulkCSVGroupMembership(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVGroupMembership, error)
	CreateBulkGroupMembership(ctx context.Context, input []*CreateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkGroupMembership, error)
	CreateGroupMembership(ctx context.Context, input CreateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateGroupMembership, error)
	DeleteGroupMembership(ctx context.Context, deleteGroupMembershipID string, interceptors ...clientv2.RequestInterceptor) (*DeleteGroupMembership, error)
	GetAllGroupMemberships(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupMemberships, error)
	GetGroupMembershipByID(ctx context.Context, groupMembershipID string, interceptors ...clientv2.RequestInterceptor) (*GetGroupMembershipByID, error)
	GetGroupMemberships(ctx context.Context, first *int64, last *int64, where *GroupMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupMemberships, error)
	UpdateGroupMembership(ctx context.Context, updateGroupMembershipID string, input UpdateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateGroupMembership, error)
	GetAllGroupMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupMembershipHistories, error)
	GetGroupMembershipHistories(ctx context.Context, first *int64, last *int64, where *GroupMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupMembershipHistories, error)
	CreateBulkCSVGroupSetting(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVGroupSetting, error)
	CreateBulkGroupSetting(ctx context.Context, input []*CreateGroupSettingInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkGroupSetting, error)
	CreateGroupSetting(ctx context.Context, input CreateGroupSettingInput, interceptors ...clientv2.RequestInterceptor) (*CreateGroupSetting, error)
	DeleteGroupSetting(ctx context.Context, deleteGroupSettingID string, interceptors ...clientv2.RequestInterceptor) (*DeleteGroupSetting, error)
	GetAllGroupSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupSettings, error)
	GetGroupSettingByID(ctx context.Context, groupSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetGroupSettingByID, error)
	GetGroupSettings(ctx context.Context, first *int64, last *int64, where *GroupSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupSettings, error)
	UpdateGroupSetting(ctx context.Context, updateGroupSettingID string, input UpdateGroupSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateGroupSetting, error)
	GetAllGroupSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupSettingHistories, error)
	GetGroupSettingHistories(ctx context.Context, first *int64, last *int64, where *GroupSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupSettingHistories, error)
	CreateBulkCSVHush(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVHush, error)
	CreateBulkHush(ctx context.Context, input []*CreateHushInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkHush, error)
	CreateHush(ctx context.Context, input CreateHushInput, interceptors ...clientv2.RequestInterceptor) (*CreateHush, error)
	DeleteHush(ctx context.Context, deleteHushID string, interceptors ...clientv2.RequestInterceptor) (*DeleteHush, error)
	GetAllHushes(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllHushes, error)
	GetHushByID(ctx context.Context, hushID string, interceptors ...clientv2.RequestInterceptor) (*GetHushByID, error)
	GetHushes(ctx context.Context, first *int64, last *int64, where *HushWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetHushes, error)
	UpdateHush(ctx context.Context, updateHushID string, input UpdateHushInput, interceptors ...clientv2.RequestInterceptor) (*UpdateHush, error)
	GetAllHushHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllHushHistories, error)
	GetHushHistories(ctx context.Context, first *int64, last *int64, where *HushHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetHushHistories, error)
	DeleteIntegration(ctx context.Context, deleteIntegrationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteIntegration, error)
	GetAllIntegrations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllIntegrations, error)
	GetIntegrationByID(ctx context.Context, integrationID string, interceptors ...clientv2.RequestInterceptor) (*GetIntegrationByID, error)
	GetIntegrations(ctx context.Context, first *int64, last *int64, where *IntegrationWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetIntegrations, error)
	GetAllIntegrationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllIntegrationHistories, error)
	GetIntegrationHistories(ctx context.Context, first *int64, last *int64, where *IntegrationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetIntegrationHistories, error)
	CreateBulkCSVInternalPolicy(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVInternalPolicy, error)
	CreateBulkInternalPolicy(ctx context.Context, input []*CreateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkInternalPolicy, error)
	CreateInternalPolicy(ctx context.Context, input CreateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*CreateInternalPolicy, error)
	DeleteInternalPolicy(ctx context.Context, deleteInternalPolicyID string, interceptors ...clientv2.RequestInterceptor) (*DeleteInternalPolicy, error)
	GetAllInternalPolicies(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllInternalPolicies, error)
	GetInternalPolicyByID(ctx context.Context, internalPolicyID string, interceptors ...clientv2.RequestInterceptor) (*GetInternalPolicyByID, error)
	GetInternalPolicies(ctx context.Context, first *int64, last *int64, where *InternalPolicyWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetInternalPolicies, error)
	UpdateInternalPolicy(ctx context.Context, updateInternalPolicyID string, input UpdateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*UpdateInternalPolicy, error)
	GetAllInternalPolicyHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllInternalPolicyHistories, error)
	GetInternalPolicyHistories(ctx context.Context, first *int64, last *int64, where *InternalPolicyHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetInternalPolicyHistories, error)
	CreateBulkCSVInvite(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVInvite, error)
	CreateBulkInvite(ctx context.Context, input []*CreateInviteInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkInvite, error)
	CreateInvite(ctx context.Context, input CreateInviteInput, interceptors ...clientv2.RequestInterceptor) (*CreateInvite, error)
	DeleteInvite(ctx context.Context, deleteInviteID string, interceptors ...clientv2.RequestInterceptor) (*DeleteInvite, error)
	GetAllInvites(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllInvites, error)
	GetInviteByID(ctx context.Context, inviteID string, interceptors ...clientv2.RequestInterceptor) (*GetInviteByID, error)
	GetInvites(ctx context.Context, first *int64, last *int64, where *InviteWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetInvites, error)
	UpdateInvite(ctx context.Context, updateInviteID string, input UpdateInviteInput, interceptors ...clientv2.RequestInterceptor) (*UpdateInvite, error)
	CreateJobResult(ctx context.Context, input CreateJobResultInput, jobResultFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateJobResult, error)
	DeleteJobResult(ctx context.Context, deleteJobResultID string, interceptors ...clientv2.RequestInterceptor) (*DeleteJobResult, error)
	GetAllJobResults(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllJobResults, error)
	GetJobResultByID(ctx context.Context, jobResultID string, interceptors ...clientv2.RequestInterceptor) (*GetJobResultByID, error)
	GetJobResults(ctx context.Context, first *int64, last *int64, where *JobResultWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetJobResults, error)
	UpdateJobResult(ctx context.Context, updateJobResultID string, input UpdateJobResultInput, jobResultFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateJobResult, error)
	CreateJobRunner(ctx context.Context, input CreateJobRunnerInput, interceptors ...clientv2.RequestInterceptor) (*CreateJobRunner, error)
	DeleteJobRunner(ctx context.Context, deleteJobRunnerID string, interceptors ...clientv2.RequestInterceptor) (*DeleteJobRunner, error)
	GetAllJobRunners(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllJobRunners, error)
	GetJobRunnerByID(ctx context.Context, jobRunnerID string, interceptors ...clientv2.RequestInterceptor) (*GetJobRunnerByID, error)
	GetJobRunners(ctx context.Context, first *int64, last *int64, where *JobRunnerWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetJobRunners, error)
	UpdateJobRunner(ctx context.Context, updateJobRunnerID string, input UpdateJobRunnerInput, interceptors ...clientv2.RequestInterceptor) (*UpdateJobRunner, error)
	CreateJobRunnerRegistrationToken(ctx context.Context, input CreateJobRunnerRegistrationTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateJobRunnerRegistrationToken, error)
	DeleteJobRunnerRegistrationToken(ctx context.Context, deleteJobRunnerRegistrationTokenID string, interceptors ...clientv2.RequestInterceptor) (*DeleteJobRunnerRegistrationToken, error)
	GetAllJobRunnerRegistrationTokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllJobRunnerRegistrationTokens, error)
	GetJobRunnerRegistrationTokenByID(ctx context.Context, jobRunnerRegistrationTokenID string, interceptors ...clientv2.RequestInterceptor) (*GetJobRunnerRegistrationTokenByID, error)
	GetJobRunnerRegistrationTokens(ctx context.Context, first *int64, last *int64, where *JobRunnerRegistrationTokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetJobRunnerRegistrationTokens, error)
	CreateJobRunnerToken(ctx context.Context, input CreateJobRunnerTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateJobRunnerToken, error)
	DeleteJobRunnerToken(ctx context.Context, deleteJobRunnerTokenID string, interceptors ...clientv2.RequestInterceptor) (*DeleteJobRunnerToken, error)
	GetAllJobRunnerTokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllJobRunnerTokens, error)
	GetJobRunnerTokenByID(ctx context.Context, jobRunnerTokenID string, interceptors ...clientv2.RequestInterceptor) (*GetJobRunnerTokenByID, error)
	GetJobRunnerTokens(ctx context.Context, first *int64, last *int64, where *JobRunnerTokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetJobRunnerTokens, error)
	CreateBulkCSVJobTemplate(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVJobTemplate, error)
	CreateBulkJobTemplate(ctx context.Context, input []*CreateJobTemplateInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkJobTemplate, error)
	CreateJobTemplate(ctx context.Context, input CreateJobTemplateInput, interceptors ...clientv2.RequestInterceptor) (*CreateJobTemplate, error)
	DeleteJobTemplate(ctx context.Context, deleteJobTemplateID string, interceptors ...clientv2.RequestInterceptor) (*DeleteJobTemplate, error)
	GetAllJobTemplates(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllJobTemplates, error)
	GetJobTemplateByID(ctx context.Context, jobTemplateID string, interceptors ...clientv2.RequestInterceptor) (*GetJobTemplateByID, error)
	GetJobTemplates(ctx context.Context, first *int64, last *int64, where *JobTemplateWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetJobTemplates, error)
	UpdateJobTemplate(ctx context.Context, updateJobTemplateID string, input UpdateJobTemplateInput, interceptors ...clientv2.RequestInterceptor) (*UpdateJobTemplate, error)
	GetAllJobTemplateHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllJobTemplateHistories, error)
	GetJobTemplateHistories(ctx context.Context, first *int64, last *int64, where *JobTemplateHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetJobTemplateHistories, error)
	CreateBulkCSVMappableDomain(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVMappableDomain, error)
	CreateBulkMappableDomain(ctx context.Context, input []*CreateMappableDomainInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkMappableDomain, error)
	CreateMappableDomain(ctx context.Context, input CreateMappableDomainInput, interceptors ...clientv2.RequestInterceptor) (*CreateMappableDomain, error)
	DeleteMappableDomain(ctx context.Context, deleteMappableDomainID string, interceptors ...clientv2.RequestInterceptor) (*DeleteMappableDomain, error)
	GetAllMappableDomains(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllMappableDomains, error)
	GetMappableDomainByID(ctx context.Context, mappableDomainID string, interceptors ...clientv2.RequestInterceptor) (*GetMappableDomainByID, error)
	GetMappableDomains(ctx context.Context, first *int64, last *int64, where *MappableDomainWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetMappableDomains, error)
	UpdateMappableDomain(ctx context.Context, updateMappableDomainID string, input UpdateMappableDomainInput, interceptors ...clientv2.RequestInterceptor) (*UpdateMappableDomain, error)
	GetAllMappableDomainHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllMappableDomainHistories, error)
	GetMappableDomainHistories(ctx context.Context, first *int64, last *int64, where *MappableDomainHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetMappableDomainHistories, error)
	CreateBulkCSVMappedControl(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVMappedControl, error)
	CreateBulkMappedControl(ctx context.Context, input []*CreateMappedControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkMappedControl, error)
	CreateMappedControl(ctx context.Context, input CreateMappedControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateMappedControl, error)
	DeleteMappedControl(ctx context.Context, deleteMappedControlID string, interceptors ...clientv2.RequestInterceptor) (*DeleteMappedControl, error)
	GetAllMappedControls(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllMappedControls, error)
	GetMappedControlByID(ctx context.Context, mappedControlID string, interceptors ...clientv2.RequestInterceptor) (*GetMappedControlByID, error)
	GetMappedControls(ctx context.Context, first *int64, last *int64, where *MappedControlWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetMappedControls, error)
	UpdateMappedControl(ctx context.Context, updateMappedControlID string, input UpdateMappedControlInput, interceptors ...clientv2.RequestInterceptor) (*UpdateMappedControl, error)
	GetAllMappedControlHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllMappedControlHistories, error)
	GetMappedControlHistories(ctx context.Context, first *int64, last *int64, where *MappedControlHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetMappedControlHistories, error)
	CreateBulkCSVNarrative(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVNarrative, error)
	CreateBulkNarrative(ctx context.Context, input []*CreateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkNarrative, error)
	CreateNarrative(ctx context.Context, input CreateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*CreateNarrative, error)
	DeleteNarrative(ctx context.Context, deleteNarrativeID string, interceptors ...clientv2.RequestInterceptor) (*DeleteNarrative, error)
	GetAllNarratives(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllNarratives, error)
	GetNarrativeByID(ctx context.Context, narrativeID string, interceptors ...clientv2.RequestInterceptor) (*GetNarrativeByID, error)
	GetNarratives(ctx context.Context, first *int64, last *int64, where *NarrativeWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetNarratives, error)
	UpdateNarrative(ctx context.Context, updateNarrativeID string, input UpdateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*UpdateNarrative, error)
	GetAllNarrativeHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllNarrativeHistories, error)
	GetNarrativeHistories(ctx context.Context, first *int64, last *int64, where *NarrativeHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetNarrativeHistories, error)
	GetAllNoteHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllNoteHistories, error)
	GetNoteHistories(ctx context.Context, first *int64, last *int64, where *NoteHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetNoteHistories, error)
	CreateOnboarding(ctx context.Context, input CreateOnboardingInput, interceptors ...clientv2.RequestInterceptor) (*CreateOnboarding, error)
	CreateOrganization(ctx context.Context, input CreateOrganizationInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateOrganization, error)
	DeleteOrganization(ctx context.Context, deleteOrganizationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteOrganization, error)
	GetAllOrganizations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizations, error)
	GetOrganizationByID(ctx context.Context, organizationID string, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationByID, error)
	GetOrganizations(ctx context.Context, first *int64, last *int64, where *OrganizationWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizations, error)
	UpdateOrganization(ctx context.Context, updateOrganizationID string, input UpdateOrganizationInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateOrganization, error)
	GetAllOrganizationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizationHistories, error)
	GetOrganizationHistories(ctx context.Context, first *int64, last *int64, where *OrganizationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationHistories, error)
	CreateBulkCSVOrganizationSetting(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVOrganizationSetting, error)
	CreateBulkOrganizationSetting(ctx context.Context, input []*CreateOrganizationSettingInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkOrganizationSetting, error)
	CreateOrganizationSetting(ctx context.Context, input CreateOrganizationSettingInput, interceptors ...clientv2.RequestInterceptor) (*CreateOrganizationSetting, error)
	DeleteOrganizationSetting(ctx context.Context, deleteOrganizationSettingID string, interceptors ...clientv2.RequestInterceptor) (*DeleteOrganizationSetting, error)
	GetAllOrganizationSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizationSettings, error)
	GetOrganizationSettingByID(ctx context.Context, organizationSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettingByID, error)
	GetOrganizationSettings(ctx context.Context, first *int64, last *int64, where *OrganizationSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettings, error)
	UpdateOrganizationSetting(ctx context.Context, updateOrganizationSettingID string, input UpdateOrganizationSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateOrganizationSetting, error)
	GetAllOrganizationSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizationSettingHistories, error)
	GetOrganizationSettingHistories(ctx context.Context, first *int64, last *int64, where *OrganizationSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettingHistories, error)
	CreateBulkCSVOrgMembership(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVOrgMembership, error)
	CreateBulkOrgMembership(ctx context.Context, input []*CreateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkOrgMembership, error)
	CreateOrgMembership(ctx context.Context, input CreateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateOrgMembership, error)
	DeleteOrgMembership(ctx context.Context, deleteOrgMembershipID string, interceptors ...clientv2.RequestInterceptor) (*DeleteOrgMembership, error)
	GetAllOrgMemberships(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrgMemberships, error)
	GetOrgMembershipByID(ctx context.Context, orgMembershipID string, interceptors ...clientv2.RequestInterceptor) (*GetOrgMembershipByID, error)
	GetOrgMemberships(ctx context.Context, first *int64, last *int64, where *OrgMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgMemberships, error)
	UpdateOrgMembership(ctx context.Context, updateOrgMembershipID string, input UpdateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateOrgMembership, error)
	GetAllOrgMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrgMembershipHistories, error)
	GetOrgMembershipHistories(ctx context.Context, first *int64, last *int64, where *OrgMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgMembershipHistories, error)
	GetAllOrgSubscriptions(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrgSubscriptions, error)
	GetOrgSubscriptionByID(ctx context.Context, orgSubscriptionID string, interceptors ...clientv2.RequestInterceptor) (*GetOrgSubscriptionByID, error)
	GetOrgSubscriptions(ctx context.Context, first *int64, last *int64, where *OrgSubscriptionWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgSubscriptions, error)
	GetAllOrgSubscriptionHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrgSubscriptionHistories, error)
	GetOrgSubscriptionHistories(ctx context.Context, first *int64, last *int64, where *OrgSubscriptionHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgSubscriptionHistories, error)
	CreatePersonalAccessToken(ctx context.Context, input CreatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreatePersonalAccessToken, error)
	DeletePersonalAccessToken(ctx context.Context, deletePersonalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*DeletePersonalAccessToken, error)
	GetAllPersonalAccessTokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllPersonalAccessTokens, error)
	GetPersonalAccessTokenByID(ctx context.Context, personalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*GetPersonalAccessTokenByID, error)
	GetPersonalAccessTokens(ctx context.Context, first *int64, last *int64, where *PersonalAccessTokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetPersonalAccessTokens, error)
	UpdatePersonalAccessToken(ctx context.Context, updatePersonalAccessTokenID string, input UpdatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*UpdatePersonalAccessToken, error)
	CreateBulkCSVProcedure(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVProcedure, error)
	CreateBulkProcedure(ctx context.Context, input []*CreateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkProcedure, error)
	CreateProcedure(ctx context.Context, input CreateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*CreateProcedure, error)
	CreateUploadProcedure(ctx context.Context, procedureFile graphql.Upload, ownerID *string, interceptors ...clientv2.RequestInterceptor) (*CreateUploadProcedure, error)
	DeleteProcedure(ctx context.Context, deleteProcedureID string, interceptors ...clientv2.RequestInterceptor) (*DeleteProcedure, error)
	GetAllProcedures(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProcedures, error)
	GetProcedureByID(ctx context.Context, procedureID string, interceptors ...clientv2.RequestInterceptor) (*GetProcedureByID, error)
	GetProcedures(ctx context.Context, first *int64, last *int64, where *ProcedureWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProcedures, error)
	UpdateProcedure(ctx context.Context, updateProcedureID string, input UpdateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*UpdateProcedure, error)
	GetAllProcedureHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProcedureHistories, error)
	GetProcedureHistories(ctx context.Context, first *int64, last *int64, where *ProcedureHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProcedureHistories, error)
	CreateBulkCSVProgram(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVProgram, error)
	CreateBulkProgram(ctx context.Context, input []*CreateProgramInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkProgram, error)
	CreateProgram(ctx context.Context, input CreateProgramInput, interceptors ...clientv2.RequestInterceptor) (*CreateProgram, error)
	DeleteProgram(ctx context.Context, deleteProgramID string, interceptors ...clientv2.RequestInterceptor) (*DeleteProgram, error)
	GetAllPrograms(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllPrograms, error)
	GetProgramByID(ctx context.Context, programID string, interceptors ...clientv2.RequestInterceptor) (*GetProgramByID, error)
	GetPrograms(ctx context.Context, first *int64, last *int64, where *ProgramWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetPrograms, error)
	UpdateProgram(ctx context.Context, updateProgramID string, input UpdateProgramInput, interceptors ...clientv2.RequestInterceptor) (*UpdateProgram, error)
	GetAllProgramHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProgramHistories, error)
	GetProgramHistories(ctx context.Context, first *int64, last *int64, where *ProgramHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProgramHistories, error)
	CreateBulkCSVProgramMembership(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVProgramMembership, error)
	CreateBulkProgramMembership(ctx context.Context, input []*CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkProgramMembership, error)
	CreateProgramMembership(ctx context.Context, input CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateProgramMembership, error)
	DeleteProgramMembership(ctx context.Context, deleteProgramMembershipID string, interceptors ...clientv2.RequestInterceptor) (*DeleteProgramMembership, error)
	GetAllProgramMemberships(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProgramMemberships, error)
	GetProgramMembershipByID(ctx context.Context, programMembershipID string, interceptors ...clientv2.RequestInterceptor) (*GetProgramMembershipByID, error)
	GetProgramMemberships(ctx context.Context, first *int64, last *int64, where *ProgramMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProgramMemberships, error)
	UpdateProgramMembership(ctx context.Context, updateProgramMembershipID string, input UpdateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateProgramMembership, error)
	GetAllProgramMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProgramMembershipHistories, error)
	GetProgramMembershipHistories(ctx context.Context, first *int64, last *int64, where *ProgramMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProgramMembershipHistories, error)
	CreateBulkCSVRisk(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVRisk, error)
	CreateBulkRisk(ctx context.Context, input []*CreateRiskInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkRisk, error)
	CreateRisk(ctx context.Context, input CreateRiskInput, interceptors ...clientv2.RequestInterceptor) (*CreateRisk, error)
	DeleteRisk(ctx context.Context, deleteRiskID string, interceptors ...clientv2.RequestInterceptor) (*DeleteRisk, error)
	GetAllRisks(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllRisks, error)
	GetRiskByID(ctx context.Context, riskID string, interceptors ...clientv2.RequestInterceptor) (*GetRiskByID, error)
	GetRisks(ctx context.Context, first *int64, last *int64, where *RiskWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetRisks, error)
	UpdateRisk(ctx context.Context, updateRiskID string, input UpdateRiskInput, interceptors ...clientv2.RequestInterceptor) (*UpdateRisk, error)
	GetAllRiskHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllRiskHistories, error)
	GetRiskHistories(ctx context.Context, first *int64, last *int64, where *RiskHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetRiskHistories, error)
	CreateBulkCSVScan(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVScan, error)
	CreateBulkScan(ctx context.Context, input []*CreateScanInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkScan, error)
	CreateScan(ctx context.Context, input CreateScanInput, interceptors ...clientv2.RequestInterceptor) (*CreateScan, error)
	DeleteScan(ctx context.Context, deleteScanID string, interceptors ...clientv2.RequestInterceptor) (*DeleteScan, error)
	GetAllScans(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllScans, error)
	GetScanByID(ctx context.Context, scanID string, interceptors ...clientv2.RequestInterceptor) (*GetScanByID, error)
	GetScans(ctx context.Context, first *int64, last *int64, where *ScanWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetScans, error)
	UpdateScan(ctx context.Context, updateScanID string, input UpdateScanInput, interceptors ...clientv2.RequestInterceptor) (*UpdateScan, error)
	GetAllScanHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllScanHistories, error)
	GetScanHistories(ctx context.Context, first *int64, last *int64, where *ScanHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetScanHistories, error)
	CreateBulkCSVScheduledJob(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVScheduledJob, error)
	CreateBulkScheduledJob(ctx context.Context, input []*CreateScheduledJobInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkScheduledJob, error)
	CreateScheduledJob(ctx context.Context, input CreateScheduledJobInput, interceptors ...clientv2.RequestInterceptor) (*CreateScheduledJob, error)
	DeleteScheduledJob(ctx context.Context, deleteScheduledJobID string, interceptors ...clientv2.RequestInterceptor) (*DeleteScheduledJob, error)
	GetAllScheduledJobs(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllScheduledJobs, error)
	GetScheduledJobByID(ctx context.Context, scheduledJobID string, interceptors ...clientv2.RequestInterceptor) (*GetScheduledJobByID, error)
	GetScheduledJobs(ctx context.Context, first *int64, last *int64, where *ScheduledJobWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetScheduledJobs, error)
	UpdateScheduledJob(ctx context.Context, updateScheduledJobID string, input UpdateScheduledJobInput, interceptors ...clientv2.RequestInterceptor) (*UpdateScheduledJob, error)
	GetAllScheduledJobHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllScheduledJobHistories, error)
	GetScheduledJobHistories(ctx context.Context, first *int64, last *int64, where *ScheduledJobHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetScheduledJobHistories, error)
	CreateScheduledJobRun(ctx context.Context, input CreateScheduledJobRunInput, interceptors ...clientv2.RequestInterceptor) (*CreateScheduledJobRun, error)
	DeleteScheduledJobRun(ctx context.Context, deleteScheduledJobRunID string, interceptors ...clientv2.RequestInterceptor) (*DeleteScheduledJobRun, error)
	GetAllScheduledJobRuns(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllScheduledJobRuns, error)
	GetScheduledJobRunByID(ctx context.Context, scheduledJobRunID string, interceptors ...clientv2.RequestInterceptor) (*GetScheduledJobRunByID, error)
	GetScheduledJobRuns(ctx context.Context, first *int64, last *int64, where *ScheduledJobRunWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetScheduledJobRuns, error)
	UpdateScheduledJobRun(ctx context.Context, updateScheduledJobRunID string, input UpdateScheduledJobRunInput, interceptors ...clientv2.RequestInterceptor) (*UpdateScheduledJobRun, error)
	GlobalSearch(ctx context.Context, query string, interceptors ...clientv2.RequestInterceptor) (*GlobalSearch, error)
	CreateStandard(ctx context.Context, input CreateStandardInput, interceptors ...clientv2.RequestInterceptor) (*CreateStandard, error)
	DeleteStandard(ctx context.Context, deleteStandardID string, interceptors ...clientv2.RequestInterceptor) (*DeleteStandard, error)
	GetAllStandards(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllStandards, error)
	GetStandardByID(ctx context.Context, standardID string, interceptors ...clientv2.RequestInterceptor) (*GetStandardByID, error)
	GetStandards(ctx context.Context, first *int64, last *int64, where *StandardWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetStandards, error)
	UpdateStandard(ctx context.Context, updateStandardID string, input UpdateStandardInput, interceptors ...clientv2.RequestInterceptor) (*UpdateStandard, error)
	GetAllStandardHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllStandardHistories, error)
	GetStandardHistories(ctx context.Context, first *int64, last *int64, where *StandardHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetStandardHistories, error)
	CreateBulkCSVSubcontrol(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVSubcontrol, error)
	CreateBulkSubcontrol(ctx context.Context, input []*CreateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkSubcontrol, error)
	CreateSubcontrol(ctx context.Context, input CreateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*CreateSubcontrol, error)
	DeleteSubcontrol(ctx context.Context, deleteSubcontrolID string, interceptors ...clientv2.RequestInterceptor) (*DeleteSubcontrol, error)
	GetAllSubcontrols(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllSubcontrols, error)
	GetSubcontrolByID(ctx context.Context, subcontrolID string, interceptors ...clientv2.RequestInterceptor) (*GetSubcontrolByID, error)
	GetSubcontrols(ctx context.Context, first *int64, last *int64, where *SubcontrolWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetSubcontrols, error)
	UpdateSubcontrol(ctx context.Context, updateSubcontrolID string, input UpdateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*UpdateSubcontrol, error)
	GetAllSubcontrolHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllSubcontrolHistories, error)
	GetSubcontrolHistories(ctx context.Context, first *int64, last *int64, where *SubcontrolHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetSubcontrolHistories, error)
	CreateSubprocessor(ctx context.Context, input CreateSubprocessorInput, logoFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateSubprocessor, error)
	DeleteSubprocessor(ctx context.Context, deleteSubprocessorID string, interceptors ...clientv2.RequestInterceptor) (*DeleteSubprocessor, error)
	GetAllSubprocessors(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllSubprocessors, error)
	GetSubprocessorByID(ctx context.Context, subprocessorID string, interceptors ...clientv2.RequestInterceptor) (*GetSubprocessorByID, error)
	GetSubprocessors(ctx context.Context, first *int64, last *int64, where *SubprocessorWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetSubprocessors, error)
	UpdateSubprocessor(ctx context.Context, updateSubprocessorID string, input UpdateSubprocessorInput, logoFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateSubprocessor, error)
	GetAllSubprocessorHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllSubprocessorHistories, error)
	GetSubprocessorHistories(ctx context.Context, first *int64, last *int64, where *SubprocessorHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetSubprocessorHistories, error)
	CreateBulkCSVSubscriber(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVSubscriber, error)
	CreateBulkSubscriber(ctx context.Context, input []*CreateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkSubscriber, error)
	CreateSubscriber(ctx context.Context, input CreateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*CreateSubscriber, error)
	DeleteSubscriber(ctx context.Context, deleteSubscriberEmail string, subscriberOrganization *string, interceptors ...clientv2.RequestInterceptor) (*DeleteSubscriber, error)
	GetAllSubscribers(ctx context.Context, first *int64, last *int64, after *string, before *string, orderBy []*SubscriberOrder, interceptors ...clientv2.RequestInterceptor) (*GetAllSubscribers, error)
	GetSubscriberByEmail(ctx context.Context, email string, interceptors ...clientv2.RequestInterceptor) (*GetSubscriberByEmail, error)
	GetSubscribers(ctx context.Context, first *int64, last *int64, after *string, before *string, where *SubscriberWhereInput, orderBy []*SubscriberOrder, interceptors ...clientv2.RequestInterceptor) (*GetSubscribers, error)
	UpdateSubscriber(ctx context.Context, email string, input UpdateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*UpdateSubscriber, error)
	CreateBulkCSVTask(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVTask, error)
	CreateBulkTask(ctx context.Context, input []*CreateTaskInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkTask, error)
	CreateTask(ctx context.Context, input CreateTaskInput, interceptors ...clientv2.RequestInterceptor) (*CreateTask, error)
	DeleteTask(ctx context.Context, deleteTaskID string, interceptors ...clientv2.RequestInterceptor) (*DeleteTask, error)
	GetAllTasks(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTasks, error)
	GetTaskByID(ctx context.Context, taskID string, interceptors ...clientv2.RequestInterceptor) (*GetTaskByID, error)
	GetTasks(ctx context.Context, first *int64, last *int64, after *string, before *string, where *TaskWhereInput, orderBy []*TaskOrder, interceptors ...clientv2.RequestInterceptor) (*GetTasks, error)
	UpdateTask(ctx context.Context, updateTaskID string, input UpdateTaskInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTask, error)
	GetAllTaskHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTaskHistories, error)
	GetTaskHistories(ctx context.Context, first *int64, last *int64, where *TaskHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTaskHistories, error)
	CreateBulkCSVTemplate(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVTemplate, error)
	CreateBulkTemplate(ctx context.Context, input []*CreateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkTemplate, error)
	CreateTemplate(ctx context.Context, input CreateTemplateInput, templateFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateTemplate, error)
	DeleteTemplate(ctx context.Context, deleteTemplateID string, interceptors ...clientv2.RequestInterceptor) (*DeleteTemplate, error)
	GetAllTemplates(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTemplates, error)
	GetTemplateByID(ctx context.Context, templateID string, interceptors ...clientv2.RequestInterceptor) (*GetTemplateByID, error)
	GetTemplates(ctx context.Context, first *int64, last *int64, where *TemplateWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTemplates, error)
	UpdateTemplate(ctx context.Context, updateTemplateID string, input UpdateTemplateInput, templateFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateTemplate, error)
	GetAllTemplateHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTemplateHistories, error)
	GetTemplateHistories(ctx context.Context, first *int64, last *int64, where *TemplateHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTemplateHistories, error)
	CreateTFASetting(ctx context.Context, input CreateTFASettingInput, interceptors ...clientv2.RequestInterceptor) (*CreateTFASetting, error)
	GetAllTFASettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTFASettings, error)
	GetTFASettingByID(ctx context.Context, tFASettingID string, interceptors ...clientv2.RequestInterceptor) (*GetTFASettingByID, error)
	GetTFASettings(ctx context.Context, first *int64, last *int64, where *TFASettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTFASettings, error)
	UpdateTFASetting(ctx context.Context, input UpdateTFASettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTFASetting, error)
	CreateTrustCenter(ctx context.Context, input CreateTrustCenterInput, interceptors ...clientv2.RequestInterceptor) (*CreateTrustCenter, error)
	DeleteTrustCenter(ctx context.Context, deleteTrustCenterID string, interceptors ...clientv2.RequestInterceptor) (*DeleteTrustCenter, error)
	GetAllTrustCenters(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenters, error)
	GetTrustCenterByID(ctx context.Context, trustCenterID string, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterByID, error)
	GetTrustCenters(ctx context.Context, first *int64, last *int64, where *TrustCenterWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenters, error)
	UpdateTrustCenter(ctx context.Context, updateTrustCenterID string, input UpdateTrustCenterInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTrustCenter, error)
	CreateBulkCSVTrustCenterCompliance(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVTrustCenterCompliance, error)
	CreateBulkTrustCenterCompliance(ctx context.Context, input []*CreateTrustCenterComplianceInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkTrustCenterCompliance, error)
	CreateTrustCenterCompliance(ctx context.Context, input CreateTrustCenterComplianceInput, interceptors ...clientv2.RequestInterceptor) (*CreateTrustCenterCompliance, error)
	DeleteTrustCenterCompliance(ctx context.Context, deleteTrustCenterComplianceID string, interceptors ...clientv2.RequestInterceptor) (*DeleteTrustCenterCompliance, error)
	GetAllTrustCenterCompliances(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenterCompliances, error)
	GetTrustCenterComplianceByID(ctx context.Context, trustCenterComplianceID string, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterComplianceByID, error)
	GetTrustCenterCompliances(ctx context.Context, first *int64, last *int64, where *TrustCenterComplianceWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterCompliances, error)
	UpdateTrustCenterCompliance(ctx context.Context, updateTrustCenterComplianceID string, input UpdateTrustCenterComplianceInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTrustCenterCompliance, error)
	GetAllTrustCenterComplianceHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenterComplianceHistories, error)
	GetTrustCenterComplianceHistories(ctx context.Context, first *int64, last *int64, where *TrustCenterComplianceHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterComplianceHistories, error)
	CreateTrustCenterDoc(ctx context.Context, input CreateTrustCenterDocInput, trustCenterDocFile graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateTrustCenterDoc, error)
	DeleteTrustCenterDoc(ctx context.Context, deleteTrustCenterDocID string, interceptors ...clientv2.RequestInterceptor) (*DeleteTrustCenterDoc, error)
	GetAllTrustCenterDocs(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenterDocs, error)
	GetTrustCenterDocByID(ctx context.Context, trustCenterDocID string, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterDocByID, error)
	GetTrustCenterDocs(ctx context.Context, first *int64, last *int64, where *TrustCenterDocWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterDocs, error)
	UpdateTrustCenterDoc(ctx context.Context, updateTrustCenterDocID string, input UpdateTrustCenterDocInput, trustCenterDocFile *graphql.Upload, watermarkedTrustCenterDocFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateTrustCenterDoc, error)
	GetAllTrustCenterDocHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenterDocHistories, error)
	GetTrustCenterDocHistories(ctx context.Context, first *int64, last *int64, where *TrustCenterDocHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterDocHistories, error)
	CreateTrustCenterDomain(ctx context.Context, input CreateTrustCenterDomainInput, interceptors ...clientv2.RequestInterceptor) (*CreateTrustCenterDomain, error)
	GetAllTrustCenterHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenterHistories, error)
	GetTrustCenterHistories(ctx context.Context, first *int64, last *int64, where *TrustCenterHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterHistories, error)
	CreateTrustCenterNda(ctx context.Context, input CreateTrustCenterNDAInput, templateFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateTrustCenterNda, error)
	SendTrustCenterNDAEmail(ctx context.Context, input SendTrustCenterNDAInput, interceptors ...clientv2.RequestInterceptor) (*SendTrustCenterNDAEmail, error)
	SubmitTrustCenterNDAResponse(ctx context.Context, input SubmitTrustCenterNDAResponseInput, interceptors ...clientv2.RequestInterceptor) (*SubmitTrustCenterNDAResponse, error)
	UpdateTrustCenterNda(ctx context.Context, id string, templateFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateTrustCenterNda, error)
	CreateTrustCenterSetting(ctx context.Context, input CreateTrustCenterSettingInput, interceptors ...clientv2.RequestInterceptor) (*CreateTrustCenterSetting, error)
	DeleteTrustCenterSetting(ctx context.Context, deleteTrustCenterSettingID string, interceptors ...clientv2.RequestInterceptor) (*DeleteTrustCenterSetting, error)
	GetAllTrustCenterSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenterSettings, error)
	GetTrustCenterSettingByID(ctx context.Context, trustCenterSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterSettingByID, error)
	GetTrustCenterSettings(ctx context.Context, first *int64, last *int64, where *TrustCenterSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterSettings, error)
	UpdateTrustCenterSetting(ctx context.Context, updateTrustCenterSettingID string, input UpdateTrustCenterSettingInput, logoFile *graphql.Upload, faviconFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateTrustCenterSetting, error)
	GetAllTrustCenterSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenterSettingHistories, error)
	GetTrustCenterSettingHistories(ctx context.Context, first *int64, last *int64, where *TrustCenterSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterSettingHistories, error)
	CreateBulkCSVTrustCenterSubprocessor(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVTrustCenterSubprocessor, error)
	CreateBulkTrustCenterSubprocessor(ctx context.Context, input []*CreateTrustCenterSubprocessorInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkTrustCenterSubprocessor, error)
	CreateTrustCenterSubprocessor(ctx context.Context, input CreateTrustCenterSubprocessorInput, interceptors ...clientv2.RequestInterceptor) (*CreateTrustCenterSubprocessor, error)
	DeleteTrustCenterSubprocessor(ctx context.Context, deleteTrustCenterSubprocessorID string, interceptors ...clientv2.RequestInterceptor) (*DeleteTrustCenterSubprocessor, error)
	GetAllTrustCenterSubprocessors(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenterSubprocessors, error)
	GetTrustCenterSubprocessorByID(ctx context.Context, trustCenterSubprocessorID string, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterSubprocessorByID, error)
	GetTrustCenterSubprocessors(ctx context.Context, first *int64, last *int64, where *TrustCenterSubprocessorWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterSubprocessors, error)
	UpdateTrustCenterSubprocessor(ctx context.Context, updateTrustCenterSubprocessorID string, input UpdateTrustCenterSubprocessorInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTrustCenterSubprocessor, error)
	GetAllTrustCenterSubprocessorHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenterSubprocessorHistories, error)
	GetTrustCenterSubprocessorHistories(ctx context.Context, first *int64, last *int64, where *TrustCenterSubprocessorHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterSubprocessorHistories, error)
	CreateTrustCenterWatermarkConfig(ctx context.Context, input CreateTrustCenterWatermarkConfigInput, logoFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateTrustCenterWatermarkConfig, error)
	DeleteTrustCenterWatermarkConfig(ctx context.Context, deleteTrustCenterWatermarkConfigID string, interceptors ...clientv2.RequestInterceptor) (*DeleteTrustCenterWatermarkConfig, error)
	GetAllTrustCenterWatermarkConfigs(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenterWatermarkConfigs, error)
	GetTrustCenterWatermarkConfigByID(ctx context.Context, trustCenterWatermarkConfigID string, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterWatermarkConfigByID, error)
	GetTrustCenterWatermarkConfigs(ctx context.Context, first *int64, last *int64, where *TrustCenterWatermarkConfigWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterWatermarkConfigs, error)
	UpdateTrustCenterWatermarkConfig(ctx context.Context, updateTrustCenterWatermarkConfigID string, input UpdateTrustCenterWatermarkConfigInput, logoFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateTrustCenterWatermarkConfig, error)
	GetAllTrustCenterWatermarkConfigHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenterWatermarkConfigHistories, error)
	GetTrustCenterWatermarkConfigHistories(ctx context.Context, first *int64, last *int64, where *TrustCenterWatermarkConfigHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterWatermarkConfigHistories, error)
	CreateUser(ctx context.Context, input CreateUserInput, interceptors ...clientv2.RequestInterceptor) (*CreateUser, error)
	DeleteUser(ctx context.Context, deleteUserID string, interceptors ...clientv2.RequestInterceptor) (*DeleteUser, error)
	GetAllUsers(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUsers, error)
	GetSelf(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetSelf, error)
	GetUserByID(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor) (*GetUserByID, error)
	GetUsers(ctx context.Context, first *int64, last *int64, where *UserWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUsers, error)
	UpdateUser(ctx context.Context, updateUserID string, input UpdateUserInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateUser, error)
	GetAllUserHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserHistories, error)
	GetUserHistories(ctx context.Context, first *int64, last *int64, where *UserHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserHistories, error)
	CreateUserSetting(ctx context.Context, input CreateUserSettingInput, interceptors ...clientv2.RequestInterceptor) (*CreateUserSetting, error)
	GetAllUserSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserSettings, error)
	GetUserSettingByID(ctx context.Context, userSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetUserSettingByID, error)
	GetUserSettings(ctx context.Context, first *int64, last *int64, where *UserSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserSettings, error)
	UpdateUserSetting(ctx context.Context, updateUserSettingID string, input UpdateUserSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUserSetting, error)
	GetAllUserSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserSettingHistories, error)
	GetUserSettingHistories(ctx context.Context, first *int64, last *int64, where *UserSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserSettingHistories, error)
	DeleteWebauthn(ctx context.Context, deleteWebauthnID string, interceptors ...clientv2.RequestInterceptor) (*DeleteWebauthn, error)
	GetAllWebauthns(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllWebauthns, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli clientv2.HttpClient, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) OpenlaneGraphClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans struct {
	ActionPlanType                  *string               "json:\"actionPlanType,omitempty\" graphql:\"actionPlanType\""
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DueDate                         *time.Time            "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Priority                        *enums.Priority       "json:\"priority,omitempty\" graphql:\"priority\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Source                          *string               "json:\"source,omitempty\" graphql:\"source\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetActionPlanType() *string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.ActionPlanType
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetApprovalRequired() *bool {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.ApprovalRequired
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetApproverID() *string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.ApproverID
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetControlSuggestions() []string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.ControlSuggestions
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetDelegateID() *string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.DelegateID
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetDetails() *string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.Details
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.DismissedControlSuggestions
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.DismissedTagSuggestions
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetDueDate() *time.Time {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.DueDate
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetID() string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.ID
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetImprovementSuggestions() []string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.ImprovementSuggestions
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetName() string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.Name
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetPriority() *enums.Priority {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.Priority
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetReviewDue() *time.Time {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.ReviewDue
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.ReviewFrequency
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetRevision() *string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.Revision
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetSource() *string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.Source
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.Status
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetSummary() *string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.Summary
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetTagSuggestions() []string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.TagSuggestions
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.Tags
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVActionPlan_CreateBulkCSVActionPlan struct {
	ActionPlans []*CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans "json:\"actionPlans,omitempty\" graphql:\"actionPlans\""
}

func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan) GetActionPlans() []*CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan{}
	}
	return t.ActionPlans
}

type CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans struct {
	ActionPlanType                  *string               "json:\"actionPlanType,omitempty\" graphql:\"actionPlanType\""
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DueDate                         *time.Time            "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Priority                        *enums.Priority       "json:\"priority,omitempty\" graphql:\"priority\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Source                          *string               "json:\"source,omitempty\" graphql:\"source\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetActionPlanType() *string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.ActionPlanType
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetApprovalRequired() *bool {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.ApprovalRequired
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetApproverID() *string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.ApproverID
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetControlSuggestions() []string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.ControlSuggestions
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.CreatedAt
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.CreatedBy
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetDelegateID() *string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.DelegateID
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetDetails() *string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.Details
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.DismissedControlSuggestions
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.DismissedTagSuggestions
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetDueDate() *time.Time {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.DueDate
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetID() string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.ID
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetImprovementSuggestions() []string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.ImprovementSuggestions
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetName() string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.Name
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.OwnerID
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetPriority() *enums.Priority {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.Priority
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetReviewDue() *time.Time {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.ReviewDue
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.ReviewFrequency
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetRevision() *string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.Revision
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetSource() *string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.Source
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.Status
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetSummary() *string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.Summary
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetTagSuggestions() []string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.TagSuggestions
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetTags() []string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.Tags
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.UpdatedBy
}

type CreateBulkActionPlan_CreateBulkActionPlan struct {
	ActionPlans []*CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans "json:\"actionPlans,omitempty\" graphql:\"actionPlans\""
}

func (t *CreateBulkActionPlan_CreateBulkActionPlan) GetActionPlans() []*CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan{}
	}
	return t.ActionPlans
}

type CreateActionPlan_CreateActionPlan_ActionPlan struct {
	ActionPlanType                  *string               "json:\"actionPlanType,omitempty\" graphql:\"actionPlanType\""
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DueDate                         *time.Time            "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Priority                        *enums.Priority       "json:\"priority,omitempty\" graphql:\"priority\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Source                          *string               "json:\"source,omitempty\" graphql:\"source\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetActionPlanType() *string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.ActionPlanType
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetApprovalRequired() *bool {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.ApprovalRequired
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetApproverID() *string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.ApproverID
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetControlSuggestions() []string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.ControlSuggestions
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.CreatedAt
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetCreatedBy() *string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.CreatedBy
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetDelegateID() *string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.DelegateID
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetDetails() *string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.Details
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.DismissedControlSuggestions
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.DismissedTagSuggestions
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetDueDate() *time.Time {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.DueDate
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetID() string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.ID
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetImprovementSuggestions() []string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.ImprovementSuggestions
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetName() string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.Name
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetOwnerID() *string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.OwnerID
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetPriority() *enums.Priority {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.Priority
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetReviewDue() *time.Time {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.ReviewDue
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.ReviewFrequency
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetRevision() *string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.Revision
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetSource() *string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.Source
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.Status
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetSummary() *string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.Summary
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetTagSuggestions() []string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.TagSuggestions
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetTags() []string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.Tags
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.UpdatedAt
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.UpdatedBy
}

type CreateActionPlan_CreateActionPlan struct {
	ActionPlan CreateActionPlan_CreateActionPlan_ActionPlan "json:\"actionPlan\" graphql:\"actionPlan\""
}

func (t *CreateActionPlan_CreateActionPlan) GetActionPlan() *CreateActionPlan_CreateActionPlan_ActionPlan {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan{}
	}
	return &t.ActionPlan
}

type DeleteActionPlan_DeleteActionPlan struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteActionPlan_DeleteActionPlan) GetDeletedID() string {
	if t == nil {
		t = &DeleteActionPlan_DeleteActionPlan{}
	}
	return t.DeletedID
}

type GetAllActionPlans_ActionPlans_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllActionPlans_ActionPlans_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllActionPlans_ActionPlans_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllActionPlans_ActionPlans_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllActionPlans_ActionPlans_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_PageInfo{}
	}
	return t.StartCursor
}

type GetAllActionPlans_ActionPlans_Edges_Node struct {
	ActionPlanType                  *string               "json:\"actionPlanType,omitempty\" graphql:\"actionPlanType\""
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DueDate                         *time.Time            "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Priority                        *enums.Priority       "json:\"priority,omitempty\" graphql:\"priority\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Source                          *string               "json:\"source,omitempty\" graphql:\"source\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetActionPlanType() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ActionPlanType
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetApproverID() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ApproverID
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetControlSuggestions() []string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ControlSuggestions
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.DismissedControlSuggestions
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.DismissedTagSuggestions
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetDueDate() *time.Time {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.DueDate
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetImprovementSuggestions() []string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ImprovementSuggestions
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetPriority() *enums.Priority {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Priority
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Revision
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetSummary() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Summary
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetTagSuggestions() []string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.TagSuggestions
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllActionPlans_ActionPlans_Edges struct {
	Node *GetAllActionPlans_ActionPlans_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllActionPlans_ActionPlans_Edges) GetNode() *GetAllActionPlans_ActionPlans_Edges_Node {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges{}
	}
	return t.Node
}

type GetAllActionPlans_ActionPlans struct {
	Edges      []*GetAllActionPlans_ActionPlans_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllActionPlans_ActionPlans_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllActionPlans_ActionPlans) GetEdges() []*GetAllActionPlans_ActionPlans_Edges {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans{}
	}
	return t.Edges
}
func (t *GetAllActionPlans_ActionPlans) GetPageInfo() *GetAllActionPlans_ActionPlans_PageInfo {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans{}
	}
	return &t.PageInfo
}
func (t *GetAllActionPlans_ActionPlans) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans{}
	}
	return t.TotalCount
}

type GetActionPlanByID_ActionPlan struct {
	ActionPlanType                  *string               "json:\"actionPlanType,omitempty\" graphql:\"actionPlanType\""
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DueDate                         *time.Time            "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Priority                        *enums.Priority       "json:\"priority,omitempty\" graphql:\"priority\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Source                          *string               "json:\"source,omitempty\" graphql:\"source\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetActionPlanByID_ActionPlan) GetActionPlanType() *string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.ActionPlanType
}
func (t *GetActionPlanByID_ActionPlan) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.ApprovalRequired
}
func (t *GetActionPlanByID_ActionPlan) GetApproverID() *string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.ApproverID
}
func (t *GetActionPlanByID_ActionPlan) GetControlSuggestions() []string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.ControlSuggestions
}
func (t *GetActionPlanByID_ActionPlan) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.CreatedAt
}
func (t *GetActionPlanByID_ActionPlan) GetCreatedBy() *string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.CreatedBy
}
func (t *GetActionPlanByID_ActionPlan) GetDelegateID() *string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.DelegateID
}
func (t *GetActionPlanByID_ActionPlan) GetDetails() *string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.Details
}
func (t *GetActionPlanByID_ActionPlan) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.DismissedControlSuggestions
}
func (t *GetActionPlanByID_ActionPlan) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *GetActionPlanByID_ActionPlan) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.DismissedTagSuggestions
}
func (t *GetActionPlanByID_ActionPlan) GetDueDate() *time.Time {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.DueDate
}
func (t *GetActionPlanByID_ActionPlan) GetID() string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.ID
}
func (t *GetActionPlanByID_ActionPlan) GetImprovementSuggestions() []string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.ImprovementSuggestions
}
func (t *GetActionPlanByID_ActionPlan) GetName() string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.Name
}
func (t *GetActionPlanByID_ActionPlan) GetOwnerID() *string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.OwnerID
}
func (t *GetActionPlanByID_ActionPlan) GetPriority() *enums.Priority {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.Priority
}
func (t *GetActionPlanByID_ActionPlan) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.ReviewDue
}
func (t *GetActionPlanByID_ActionPlan) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.ReviewFrequency
}
func (t *GetActionPlanByID_ActionPlan) GetRevision() *string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.Revision
}
func (t *GetActionPlanByID_ActionPlan) GetSource() *string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.Source
}
func (t *GetActionPlanByID_ActionPlan) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.Status
}
func (t *GetActionPlanByID_ActionPlan) GetSummary() *string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.Summary
}
func (t *GetActionPlanByID_ActionPlan) GetTagSuggestions() []string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.TagSuggestions
}
func (t *GetActionPlanByID_ActionPlan) GetTags() []string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.Tags
}
func (t *GetActionPlanByID_ActionPlan) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.UpdatedAt
}
func (t *GetActionPlanByID_ActionPlan) GetUpdatedBy() *string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.UpdatedBy
}

type GetActionPlans_ActionPlans_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetActionPlans_ActionPlans_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetActionPlans_ActionPlans_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetActionPlans_ActionPlans_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetActionPlans_ActionPlans_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetActionPlans_ActionPlans_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetActionPlans_ActionPlans_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_PageInfo{}
	}
	return t.StartCursor
}

type GetActionPlans_ActionPlans_Edges_Node struct {
	ActionPlanType                  *string               "json:\"actionPlanType,omitempty\" graphql:\"actionPlanType\""
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DueDate                         *time.Time            "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Priority                        *enums.Priority       "json:\"priority,omitempty\" graphql:\"priority\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Source                          *string               "json:\"source,omitempty\" graphql:\"source\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetActionPlans_ActionPlans_Edges_Node) GetActionPlanType() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ActionPlanType
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetApproverID() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ApproverID
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetControlSuggestions() []string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ControlSuggestions
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Details
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.DismissedControlSuggestions
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.DismissedTagSuggestions
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetDueDate() *time.Time {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.DueDate
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetID() string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ID
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetImprovementSuggestions() []string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ImprovementSuggestions
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetName() string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Name
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetPriority() *enums.Priority {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Priority
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Revision
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Source
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Status
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetSummary() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Summary
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetTagSuggestions() []string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.TagSuggestions
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Tags
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetActionPlans_ActionPlans_Edges struct {
	Node *GetActionPlans_ActionPlans_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetActionPlans_ActionPlans_Edges) GetNode() *GetActionPlans_ActionPlans_Edges_Node {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges{}
	}
	return t.Node
}

type GetActionPlans_ActionPlans struct {
	Edges      []*GetActionPlans_ActionPlans_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetActionPlans_ActionPlans_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetActionPlans_ActionPlans) GetEdges() []*GetActionPlans_ActionPlans_Edges {
	if t == nil {
		t = &GetActionPlans_ActionPlans{}
	}
	return t.Edges
}
func (t *GetActionPlans_ActionPlans) GetPageInfo() *GetActionPlans_ActionPlans_PageInfo {
	if t == nil {
		t = &GetActionPlans_ActionPlans{}
	}
	return &t.PageInfo
}
func (t *GetActionPlans_ActionPlans) GetTotalCount() int64 {
	if t == nil {
		t = &GetActionPlans_ActionPlans{}
	}
	return t.TotalCount
}

type UpdateActionPlan_UpdateActionPlan_ActionPlan struct {
	ActionPlanType                  *string               "json:\"actionPlanType,omitempty\" graphql:\"actionPlanType\""
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DueDate                         *time.Time            "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Priority                        *enums.Priority       "json:\"priority,omitempty\" graphql:\"priority\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Source                          *string               "json:\"source,omitempty\" graphql:\"source\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetActionPlanType() *string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.ActionPlanType
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetApprovalRequired() *bool {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.ApprovalRequired
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetApproverID() *string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.ApproverID
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetControlSuggestions() []string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.ControlSuggestions
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.CreatedAt
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.CreatedBy
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetDelegateID() *string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.DelegateID
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetDetails() *string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.Details
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.DismissedControlSuggestions
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.DismissedTagSuggestions
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetDueDate() *time.Time {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.DueDate
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetID() string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.ID
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetImprovementSuggestions() []string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.ImprovementSuggestions
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetName() string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.Name
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetOwnerID() *string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.OwnerID
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetPriority() *enums.Priority {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.Priority
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetReviewDue() *time.Time {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.ReviewDue
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.ReviewFrequency
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetRevision() *string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.Revision
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetSource() *string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.Source
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.Status
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetSummary() *string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.Summary
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetTagSuggestions() []string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.TagSuggestions
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetTags() []string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.Tags
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.UpdatedAt
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.UpdatedBy
}

type UpdateActionPlan_UpdateActionPlan struct {
	ActionPlan UpdateActionPlan_UpdateActionPlan_ActionPlan "json:\"actionPlan\" graphql:\"actionPlan\""
}

func (t *UpdateActionPlan_UpdateActionPlan) GetActionPlan() *UpdateActionPlan_UpdateActionPlan_ActionPlan {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan{}
	}
	return &t.ActionPlan
}

type GetAllActionPlanHistories_ActionPlanHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllActionPlanHistories_ActionPlanHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllActionPlanHistories_ActionPlanHistories_Edges_Node struct {
	ActionPlanType                  *string               "json:\"actionPlanType,omitempty\" graphql:\"actionPlanType\""
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DueDate                         *time.Time            "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	HistoryTime                     time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	Operation                       history.OpType        "json:\"operation\" graphql:\"operation\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Priority                        *enums.Priority       "json:\"priority,omitempty\" graphql:\"priority\""
	Ref                             *string               "json:\"ref,omitempty\" graphql:\"ref\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Source                          *string               "json:\"source,omitempty\" graphql:\"source\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetActionPlanType() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ActionPlanType
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetApproverID() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ApproverID
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetControlSuggestions() []string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ControlSuggestions
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.DismissedControlSuggestions
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.DismissedTagSuggestions
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetDueDate() *time.Time {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.DueDate
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetImprovementSuggestions() []string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ImprovementSuggestions
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetPriority() *enums.Priority {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Priority
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Revision
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetSummary() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Summary
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetTagSuggestions() []string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.TagSuggestions
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllActionPlanHistories_ActionPlanHistories_Edges struct {
	Node *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges) GetNode() *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges{}
	}
	return t.Node
}

type GetAllActionPlanHistories_ActionPlanHistories struct {
	Edges      []*GetAllActionPlanHistories_ActionPlanHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllActionPlanHistories_ActionPlanHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllActionPlanHistories_ActionPlanHistories) GetEdges() []*GetAllActionPlanHistories_ActionPlanHistories_Edges {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories{}
	}
	return t.Edges
}
func (t *GetAllActionPlanHistories_ActionPlanHistories) GetPageInfo() *GetAllActionPlanHistories_ActionPlanHistories_PageInfo {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllActionPlanHistories_ActionPlanHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories{}
	}
	return t.TotalCount
}

type GetActionPlanHistories_ActionPlanHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetActionPlanHistories_ActionPlanHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetActionPlanHistories_ActionPlanHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetActionPlanHistories_ActionPlanHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetActionPlanHistories_ActionPlanHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetActionPlanHistories_ActionPlanHistories_Edges_Node struct {
	ActionPlanType                  *string               "json:\"actionPlanType,omitempty\" graphql:\"actionPlanType\""
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DueDate                         *time.Time            "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	HistoryTime                     time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	Operation                       history.OpType        "json:\"operation\" graphql:\"operation\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Priority                        *enums.Priority       "json:\"priority,omitempty\" graphql:\"priority\""
	Ref                             *string               "json:\"ref,omitempty\" graphql:\"ref\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Source                          *string               "json:\"source,omitempty\" graphql:\"source\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetActionPlanType() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ActionPlanType
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetApproverID() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ApproverID
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetControlSuggestions() []string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ControlSuggestions
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.DismissedControlSuggestions
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.DismissedTagSuggestions
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetDueDate() *time.Time {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.DueDate
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetImprovementSuggestions() []string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ImprovementSuggestions
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetPriority() *enums.Priority {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Priority
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Revision
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetSummary() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Summary
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetTagSuggestions() []string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.TagSuggestions
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetActionPlanHistories_ActionPlanHistories_Edges struct {
	Node *GetActionPlanHistories_ActionPlanHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetActionPlanHistories_ActionPlanHistories_Edges) GetNode() *GetActionPlanHistories_ActionPlanHistories_Edges_Node {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges{}
	}
	return t.Node
}

type GetActionPlanHistories_ActionPlanHistories struct {
	Edges      []*GetActionPlanHistories_ActionPlanHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetActionPlanHistories_ActionPlanHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetActionPlanHistories_ActionPlanHistories) GetEdges() []*GetActionPlanHistories_ActionPlanHistories_Edges {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories{}
	}
	return t.Edges
}
func (t *GetActionPlanHistories_ActionPlanHistories) GetPageInfo() *GetActionPlanHistories_ActionPlanHistories_PageInfo {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories{}
	}
	return &t.PageInfo
}
func (t *GetActionPlanHistories_ActionPlanHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories{}
	}
	return t.TotalCount
}

type CreateAPIToken_CreateAPIToken_APIToken struct {
	CreatedAt         *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description       *string    "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt         *time.Time "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID                string     "json:\"id\" graphql:\"id\""
	IsActive          *bool      "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt        *time.Time "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name              string     "json:\"name\" graphql:\"name\""
	OwnerID           *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RevokedAt         *time.Time "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy         *string    "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason     *string    "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes            []string   "json:\"scopes,omitempty\" graphql:\"scopes\""
	SsoAuthorizations *string    "json:\"ssoAuthorizations,omitempty\" graphql:\"ssoAuthorizations\""
	Tags              []string   "json:\"tags,omitempty\" graphql:\"tags\""
	Token             string     "json:\"token\" graphql:\"token\""
	UpdatedAt         *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateAPIToken_CreateAPIToken_APIToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.CreatedAt
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetCreatedBy() *string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.CreatedBy
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetDescription() *string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.Description
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.ExpiresAt
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetID() string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.ID
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetIsActive() *bool {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.IsActive
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.LastUsedAt
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetName() string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.Name
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetOwnerID() *string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.OwnerID
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetRevokedAt() *time.Time {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.RevokedAt
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetRevokedBy() *string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.RevokedBy
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetRevokedReason() *string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.RevokedReason
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetScopes() []string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.Scopes
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetSsoAuthorizations() *string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.SsoAuthorizations
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetTags() []string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.Tags
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetToken() string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.Token
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.UpdatedAt
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.UpdatedBy
}

type CreateAPIToken_CreateAPIToken struct {
	APIToken CreateAPIToken_CreateAPIToken_APIToken "json:\"apiToken\" graphql:\"apiToken\""
}

func (t *CreateAPIToken_CreateAPIToken) GetAPIToken() *CreateAPIToken_CreateAPIToken_APIToken {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken{}
	}
	return &t.APIToken
}

type CreateBulkAPIToken_CreateBulkAPIToken_APITokens struct {
	CreatedAt         *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description       *string    "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt         *time.Time "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID                string     "json:\"id\" graphql:\"id\""
	IsActive          *bool      "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt        *time.Time "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name              string     "json:\"name\" graphql:\"name\""
	OwnerID           *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RevokedAt         *time.Time "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy         *string    "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason     *string    "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes            []string   "json:\"scopes,omitempty\" graphql:\"scopes\""
	SsoAuthorizations *string    "json:\"ssoAuthorizations,omitempty\" graphql:\"ssoAuthorizations\""
	Tags              []string   "json:\"tags,omitempty\" graphql:\"tags\""
	Token             string     "json:\"token\" graphql:\"token\""
	UpdatedAt         *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkAPIToken_CreateBulkAPIToken_APITokens) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkAPIToken_CreateBulkAPIToken_APITokens{}
	}
	return t.CreatedAt
}
func (t *CreateBulkAPIToken_CreateBulkAPIToken_APITokens) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkAPIToken_CreateBulkAPIToken_APITokens{}
	}
	return t.CreatedBy
}
func (t *CreateBulkAPIToken_CreateBulkAPIToken_APITokens) GetDescription() *string {
	if t == nil {
		t = &CreateBulkAPIToken_CreateBulkAPIToken_APITokens{}
	}
	return t.Description
}
func (t *CreateBulkAPIToken_CreateBulkAPIToken_APITokens) GetExpiresAt() *time.Time {
	if t == nil {
		t = &CreateBulkAPIToken_CreateBulkAPIToken_APITokens{}
	}
	return t.ExpiresAt
}
func (t *CreateBulkAPIToken_CreateBulkAPIToken_APITokens) GetID() string {
	if t == nil {
		t = &CreateBulkAPIToken_CreateBulkAPIToken_APITokens{}
	}
	return t.ID
}
func (t *CreateBulkAPIToken_CreateBulkAPIToken_APITokens) GetIsActive() *bool {
	if t == nil {
		t = &CreateBulkAPIToken_CreateBulkAPIToken_APITokens{}
	}
	return t.IsActive
}
func (t *CreateBulkAPIToken_CreateBulkAPIToken_APITokens) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &CreateBulkAPIToken_CreateBulkAPIToken_APITokens{}
	}
	return t.LastUsedAt
}
func (t *CreateBulkAPIToken_CreateBulkAPIToken_APITokens) GetName() string {
	if t == nil {
		t = &CreateBulkAPIToken_CreateBulkAPIToken_APITokens{}
	}
	return t.Name
}
func (t *CreateBulkAPIToken_CreateBulkAPIToken_APITokens) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkAPIToken_CreateBulkAPIToken_APITokens{}
	}
	return t.OwnerID
}
func (t *CreateBulkAPIToken_CreateBulkAPIToken_APITokens) GetRevokedAt() *time.Time {
	if t == nil {
		t = &CreateBulkAPIToken_CreateBulkAPIToken_APITokens{}
	}
	return t.RevokedAt
}
func (t *CreateBulkAPIToken_CreateBulkAPIToken_APITokens) GetRevokedBy() *string {
	if t == nil {
		t = &CreateBulkAPIToken_CreateBulkAPIToken_APITokens{}
	}
	return t.RevokedBy
}
func (t *CreateBulkAPIToken_CreateBulkAPIToken_APITokens) GetRevokedReason() *string {
	if t == nil {
		t = &CreateBulkAPIToken_CreateBulkAPIToken_APITokens{}
	}
	return t.RevokedReason
}
func (t *CreateBulkAPIToken_CreateBulkAPIToken_APITokens) GetScopes() []string {
	if t == nil {
		t = &CreateBulkAPIToken_CreateBulkAPIToken_APITokens{}
	}
	return t.Scopes
}
func (t *CreateBulkAPIToken_CreateBulkAPIToken_APITokens) GetSsoAuthorizations() *string {
	if t == nil {
		t = &CreateBulkAPIToken_CreateBulkAPIToken_APITokens{}
	}
	return t.SsoAuthorizations
}
func (t *CreateBulkAPIToken_CreateBulkAPIToken_APITokens) GetTags() []string {
	if t == nil {
		t = &CreateBulkAPIToken_CreateBulkAPIToken_APITokens{}
	}
	return t.Tags
}
func (t *CreateBulkAPIToken_CreateBulkAPIToken_APITokens) GetToken() string {
	if t == nil {
		t = &CreateBulkAPIToken_CreateBulkAPIToken_APITokens{}
	}
	return t.Token
}
func (t *CreateBulkAPIToken_CreateBulkAPIToken_APITokens) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkAPIToken_CreateBulkAPIToken_APITokens{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkAPIToken_CreateBulkAPIToken_APITokens) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkAPIToken_CreateBulkAPIToken_APITokens{}
	}
	return t.UpdatedBy
}

type CreateBulkAPIToken_CreateBulkAPIToken struct {
	APITokens []*CreateBulkAPIToken_CreateBulkAPIToken_APITokens "json:\"apiTokens,omitempty\" graphql:\"apiTokens\""
}

func (t *CreateBulkAPIToken_CreateBulkAPIToken) GetAPITokens() []*CreateBulkAPIToken_CreateBulkAPIToken_APITokens {
	if t == nil {
		t = &CreateBulkAPIToken_CreateBulkAPIToken{}
	}
	return t.APITokens
}

type CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens struct {
	CreatedAt         *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description       *string    "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt         *time.Time "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID                string     "json:\"id\" graphql:\"id\""
	IsActive          *bool      "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt        *time.Time "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name              string     "json:\"name\" graphql:\"name\""
	OwnerID           *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RevokedAt         *time.Time "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy         *string    "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason     *string    "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes            []string   "json:\"scopes,omitempty\" graphql:\"scopes\""
	SsoAuthorizations *string    "json:\"ssoAuthorizations,omitempty\" graphql:\"ssoAuthorizations\""
	Tags              []string   "json:\"tags,omitempty\" graphql:\"tags\""
	Token             string     "json:\"token\" graphql:\"token\""
	UpdatedAt         *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens{}
	}
	return t.Description
}
func (t *CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens) GetExpiresAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens{}
	}
	return t.ExpiresAt
}
func (t *CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens) GetID() string {
	if t == nil {
		t = &CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens{}
	}
	return t.ID
}
func (t *CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens) GetIsActive() *bool {
	if t == nil {
		t = &CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens{}
	}
	return t.IsActive
}
func (t *CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens{}
	}
	return t.LastUsedAt
}
func (t *CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens) GetName() string {
	if t == nil {
		t = &CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens{}
	}
	return t.Name
}
func (t *CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens) GetRevokedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens{}
	}
	return t.RevokedAt
}
func (t *CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens) GetRevokedBy() *string {
	if t == nil {
		t = &CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens{}
	}
	return t.RevokedBy
}
func (t *CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens) GetRevokedReason() *string {
	if t == nil {
		t = &CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens{}
	}
	return t.RevokedReason
}
func (t *CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens) GetScopes() []string {
	if t == nil {
		t = &CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens{}
	}
	return t.Scopes
}
func (t *CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens) GetSsoAuthorizations() *string {
	if t == nil {
		t = &CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens{}
	}
	return t.SsoAuthorizations
}
func (t *CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens{}
	}
	return t.Tags
}
func (t *CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens) GetToken() string {
	if t == nil {
		t = &CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens{}
	}
	return t.Token
}
func (t *CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVAPIToken_CreateBulkCSVAPIToken struct {
	APITokens []*CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens "json:\"apiTokens,omitempty\" graphql:\"apiTokens\""
}

func (t *CreateBulkCSVAPIToken_CreateBulkCSVAPIToken) GetAPITokens() []*CreateBulkCSVAPIToken_CreateBulkCSVAPIToken_APITokens {
	if t == nil {
		t = &CreateBulkCSVAPIToken_CreateBulkCSVAPIToken{}
	}
	return t.APITokens
}

type DeleteAPIToken_DeleteAPIToken struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteAPIToken_DeleteAPIToken) GetDeletedID() string {
	if t == nil {
		t = &DeleteAPIToken_DeleteAPIToken{}
	}
	return t.DeletedID
}

type GetAllAPITokens_APITokens_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllAPITokens_APITokens_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllAPITokens_APITokens_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllAPITokens_APITokens_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllAPITokens_APITokens_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllAPITokens_APITokens_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllAPITokens_APITokens_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_PageInfo{}
	}
	return t.StartCursor
}

type GetAllAPITokens_APITokens_Edges_Node struct {
	CreatedAt         *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description       *string    "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt         *time.Time "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID                string     "json:\"id\" graphql:\"id\""
	IsActive          *bool      "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt        *time.Time "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name              string     "json:\"name\" graphql:\"name\""
	OwnerID           *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RevokedAt         *time.Time "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy         *string    "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason     *string    "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes            []string   "json:\"scopes,omitempty\" graphql:\"scopes\""
	SsoAuthorizations *string    "json:\"ssoAuthorizations,omitempty\" graphql:\"ssoAuthorizations\""
	Tags              []string   "json:\"tags,omitempty\" graphql:\"tags\""
	Token             string     "json:\"token\" graphql:\"token\""
	UpdatedAt         *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllAPITokens_APITokens_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetIsActive() *bool {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.IsActive
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.LastUsedAt
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetRevokedAt() *time.Time {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.RevokedAt
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetRevokedBy() *string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.RevokedBy
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetRevokedReason() *string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.RevokedReason
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetScopes() []string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.Scopes
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetSsoAuthorizations() *string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.SsoAuthorizations
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetToken() string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.Token
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllAPITokens_APITokens_Edges struct {
	Node *GetAllAPITokens_APITokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllAPITokens_APITokens_Edges) GetNode() *GetAllAPITokens_APITokens_Edges_Node {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges{}
	}
	return t.Node
}

type GetAllAPITokens_APITokens struct {
	Edges      []*GetAllAPITokens_APITokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllAPITokens_APITokens_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllAPITokens_APITokens) GetEdges() []*GetAllAPITokens_APITokens_Edges {
	if t == nil {
		t = &GetAllAPITokens_APITokens{}
	}
	return t.Edges
}
func (t *GetAllAPITokens_APITokens) GetPageInfo() *GetAllAPITokens_APITokens_PageInfo {
	if t == nil {
		t = &GetAllAPITokens_APITokens{}
	}
	return &t.PageInfo
}
func (t *GetAllAPITokens_APITokens) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllAPITokens_APITokens{}
	}
	return t.TotalCount
}

type GetAPITokenByID_APIToken struct {
	CreatedAt         *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description       *string    "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt         *time.Time "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID                string     "json:\"id\" graphql:\"id\""
	IsActive          *bool      "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt        *time.Time "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name              string     "json:\"name\" graphql:\"name\""
	OwnerID           *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RevokedAt         *time.Time "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy         *string    "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason     *string    "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes            []string   "json:\"scopes,omitempty\" graphql:\"scopes\""
	SsoAuthorizations *string    "json:\"ssoAuthorizations,omitempty\" graphql:\"ssoAuthorizations\""
	Tags              []string   "json:\"tags,omitempty\" graphql:\"tags\""
	Token             string     "json:\"token\" graphql:\"token\""
	UpdatedAt         *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAPITokenByID_APIToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.CreatedAt
}
func (t *GetAPITokenByID_APIToken) GetCreatedBy() *string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.CreatedBy
}
func (t *GetAPITokenByID_APIToken) GetDescription() *string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.Description
}
func (t *GetAPITokenByID_APIToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.ExpiresAt
}
func (t *GetAPITokenByID_APIToken) GetID() string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.ID
}
func (t *GetAPITokenByID_APIToken) GetIsActive() *bool {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.IsActive
}
func (t *GetAPITokenByID_APIToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.LastUsedAt
}
func (t *GetAPITokenByID_APIToken) GetName() string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.Name
}
func (t *GetAPITokenByID_APIToken) GetOwnerID() *string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.OwnerID
}
func (t *GetAPITokenByID_APIToken) GetRevokedAt() *time.Time {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.RevokedAt
}
func (t *GetAPITokenByID_APIToken) GetRevokedBy() *string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.RevokedBy
}
func (t *GetAPITokenByID_APIToken) GetRevokedReason() *string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.RevokedReason
}
func (t *GetAPITokenByID_APIToken) GetScopes() []string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.Scopes
}
func (t *GetAPITokenByID_APIToken) GetSsoAuthorizations() *string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.SsoAuthorizations
}
func (t *GetAPITokenByID_APIToken) GetTags() []string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.Tags
}
func (t *GetAPITokenByID_APIToken) GetToken() string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.Token
}
func (t *GetAPITokenByID_APIToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.UpdatedAt
}
func (t *GetAPITokenByID_APIToken) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.UpdatedBy
}

type GetAPITokens_APITokens_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAPITokens_APITokens_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAPITokens_APITokens_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAPITokens_APITokens_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAPITokens_APITokens_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAPITokens_APITokens_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAPITokens_APITokens_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAPITokens_APITokens_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAPITokens_APITokens_PageInfo{}
	}
	return t.StartCursor
}

type GetAPITokens_APITokens_Edges_Node struct {
	CreatedAt         *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description       *string    "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt         *time.Time "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID                string     "json:\"id\" graphql:\"id\""
	IsActive          *bool      "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt        *time.Time "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name              string     "json:\"name\" graphql:\"name\""
	OwnerID           *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RevokedAt         *time.Time "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy         *string    "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason     *string    "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes            []string   "json:\"scopes,omitempty\" graphql:\"scopes\""
	SsoAuthorizations *string    "json:\"ssoAuthorizations,omitempty\" graphql:\"ssoAuthorizations\""
	Tags              []string   "json:\"tags,omitempty\" graphql:\"tags\""
	Token             string     "json:\"token\" graphql:\"token\""
	UpdatedAt         *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAPITokens_APITokens_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAPITokens_APITokens_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAPITokens_APITokens_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.Description
}
func (t *GetAPITokens_APITokens_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetAPITokens_APITokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.ID
}
func (t *GetAPITokens_APITokens_Edges_Node) GetIsActive() *bool {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.IsActive
}
func (t *GetAPITokens_APITokens_Edges_Node) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.LastUsedAt
}
func (t *GetAPITokens_APITokens_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.Name
}
func (t *GetAPITokens_APITokens_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAPITokens_APITokens_Edges_Node) GetRevokedAt() *time.Time {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.RevokedAt
}
func (t *GetAPITokens_APITokens_Edges_Node) GetRevokedBy() *string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.RevokedBy
}
func (t *GetAPITokens_APITokens_Edges_Node) GetRevokedReason() *string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.RevokedReason
}
func (t *GetAPITokens_APITokens_Edges_Node) GetScopes() []string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.Scopes
}
func (t *GetAPITokens_APITokens_Edges_Node) GetSsoAuthorizations() *string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.SsoAuthorizations
}
func (t *GetAPITokens_APITokens_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAPITokens_APITokens_Edges_Node) GetToken() string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.Token
}
func (t *GetAPITokens_APITokens_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAPITokens_APITokens_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAPITokens_APITokens_Edges struct {
	Node *GetAPITokens_APITokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAPITokens_APITokens_Edges) GetNode() *GetAPITokens_APITokens_Edges_Node {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges{}
	}
	return t.Node
}

type GetAPITokens_APITokens struct {
	Edges      []*GetAPITokens_APITokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAPITokens_APITokens_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                           "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAPITokens_APITokens) GetEdges() []*GetAPITokens_APITokens_Edges {
	if t == nil {
		t = &GetAPITokens_APITokens{}
	}
	return t.Edges
}
func (t *GetAPITokens_APITokens) GetPageInfo() *GetAPITokens_APITokens_PageInfo {
	if t == nil {
		t = &GetAPITokens_APITokens{}
	}
	return &t.PageInfo
}
func (t *GetAPITokens_APITokens) GetTotalCount() int64 {
	if t == nil {
		t = &GetAPITokens_APITokens{}
	}
	return t.TotalCount
}

type UpdateAPIToken_UpdateAPIToken_APIToken struct {
	CreatedAt         *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description       *string    "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt         *time.Time "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID                string     "json:\"id\" graphql:\"id\""
	IsActive          *bool      "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt        *time.Time "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name              string     "json:\"name\" graphql:\"name\""
	OwnerID           *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RevokedAt         *time.Time "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy         *string    "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason     *string    "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes            []string   "json:\"scopes,omitempty\" graphql:\"scopes\""
	SsoAuthorizations *string    "json:\"ssoAuthorizations,omitempty\" graphql:\"ssoAuthorizations\""
	Tags              []string   "json:\"tags,omitempty\" graphql:\"tags\""
	Token             string     "json:\"token\" graphql:\"token\""
	UpdatedAt         *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.CreatedAt
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.CreatedBy
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetDescription() *string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.Description
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.ExpiresAt
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetID() string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.ID
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetIsActive() *bool {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.IsActive
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.LastUsedAt
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetName() string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.Name
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetOwnerID() *string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.OwnerID
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetRevokedAt() *time.Time {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.RevokedAt
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetRevokedBy() *string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.RevokedBy
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetRevokedReason() *string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.RevokedReason
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetScopes() []string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.Scopes
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetSsoAuthorizations() *string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.SsoAuthorizations
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetTags() []string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.Tags
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetToken() string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.Token
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.UpdatedAt
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.UpdatedBy
}

type UpdateAPIToken_UpdateAPIToken struct {
	APIToken UpdateAPIToken_UpdateAPIToken_APIToken "json:\"apiToken\" graphql:\"apiToken\""
}

func (t *UpdateAPIToken_UpdateAPIToken) GetAPIToken() *UpdateAPIToken_UpdateAPIToken_APIToken {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken{}
	}
	return &t.APIToken
}

type CreateBulkCSVAsset_CreateBulkCSVAsset_Assets struct {
	AssetType   enums.AssetType "json:\"assetType\" graphql:\"assetType\""
	Categories  []string        "json:\"categories,omitempty\" graphql:\"categories\""
	Cpe         *string         "json:\"cpe,omitempty\" graphql:\"cpe\""
	CreatedAt   *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string         "json:\"description,omitempty\" graphql:\"description\""
	ID          string          "json:\"id\" graphql:\"id\""
	Identifier  *string         "json:\"identifier,omitempty\" graphql:\"identifier\""
	Name        string          "json:\"name\" graphql:\"name\""
	OwnerID     *string         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string        "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Website     *string         "json:\"website,omitempty\" graphql:\"website\""
}

func (t *CreateBulkCSVAsset_CreateBulkCSVAsset_Assets) GetAssetType() *enums.AssetType {
	if t == nil {
		t = &CreateBulkCSVAsset_CreateBulkCSVAsset_Assets{}
	}
	return &t.AssetType
}
func (t *CreateBulkCSVAsset_CreateBulkCSVAsset_Assets) GetCategories() []string {
	if t == nil {
		t = &CreateBulkCSVAsset_CreateBulkCSVAsset_Assets{}
	}
	return t.Categories
}
func (t *CreateBulkCSVAsset_CreateBulkCSVAsset_Assets) GetCpe() *string {
	if t == nil {
		t = &CreateBulkCSVAsset_CreateBulkCSVAsset_Assets{}
	}
	return t.Cpe
}
func (t *CreateBulkCSVAsset_CreateBulkCSVAsset_Assets) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVAsset_CreateBulkCSVAsset_Assets{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVAsset_CreateBulkCSVAsset_Assets) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVAsset_CreateBulkCSVAsset_Assets{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVAsset_CreateBulkCSVAsset_Assets) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVAsset_CreateBulkCSVAsset_Assets{}
	}
	return t.Description
}
func (t *CreateBulkCSVAsset_CreateBulkCSVAsset_Assets) GetID() string {
	if t == nil {
		t = &CreateBulkCSVAsset_CreateBulkCSVAsset_Assets{}
	}
	return t.ID
}
func (t *CreateBulkCSVAsset_CreateBulkCSVAsset_Assets) GetIdentifier() *string {
	if t == nil {
		t = &CreateBulkCSVAsset_CreateBulkCSVAsset_Assets{}
	}
	return t.Identifier
}
func (t *CreateBulkCSVAsset_CreateBulkCSVAsset_Assets) GetName() string {
	if t == nil {
		t = &CreateBulkCSVAsset_CreateBulkCSVAsset_Assets{}
	}
	return t.Name
}
func (t *CreateBulkCSVAsset_CreateBulkCSVAsset_Assets) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVAsset_CreateBulkCSVAsset_Assets{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVAsset_CreateBulkCSVAsset_Assets) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVAsset_CreateBulkCSVAsset_Assets{}
	}
	return t.Tags
}
func (t *CreateBulkCSVAsset_CreateBulkCSVAsset_Assets) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVAsset_CreateBulkCSVAsset_Assets{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVAsset_CreateBulkCSVAsset_Assets) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVAsset_CreateBulkCSVAsset_Assets{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkCSVAsset_CreateBulkCSVAsset_Assets) GetWebsite() *string {
	if t == nil {
		t = &CreateBulkCSVAsset_CreateBulkCSVAsset_Assets{}
	}
	return t.Website
}

type CreateBulkCSVAsset_CreateBulkCSVAsset struct {
	Assets []*CreateBulkCSVAsset_CreateBulkCSVAsset_Assets "json:\"assets,omitempty\" graphql:\"assets\""
}

func (t *CreateBulkCSVAsset_CreateBulkCSVAsset) GetAssets() []*CreateBulkCSVAsset_CreateBulkCSVAsset_Assets {
	if t == nil {
		t = &CreateBulkCSVAsset_CreateBulkCSVAsset{}
	}
	return t.Assets
}

type CreateBulkAsset_CreateBulkAsset_Assets struct {
	AssetType   enums.AssetType "json:\"assetType\" graphql:\"assetType\""
	Categories  []string        "json:\"categories,omitempty\" graphql:\"categories\""
	Cpe         *string         "json:\"cpe,omitempty\" graphql:\"cpe\""
	CreatedAt   *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string         "json:\"description,omitempty\" graphql:\"description\""
	ID          string          "json:\"id\" graphql:\"id\""
	Identifier  *string         "json:\"identifier,omitempty\" graphql:\"identifier\""
	Name        string          "json:\"name\" graphql:\"name\""
	OwnerID     *string         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string        "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Website     *string         "json:\"website,omitempty\" graphql:\"website\""
}

func (t *CreateBulkAsset_CreateBulkAsset_Assets) GetAssetType() *enums.AssetType {
	if t == nil {
		t = &CreateBulkAsset_CreateBulkAsset_Assets{}
	}
	return &t.AssetType
}
func (t *CreateBulkAsset_CreateBulkAsset_Assets) GetCategories() []string {
	if t == nil {
		t = &CreateBulkAsset_CreateBulkAsset_Assets{}
	}
	return t.Categories
}
func (t *CreateBulkAsset_CreateBulkAsset_Assets) GetCpe() *string {
	if t == nil {
		t = &CreateBulkAsset_CreateBulkAsset_Assets{}
	}
	return t.Cpe
}
func (t *CreateBulkAsset_CreateBulkAsset_Assets) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkAsset_CreateBulkAsset_Assets{}
	}
	return t.CreatedAt
}
func (t *CreateBulkAsset_CreateBulkAsset_Assets) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkAsset_CreateBulkAsset_Assets{}
	}
	return t.CreatedBy
}
func (t *CreateBulkAsset_CreateBulkAsset_Assets) GetDescription() *string {
	if t == nil {
		t = &CreateBulkAsset_CreateBulkAsset_Assets{}
	}
	return t.Description
}
func (t *CreateBulkAsset_CreateBulkAsset_Assets) GetID() string {
	if t == nil {
		t = &CreateBulkAsset_CreateBulkAsset_Assets{}
	}
	return t.ID
}
func (t *CreateBulkAsset_CreateBulkAsset_Assets) GetIdentifier() *string {
	if t == nil {
		t = &CreateBulkAsset_CreateBulkAsset_Assets{}
	}
	return t.Identifier
}
func (t *CreateBulkAsset_CreateBulkAsset_Assets) GetName() string {
	if t == nil {
		t = &CreateBulkAsset_CreateBulkAsset_Assets{}
	}
	return t.Name
}
func (t *CreateBulkAsset_CreateBulkAsset_Assets) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkAsset_CreateBulkAsset_Assets{}
	}
	return t.OwnerID
}
func (t *CreateBulkAsset_CreateBulkAsset_Assets) GetTags() []string {
	if t == nil {
		t = &CreateBulkAsset_CreateBulkAsset_Assets{}
	}
	return t.Tags
}
func (t *CreateBulkAsset_CreateBulkAsset_Assets) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkAsset_CreateBulkAsset_Assets{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkAsset_CreateBulkAsset_Assets) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkAsset_CreateBulkAsset_Assets{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkAsset_CreateBulkAsset_Assets) GetWebsite() *string {
	if t == nil {
		t = &CreateBulkAsset_CreateBulkAsset_Assets{}
	}
	return t.Website
}

type CreateBulkAsset_CreateBulkAsset struct {
	Assets []*CreateBulkAsset_CreateBulkAsset_Assets "json:\"assets,omitempty\" graphql:\"assets\""
}

func (t *CreateBulkAsset_CreateBulkAsset) GetAssets() []*CreateBulkAsset_CreateBulkAsset_Assets {
	if t == nil {
		t = &CreateBulkAsset_CreateBulkAsset{}
	}
	return t.Assets
}

type CreateAsset_CreateAsset_Asset struct {
	AssetType   enums.AssetType "json:\"assetType\" graphql:\"assetType\""
	Categories  []string        "json:\"categories,omitempty\" graphql:\"categories\""
	Cpe         *string         "json:\"cpe,omitempty\" graphql:\"cpe\""
	CreatedAt   *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string         "json:\"description,omitempty\" graphql:\"description\""
	ID          string          "json:\"id\" graphql:\"id\""
	Identifier  *string         "json:\"identifier,omitempty\" graphql:\"identifier\""
	Name        string          "json:\"name\" graphql:\"name\""
	OwnerID     *string         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string        "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Website     *string         "json:\"website,omitempty\" graphql:\"website\""
}

func (t *CreateAsset_CreateAsset_Asset) GetAssetType() *enums.AssetType {
	if t == nil {
		t = &CreateAsset_CreateAsset_Asset{}
	}
	return &t.AssetType
}
func (t *CreateAsset_CreateAsset_Asset) GetCategories() []string {
	if t == nil {
		t = &CreateAsset_CreateAsset_Asset{}
	}
	return t.Categories
}
func (t *CreateAsset_CreateAsset_Asset) GetCpe() *string {
	if t == nil {
		t = &CreateAsset_CreateAsset_Asset{}
	}
	return t.Cpe
}
func (t *CreateAsset_CreateAsset_Asset) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateAsset_CreateAsset_Asset{}
	}
	return t.CreatedAt
}
func (t *CreateAsset_CreateAsset_Asset) GetCreatedBy() *string {
	if t == nil {
		t = &CreateAsset_CreateAsset_Asset{}
	}
	return t.CreatedBy
}
func (t *CreateAsset_CreateAsset_Asset) GetDescription() *string {
	if t == nil {
		t = &CreateAsset_CreateAsset_Asset{}
	}
	return t.Description
}
func (t *CreateAsset_CreateAsset_Asset) GetID() string {
	if t == nil {
		t = &CreateAsset_CreateAsset_Asset{}
	}
	return t.ID
}
func (t *CreateAsset_CreateAsset_Asset) GetIdentifier() *string {
	if t == nil {
		t = &CreateAsset_CreateAsset_Asset{}
	}
	return t.Identifier
}
func (t *CreateAsset_CreateAsset_Asset) GetName() string {
	if t == nil {
		t = &CreateAsset_CreateAsset_Asset{}
	}
	return t.Name
}
func (t *CreateAsset_CreateAsset_Asset) GetOwnerID() *string {
	if t == nil {
		t = &CreateAsset_CreateAsset_Asset{}
	}
	return t.OwnerID
}
func (t *CreateAsset_CreateAsset_Asset) GetTags() []string {
	if t == nil {
		t = &CreateAsset_CreateAsset_Asset{}
	}
	return t.Tags
}
func (t *CreateAsset_CreateAsset_Asset) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateAsset_CreateAsset_Asset{}
	}
	return t.UpdatedAt
}
func (t *CreateAsset_CreateAsset_Asset) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateAsset_CreateAsset_Asset{}
	}
	return t.UpdatedBy
}
func (t *CreateAsset_CreateAsset_Asset) GetWebsite() *string {
	if t == nil {
		t = &CreateAsset_CreateAsset_Asset{}
	}
	return t.Website
}

type CreateAsset_CreateAsset struct {
	Asset CreateAsset_CreateAsset_Asset "json:\"asset\" graphql:\"asset\""
}

func (t *CreateAsset_CreateAsset) GetAsset() *CreateAsset_CreateAsset_Asset {
	if t == nil {
		t = &CreateAsset_CreateAsset{}
	}
	return &t.Asset
}

type DeleteAsset_DeleteAsset struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteAsset_DeleteAsset) GetDeletedID() string {
	if t == nil {
		t = &DeleteAsset_DeleteAsset{}
	}
	return t.DeletedID
}

type GetAllAssets_Assets_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllAssets_Assets_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllAssets_Assets_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllAssets_Assets_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllAssets_Assets_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllAssets_Assets_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllAssets_Assets_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllAssets_Assets_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllAssets_Assets_PageInfo{}
	}
	return t.StartCursor
}

type GetAllAssets_Assets_Edges_Node struct {
	AssetType   enums.AssetType "json:\"assetType\" graphql:\"assetType\""
	Categories  []string        "json:\"categories,omitempty\" graphql:\"categories\""
	Cpe         *string         "json:\"cpe,omitempty\" graphql:\"cpe\""
	CreatedAt   *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string         "json:\"description,omitempty\" graphql:\"description\""
	ID          string          "json:\"id\" graphql:\"id\""
	Identifier  *string         "json:\"identifier,omitempty\" graphql:\"identifier\""
	Name        string          "json:\"name\" graphql:\"name\""
	OwnerID     *string         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string        "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Website     *string         "json:\"website,omitempty\" graphql:\"website\""
}

func (t *GetAllAssets_Assets_Edges_Node) GetAssetType() *enums.AssetType {
	if t == nil {
		t = &GetAllAssets_Assets_Edges_Node{}
	}
	return &t.AssetType
}
func (t *GetAllAssets_Assets_Edges_Node) GetCategories() []string {
	if t == nil {
		t = &GetAllAssets_Assets_Edges_Node{}
	}
	return t.Categories
}
func (t *GetAllAssets_Assets_Edges_Node) GetCpe() *string {
	if t == nil {
		t = &GetAllAssets_Assets_Edges_Node{}
	}
	return t.Cpe
}
func (t *GetAllAssets_Assets_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllAssets_Assets_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllAssets_Assets_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllAssets_Assets_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllAssets_Assets_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllAssets_Assets_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllAssets_Assets_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllAssets_Assets_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllAssets_Assets_Edges_Node) GetIdentifier() *string {
	if t == nil {
		t = &GetAllAssets_Assets_Edges_Node{}
	}
	return t.Identifier
}
func (t *GetAllAssets_Assets_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllAssets_Assets_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllAssets_Assets_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllAssets_Assets_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllAssets_Assets_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllAssets_Assets_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllAssets_Assets_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllAssets_Assets_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllAssets_Assets_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllAssets_Assets_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllAssets_Assets_Edges_Node) GetWebsite() *string {
	if t == nil {
		t = &GetAllAssets_Assets_Edges_Node{}
	}
	return t.Website
}

type GetAllAssets_Assets_Edges struct {
	Node *GetAllAssets_Assets_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllAssets_Assets_Edges) GetNode() *GetAllAssets_Assets_Edges_Node {
	if t == nil {
		t = &GetAllAssets_Assets_Edges{}
	}
	return t.Node
}

type GetAllAssets_Assets struct {
	Edges      []*GetAllAssets_Assets_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllAssets_Assets_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                        "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllAssets_Assets) GetEdges() []*GetAllAssets_Assets_Edges {
	if t == nil {
		t = &GetAllAssets_Assets{}
	}
	return t.Edges
}
func (t *GetAllAssets_Assets) GetPageInfo() *GetAllAssets_Assets_PageInfo {
	if t == nil {
		t = &GetAllAssets_Assets{}
	}
	return &t.PageInfo
}
func (t *GetAllAssets_Assets) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllAssets_Assets{}
	}
	return t.TotalCount
}

type GetAssetByID_Asset struct {
	AssetType   enums.AssetType "json:\"assetType\" graphql:\"assetType\""
	Categories  []string        "json:\"categories,omitempty\" graphql:\"categories\""
	Cpe         *string         "json:\"cpe,omitempty\" graphql:\"cpe\""
	CreatedAt   *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string         "json:\"description,omitempty\" graphql:\"description\""
	ID          string          "json:\"id\" graphql:\"id\""
	Identifier  *string         "json:\"identifier,omitempty\" graphql:\"identifier\""
	Name        string          "json:\"name\" graphql:\"name\""
	OwnerID     *string         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string        "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Website     *string         "json:\"website,omitempty\" graphql:\"website\""
}

func (t *GetAssetByID_Asset) GetAssetType() *enums.AssetType {
	if t == nil {
		t = &GetAssetByID_Asset{}
	}
	return &t.AssetType
}
func (t *GetAssetByID_Asset) GetCategories() []string {
	if t == nil {
		t = &GetAssetByID_Asset{}
	}
	return t.Categories
}
func (t *GetAssetByID_Asset) GetCpe() *string {
	if t == nil {
		t = &GetAssetByID_Asset{}
	}
	return t.Cpe
}
func (t *GetAssetByID_Asset) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAssetByID_Asset{}
	}
	return t.CreatedAt
}
func (t *GetAssetByID_Asset) GetCreatedBy() *string {
	if t == nil {
		t = &GetAssetByID_Asset{}
	}
	return t.CreatedBy
}
func (t *GetAssetByID_Asset) GetDescription() *string {
	if t == nil {
		t = &GetAssetByID_Asset{}
	}
	return t.Description
}
func (t *GetAssetByID_Asset) GetID() string {
	if t == nil {
		t = &GetAssetByID_Asset{}
	}
	return t.ID
}
func (t *GetAssetByID_Asset) GetIdentifier() *string {
	if t == nil {
		t = &GetAssetByID_Asset{}
	}
	return t.Identifier
}
func (t *GetAssetByID_Asset) GetName() string {
	if t == nil {
		t = &GetAssetByID_Asset{}
	}
	return t.Name
}
func (t *GetAssetByID_Asset) GetOwnerID() *string {
	if t == nil {
		t = &GetAssetByID_Asset{}
	}
	return t.OwnerID
}
func (t *GetAssetByID_Asset) GetTags() []string {
	if t == nil {
		t = &GetAssetByID_Asset{}
	}
	return t.Tags
}
func (t *GetAssetByID_Asset) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAssetByID_Asset{}
	}
	return t.UpdatedAt
}
func (t *GetAssetByID_Asset) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAssetByID_Asset{}
	}
	return t.UpdatedBy
}
func (t *GetAssetByID_Asset) GetWebsite() *string {
	if t == nil {
		t = &GetAssetByID_Asset{}
	}
	return t.Website
}

type GetAssets_Assets_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAssets_Assets_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAssets_Assets_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAssets_Assets_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAssets_Assets_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAssets_Assets_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAssets_Assets_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAssets_Assets_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAssets_Assets_PageInfo{}
	}
	return t.StartCursor
}

type GetAssets_Assets_Edges_Node struct {
	AssetType   enums.AssetType "json:\"assetType\" graphql:\"assetType\""
	Categories  []string        "json:\"categories,omitempty\" graphql:\"categories\""
	Cpe         *string         "json:\"cpe,omitempty\" graphql:\"cpe\""
	CreatedAt   *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string         "json:\"description,omitempty\" graphql:\"description\""
	ID          string          "json:\"id\" graphql:\"id\""
	Identifier  *string         "json:\"identifier,omitempty\" graphql:\"identifier\""
	Name        string          "json:\"name\" graphql:\"name\""
	OwnerID     *string         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string        "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Website     *string         "json:\"website,omitempty\" graphql:\"website\""
}

func (t *GetAssets_Assets_Edges_Node) GetAssetType() *enums.AssetType {
	if t == nil {
		t = &GetAssets_Assets_Edges_Node{}
	}
	return &t.AssetType
}
func (t *GetAssets_Assets_Edges_Node) GetCategories() []string {
	if t == nil {
		t = &GetAssets_Assets_Edges_Node{}
	}
	return t.Categories
}
func (t *GetAssets_Assets_Edges_Node) GetCpe() *string {
	if t == nil {
		t = &GetAssets_Assets_Edges_Node{}
	}
	return t.Cpe
}
func (t *GetAssets_Assets_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAssets_Assets_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAssets_Assets_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAssets_Assets_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAssets_Assets_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAssets_Assets_Edges_Node{}
	}
	return t.Description
}
func (t *GetAssets_Assets_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAssets_Assets_Edges_Node{}
	}
	return t.ID
}
func (t *GetAssets_Assets_Edges_Node) GetIdentifier() *string {
	if t == nil {
		t = &GetAssets_Assets_Edges_Node{}
	}
	return t.Identifier
}
func (t *GetAssets_Assets_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAssets_Assets_Edges_Node{}
	}
	return t.Name
}
func (t *GetAssets_Assets_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAssets_Assets_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAssets_Assets_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAssets_Assets_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAssets_Assets_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAssets_Assets_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAssets_Assets_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAssets_Assets_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAssets_Assets_Edges_Node) GetWebsite() *string {
	if t == nil {
		t = &GetAssets_Assets_Edges_Node{}
	}
	return t.Website
}

type GetAssets_Assets_Edges struct {
	Node *GetAssets_Assets_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAssets_Assets_Edges) GetNode() *GetAssets_Assets_Edges_Node {
	if t == nil {
		t = &GetAssets_Assets_Edges{}
	}
	return t.Node
}

type GetAssets_Assets struct {
	Edges      []*GetAssets_Assets_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAssets_Assets_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAssets_Assets) GetEdges() []*GetAssets_Assets_Edges {
	if t == nil {
		t = &GetAssets_Assets{}
	}
	return t.Edges
}
func (t *GetAssets_Assets) GetPageInfo() *GetAssets_Assets_PageInfo {
	if t == nil {
		t = &GetAssets_Assets{}
	}
	return &t.PageInfo
}
func (t *GetAssets_Assets) GetTotalCount() int64 {
	if t == nil {
		t = &GetAssets_Assets{}
	}
	return t.TotalCount
}

type UpdateAsset_UpdateAsset_Asset struct {
	AssetType   enums.AssetType "json:\"assetType\" graphql:\"assetType\""
	Categories  []string        "json:\"categories,omitempty\" graphql:\"categories\""
	Cpe         *string         "json:\"cpe,omitempty\" graphql:\"cpe\""
	CreatedAt   *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string         "json:\"description,omitempty\" graphql:\"description\""
	ID          string          "json:\"id\" graphql:\"id\""
	Identifier  *string         "json:\"identifier,omitempty\" graphql:\"identifier\""
	Name        string          "json:\"name\" graphql:\"name\""
	OwnerID     *string         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string        "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Website     *string         "json:\"website,omitempty\" graphql:\"website\""
}

func (t *UpdateAsset_UpdateAsset_Asset) GetAssetType() *enums.AssetType {
	if t == nil {
		t = &UpdateAsset_UpdateAsset_Asset{}
	}
	return &t.AssetType
}
func (t *UpdateAsset_UpdateAsset_Asset) GetCategories() []string {
	if t == nil {
		t = &UpdateAsset_UpdateAsset_Asset{}
	}
	return t.Categories
}
func (t *UpdateAsset_UpdateAsset_Asset) GetCpe() *string {
	if t == nil {
		t = &UpdateAsset_UpdateAsset_Asset{}
	}
	return t.Cpe
}
func (t *UpdateAsset_UpdateAsset_Asset) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateAsset_UpdateAsset_Asset{}
	}
	return t.CreatedAt
}
func (t *UpdateAsset_UpdateAsset_Asset) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateAsset_UpdateAsset_Asset{}
	}
	return t.CreatedBy
}
func (t *UpdateAsset_UpdateAsset_Asset) GetDescription() *string {
	if t == nil {
		t = &UpdateAsset_UpdateAsset_Asset{}
	}
	return t.Description
}
func (t *UpdateAsset_UpdateAsset_Asset) GetID() string {
	if t == nil {
		t = &UpdateAsset_UpdateAsset_Asset{}
	}
	return t.ID
}
func (t *UpdateAsset_UpdateAsset_Asset) GetIdentifier() *string {
	if t == nil {
		t = &UpdateAsset_UpdateAsset_Asset{}
	}
	return t.Identifier
}
func (t *UpdateAsset_UpdateAsset_Asset) GetName() string {
	if t == nil {
		t = &UpdateAsset_UpdateAsset_Asset{}
	}
	return t.Name
}
func (t *UpdateAsset_UpdateAsset_Asset) GetOwnerID() *string {
	if t == nil {
		t = &UpdateAsset_UpdateAsset_Asset{}
	}
	return t.OwnerID
}
func (t *UpdateAsset_UpdateAsset_Asset) GetTags() []string {
	if t == nil {
		t = &UpdateAsset_UpdateAsset_Asset{}
	}
	return t.Tags
}
func (t *UpdateAsset_UpdateAsset_Asset) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateAsset_UpdateAsset_Asset{}
	}
	return t.UpdatedAt
}
func (t *UpdateAsset_UpdateAsset_Asset) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateAsset_UpdateAsset_Asset{}
	}
	return t.UpdatedBy
}
func (t *UpdateAsset_UpdateAsset_Asset) GetWebsite() *string {
	if t == nil {
		t = &UpdateAsset_UpdateAsset_Asset{}
	}
	return t.Website
}

type UpdateAsset_UpdateAsset struct {
	Asset UpdateAsset_UpdateAsset_Asset "json:\"asset\" graphql:\"asset\""
}

func (t *UpdateAsset_UpdateAsset) GetAsset() *UpdateAsset_UpdateAsset_Asset {
	if t == nil {
		t = &UpdateAsset_UpdateAsset{}
	}
	return &t.Asset
}

type GetAllAssetHistories_AssetHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllAssetHistories_AssetHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllAssetHistories_AssetHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllAssetHistories_AssetHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllAssetHistories_AssetHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllAssetHistories_AssetHistories_Edges_Node struct {
	AssetType   enums.AssetType "json:\"assetType\" graphql:\"assetType\""
	Categories  []string        "json:\"categories,omitempty\" graphql:\"categories\""
	Cpe         *string         "json:\"cpe,omitempty\" graphql:\"cpe\""
	CreatedAt   *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string         "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime time.Time       "json:\"historyTime\" graphql:\"historyTime\""
	ID          string          "json:\"id\" graphql:\"id\""
	Identifier  *string         "json:\"identifier,omitempty\" graphql:\"identifier\""
	Name        string          "json:\"name\" graphql:\"name\""
	Operation   history.OpType  "json:\"operation\" graphql:\"operation\""
	OwnerID     *string         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string         "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string        "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Website     *string         "json:\"website,omitempty\" graphql:\"website\""
}

func (t *GetAllAssetHistories_AssetHistories_Edges_Node) GetAssetType() *enums.AssetType {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories_Edges_Node{}
	}
	return &t.AssetType
}
func (t *GetAllAssetHistories_AssetHistories_Edges_Node) GetCategories() []string {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.Categories
}
func (t *GetAllAssetHistories_AssetHistories_Edges_Node) GetCpe() *string {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.Cpe
}
func (t *GetAllAssetHistories_AssetHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllAssetHistories_AssetHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllAssetHistories_AssetHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllAssetHistories_AssetHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllAssetHistories_AssetHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllAssetHistories_AssetHistories_Edges_Node) GetIdentifier() *string {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.Identifier
}
func (t *GetAllAssetHistories_AssetHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllAssetHistories_AssetHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllAssetHistories_AssetHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllAssetHistories_AssetHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllAssetHistories_AssetHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllAssetHistories_AssetHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllAssetHistories_AssetHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllAssetHistories_AssetHistories_Edges_Node) GetWebsite() *string {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.Website
}

type GetAllAssetHistories_AssetHistories_Edges struct {
	Node *GetAllAssetHistories_AssetHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllAssetHistories_AssetHistories_Edges) GetNode() *GetAllAssetHistories_AssetHistories_Edges_Node {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories_Edges{}
	}
	return t.Node
}

type GetAllAssetHistories_AssetHistories struct {
	Edges      []*GetAllAssetHistories_AssetHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllAssetHistories_AssetHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                        "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllAssetHistories_AssetHistories) GetEdges() []*GetAllAssetHistories_AssetHistories_Edges {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories{}
	}
	return t.Edges
}
func (t *GetAllAssetHistories_AssetHistories) GetPageInfo() *GetAllAssetHistories_AssetHistories_PageInfo {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllAssetHistories_AssetHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllAssetHistories_AssetHistories{}
	}
	return t.TotalCount
}

type GetAssetHistories_AssetHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAssetHistories_AssetHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAssetHistories_AssetHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAssetHistories_AssetHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAssetHistories_AssetHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAssetHistories_AssetHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAssetHistories_AssetHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAssetHistories_AssetHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAssetHistories_AssetHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAssetHistories_AssetHistories_Edges_Node struct {
	AssetType   enums.AssetType "json:\"assetType\" graphql:\"assetType\""
	Categories  []string        "json:\"categories,omitempty\" graphql:\"categories\""
	Cpe         *string         "json:\"cpe,omitempty\" graphql:\"cpe\""
	CreatedAt   *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string         "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime time.Time       "json:\"historyTime\" graphql:\"historyTime\""
	ID          string          "json:\"id\" graphql:\"id\""
	Identifier  *string         "json:\"identifier,omitempty\" graphql:\"identifier\""
	Name        string          "json:\"name\" graphql:\"name\""
	Operation   history.OpType  "json:\"operation\" graphql:\"operation\""
	OwnerID     *string         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string         "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string        "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Website     *string         "json:\"website,omitempty\" graphql:\"website\""
}

func (t *GetAssetHistories_AssetHistories_Edges_Node) GetAssetType() *enums.AssetType {
	if t == nil {
		t = &GetAssetHistories_AssetHistories_Edges_Node{}
	}
	return &t.AssetType
}
func (t *GetAssetHistories_AssetHistories_Edges_Node) GetCategories() []string {
	if t == nil {
		t = &GetAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.Categories
}
func (t *GetAssetHistories_AssetHistories_Edges_Node) GetCpe() *string {
	if t == nil {
		t = &GetAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.Cpe
}
func (t *GetAssetHistories_AssetHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAssetHistories_AssetHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAssetHistories_AssetHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAssetHistories_AssetHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAssetHistories_AssetHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAssetHistories_AssetHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAssetHistories_AssetHistories_Edges_Node) GetIdentifier() *string {
	if t == nil {
		t = &GetAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.Identifier
}
func (t *GetAssetHistories_AssetHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAssetHistories_AssetHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAssetHistories_AssetHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAssetHistories_AssetHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAssetHistories_AssetHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAssetHistories_AssetHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAssetHistories_AssetHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAssetHistories_AssetHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAssetHistories_AssetHistories_Edges_Node) GetWebsite() *string {
	if t == nil {
		t = &GetAssetHistories_AssetHistories_Edges_Node{}
	}
	return t.Website
}

type GetAssetHistories_AssetHistories_Edges struct {
	Node *GetAssetHistories_AssetHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAssetHistories_AssetHistories_Edges) GetNode() *GetAssetHistories_AssetHistories_Edges_Node {
	if t == nil {
		t = &GetAssetHistories_AssetHistories_Edges{}
	}
	return t.Node
}

type GetAssetHistories_AssetHistories struct {
	Edges      []*GetAssetHistories_AssetHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAssetHistories_AssetHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAssetHistories_AssetHistories) GetEdges() []*GetAssetHistories_AssetHistories_Edges {
	if t == nil {
		t = &GetAssetHistories_AssetHistories{}
	}
	return t.Edges
}
func (t *GetAssetHistories_AssetHistories) GetPageInfo() *GetAssetHistories_AssetHistories_PageInfo {
	if t == nil {
		t = &GetAssetHistories_AssetHistories{}
	}
	return &t.PageInfo
}
func (t *GetAssetHistories_AssetHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAssetHistories_AssetHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVContact_CreateBulkCSVContact_Contacts struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	ID          string           "json:\"id\" graphql:\"id\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetAddress() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.Address
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetCompany() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.Company
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetEmail() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.Email
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetFullName() string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.FullName
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetID() string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.ID
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetPhoneNumber() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.PhoneNumber
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return &t.Status
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.Tags
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetTitle() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.Title
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVContact_CreateBulkCSVContact struct {
	Contacts []*CreateBulkCSVContact_CreateBulkCSVContact_Contacts "json:\"contacts,omitempty\" graphql:\"contacts\""
}

func (t *CreateBulkCSVContact_CreateBulkCSVContact) GetContacts() []*CreateBulkCSVContact_CreateBulkCSVContact_Contacts {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact{}
	}
	return t.Contacts
}

type CreateBulkContact_CreateBulkContact_Contacts struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	ID          string           "json:\"id\" graphql:\"id\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkContact_CreateBulkContact_Contacts) GetAddress() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.Address
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetCompany() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.Company
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.CreatedAt
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.CreatedBy
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetEmail() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.Email
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetFullName() string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.FullName
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetID() string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.ID
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.OwnerID
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetPhoneNumber() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.PhoneNumber
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return &t.Status
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetTags() []string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.Tags
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetTitle() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.Title
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.UpdatedBy
}

type CreateBulkContact_CreateBulkContact struct {
	Contacts []*CreateBulkContact_CreateBulkContact_Contacts "json:\"contacts,omitempty\" graphql:\"contacts\""
}

func (t *CreateBulkContact_CreateBulkContact) GetContacts() []*CreateBulkContact_CreateBulkContact_Contacts {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact{}
	}
	return t.Contacts
}

type CreateContact_CreateContact_Contact struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	ID          string           "json:\"id\" graphql:\"id\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateContact_CreateContact_Contact) GetAddress() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.Address
}
func (t *CreateContact_CreateContact_Contact) GetCompany() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.Company
}
func (t *CreateContact_CreateContact_Contact) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.CreatedAt
}
func (t *CreateContact_CreateContact_Contact) GetCreatedBy() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.CreatedBy
}
func (t *CreateContact_CreateContact_Contact) GetEmail() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.Email
}
func (t *CreateContact_CreateContact_Contact) GetFullName() string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.FullName
}
func (t *CreateContact_CreateContact_Contact) GetID() string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.ID
}
func (t *CreateContact_CreateContact_Contact) GetOwnerID() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.OwnerID
}
func (t *CreateContact_CreateContact_Contact) GetPhoneNumber() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.PhoneNumber
}
func (t *CreateContact_CreateContact_Contact) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return &t.Status
}
func (t *CreateContact_CreateContact_Contact) GetTags() []string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.Tags
}
func (t *CreateContact_CreateContact_Contact) GetTitle() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.Title
}
func (t *CreateContact_CreateContact_Contact) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.UpdatedAt
}
func (t *CreateContact_CreateContact_Contact) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.UpdatedBy
}

type CreateContact_CreateContact struct {
	Contact CreateContact_CreateContact_Contact "json:\"contact\" graphql:\"contact\""
}

func (t *CreateContact_CreateContact) GetContact() *CreateContact_CreateContact_Contact {
	if t == nil {
		t = &CreateContact_CreateContact{}
	}
	return &t.Contact
}

type DeleteContact_DeleteContact struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteContact_DeleteContact) GetDeletedID() string {
	if t == nil {
		t = &DeleteContact_DeleteContact{}
	}
	return t.DeletedID
}

type GetAllContacts_Contacts_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllContacts_Contacts_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllContacts_Contacts_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllContacts_Contacts_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllContacts_Contacts_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllContacts_Contacts_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllContacts_Contacts_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_PageInfo{}
	}
	return t.StartCursor
}

type GetAllContacts_Contacts_Edges_Node struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	ID          string           "json:\"id\" graphql:\"id\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllContacts_Contacts_Edges_Node) GetAddress() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.Address
}
func (t *GetAllContacts_Contacts_Edges_Node) GetCompany() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.Company
}
func (t *GetAllContacts_Contacts_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllContacts_Contacts_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllContacts_Contacts_Edges_Node) GetEmail() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.Email
}
func (t *GetAllContacts_Contacts_Edges_Node) GetFullName() string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.FullName
}
func (t *GetAllContacts_Contacts_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllContacts_Contacts_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllContacts_Contacts_Edges_Node) GetPhoneNumber() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.PhoneNumber
}
func (t *GetAllContacts_Contacts_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllContacts_Contacts_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllContacts_Contacts_Edges_Node) GetTitle() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.Title
}
func (t *GetAllContacts_Contacts_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllContacts_Contacts_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllContacts_Contacts_Edges struct {
	Node *GetAllContacts_Contacts_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllContacts_Contacts_Edges) GetNode() *GetAllContacts_Contacts_Edges_Node {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges{}
	}
	return t.Node
}

type GetAllContacts_Contacts struct {
	Edges      []*GetAllContacts_Contacts_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllContacts_Contacts_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                            "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllContacts_Contacts) GetEdges() []*GetAllContacts_Contacts_Edges {
	if t == nil {
		t = &GetAllContacts_Contacts{}
	}
	return t.Edges
}
func (t *GetAllContacts_Contacts) GetPageInfo() *GetAllContacts_Contacts_PageInfo {
	if t == nil {
		t = &GetAllContacts_Contacts{}
	}
	return &t.PageInfo
}
func (t *GetAllContacts_Contacts) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllContacts_Contacts{}
	}
	return t.TotalCount
}

type GetContactByID_Contact struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	ID          string           "json:\"id\" graphql:\"id\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetContactByID_Contact) GetAddress() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.Address
}
func (t *GetContactByID_Contact) GetCompany() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.Company
}
func (t *GetContactByID_Contact) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.CreatedAt
}
func (t *GetContactByID_Contact) GetCreatedBy() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.CreatedBy
}
func (t *GetContactByID_Contact) GetEmail() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.Email
}
func (t *GetContactByID_Contact) GetFullName() string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.FullName
}
func (t *GetContactByID_Contact) GetID() string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.ID
}
func (t *GetContactByID_Contact) GetOwnerID() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.OwnerID
}
func (t *GetContactByID_Contact) GetPhoneNumber() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.PhoneNumber
}
func (t *GetContactByID_Contact) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return &t.Status
}
func (t *GetContactByID_Contact) GetTags() []string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.Tags
}
func (t *GetContactByID_Contact) GetTitle() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.Title
}
func (t *GetContactByID_Contact) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.UpdatedAt
}
func (t *GetContactByID_Contact) GetUpdatedBy() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.UpdatedBy
}

type GetContacts_Contacts_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetContacts_Contacts_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetContacts_Contacts_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetContacts_Contacts_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetContacts_Contacts_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetContacts_Contacts_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetContacts_Contacts_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetContacts_Contacts_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetContacts_Contacts_PageInfo{}
	}
	return t.StartCursor
}

type GetContacts_Contacts_Edges_Node struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	ID          string           "json:\"id\" graphql:\"id\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetContacts_Contacts_Edges_Node) GetAddress() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.Address
}
func (t *GetContacts_Contacts_Edges_Node) GetCompany() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.Company
}
func (t *GetContacts_Contacts_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetContacts_Contacts_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetContacts_Contacts_Edges_Node) GetEmail() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.Email
}
func (t *GetContacts_Contacts_Edges_Node) GetFullName() string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.FullName
}
func (t *GetContacts_Contacts_Edges_Node) GetID() string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.ID
}
func (t *GetContacts_Contacts_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetContacts_Contacts_Edges_Node) GetPhoneNumber() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.PhoneNumber
}
func (t *GetContacts_Contacts_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return &t.Status
}
func (t *GetContacts_Contacts_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.Tags
}
func (t *GetContacts_Contacts_Edges_Node) GetTitle() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.Title
}
func (t *GetContacts_Contacts_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetContacts_Contacts_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetContacts_Contacts_Edges struct {
	Node *GetContacts_Contacts_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetContacts_Contacts_Edges) GetNode() *GetContacts_Contacts_Edges_Node {
	if t == nil {
		t = &GetContacts_Contacts_Edges{}
	}
	return t.Node
}

type GetContacts_Contacts struct {
	Edges      []*GetContacts_Contacts_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetContacts_Contacts_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetContacts_Contacts) GetEdges() []*GetContacts_Contacts_Edges {
	if t == nil {
		t = &GetContacts_Contacts{}
	}
	return t.Edges
}
func (t *GetContacts_Contacts) GetPageInfo() *GetContacts_Contacts_PageInfo {
	if t == nil {
		t = &GetContacts_Contacts{}
	}
	return &t.PageInfo
}
func (t *GetContacts_Contacts) GetTotalCount() int64 {
	if t == nil {
		t = &GetContacts_Contacts{}
	}
	return t.TotalCount
}

type UpdateContact_UpdateContact_Contact struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	ID          string           "json:\"id\" graphql:\"id\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateContact_UpdateContact_Contact) GetAddress() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.Address
}
func (t *UpdateContact_UpdateContact_Contact) GetCompany() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.Company
}
func (t *UpdateContact_UpdateContact_Contact) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.CreatedAt
}
func (t *UpdateContact_UpdateContact_Contact) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.CreatedBy
}
func (t *UpdateContact_UpdateContact_Contact) GetEmail() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.Email
}
func (t *UpdateContact_UpdateContact_Contact) GetFullName() string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.FullName
}
func (t *UpdateContact_UpdateContact_Contact) GetID() string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.ID
}
func (t *UpdateContact_UpdateContact_Contact) GetOwnerID() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.OwnerID
}
func (t *UpdateContact_UpdateContact_Contact) GetPhoneNumber() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.PhoneNumber
}
func (t *UpdateContact_UpdateContact_Contact) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return &t.Status
}
func (t *UpdateContact_UpdateContact_Contact) GetTags() []string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.Tags
}
func (t *UpdateContact_UpdateContact_Contact) GetTitle() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.Title
}
func (t *UpdateContact_UpdateContact_Contact) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.UpdatedAt
}
func (t *UpdateContact_UpdateContact_Contact) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.UpdatedBy
}

type UpdateContact_UpdateContact struct {
	Contact UpdateContact_UpdateContact_Contact "json:\"contact\" graphql:\"contact\""
}

func (t *UpdateContact_UpdateContact) GetContact() *UpdateContact_UpdateContact_Contact {
	if t == nil {
		t = &UpdateContact_UpdateContact{}
	}
	return &t.Contact
}

type GetAllContactHistories_ContactHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllContactHistories_ContactHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllContactHistories_ContactHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllContactHistories_ContactHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllContactHistories_ContactHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllContactHistories_ContactHistories_Edges_Node struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	HistoryTime time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID          string           "json:\"id\" graphql:\"id\""
	Operation   history.OpType   "json:\"operation\" graphql:\"operation\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Ref         *string          "json:\"ref,omitempty\" graphql:\"ref\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetAddress() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Address
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetCompany() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Company
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetEmail() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Email
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetFullName() string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.FullName
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetPhoneNumber() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.PhoneNumber
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetTitle() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Title
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllContactHistories_ContactHistories_Edges struct {
	Node *GetAllContactHistories_ContactHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllContactHistories_ContactHistories_Edges) GetNode() *GetAllContactHistories_ContactHistories_Edges_Node {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges{}
	}
	return t.Node
}

type GetAllContactHistories_ContactHistories struct {
	Edges      []*GetAllContactHistories_ContactHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllContactHistories_ContactHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                            "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllContactHistories_ContactHistories) GetEdges() []*GetAllContactHistories_ContactHistories_Edges {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories{}
	}
	return t.Edges
}
func (t *GetAllContactHistories_ContactHistories) GetPageInfo() *GetAllContactHistories_ContactHistories_PageInfo {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllContactHistories_ContactHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories{}
	}
	return t.TotalCount
}

type GetContactHistories_ContactHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetContactHistories_ContactHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetContactHistories_ContactHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetContactHistories_ContactHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetContactHistories_ContactHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetContactHistories_ContactHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetContactHistories_ContactHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetContactHistories_ContactHistories_Edges_Node struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	HistoryTime time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID          string           "json:\"id\" graphql:\"id\""
	Operation   history.OpType   "json:\"operation\" graphql:\"operation\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Ref         *string          "json:\"ref,omitempty\" graphql:\"ref\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetContactHistories_ContactHistories_Edges_Node) GetAddress() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Address
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetCompany() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Company
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetEmail() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Email
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetFullName() string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.FullName
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetPhoneNumber() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.PhoneNumber
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetTitle() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Title
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetContactHistories_ContactHistories_Edges struct {
	Node *GetContactHistories_ContactHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetContactHistories_ContactHistories_Edges) GetNode() *GetContactHistories_ContactHistories_Edges_Node {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges{}
	}
	return t.Node
}

type GetContactHistories_ContactHistories struct {
	Edges      []*GetContactHistories_ContactHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetContactHistories_ContactHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetContactHistories_ContactHistories) GetEdges() []*GetContactHistories_ContactHistories_Edges {
	if t == nil {
		t = &GetContactHistories_ContactHistories{}
	}
	return t.Edges
}
func (t *GetContactHistories_ContactHistories) GetPageInfo() *GetContactHistories_ContactHistories_PageInfo {
	if t == nil {
		t = &GetContactHistories_ContactHistories{}
	}
	return &t.PageInfo
}
func (t *GetContactHistories_ContactHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetContactHistories_ContactHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVControl_CreateBulkCSVControl_Controls struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	AuditorReferenceID     *string                          "json:\"auditorReferenceID,omitempty\" graphql:\"auditorReferenceID\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlOwnerID         *string                          "json:\"controlOwnerID,omitempty\" graphql:\"controlOwnerID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID             *string                          "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	ReferenceFramework     *string                          "json:\"referenceFramework,omitempty\" graphql:\"referenceFramework\""
	ReferenceID            *string                          "json:\"referenceID,omitempty\" graphql:\"referenceID\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	StandardID             *string                          "json:\"standardID,omitempty\" graphql:\"standardID\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.AssessmentMethods
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.AssessmentObjectives
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetAuditorReferenceID() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.AuditorReferenceID
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetCategory() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.Category
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetCategoryID() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.CategoryID
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetControlOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.ControlOwnerID
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetControlQuestions() []string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.ControlQuestions
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetControlType() *enums.ControlType {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.ControlType
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetDelegateID() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.DelegateID
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.Description
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.DisplayID
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.ExampleEvidence
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetID() string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.ID
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.ImplementationGuidance
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetMappedCategories() []string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.MappedCategories
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetRefCode() string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.RefCode
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetReferenceFramework() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.ReferenceFramework
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetReferenceID() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.ReferenceID
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetReferences() []*models.Reference {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.References
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetSource() *enums.ControlSource {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.Source
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetStandardID() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.StandardID
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.Status
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetSubcategory() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.Subcategory
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.Tags
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVControl_CreateBulkCSVControl struct {
	Controls []*CreateBulkCSVControl_CreateBulkCSVControl_Controls "json:\"controls,omitempty\" graphql:\"controls\""
}

func (t *CreateBulkCSVControl_CreateBulkCSVControl) GetControls() []*CreateBulkCSVControl_CreateBulkCSVControl_Controls {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl{}
	}
	return t.Controls
}

type CreateBulkControl_CreateBulkControl_Controls struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	AuditorReferenceID     *string                          "json:\"auditorReferenceID,omitempty\" graphql:\"auditorReferenceID\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlOwnerID         *string                          "json:\"controlOwnerID,omitempty\" graphql:\"controlOwnerID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID             *string                          "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	ReferenceFramework     *string                          "json:\"referenceFramework,omitempty\" graphql:\"referenceFramework\""
	ReferenceID            *string                          "json:\"referenceID,omitempty\" graphql:\"referenceID\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	StandardID             *string                          "json:\"standardID,omitempty\" graphql:\"standardID\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkControl_CreateBulkControl_Controls) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.AssessmentMethods
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.AssessmentObjectives
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetAuditorReferenceID() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.AuditorReferenceID
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetCategory() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.Category
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetCategoryID() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.CategoryID
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetControlOwnerID() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.ControlOwnerID
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetControlQuestions() []string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.ControlQuestions
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetControlType() *enums.ControlType {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.ControlType
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.CreatedAt
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.CreatedBy
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetDelegateID() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.DelegateID
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetDescription() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.Description
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.DisplayID
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.ExampleEvidence
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetID() string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.ID
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.ImplementationGuidance
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetMappedCategories() []string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.MappedCategories
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.OwnerID
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetRefCode() string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.RefCode
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetReferenceFramework() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.ReferenceFramework
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetReferenceID() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.ReferenceID
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetReferences() []*models.Reference {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.References
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetSource() *enums.ControlSource {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.Source
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetStandardID() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.StandardID
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.Status
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetSubcategory() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.Subcategory
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetTags() []string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.Tags
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.UpdatedBy
}

type CreateBulkControl_CreateBulkControl struct {
	Controls []*CreateBulkControl_CreateBulkControl_Controls "json:\"controls,omitempty\" graphql:\"controls\""
}

func (t *CreateBulkControl_CreateBulkControl) GetControls() []*CreateBulkControl_CreateBulkControl_Controls {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl{}
	}
	return t.Controls
}

type CreateControl_CreateControl_Control struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	AuditorReferenceID     *string                          "json:\"auditorReferenceID,omitempty\" graphql:\"auditorReferenceID\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlOwnerID         *string                          "json:\"controlOwnerID,omitempty\" graphql:\"controlOwnerID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID             *string                          "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	ReferenceFramework     *string                          "json:\"referenceFramework,omitempty\" graphql:\"referenceFramework\""
	ReferenceID            *string                          "json:\"referenceID,omitempty\" graphql:\"referenceID\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	StandardID             *string                          "json:\"standardID,omitempty\" graphql:\"standardID\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateControl_CreateControl_Control) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.AssessmentMethods
}
func (t *CreateControl_CreateControl_Control) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.AssessmentObjectives
}
func (t *CreateControl_CreateControl_Control) GetAuditorReferenceID() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.AuditorReferenceID
}
func (t *CreateControl_CreateControl_Control) GetCategory() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Category
}
func (t *CreateControl_CreateControl_Control) GetCategoryID() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.CategoryID
}
func (t *CreateControl_CreateControl_Control) GetControlOwnerID() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.ControlOwnerID
}
func (t *CreateControl_CreateControl_Control) GetControlQuestions() []string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.ControlQuestions
}
func (t *CreateControl_CreateControl_Control) GetControlType() *enums.ControlType {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.ControlType
}
func (t *CreateControl_CreateControl_Control) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.CreatedAt
}
func (t *CreateControl_CreateControl_Control) GetCreatedBy() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.CreatedBy
}
func (t *CreateControl_CreateControl_Control) GetDelegateID() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.DelegateID
}
func (t *CreateControl_CreateControl_Control) GetDescription() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Description
}
func (t *CreateControl_CreateControl_Control) GetDisplayID() string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.DisplayID
}
func (t *CreateControl_CreateControl_Control) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.ExampleEvidence
}
func (t *CreateControl_CreateControl_Control) GetID() string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.ID
}
func (t *CreateControl_CreateControl_Control) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.ImplementationGuidance
}
func (t *CreateControl_CreateControl_Control) GetMappedCategories() []string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.MappedCategories
}
func (t *CreateControl_CreateControl_Control) GetOwnerID() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.OwnerID
}
func (t *CreateControl_CreateControl_Control) GetRefCode() string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.RefCode
}
func (t *CreateControl_CreateControl_Control) GetReferenceFramework() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.ReferenceFramework
}
func (t *CreateControl_CreateControl_Control) GetReferenceID() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.ReferenceID
}
func (t *CreateControl_CreateControl_Control) GetReferences() []*models.Reference {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.References
}
func (t *CreateControl_CreateControl_Control) GetSource() *enums.ControlSource {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Source
}
func (t *CreateControl_CreateControl_Control) GetStandardID() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.StandardID
}
func (t *CreateControl_CreateControl_Control) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Status
}
func (t *CreateControl_CreateControl_Control) GetSubcategory() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Subcategory
}
func (t *CreateControl_CreateControl_Control) GetTags() []string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Tags
}
func (t *CreateControl_CreateControl_Control) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.UpdatedAt
}
func (t *CreateControl_CreateControl_Control) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.UpdatedBy
}

type CreateControl_CreateControl struct {
	Control CreateControl_CreateControl_Control "json:\"control\" graphql:\"control\""
}

func (t *CreateControl_CreateControl) GetControl() *CreateControl_CreateControl_Control {
	if t == nil {
		t = &CreateControl_CreateControl{}
	}
	return &t.Control
}

type DeleteControl_DeleteControl struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteControl_DeleteControl) GetDeletedID() string {
	if t == nil {
		t = &DeleteControl_DeleteControl{}
	}
	return t.DeletedID
}

type GetAllControls_Controls_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllControls_Controls_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllControls_Controls_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllControls_Controls_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllControls_Controls_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllControls_Controls_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllControls_Controls_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllControls_Controls_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllControls_Controls_PageInfo{}
	}
	return t.StartCursor
}

type GetAllControls_Controls_Edges_Node struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	AuditorReferenceID     *string                          "json:\"auditorReferenceID,omitempty\" graphql:\"auditorReferenceID\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlOwnerID         *string                          "json:\"controlOwnerID,omitempty\" graphql:\"controlOwnerID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID             *string                          "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	ReferenceFramework     *string                          "json:\"referenceFramework,omitempty\" graphql:\"referenceFramework\""
	ReferenceID            *string                          "json:\"referenceID,omitempty\" graphql:\"referenceID\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	StandardID             *string                          "json:\"standardID,omitempty\" graphql:\"standardID\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllControls_Controls_Edges_Node) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.AssessmentMethods
}
func (t *GetAllControls_Controls_Edges_Node) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.AssessmentObjectives
}
func (t *GetAllControls_Controls_Edges_Node) GetAuditorReferenceID() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.AuditorReferenceID
}
func (t *GetAllControls_Controls_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllControls_Controls_Edges_Node) GetCategoryID() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.CategoryID
}
func (t *GetAllControls_Controls_Edges_Node) GetControlOwnerID() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.ControlOwnerID
}
func (t *GetAllControls_Controls_Edges_Node) GetControlQuestions() []string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.ControlQuestions
}
func (t *GetAllControls_Controls_Edges_Node) GetControlType() *enums.ControlType {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.ControlType
}
func (t *GetAllControls_Controls_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllControls_Controls_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllControls_Controls_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetAllControls_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllControls_Controls_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllControls_Controls_Edges_Node) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.ExampleEvidence
}
func (t *GetAllControls_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllControls_Controls_Edges_Node) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.ImplementationGuidance
}
func (t *GetAllControls_Controls_Edges_Node) GetMappedCategories() []string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.MappedCategories
}
func (t *GetAllControls_Controls_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllControls_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.RefCode
}
func (t *GetAllControls_Controls_Edges_Node) GetReferenceFramework() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.ReferenceFramework
}
func (t *GetAllControls_Controls_Edges_Node) GetReferenceID() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.ReferenceID
}
func (t *GetAllControls_Controls_Edges_Node) GetReferences() []*models.Reference {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.References
}
func (t *GetAllControls_Controls_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllControls_Controls_Edges_Node) GetStandardID() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.StandardID
}
func (t *GetAllControls_Controls_Edges_Node) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllControls_Controls_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetAllControls_Controls_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllControls_Controls_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllControls_Controls_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllControls_Controls_Edges struct {
	Node *GetAllControls_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControls_Controls_Edges) GetNode() *GetAllControls_Controls_Edges_Node {
	if t == nil {
		t = &GetAllControls_Controls_Edges{}
	}
	return t.Node
}

type GetAllControls_Controls struct {
	Edges      []*GetAllControls_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllControls_Controls_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                            "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllControls_Controls) GetEdges() []*GetAllControls_Controls_Edges {
	if t == nil {
		t = &GetAllControls_Controls{}
	}
	return t.Edges
}
func (t *GetAllControls_Controls) GetPageInfo() *GetAllControls_Controls_PageInfo {
	if t == nil {
		t = &GetAllControls_Controls{}
	}
	return &t.PageInfo
}
func (t *GetAllControls_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllControls_Controls{}
	}
	return t.TotalCount
}

type GetControlByID_Control struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	AuditorReferenceID     *string                          "json:\"auditorReferenceID,omitempty\" graphql:\"auditorReferenceID\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlOwnerID         *string                          "json:\"controlOwnerID,omitempty\" graphql:\"controlOwnerID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID             *string                          "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	ReferenceFramework     *string                          "json:\"referenceFramework,omitempty\" graphql:\"referenceFramework\""
	ReferenceID            *string                          "json:\"referenceID,omitempty\" graphql:\"referenceID\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	StandardID             *string                          "json:\"standardID,omitempty\" graphql:\"standardID\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetControlByID_Control) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.AssessmentMethods
}
func (t *GetControlByID_Control) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.AssessmentObjectives
}
func (t *GetControlByID_Control) GetAuditorReferenceID() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.AuditorReferenceID
}
func (t *GetControlByID_Control) GetCategory() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Category
}
func (t *GetControlByID_Control) GetCategoryID() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.CategoryID
}
func (t *GetControlByID_Control) GetControlOwnerID() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.ControlOwnerID
}
func (t *GetControlByID_Control) GetControlQuestions() []string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.ControlQuestions
}
func (t *GetControlByID_Control) GetControlType() *enums.ControlType {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.ControlType
}
func (t *GetControlByID_Control) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.CreatedAt
}
func (t *GetControlByID_Control) GetCreatedBy() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.CreatedBy
}
func (t *GetControlByID_Control) GetDelegateID() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.DelegateID
}
func (t *GetControlByID_Control) GetDescription() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Description
}
func (t *GetControlByID_Control) GetDisplayID() string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.DisplayID
}
func (t *GetControlByID_Control) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.ExampleEvidence
}
func (t *GetControlByID_Control) GetID() string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.ID
}
func (t *GetControlByID_Control) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.ImplementationGuidance
}
func (t *GetControlByID_Control) GetMappedCategories() []string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.MappedCategories
}
func (t *GetControlByID_Control) GetOwnerID() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.OwnerID
}
func (t *GetControlByID_Control) GetRefCode() string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.RefCode
}
func (t *GetControlByID_Control) GetReferenceFramework() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.ReferenceFramework
}
func (t *GetControlByID_Control) GetReferenceID() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.ReferenceID
}
func (t *GetControlByID_Control) GetReferences() []*models.Reference {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.References
}
func (t *GetControlByID_Control) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Source
}
func (t *GetControlByID_Control) GetStandardID() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.StandardID
}
func (t *GetControlByID_Control) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Status
}
func (t *GetControlByID_Control) GetSubcategory() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Subcategory
}
func (t *GetControlByID_Control) GetTags() []string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Tags
}
func (t *GetControlByID_Control) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.UpdatedAt
}
func (t *GetControlByID_Control) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.UpdatedBy
}

type GetControls_Controls_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetControls_Controls_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetControls_Controls_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetControls_Controls_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetControls_Controls_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetControls_Controls_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetControls_Controls_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetControls_Controls_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetControls_Controls_PageInfo{}
	}
	return t.StartCursor
}

type GetControls_Controls_Edges_Node struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	AuditorReferenceID     *string                          "json:\"auditorReferenceID,omitempty\" graphql:\"auditorReferenceID\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlOwnerID         *string                          "json:\"controlOwnerID,omitempty\" graphql:\"controlOwnerID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID             *string                          "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	ReferenceFramework     *string                          "json:\"referenceFramework,omitempty\" graphql:\"referenceFramework\""
	ReferenceID            *string                          "json:\"referenceID,omitempty\" graphql:\"referenceID\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	StandardID             *string                          "json:\"standardID,omitempty\" graphql:\"standardID\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetControls_Controls_Edges_Node) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.AssessmentMethods
}
func (t *GetControls_Controls_Edges_Node) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.AssessmentObjectives
}
func (t *GetControls_Controls_Edges_Node) GetAuditorReferenceID() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.AuditorReferenceID
}
func (t *GetControls_Controls_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Category
}
func (t *GetControls_Controls_Edges_Node) GetCategoryID() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.CategoryID
}
func (t *GetControls_Controls_Edges_Node) GetControlOwnerID() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.ControlOwnerID
}
func (t *GetControls_Controls_Edges_Node) GetControlQuestions() []string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.ControlQuestions
}
func (t *GetControls_Controls_Edges_Node) GetControlType() *enums.ControlType {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.ControlType
}
func (t *GetControls_Controls_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetControls_Controls_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetControls_Controls_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetControls_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *GetControls_Controls_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetControls_Controls_Edges_Node) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.ExampleEvidence
}
func (t *GetControls_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetControls_Controls_Edges_Node) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.ImplementationGuidance
}
func (t *GetControls_Controls_Edges_Node) GetMappedCategories() []string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.MappedCategories
}
func (t *GetControls_Controls_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetControls_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.RefCode
}
func (t *GetControls_Controls_Edges_Node) GetReferenceFramework() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.ReferenceFramework
}
func (t *GetControls_Controls_Edges_Node) GetReferenceID() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.ReferenceID
}
func (t *GetControls_Controls_Edges_Node) GetReferences() []*models.Reference {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.References
}
func (t *GetControls_Controls_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Source
}
func (t *GetControls_Controls_Edges_Node) GetStandardID() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.StandardID
}
func (t *GetControls_Controls_Edges_Node) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Status
}
func (t *GetControls_Controls_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetControls_Controls_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Tags
}
func (t *GetControls_Controls_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetControls_Controls_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetControls_Controls_Edges struct {
	Node *GetControls_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControls_Controls_Edges) GetNode() *GetControls_Controls_Edges_Node {
	if t == nil {
		t = &GetControls_Controls_Edges{}
	}
	return t.Node
}

type GetControls_Controls struct {
	Edges      []*GetControls_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetControls_Controls_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetControls_Controls) GetEdges() []*GetControls_Controls_Edges {
	if t == nil {
		t = &GetControls_Controls{}
	}
	return t.Edges
}
func (t *GetControls_Controls) GetPageInfo() *GetControls_Controls_PageInfo {
	if t == nil {
		t = &GetControls_Controls{}
	}
	return &t.PageInfo
}
func (t *GetControls_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &GetControls_Controls{}
	}
	return t.TotalCount
}

type UpdateControl_UpdateControl_Control struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	AuditorReferenceID     *string                          "json:\"auditorReferenceID,omitempty\" graphql:\"auditorReferenceID\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlOwnerID         *string                          "json:\"controlOwnerID,omitempty\" graphql:\"controlOwnerID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID             *string                          "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	ReferenceFramework     *string                          "json:\"referenceFramework,omitempty\" graphql:\"referenceFramework\""
	ReferenceID            *string                          "json:\"referenceID,omitempty\" graphql:\"referenceID\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	StandardID             *string                          "json:\"standardID,omitempty\" graphql:\"standardID\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateControl_UpdateControl_Control) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.AssessmentMethods
}
func (t *UpdateControl_UpdateControl_Control) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.AssessmentObjectives
}
func (t *UpdateControl_UpdateControl_Control) GetAuditorReferenceID() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.AuditorReferenceID
}
func (t *UpdateControl_UpdateControl_Control) GetCategory() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Category
}
func (t *UpdateControl_UpdateControl_Control) GetCategoryID() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.CategoryID
}
func (t *UpdateControl_UpdateControl_Control) GetControlOwnerID() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.ControlOwnerID
}
func (t *UpdateControl_UpdateControl_Control) GetControlQuestions() []string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.ControlQuestions
}
func (t *UpdateControl_UpdateControl_Control) GetControlType() *enums.ControlType {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.ControlType
}
func (t *UpdateControl_UpdateControl_Control) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.CreatedAt
}
func (t *UpdateControl_UpdateControl_Control) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.CreatedBy
}
func (t *UpdateControl_UpdateControl_Control) GetDelegateID() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.DelegateID
}
func (t *UpdateControl_UpdateControl_Control) GetDescription() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Description
}
func (t *UpdateControl_UpdateControl_Control) GetDisplayID() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.DisplayID
}
func (t *UpdateControl_UpdateControl_Control) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.ExampleEvidence
}
func (t *UpdateControl_UpdateControl_Control) GetID() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.ID
}
func (t *UpdateControl_UpdateControl_Control) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.ImplementationGuidance
}
func (t *UpdateControl_UpdateControl_Control) GetMappedCategories() []string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.MappedCategories
}
func (t *UpdateControl_UpdateControl_Control) GetOwnerID() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.OwnerID
}
func (t *UpdateControl_UpdateControl_Control) GetRefCode() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.RefCode
}
func (t *UpdateControl_UpdateControl_Control) GetReferenceFramework() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.ReferenceFramework
}
func (t *UpdateControl_UpdateControl_Control) GetReferenceID() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.ReferenceID
}
func (t *UpdateControl_UpdateControl_Control) GetReferences() []*models.Reference {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.References
}
func (t *UpdateControl_UpdateControl_Control) GetSource() *enums.ControlSource {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Source
}
func (t *UpdateControl_UpdateControl_Control) GetStandardID() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.StandardID
}
func (t *UpdateControl_UpdateControl_Control) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Status
}
func (t *UpdateControl_UpdateControl_Control) GetSubcategory() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Subcategory
}
func (t *UpdateControl_UpdateControl_Control) GetTags() []string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Tags
}
func (t *UpdateControl_UpdateControl_Control) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.UpdatedAt
}
func (t *UpdateControl_UpdateControl_Control) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.UpdatedBy
}

type UpdateControl_UpdateControl struct {
	Control UpdateControl_UpdateControl_Control "json:\"control\" graphql:\"control\""
}

func (t *UpdateControl_UpdateControl) GetControl() *UpdateControl_UpdateControl_Control {
	if t == nil {
		t = &UpdateControl_UpdateControl{}
	}
	return &t.Control
}

type CreateControlsByClone_CreateControlsByClone_Controls_Subcontrols_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateControlsByClone_CreateControlsByClone_Controls_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type CreateControlsByClone_CreateControlsByClone_Controls_Subcontrols_Edges struct {
	Node *CreateControlsByClone_CreateControlsByClone_Controls_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateControlsByClone_CreateControlsByClone_Controls_Subcontrols_Edges) GetNode() *CreateControlsByClone_CreateControlsByClone_Controls_Subcontrols_Edges_Node {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls_Subcontrols_Edges{}
	}
	return t.Node
}

type CreateControlsByClone_CreateControlsByClone_Controls_Subcontrols struct {
	Edges []*CreateControlsByClone_CreateControlsByClone_Controls_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateControlsByClone_CreateControlsByClone_Controls_Subcontrols) GetEdges() []*CreateControlsByClone_CreateControlsByClone_Controls_Subcontrols_Edges {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls_Subcontrols{}
	}
	return t.Edges
}

type CreateControlsByClone_CreateControlsByClone_Controls struct {
	AssessmentMethods      []*models.AssessmentMethod                                       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective                                    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	Category               *string                                                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                                                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlQuestions       []string                                                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType                                               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                                                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                                                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description            *string                                                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                                                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence                                        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                                                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance                                 "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                                                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                                                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                                                           "json:\"refCode\" graphql:\"refCode\""
	ReferenceFramework     *string                                                          "json:\"referenceFramework,omitempty\" graphql:\"referenceFramework\""
	References             []*models.Reference                                              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource                                             "json:\"source,omitempty\" graphql:\"source\""
	StandardID             *string                                                          "json:\"standardID,omitempty\" graphql:\"standardID\""
	Status                 *enums.ControlStatus                                             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                                                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Subcontrols            CreateControlsByClone_CreateControlsByClone_Controls_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags                   []string                                                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                                                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                                                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.AssessmentMethods
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.AssessmentObjectives
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetCategory() *string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.Category
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetCategoryID() *string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.CategoryID
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetControlQuestions() []string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.ControlQuestions
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetControlType() *enums.ControlType {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.ControlType
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.CreatedAt
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetCreatedBy() *string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.CreatedBy
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetDescription() *string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.Description
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetDisplayID() string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.DisplayID
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.ExampleEvidence
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetID() string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.ID
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.ImplementationGuidance
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetMappedCategories() []string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.MappedCategories
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetOwnerID() *string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.OwnerID
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetRefCode() string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.RefCode
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetReferenceFramework() *string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.ReferenceFramework
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetReferences() []*models.Reference {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.References
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetSource() *enums.ControlSource {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.Source
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetStandardID() *string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.StandardID
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.Status
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetSubcategory() *string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.Subcategory
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetSubcontrols() *CreateControlsByClone_CreateControlsByClone_Controls_Subcontrols {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return &t.Subcontrols
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetTags() []string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.Tags
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.UpdatedAt
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.UpdatedBy
}

type CreateControlsByClone_CreateControlsByClone struct {
	Controls []*CreateControlsByClone_CreateControlsByClone_Controls "json:\"controls,omitempty\" graphql:\"controls\""
}

func (t *CreateControlsByClone_CreateControlsByClone) GetControls() []*CreateControlsByClone_CreateControlsByClone_Controls {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone{}
	}
	return t.Controls
}

type CreateControlsByCloneReturnID_CreateControlsByClone_Controls struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateControlsByCloneReturnID_CreateControlsByClone_Controls) GetID() string {
	if t == nil {
		t = &CreateControlsByCloneReturnID_CreateControlsByClone_Controls{}
	}
	return t.ID
}

type CreateControlsByCloneReturnID_CreateControlsByClone struct {
	Controls []*CreateControlsByCloneReturnID_CreateControlsByClone_Controls "json:\"controls,omitempty\" graphql:\"controls\""
}

func (t *CreateControlsByCloneReturnID_CreateControlsByClone) GetControls() []*CreateControlsByCloneReturnID_CreateControlsByClone_Controls {
	if t == nil {
		t = &CreateControlsByCloneReturnID_CreateControlsByClone{}
	}
	return t.Controls
}

type GetControlCategoriesWithFramework_ControlCategoriesByFramework_Node struct {
	Name               string  "json:\"name\" graphql:\"name\""
	ReferenceFramework *string "json:\"referenceFramework,omitempty\" graphql:\"referenceFramework\""
}

func (t *GetControlCategoriesWithFramework_ControlCategoriesByFramework_Node) GetName() string {
	if t == nil {
		t = &GetControlCategoriesWithFramework_ControlCategoriesByFramework_Node{}
	}
	return t.Name
}
func (t *GetControlCategoriesWithFramework_ControlCategoriesByFramework_Node) GetReferenceFramework() *string {
	if t == nil {
		t = &GetControlCategoriesWithFramework_ControlCategoriesByFramework_Node{}
	}
	return t.ReferenceFramework
}

type GetControlCategoriesWithFramework_ControlCategoriesByFramework struct {
	Node GetControlCategoriesWithFramework_ControlCategoriesByFramework_Node "json:\"node\" graphql:\"node\""
}

func (t *GetControlCategoriesWithFramework_ControlCategoriesByFramework) GetNode() *GetControlCategoriesWithFramework_ControlCategoriesByFramework_Node {
	if t == nil {
		t = &GetControlCategoriesWithFramework_ControlCategoriesByFramework{}
	}
	return &t.Node
}

type GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_Edges_Node struct {
	ID                 string  "json:\"id\" graphql:\"id\""
	OwnerID            *string "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode            string  "json:\"refCode\" graphql:\"refCode\""
	ReferenceFramework *string "json:\"referenceFramework,omitempty\" graphql:\"referenceFramework\""
}

func (t *GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_Edges_Node{}
	}
	return t.RefCode
}
func (t *GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_Edges_Node) GetReferenceFramework() *string {
	if t == nil {
		t = &GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_Edges_Node{}
	}
	return t.ReferenceFramework
}

type GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_Edges struct {
	Node *GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_Edges) GetNode() *GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_Edges_Node {
	if t == nil {
		t = &GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_Edges{}
	}
	return t.Node
}

type GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_PageInfo{}
	}
	return t.StartCursor
}

type GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls struct {
	Edges      []*GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                                           "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls) GetEdges() []*GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_Edges {
	if t == nil {
		t = &GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls{}
	}
	return t.Edges
}
func (t *GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls) GetPageInfo() *GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls_PageInfo {
	if t == nil {
		t = &GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls{}
	}
	return &t.PageInfo
}
func (t *GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls{}
	}
	return t.TotalCount
}

type GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node struct {
	Category string                                                                 "json:\"category\" graphql:\"category\""
	Controls GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls "json:\"controls\" graphql:\"controls\""
}

func (t *GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node) GetCategory() string {
	if t == nil {
		t = &GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node{}
	}
	return t.Category
}
func (t *GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node) GetControls() *GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node_Controls {
	if t == nil {
		t = &GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node{}
	}
	return &t.Controls
}

type GetControlsGroupByCategory_ControlsGroupByCategory_Edges struct {
	Node GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node "json:\"node\" graphql:\"node\""
}

func (t *GetControlsGroupByCategory_ControlsGroupByCategory_Edges) GetNode() *GetControlsGroupByCategory_ControlsGroupByCategory_Edges_Node {
	if t == nil {
		t = &GetControlsGroupByCategory_ControlsGroupByCategory_Edges{}
	}
	return &t.Node
}

type GetControlsGroupByCategory_ControlsGroupByCategory struct {
	Edges []*GetControlsGroupByCategory_ControlsGroupByCategory_Edges "json:\"edges\" graphql:\"edges\""
}

func (t *GetControlsGroupByCategory_ControlsGroupByCategory) GetEdges() []*GetControlsGroupByCategory_ControlsGroupByCategory_Edges {
	if t == nil {
		t = &GetControlsGroupByCategory_ControlsGroupByCategory{}
	}
	return t.Edges
}

type GetControlSubcategoriesWithFramework_ControlSubcategoriesByFramework_Node struct {
	Name               string  "json:\"name\" graphql:\"name\""
	ReferenceFramework *string "json:\"referenceFramework,omitempty\" graphql:\"referenceFramework\""
}

func (t *GetControlSubcategoriesWithFramework_ControlSubcategoriesByFramework_Node) GetName() string {
	if t == nil {
		t = &GetControlSubcategoriesWithFramework_ControlSubcategoriesByFramework_Node{}
	}
	return t.Name
}
func (t *GetControlSubcategoriesWithFramework_ControlSubcategoriesByFramework_Node) GetReferenceFramework() *string {
	if t == nil {
		t = &GetControlSubcategoriesWithFramework_ControlSubcategoriesByFramework_Node{}
	}
	return t.ReferenceFramework
}

type GetControlSubcategoriesWithFramework_ControlSubcategoriesByFramework struct {
	Node GetControlSubcategoriesWithFramework_ControlSubcategoriesByFramework_Node "json:\"node\" graphql:\"node\""
}

func (t *GetControlSubcategoriesWithFramework_ControlSubcategoriesByFramework) GetNode() *GetControlSubcategoriesWithFramework_ControlSubcategoriesByFramework_Node {
	if t == nil {
		t = &GetControlSubcategoriesWithFramework_ControlSubcategoriesByFramework{}
	}
	return &t.Node
}

type GetAllControlHistories_ControlHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllControlHistories_ControlHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllControlHistories_ControlHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllControlHistories_ControlHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllControlHistories_ControlHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllControlHistories_ControlHistories_Edges_Node struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	AuditorReferenceID     *string                          "json:\"auditorReferenceID,omitempty\" graphql:\"auditorReferenceID\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlOwnerID         *string                          "json:\"controlOwnerID,omitempty\" graphql:\"controlOwnerID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID             *string                          "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	HistoryTime            time.Time                        "json:\"historyTime\" graphql:\"historyTime\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	Operation              history.OpType                   "json:\"operation\" graphql:\"operation\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                    *string                          "json:\"ref,omitempty\" graphql:\"ref\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	ReferenceFramework     *string                          "json:\"referenceFramework,omitempty\" graphql:\"referenceFramework\""
	ReferenceID            *string                          "json:\"referenceID,omitempty\" graphql:\"referenceID\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	StandardID             *string                          "json:\"standardID,omitempty\" graphql:\"standardID\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.AssessmentMethods
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.AssessmentObjectives
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetAuditorReferenceID() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.AuditorReferenceID
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetCategoryID() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.CategoryID
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetControlOwnerID() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ControlOwnerID
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetControlQuestions() []string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ControlQuestions
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetControlType() *enums.ControlType {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ControlType
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ExampleEvidence
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ImplementationGuidance
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetMappedCategories() []string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.MappedCategories
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.RefCode
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetReferenceFramework() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ReferenceFramework
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetReferenceID() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ReferenceID
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetReferences() []*models.Reference {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.References
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetStandardID() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.StandardID
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllControlHistories_ControlHistories_Edges struct {
	Node *GetAllControlHistories_ControlHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControlHistories_ControlHistories_Edges) GetNode() *GetAllControlHistories_ControlHistories_Edges_Node {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges{}
	}
	return t.Node
}

type GetAllControlHistories_ControlHistories struct {
	Edges      []*GetAllControlHistories_ControlHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllControlHistories_ControlHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                            "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllControlHistories_ControlHistories) GetEdges() []*GetAllControlHistories_ControlHistories_Edges {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories{}
	}
	return t.Edges
}
func (t *GetAllControlHistories_ControlHistories) GetPageInfo() *GetAllControlHistories_ControlHistories_PageInfo {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllControlHistories_ControlHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories{}
	}
	return t.TotalCount
}

type GetControlHistories_ControlHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetControlHistories_ControlHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetControlHistories_ControlHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetControlHistories_ControlHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetControlHistories_ControlHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetControlHistories_ControlHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetControlHistories_ControlHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetControlHistories_ControlHistories_Edges_Node struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	AuditorReferenceID     *string                          "json:\"auditorReferenceID,omitempty\" graphql:\"auditorReferenceID\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlOwnerID         *string                          "json:\"controlOwnerID,omitempty\" graphql:\"controlOwnerID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID             *string                          "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	HistoryTime            time.Time                        "json:\"historyTime\" graphql:\"historyTime\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	Operation              history.OpType                   "json:\"operation\" graphql:\"operation\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                    *string                          "json:\"ref,omitempty\" graphql:\"ref\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	ReferenceFramework     *string                          "json:\"referenceFramework,omitempty\" graphql:\"referenceFramework\""
	ReferenceID            *string                          "json:\"referenceID,omitempty\" graphql:\"referenceID\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	StandardID             *string                          "json:\"standardID,omitempty\" graphql:\"standardID\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetControlHistories_ControlHistories_Edges_Node) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.AssessmentMethods
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.AssessmentObjectives
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetAuditorReferenceID() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.AuditorReferenceID
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Category
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetCategoryID() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.CategoryID
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetControlOwnerID() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ControlOwnerID
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetControlQuestions() []string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ControlQuestions
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetControlType() *enums.ControlType {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ControlType
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ExampleEvidence
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ImplementationGuidance
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetMappedCategories() []string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.MappedCategories
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.RefCode
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetReferenceFramework() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ReferenceFramework
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetReferenceID() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ReferenceID
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetReferences() []*models.Reference {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.References
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetStandardID() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.StandardID
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetControlHistories_ControlHistories_Edges struct {
	Node *GetControlHistories_ControlHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlHistories_ControlHistories_Edges) GetNode() *GetControlHistories_ControlHistories_Edges_Node {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges{}
	}
	return t.Node
}

type GetControlHistories_ControlHistories struct {
	Edges      []*GetControlHistories_ControlHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetControlHistories_ControlHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetControlHistories_ControlHistories) GetEdges() []*GetControlHistories_ControlHistories_Edges {
	if t == nil {
		t = &GetControlHistories_ControlHistories{}
	}
	return t.Edges
}
func (t *GetControlHistories_ControlHistories) GetPageInfo() *GetControlHistories_ControlHistories_PageInfo {
	if t == nil {
		t = &GetControlHistories_ControlHistories{}
	}
	return &t.PageInfo
}
func (t *GetControlHistories_ControlHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetControlHistories_ControlHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls_Edges_Node{}
	}
	return t.RefCode
}

type CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls_Edges struct {
	Node *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls_Edges) GetNode() *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls_Edges_Node {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls_Edges{}
	}
	return t.Node
}

type CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls struct {
	Edges []*CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls) GetEdges() []*CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls_Edges {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls{}
	}
	return t.Edges
}

type CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations struct {
	Controls           CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls "json:\"controls\" graphql:\"controls\""
	CreatedAt          *time.Time                                                                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string                                                                                               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details            *string                                                                                               "json:\"details,omitempty\" graphql:\"details\""
	ID                 string                                                                                                "json:\"id\" graphql:\"id\""
	ImplementationDate *time.Time                                                                                            "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	OwnerID            *string                                                                                               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status             *enums.DocumentStatus                                                                                 "json:\"status,omitempty\" graphql:\"status\""
	Tags               []string                                                                                              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt          *time.Time                                                                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string                                                                                               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerificationDate   *time.Time                                                                                            "json:\"verificationDate,omitempty\" graphql:\"verificationDate\""
	Verified           *bool                                                                                                 "json:\"verified,omitempty\" graphql:\"verified\""
}

func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetControls() *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return &t.Controls
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetDetails() *string {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.Details
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetID() string {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.ID
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetImplementationDate() *time.Time {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.ImplementationDate
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.Status
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.Tags
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetVerificationDate() *time.Time {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.VerificationDate
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetVerified() *bool {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.Verified
}

type CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation struct {
	ControlImplementations []*CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations "json:\"controlImplementations,omitempty\" graphql:\"controlImplementations\""
}

func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation) GetControlImplementations() []*CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation{}
	}
	return t.ControlImplementations
}

type CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls_Edges_Node{}
	}
	return t.RefCode
}

type CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls_Edges struct {
	Node *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls_Edges) GetNode() *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls_Edges_Node {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls_Edges{}
	}
	return t.Node
}

type CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls struct {
	Edges []*CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls) GetEdges() []*CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls_Edges {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls{}
	}
	return t.Edges
}

type CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations struct {
	Controls           CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls "json:\"controls\" graphql:\"controls\""
	CreatedAt          *time.Time                                                                                      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string                                                                                         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details            *string                                                                                         "json:\"details,omitempty\" graphql:\"details\""
	ID                 string                                                                                          "json:\"id\" graphql:\"id\""
	ImplementationDate *time.Time                                                                                      "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	OwnerID            *string                                                                                         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status             *enums.DocumentStatus                                                                           "json:\"status,omitempty\" graphql:\"status\""
	Tags               []string                                                                                        "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt          *time.Time                                                                                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string                                                                                         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerificationDate   *time.Time                                                                                      "json:\"verificationDate,omitempty\" graphql:\"verificationDate\""
	Verified           *bool                                                                                           "json:\"verified,omitempty\" graphql:\"verified\""
}

func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetControls() *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return &t.Controls
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.CreatedAt
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.CreatedBy
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetDetails() *string {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.Details
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetID() string {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.ID
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetImplementationDate() *time.Time {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.ImplementationDate
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.OwnerID
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.Status
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetTags() []string {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.Tags
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetVerificationDate() *time.Time {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.VerificationDate
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetVerified() *bool {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.Verified
}

type CreateBulkControlImplementation_CreateBulkControlImplementation struct {
	ControlImplementations []*CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations "json:\"controlImplementations,omitempty\" graphql:\"controlImplementations\""
}

func (t *CreateBulkControlImplementation_CreateBulkControlImplementation) GetControlImplementations() []*CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation{}
	}
	return t.ControlImplementations
}

type CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls_Edges_Node{}
	}
	return t.RefCode
}

type CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls_Edges struct {
	Node *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls_Edges) GetNode() *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls_Edges_Node {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls_Edges{}
	}
	return t.Node
}

type CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls struct {
	Edges []*CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls) GetEdges() []*CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls_Edges {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls{}
	}
	return t.Edges
}

type CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols_Edges struct {
	Node *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols_Edges) GetNode() *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols_Edges_Node {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols_Edges{}
	}
	return t.Node
}

type CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols struct {
	Edges []*CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols) GetEdges() []*CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols_Edges {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols{}
	}
	return t.Edges
}

type CreateControlImplementation_CreateControlImplementation_ControlImplementation struct {
	Controls           CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt          *time.Time                                                                                "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string                                                                                   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details            *string                                                                                   "json:\"details,omitempty\" graphql:\"details\""
	ID                 string                                                                                    "json:\"id\" graphql:\"id\""
	ImplementationDate *time.Time                                                                                "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	OwnerID            *string                                                                                   "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status             *enums.DocumentStatus                                                                     "json:\"status,omitempty\" graphql:\"status\""
	Subcontrols        CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags               []string                                                                                  "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt          *time.Time                                                                                "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string                                                                                   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerificationDate   *time.Time                                                                                "json:\"verificationDate,omitempty\" graphql:\"verificationDate\""
	Verified           *bool                                                                                     "json:\"verified,omitempty\" graphql:\"verified\""
}

func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetControls() *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return &t.Controls
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.CreatedAt
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetCreatedBy() *string {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.CreatedBy
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetDetails() *string {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.Details
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetID() string {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.ID
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetImplementationDate() *time.Time {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.ImplementationDate
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetOwnerID() *string {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.OwnerID
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.Status
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetSubcontrols() *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return &t.Subcontrols
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetTags() []string {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.Tags
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.UpdatedAt
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.UpdatedBy
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetVerificationDate() *time.Time {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.VerificationDate
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetVerified() *bool {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.Verified
}

type CreateControlImplementation_CreateControlImplementation struct {
	ControlImplementation CreateControlImplementation_CreateControlImplementation_ControlImplementation "json:\"controlImplementation\" graphql:\"controlImplementation\""
}

func (t *CreateControlImplementation_CreateControlImplementation) GetControlImplementation() *CreateControlImplementation_CreateControlImplementation_ControlImplementation {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation{}
	}
	return &t.ControlImplementation
}

type DeleteControlImplementation_DeleteControlImplementation struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteControlImplementation_DeleteControlImplementation) GetDeletedID() string {
	if t == nil {
		t = &DeleteControlImplementation_DeleteControlImplementation{}
	}
	return t.DeletedID
}

type GetAllControlImplementations_ControlImplementations_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllControlImplementations_ControlImplementations_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllControlImplementations_ControlImplementations_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllControlImplementations_ControlImplementations_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllControlImplementations_ControlImplementations_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_PageInfo{}
	}
	return t.StartCursor
}

type GetAllControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetAllControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetAllControlImplementations_ControlImplementations_Edges_Node_Controls_Edges struct {
	Node *GetAllControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControlImplementations_ControlImplementations_Edges_Node_Controls_Edges) GetNode() *GetAllControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node_Controls_Edges{}
	}
	return t.Node
}

type GetAllControlImplementations_ControlImplementations_Edges_Node_Controls struct {
	Edges []*GetAllControlImplementations_ControlImplementations_Edges_Node_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllControlImplementations_ControlImplementations_Edges_Node_Controls) GetEdges() []*GetAllControlImplementations_ControlImplementations_Edges_Node_Controls_Edges {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node_Controls{}
	}
	return t.Edges
}

type GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges struct {
	Node *GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges) GetNode() *GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges{}
	}
	return t.Node
}

type GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols struct {
	Edges []*GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols) GetEdges() []*GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols{}
	}
	return t.Edges
}

type GetAllControlImplementations_ControlImplementations_Edges_Node struct {
	Controls           GetAllControlImplementations_ControlImplementations_Edges_Node_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt          *time.Time                                                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string                                                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details            *string                                                                    "json:\"details,omitempty\" graphql:\"details\""
	ID                 string                                                                     "json:\"id\" graphql:\"id\""
	ImplementationDate *time.Time                                                                 "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	OwnerID            *string                                                                    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status             *enums.DocumentStatus                                                      "json:\"status,omitempty\" graphql:\"status\""
	Subcontrols        GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags               []string                                                                   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt          *time.Time                                                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string                                                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerificationDate   *time.Time                                                                 "json:\"verificationDate,omitempty\" graphql:\"verificationDate\""
	Verified           *bool                                                                      "json:\"verified,omitempty\" graphql:\"verified\""
}

func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetControls() *GetAllControlImplementations_ControlImplementations_Edges_Node_Controls {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return &t.Controls
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetImplementationDate() *time.Time {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.ImplementationDate
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetSubcontrols() *GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return &t.Subcontrols
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetVerificationDate() *time.Time {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.VerificationDate
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetVerified() *bool {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.Verified
}

type GetAllControlImplementations_ControlImplementations_Edges struct {
	Node *GetAllControlImplementations_ControlImplementations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControlImplementations_ControlImplementations_Edges) GetNode() *GetAllControlImplementations_ControlImplementations_Edges_Node {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges{}
	}
	return t.Node
}

type GetAllControlImplementations_ControlImplementations struct {
	Edges      []*GetAllControlImplementations_ControlImplementations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllControlImplementations_ControlImplementations_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                        "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllControlImplementations_ControlImplementations) GetEdges() []*GetAllControlImplementations_ControlImplementations_Edges {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations{}
	}
	return t.Edges
}
func (t *GetAllControlImplementations_ControlImplementations) GetPageInfo() *GetAllControlImplementations_ControlImplementations_PageInfo {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations{}
	}
	return &t.PageInfo
}
func (t *GetAllControlImplementations_ControlImplementations) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations{}
	}
	return t.TotalCount
}

type GetControlImplementationByID_ControlImplementation_Controls_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetControlImplementationByID_ControlImplementation_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetControlImplementationByID_ControlImplementation_Controls_Edges struct {
	Node *GetControlImplementationByID_ControlImplementation_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlImplementationByID_ControlImplementation_Controls_Edges) GetNode() *GetControlImplementationByID_ControlImplementation_Controls_Edges_Node {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation_Controls_Edges{}
	}
	return t.Node
}

type GetControlImplementationByID_ControlImplementation_Controls struct {
	Edges []*GetControlImplementationByID_ControlImplementation_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControlImplementationByID_ControlImplementation_Controls) GetEdges() []*GetControlImplementationByID_ControlImplementation_Controls_Edges {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation_Controls{}
	}
	return t.Edges
}

type GetControlImplementationByID_ControlImplementation_Subcontrols_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetControlImplementationByID_ControlImplementation_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type GetControlImplementationByID_ControlImplementation_Subcontrols_Edges struct {
	Node *GetControlImplementationByID_ControlImplementation_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlImplementationByID_ControlImplementation_Subcontrols_Edges) GetNode() *GetControlImplementationByID_ControlImplementation_Subcontrols_Edges_Node {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation_Subcontrols_Edges{}
	}
	return t.Node
}

type GetControlImplementationByID_ControlImplementation_Subcontrols struct {
	Edges []*GetControlImplementationByID_ControlImplementation_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControlImplementationByID_ControlImplementation_Subcontrols) GetEdges() []*GetControlImplementationByID_ControlImplementation_Subcontrols_Edges {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation_Subcontrols{}
	}
	return t.Edges
}

type GetControlImplementationByID_ControlImplementation struct {
	Controls           GetControlImplementationByID_ControlImplementation_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt          *time.Time                                                     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string                                                        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details            *string                                                        "json:\"details,omitempty\" graphql:\"details\""
	ID                 string                                                         "json:\"id\" graphql:\"id\""
	ImplementationDate *time.Time                                                     "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	OwnerID            *string                                                        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status             *enums.DocumentStatus                                          "json:\"status,omitempty\" graphql:\"status\""
	Subcontrols        GetControlImplementationByID_ControlImplementation_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags               []string                                                       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt          *time.Time                                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string                                                        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerificationDate   *time.Time                                                     "json:\"verificationDate,omitempty\" graphql:\"verificationDate\""
	Verified           *bool                                                          "json:\"verified,omitempty\" graphql:\"verified\""
}

func (t *GetControlImplementationByID_ControlImplementation) GetControls() *GetControlImplementationByID_ControlImplementation_Controls {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return &t.Controls
}
func (t *GetControlImplementationByID_ControlImplementation) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.CreatedAt
}
func (t *GetControlImplementationByID_ControlImplementation) GetCreatedBy() *string {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.CreatedBy
}
func (t *GetControlImplementationByID_ControlImplementation) GetDetails() *string {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.Details
}
func (t *GetControlImplementationByID_ControlImplementation) GetID() string {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.ID
}
func (t *GetControlImplementationByID_ControlImplementation) GetImplementationDate() *time.Time {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.ImplementationDate
}
func (t *GetControlImplementationByID_ControlImplementation) GetOwnerID() *string {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.OwnerID
}
func (t *GetControlImplementationByID_ControlImplementation) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.Status
}
func (t *GetControlImplementationByID_ControlImplementation) GetSubcontrols() *GetControlImplementationByID_ControlImplementation_Subcontrols {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return &t.Subcontrols
}
func (t *GetControlImplementationByID_ControlImplementation) GetTags() []string {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.Tags
}
func (t *GetControlImplementationByID_ControlImplementation) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.UpdatedAt
}
func (t *GetControlImplementationByID_ControlImplementation) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.UpdatedBy
}
func (t *GetControlImplementationByID_ControlImplementation) GetVerificationDate() *time.Time {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.VerificationDate
}
func (t *GetControlImplementationByID_ControlImplementation) GetVerified() *bool {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.Verified
}

type GetControlImplementations_ControlImplementations_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetControlImplementations_ControlImplementations_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetControlImplementations_ControlImplementations_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetControlImplementations_ControlImplementations_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetControlImplementations_ControlImplementations_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_PageInfo{}
	}
	return t.StartCursor
}

type GetControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetControlImplementations_ControlImplementations_Edges_Node_Controls_Edges struct {
	Node *GetControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlImplementations_ControlImplementations_Edges_Node_Controls_Edges) GetNode() *GetControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node_Controls_Edges{}
	}
	return t.Node
}

type GetControlImplementations_ControlImplementations_Edges_Node_Controls struct {
	Edges []*GetControlImplementations_ControlImplementations_Edges_Node_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControlImplementations_ControlImplementations_Edges_Node_Controls) GetEdges() []*GetControlImplementations_ControlImplementations_Edges_Node_Controls_Edges {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node_Controls{}
	}
	return t.Edges
}

type GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges struct {
	Node *GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges) GetNode() *GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges{}
	}
	return t.Node
}

type GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols struct {
	Edges []*GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols) GetEdges() []*GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols{}
	}
	return t.Edges
}

type GetControlImplementations_ControlImplementations_Edges_Node struct {
	Controls           GetControlImplementations_ControlImplementations_Edges_Node_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt          *time.Time                                                              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string                                                                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details            *string                                                                 "json:\"details,omitempty\" graphql:\"details\""
	ID                 string                                                                  "json:\"id\" graphql:\"id\""
	ImplementationDate *time.Time                                                              "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	OwnerID            *string                                                                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status             *enums.DocumentStatus                                                   "json:\"status,omitempty\" graphql:\"status\""
	Subcontrols        GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags               []string                                                                "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt          *time.Time                                                              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string                                                                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerificationDate   *time.Time                                                              "json:\"verificationDate,omitempty\" graphql:\"verificationDate\""
	Verified           *bool                                                                   "json:\"verified,omitempty\" graphql:\"verified\""
}

func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetControls() *GetControlImplementations_ControlImplementations_Edges_Node_Controls {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return &t.Controls
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.Details
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetImplementationDate() *time.Time {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.ImplementationDate
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.Status
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetSubcontrols() *GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return &t.Subcontrols
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.Tags
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetVerificationDate() *time.Time {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.VerificationDate
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetVerified() *bool {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.Verified
}

type GetControlImplementations_ControlImplementations_Edges struct {
	Node *GetControlImplementations_ControlImplementations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlImplementations_ControlImplementations_Edges) GetNode() *GetControlImplementations_ControlImplementations_Edges_Node {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges{}
	}
	return t.Node
}

type GetControlImplementations_ControlImplementations struct {
	Edges      []*GetControlImplementations_ControlImplementations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetControlImplementations_ControlImplementations_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetControlImplementations_ControlImplementations) GetEdges() []*GetControlImplementations_ControlImplementations_Edges {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations{}
	}
	return t.Edges
}
func (t *GetControlImplementations_ControlImplementations) GetPageInfo() *GetControlImplementations_ControlImplementations_PageInfo {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations{}
	}
	return &t.PageInfo
}
func (t *GetControlImplementations_ControlImplementations) GetTotalCount() int64 {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations{}
	}
	return t.TotalCount
}

type UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls_Edges_Node{}
	}
	return t.RefCode
}

type UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls_Edges struct {
	Node *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls_Edges) GetNode() *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls_Edges_Node {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls_Edges{}
	}
	return t.Node
}

type UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls struct {
	Edges []*UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls) GetEdges() []*UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls_Edges {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls{}
	}
	return t.Edges
}

type UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols_Edges struct {
	Node *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols_Edges) GetNode() *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols_Edges_Node {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols_Edges{}
	}
	return t.Node
}

type UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols struct {
	Edges []*UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols) GetEdges() []*UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols_Edges {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols{}
	}
	return t.Edges
}

type UpdateControlImplementation_UpdateControlImplementation_ControlImplementation struct {
	Controls           UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt          *time.Time                                                                                "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string                                                                                   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details            *string                                                                                   "json:\"details,omitempty\" graphql:\"details\""
	ID                 string                                                                                    "json:\"id\" graphql:\"id\""
	ImplementationDate *time.Time                                                                                "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	OwnerID            *string                                                                                   "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status             *enums.DocumentStatus                                                                     "json:\"status,omitempty\" graphql:\"status\""
	Subcontrols        UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags               []string                                                                                  "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt          *time.Time                                                                                "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string                                                                                   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerificationDate   *time.Time                                                                                "json:\"verificationDate,omitempty\" graphql:\"verificationDate\""
	Verified           *bool                                                                                     "json:\"verified,omitempty\" graphql:\"verified\""
}

func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetControls() *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return &t.Controls
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.CreatedAt
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.CreatedBy
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetDetails() *string {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.Details
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetID() string {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.ID
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetImplementationDate() *time.Time {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.ImplementationDate
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetOwnerID() *string {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.OwnerID
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.Status
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetSubcontrols() *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return &t.Subcontrols
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetTags() []string {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.Tags
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.UpdatedAt
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.UpdatedBy
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetVerificationDate() *time.Time {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.VerificationDate
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetVerified() *bool {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.Verified
}

type UpdateControlImplementation_UpdateControlImplementation struct {
	ControlImplementation UpdateControlImplementation_UpdateControlImplementation_ControlImplementation "json:\"controlImplementation\" graphql:\"controlImplementation\""
}

func (t *UpdateControlImplementation_UpdateControlImplementation) GetControlImplementation() *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation{}
	}
	return &t.ControlImplementation
}

type GetAllControlImplementationHistories_ControlImplementationHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllControlImplementationHistories_ControlImplementationHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node struct {
	CreatedAt          *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details            *string               "json:\"details,omitempty\" graphql:\"details\""
	HistoryTime        time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID                 string                "json:\"id\" graphql:\"id\""
	ImplementationDate *time.Time            "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	Operation          history.OpType        "json:\"operation\" graphql:\"operation\""
	OwnerID            *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                *string               "json:\"ref,omitempty\" graphql:\"ref\""
	Status             *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags               []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt          *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerificationDate   *time.Time            "json:\"verificationDate,omitempty\" graphql:\"verificationDate\""
	Verified           *bool                 "json:\"verified,omitempty\" graphql:\"verified\""
}

func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetImplementationDate() *time.Time {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.ImplementationDate
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetVerificationDate() *time.Time {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.VerificationDate
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetVerified() *bool {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.Verified
}

type GetAllControlImplementationHistories_ControlImplementationHistories_Edges struct {
	Node *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges) GetNode() *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges{}
	}
	return t.Node
}

type GetAllControlImplementationHistories_ControlImplementationHistories struct {
	Edges      []*GetAllControlImplementationHistories_ControlImplementationHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllControlImplementationHistories_ControlImplementationHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                                        "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllControlImplementationHistories_ControlImplementationHistories) GetEdges() []*GetAllControlImplementationHistories_ControlImplementationHistories_Edges {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories{}
	}
	return t.Edges
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories) GetPageInfo() *GetAllControlImplementationHistories_ControlImplementationHistories_PageInfo {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories{}
	}
	return t.TotalCount
}

type GetControlImplementationHistories_ControlImplementationHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetControlImplementationHistories_ControlImplementationHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetControlImplementationHistories_ControlImplementationHistories_Edges_Node struct {
	CreatedAt          *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details            *string               "json:\"details,omitempty\" graphql:\"details\""
	HistoryTime        time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID                 string                "json:\"id\" graphql:\"id\""
	ImplementationDate *time.Time            "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	Operation          history.OpType        "json:\"operation\" graphql:\"operation\""
	OwnerID            *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                *string               "json:\"ref,omitempty\" graphql:\"ref\""
	Status             *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags               []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt          *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerificationDate   *time.Time            "json:\"verificationDate,omitempty\" graphql:\"verificationDate\""
	Verified           *bool                 "json:\"verified,omitempty\" graphql:\"verified\""
}

func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetImplementationDate() *time.Time {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.ImplementationDate
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetVerificationDate() *time.Time {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.VerificationDate
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetVerified() *bool {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.Verified
}

type GetControlImplementationHistories_ControlImplementationHistories_Edges struct {
	Node *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges) GetNode() *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges{}
	}
	return t.Node
}

type GetControlImplementationHistories_ControlImplementationHistories struct {
	Edges      []*GetControlImplementationHistories_ControlImplementationHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetControlImplementationHistories_ControlImplementationHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetControlImplementationHistories_ControlImplementationHistories) GetEdges() []*GetControlImplementationHistories_ControlImplementationHistories_Edges {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories{}
	}
	return t.Edges
}
func (t *GetControlImplementationHistories_ControlImplementationHistories) GetPageInfo() *GetControlImplementationHistories_ControlImplementationHistories_PageInfo {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories{}
	}
	return &t.PageInfo
}
func (t *GetControlImplementationHistories_ControlImplementationHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories{}
	}
	return t.TotalCount
}

type CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Controls_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Controls_Edges_Node{}
	}
	return t.RefCode
}

type CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Controls_Edges struct {
	Node *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Controls_Edges) GetNode() *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Controls_Edges_Node {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Controls_Edges{}
	}
	return t.Node
}

type CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Controls struct {
	Edges []*CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Controls) GetEdges() []*CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Controls_Edges {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Controls{}
	}
	return t.Edges
}

type CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Subcontrols_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Subcontrols_Edges struct {
	Node *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Subcontrols_Edges) GetNode() *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Subcontrols_Edges_Node {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Subcontrols_Edges{}
	}
	return t.Node
}

type CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Subcontrols struct {
	Edges []*CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Subcontrols) GetEdges() []*CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Subcontrols_Edges {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Subcontrols{}
	}
	return t.Edges
}

type CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives struct {
	Category             *string                                                                             "json:\"category,omitempty\" graphql:\"category\""
	ControlObjectiveType *string                                                                             "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	Controls             CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt            *time.Time                                                                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                                                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DesiredOutcome       *string                                                                             "json:\"desiredOutcome,omitempty\" graphql:\"desiredOutcome\""
	DisplayID            string                                                                              "json:\"displayID\" graphql:\"displayID\""
	ID                   string                                                                              "json:\"id\" graphql:\"id\""
	Name                 string                                                                              "json:\"name\" graphql:\"name\""
	OwnerID              *string                                                                             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Revision             *string                                                                             "json:\"revision,omitempty\" graphql:\"revision\""
	Source               *enums.ControlSource                                                                "json:\"source,omitempty\" graphql:\"source\""
	Status               *enums.ObjectiveStatus                                                              "json:\"status,omitempty\" graphql:\"status\""
	Subcategory          *string                                                                             "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Subcontrols          CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags                 []string                                                                            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                                                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                                                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetCategory() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Category
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetControlObjectiveType() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.ControlObjectiveType
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetControls() *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Controls {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return &t.Controls
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.CreatedAt
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.CreatedBy
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetDesiredOutcome() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.DesiredOutcome
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.DisplayID
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetID() string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.ID
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetName() string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Name
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.OwnerID
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetRevision() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Revision
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetSource() *enums.ControlSource {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Source
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetStatus() *enums.ObjectiveStatus {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Status
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetSubcategory() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Subcategory
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetSubcontrols() *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives_Subcontrols {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return &t.Subcontrols
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetTags() []string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Tags
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.UpdatedBy
}

type CreateBulkControlObjective_CreateBulkControlObjective struct {
	ControlObjectives []*CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives "json:\"controlObjectives,omitempty\" graphql:\"controlObjectives\""
}

func (t *CreateBulkControlObjective_CreateBulkControlObjective) GetControlObjectives() []*CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective{}
	}
	return t.ControlObjectives
}

type CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Controls_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Controls_Edges_Node{}
	}
	return t.RefCode
}

type CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Controls_Edges struct {
	Node *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Controls_Edges) GetNode() *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Controls_Edges_Node {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Controls_Edges{}
	}
	return t.Node
}

type CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Controls struct {
	Edges []*CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Controls) GetEdges() []*CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Controls_Edges {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Controls{}
	}
	return t.Edges
}

type CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Subcontrols_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Subcontrols_Edges struct {
	Node *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Subcontrols_Edges) GetNode() *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Subcontrols_Edges_Node {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Subcontrols_Edges{}
	}
	return t.Node
}

type CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Subcontrols struct {
	Edges []*CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Subcontrols) GetEdges() []*CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Subcontrols_Edges {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Subcontrols{}
	}
	return t.Edges
}

type CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives struct {
	Category             *string                                                                                   "json:\"category,omitempty\" graphql:\"category\""
	ControlObjectiveType *string                                                                                   "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	Controls             CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt            *time.Time                                                                                "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                                                                   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DesiredOutcome       *string                                                                                   "json:\"desiredOutcome,omitempty\" graphql:\"desiredOutcome\""
	DisplayID            string                                                                                    "json:\"displayID\" graphql:\"displayID\""
	ID                   string                                                                                    "json:\"id\" graphql:\"id\""
	Name                 string                                                                                    "json:\"name\" graphql:\"name\""
	OwnerID              *string                                                                                   "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Revision             *string                                                                                   "json:\"revision,omitempty\" graphql:\"revision\""
	Source               *enums.ControlSource                                                                      "json:\"source,omitempty\" graphql:\"source\""
	Status               *enums.ObjectiveStatus                                                                    "json:\"status,omitempty\" graphql:\"status\""
	Subcategory          *string                                                                                   "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Subcontrols          CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags                 []string                                                                                  "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                                                                "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                                                                   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetCategory() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Category
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetControlObjectiveType() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.ControlObjectiveType
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetControls() *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Controls {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return &t.Controls
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetDesiredOutcome() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.DesiredOutcome
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.DisplayID
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetID() string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.ID
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetName() string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Name
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetRevision() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Revision
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetSource() *enums.ControlSource {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Source
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetStatus() *enums.ObjectiveStatus {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Status
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetSubcategory() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Subcategory
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetSubcontrols() *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives_Subcontrols {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return &t.Subcontrols
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Tags
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVControlObjective_CreateBulkCSVControlObjective struct {
	ControlObjectives []*CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives "json:\"controlObjectives,omitempty\" graphql:\"controlObjectives\""
}

func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective) GetControlObjectives() []*CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective{}
	}
	return t.ControlObjectives
}

type CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges_Node{}
	}
	return t.RefCode
}

type CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges struct {
	Node *CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges) GetNode() *CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges_Node {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges{}
	}
	return t.Node
}

type CreateControlObjective_CreateControlObjective_ControlObjective_Controls struct {
	Edges []*CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateControlObjective_CreateControlObjective_ControlObjective_Controls) GetEdges() []*CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_Controls{}
	}
	return t.Edges
}

type CreateControlObjective_CreateControlObjective_ControlObjective_Subcontrols_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateControlObjective_CreateControlObjective_ControlObjective_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type CreateControlObjective_CreateControlObjective_ControlObjective_Subcontrols_Edges struct {
	Node *CreateControlObjective_CreateControlObjective_ControlObjective_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateControlObjective_CreateControlObjective_ControlObjective_Subcontrols_Edges) GetNode() *CreateControlObjective_CreateControlObjective_ControlObjective_Subcontrols_Edges_Node {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_Subcontrols_Edges{}
	}
	return t.Node
}

type CreateControlObjective_CreateControlObjective_ControlObjective_Subcontrols struct {
	Edges []*CreateControlObjective_CreateControlObjective_ControlObjective_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateControlObjective_CreateControlObjective_ControlObjective_Subcontrols) GetEdges() []*CreateControlObjective_CreateControlObjective_ControlObjective_Subcontrols_Edges {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_Subcontrols{}
	}
	return t.Edges
}

type CreateControlObjective_CreateControlObjective_ControlObjective struct {
	Category             *string                                                                    "json:\"category,omitempty\" graphql:\"category\""
	ControlObjectiveType *string                                                                    "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	Controls             CreateControlObjective_CreateControlObjective_ControlObjective_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt            *time.Time                                                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DesiredOutcome       *string                                                                    "json:\"desiredOutcome,omitempty\" graphql:\"desiredOutcome\""
	DisplayID            string                                                                     "json:\"displayID\" graphql:\"displayID\""
	ID                   string                                                                     "json:\"id\" graphql:\"id\""
	Name                 string                                                                     "json:\"name\" graphql:\"name\""
	OwnerID              *string                                                                    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Revision             *string                                                                    "json:\"revision,omitempty\" graphql:\"revision\""
	Source               *enums.ControlSource                                                       "json:\"source,omitempty\" graphql:\"source\""
	Status               *enums.ObjectiveStatus                                                     "json:\"status,omitempty\" graphql:\"status\""
	Subcategory          *string                                                                    "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Subcontrols          CreateControlObjective_CreateControlObjective_ControlObjective_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags                 []string                                                                   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetCategory() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Category
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetControlObjectiveType() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.ControlObjectiveType
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetControls() *CreateControlObjective_CreateControlObjective_ControlObjective_Controls {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return &t.Controls
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.CreatedAt
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetCreatedBy() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.CreatedBy
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetDesiredOutcome() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.DesiredOutcome
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetDisplayID() string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.DisplayID
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetID() string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.ID
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetName() string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Name
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetOwnerID() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.OwnerID
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetRevision() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Revision
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetSource() *enums.ControlSource {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Source
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetStatus() *enums.ObjectiveStatus {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Status
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetSubcategory() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Subcategory
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetSubcontrols() *CreateControlObjective_CreateControlObjective_ControlObjective_Subcontrols {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return &t.Subcontrols
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetTags() []string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Tags
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.UpdatedAt
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.UpdatedBy
}

type CreateControlObjective_CreateControlObjective struct {
	ControlObjective CreateControlObjective_CreateControlObjective_ControlObjective "json:\"controlObjective\" graphql:\"controlObjective\""
}

func (t *CreateControlObjective_CreateControlObjective) GetControlObjective() *CreateControlObjective_CreateControlObjective_ControlObjective {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective{}
	}
	return &t.ControlObjective
}

type DeleteControlObjective_DeleteControlObjective struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteControlObjective_DeleteControlObjective) GetDeletedID() string {
	if t == nil {
		t = &DeleteControlObjective_DeleteControlObjective{}
	}
	return t.DeletedID
}

type GetAllControlObjectives_ControlObjectives_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllControlObjectives_ControlObjectives_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllControlObjectives_ControlObjectives_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllControlObjectives_ControlObjectives_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllControlObjectives_ControlObjectives_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_PageInfo{}
	}
	return t.StartCursor
}

type GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges struct {
	Node *GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges) GetNode() *GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges{}
	}
	return t.Node
}

type GetAllControlObjectives_ControlObjectives_Edges_Node_Controls struct {
	Edges []*GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_Controls) GetEdges() []*GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_Controls{}
	}
	return t.Edges
}

type GetAllControlObjectives_ControlObjectives_Edges_Node_Subcontrols_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type GetAllControlObjectives_ControlObjectives_Edges_Node_Subcontrols_Edges struct {
	Node *GetAllControlObjectives_ControlObjectives_Edges_Node_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_Subcontrols_Edges) GetNode() *GetAllControlObjectives_ControlObjectives_Edges_Node_Subcontrols_Edges_Node {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_Subcontrols_Edges{}
	}
	return t.Node
}

type GetAllControlObjectives_ControlObjectives_Edges_Node_Subcontrols struct {
	Edges []*GetAllControlObjectives_ControlObjectives_Edges_Node_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_Subcontrols) GetEdges() []*GetAllControlObjectives_ControlObjectives_Edges_Node_Subcontrols_Edges {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_Subcontrols{}
	}
	return t.Edges
}

type GetAllControlObjectives_ControlObjectives_Edges_Node struct {
	Category             *string                                                          "json:\"category,omitempty\" graphql:\"category\""
	ControlObjectiveType *string                                                          "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	Controls             GetAllControlObjectives_ControlObjectives_Edges_Node_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt            *time.Time                                                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DesiredOutcome       *string                                                          "json:\"desiredOutcome,omitempty\" graphql:\"desiredOutcome\""
	DisplayID            string                                                           "json:\"displayID\" graphql:\"displayID\""
	ID                   string                                                           "json:\"id\" graphql:\"id\""
	Name                 string                                                           "json:\"name\" graphql:\"name\""
	OwnerID              *string                                                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Revision             *string                                                          "json:\"revision,omitempty\" graphql:\"revision\""
	Source               *enums.ControlSource                                             "json:\"source,omitempty\" graphql:\"source\""
	Status               *enums.ObjectiveStatus                                           "json:\"status,omitempty\" graphql:\"status\""
	Subcategory          *string                                                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Subcontrols          GetAllControlObjectives_ControlObjectives_Edges_Node_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags                 []string                                                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetControlObjectiveType() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.ControlObjectiveType
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetControls() *GetAllControlObjectives_ControlObjectives_Edges_Node_Controls {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return &t.Controls
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetDesiredOutcome() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.DesiredOutcome
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Revision
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetStatus() *enums.ObjectiveStatus {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetSubcontrols() *GetAllControlObjectives_ControlObjectives_Edges_Node_Subcontrols {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return &t.Subcontrols
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllControlObjectives_ControlObjectives_Edges struct {
	Node *GetAllControlObjectives_ControlObjectives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControlObjectives_ControlObjectives_Edges) GetNode() *GetAllControlObjectives_ControlObjectives_Edges_Node {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges{}
	}
	return t.Node
}

type GetAllControlObjectives_ControlObjectives struct {
	Edges      []*GetAllControlObjectives_ControlObjectives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllControlObjectives_ControlObjectives_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllControlObjectives_ControlObjectives) GetEdges() []*GetAllControlObjectives_ControlObjectives_Edges {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives{}
	}
	return t.Edges
}
func (t *GetAllControlObjectives_ControlObjectives) GetPageInfo() *GetAllControlObjectives_ControlObjectives_PageInfo {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives{}
	}
	return &t.PageInfo
}
func (t *GetAllControlObjectives_ControlObjectives) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives{}
	}
	return t.TotalCount
}

type GetControlObjectiveByID_ControlObjective_Controls_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetControlObjectiveByID_ControlObjective_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetControlObjectiveByID_ControlObjective_Controls_Edges struct {
	Node *GetControlObjectiveByID_ControlObjective_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlObjectiveByID_ControlObjective_Controls_Edges) GetNode() *GetControlObjectiveByID_ControlObjective_Controls_Edges_Node {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_Controls_Edges{}
	}
	return t.Node
}

type GetControlObjectiveByID_ControlObjective_Controls struct {
	Edges []*GetControlObjectiveByID_ControlObjective_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControlObjectiveByID_ControlObjective_Controls) GetEdges() []*GetControlObjectiveByID_ControlObjective_Controls_Edges {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_Controls{}
	}
	return t.Edges
}

type GetControlObjectiveByID_ControlObjective_Subcontrols_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetControlObjectiveByID_ControlObjective_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type GetControlObjectiveByID_ControlObjective_Subcontrols_Edges struct {
	Node *GetControlObjectiveByID_ControlObjective_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlObjectiveByID_ControlObjective_Subcontrols_Edges) GetNode() *GetControlObjectiveByID_ControlObjective_Subcontrols_Edges_Node {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_Subcontrols_Edges{}
	}
	return t.Node
}

type GetControlObjectiveByID_ControlObjective_Subcontrols struct {
	Edges []*GetControlObjectiveByID_ControlObjective_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControlObjectiveByID_ControlObjective_Subcontrols) GetEdges() []*GetControlObjectiveByID_ControlObjective_Subcontrols_Edges {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_Subcontrols{}
	}
	return t.Edges
}

type GetControlObjectiveByID_ControlObjective struct {
	Category             *string                                              "json:\"category,omitempty\" graphql:\"category\""
	ControlObjectiveType *string                                              "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	Controls             GetControlObjectiveByID_ControlObjective_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt            *time.Time                                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DesiredOutcome       *string                                              "json:\"desiredOutcome,omitempty\" graphql:\"desiredOutcome\""
	DisplayID            string                                               "json:\"displayID\" graphql:\"displayID\""
	ID                   string                                               "json:\"id\" graphql:\"id\""
	Name                 string                                               "json:\"name\" graphql:\"name\""
	OwnerID              *string                                              "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Revision             *string                                              "json:\"revision,omitempty\" graphql:\"revision\""
	Source               *enums.ControlSource                                 "json:\"source,omitempty\" graphql:\"source\""
	Status               *enums.ObjectiveStatus                               "json:\"status,omitempty\" graphql:\"status\""
	Subcategory          *string                                              "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Subcontrols          GetControlObjectiveByID_ControlObjective_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags                 []string                                             "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetControlObjectiveByID_ControlObjective) GetCategory() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Category
}
func (t *GetControlObjectiveByID_ControlObjective) GetControlObjectiveType() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.ControlObjectiveType
}
func (t *GetControlObjectiveByID_ControlObjective) GetControls() *GetControlObjectiveByID_ControlObjective_Controls {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return &t.Controls
}
func (t *GetControlObjectiveByID_ControlObjective) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.CreatedAt
}
func (t *GetControlObjectiveByID_ControlObjective) GetCreatedBy() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.CreatedBy
}
func (t *GetControlObjectiveByID_ControlObjective) GetDesiredOutcome() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.DesiredOutcome
}
func (t *GetControlObjectiveByID_ControlObjective) GetDisplayID() string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.DisplayID
}
func (t *GetControlObjectiveByID_ControlObjective) GetID() string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.ID
}
func (t *GetControlObjectiveByID_ControlObjective) GetName() string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Name
}
func (t *GetControlObjectiveByID_ControlObjective) GetOwnerID() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.OwnerID
}
func (t *GetControlObjectiveByID_ControlObjective) GetRevision() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Revision
}
func (t *GetControlObjectiveByID_ControlObjective) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Source
}
func (t *GetControlObjectiveByID_ControlObjective) GetStatus() *enums.ObjectiveStatus {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Status
}
func (t *GetControlObjectiveByID_ControlObjective) GetSubcategory() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Subcategory
}
func (t *GetControlObjectiveByID_ControlObjective) GetSubcontrols() *GetControlObjectiveByID_ControlObjective_Subcontrols {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return &t.Subcontrols
}
func (t *GetControlObjectiveByID_ControlObjective) GetTags() []string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Tags
}
func (t *GetControlObjectiveByID_ControlObjective) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.UpdatedAt
}
func (t *GetControlObjectiveByID_ControlObjective) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.UpdatedBy
}

type GetControlObjectives_ControlObjectives_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetControlObjectives_ControlObjectives_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetControlObjectives_ControlObjectives_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetControlObjectives_ControlObjectives_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetControlObjectives_ControlObjectives_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_PageInfo{}
	}
	return t.StartCursor
}

type GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges struct {
	Node *GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges) GetNode() *GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges{}
	}
	return t.Node
}

type GetControlObjectives_ControlObjectives_Edges_Node_Controls struct {
	Edges []*GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControlObjectives_ControlObjectives_Edges_Node_Controls) GetEdges() []*GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_Controls{}
	}
	return t.Edges
}

type GetControlObjectives_ControlObjectives_Edges_Node_Subcontrols_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetControlObjectives_ControlObjectives_Edges_Node_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type GetControlObjectives_ControlObjectives_Edges_Node_Subcontrols_Edges struct {
	Node *GetControlObjectives_ControlObjectives_Edges_Node_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlObjectives_ControlObjectives_Edges_Node_Subcontrols_Edges) GetNode() *GetControlObjectives_ControlObjectives_Edges_Node_Subcontrols_Edges_Node {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_Subcontrols_Edges{}
	}
	return t.Node
}

type GetControlObjectives_ControlObjectives_Edges_Node_Subcontrols struct {
	Edges []*GetControlObjectives_ControlObjectives_Edges_Node_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControlObjectives_ControlObjectives_Edges_Node_Subcontrols) GetEdges() []*GetControlObjectives_ControlObjectives_Edges_Node_Subcontrols_Edges {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_Subcontrols{}
	}
	return t.Edges
}

type GetControlObjectives_ControlObjectives_Edges_Node struct {
	Category             *string                                                       "json:\"category,omitempty\" graphql:\"category\""
	ControlObjectiveType *string                                                       "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	Controls             GetControlObjectives_ControlObjectives_Edges_Node_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt            *time.Time                                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DesiredOutcome       *string                                                       "json:\"desiredOutcome,omitempty\" graphql:\"desiredOutcome\""
	DisplayID            string                                                        "json:\"displayID\" graphql:\"displayID\""
	ID                   string                                                        "json:\"id\" graphql:\"id\""
	Name                 string                                                        "json:\"name\" graphql:\"name\""
	OwnerID              *string                                                       "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Revision             *string                                                       "json:\"revision,omitempty\" graphql:\"revision\""
	Source               *enums.ControlSource                                          "json:\"source,omitempty\" graphql:\"source\""
	Status               *enums.ObjectiveStatus                                        "json:\"status,omitempty\" graphql:\"status\""
	Subcategory          *string                                                       "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Subcontrols          GetControlObjectives_ControlObjectives_Edges_Node_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags                 []string                                                      "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Category
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetControlObjectiveType() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.ControlObjectiveType
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetControls() *GetControlObjectives_ControlObjectives_Edges_Node_Controls {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return &t.Controls
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetDesiredOutcome() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.DesiredOutcome
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetName() string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Name
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Revision
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Source
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetStatus() *enums.ObjectiveStatus {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Status
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetSubcontrols() *GetControlObjectives_ControlObjectives_Edges_Node_Subcontrols {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return &t.Subcontrols
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Tags
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetControlObjectives_ControlObjectives_Edges struct {
	Node *GetControlObjectives_ControlObjectives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlObjectives_ControlObjectives_Edges) GetNode() *GetControlObjectives_ControlObjectives_Edges_Node {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges{}
	}
	return t.Node
}

type GetControlObjectives_ControlObjectives struct {
	Edges      []*GetControlObjectives_ControlObjectives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetControlObjectives_ControlObjectives_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                           "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetControlObjectives_ControlObjectives) GetEdges() []*GetControlObjectives_ControlObjectives_Edges {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives{}
	}
	return t.Edges
}
func (t *GetControlObjectives_ControlObjectives) GetPageInfo() *GetControlObjectives_ControlObjectives_PageInfo {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives{}
	}
	return &t.PageInfo
}
func (t *GetControlObjectives_ControlObjectives) GetTotalCount() int64 {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives{}
	}
	return t.TotalCount
}

type UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges_Node{}
	}
	return t.RefCode
}

type UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges struct {
	Node *UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges) GetNode() *UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges_Node {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges{}
	}
	return t.Node
}

type UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls struct {
	Edges []*UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls) GetEdges() []*UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls{}
	}
	return t.Edges
}

type UpdateControlObjective_UpdateControlObjective_ControlObjective_Subcontrols_Edges_Node struct {
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type UpdateControlObjective_UpdateControlObjective_ControlObjective_Subcontrols_Edges struct {
	Node *UpdateControlObjective_UpdateControlObjective_ControlObjective_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_Subcontrols_Edges) GetNode() *UpdateControlObjective_UpdateControlObjective_ControlObjective_Subcontrols_Edges_Node {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_Subcontrols_Edges{}
	}
	return t.Node
}

type UpdateControlObjective_UpdateControlObjective_ControlObjective_Subcontrols struct {
	Edges []*UpdateControlObjective_UpdateControlObjective_ControlObjective_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_Subcontrols) GetEdges() []*UpdateControlObjective_UpdateControlObjective_ControlObjective_Subcontrols_Edges {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_Subcontrols{}
	}
	return t.Edges
}

type UpdateControlObjective_UpdateControlObjective_ControlObjective struct {
	Category             *string                                                                    "json:\"category,omitempty\" graphql:\"category\""
	ControlObjectiveType *string                                                                    "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	Controls             UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt            *time.Time                                                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DesiredOutcome       *string                                                                    "json:\"desiredOutcome,omitempty\" graphql:\"desiredOutcome\""
	DisplayID            string                                                                     "json:\"displayID\" graphql:\"displayID\""
	ID                   string                                                                     "json:\"id\" graphql:\"id\""
	Name                 string                                                                     "json:\"name\" graphql:\"name\""
	OwnerID              *string                                                                    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Revision             *string                                                                    "json:\"revision,omitempty\" graphql:\"revision\""
	Source               *enums.ControlSource                                                       "json:\"source,omitempty\" graphql:\"source\""
	Status               *enums.ObjectiveStatus                                                     "json:\"status,omitempty\" graphql:\"status\""
	Subcategory          *string                                                                    "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Subcontrols          UpdateControlObjective_UpdateControlObjective_ControlObjective_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags                 []string                                                                   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetCategory() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Category
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetControlObjectiveType() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.ControlObjectiveType
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetControls() *UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return &t.Controls
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.CreatedAt
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.CreatedBy
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetDesiredOutcome() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.DesiredOutcome
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetDisplayID() string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.DisplayID
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetID() string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.ID
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetName() string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Name
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetOwnerID() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.OwnerID
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetRevision() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Revision
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetSource() *enums.ControlSource {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Source
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetStatus() *enums.ObjectiveStatus {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Status
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetSubcategory() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Subcategory
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetSubcontrols() *UpdateControlObjective_UpdateControlObjective_ControlObjective_Subcontrols {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return &t.Subcontrols
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetTags() []string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Tags
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.UpdatedAt
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.UpdatedBy
}

type UpdateControlObjective_UpdateControlObjective struct {
	ControlObjective UpdateControlObjective_UpdateControlObjective_ControlObjective "json:\"controlObjective\" graphql:\"controlObjective\""
}

func (t *UpdateControlObjective_UpdateControlObjective) GetControlObjective() *UpdateControlObjective_UpdateControlObjective_ControlObjective {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective{}
	}
	return &t.ControlObjective
}

type GetAllControlObjectiveHistories_ControlObjectiveHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node struct {
	Category             *string                "json:\"category,omitempty\" graphql:\"category\""
	ControlObjectiveType *string                "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	CreatedAt            *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DesiredOutcome       *string                "json:\"desiredOutcome,omitempty\" graphql:\"desiredOutcome\""
	DisplayID            string                 "json:\"displayID\" graphql:\"displayID\""
	HistoryTime          time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID                   string                 "json:\"id\" graphql:\"id\""
	Name                 string                 "json:\"name\" graphql:\"name\""
	Operation            history.OpType         "json:\"operation\" graphql:\"operation\""
	OwnerID              *string                "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                  *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Revision             *string                "json:\"revision,omitempty\" graphql:\"revision\""
	Source               *enums.ControlSource   "json:\"source,omitempty\" graphql:\"source\""
	Status               *enums.ObjectiveStatus "json:\"status,omitempty\" graphql:\"status\""
	Subcategory          *string                "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                 []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetControlObjectiveType() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.ControlObjectiveType
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetDesiredOutcome() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.DesiredOutcome
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Revision
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetStatus() *enums.ObjectiveStatus {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges struct {
	Node *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges) GetNode() *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges{}
	}
	return t.Node
}

type GetAllControlObjectiveHistories_ControlObjectiveHistories struct {
	Edges      []*GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllControlObjectiveHistories_ControlObjectiveHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories) GetEdges() []*GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories{}
	}
	return t.Edges
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories) GetPageInfo() *GetAllControlObjectiveHistories_ControlObjectiveHistories_PageInfo {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories{}
	}
	return t.TotalCount
}

type GetControlObjectiveHistories_ControlObjectiveHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetControlObjectiveHistories_ControlObjectiveHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node struct {
	Category             *string                "json:\"category,omitempty\" graphql:\"category\""
	ControlObjectiveType *string                "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	CreatedAt            *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DesiredOutcome       *string                "json:\"desiredOutcome,omitempty\" graphql:\"desiredOutcome\""
	DisplayID            string                 "json:\"displayID\" graphql:\"displayID\""
	HistoryTime          time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID                   string                 "json:\"id\" graphql:\"id\""
	Name                 string                 "json:\"name\" graphql:\"name\""
	Operation            history.OpType         "json:\"operation\" graphql:\"operation\""
	OwnerID              *string                "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                  *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Revision             *string                "json:\"revision,omitempty\" graphql:\"revision\""
	Source               *enums.ControlSource   "json:\"source,omitempty\" graphql:\"source\""
	Status               *enums.ObjectiveStatus "json:\"status,omitempty\" graphql:\"status\""
	Subcategory          *string                "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                 []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Category
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetControlObjectiveType() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.ControlObjectiveType
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetDesiredOutcome() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.DesiredOutcome
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Revision
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetStatus() *enums.ObjectiveStatus {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetControlObjectiveHistories_ControlObjectiveHistories_Edges struct {
	Node *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges) GetNode() *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges{}
	}
	return t.Node
}

type GetControlObjectiveHistories_ControlObjectiveHistories struct {
	Edges      []*GetControlObjectiveHistories_ControlObjectiveHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetControlObjectiveHistories_ControlObjectiveHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                           "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetControlObjectiveHistories_ControlObjectiveHistories) GetEdges() []*GetControlObjectiveHistories_ControlObjectiveHistories_Edges {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories{}
	}
	return t.Edges
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories) GetPageInfo() *GetControlObjectiveHistories_ControlObjectiveHistories_PageInfo {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories{}
	}
	return &t.PageInfo
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains struct {
	CnameRecord       string     "json:\"cnameRecord\" graphql:\"cnameRecord\""
	CreatedAt         *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DNSVerificationID *string    "json:\"dnsVerificationID,omitempty\" graphql:\"dnsVerificationID\""
	ID                string     "json:\"id\" graphql:\"id\""
	MappableDomainID  string     "json:\"mappableDomainID\" graphql:\"mappableDomainID\""
	OwnerID           *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags              []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains) GetCnameRecord() string {
	if t == nil {
		t = &CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains{}
	}
	return t.CnameRecord
}
func (t *CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains) GetDNSVerificationID() *string {
	if t == nil {
		t = &CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains{}
	}
	return t.DNSVerificationID
}
func (t *CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains) GetID() string {
	if t == nil {
		t = &CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains{}
	}
	return t.ID
}
func (t *CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains) GetMappableDomainID() string {
	if t == nil {
		t = &CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains{}
	}
	return t.MappableDomainID
}
func (t *CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains{}
	}
	return t.Tags
}
func (t *CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain struct {
	CustomDomains []*CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains "json:\"customDomains,omitempty\" graphql:\"customDomains\""
}

func (t *CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain) GetCustomDomains() []*CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain_CustomDomains {
	if t == nil {
		t = &CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain{}
	}
	return t.CustomDomains
}

type CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains struct {
	CnameRecord       string     "json:\"cnameRecord\" graphql:\"cnameRecord\""
	CreatedAt         *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DNSVerificationID *string    "json:\"dnsVerificationID,omitempty\" graphql:\"dnsVerificationID\""
	ID                string     "json:\"id\" graphql:\"id\""
	MappableDomainID  string     "json:\"mappableDomainID\" graphql:\"mappableDomainID\""
	OwnerID           *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags              []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains) GetCnameRecord() string {
	if t == nil {
		t = &CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains{}
	}
	return t.CnameRecord
}
func (t *CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains) GetDNSVerificationID() *string {
	if t == nil {
		t = &CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains{}
	}
	return t.DNSVerificationID
}
func (t *CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains) GetID() string {
	if t == nil {
		t = &CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains{}
	}
	return t.ID
}
func (t *CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains) GetMappableDomainID() string {
	if t == nil {
		t = &CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains{}
	}
	return t.MappableDomainID
}
func (t *CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains{}
	}
	return t.OwnerID
}
func (t *CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains) GetTags() []string {
	if t == nil {
		t = &CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains{}
	}
	return t.Tags
}
func (t *CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains{}
	}
	return t.UpdatedBy
}

type CreateBulkCustomDomain_CreateBulkCustomDomain struct {
	CustomDomains []*CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains "json:\"customDomains,omitempty\" graphql:\"customDomains\""
}

func (t *CreateBulkCustomDomain_CreateBulkCustomDomain) GetCustomDomains() []*CreateBulkCustomDomain_CreateBulkCustomDomain_CustomDomains {
	if t == nil {
		t = &CreateBulkCustomDomain_CreateBulkCustomDomain{}
	}
	return t.CustomDomains
}

type CreateCustomDomain_CreateCustomDomain_CustomDomain_DNSVerification struct {
	DNSTxtRecord          string                      "json:\"dnsTxtRecord\" graphql:\"dnsTxtRecord\""
	DNSTxtValue           string                      "json:\"dnsTxtValue\" graphql:\"dnsTxtValue\""
	DNSVerificationStatus enums.DNSVerificationStatus "json:\"dnsVerificationStatus\" graphql:\"dnsVerificationStatus\""
	ID                    string                      "json:\"id\" graphql:\"id\""
}

func (t *CreateCustomDomain_CreateCustomDomain_CustomDomain_DNSVerification) GetDNSTxtRecord() string {
	if t == nil {
		t = &CreateCustomDomain_CreateCustomDomain_CustomDomain_DNSVerification{}
	}
	return t.DNSTxtRecord
}
func (t *CreateCustomDomain_CreateCustomDomain_CustomDomain_DNSVerification) GetDNSTxtValue() string {
	if t == nil {
		t = &CreateCustomDomain_CreateCustomDomain_CustomDomain_DNSVerification{}
	}
	return t.DNSTxtValue
}
func (t *CreateCustomDomain_CreateCustomDomain_CustomDomain_DNSVerification) GetDNSVerificationStatus() *enums.DNSVerificationStatus {
	if t == nil {
		t = &CreateCustomDomain_CreateCustomDomain_CustomDomain_DNSVerification{}
	}
	return &t.DNSVerificationStatus
}
func (t *CreateCustomDomain_CreateCustomDomain_CustomDomain_DNSVerification) GetID() string {
	if t == nil {
		t = &CreateCustomDomain_CreateCustomDomain_CustomDomain_DNSVerification{}
	}
	return t.ID
}

type CreateCustomDomain_CreateCustomDomain_CustomDomain struct {
	CnameRecord       string                                                              "json:\"cnameRecord\" graphql:\"cnameRecord\""
	CreatedAt         *time.Time                                                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string                                                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DNSVerification   *CreateCustomDomain_CreateCustomDomain_CustomDomain_DNSVerification "json:\"dnsVerification,omitempty\" graphql:\"dnsVerification\""
	DNSVerificationID *string                                                             "json:\"dnsVerificationID,omitempty\" graphql:\"dnsVerificationID\""
	ID                string                                                              "json:\"id\" graphql:\"id\""
	MappableDomainID  string                                                              "json:\"mappableDomainID\" graphql:\"mappableDomainID\""
	OwnerID           *string                                                             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags              []string                                                            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time                                                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string                                                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateCustomDomain_CreateCustomDomain_CustomDomain) GetCnameRecord() string {
	if t == nil {
		t = &CreateCustomDomain_CreateCustomDomain_CustomDomain{}
	}
	return t.CnameRecord
}
func (t *CreateCustomDomain_CreateCustomDomain_CustomDomain) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateCustomDomain_CreateCustomDomain_CustomDomain{}
	}
	return t.CreatedAt
}
func (t *CreateCustomDomain_CreateCustomDomain_CustomDomain) GetCreatedBy() *string {
	if t == nil {
		t = &CreateCustomDomain_CreateCustomDomain_CustomDomain{}
	}
	return t.CreatedBy
}
func (t *CreateCustomDomain_CreateCustomDomain_CustomDomain) GetDNSVerification() *CreateCustomDomain_CreateCustomDomain_CustomDomain_DNSVerification {
	if t == nil {
		t = &CreateCustomDomain_CreateCustomDomain_CustomDomain{}
	}
	return t.DNSVerification
}
func (t *CreateCustomDomain_CreateCustomDomain_CustomDomain) GetDNSVerificationID() *string {
	if t == nil {
		t = &CreateCustomDomain_CreateCustomDomain_CustomDomain{}
	}
	return t.DNSVerificationID
}
func (t *CreateCustomDomain_CreateCustomDomain_CustomDomain) GetID() string {
	if t == nil {
		t = &CreateCustomDomain_CreateCustomDomain_CustomDomain{}
	}
	return t.ID
}
func (t *CreateCustomDomain_CreateCustomDomain_CustomDomain) GetMappableDomainID() string {
	if t == nil {
		t = &CreateCustomDomain_CreateCustomDomain_CustomDomain{}
	}
	return t.MappableDomainID
}
func (t *CreateCustomDomain_CreateCustomDomain_CustomDomain) GetOwnerID() *string {
	if t == nil {
		t = &CreateCustomDomain_CreateCustomDomain_CustomDomain{}
	}
	return t.OwnerID
}
func (t *CreateCustomDomain_CreateCustomDomain_CustomDomain) GetTags() []string {
	if t == nil {
		t = &CreateCustomDomain_CreateCustomDomain_CustomDomain{}
	}
	return t.Tags
}
func (t *CreateCustomDomain_CreateCustomDomain_CustomDomain) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateCustomDomain_CreateCustomDomain_CustomDomain{}
	}
	return t.UpdatedAt
}
func (t *CreateCustomDomain_CreateCustomDomain_CustomDomain) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateCustomDomain_CreateCustomDomain_CustomDomain{}
	}
	return t.UpdatedBy
}

type CreateCustomDomain_CreateCustomDomain struct {
	CustomDomain CreateCustomDomain_CreateCustomDomain_CustomDomain "json:\"customDomain\" graphql:\"customDomain\""
}

func (t *CreateCustomDomain_CreateCustomDomain) GetCustomDomain() *CreateCustomDomain_CreateCustomDomain_CustomDomain {
	if t == nil {
		t = &CreateCustomDomain_CreateCustomDomain{}
	}
	return &t.CustomDomain
}

type DeleteCustomDomain_DeleteCustomDomain struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteCustomDomain_DeleteCustomDomain) GetDeletedID() string {
	if t == nil {
		t = &DeleteCustomDomain_DeleteCustomDomain{}
	}
	return t.DeletedID
}

type GetAllCustomDomains_CustomDomains_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllCustomDomains_CustomDomains_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllCustomDomains_CustomDomains_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllCustomDomains_CustomDomains_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllCustomDomains_CustomDomains_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_PageInfo{}
	}
	return t.StartCursor
}

type GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification struct {
	AcmeChallengePath           *string                     "json:\"acmeChallengePath,omitempty\" graphql:\"acmeChallengePath\""
	AcmeChallengeStatus         enums.SSLVerificationStatus "json:\"acmeChallengeStatus\" graphql:\"acmeChallengeStatus\""
	AcmeChallengeStatusReason   *string                     "json:\"acmeChallengeStatusReason,omitempty\" graphql:\"acmeChallengeStatusReason\""
	CloudflareHostnameID        string                      "json:\"cloudflareHostnameID\" graphql:\"cloudflareHostnameID\""
	DNSTxtRecord                string                      "json:\"dnsTxtRecord\" graphql:\"dnsTxtRecord\""
	DNSTxtValue                 string                      "json:\"dnsTxtValue\" graphql:\"dnsTxtValue\""
	DNSVerificationStatus       enums.DNSVerificationStatus "json:\"dnsVerificationStatus\" graphql:\"dnsVerificationStatus\""
	DNSVerificationStatusReason *string                     "json:\"dnsVerificationStatusReason,omitempty\" graphql:\"dnsVerificationStatusReason\""
	ExpectedAcmeChallengeValue  *string                     "json:\"expectedAcmeChallengeValue,omitempty\" graphql:\"expectedAcmeChallengeValue\""
	ID                          string                      "json:\"id\" graphql:\"id\""
}

func (t *GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification) GetAcmeChallengePath() *string {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification{}
	}
	return t.AcmeChallengePath
}
func (t *GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification) GetAcmeChallengeStatus() *enums.SSLVerificationStatus {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification{}
	}
	return &t.AcmeChallengeStatus
}
func (t *GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification) GetAcmeChallengeStatusReason() *string {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification{}
	}
	return t.AcmeChallengeStatusReason
}
func (t *GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification) GetCloudflareHostnameID() string {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification{}
	}
	return t.CloudflareHostnameID
}
func (t *GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification) GetDNSTxtRecord() string {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification{}
	}
	return t.DNSTxtRecord
}
func (t *GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification) GetDNSTxtValue() string {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification{}
	}
	return t.DNSTxtValue
}
func (t *GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification) GetDNSVerificationStatus() *enums.DNSVerificationStatus {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification{}
	}
	return &t.DNSVerificationStatus
}
func (t *GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification) GetDNSVerificationStatusReason() *string {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification{}
	}
	return t.DNSVerificationStatusReason
}
func (t *GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification) GetExpectedAcmeChallengeValue() *string {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification{}
	}
	return t.ExpectedAcmeChallengeValue
}
func (t *GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification) GetID() string {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification{}
	}
	return t.ID
}

type GetAllCustomDomains_CustomDomains_Edges_Node_MappableDomain struct {
	ID     string "json:\"id\" graphql:\"id\""
	Name   string "json:\"name\" graphql:\"name\""
	ZoneID string "json:\"zoneID\" graphql:\"zoneID\""
}

func (t *GetAllCustomDomains_CustomDomains_Edges_Node_MappableDomain) GetID() string {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node_MappableDomain{}
	}
	return t.ID
}
func (t *GetAllCustomDomains_CustomDomains_Edges_Node_MappableDomain) GetName() string {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node_MappableDomain{}
	}
	return t.Name
}
func (t *GetAllCustomDomains_CustomDomains_Edges_Node_MappableDomain) GetZoneID() string {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node_MappableDomain{}
	}
	return t.ZoneID
}

type GetAllCustomDomains_CustomDomains_Edges_Node struct {
	CnameRecord       string                                                        "json:\"cnameRecord\" graphql:\"cnameRecord\""
	CreatedAt         *time.Time                                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string                                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DNSVerification   *GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification "json:\"dnsVerification,omitempty\" graphql:\"dnsVerification\""
	DNSVerificationID *string                                                       "json:\"dnsVerificationID,omitempty\" graphql:\"dnsVerificationID\""
	ID                string                                                        "json:\"id\" graphql:\"id\""
	MappableDomain    GetAllCustomDomains_CustomDomains_Edges_Node_MappableDomain   "json:\"mappableDomain\" graphql:\"mappableDomain\""
	OwnerID           *string                                                       "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags              []string                                                      "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time                                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string                                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllCustomDomains_CustomDomains_Edges_Node) GetCnameRecord() string {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node{}
	}
	return t.CnameRecord
}
func (t *GetAllCustomDomains_CustomDomains_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllCustomDomains_CustomDomains_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllCustomDomains_CustomDomains_Edges_Node) GetDNSVerification() *GetAllCustomDomains_CustomDomains_Edges_Node_DNSVerification {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node{}
	}
	return t.DNSVerification
}
func (t *GetAllCustomDomains_CustomDomains_Edges_Node) GetDNSVerificationID() *string {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node{}
	}
	return t.DNSVerificationID
}
func (t *GetAllCustomDomains_CustomDomains_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllCustomDomains_CustomDomains_Edges_Node) GetMappableDomain() *GetAllCustomDomains_CustomDomains_Edges_Node_MappableDomain {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node{}
	}
	return &t.MappableDomain
}
func (t *GetAllCustomDomains_CustomDomains_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllCustomDomains_CustomDomains_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllCustomDomains_CustomDomains_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllCustomDomains_CustomDomains_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllCustomDomains_CustomDomains_Edges struct {
	Node *GetAllCustomDomains_CustomDomains_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllCustomDomains_CustomDomains_Edges) GetNode() *GetAllCustomDomains_CustomDomains_Edges_Node {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains_Edges{}
	}
	return t.Node
}

type GetAllCustomDomains_CustomDomains struct {
	Edges      []*GetAllCustomDomains_CustomDomains_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllCustomDomains_CustomDomains_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllCustomDomains_CustomDomains) GetEdges() []*GetAllCustomDomains_CustomDomains_Edges {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains{}
	}
	return t.Edges
}
func (t *GetAllCustomDomains_CustomDomains) GetPageInfo() *GetAllCustomDomains_CustomDomains_PageInfo {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains{}
	}
	return &t.PageInfo
}
func (t *GetAllCustomDomains_CustomDomains) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllCustomDomains_CustomDomains{}
	}
	return t.TotalCount
}

type GetCustomDomainByID_CustomDomain_DNSVerification struct {
	AcmeChallengePath           *string                     "json:\"acmeChallengePath,omitempty\" graphql:\"acmeChallengePath\""
	AcmeChallengeStatus         enums.SSLVerificationStatus "json:\"acmeChallengeStatus\" graphql:\"acmeChallengeStatus\""
	AcmeChallengeStatusReason   *string                     "json:\"acmeChallengeStatusReason,omitempty\" graphql:\"acmeChallengeStatusReason\""
	CloudflareHostnameID        string                      "json:\"cloudflareHostnameID\" graphql:\"cloudflareHostnameID\""
	DNSTxtRecord                string                      "json:\"dnsTxtRecord\" graphql:\"dnsTxtRecord\""
	DNSTxtValue                 string                      "json:\"dnsTxtValue\" graphql:\"dnsTxtValue\""
	DNSVerificationStatus       enums.DNSVerificationStatus "json:\"dnsVerificationStatus\" graphql:\"dnsVerificationStatus\""
	DNSVerificationStatusReason *string                     "json:\"dnsVerificationStatusReason,omitempty\" graphql:\"dnsVerificationStatusReason\""
	ExpectedAcmeChallengeValue  *string                     "json:\"expectedAcmeChallengeValue,omitempty\" graphql:\"expectedAcmeChallengeValue\""
	ID                          string                      "json:\"id\" graphql:\"id\""
}

func (t *GetCustomDomainByID_CustomDomain_DNSVerification) GetAcmeChallengePath() *string {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain_DNSVerification{}
	}
	return t.AcmeChallengePath
}
func (t *GetCustomDomainByID_CustomDomain_DNSVerification) GetAcmeChallengeStatus() *enums.SSLVerificationStatus {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain_DNSVerification{}
	}
	return &t.AcmeChallengeStatus
}
func (t *GetCustomDomainByID_CustomDomain_DNSVerification) GetAcmeChallengeStatusReason() *string {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain_DNSVerification{}
	}
	return t.AcmeChallengeStatusReason
}
func (t *GetCustomDomainByID_CustomDomain_DNSVerification) GetCloudflareHostnameID() string {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain_DNSVerification{}
	}
	return t.CloudflareHostnameID
}
func (t *GetCustomDomainByID_CustomDomain_DNSVerification) GetDNSTxtRecord() string {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain_DNSVerification{}
	}
	return t.DNSTxtRecord
}
func (t *GetCustomDomainByID_CustomDomain_DNSVerification) GetDNSTxtValue() string {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain_DNSVerification{}
	}
	return t.DNSTxtValue
}
func (t *GetCustomDomainByID_CustomDomain_DNSVerification) GetDNSVerificationStatus() *enums.DNSVerificationStatus {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain_DNSVerification{}
	}
	return &t.DNSVerificationStatus
}
func (t *GetCustomDomainByID_CustomDomain_DNSVerification) GetDNSVerificationStatusReason() *string {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain_DNSVerification{}
	}
	return t.DNSVerificationStatusReason
}
func (t *GetCustomDomainByID_CustomDomain_DNSVerification) GetExpectedAcmeChallengeValue() *string {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain_DNSVerification{}
	}
	return t.ExpectedAcmeChallengeValue
}
func (t *GetCustomDomainByID_CustomDomain_DNSVerification) GetID() string {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain_DNSVerification{}
	}
	return t.ID
}

type GetCustomDomainByID_CustomDomain_MappableDomain struct {
	ID     string "json:\"id\" graphql:\"id\""
	Name   string "json:\"name\" graphql:\"name\""
	ZoneID string "json:\"zoneID\" graphql:\"zoneID\""
}

func (t *GetCustomDomainByID_CustomDomain_MappableDomain) GetID() string {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain_MappableDomain{}
	}
	return t.ID
}
func (t *GetCustomDomainByID_CustomDomain_MappableDomain) GetName() string {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain_MappableDomain{}
	}
	return t.Name
}
func (t *GetCustomDomainByID_CustomDomain_MappableDomain) GetZoneID() string {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain_MappableDomain{}
	}
	return t.ZoneID
}

type GetCustomDomainByID_CustomDomain struct {
	CnameRecord       string                                            "json:\"cnameRecord\" graphql:\"cnameRecord\""
	CreatedAt         *time.Time                                        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string                                           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DNSVerification   *GetCustomDomainByID_CustomDomain_DNSVerification "json:\"dnsVerification,omitempty\" graphql:\"dnsVerification\""
	DNSVerificationID *string                                           "json:\"dnsVerificationID,omitempty\" graphql:\"dnsVerificationID\""
	ID                string                                            "json:\"id\" graphql:\"id\""
	MappableDomain    GetCustomDomainByID_CustomDomain_MappableDomain   "json:\"mappableDomain\" graphql:\"mappableDomain\""
	MappableDomainID  string                                            "json:\"mappableDomainID\" graphql:\"mappableDomainID\""
	OwnerID           *string                                           "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags              []string                                          "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time                                        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string                                           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetCustomDomainByID_CustomDomain) GetCnameRecord() string {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain{}
	}
	return t.CnameRecord
}
func (t *GetCustomDomainByID_CustomDomain) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain{}
	}
	return t.CreatedAt
}
func (t *GetCustomDomainByID_CustomDomain) GetCreatedBy() *string {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain{}
	}
	return t.CreatedBy
}
func (t *GetCustomDomainByID_CustomDomain) GetDNSVerification() *GetCustomDomainByID_CustomDomain_DNSVerification {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain{}
	}
	return t.DNSVerification
}
func (t *GetCustomDomainByID_CustomDomain) GetDNSVerificationID() *string {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain{}
	}
	return t.DNSVerificationID
}
func (t *GetCustomDomainByID_CustomDomain) GetID() string {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain{}
	}
	return t.ID
}
func (t *GetCustomDomainByID_CustomDomain) GetMappableDomain() *GetCustomDomainByID_CustomDomain_MappableDomain {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain{}
	}
	return &t.MappableDomain
}
func (t *GetCustomDomainByID_CustomDomain) GetMappableDomainID() string {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain{}
	}
	return t.MappableDomainID
}
func (t *GetCustomDomainByID_CustomDomain) GetOwnerID() *string {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain{}
	}
	return t.OwnerID
}
func (t *GetCustomDomainByID_CustomDomain) GetTags() []string {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain{}
	}
	return t.Tags
}
func (t *GetCustomDomainByID_CustomDomain) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain{}
	}
	return t.UpdatedAt
}
func (t *GetCustomDomainByID_CustomDomain) GetUpdatedBy() *string {
	if t == nil {
		t = &GetCustomDomainByID_CustomDomain{}
	}
	return t.UpdatedBy
}

type GetCustomDomains_CustomDomains_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetCustomDomains_CustomDomains_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetCustomDomains_CustomDomains_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetCustomDomains_CustomDomains_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetCustomDomains_CustomDomains_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetCustomDomains_CustomDomains_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetCustomDomains_CustomDomains_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetCustomDomains_CustomDomains_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetCustomDomains_CustomDomains_PageInfo{}
	}
	return t.StartCursor
}

type GetCustomDomains_CustomDomains_Edges_Node_DNSVerification struct {
	DNSTxtRecord          string                      "json:\"dnsTxtRecord\" graphql:\"dnsTxtRecord\""
	DNSTxtValue           string                      "json:\"dnsTxtValue\" graphql:\"dnsTxtValue\""
	DNSVerificationStatus enums.DNSVerificationStatus "json:\"dnsVerificationStatus\" graphql:\"dnsVerificationStatus\""
	ID                    string                      "json:\"id\" graphql:\"id\""
}

func (t *GetCustomDomains_CustomDomains_Edges_Node_DNSVerification) GetDNSTxtRecord() string {
	if t == nil {
		t = &GetCustomDomains_CustomDomains_Edges_Node_DNSVerification{}
	}
	return t.DNSTxtRecord
}
func (t *GetCustomDomains_CustomDomains_Edges_Node_DNSVerification) GetDNSTxtValue() string {
	if t == nil {
		t = &GetCustomDomains_CustomDomains_Edges_Node_DNSVerification{}
	}
	return t.DNSTxtValue
}
func (t *GetCustomDomains_CustomDomains_Edges_Node_DNSVerification) GetDNSVerificationStatus() *enums.DNSVerificationStatus {
	if t == nil {
		t = &GetCustomDomains_CustomDomains_Edges_Node_DNSVerification{}
	}
	return &t.DNSVerificationStatus
}
func (t *GetCustomDomains_CustomDomains_Edges_Node_DNSVerification) GetID() string {
	if t == nil {
		t = &GetCustomDomains_CustomDomains_Edges_Node_DNSVerification{}
	}
	return t.ID
}

type GetCustomDomains_CustomDomains_Edges_Node struct {
	CnameRecord       string                                                     "json:\"cnameRecord\" graphql:\"cnameRecord\""
	CreatedAt         *time.Time                                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string                                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DNSVerification   *GetCustomDomains_CustomDomains_Edges_Node_DNSVerification "json:\"dnsVerification,omitempty\" graphql:\"dnsVerification\""
	DNSVerificationID *string                                                    "json:\"dnsVerificationID,omitempty\" graphql:\"dnsVerificationID\""
	ID                string                                                     "json:\"id\" graphql:\"id\""
	MappableDomainID  string                                                     "json:\"mappableDomainID\" graphql:\"mappableDomainID\""
	OwnerID           *string                                                    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags              []string                                                   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time                                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string                                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetCustomDomains_CustomDomains_Edges_Node) GetCnameRecord() string {
	if t == nil {
		t = &GetCustomDomains_CustomDomains_Edges_Node{}
	}
	return t.CnameRecord
}
func (t *GetCustomDomains_CustomDomains_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetCustomDomains_CustomDomains_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetCustomDomains_CustomDomains_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetCustomDomains_CustomDomains_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetCustomDomains_CustomDomains_Edges_Node) GetDNSVerification() *GetCustomDomains_CustomDomains_Edges_Node_DNSVerification {
	if t == nil {
		t = &GetCustomDomains_CustomDomains_Edges_Node{}
	}
	return t.DNSVerification
}
func (t *GetCustomDomains_CustomDomains_Edges_Node) GetDNSVerificationID() *string {
	if t == nil {
		t = &GetCustomDomains_CustomDomains_Edges_Node{}
	}
	return t.DNSVerificationID
}
func (t *GetCustomDomains_CustomDomains_Edges_Node) GetID() string {
	if t == nil {
		t = &GetCustomDomains_CustomDomains_Edges_Node{}
	}
	return t.ID
}
func (t *GetCustomDomains_CustomDomains_Edges_Node) GetMappableDomainID() string {
	if t == nil {
		t = &GetCustomDomains_CustomDomains_Edges_Node{}
	}
	return t.MappableDomainID
}
func (t *GetCustomDomains_CustomDomains_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetCustomDomains_CustomDomains_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetCustomDomains_CustomDomains_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetCustomDomains_CustomDomains_Edges_Node{}
	}
	return t.Tags
}
func (t *GetCustomDomains_CustomDomains_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetCustomDomains_CustomDomains_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetCustomDomains_CustomDomains_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetCustomDomains_CustomDomains_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetCustomDomains_CustomDomains_Edges struct {
	Node *GetCustomDomains_CustomDomains_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetCustomDomains_CustomDomains_Edges) GetNode() *GetCustomDomains_CustomDomains_Edges_Node {
	if t == nil {
		t = &GetCustomDomains_CustomDomains_Edges{}
	}
	return t.Node
}

type GetCustomDomains_CustomDomains struct {
	Edges      []*GetCustomDomains_CustomDomains_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetCustomDomains_CustomDomains_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetCustomDomains_CustomDomains) GetEdges() []*GetCustomDomains_CustomDomains_Edges {
	if t == nil {
		t = &GetCustomDomains_CustomDomains{}
	}
	return t.Edges
}
func (t *GetCustomDomains_CustomDomains) GetPageInfo() *GetCustomDomains_CustomDomains_PageInfo {
	if t == nil {
		t = &GetCustomDomains_CustomDomains{}
	}
	return &t.PageInfo
}
func (t *GetCustomDomains_CustomDomains) GetTotalCount() int64 {
	if t == nil {
		t = &GetCustomDomains_CustomDomains{}
	}
	return t.TotalCount
}

type UpdateCustomDomain_UpdateCustomDomain_CustomDomain_DNSVerification struct {
	DNSTxtRecord          string                      "json:\"dnsTxtRecord\" graphql:\"dnsTxtRecord\""
	DNSTxtValue           string                      "json:\"dnsTxtValue\" graphql:\"dnsTxtValue\""
	DNSVerificationStatus enums.DNSVerificationStatus "json:\"dnsVerificationStatus\" graphql:\"dnsVerificationStatus\""
	ID                    string                      "json:\"id\" graphql:\"id\""
}

func (t *UpdateCustomDomain_UpdateCustomDomain_CustomDomain_DNSVerification) GetDNSTxtRecord() string {
	if t == nil {
		t = &UpdateCustomDomain_UpdateCustomDomain_CustomDomain_DNSVerification{}
	}
	return t.DNSTxtRecord
}
func (t *UpdateCustomDomain_UpdateCustomDomain_CustomDomain_DNSVerification) GetDNSTxtValue() string {
	if t == nil {
		t = &UpdateCustomDomain_UpdateCustomDomain_CustomDomain_DNSVerification{}
	}
	return t.DNSTxtValue
}
func (t *UpdateCustomDomain_UpdateCustomDomain_CustomDomain_DNSVerification) GetDNSVerificationStatus() *enums.DNSVerificationStatus {
	if t == nil {
		t = &UpdateCustomDomain_UpdateCustomDomain_CustomDomain_DNSVerification{}
	}
	return &t.DNSVerificationStatus
}
func (t *UpdateCustomDomain_UpdateCustomDomain_CustomDomain_DNSVerification) GetID() string {
	if t == nil {
		t = &UpdateCustomDomain_UpdateCustomDomain_CustomDomain_DNSVerification{}
	}
	return t.ID
}

type UpdateCustomDomain_UpdateCustomDomain_CustomDomain struct {
	CnameRecord       string                                                              "json:\"cnameRecord\" graphql:\"cnameRecord\""
	CreatedAt         *time.Time                                                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string                                                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DNSVerification   *UpdateCustomDomain_UpdateCustomDomain_CustomDomain_DNSVerification "json:\"dnsVerification,omitempty\" graphql:\"dnsVerification\""
	DNSVerificationID *string                                                             "json:\"dnsVerificationID,omitempty\" graphql:\"dnsVerificationID\""
	ID                string                                                              "json:\"id\" graphql:\"id\""
	MappableDomainID  string                                                              "json:\"mappableDomainID\" graphql:\"mappableDomainID\""
	OwnerID           *string                                                             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags              []string                                                            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time                                                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string                                                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateCustomDomain_UpdateCustomDomain_CustomDomain) GetCnameRecord() string {
	if t == nil {
		t = &UpdateCustomDomain_UpdateCustomDomain_CustomDomain{}
	}
	return t.CnameRecord
}
func (t *UpdateCustomDomain_UpdateCustomDomain_CustomDomain) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateCustomDomain_UpdateCustomDomain_CustomDomain{}
	}
	return t.CreatedAt
}
func (t *UpdateCustomDomain_UpdateCustomDomain_CustomDomain) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateCustomDomain_UpdateCustomDomain_CustomDomain{}
	}
	return t.CreatedBy
}
func (t *UpdateCustomDomain_UpdateCustomDomain_CustomDomain) GetDNSVerification() *UpdateCustomDomain_UpdateCustomDomain_CustomDomain_DNSVerification {
	if t == nil {
		t = &UpdateCustomDomain_UpdateCustomDomain_CustomDomain{}
	}
	return t.DNSVerification
}
func (t *UpdateCustomDomain_UpdateCustomDomain_CustomDomain) GetDNSVerificationID() *string {
	if t == nil {
		t = &UpdateCustomDomain_UpdateCustomDomain_CustomDomain{}
	}
	return t.DNSVerificationID
}
func (t *UpdateCustomDomain_UpdateCustomDomain_CustomDomain) GetID() string {
	if t == nil {
		t = &UpdateCustomDomain_UpdateCustomDomain_CustomDomain{}
	}
	return t.ID
}
func (t *UpdateCustomDomain_UpdateCustomDomain_CustomDomain) GetMappableDomainID() string {
	if t == nil {
		t = &UpdateCustomDomain_UpdateCustomDomain_CustomDomain{}
	}
	return t.MappableDomainID
}
func (t *UpdateCustomDomain_UpdateCustomDomain_CustomDomain) GetOwnerID() *string {
	if t == nil {
		t = &UpdateCustomDomain_UpdateCustomDomain_CustomDomain{}
	}
	return t.OwnerID
}
func (t *UpdateCustomDomain_UpdateCustomDomain_CustomDomain) GetTags() []string {
	if t == nil {
		t = &UpdateCustomDomain_UpdateCustomDomain_CustomDomain{}
	}
	return t.Tags
}
func (t *UpdateCustomDomain_UpdateCustomDomain_CustomDomain) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateCustomDomain_UpdateCustomDomain_CustomDomain{}
	}
	return t.UpdatedAt
}
func (t *UpdateCustomDomain_UpdateCustomDomain_CustomDomain) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateCustomDomain_UpdateCustomDomain_CustomDomain{}
	}
	return t.UpdatedBy
}

type UpdateCustomDomain_UpdateCustomDomain struct {
	CustomDomain UpdateCustomDomain_UpdateCustomDomain_CustomDomain "json:\"customDomain\" graphql:\"customDomain\""
}

func (t *UpdateCustomDomain_UpdateCustomDomain) GetCustomDomain() *UpdateCustomDomain_UpdateCustomDomain_CustomDomain {
	if t == nil {
		t = &UpdateCustomDomain_UpdateCustomDomain{}
	}
	return &t.CustomDomain
}

type GetAllCustomDomainHistories_CustomDomainHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllCustomDomainHistories_CustomDomainHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllCustomDomainHistories_CustomDomainHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllCustomDomainHistories_CustomDomainHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllCustomDomainHistories_CustomDomainHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllCustomDomainHistories_CustomDomainHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllCustomDomainHistories_CustomDomainHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllCustomDomainHistories_CustomDomainHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllCustomDomainHistories_CustomDomainHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node struct {
	CnameRecord       string         "json:\"cnameRecord\" graphql:\"cnameRecord\""
	CreatedAt         *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DNSVerificationID *string        "json:\"dnsVerificationID,omitempty\" graphql:\"dnsVerificationID\""
	HistoryTime       time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID                string         "json:\"id\" graphql:\"id\""
	MappableDomainID  string         "json:\"mappableDomainID\" graphql:\"mappableDomainID\""
	Operation         history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID           *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref               *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags              []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node) GetCnameRecord() string {
	if t == nil {
		t = &GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return t.CnameRecord
}
func (t *GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node) GetDNSVerificationID() *string {
	if t == nil {
		t = &GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return t.DNSVerificationID
}
func (t *GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node) GetMappableDomainID() string {
	if t == nil {
		t = &GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return t.MappableDomainID
}
func (t *GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllCustomDomainHistories_CustomDomainHistories_Edges struct {
	Node *GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllCustomDomainHistories_CustomDomainHistories_Edges) GetNode() *GetAllCustomDomainHistories_CustomDomainHistories_Edges_Node {
	if t == nil {
		t = &GetAllCustomDomainHistories_CustomDomainHistories_Edges{}
	}
	return t.Node
}

type GetAllCustomDomainHistories_CustomDomainHistories struct {
	Edges      []*GetAllCustomDomainHistories_CustomDomainHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllCustomDomainHistories_CustomDomainHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllCustomDomainHistories_CustomDomainHistories) GetEdges() []*GetAllCustomDomainHistories_CustomDomainHistories_Edges {
	if t == nil {
		t = &GetAllCustomDomainHistories_CustomDomainHistories{}
	}
	return t.Edges
}
func (t *GetAllCustomDomainHistories_CustomDomainHistories) GetPageInfo() *GetAllCustomDomainHistories_CustomDomainHistories_PageInfo {
	if t == nil {
		t = &GetAllCustomDomainHistories_CustomDomainHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllCustomDomainHistories_CustomDomainHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllCustomDomainHistories_CustomDomainHistories{}
	}
	return t.TotalCount
}

type GetCustomDomainHistories_CustomDomainHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetCustomDomainHistories_CustomDomainHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetCustomDomainHistories_CustomDomainHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetCustomDomainHistories_CustomDomainHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetCustomDomainHistories_CustomDomainHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetCustomDomainHistories_CustomDomainHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetCustomDomainHistories_CustomDomainHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetCustomDomainHistories_CustomDomainHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetCustomDomainHistories_CustomDomainHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetCustomDomainHistories_CustomDomainHistories_Edges_Node struct {
	CnameRecord       string         "json:\"cnameRecord\" graphql:\"cnameRecord\""
	CreatedAt         *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DNSVerificationID *string        "json:\"dnsVerificationID,omitempty\" graphql:\"dnsVerificationID\""
	HistoryTime       time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID                string         "json:\"id\" graphql:\"id\""
	MappableDomainID  string         "json:\"mappableDomainID\" graphql:\"mappableDomainID\""
	Operation         history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID           *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref               *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags              []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetCustomDomainHistories_CustomDomainHistories_Edges_Node) GetCnameRecord() string {
	if t == nil {
		t = &GetCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return t.CnameRecord
}
func (t *GetCustomDomainHistories_CustomDomainHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetCustomDomainHistories_CustomDomainHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetCustomDomainHistories_CustomDomainHistories_Edges_Node) GetDNSVerificationID() *string {
	if t == nil {
		t = &GetCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return t.DNSVerificationID
}
func (t *GetCustomDomainHistories_CustomDomainHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetCustomDomainHistories_CustomDomainHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetCustomDomainHistories_CustomDomainHistories_Edges_Node) GetMappableDomainID() string {
	if t == nil {
		t = &GetCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return t.MappableDomainID
}
func (t *GetCustomDomainHistories_CustomDomainHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetCustomDomainHistories_CustomDomainHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetCustomDomainHistories_CustomDomainHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetCustomDomainHistories_CustomDomainHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetCustomDomainHistories_CustomDomainHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetCustomDomainHistories_CustomDomainHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetCustomDomainHistories_CustomDomainHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetCustomDomainHistories_CustomDomainHistories_Edges struct {
	Node *GetCustomDomainHistories_CustomDomainHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetCustomDomainHistories_CustomDomainHistories_Edges) GetNode() *GetCustomDomainHistories_CustomDomainHistories_Edges_Node {
	if t == nil {
		t = &GetCustomDomainHistories_CustomDomainHistories_Edges{}
	}
	return t.Node
}

type GetCustomDomainHistories_CustomDomainHistories struct {
	Edges      []*GetCustomDomainHistories_CustomDomainHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetCustomDomainHistories_CustomDomainHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetCustomDomainHistories_CustomDomainHistories) GetEdges() []*GetCustomDomainHistories_CustomDomainHistories_Edges {
	if t == nil {
		t = &GetCustomDomainHistories_CustomDomainHistories{}
	}
	return t.Edges
}
func (t *GetCustomDomainHistories_CustomDomainHistories) GetPageInfo() *GetCustomDomainHistories_CustomDomainHistories_PageInfo {
	if t == nil {
		t = &GetCustomDomainHistories_CustomDomainHistories{}
	}
	return &t.PageInfo
}
func (t *GetCustomDomainHistories_CustomDomainHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetCustomDomainHistories_CustomDomainHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications struct {
	AcmeChallengePath           *string                     "json:\"acmeChallengePath,omitempty\" graphql:\"acmeChallengePath\""
	AcmeChallengeStatus         enums.SSLVerificationStatus "json:\"acmeChallengeStatus\" graphql:\"acmeChallengeStatus\""
	AcmeChallengeStatusReason   *string                     "json:\"acmeChallengeStatusReason,omitempty\" graphql:\"acmeChallengeStatusReason\""
	CloudflareHostnameID        string                      "json:\"cloudflareHostnameID\" graphql:\"cloudflareHostnameID\""
	CreatedAt                   *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                   *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DNSTxtRecord                string                      "json:\"dnsTxtRecord\" graphql:\"dnsTxtRecord\""
	DNSTxtValue                 string                      "json:\"dnsTxtValue\" graphql:\"dnsTxtValue\""
	DNSVerificationStatus       enums.DNSVerificationStatus "json:\"dnsVerificationStatus\" graphql:\"dnsVerificationStatus\""
	DNSVerificationStatusReason *string                     "json:\"dnsVerificationStatusReason,omitempty\" graphql:\"dnsVerificationStatusReason\""
	ExpectedAcmeChallengeValue  *string                     "json:\"expectedAcmeChallengeValue,omitempty\" graphql:\"expectedAcmeChallengeValue\""
	ID                          string                      "json:\"id\" graphql:\"id\""
	OwnerID                     *string                     "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags                        []string                    "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                   *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                   *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications) GetAcmeChallengePath() *string {
	if t == nil {
		t = &CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications{}
	}
	return t.AcmeChallengePath
}
func (t *CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications) GetAcmeChallengeStatus() *enums.SSLVerificationStatus {
	if t == nil {
		t = &CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications{}
	}
	return &t.AcmeChallengeStatus
}
func (t *CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications) GetAcmeChallengeStatusReason() *string {
	if t == nil {
		t = &CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications{}
	}
	return t.AcmeChallengeStatusReason
}
func (t *CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications) GetCloudflareHostnameID() string {
	if t == nil {
		t = &CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications{}
	}
	return t.CloudflareHostnameID
}
func (t *CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications) GetDNSTxtRecord() string {
	if t == nil {
		t = &CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications{}
	}
	return t.DNSTxtRecord
}
func (t *CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications) GetDNSTxtValue() string {
	if t == nil {
		t = &CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications{}
	}
	return t.DNSTxtValue
}
func (t *CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications) GetDNSVerificationStatus() *enums.DNSVerificationStatus {
	if t == nil {
		t = &CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications{}
	}
	return &t.DNSVerificationStatus
}
func (t *CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications) GetDNSVerificationStatusReason() *string {
	if t == nil {
		t = &CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications{}
	}
	return t.DNSVerificationStatusReason
}
func (t *CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications) GetExpectedAcmeChallengeValue() *string {
	if t == nil {
		t = &CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications{}
	}
	return t.ExpectedAcmeChallengeValue
}
func (t *CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications) GetID() string {
	if t == nil {
		t = &CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications{}
	}
	return t.ID
}
func (t *CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications{}
	}
	return t.Tags
}
func (t *CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification struct {
	DNSVerifications []*CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications "json:\"dnsVerifications,omitempty\" graphql:\"dnsVerifications\""
}

func (t *CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification) GetDNSVerifications() []*CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification_DNSVerifications {
	if t == nil {
		t = &CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification{}
	}
	return t.DNSVerifications
}

type CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications struct {
	AcmeChallengePath           *string                     "json:\"acmeChallengePath,omitempty\" graphql:\"acmeChallengePath\""
	AcmeChallengeStatus         enums.SSLVerificationStatus "json:\"acmeChallengeStatus\" graphql:\"acmeChallengeStatus\""
	AcmeChallengeStatusReason   *string                     "json:\"acmeChallengeStatusReason,omitempty\" graphql:\"acmeChallengeStatusReason\""
	CloudflareHostnameID        string                      "json:\"cloudflareHostnameID\" graphql:\"cloudflareHostnameID\""
	CreatedAt                   *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                   *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DNSTxtRecord                string                      "json:\"dnsTxtRecord\" graphql:\"dnsTxtRecord\""
	DNSTxtValue                 string                      "json:\"dnsTxtValue\" graphql:\"dnsTxtValue\""
	DNSVerificationStatus       enums.DNSVerificationStatus "json:\"dnsVerificationStatus\" graphql:\"dnsVerificationStatus\""
	DNSVerificationStatusReason *string                     "json:\"dnsVerificationStatusReason,omitempty\" graphql:\"dnsVerificationStatusReason\""
	ExpectedAcmeChallengeValue  *string                     "json:\"expectedAcmeChallengeValue,omitempty\" graphql:\"expectedAcmeChallengeValue\""
	ID                          string                      "json:\"id\" graphql:\"id\""
	OwnerID                     *string                     "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags                        []string                    "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                   *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                   *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications) GetAcmeChallengePath() *string {
	if t == nil {
		t = &CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications{}
	}
	return t.AcmeChallengePath
}
func (t *CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications) GetAcmeChallengeStatus() *enums.SSLVerificationStatus {
	if t == nil {
		t = &CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications{}
	}
	return &t.AcmeChallengeStatus
}
func (t *CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications) GetAcmeChallengeStatusReason() *string {
	if t == nil {
		t = &CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications{}
	}
	return t.AcmeChallengeStatusReason
}
func (t *CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications) GetCloudflareHostnameID() string {
	if t == nil {
		t = &CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications{}
	}
	return t.CloudflareHostnameID
}
func (t *CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications{}
	}
	return t.CreatedAt
}
func (t *CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications{}
	}
	return t.CreatedBy
}
func (t *CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications) GetDNSTxtRecord() string {
	if t == nil {
		t = &CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications{}
	}
	return t.DNSTxtRecord
}
func (t *CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications) GetDNSTxtValue() string {
	if t == nil {
		t = &CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications{}
	}
	return t.DNSTxtValue
}
func (t *CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications) GetDNSVerificationStatus() *enums.DNSVerificationStatus {
	if t == nil {
		t = &CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications{}
	}
	return &t.DNSVerificationStatus
}
func (t *CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications) GetDNSVerificationStatusReason() *string {
	if t == nil {
		t = &CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications{}
	}
	return t.DNSVerificationStatusReason
}
func (t *CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications) GetExpectedAcmeChallengeValue() *string {
	if t == nil {
		t = &CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications{}
	}
	return t.ExpectedAcmeChallengeValue
}
func (t *CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications) GetID() string {
	if t == nil {
		t = &CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications{}
	}
	return t.ID
}
func (t *CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications{}
	}
	return t.OwnerID
}
func (t *CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications) GetTags() []string {
	if t == nil {
		t = &CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications{}
	}
	return t.Tags
}
func (t *CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications{}
	}
	return t.UpdatedBy
}

type CreateBulkDNSVerification_CreateBulkDNSVerification struct {
	DNSVerifications []*CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications "json:\"dnsVerifications,omitempty\" graphql:\"dnsVerifications\""
}

func (t *CreateBulkDNSVerification_CreateBulkDNSVerification) GetDNSVerifications() []*CreateBulkDNSVerification_CreateBulkDNSVerification_DNSVerifications {
	if t == nil {
		t = &CreateBulkDNSVerification_CreateBulkDNSVerification{}
	}
	return t.DNSVerifications
}

type CreateDNSVerification_CreateDNSVerification_DNSVerification struct {
	AcmeChallengePath           *string                     "json:\"acmeChallengePath,omitempty\" graphql:\"acmeChallengePath\""
	AcmeChallengeStatus         enums.SSLVerificationStatus "json:\"acmeChallengeStatus\" graphql:\"acmeChallengeStatus\""
	AcmeChallengeStatusReason   *string                     "json:\"acmeChallengeStatusReason,omitempty\" graphql:\"acmeChallengeStatusReason\""
	CloudflareHostnameID        string                      "json:\"cloudflareHostnameID\" graphql:\"cloudflareHostnameID\""
	CreatedAt                   *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                   *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DNSTxtRecord                string                      "json:\"dnsTxtRecord\" graphql:\"dnsTxtRecord\""
	DNSTxtValue                 string                      "json:\"dnsTxtValue\" graphql:\"dnsTxtValue\""
	DNSVerificationStatus       enums.DNSVerificationStatus "json:\"dnsVerificationStatus\" graphql:\"dnsVerificationStatus\""
	DNSVerificationStatusReason *string                     "json:\"dnsVerificationStatusReason,omitempty\" graphql:\"dnsVerificationStatusReason\""
	ExpectedAcmeChallengeValue  *string                     "json:\"expectedAcmeChallengeValue,omitempty\" graphql:\"expectedAcmeChallengeValue\""
	ID                          string                      "json:\"id\" graphql:\"id\""
	OwnerID                     *string                     "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags                        []string                    "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                   *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                   *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateDNSVerification_CreateDNSVerification_DNSVerification) GetAcmeChallengePath() *string {
	if t == nil {
		t = &CreateDNSVerification_CreateDNSVerification_DNSVerification{}
	}
	return t.AcmeChallengePath
}
func (t *CreateDNSVerification_CreateDNSVerification_DNSVerification) GetAcmeChallengeStatus() *enums.SSLVerificationStatus {
	if t == nil {
		t = &CreateDNSVerification_CreateDNSVerification_DNSVerification{}
	}
	return &t.AcmeChallengeStatus
}
func (t *CreateDNSVerification_CreateDNSVerification_DNSVerification) GetAcmeChallengeStatusReason() *string {
	if t == nil {
		t = &CreateDNSVerification_CreateDNSVerification_DNSVerification{}
	}
	return t.AcmeChallengeStatusReason
}
func (t *CreateDNSVerification_CreateDNSVerification_DNSVerification) GetCloudflareHostnameID() string {
	if t == nil {
		t = &CreateDNSVerification_CreateDNSVerification_DNSVerification{}
	}
	return t.CloudflareHostnameID
}
func (t *CreateDNSVerification_CreateDNSVerification_DNSVerification) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateDNSVerification_CreateDNSVerification_DNSVerification{}
	}
	return t.CreatedAt
}
func (t *CreateDNSVerification_CreateDNSVerification_DNSVerification) GetCreatedBy() *string {
	if t == nil {
		t = &CreateDNSVerification_CreateDNSVerification_DNSVerification{}
	}
	return t.CreatedBy
}
func (t *CreateDNSVerification_CreateDNSVerification_DNSVerification) GetDNSTxtRecord() string {
	if t == nil {
		t = &CreateDNSVerification_CreateDNSVerification_DNSVerification{}
	}
	return t.DNSTxtRecord
}
func (t *CreateDNSVerification_CreateDNSVerification_DNSVerification) GetDNSTxtValue() string {
	if t == nil {
		t = &CreateDNSVerification_CreateDNSVerification_DNSVerification{}
	}
	return t.DNSTxtValue
}
func (t *CreateDNSVerification_CreateDNSVerification_DNSVerification) GetDNSVerificationStatus() *enums.DNSVerificationStatus {
	if t == nil {
		t = &CreateDNSVerification_CreateDNSVerification_DNSVerification{}
	}
	return &t.DNSVerificationStatus
}
func (t *CreateDNSVerification_CreateDNSVerification_DNSVerification) GetDNSVerificationStatusReason() *string {
	if t == nil {
		t = &CreateDNSVerification_CreateDNSVerification_DNSVerification{}
	}
	return t.DNSVerificationStatusReason
}
func (t *CreateDNSVerification_CreateDNSVerification_DNSVerification) GetExpectedAcmeChallengeValue() *string {
	if t == nil {
		t = &CreateDNSVerification_CreateDNSVerification_DNSVerification{}
	}
	return t.ExpectedAcmeChallengeValue
}
func (t *CreateDNSVerification_CreateDNSVerification_DNSVerification) GetID() string {
	if t == nil {
		t = &CreateDNSVerification_CreateDNSVerification_DNSVerification{}
	}
	return t.ID
}
func (t *CreateDNSVerification_CreateDNSVerification_DNSVerification) GetOwnerID() *string {
	if t == nil {
		t = &CreateDNSVerification_CreateDNSVerification_DNSVerification{}
	}
	return t.OwnerID
}
func (t *CreateDNSVerification_CreateDNSVerification_DNSVerification) GetTags() []string {
	if t == nil {
		t = &CreateDNSVerification_CreateDNSVerification_DNSVerification{}
	}
	return t.Tags
}
func (t *CreateDNSVerification_CreateDNSVerification_DNSVerification) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateDNSVerification_CreateDNSVerification_DNSVerification{}
	}
	return t.UpdatedAt
}
func (t *CreateDNSVerification_CreateDNSVerification_DNSVerification) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateDNSVerification_CreateDNSVerification_DNSVerification{}
	}
	return t.UpdatedBy
}

type CreateDNSVerification_CreateDNSVerification struct {
	DNSVerification CreateDNSVerification_CreateDNSVerification_DNSVerification "json:\"dnsVerification\" graphql:\"dnsVerification\""
}

func (t *CreateDNSVerification_CreateDNSVerification) GetDNSVerification() *CreateDNSVerification_CreateDNSVerification_DNSVerification {
	if t == nil {
		t = &CreateDNSVerification_CreateDNSVerification{}
	}
	return &t.DNSVerification
}

type DeleteDNSVerification_DeleteDNSVerification struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteDNSVerification_DeleteDNSVerification) GetDeletedID() string {
	if t == nil {
		t = &DeleteDNSVerification_DeleteDNSVerification{}
	}
	return t.DeletedID
}

type GetAllDNSVerifications_DNSVerifications_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllDNSVerifications_DNSVerifications_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllDNSVerifications_DNSVerifications_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllDNSVerifications_DNSVerifications_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllDNSVerifications_DNSVerifications_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications_PageInfo{}
	}
	return t.StartCursor
}

type GetAllDNSVerifications_DNSVerifications_Edges_Node struct {
	AcmeChallengePath           *string                     "json:\"acmeChallengePath,omitempty\" graphql:\"acmeChallengePath\""
	AcmeChallengeStatus         enums.SSLVerificationStatus "json:\"acmeChallengeStatus\" graphql:\"acmeChallengeStatus\""
	AcmeChallengeStatusReason   *string                     "json:\"acmeChallengeStatusReason,omitempty\" graphql:\"acmeChallengeStatusReason\""
	CloudflareHostnameID        string                      "json:\"cloudflareHostnameID\" graphql:\"cloudflareHostnameID\""
	CreatedAt                   *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                   *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DNSTxtRecord                string                      "json:\"dnsTxtRecord\" graphql:\"dnsTxtRecord\""
	DNSTxtValue                 string                      "json:\"dnsTxtValue\" graphql:\"dnsTxtValue\""
	DNSVerificationStatus       enums.DNSVerificationStatus "json:\"dnsVerificationStatus\" graphql:\"dnsVerificationStatus\""
	DNSVerificationStatusReason *string                     "json:\"dnsVerificationStatusReason,omitempty\" graphql:\"dnsVerificationStatusReason\""
	ExpectedAcmeChallengeValue  *string                     "json:\"expectedAcmeChallengeValue,omitempty\" graphql:\"expectedAcmeChallengeValue\""
	ID                          string                      "json:\"id\" graphql:\"id\""
	OwnerID                     *string                     "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags                        []string                    "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                   *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                   *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllDNSVerifications_DNSVerifications_Edges_Node) GetAcmeChallengePath() *string {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.AcmeChallengePath
}
func (t *GetAllDNSVerifications_DNSVerifications_Edges_Node) GetAcmeChallengeStatus() *enums.SSLVerificationStatus {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return &t.AcmeChallengeStatus
}
func (t *GetAllDNSVerifications_DNSVerifications_Edges_Node) GetAcmeChallengeStatusReason() *string {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.AcmeChallengeStatusReason
}
func (t *GetAllDNSVerifications_DNSVerifications_Edges_Node) GetCloudflareHostnameID() string {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.CloudflareHostnameID
}
func (t *GetAllDNSVerifications_DNSVerifications_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllDNSVerifications_DNSVerifications_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllDNSVerifications_DNSVerifications_Edges_Node) GetDNSTxtRecord() string {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.DNSTxtRecord
}
func (t *GetAllDNSVerifications_DNSVerifications_Edges_Node) GetDNSTxtValue() string {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.DNSTxtValue
}
func (t *GetAllDNSVerifications_DNSVerifications_Edges_Node) GetDNSVerificationStatus() *enums.DNSVerificationStatus {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return &t.DNSVerificationStatus
}
func (t *GetAllDNSVerifications_DNSVerifications_Edges_Node) GetDNSVerificationStatusReason() *string {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.DNSVerificationStatusReason
}
func (t *GetAllDNSVerifications_DNSVerifications_Edges_Node) GetExpectedAcmeChallengeValue() *string {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.ExpectedAcmeChallengeValue
}
func (t *GetAllDNSVerifications_DNSVerifications_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllDNSVerifications_DNSVerifications_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllDNSVerifications_DNSVerifications_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllDNSVerifications_DNSVerifications_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllDNSVerifications_DNSVerifications_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllDNSVerifications_DNSVerifications_Edges struct {
	Node *GetAllDNSVerifications_DNSVerifications_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllDNSVerifications_DNSVerifications_Edges) GetNode() *GetAllDNSVerifications_DNSVerifications_Edges_Node {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications_Edges{}
	}
	return t.Node
}

type GetAllDNSVerifications_DNSVerifications struct {
	Edges      []*GetAllDNSVerifications_DNSVerifications_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllDNSVerifications_DNSVerifications_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                            "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllDNSVerifications_DNSVerifications) GetEdges() []*GetAllDNSVerifications_DNSVerifications_Edges {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications{}
	}
	return t.Edges
}
func (t *GetAllDNSVerifications_DNSVerifications) GetPageInfo() *GetAllDNSVerifications_DNSVerifications_PageInfo {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications{}
	}
	return &t.PageInfo
}
func (t *GetAllDNSVerifications_DNSVerifications) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllDNSVerifications_DNSVerifications{}
	}
	return t.TotalCount
}

type GetDNSVerificationByID_DNSVerification struct {
	AcmeChallengePath           *string                     "json:\"acmeChallengePath,omitempty\" graphql:\"acmeChallengePath\""
	AcmeChallengeStatus         enums.SSLVerificationStatus "json:\"acmeChallengeStatus\" graphql:\"acmeChallengeStatus\""
	AcmeChallengeStatusReason   *string                     "json:\"acmeChallengeStatusReason,omitempty\" graphql:\"acmeChallengeStatusReason\""
	CloudflareHostnameID        string                      "json:\"cloudflareHostnameID\" graphql:\"cloudflareHostnameID\""
	CreatedAt                   *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                   *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DNSTxtRecord                string                      "json:\"dnsTxtRecord\" graphql:\"dnsTxtRecord\""
	DNSTxtValue                 string                      "json:\"dnsTxtValue\" graphql:\"dnsTxtValue\""
	DNSVerificationStatus       enums.DNSVerificationStatus "json:\"dnsVerificationStatus\" graphql:\"dnsVerificationStatus\""
	DNSVerificationStatusReason *string                     "json:\"dnsVerificationStatusReason,omitempty\" graphql:\"dnsVerificationStatusReason\""
	ExpectedAcmeChallengeValue  *string                     "json:\"expectedAcmeChallengeValue,omitempty\" graphql:\"expectedAcmeChallengeValue\""
	ID                          string                      "json:\"id\" graphql:\"id\""
	OwnerID                     *string                     "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags                        []string                    "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                   *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                   *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetDNSVerificationByID_DNSVerification) GetAcmeChallengePath() *string {
	if t == nil {
		t = &GetDNSVerificationByID_DNSVerification{}
	}
	return t.AcmeChallengePath
}
func (t *GetDNSVerificationByID_DNSVerification) GetAcmeChallengeStatus() *enums.SSLVerificationStatus {
	if t == nil {
		t = &GetDNSVerificationByID_DNSVerification{}
	}
	return &t.AcmeChallengeStatus
}
func (t *GetDNSVerificationByID_DNSVerification) GetAcmeChallengeStatusReason() *string {
	if t == nil {
		t = &GetDNSVerificationByID_DNSVerification{}
	}
	return t.AcmeChallengeStatusReason
}
func (t *GetDNSVerificationByID_DNSVerification) GetCloudflareHostnameID() string {
	if t == nil {
		t = &GetDNSVerificationByID_DNSVerification{}
	}
	return t.CloudflareHostnameID
}
func (t *GetDNSVerificationByID_DNSVerification) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetDNSVerificationByID_DNSVerification{}
	}
	return t.CreatedAt
}
func (t *GetDNSVerificationByID_DNSVerification) GetCreatedBy() *string {
	if t == nil {
		t = &GetDNSVerificationByID_DNSVerification{}
	}
	return t.CreatedBy
}
func (t *GetDNSVerificationByID_DNSVerification) GetDNSTxtRecord() string {
	if t == nil {
		t = &GetDNSVerificationByID_DNSVerification{}
	}
	return t.DNSTxtRecord
}
func (t *GetDNSVerificationByID_DNSVerification) GetDNSTxtValue() string {
	if t == nil {
		t = &GetDNSVerificationByID_DNSVerification{}
	}
	return t.DNSTxtValue
}
func (t *GetDNSVerificationByID_DNSVerification) GetDNSVerificationStatus() *enums.DNSVerificationStatus {
	if t == nil {
		t = &GetDNSVerificationByID_DNSVerification{}
	}
	return &t.DNSVerificationStatus
}
func (t *GetDNSVerificationByID_DNSVerification) GetDNSVerificationStatusReason() *string {
	if t == nil {
		t = &GetDNSVerificationByID_DNSVerification{}
	}
	return t.DNSVerificationStatusReason
}
func (t *GetDNSVerificationByID_DNSVerification) GetExpectedAcmeChallengeValue() *string {
	if t == nil {
		t = &GetDNSVerificationByID_DNSVerification{}
	}
	return t.ExpectedAcmeChallengeValue
}
func (t *GetDNSVerificationByID_DNSVerification) GetID() string {
	if t == nil {
		t = &GetDNSVerificationByID_DNSVerification{}
	}
	return t.ID
}
func (t *GetDNSVerificationByID_DNSVerification) GetOwnerID() *string {
	if t == nil {
		t = &GetDNSVerificationByID_DNSVerification{}
	}
	return t.OwnerID
}
func (t *GetDNSVerificationByID_DNSVerification) GetTags() []string {
	if t == nil {
		t = &GetDNSVerificationByID_DNSVerification{}
	}
	return t.Tags
}
func (t *GetDNSVerificationByID_DNSVerification) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetDNSVerificationByID_DNSVerification{}
	}
	return t.UpdatedAt
}
func (t *GetDNSVerificationByID_DNSVerification) GetUpdatedBy() *string {
	if t == nil {
		t = &GetDNSVerificationByID_DNSVerification{}
	}
	return t.UpdatedBy
}

type GetDNSVerifications_DNSVerifications_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetDNSVerifications_DNSVerifications_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetDNSVerifications_DNSVerifications_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetDNSVerifications_DNSVerifications_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetDNSVerifications_DNSVerifications_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications_PageInfo{}
	}
	return t.StartCursor
}

type GetDNSVerifications_DNSVerifications_Edges_Node struct {
	AcmeChallengePath           *string                     "json:\"acmeChallengePath,omitempty\" graphql:\"acmeChallengePath\""
	AcmeChallengeStatus         enums.SSLVerificationStatus "json:\"acmeChallengeStatus\" graphql:\"acmeChallengeStatus\""
	AcmeChallengeStatusReason   *string                     "json:\"acmeChallengeStatusReason,omitempty\" graphql:\"acmeChallengeStatusReason\""
	CloudflareHostnameID        string                      "json:\"cloudflareHostnameID\" graphql:\"cloudflareHostnameID\""
	CreatedAt                   *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                   *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DNSTxtRecord                string                      "json:\"dnsTxtRecord\" graphql:\"dnsTxtRecord\""
	DNSTxtValue                 string                      "json:\"dnsTxtValue\" graphql:\"dnsTxtValue\""
	DNSVerificationStatus       enums.DNSVerificationStatus "json:\"dnsVerificationStatus\" graphql:\"dnsVerificationStatus\""
	DNSVerificationStatusReason *string                     "json:\"dnsVerificationStatusReason,omitempty\" graphql:\"dnsVerificationStatusReason\""
	ExpectedAcmeChallengeValue  *string                     "json:\"expectedAcmeChallengeValue,omitempty\" graphql:\"expectedAcmeChallengeValue\""
	ID                          string                      "json:\"id\" graphql:\"id\""
	OwnerID                     *string                     "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags                        []string                    "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                   *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                   *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetDNSVerifications_DNSVerifications_Edges_Node) GetAcmeChallengePath() *string {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.AcmeChallengePath
}
func (t *GetDNSVerifications_DNSVerifications_Edges_Node) GetAcmeChallengeStatus() *enums.SSLVerificationStatus {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return &t.AcmeChallengeStatus
}
func (t *GetDNSVerifications_DNSVerifications_Edges_Node) GetAcmeChallengeStatusReason() *string {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.AcmeChallengeStatusReason
}
func (t *GetDNSVerifications_DNSVerifications_Edges_Node) GetCloudflareHostnameID() string {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.CloudflareHostnameID
}
func (t *GetDNSVerifications_DNSVerifications_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetDNSVerifications_DNSVerifications_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetDNSVerifications_DNSVerifications_Edges_Node) GetDNSTxtRecord() string {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.DNSTxtRecord
}
func (t *GetDNSVerifications_DNSVerifications_Edges_Node) GetDNSTxtValue() string {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.DNSTxtValue
}
func (t *GetDNSVerifications_DNSVerifications_Edges_Node) GetDNSVerificationStatus() *enums.DNSVerificationStatus {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return &t.DNSVerificationStatus
}
func (t *GetDNSVerifications_DNSVerifications_Edges_Node) GetDNSVerificationStatusReason() *string {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.DNSVerificationStatusReason
}
func (t *GetDNSVerifications_DNSVerifications_Edges_Node) GetExpectedAcmeChallengeValue() *string {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.ExpectedAcmeChallengeValue
}
func (t *GetDNSVerifications_DNSVerifications_Edges_Node) GetID() string {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.ID
}
func (t *GetDNSVerifications_DNSVerifications_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetDNSVerifications_DNSVerifications_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.Tags
}
func (t *GetDNSVerifications_DNSVerifications_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetDNSVerifications_DNSVerifications_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetDNSVerifications_DNSVerifications_Edges struct {
	Node *GetDNSVerifications_DNSVerifications_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetDNSVerifications_DNSVerifications_Edges) GetNode() *GetDNSVerifications_DNSVerifications_Edges_Node {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications_Edges{}
	}
	return t.Node
}

type GetDNSVerifications_DNSVerifications struct {
	Edges      []*GetDNSVerifications_DNSVerifications_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetDNSVerifications_DNSVerifications_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetDNSVerifications_DNSVerifications) GetEdges() []*GetDNSVerifications_DNSVerifications_Edges {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications{}
	}
	return t.Edges
}
func (t *GetDNSVerifications_DNSVerifications) GetPageInfo() *GetDNSVerifications_DNSVerifications_PageInfo {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications{}
	}
	return &t.PageInfo
}
func (t *GetDNSVerifications_DNSVerifications) GetTotalCount() int64 {
	if t == nil {
		t = &GetDNSVerifications_DNSVerifications{}
	}
	return t.TotalCount
}

type UpdateDNSVerification_UpdateDNSVerification_DNSVerification struct {
	AcmeChallengePath           *string                     "json:\"acmeChallengePath,omitempty\" graphql:\"acmeChallengePath\""
	AcmeChallengeStatus         enums.SSLVerificationStatus "json:\"acmeChallengeStatus\" graphql:\"acmeChallengeStatus\""
	AcmeChallengeStatusReason   *string                     "json:\"acmeChallengeStatusReason,omitempty\" graphql:\"acmeChallengeStatusReason\""
	CloudflareHostnameID        string                      "json:\"cloudflareHostnameID\" graphql:\"cloudflareHostnameID\""
	CreatedAt                   *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                   *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DNSTxtRecord                string                      "json:\"dnsTxtRecord\" graphql:\"dnsTxtRecord\""
	DNSTxtValue                 string                      "json:\"dnsTxtValue\" graphql:\"dnsTxtValue\""
	DNSVerificationStatus       enums.DNSVerificationStatus "json:\"dnsVerificationStatus\" graphql:\"dnsVerificationStatus\""
	DNSVerificationStatusReason *string                     "json:\"dnsVerificationStatusReason,omitempty\" graphql:\"dnsVerificationStatusReason\""
	ExpectedAcmeChallengeValue  *string                     "json:\"expectedAcmeChallengeValue,omitempty\" graphql:\"expectedAcmeChallengeValue\""
	ID                          string                      "json:\"id\" graphql:\"id\""
	OwnerID                     *string                     "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags                        []string                    "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                   *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                   *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateDNSVerification_UpdateDNSVerification_DNSVerification) GetAcmeChallengePath() *string {
	if t == nil {
		t = &UpdateDNSVerification_UpdateDNSVerification_DNSVerification{}
	}
	return t.AcmeChallengePath
}
func (t *UpdateDNSVerification_UpdateDNSVerification_DNSVerification) GetAcmeChallengeStatus() *enums.SSLVerificationStatus {
	if t == nil {
		t = &UpdateDNSVerification_UpdateDNSVerification_DNSVerification{}
	}
	return &t.AcmeChallengeStatus
}
func (t *UpdateDNSVerification_UpdateDNSVerification_DNSVerification) GetAcmeChallengeStatusReason() *string {
	if t == nil {
		t = &UpdateDNSVerification_UpdateDNSVerification_DNSVerification{}
	}
	return t.AcmeChallengeStatusReason
}
func (t *UpdateDNSVerification_UpdateDNSVerification_DNSVerification) GetCloudflareHostnameID() string {
	if t == nil {
		t = &UpdateDNSVerification_UpdateDNSVerification_DNSVerification{}
	}
	return t.CloudflareHostnameID
}
func (t *UpdateDNSVerification_UpdateDNSVerification_DNSVerification) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateDNSVerification_UpdateDNSVerification_DNSVerification{}
	}
	return t.CreatedAt
}
func (t *UpdateDNSVerification_UpdateDNSVerification_DNSVerification) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateDNSVerification_UpdateDNSVerification_DNSVerification{}
	}
	return t.CreatedBy
}
func (t *UpdateDNSVerification_UpdateDNSVerification_DNSVerification) GetDNSTxtRecord() string {
	if t == nil {
		t = &UpdateDNSVerification_UpdateDNSVerification_DNSVerification{}
	}
	return t.DNSTxtRecord
}
func (t *UpdateDNSVerification_UpdateDNSVerification_DNSVerification) GetDNSTxtValue() string {
	if t == nil {
		t = &UpdateDNSVerification_UpdateDNSVerification_DNSVerification{}
	}
	return t.DNSTxtValue
}
func (t *UpdateDNSVerification_UpdateDNSVerification_DNSVerification) GetDNSVerificationStatus() *enums.DNSVerificationStatus {
	if t == nil {
		t = &UpdateDNSVerification_UpdateDNSVerification_DNSVerification{}
	}
	return &t.DNSVerificationStatus
}
func (t *UpdateDNSVerification_UpdateDNSVerification_DNSVerification) GetDNSVerificationStatusReason() *string {
	if t == nil {
		t = &UpdateDNSVerification_UpdateDNSVerification_DNSVerification{}
	}
	return t.DNSVerificationStatusReason
}
func (t *UpdateDNSVerification_UpdateDNSVerification_DNSVerification) GetExpectedAcmeChallengeValue() *string {
	if t == nil {
		t = &UpdateDNSVerification_UpdateDNSVerification_DNSVerification{}
	}
	return t.ExpectedAcmeChallengeValue
}
func (t *UpdateDNSVerification_UpdateDNSVerification_DNSVerification) GetID() string {
	if t == nil {
		t = &UpdateDNSVerification_UpdateDNSVerification_DNSVerification{}
	}
	return t.ID
}
func (t *UpdateDNSVerification_UpdateDNSVerification_DNSVerification) GetOwnerID() *string {
	if t == nil {
		t = &UpdateDNSVerification_UpdateDNSVerification_DNSVerification{}
	}
	return t.OwnerID
}
func (t *UpdateDNSVerification_UpdateDNSVerification_DNSVerification) GetTags() []string {
	if t == nil {
		t = &UpdateDNSVerification_UpdateDNSVerification_DNSVerification{}
	}
	return t.Tags
}
func (t *UpdateDNSVerification_UpdateDNSVerification_DNSVerification) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateDNSVerification_UpdateDNSVerification_DNSVerification{}
	}
	return t.UpdatedAt
}
func (t *UpdateDNSVerification_UpdateDNSVerification_DNSVerification) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateDNSVerification_UpdateDNSVerification_DNSVerification{}
	}
	return t.UpdatedBy
}

type UpdateDNSVerification_UpdateDNSVerification struct {
	DNSVerification UpdateDNSVerification_UpdateDNSVerification_DNSVerification "json:\"dnsVerification\" graphql:\"dnsVerification\""
}

func (t *UpdateDNSVerification_UpdateDNSVerification) GetDNSVerification() *UpdateDNSVerification_UpdateDNSVerification_DNSVerification {
	if t == nil {
		t = &UpdateDNSVerification_UpdateDNSVerification{}
	}
	return &t.DNSVerification
}

type GetAllDNSVerificationHistories_DNSVerificationHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node struct {
	AcmeChallengePath           *string                     "json:\"acmeChallengePath,omitempty\" graphql:\"acmeChallengePath\""
	AcmeChallengeStatus         enums.SSLVerificationStatus "json:\"acmeChallengeStatus\" graphql:\"acmeChallengeStatus\""
	AcmeChallengeStatusReason   *string                     "json:\"acmeChallengeStatusReason,omitempty\" graphql:\"acmeChallengeStatusReason\""
	CloudflareHostnameID        string                      "json:\"cloudflareHostnameID\" graphql:\"cloudflareHostnameID\""
	CreatedAt                   *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                   *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DNSTxtRecord                string                      "json:\"dnsTxtRecord\" graphql:\"dnsTxtRecord\""
	DNSTxtValue                 string                      "json:\"dnsTxtValue\" graphql:\"dnsTxtValue\""
	DNSVerificationStatus       enums.DNSVerificationStatus "json:\"dnsVerificationStatus\" graphql:\"dnsVerificationStatus\""
	DNSVerificationStatusReason *string                     "json:\"dnsVerificationStatusReason,omitempty\" graphql:\"dnsVerificationStatusReason\""
	ExpectedAcmeChallengeValue  *string                     "json:\"expectedAcmeChallengeValue,omitempty\" graphql:\"expectedAcmeChallengeValue\""
	HistoryTime                 time.Time                   "json:\"historyTime\" graphql:\"historyTime\""
	ID                          string                      "json:\"id\" graphql:\"id\""
	Operation                   history.OpType              "json:\"operation\" graphql:\"operation\""
	OwnerID                     *string                     "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                         *string                     "json:\"ref,omitempty\" graphql:\"ref\""
	Tags                        []string                    "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                   *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                   *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetAcmeChallengePath() *string {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.AcmeChallengePath
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetAcmeChallengeStatus() *enums.SSLVerificationStatus {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return &t.AcmeChallengeStatus
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetAcmeChallengeStatusReason() *string {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.AcmeChallengeStatusReason
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetCloudflareHostnameID() string {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.CloudflareHostnameID
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetDNSTxtRecord() string {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.DNSTxtRecord
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetDNSTxtValue() string {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.DNSTxtValue
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetDNSVerificationStatus() *enums.DNSVerificationStatus {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return &t.DNSVerificationStatus
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetDNSVerificationStatusReason() *string {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.DNSVerificationStatusReason
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetExpectedAcmeChallengeValue() *string {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.ExpectedAcmeChallengeValue
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllDNSVerificationHistories_DNSVerificationHistories_Edges struct {
	Node *GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllDNSVerificationHistories_DNSVerificationHistories_Edges) GetNode() *GetAllDNSVerificationHistories_DNSVerificationHistories_Edges_Node {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories_Edges{}
	}
	return t.Node
}

type GetAllDNSVerificationHistories_DNSVerificationHistories struct {
	Edges      []*GetAllDNSVerificationHistories_DNSVerificationHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllDNSVerificationHistories_DNSVerificationHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                            "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllDNSVerificationHistories_DNSVerificationHistories) GetEdges() []*GetAllDNSVerificationHistories_DNSVerificationHistories_Edges {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories{}
	}
	return t.Edges
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories) GetPageInfo() *GetAllDNSVerificationHistories_DNSVerificationHistories_PageInfo {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllDNSVerificationHistories_DNSVerificationHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllDNSVerificationHistories_DNSVerificationHistories{}
	}
	return t.TotalCount
}

type GetDNSVerificationHistories_DNSVerificationHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetDNSVerificationHistories_DNSVerificationHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node struct {
	AcmeChallengePath           *string                     "json:\"acmeChallengePath,omitempty\" graphql:\"acmeChallengePath\""
	AcmeChallengeStatus         enums.SSLVerificationStatus "json:\"acmeChallengeStatus\" graphql:\"acmeChallengeStatus\""
	AcmeChallengeStatusReason   *string                     "json:\"acmeChallengeStatusReason,omitempty\" graphql:\"acmeChallengeStatusReason\""
	CloudflareHostnameID        string                      "json:\"cloudflareHostnameID\" graphql:\"cloudflareHostnameID\""
	CreatedAt                   *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                   *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DNSTxtRecord                string                      "json:\"dnsTxtRecord\" graphql:\"dnsTxtRecord\""
	DNSTxtValue                 string                      "json:\"dnsTxtValue\" graphql:\"dnsTxtValue\""
	DNSVerificationStatus       enums.DNSVerificationStatus "json:\"dnsVerificationStatus\" graphql:\"dnsVerificationStatus\""
	DNSVerificationStatusReason *string                     "json:\"dnsVerificationStatusReason,omitempty\" graphql:\"dnsVerificationStatusReason\""
	ExpectedAcmeChallengeValue  *string                     "json:\"expectedAcmeChallengeValue,omitempty\" graphql:\"expectedAcmeChallengeValue\""
	HistoryTime                 time.Time                   "json:\"historyTime\" graphql:\"historyTime\""
	ID                          string                      "json:\"id\" graphql:\"id\""
	Operation                   history.OpType              "json:\"operation\" graphql:\"operation\""
	OwnerID                     *string                     "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                         *string                     "json:\"ref,omitempty\" graphql:\"ref\""
	Tags                        []string                    "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                   *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                   *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetAcmeChallengePath() *string {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.AcmeChallengePath
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetAcmeChallengeStatus() *enums.SSLVerificationStatus {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return &t.AcmeChallengeStatus
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetAcmeChallengeStatusReason() *string {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.AcmeChallengeStatusReason
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetCloudflareHostnameID() string {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.CloudflareHostnameID
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetDNSTxtRecord() string {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.DNSTxtRecord
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetDNSTxtValue() string {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.DNSTxtValue
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetDNSVerificationStatus() *enums.DNSVerificationStatus {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return &t.DNSVerificationStatus
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetDNSVerificationStatusReason() *string {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.DNSVerificationStatusReason
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetExpectedAcmeChallengeValue() *string {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.ExpectedAcmeChallengeValue
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetDNSVerificationHistories_DNSVerificationHistories_Edges struct {
	Node *GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetDNSVerificationHistories_DNSVerificationHistories_Edges) GetNode() *GetDNSVerificationHistories_DNSVerificationHistories_Edges_Node {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories_Edges{}
	}
	return t.Node
}

type GetDNSVerificationHistories_DNSVerificationHistories struct {
	Edges      []*GetDNSVerificationHistories_DNSVerificationHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetDNSVerificationHistories_DNSVerificationHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetDNSVerificationHistories_DNSVerificationHistories) GetEdges() []*GetDNSVerificationHistories_DNSVerificationHistories_Edges {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories{}
	}
	return t.Edges
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories) GetPageInfo() *GetDNSVerificationHistories_DNSVerificationHistories_PageInfo {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories{}
	}
	return &t.PageInfo
}
func (t *GetDNSVerificationHistories_DNSVerificationHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetDNSVerificationHistories_DNSVerificationHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVDocumentData_CreateBulkCSVDocumentData_DocumentData struct {
	CreatedAt  *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Data       map[string]any "json:\"data\" graphql:\"data\""
	ID         string         "json:\"id\" graphql:\"id\""
	OwnerID    *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags       []string       "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateID string         "json:\"templateID\" graphql:\"templateID\""
	UpdatedAt  *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVDocumentData_CreateBulkCSVDocumentData_DocumentData) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVDocumentData_CreateBulkCSVDocumentData_DocumentData{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVDocumentData_CreateBulkCSVDocumentData_DocumentData) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVDocumentData_CreateBulkCSVDocumentData_DocumentData{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVDocumentData_CreateBulkCSVDocumentData_DocumentData) GetData() map[string]any {
	if t == nil {
		t = &CreateBulkCSVDocumentData_CreateBulkCSVDocumentData_DocumentData{}
	}
	return t.Data
}
func (t *CreateBulkCSVDocumentData_CreateBulkCSVDocumentData_DocumentData) GetID() string {
	if t == nil {
		t = &CreateBulkCSVDocumentData_CreateBulkCSVDocumentData_DocumentData{}
	}
	return t.ID
}
func (t *CreateBulkCSVDocumentData_CreateBulkCSVDocumentData_DocumentData) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVDocumentData_CreateBulkCSVDocumentData_DocumentData{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVDocumentData_CreateBulkCSVDocumentData_DocumentData) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVDocumentData_CreateBulkCSVDocumentData_DocumentData{}
	}
	return t.Tags
}
func (t *CreateBulkCSVDocumentData_CreateBulkCSVDocumentData_DocumentData) GetTemplateID() string {
	if t == nil {
		t = &CreateBulkCSVDocumentData_CreateBulkCSVDocumentData_DocumentData{}
	}
	return t.TemplateID
}
func (t *CreateBulkCSVDocumentData_CreateBulkCSVDocumentData_DocumentData) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVDocumentData_CreateBulkCSVDocumentData_DocumentData{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVDocumentData_CreateBulkCSVDocumentData_DocumentData) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVDocumentData_CreateBulkCSVDocumentData_DocumentData{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVDocumentData_CreateBulkCSVDocumentData struct {
	DocumentData []*CreateBulkCSVDocumentData_CreateBulkCSVDocumentData_DocumentData "json:\"documentData,omitempty\" graphql:\"documentData\""
}

func (t *CreateBulkCSVDocumentData_CreateBulkCSVDocumentData) GetDocumentData() []*CreateBulkCSVDocumentData_CreateBulkCSVDocumentData_DocumentData {
	if t == nil {
		t = &CreateBulkCSVDocumentData_CreateBulkCSVDocumentData{}
	}
	return t.DocumentData
}

type CreateBulkDocumentData_CreateBulkDocumentData_DocumentData struct {
	CreatedAt  *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Data       map[string]any "json:\"data\" graphql:\"data\""
	ID         string         "json:\"id\" graphql:\"id\""
	OwnerID    *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags       []string       "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateID string         "json:\"templateID\" graphql:\"templateID\""
	UpdatedAt  *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkDocumentData_CreateBulkDocumentData_DocumentData) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkDocumentData_CreateBulkDocumentData_DocumentData{}
	}
	return t.CreatedAt
}
func (t *CreateBulkDocumentData_CreateBulkDocumentData_DocumentData) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkDocumentData_CreateBulkDocumentData_DocumentData{}
	}
	return t.CreatedBy
}
func (t *CreateBulkDocumentData_CreateBulkDocumentData_DocumentData) GetData() map[string]any {
	if t == nil {
		t = &CreateBulkDocumentData_CreateBulkDocumentData_DocumentData{}
	}
	return t.Data
}
func (t *CreateBulkDocumentData_CreateBulkDocumentData_DocumentData) GetID() string {
	if t == nil {
		t = &CreateBulkDocumentData_CreateBulkDocumentData_DocumentData{}
	}
	return t.ID
}
func (t *CreateBulkDocumentData_CreateBulkDocumentData_DocumentData) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkDocumentData_CreateBulkDocumentData_DocumentData{}
	}
	return t.OwnerID
}
func (t *CreateBulkDocumentData_CreateBulkDocumentData_DocumentData) GetTags() []string {
	if t == nil {
		t = &CreateBulkDocumentData_CreateBulkDocumentData_DocumentData{}
	}
	return t.Tags
}
func (t *CreateBulkDocumentData_CreateBulkDocumentData_DocumentData) GetTemplateID() string {
	if t == nil {
		t = &CreateBulkDocumentData_CreateBulkDocumentData_DocumentData{}
	}
	return t.TemplateID
}
func (t *CreateBulkDocumentData_CreateBulkDocumentData_DocumentData) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkDocumentData_CreateBulkDocumentData_DocumentData{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkDocumentData_CreateBulkDocumentData_DocumentData) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkDocumentData_CreateBulkDocumentData_DocumentData{}
	}
	return t.UpdatedBy
}

type CreateBulkDocumentData_CreateBulkDocumentData struct {
	DocumentData []*CreateBulkDocumentData_CreateBulkDocumentData_DocumentData "json:\"documentData,omitempty\" graphql:\"documentData\""
}

func (t *CreateBulkDocumentData_CreateBulkDocumentData) GetDocumentData() []*CreateBulkDocumentData_CreateBulkDocumentData_DocumentData {
	if t == nil {
		t = &CreateBulkDocumentData_CreateBulkDocumentData{}
	}
	return t.DocumentData
}

type CreateDocumentData_CreateDocumentData_DocumentData struct {
	CreatedAt  *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Data       map[string]any "json:\"data\" graphql:\"data\""
	ID         string         "json:\"id\" graphql:\"id\""
	OwnerID    *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags       []string       "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateID string         "json:\"templateID\" graphql:\"templateID\""
	UpdatedAt  *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.CreatedAt
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetCreatedBy() *string {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.CreatedBy
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetData() map[string]any {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.Data
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetID() string {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.ID
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetOwnerID() *string {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.OwnerID
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetTags() []string {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.Tags
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetTemplateID() string {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.TemplateID
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.UpdatedAt
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.UpdatedBy
}

type CreateDocumentData_CreateDocumentData struct {
	DocumentData CreateDocumentData_CreateDocumentData_DocumentData "json:\"documentData\" graphql:\"documentData\""
}

func (t *CreateDocumentData_CreateDocumentData) GetDocumentData() *CreateDocumentData_CreateDocumentData_DocumentData {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData{}
	}
	return &t.DocumentData
}

type DeleteDocumentData_DeleteDocumentData struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteDocumentData_DeleteDocumentData) GetDeletedID() string {
	if t == nil {
		t = &DeleteDocumentData_DeleteDocumentData{}
	}
	return t.DeletedID
}

type GetDocumentDataByID_DocumentData struct {
	CreatedAt  *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Data       map[string]any "json:\"data\" graphql:\"data\""
	ID         string         "json:\"id\" graphql:\"id\""
	OwnerID    *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags       []string       "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateID string         "json:\"templateID\" graphql:\"templateID\""
	UpdatedAt  *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetDocumentDataByID_DocumentData) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.CreatedAt
}
func (t *GetDocumentDataByID_DocumentData) GetCreatedBy() *string {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.CreatedBy
}
func (t *GetDocumentDataByID_DocumentData) GetData() map[string]any {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.Data
}
func (t *GetDocumentDataByID_DocumentData) GetID() string {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.ID
}
func (t *GetDocumentDataByID_DocumentData) GetOwnerID() *string {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.OwnerID
}
func (t *GetDocumentDataByID_DocumentData) GetTags() []string {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.Tags
}
func (t *GetDocumentDataByID_DocumentData) GetTemplateID() string {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.TemplateID
}
func (t *GetDocumentDataByID_DocumentData) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.UpdatedAt
}
func (t *GetDocumentDataByID_DocumentData) GetUpdatedBy() *string {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.UpdatedBy
}

type UpdateDocumentData_UpdateDocumentData_DocumentData struct {
	CreatedAt  *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Data       map[string]any "json:\"data\" graphql:\"data\""
	ID         string         "json:\"id\" graphql:\"id\""
	OwnerID    *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags       []string       "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateID string         "json:\"templateID\" graphql:\"templateID\""
	UpdatedAt  *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.CreatedAt
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.CreatedBy
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetData() map[string]any {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.Data
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetID() string {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.ID
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetOwnerID() *string {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.OwnerID
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetTags() []string {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.Tags
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetTemplateID() string {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.TemplateID
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.UpdatedAt
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.UpdatedBy
}

type UpdateDocumentData_UpdateDocumentData struct {
	DocumentData UpdateDocumentData_UpdateDocumentData_DocumentData "json:\"documentData\" graphql:\"documentData\""
}

func (t *UpdateDocumentData_UpdateDocumentData) GetDocumentData() *UpdateDocumentData_UpdateDocumentData_DocumentData {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData{}
	}
	return &t.DocumentData
}

type GetAllDocumentDataHistories_DocumentDataHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllDocumentDataHistories_DocumentDataHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Data        map[string]any "json:\"data\" graphql:\"data\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateID  string         "json:\"templateID\" graphql:\"templateID\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetData() map[string]any {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.Data
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetTemplateID() string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.TemplateID
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllDocumentDataHistories_DocumentDataHistories_Edges struct {
	Node *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges) GetNode() *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges{}
	}
	return t.Node
}

type GetAllDocumentDataHistories_DocumentDataHistories struct {
	Edges      []*GetAllDocumentDataHistories_DocumentDataHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllDocumentDataHistories_DocumentDataHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllDocumentDataHistories_DocumentDataHistories) GetEdges() []*GetAllDocumentDataHistories_DocumentDataHistories_Edges {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories{}
	}
	return t.Edges
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories) GetPageInfo() *GetAllDocumentDataHistories_DocumentDataHistories_PageInfo {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories{}
	}
	return t.TotalCount
}

type GetDocumentDataHistories_DocumentDataHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetDocumentDataHistories_DocumentDataHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetDocumentDataHistories_DocumentDataHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetDocumentDataHistories_DocumentDataHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetDocumentDataHistories_DocumentDataHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetDocumentDataHistories_DocumentDataHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Data        map[string]any "json:\"data\" graphql:\"data\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateID  string         "json:\"templateID\" graphql:\"templateID\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetData() map[string]any {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.Data
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetTemplateID() string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.TemplateID
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetDocumentDataHistories_DocumentDataHistories_Edges struct {
	Node *GetDocumentDataHistories_DocumentDataHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetDocumentDataHistories_DocumentDataHistories_Edges) GetNode() *GetDocumentDataHistories_DocumentDataHistories_Edges_Node {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges{}
	}
	return t.Node
}

type GetDocumentDataHistories_DocumentDataHistories struct {
	Edges      []*GetDocumentDataHistories_DocumentDataHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetDocumentDataHistories_DocumentDataHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetDocumentDataHistories_DocumentDataHistories) GetEdges() []*GetDocumentDataHistories_DocumentDataHistories_Edges {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories{}
	}
	return t.Edges
}
func (t *GetDocumentDataHistories_DocumentDataHistories) GetPageInfo() *GetDocumentDataHistories_DocumentDataHistories_PageInfo {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories{}
	}
	return &t.PageInfo
}
func (t *GetDocumentDataHistories_DocumentDataHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVEntity_CreateBulkCSVEntity_Entities struct {
	CreatedAt    *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string    "json:\"description,omitempty\" graphql:\"description\""
	DisplayName  *string    "json:\"displayName,omitempty\" graphql:\"displayName\""
	Domains      []string   "json:\"domains,omitempty\" graphql:\"domains\""
	EntityTypeID *string    "json:\"entityTypeID,omitempty\" graphql:\"entityTypeID\""
	ID           string     "json:\"id\" graphql:\"id\""
	Name         *string    "json:\"name,omitempty\" graphql:\"name\""
	OwnerID      *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status       *string    "json:\"status,omitempty\" graphql:\"status\""
	Tags         []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.Description
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetDisplayName() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.DisplayName
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetDomains() []string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.Domains
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetEntityTypeID() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.EntityTypeID
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.ID
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetName() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.Name
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetStatus() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.Status
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.Tags
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVEntity_CreateBulkCSVEntity struct {
	Entities []*CreateBulkCSVEntity_CreateBulkCSVEntity_Entities "json:\"entities,omitempty\" graphql:\"entities\""
}

func (t *CreateBulkCSVEntity_CreateBulkCSVEntity) GetEntities() []*CreateBulkCSVEntity_CreateBulkCSVEntity_Entities {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity{}
	}
	return t.Entities
}

type CreateBulkEntity_CreateBulkEntity_Entities struct {
	CreatedAt    *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string    "json:\"description,omitempty\" graphql:\"description\""
	DisplayName  *string    "json:\"displayName,omitempty\" graphql:\"displayName\""
	Domains      []string   "json:\"domains,omitempty\" graphql:\"domains\""
	EntityTypeID *string    "json:\"entityTypeID,omitempty\" graphql:\"entityTypeID\""
	ID           string     "json:\"id\" graphql:\"id\""
	Name         *string    "json:\"name,omitempty\" graphql:\"name\""
	OwnerID      *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status       *string    "json:\"status,omitempty\" graphql:\"status\""
	Tags         []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.CreatedAt
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.CreatedBy
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetDescription() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.Description
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetDisplayName() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.DisplayName
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetDomains() []string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.Domains
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetEntityTypeID() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.EntityTypeID
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetID() string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.ID
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetName() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.Name
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.OwnerID
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetStatus() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.Status
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetTags() []string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.Tags
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.UpdatedBy
}

type CreateBulkEntity_CreateBulkEntity struct {
	Entities []*CreateBulkEntity_CreateBulkEntity_Entities "json:\"entities,omitempty\" graphql:\"entities\""
}

func (t *CreateBulkEntity_CreateBulkEntity) GetEntities() []*CreateBulkEntity_CreateBulkEntity_Entities {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity{}
	}
	return t.Entities
}

type CreateEntity_CreateEntity_Entity struct {
	CreatedAt    *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string    "json:\"description,omitempty\" graphql:\"description\""
	DisplayName  *string    "json:\"displayName,omitempty\" graphql:\"displayName\""
	Domains      []string   "json:\"domains,omitempty\" graphql:\"domains\""
	EntityTypeID *string    "json:\"entityTypeID,omitempty\" graphql:\"entityTypeID\""
	ID           string     "json:\"id\" graphql:\"id\""
	Name         *string    "json:\"name,omitempty\" graphql:\"name\""
	OwnerID      *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status       *string    "json:\"status,omitempty\" graphql:\"status\""
	Tags         []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateEntity_CreateEntity_Entity) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.CreatedAt
}
func (t *CreateEntity_CreateEntity_Entity) GetCreatedBy() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.CreatedBy
}
func (t *CreateEntity_CreateEntity_Entity) GetDescription() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.Description
}
func (t *CreateEntity_CreateEntity_Entity) GetDisplayName() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.DisplayName
}
func (t *CreateEntity_CreateEntity_Entity) GetDomains() []string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.Domains
}
func (t *CreateEntity_CreateEntity_Entity) GetEntityTypeID() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.EntityTypeID
}
func (t *CreateEntity_CreateEntity_Entity) GetID() string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.ID
}
func (t *CreateEntity_CreateEntity_Entity) GetName() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.Name
}
func (t *CreateEntity_CreateEntity_Entity) GetOwnerID() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.OwnerID
}
func (t *CreateEntity_CreateEntity_Entity) GetStatus() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.Status
}
func (t *CreateEntity_CreateEntity_Entity) GetTags() []string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.Tags
}
func (t *CreateEntity_CreateEntity_Entity) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.UpdatedAt
}
func (t *CreateEntity_CreateEntity_Entity) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.UpdatedBy
}

type CreateEntity_CreateEntity struct {
	Entity CreateEntity_CreateEntity_Entity "json:\"entity\" graphql:\"entity\""
}

func (t *CreateEntity_CreateEntity) GetEntity() *CreateEntity_CreateEntity_Entity {
	if t == nil {
		t = &CreateEntity_CreateEntity{}
	}
	return &t.Entity
}

type DeleteEntity_DeleteEntity struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteEntity_DeleteEntity) GetDeletedID() string {
	if t == nil {
		t = &DeleteEntity_DeleteEntity{}
	}
	return t.DeletedID
}

type GetAllEntities_Entities_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllEntities_Entities_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllEntities_Entities_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllEntities_Entities_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllEntities_Entities_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllEntities_Entities_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllEntities_Entities_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllEntities_Entities_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllEntities_Entities_PageInfo{}
	}
	return t.StartCursor
}

type GetAllEntities_Entities_Edges_Node struct {
	CreatedAt    *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string    "json:\"description,omitempty\" graphql:\"description\""
	DisplayName  *string    "json:\"displayName,omitempty\" graphql:\"displayName\""
	Domains      []string   "json:\"domains,omitempty\" graphql:\"domains\""
	EntityTypeID *string    "json:\"entityTypeID,omitempty\" graphql:\"entityTypeID\""
	ID           string     "json:\"id\" graphql:\"id\""
	Name         *string    "json:\"name,omitempty\" graphql:\"name\""
	OwnerID      *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status       *string    "json:\"status,omitempty\" graphql:\"status\""
	Tags         []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllEntities_Entities_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEntities_Entities_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEntities_Entities_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllEntities_Entities_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllEntities_Entities_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.Domains
}
func (t *GetAllEntities_Entities_Edges_Node) GetEntityTypeID() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.EntityTypeID
}
func (t *GetAllEntities_Entities_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEntities_Entities_Edges_Node) GetName() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllEntities_Entities_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllEntities_Entities_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllEntities_Entities_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEntities_Entities_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEntities_Entities_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllEntities_Entities_Edges struct {
	Node *GetAllEntities_Entities_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEntities_Entities_Edges) GetNode() *GetAllEntities_Entities_Edges_Node {
	if t == nil {
		t = &GetAllEntities_Entities_Edges{}
	}
	return t.Node
}

type GetAllEntities_Entities struct {
	Edges      []*GetAllEntities_Entities_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllEntities_Entities_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                            "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllEntities_Entities) GetEdges() []*GetAllEntities_Entities_Edges {
	if t == nil {
		t = &GetAllEntities_Entities{}
	}
	return t.Edges
}
func (t *GetAllEntities_Entities) GetPageInfo() *GetAllEntities_Entities_PageInfo {
	if t == nil {
		t = &GetAllEntities_Entities{}
	}
	return &t.PageInfo
}
func (t *GetAllEntities_Entities) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllEntities_Entities{}
	}
	return t.TotalCount
}

type GetEntities_Entities_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetEntities_Entities_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetEntities_Entities_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetEntities_Entities_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetEntities_Entities_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetEntities_Entities_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetEntities_Entities_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetEntities_Entities_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetEntities_Entities_PageInfo{}
	}
	return t.StartCursor
}

type GetEntities_Entities_Edges_Node struct {
	CreatedAt    *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string    "json:\"description,omitempty\" graphql:\"description\""
	DisplayName  *string    "json:\"displayName,omitempty\" graphql:\"displayName\""
	Domains      []string   "json:\"domains,omitempty\" graphql:\"domains\""
	EntityTypeID *string    "json:\"entityTypeID,omitempty\" graphql:\"entityTypeID\""
	ID           string     "json:\"id\" graphql:\"id\""
	Name         *string    "json:\"name,omitempty\" graphql:\"name\""
	OwnerID      *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status       *string    "json:\"status,omitempty\" graphql:\"status\""
	Tags         []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntities_Entities_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetEntities_Entities_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetEntities_Entities_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.Description
}
func (t *GetEntities_Entities_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetEntities_Entities_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.Domains
}
func (t *GetEntities_Entities_Edges_Node) GetEntityTypeID() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.EntityTypeID
}
func (t *GetEntities_Entities_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.ID
}
func (t *GetEntities_Entities_Edges_Node) GetName() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.Name
}
func (t *GetEntities_Entities_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetEntities_Entities_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.Status
}
func (t *GetEntities_Entities_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEntities_Entities_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEntities_Entities_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetEntities_Entities_Edges struct {
	Node *GetEntities_Entities_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntities_Entities_Edges) GetNode() *GetEntities_Entities_Edges_Node {
	if t == nil {
		t = &GetEntities_Entities_Edges{}
	}
	return t.Node
}

type GetEntities_Entities struct {
	Edges      []*GetEntities_Entities_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetEntities_Entities_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetEntities_Entities) GetEdges() []*GetEntities_Entities_Edges {
	if t == nil {
		t = &GetEntities_Entities{}
	}
	return t.Edges
}
func (t *GetEntities_Entities) GetPageInfo() *GetEntities_Entities_PageInfo {
	if t == nil {
		t = &GetEntities_Entities{}
	}
	return &t.PageInfo
}
func (t *GetEntities_Entities) GetTotalCount() int64 {
	if t == nil {
		t = &GetEntities_Entities{}
	}
	return t.TotalCount
}

type GetEntityByID_Entity struct {
	CreatedAt    *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string    "json:\"description,omitempty\" graphql:\"description\""
	DisplayName  *string    "json:\"displayName,omitempty\" graphql:\"displayName\""
	Domains      []string   "json:\"domains,omitempty\" graphql:\"domains\""
	EntityTypeID *string    "json:\"entityTypeID,omitempty\" graphql:\"entityTypeID\""
	ID           string     "json:\"id\" graphql:\"id\""
	Name         *string    "json:\"name,omitempty\" graphql:\"name\""
	OwnerID      *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status       *string    "json:\"status,omitempty\" graphql:\"status\""
	Tags         []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntityByID_Entity) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.CreatedAt
}
func (t *GetEntityByID_Entity) GetCreatedBy() *string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.CreatedBy
}
func (t *GetEntityByID_Entity) GetDescription() *string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.Description
}
func (t *GetEntityByID_Entity) GetDisplayName() *string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.DisplayName
}
func (t *GetEntityByID_Entity) GetDomains() []string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.Domains
}
func (t *GetEntityByID_Entity) GetEntityTypeID() *string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.EntityTypeID
}
func (t *GetEntityByID_Entity) GetID() string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.ID
}
func (t *GetEntityByID_Entity) GetName() *string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.Name
}
func (t *GetEntityByID_Entity) GetOwnerID() *string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.OwnerID
}
func (t *GetEntityByID_Entity) GetStatus() *string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.Status
}
func (t *GetEntityByID_Entity) GetTags() []string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.Tags
}
func (t *GetEntityByID_Entity) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.UpdatedAt
}
func (t *GetEntityByID_Entity) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.UpdatedBy
}

type UpdateEntity_UpdateEntity_Entity struct {
	CreatedAt    *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string    "json:\"description,omitempty\" graphql:\"description\""
	DisplayName  *string    "json:\"displayName,omitempty\" graphql:\"displayName\""
	Domains      []string   "json:\"domains,omitempty\" graphql:\"domains\""
	EntityTypeID *string    "json:\"entityTypeID,omitempty\" graphql:\"entityTypeID\""
	ID           string     "json:\"id\" graphql:\"id\""
	Name         *string    "json:\"name,omitempty\" graphql:\"name\""
	OwnerID      *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status       *string    "json:\"status,omitempty\" graphql:\"status\""
	Tags         []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateEntity_UpdateEntity_Entity) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.CreatedAt
}
func (t *UpdateEntity_UpdateEntity_Entity) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.CreatedBy
}
func (t *UpdateEntity_UpdateEntity_Entity) GetDescription() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.Description
}
func (t *UpdateEntity_UpdateEntity_Entity) GetDisplayName() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.DisplayName
}
func (t *UpdateEntity_UpdateEntity_Entity) GetDomains() []string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.Domains
}
func (t *UpdateEntity_UpdateEntity_Entity) GetEntityTypeID() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.EntityTypeID
}
func (t *UpdateEntity_UpdateEntity_Entity) GetID() string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.ID
}
func (t *UpdateEntity_UpdateEntity_Entity) GetName() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.Name
}
func (t *UpdateEntity_UpdateEntity_Entity) GetOwnerID() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.OwnerID
}
func (t *UpdateEntity_UpdateEntity_Entity) GetStatus() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.Status
}
func (t *UpdateEntity_UpdateEntity_Entity) GetTags() []string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.Tags
}
func (t *UpdateEntity_UpdateEntity_Entity) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.UpdatedAt
}
func (t *UpdateEntity_UpdateEntity_Entity) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.UpdatedBy
}

type UpdateEntity_UpdateEntity struct {
	Entity UpdateEntity_UpdateEntity_Entity "json:\"entity\" graphql:\"entity\""
}

func (t *UpdateEntity_UpdateEntity) GetEntity() *UpdateEntity_UpdateEntity_Entity {
	if t == nil {
		t = &UpdateEntity_UpdateEntity{}
	}
	return &t.Entity
}

type GetAllEntityHistories_EntityHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllEntityHistories_EntityHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllEntityHistories_EntityHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllEntityHistories_EntityHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllEntityHistories_EntityHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllEntityHistories_EntityHistories_Edges_Node struct {
	CreatedAt    *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string        "json:\"description,omitempty\" graphql:\"description\""
	DisplayName  *string        "json:\"displayName,omitempty\" graphql:\"displayName\""
	Domains      []string       "json:\"domains,omitempty\" graphql:\"domains\""
	EntityTypeID *string        "json:\"entityTypeID,omitempty\" graphql:\"entityTypeID\""
	HistoryTime  time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID           string         "json:\"id\" graphql:\"id\""
	Name         *string        "json:\"name,omitempty\" graphql:\"name\""
	Operation    history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID      *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref          *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Status       *string        "json:\"status,omitempty\" graphql:\"status\""
	Tags         []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Domains
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetEntityTypeID() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.EntityTypeID
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetName() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllEntityHistories_EntityHistories_Edges struct {
	Node *GetAllEntityHistories_EntityHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEntityHistories_EntityHistories_Edges) GetNode() *GetAllEntityHistories_EntityHistories_Edges_Node {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges{}
	}
	return t.Node
}

type GetAllEntityHistories_EntityHistories struct {
	Edges      []*GetAllEntityHistories_EntityHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllEntityHistories_EntityHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                          "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllEntityHistories_EntityHistories) GetEdges() []*GetAllEntityHistories_EntityHistories_Edges {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories{}
	}
	return t.Edges
}
func (t *GetAllEntityHistories_EntityHistories) GetPageInfo() *GetAllEntityHistories_EntityHistories_PageInfo {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllEntityHistories_EntityHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories{}
	}
	return t.TotalCount
}

type GetEntityHistories_EntityHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetEntityHistories_EntityHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetEntityHistories_EntityHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetEntityHistories_EntityHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetEntityHistories_EntityHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetEntityHistories_EntityHistories_Edges_Node struct {
	CreatedAt    *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string        "json:\"description,omitempty\" graphql:\"description\""
	DisplayName  *string        "json:\"displayName,omitempty\" graphql:\"displayName\""
	Domains      []string       "json:\"domains,omitempty\" graphql:\"domains\""
	EntityTypeID *string        "json:\"entityTypeID,omitempty\" graphql:\"entityTypeID\""
	HistoryTime  time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID           string         "json:\"id\" graphql:\"id\""
	Name         *string        "json:\"name,omitempty\" graphql:\"name\""
	Operation    history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID      *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref          *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Status       *string        "json:\"status,omitempty\" graphql:\"status\""
	Tags         []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntityHistories_EntityHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Domains
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetEntityTypeID() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.EntityTypeID
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetName() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetEntityHistories_EntityHistories_Edges struct {
	Node *GetEntityHistories_EntityHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntityHistories_EntityHistories_Edges) GetNode() *GetEntityHistories_EntityHistories_Edges_Node {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges{}
	}
	return t.Node
}

type GetEntityHistories_EntityHistories struct {
	Edges      []*GetEntityHistories_EntityHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetEntityHistories_EntityHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                       "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetEntityHistories_EntityHistories) GetEdges() []*GetEntityHistories_EntityHistories_Edges {
	if t == nil {
		t = &GetEntityHistories_EntityHistories{}
	}
	return t.Edges
}
func (t *GetEntityHistories_EntityHistories) GetPageInfo() *GetEntityHistories_EntityHistories_PageInfo {
	if t == nil {
		t = &GetEntityHistories_EntityHistories{}
	}
	return &t.PageInfo
}
func (t *GetEntityHistories_EntityHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetEntityHistories_EntityHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	OwnerID   *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.ID
}
func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetName() string {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.Name
}
func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.Tags
}
func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVEntityType_CreateBulkCSVEntityType struct {
	EntityTypes []*CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes "json:\"entityTypes,omitempty\" graphql:\"entityTypes\""
}

func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType) GetEntityTypes() []*CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType{}
	}
	return t.EntityTypes
}

type CreateBulkEntityType_CreateBulkEntityType_EntityTypes struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	OwnerID   *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.CreatedAt
}
func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.CreatedBy
}
func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetID() string {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.ID
}
func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetName() string {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.Name
}
func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.OwnerID
}
func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetTags() []string {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.Tags
}
func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.UpdatedBy
}

type CreateBulkEntityType_CreateBulkEntityType struct {
	EntityTypes []*CreateBulkEntityType_CreateBulkEntityType_EntityTypes "json:\"entityTypes,omitempty\" graphql:\"entityTypes\""
}

func (t *CreateBulkEntityType_CreateBulkEntityType) GetEntityTypes() []*CreateBulkEntityType_CreateBulkEntityType_EntityTypes {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType{}
	}
	return t.EntityTypes
}

type CreateEntityType_CreateEntityType_EntityType struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	OwnerID   *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateEntityType_CreateEntityType_EntityType) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.CreatedAt
}
func (t *CreateEntityType_CreateEntityType_EntityType) GetCreatedBy() *string {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.CreatedBy
}
func (t *CreateEntityType_CreateEntityType_EntityType) GetID() string {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.ID
}
func (t *CreateEntityType_CreateEntityType_EntityType) GetName() string {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.Name
}
func (t *CreateEntityType_CreateEntityType_EntityType) GetOwnerID() *string {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.OwnerID
}
func (t *CreateEntityType_CreateEntityType_EntityType) GetTags() []string {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.Tags
}
func (t *CreateEntityType_CreateEntityType_EntityType) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.UpdatedAt
}
func (t *CreateEntityType_CreateEntityType_EntityType) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.UpdatedBy
}

type CreateEntityType_CreateEntityType struct {
	EntityType CreateEntityType_CreateEntityType_EntityType "json:\"entityType\" graphql:\"entityType\""
}

func (t *CreateEntityType_CreateEntityType) GetEntityType() *CreateEntityType_CreateEntityType_EntityType {
	if t == nil {
		t = &CreateEntityType_CreateEntityType{}
	}
	return &t.EntityType
}

type DeleteEntityType_DeleteEntityType struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteEntityType_DeleteEntityType) GetDeletedID() string {
	if t == nil {
		t = &DeleteEntityType_DeleteEntityType{}
	}
	return t.DeletedID
}

type GetAllEntityTypes_EntityTypes_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllEntityTypes_EntityTypes_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllEntityTypes_EntityTypes_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllEntityTypes_EntityTypes_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllEntityTypes_EntityTypes_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_PageInfo{}
	}
	return t.StartCursor
}

type GetAllEntityTypes_EntityTypes_Edges_Node struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	OwnerID   *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllEntityTypes_EntityTypes_Edges struct {
	Node *GetAllEntityTypes_EntityTypes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEntityTypes_EntityTypes_Edges) GetNode() *GetAllEntityTypes_EntityTypes_Edges_Node {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges{}
	}
	return t.Node
}

type GetAllEntityTypes_EntityTypes struct {
	Edges      []*GetAllEntityTypes_EntityTypes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllEntityTypes_EntityTypes_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllEntityTypes_EntityTypes) GetEdges() []*GetAllEntityTypes_EntityTypes_Edges {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes{}
	}
	return t.Edges
}
func (t *GetAllEntityTypes_EntityTypes) GetPageInfo() *GetAllEntityTypes_EntityTypes_PageInfo {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes{}
	}
	return &t.PageInfo
}
func (t *GetAllEntityTypes_EntityTypes) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes{}
	}
	return t.TotalCount
}

type GetEntityTypeByID_EntityType struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	OwnerID   *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntityTypeByID_EntityType) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.CreatedAt
}
func (t *GetEntityTypeByID_EntityType) GetCreatedBy() *string {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.CreatedBy
}
func (t *GetEntityTypeByID_EntityType) GetID() string {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.ID
}
func (t *GetEntityTypeByID_EntityType) GetName() string {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.Name
}
func (t *GetEntityTypeByID_EntityType) GetOwnerID() *string {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.OwnerID
}
func (t *GetEntityTypeByID_EntityType) GetTags() []string {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.Tags
}
func (t *GetEntityTypeByID_EntityType) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.UpdatedAt
}
func (t *GetEntityTypeByID_EntityType) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.UpdatedBy
}

type GetEntityTypes_EntityTypes_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetEntityTypes_EntityTypes_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetEntityTypes_EntityTypes_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetEntityTypes_EntityTypes_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetEntityTypes_EntityTypes_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_PageInfo{}
	}
	return t.StartCursor
}

type GetEntityTypes_EntityTypes_Edges_Node struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	OwnerID   *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntityTypes_EntityTypes_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetEntityTypes_EntityTypes_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetEntityTypes_EntityTypes_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.ID
}
func (t *GetEntityTypes_EntityTypes_Edges_Node) GetName() string {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.Name
}
func (t *GetEntityTypes_EntityTypes_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetEntityTypes_EntityTypes_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEntityTypes_EntityTypes_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEntityTypes_EntityTypes_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetEntityTypes_EntityTypes_Edges struct {
	Node *GetEntityTypes_EntityTypes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntityTypes_EntityTypes_Edges) GetNode() *GetEntityTypes_EntityTypes_Edges_Node {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges{}
	}
	return t.Node
}

type GetEntityTypes_EntityTypes struct {
	Edges      []*GetEntityTypes_EntityTypes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetEntityTypes_EntityTypes_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetEntityTypes_EntityTypes) GetEdges() []*GetEntityTypes_EntityTypes_Edges {
	if t == nil {
		t = &GetEntityTypes_EntityTypes{}
	}
	return t.Edges
}
func (t *GetEntityTypes_EntityTypes) GetPageInfo() *GetEntityTypes_EntityTypes_PageInfo {
	if t == nil {
		t = &GetEntityTypes_EntityTypes{}
	}
	return &t.PageInfo
}
func (t *GetEntityTypes_EntityTypes) GetTotalCount() int64 {
	if t == nil {
		t = &GetEntityTypes_EntityTypes{}
	}
	return t.TotalCount
}

type UpdateEntityType_UpdateEntityType_EntityType struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	OwnerID   *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateEntityType_UpdateEntityType_EntityType) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.CreatedAt
}
func (t *UpdateEntityType_UpdateEntityType_EntityType) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.CreatedBy
}
func (t *UpdateEntityType_UpdateEntityType_EntityType) GetID() string {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.ID
}
func (t *UpdateEntityType_UpdateEntityType_EntityType) GetName() string {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.Name
}
func (t *UpdateEntityType_UpdateEntityType_EntityType) GetOwnerID() *string {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.OwnerID
}
func (t *UpdateEntityType_UpdateEntityType_EntityType) GetTags() []string {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.Tags
}
func (t *UpdateEntityType_UpdateEntityType_EntityType) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.UpdatedAt
}
func (t *UpdateEntityType_UpdateEntityType_EntityType) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.UpdatedBy
}

type UpdateEntityType_UpdateEntityType struct {
	EntityType UpdateEntityType_UpdateEntityType_EntityType "json:\"entityType\" graphql:\"entityType\""
}

func (t *UpdateEntityType_UpdateEntityType) GetEntityType() *UpdateEntityType_UpdateEntityType_EntityType {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType{}
	}
	return &t.EntityType
}

type GetAllEntityTypeHistories_EntityTypeHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllEntityTypeHistories_EntityTypeHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllEntityTypeHistories_EntityTypeHistories_Edges struct {
	Node *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges) GetNode() *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges{}
	}
	return t.Node
}

type GetAllEntityTypeHistories_EntityTypeHistories struct {
	Edges      []*GetAllEntityTypeHistories_EntityTypeHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllEntityTypeHistories_EntityTypeHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllEntityTypeHistories_EntityTypeHistories) GetEdges() []*GetAllEntityTypeHistories_EntityTypeHistories_Edges {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories{}
	}
	return t.Edges
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories) GetPageInfo() *GetAllEntityTypeHistories_EntityTypeHistories_PageInfo {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories{}
	}
	return t.TotalCount
}

type GetEntityTypeHistories_EntityTypeHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetEntityTypeHistories_EntityTypeHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetEntityTypeHistories_EntityTypeHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetEntityTypeHistories_EntityTypeHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetEntityTypeHistories_EntityTypeHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetEntityTypeHistories_EntityTypeHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetEntityTypeHistories_EntityTypeHistories_Edges struct {
	Node *GetEntityTypeHistories_EntityTypeHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntityTypeHistories_EntityTypeHistories_Edges) GetNode() *GetEntityTypeHistories_EntityTypeHistories_Edges_Node {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges{}
	}
	return t.Node
}

type GetEntityTypeHistories_EntityTypeHistories struct {
	Edges      []*GetEntityTypeHistories_EntityTypeHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetEntityTypeHistories_EntityTypeHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetEntityTypeHistories_EntityTypeHistories) GetEdges() []*GetEntityTypeHistories_EntityTypeHistories_Edges {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories{}
	}
	return t.Edges
}
func (t *GetEntityTypeHistories_EntityTypeHistories) GetPageInfo() *GetEntityTypeHistories_EntityTypeHistories_PageInfo {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories{}
	}
	return &t.PageInfo
}
func (t *GetEntityTypeHistories_EntityTypeHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events struct {
	CorrelationID *string        "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	CreatedAt     *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EventID       *string        "json:\"eventID,omitempty\" graphql:\"eventID\""
	EventType     string         "json:\"eventType\" graphql:\"eventType\""
	ID            string         "json:\"id\" graphql:\"id\""
	Metadata      map[string]any "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags          []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetCorrelationID() *string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.CorrelationID
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetEventID() *string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.EventID
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetEventType() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.EventType
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.ID
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetMetadata() map[string]any {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Metadata
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Tags
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVEvent_CreateBulkCSVEvent struct {
	Events []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events "json:\"events,omitempty\" graphql:\"events\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent) GetEvents() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent{}
	}
	return t.Events
}

type CreateBulkEvent_CreateBulkEvent_Events struct {
	CorrelationID *string        "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	CreatedAt     *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EventID       *string        "json:\"eventID,omitempty\" graphql:\"eventID\""
	EventType     string         "json:\"eventType\" graphql:\"eventType\""
	ID            string         "json:\"id\" graphql:\"id\""
	Metadata      map[string]any "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags          []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events) GetCorrelationID() *string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.CorrelationID
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.CreatedAt
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.CreatedBy
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetEventID() *string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.EventID
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetEventType() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.EventType
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.ID
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetMetadata() map[string]any {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Metadata
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetTags() []string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Tags
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.UpdatedBy
}

type CreateBulkEvent_CreateBulkEvent struct {
	Events []*CreateBulkEvent_CreateBulkEvent_Events "json:\"events,omitempty\" graphql:\"events\""
}

func (t *CreateBulkEvent_CreateBulkEvent) GetEvents() []*CreateBulkEvent_CreateBulkEvent_Events {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent{}
	}
	return t.Events
}

type CreateEvent_CreateEvent_Event struct {
	CorrelationID *string        "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	CreatedAt     *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EventID       *string        "json:\"eventID,omitempty\" graphql:\"eventID\""
	EventType     string         "json:\"eventType\" graphql:\"eventType\""
	ID            string         "json:\"id\" graphql:\"id\""
	Metadata      map[string]any "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags          []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateEvent_CreateEvent_Event) GetCorrelationID() *string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.CorrelationID
}
func (t *CreateEvent_CreateEvent_Event) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.CreatedAt
}
func (t *CreateEvent_CreateEvent_Event) GetCreatedBy() *string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.CreatedBy
}
func (t *CreateEvent_CreateEvent_Event) GetEventID() *string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.EventID
}
func (t *CreateEvent_CreateEvent_Event) GetEventType() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.EventType
}
func (t *CreateEvent_CreateEvent_Event) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.ID
}
func (t *CreateEvent_CreateEvent_Event) GetMetadata() map[string]any {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Metadata
}
func (t *CreateEvent_CreateEvent_Event) GetTags() []string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Tags
}
func (t *CreateEvent_CreateEvent_Event) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.UpdatedAt
}
func (t *CreateEvent_CreateEvent_Event) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.UpdatedBy
}

type CreateEvent_CreateEvent struct {
	Event CreateEvent_CreateEvent_Event "json:\"event\" graphql:\"event\""
}

func (t *CreateEvent_CreateEvent) GetEvent() *CreateEvent_CreateEvent_Event {
	if t == nil {
		t = &CreateEvent_CreateEvent{}
	}
	return &t.Event
}

type DeleteEvent_DeleteEvent struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteEvent_DeleteEvent) GetDeletedID() string {
	if t == nil {
		t = &DeleteEvent_DeleteEvent{}
	}
	return t.DeletedID
}

type GetAllEvents_Events_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllEvents_Events_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllEvents_Events_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllEvents_Events_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllEvents_Events_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllEvents_Events_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllEvents_Events_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllEvents_Events_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllEvents_Events_PageInfo{}
	}
	return t.StartCursor
}

type GetAllEvents_Events_Edges_Node struct {
	CorrelationID *string        "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	CreatedAt     *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EventID       *string        "json:\"eventID,omitempty\" graphql:\"eventID\""
	EventType     string         "json:\"eventType\" graphql:\"eventType\""
	ID            string         "json:\"id\" graphql:\"id\""
	Metadata      map[string]any "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags          []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllEvents_Events_Edges_Node) GetCorrelationID() *string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.CorrelationID
}
func (t *GetAllEvents_Events_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEvents_Events_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEvents_Events_Edges_Node) GetEventID() *string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.EventID
}
func (t *GetAllEvents_Events_Edges_Node) GetEventType() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.EventType
}
func (t *GetAllEvents_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEvents_Events_Edges_Node) GetMetadata() map[string]any {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetAllEvents_Events_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEvents_Events_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEvents_Events_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllEvents_Events_Edges struct {
	Node *GetAllEvents_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvents_Events_Edges) GetNode() *GetAllEvents_Events_Edges_Node {
	if t == nil {
		t = &GetAllEvents_Events_Edges{}
	}
	return t.Node
}

type GetAllEvents_Events struct {
	Edges      []*GetAllEvents_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllEvents_Events_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                        "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllEvents_Events) GetEdges() []*GetAllEvents_Events_Edges {
	if t == nil {
		t = &GetAllEvents_Events{}
	}
	return t.Edges
}
func (t *GetAllEvents_Events) GetPageInfo() *GetAllEvents_Events_PageInfo {
	if t == nil {
		t = &GetAllEvents_Events{}
	}
	return &t.PageInfo
}
func (t *GetAllEvents_Events) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllEvents_Events{}
	}
	return t.TotalCount
}

type GetEventByID_Event struct {
	CorrelationID *string        "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	CreatedAt     *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EventID       *string        "json:\"eventID,omitempty\" graphql:\"eventID\""
	EventType     string         "json:\"eventType\" graphql:\"eventType\""
	ID            string         "json:\"id\" graphql:\"id\""
	Metadata      map[string]any "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags          []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEventByID_Event) GetCorrelationID() *string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.CorrelationID
}
func (t *GetEventByID_Event) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.CreatedAt
}
func (t *GetEventByID_Event) GetCreatedBy() *string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.CreatedBy
}
func (t *GetEventByID_Event) GetEventID() *string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.EventID
}
func (t *GetEventByID_Event) GetEventType() string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.EventType
}
func (t *GetEventByID_Event) GetID() string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.ID
}
func (t *GetEventByID_Event) GetMetadata() map[string]any {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Metadata
}
func (t *GetEventByID_Event) GetTags() []string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Tags
}
func (t *GetEventByID_Event) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.UpdatedAt
}
func (t *GetEventByID_Event) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.UpdatedBy
}

type GetEvents_Events_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetEvents_Events_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetEvents_Events_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetEvents_Events_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetEvents_Events_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetEvents_Events_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetEvents_Events_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetEvents_Events_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetEvents_Events_PageInfo{}
	}
	return t.StartCursor
}

type GetEvents_Events_Edges_Node struct {
	CorrelationID *string        "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	CreatedAt     *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EventID       *string        "json:\"eventID,omitempty\" graphql:\"eventID\""
	EventType     string         "json:\"eventType\" graphql:\"eventType\""
	ID            string         "json:\"id\" graphql:\"id\""
	Metadata      map[string]any "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags          []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEvents_Events_Edges_Node) GetCorrelationID() *string {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.CorrelationID
}
func (t *GetEvents_Events_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetEvents_Events_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetEvents_Events_Edges_Node) GetEventID() *string {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.EventID
}
func (t *GetEvents_Events_Edges_Node) GetEventType() string {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.EventType
}
func (t *GetEvents_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.ID
}
func (t *GetEvents_Events_Edges_Node) GetMetadata() map[string]any {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetEvents_Events_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEvents_Events_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEvents_Events_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetEvents_Events_Edges struct {
	Node *GetEvents_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvents_Events_Edges) GetNode() *GetEvents_Events_Edges_Node {
	if t == nil {
		t = &GetEvents_Events_Edges{}
	}
	return t.Node
}

type GetEvents_Events struct {
	Edges      []*GetEvents_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetEvents_Events_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetEvents_Events) GetEdges() []*GetEvents_Events_Edges {
	if t == nil {
		t = &GetEvents_Events{}
	}
	return t.Edges
}
func (t *GetEvents_Events) GetPageInfo() *GetEvents_Events_PageInfo {
	if t == nil {
		t = &GetEvents_Events{}
	}
	return &t.PageInfo
}
func (t *GetEvents_Events) GetTotalCount() int64 {
	if t == nil {
		t = &GetEvents_Events{}
	}
	return t.TotalCount
}

type UpdateEvent_UpdateEvent_Event struct {
	CorrelationID *string        "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	CreatedAt     *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EventID       *string        "json:\"eventID,omitempty\" graphql:\"eventID\""
	EventType     string         "json:\"eventType\" graphql:\"eventType\""
	ID            string         "json:\"id\" graphql:\"id\""
	Metadata      map[string]any "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags          []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateEvent_UpdateEvent_Event) GetCorrelationID() *string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.CorrelationID
}
func (t *UpdateEvent_UpdateEvent_Event) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.CreatedAt
}
func (t *UpdateEvent_UpdateEvent_Event) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.CreatedBy
}
func (t *UpdateEvent_UpdateEvent_Event) GetEventID() *string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.EventID
}
func (t *UpdateEvent_UpdateEvent_Event) GetEventType() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.EventType
}
func (t *UpdateEvent_UpdateEvent_Event) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.ID
}
func (t *UpdateEvent_UpdateEvent_Event) GetMetadata() map[string]any {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Metadata
}
func (t *UpdateEvent_UpdateEvent_Event) GetTags() []string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Tags
}
func (t *UpdateEvent_UpdateEvent_Event) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.UpdatedAt
}
func (t *UpdateEvent_UpdateEvent_Event) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.UpdatedBy
}

type UpdateEvent_UpdateEvent struct {
	Event UpdateEvent_UpdateEvent_Event "json:\"event\" graphql:\"event\""
}

func (t *UpdateEvent_UpdateEvent) GetEvent() *UpdateEvent_UpdateEvent_Event {
	if t == nil {
		t = &UpdateEvent_UpdateEvent{}
	}
	return &t.Event
}

type CreateEvidence_CreateEvidence_Evidence_Files_Edges_Node struct {
	ID           string  "json:\"id\" graphql:\"id\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Files_Edges_Node{}
	}
	return t.ID
}
func (t *CreateEvidence_CreateEvidence_Evidence_Files_Edges_Node) GetPresignedURL() *string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Files_Edges_Node{}
	}
	return t.PresignedURL
}

type CreateEvidence_CreateEvidence_Evidence_Files_Edges struct {
	Node *CreateEvidence_CreateEvidence_Evidence_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_Files_Edges) GetNode() *CreateEvidence_CreateEvidence_Evidence_Files_Edges_Node {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Files_Edges{}
	}
	return t.Node
}

type CreateEvidence_CreateEvidence_Evidence_Files struct {
	Edges      []*CreateEvidence_CreateEvidence_Evidence_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_Files) GetEdges() []*CreateEvidence_CreateEvidence_Evidence_Files_Edges {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Files{}
	}
	return t.Edges
}
func (t *CreateEvidence_CreateEvidence_Evidence_Files) GetTotalCount() int64 {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Files{}
	}
	return t.TotalCount
}

type CreateEvidence_CreateEvidence_Evidence_Controls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *CreateEvidence_CreateEvidence_Evidence_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Controls_Edges_Node{}
	}
	return t.RefCode
}

type CreateEvidence_CreateEvidence_Evidence_Controls_Edges struct {
	Node *CreateEvidence_CreateEvidence_Evidence_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_Controls_Edges) GetNode() *CreateEvidence_CreateEvidence_Evidence_Controls_Edges_Node {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Controls_Edges{}
	}
	return t.Node
}

type CreateEvidence_CreateEvidence_Evidence_Controls struct {
	Edges []*CreateEvidence_CreateEvidence_Evidence_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_Controls) GetEdges() []*CreateEvidence_CreateEvidence_Evidence_Controls_Edges {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Controls{}
	}
	return t.Edges
}

type CreateEvidence_CreateEvidence_Evidence struct {
	CollectionProcedure *string                                         "json:\"collectionProcedure,omitempty\" graphql:\"collectionProcedure\""
	Controls            CreateEvidence_CreateEvidence_Evidence_Controls "json:\"controls\" graphql:\"controls\""
	CreatedAt           *time.Time                                      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string                                         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	CreationDate        time.Time                                       "json:\"creationDate\" graphql:\"creationDate\""
	Description         *string                                         "json:\"description,omitempty\" graphql:\"description\""
	DisplayID           string                                          "json:\"displayID\" graphql:\"displayID\""
	Files               CreateEvidence_CreateEvidence_Evidence_Files    "json:\"files\" graphql:\"files\""
	ID                  string                                          "json:\"id\" graphql:\"id\""
	IsAutomated         *bool                                           "json:\"isAutomated,omitempty\" graphql:\"isAutomated\""
	Name                string                                          "json:\"name\" graphql:\"name\""
	OwnerID             *string                                         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RenewalDate         *time.Time                                      "json:\"renewalDate,omitempty\" graphql:\"renewalDate\""
	Source              *string                                         "json:\"source,omitempty\" graphql:\"source\""
	Status              *enums.EvidenceStatus                           "json:\"status,omitempty\" graphql:\"status\""
	Tags                []string                                        "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt           *time.Time                                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string                                         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URL                 *string                                         "json:\"url,omitempty\" graphql:\"url\""
}

func (t *CreateEvidence_CreateEvidence_Evidence) GetCollectionProcedure() *string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.CollectionProcedure
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetControls() *CreateEvidence_CreateEvidence_Evidence_Controls {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return &t.Controls
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.CreatedAt
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetCreatedBy() *string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.CreatedBy
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetCreationDate() *time.Time {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return &t.CreationDate
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetDescription() *string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.Description
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetDisplayID() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.DisplayID
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetFiles() *CreateEvidence_CreateEvidence_Evidence_Files {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return &t.Files
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetID() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.ID
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetIsAutomated() *bool {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.IsAutomated
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetName() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.Name
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetOwnerID() *string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.OwnerID
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetRenewalDate() *time.Time {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.RenewalDate
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetSource() *string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.Source
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetStatus() *enums.EvidenceStatus {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.Status
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetTags() []string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.Tags
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.UpdatedAt
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.UpdatedBy
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetURL() *string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.URL
}

type CreateEvidence_CreateEvidence struct {
	Evidence CreateEvidence_CreateEvidence_Evidence "json:\"evidence\" graphql:\"evidence\""
}

func (t *CreateEvidence_CreateEvidence) GetEvidence() *CreateEvidence_CreateEvidence_Evidence {
	if t == nil {
		t = &CreateEvidence_CreateEvidence{}
	}
	return &t.Evidence
}

type DeleteEvidence_DeleteEvidence struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteEvidence_DeleteEvidence) GetDeletedID() string {
	if t == nil {
		t = &DeleteEvidence_DeleteEvidence{}
	}
	return t.DeletedID
}

type GetAllEvidences_Evidences_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllEvidences_Evidences_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllEvidences_Evidences_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllEvidences_Evidences_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllEvidences_Evidences_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllEvidences_Evidences_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllEvidences_Evidences_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllEvidences_Evidences_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllEvidences_Evidences_PageInfo{}
	}
	return t.StartCursor
}

type GetAllEvidences_Evidences_Edges_Node_Files_Edges_Node struct {
	ID           string  "json:\"id\" graphql:\"id\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEvidences_Evidences_Edges_Node_Files_Edges_Node) GetPresignedURL() *string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Files_Edges_Node{}
	}
	return t.PresignedURL
}

type GetAllEvidences_Evidences_Edges_Node_Files_Edges struct {
	Node *GetAllEvidences_Evidences_Edges_Node_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_Files_Edges) GetNode() *GetAllEvidences_Evidences_Edges_Node_Files_Edges_Node {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Files_Edges{}
	}
	return t.Node
}

type GetAllEvidences_Evidences_Edges_Node_Files struct {
	Edges      []*GetAllEvidences_Evidences_Edges_Node_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_Files) GetEdges() []*GetAllEvidences_Evidences_Edges_Node_Files_Edges {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Files{}
	}
	return t.Edges
}
func (t *GetAllEvidences_Evidences_Edges_Node_Files) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Files{}
	}
	return t.TotalCount
}

type GetAllEvidences_Evidences_Edges_Node_Controls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEvidences_Evidences_Edges_Node_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetAllEvidences_Evidences_Edges_Node_Controls_Edges struct {
	Node *GetAllEvidences_Evidences_Edges_Node_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_Controls_Edges) GetNode() *GetAllEvidences_Evidences_Edges_Node_Controls_Edges_Node {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Controls_Edges{}
	}
	return t.Node
}

type GetAllEvidences_Evidences_Edges_Node_Controls struct {
	Edges []*GetAllEvidences_Evidences_Edges_Node_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_Controls) GetEdges() []*GetAllEvidences_Evidences_Edges_Node_Controls_Edges {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Controls{}
	}
	return t.Edges
}

type GetAllEvidences_Evidences_Edges_Node struct {
	CollectionProcedure *string                                       "json:\"collectionProcedure,omitempty\" graphql:\"collectionProcedure\""
	Controls            GetAllEvidences_Evidences_Edges_Node_Controls "json:\"controls\" graphql:\"controls\""
	CreatedAt           *time.Time                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	CreationDate        time.Time                                     "json:\"creationDate\" graphql:\"creationDate\""
	Description         *string                                       "json:\"description,omitempty\" graphql:\"description\""
	DisplayID           string                                        "json:\"displayID\" graphql:\"displayID\""
	Files               GetAllEvidences_Evidences_Edges_Node_Files    "json:\"files\" graphql:\"files\""
	ID                  string                                        "json:\"id\" graphql:\"id\""
	IsAutomated         *bool                                         "json:\"isAutomated,omitempty\" graphql:\"isAutomated\""
	Name                string                                        "json:\"name\" graphql:\"name\""
	OwnerID             *string                                       "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RenewalDate         *time.Time                                    "json:\"renewalDate,omitempty\" graphql:\"renewalDate\""
	Source              *string                                       "json:\"source,omitempty\" graphql:\"source\""
	Status              *enums.EvidenceStatus                         "json:\"status,omitempty\" graphql:\"status\""
	Tags                []string                                      "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt           *time.Time                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URL                 *string                                       "json:\"url,omitempty\" graphql:\"url\""
}

func (t *GetAllEvidences_Evidences_Edges_Node) GetCollectionProcedure() *string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.CollectionProcedure
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetControls() *GetAllEvidences_Evidences_Edges_Node_Controls {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return &t.Controls
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetCreationDate() *time.Time {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return &t.CreationDate
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetFiles() *GetAllEvidences_Evidences_Edges_Node_Files {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return &t.Files
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetIsAutomated() *bool {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.IsAutomated
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetRenewalDate() *time.Time {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.RenewalDate
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetStatus() *enums.EvidenceStatus {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetURL() *string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.URL
}

type GetAllEvidences_Evidences_Edges struct {
	Node *GetAllEvidences_Evidences_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvidences_Evidences_Edges) GetNode() *GetAllEvidences_Evidences_Edges_Node {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges{}
	}
	return t.Node
}

type GetAllEvidences_Evidences struct {
	Edges      []*GetAllEvidences_Evidences_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllEvidences_Evidences_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllEvidences_Evidences) GetEdges() []*GetAllEvidences_Evidences_Edges {
	if t == nil {
		t = &GetAllEvidences_Evidences{}
	}
	return t.Edges
}
func (t *GetAllEvidences_Evidences) GetPageInfo() *GetAllEvidences_Evidences_PageInfo {
	if t == nil {
		t = &GetAllEvidences_Evidences{}
	}
	return &t.PageInfo
}
func (t *GetAllEvidences_Evidences) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllEvidences_Evidences{}
	}
	return t.TotalCount
}

type GetEvidenceByID_Evidence_Files_Edges_Node struct {
	ID           string  "json:\"id\" graphql:\"id\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetEvidenceByID_Evidence_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GetEvidenceByID_Evidence_Files_Edges_Node) GetPresignedURL() *string {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Files_Edges_Node{}
	}
	return t.PresignedURL
}

type GetEvidenceByID_Evidence_Files_Edges struct {
	Node *GetEvidenceByID_Evidence_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvidenceByID_Evidence_Files_Edges) GetNode() *GetEvidenceByID_Evidence_Files_Edges_Node {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Files_Edges{}
	}
	return t.Node
}

type GetEvidenceByID_Evidence_Files struct {
	Edges      []*GetEvidenceByID_Evidence_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetEvidenceByID_Evidence_Files) GetEdges() []*GetEvidenceByID_Evidence_Files_Edges {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Files{}
	}
	return t.Edges
}
func (t *GetEvidenceByID_Evidence_Files) GetTotalCount() int64 {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Files{}
	}
	return t.TotalCount
}

type GetEvidenceByID_Evidence_Controls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetEvidenceByID_Evidence_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetEvidenceByID_Evidence_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetEvidenceByID_Evidence_Controls_Edges struct {
	Node *GetEvidenceByID_Evidence_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvidenceByID_Evidence_Controls_Edges) GetNode() *GetEvidenceByID_Evidence_Controls_Edges_Node {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Controls_Edges{}
	}
	return t.Node
}

type GetEvidenceByID_Evidence_Controls struct {
	Edges []*GetEvidenceByID_Evidence_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEvidenceByID_Evidence_Controls) GetEdges() []*GetEvidenceByID_Evidence_Controls_Edges {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Controls{}
	}
	return t.Edges
}

type GetEvidenceByID_Evidence struct {
	CollectionProcedure *string                           "json:\"collectionProcedure,omitempty\" graphql:\"collectionProcedure\""
	Controls            GetEvidenceByID_Evidence_Controls "json:\"controls\" graphql:\"controls\""
	CreatedAt           *time.Time                        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string                           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	CreationDate        time.Time                         "json:\"creationDate\" graphql:\"creationDate\""
	Description         *string                           "json:\"description,omitempty\" graphql:\"description\""
	DisplayID           string                            "json:\"displayID\" graphql:\"displayID\""
	Files               GetEvidenceByID_Evidence_Files    "json:\"files\" graphql:\"files\""
	ID                  string                            "json:\"id\" graphql:\"id\""
	IsAutomated         *bool                             "json:\"isAutomated,omitempty\" graphql:\"isAutomated\""
	Name                string                            "json:\"name\" graphql:\"name\""
	OwnerID             *string                           "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RenewalDate         *time.Time                        "json:\"renewalDate,omitempty\" graphql:\"renewalDate\""
	Source              *string                           "json:\"source,omitempty\" graphql:\"source\""
	Status              *enums.EvidenceStatus             "json:\"status,omitempty\" graphql:\"status\""
	Tags                []string                          "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt           *time.Time                        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string                           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URL                 *string                           "json:\"url,omitempty\" graphql:\"url\""
}

func (t *GetEvidenceByID_Evidence) GetCollectionProcedure() *string {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.CollectionProcedure
}
func (t *GetEvidenceByID_Evidence) GetControls() *GetEvidenceByID_Evidence_Controls {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return &t.Controls
}
func (t *GetEvidenceByID_Evidence) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.CreatedAt
}
func (t *GetEvidenceByID_Evidence) GetCreatedBy() *string {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.CreatedBy
}
func (t *GetEvidenceByID_Evidence) GetCreationDate() *time.Time {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return &t.CreationDate
}
func (t *GetEvidenceByID_Evidence) GetDescription() *string {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.Description
}
func (t *GetEvidenceByID_Evidence) GetDisplayID() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.DisplayID
}
func (t *GetEvidenceByID_Evidence) GetFiles() *GetEvidenceByID_Evidence_Files {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return &t.Files
}
func (t *GetEvidenceByID_Evidence) GetID() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.ID
}
func (t *GetEvidenceByID_Evidence) GetIsAutomated() *bool {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.IsAutomated
}
func (t *GetEvidenceByID_Evidence) GetName() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.Name
}
func (t *GetEvidenceByID_Evidence) GetOwnerID() *string {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.OwnerID
}
func (t *GetEvidenceByID_Evidence) GetRenewalDate() *time.Time {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.RenewalDate
}
func (t *GetEvidenceByID_Evidence) GetSource() *string {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.Source
}
func (t *GetEvidenceByID_Evidence) GetStatus() *enums.EvidenceStatus {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.Status
}
func (t *GetEvidenceByID_Evidence) GetTags() []string {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.Tags
}
func (t *GetEvidenceByID_Evidence) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.UpdatedAt
}
func (t *GetEvidenceByID_Evidence) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.UpdatedBy
}
func (t *GetEvidenceByID_Evidence) GetURL() *string {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.URL
}

type GetEvidences_Evidences_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetEvidences_Evidences_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetEvidences_Evidences_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetEvidences_Evidences_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetEvidences_Evidences_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetEvidences_Evidences_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetEvidences_Evidences_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetEvidences_Evidences_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetEvidences_Evidences_PageInfo{}
	}
	return t.StartCursor
}

type GetEvidences_Evidences_Edges_Node_Files_Edges_Node struct {
	ID           string  "json:\"id\" graphql:\"id\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetEvidences_Evidences_Edges_Node_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GetEvidences_Evidences_Edges_Node_Files_Edges_Node) GetPresignedURL() *string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Files_Edges_Node{}
	}
	return t.PresignedURL
}

type GetEvidences_Evidences_Edges_Node_Files_Edges struct {
	Node *GetEvidences_Evidences_Edges_Node_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvidences_Evidences_Edges_Node_Files_Edges) GetNode() *GetEvidences_Evidences_Edges_Node_Files_Edges_Node {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Files_Edges{}
	}
	return t.Node
}

type GetEvidences_Evidences_Edges_Node_Files struct {
	Edges      []*GetEvidences_Evidences_Edges_Node_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                            "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetEvidences_Evidences_Edges_Node_Files) GetEdges() []*GetEvidences_Evidences_Edges_Node_Files_Edges {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Files{}
	}
	return t.Edges
}
func (t *GetEvidences_Evidences_Edges_Node_Files) GetTotalCount() int64 {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Files{}
	}
	return t.TotalCount
}

type GetEvidences_Evidences_Edges_Node_Controls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetEvidences_Evidences_Edges_Node_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetEvidences_Evidences_Edges_Node_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetEvidences_Evidences_Edges_Node_Controls_Edges struct {
	Node *GetEvidences_Evidences_Edges_Node_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvidences_Evidences_Edges_Node_Controls_Edges) GetNode() *GetEvidences_Evidences_Edges_Node_Controls_Edges_Node {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Controls_Edges{}
	}
	return t.Node
}

type GetEvidences_Evidences_Edges_Node_Controls struct {
	Edges []*GetEvidences_Evidences_Edges_Node_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEvidences_Evidences_Edges_Node_Controls) GetEdges() []*GetEvidences_Evidences_Edges_Node_Controls_Edges {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Controls{}
	}
	return t.Edges
}

type GetEvidences_Evidences_Edges_Node struct {
	CollectionProcedure *string                                    "json:\"collectionProcedure,omitempty\" graphql:\"collectionProcedure\""
	Controls            GetEvidences_Evidences_Edges_Node_Controls "json:\"controls\" graphql:\"controls\""
	CreatedAt           *time.Time                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	CreationDate        time.Time                                  "json:\"creationDate\" graphql:\"creationDate\""
	Description         *string                                    "json:\"description,omitempty\" graphql:\"description\""
	DisplayID           string                                     "json:\"displayID\" graphql:\"displayID\""
	Files               GetEvidences_Evidences_Edges_Node_Files    "json:\"files\" graphql:\"files\""
	ID                  string                                     "json:\"id\" graphql:\"id\""
	IsAutomated         *bool                                      "json:\"isAutomated,omitempty\" graphql:\"isAutomated\""
	Name                string                                     "json:\"name\" graphql:\"name\""
	OwnerID             *string                                    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RenewalDate         *time.Time                                 "json:\"renewalDate,omitempty\" graphql:\"renewalDate\""
	Source              *string                                    "json:\"source,omitempty\" graphql:\"source\""
	Status              *enums.EvidenceStatus                      "json:\"status,omitempty\" graphql:\"status\""
	Tags                []string                                   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt           *time.Time                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URL                 *string                                    "json:\"url,omitempty\" graphql:\"url\""
}

func (t *GetEvidences_Evidences_Edges_Node) GetCollectionProcedure() *string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.CollectionProcedure
}
func (t *GetEvidences_Evidences_Edges_Node) GetControls() *GetEvidences_Evidences_Edges_Node_Controls {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return &t.Controls
}
func (t *GetEvidences_Evidences_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetEvidences_Evidences_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetEvidences_Evidences_Edges_Node) GetCreationDate() *time.Time {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return &t.CreationDate
}
func (t *GetEvidences_Evidences_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.Description
}
func (t *GetEvidences_Evidences_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetEvidences_Evidences_Edges_Node) GetFiles() *GetEvidences_Evidences_Edges_Node_Files {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return &t.Files
}
func (t *GetEvidences_Evidences_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.ID
}
func (t *GetEvidences_Evidences_Edges_Node) GetIsAutomated() *bool {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.IsAutomated
}
func (t *GetEvidences_Evidences_Edges_Node) GetName() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.Name
}
func (t *GetEvidences_Evidences_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetEvidences_Evidences_Edges_Node) GetRenewalDate() *time.Time {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.RenewalDate
}
func (t *GetEvidences_Evidences_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.Source
}
func (t *GetEvidences_Evidences_Edges_Node) GetStatus() *enums.EvidenceStatus {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.Status
}
func (t *GetEvidences_Evidences_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEvidences_Evidences_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEvidences_Evidences_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetEvidences_Evidences_Edges_Node) GetURL() *string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.URL
}

type GetEvidences_Evidences_Edges struct {
	Node *GetEvidences_Evidences_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvidences_Evidences_Edges) GetNode() *GetEvidences_Evidences_Edges_Node {
	if t == nil {
		t = &GetEvidences_Evidences_Edges{}
	}
	return t.Node
}

type GetEvidences_Evidences struct {
	Edges      []*GetEvidences_Evidences_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetEvidences_Evidences_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                           "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetEvidences_Evidences) GetEdges() []*GetEvidences_Evidences_Edges {
	if t == nil {
		t = &GetEvidences_Evidences{}
	}
	return t.Edges
}
func (t *GetEvidences_Evidences) GetPageInfo() *GetEvidences_Evidences_PageInfo {
	if t == nil {
		t = &GetEvidences_Evidences{}
	}
	return &t.PageInfo
}
func (t *GetEvidences_Evidences) GetTotalCount() int64 {
	if t == nil {
		t = &GetEvidences_Evidences{}
	}
	return t.TotalCount
}

type UpdateEvidence_UpdateEvidence_Evidence_Files_Edges_Node struct {
	ID           string  "json:\"id\" graphql:\"id\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Files_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateEvidence_UpdateEvidence_Evidence_Files_Edges_Node) GetPresignedURL() *string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Files_Edges_Node{}
	}
	return t.PresignedURL
}

type UpdateEvidence_UpdateEvidence_Evidence_Files_Edges struct {
	Node *UpdateEvidence_UpdateEvidence_Evidence_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_Files_Edges) GetNode() *UpdateEvidence_UpdateEvidence_Evidence_Files_Edges_Node {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Files_Edges{}
	}
	return t.Node
}

type UpdateEvidence_UpdateEvidence_Evidence_Files struct {
	Edges      []*UpdateEvidence_UpdateEvidence_Evidence_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_Files) GetEdges() []*UpdateEvidence_UpdateEvidence_Evidence_Files_Edges {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Files{}
	}
	return t.Edges
}
func (t *UpdateEvidence_UpdateEvidence_Evidence_Files) GetTotalCount() int64 {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Files{}
	}
	return t.TotalCount
}

type UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges_Node{}
	}
	return t.RefCode
}

type UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges struct {
	Node *UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges) GetNode() *UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges_Node {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges{}
	}
	return t.Node
}

type UpdateEvidence_UpdateEvidence_Evidence_Controls struct {
	Edges []*UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_Controls) GetEdges() []*UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Controls{}
	}
	return t.Edges
}

type UpdateEvidence_UpdateEvidence_Evidence struct {
	CollectionProcedure *string                                         "json:\"collectionProcedure,omitempty\" graphql:\"collectionProcedure\""
	Controls            UpdateEvidence_UpdateEvidence_Evidence_Controls "json:\"controls\" graphql:\"controls\""
	CreatedAt           *time.Time                                      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string                                         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	CreationDate        time.Time                                       "json:\"creationDate\" graphql:\"creationDate\""
	Description         *string                                         "json:\"description,omitempty\" graphql:\"description\""
	DisplayID           string                                          "json:\"displayID\" graphql:\"displayID\""
	Files               UpdateEvidence_UpdateEvidence_Evidence_Files    "json:\"files\" graphql:\"files\""
	ID                  string                                          "json:\"id\" graphql:\"id\""
	IsAutomated         *bool                                           "json:\"isAutomated,omitempty\" graphql:\"isAutomated\""
	Name                string                                          "json:\"name\" graphql:\"name\""
	OwnerID             *string                                         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RenewalDate         *time.Time                                      "json:\"renewalDate,omitempty\" graphql:\"renewalDate\""
	Source              *string                                         "json:\"source,omitempty\" graphql:\"source\""
	Status              *enums.EvidenceStatus                           "json:\"status,omitempty\" graphql:\"status\""
	Tags                []string                                        "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt           *time.Time                                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string                                         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URL                 *string                                         "json:\"url,omitempty\" graphql:\"url\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence) GetCollectionProcedure() *string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.CollectionProcedure
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetControls() *UpdateEvidence_UpdateEvidence_Evidence_Controls {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return &t.Controls
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.CreatedAt
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.CreatedBy
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetCreationDate() *time.Time {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return &t.CreationDate
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetDescription() *string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.Description
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetDisplayID() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.DisplayID
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetFiles() *UpdateEvidence_UpdateEvidence_Evidence_Files {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return &t.Files
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetID() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.ID
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetIsAutomated() *bool {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.IsAutomated
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetName() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.Name
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetOwnerID() *string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.OwnerID
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetRenewalDate() *time.Time {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.RenewalDate
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetSource() *string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.Source
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetStatus() *enums.EvidenceStatus {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.Status
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetTags() []string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.Tags
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.UpdatedAt
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.UpdatedBy
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetURL() *string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.URL
}

type UpdateEvidence_UpdateEvidence struct {
	Evidence UpdateEvidence_UpdateEvidence_Evidence "json:\"evidence\" graphql:\"evidence\""
}

func (t *UpdateEvidence_UpdateEvidence) GetEvidence() *UpdateEvidence_UpdateEvidence_Evidence {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence{}
	}
	return &t.Evidence
}

type GetAllEvidenceHistories_EvidenceHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllEvidenceHistories_EvidenceHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllEvidenceHistories_EvidenceHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllEvidenceHistories_EvidenceHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllEvidenceHistories_EvidenceHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllEvidenceHistories_EvidenceHistories_Edges_Node struct {
	CollectionProcedure *string               "json:\"collectionProcedure,omitempty\" graphql:\"collectionProcedure\""
	CreatedAt           *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	CreationDate        time.Time             "json:\"creationDate\" graphql:\"creationDate\""
	Description         *string               "json:\"description,omitempty\" graphql:\"description\""
	DisplayID           string                "json:\"displayID\" graphql:\"displayID\""
	HistoryTime         time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID                  string                "json:\"id\" graphql:\"id\""
	IsAutomated         *bool                 "json:\"isAutomated,omitempty\" graphql:\"isAutomated\""
	Name                string                "json:\"name\" graphql:\"name\""
	Operation           history.OpType        "json:\"operation\" graphql:\"operation\""
	OwnerID             *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                 *string               "json:\"ref,omitempty\" graphql:\"ref\""
	RenewalDate         *time.Time            "json:\"renewalDate,omitempty\" graphql:\"renewalDate\""
	Source              *string               "json:\"source,omitempty\" graphql:\"source\""
	Status              *enums.EvidenceStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags                []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt           *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URL                 *string               "json:\"url,omitempty\" graphql:\"url\""
}

func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetCollectionProcedure() *string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.CollectionProcedure
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetCreationDate() *time.Time {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return &t.CreationDate
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetIsAutomated() *bool {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.IsAutomated
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetRenewalDate() *time.Time {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.RenewalDate
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetStatus() *enums.EvidenceStatus {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetURL() *string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.URL
}

type GetAllEvidenceHistories_EvidenceHistories_Edges struct {
	Node *GetAllEvidenceHistories_EvidenceHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvidenceHistories_EvidenceHistories_Edges) GetNode() *GetAllEvidenceHistories_EvidenceHistories_Edges_Node {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges{}
	}
	return t.Node
}

type GetAllEvidenceHistories_EvidenceHistories struct {
	Edges      []*GetAllEvidenceHistories_EvidenceHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllEvidenceHistories_EvidenceHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllEvidenceHistories_EvidenceHistories) GetEdges() []*GetAllEvidenceHistories_EvidenceHistories_Edges {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories{}
	}
	return t.Edges
}
func (t *GetAllEvidenceHistories_EvidenceHistories) GetPageInfo() *GetAllEvidenceHistories_EvidenceHistories_PageInfo {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllEvidenceHistories_EvidenceHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories{}
	}
	return t.TotalCount
}

type GetEvidenceHistories_EvidenceHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetEvidenceHistories_EvidenceHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetEvidenceHistories_EvidenceHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetEvidenceHistories_EvidenceHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetEvidenceHistories_EvidenceHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetEvidenceHistories_EvidenceHistories_Edges_Node struct {
	CollectionProcedure *string               "json:\"collectionProcedure,omitempty\" graphql:\"collectionProcedure\""
	CreatedAt           *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	CreationDate        time.Time             "json:\"creationDate\" graphql:\"creationDate\""
	Description         *string               "json:\"description,omitempty\" graphql:\"description\""
	DisplayID           string                "json:\"displayID\" graphql:\"displayID\""
	HistoryTime         time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID                  string                "json:\"id\" graphql:\"id\""
	IsAutomated         *bool                 "json:\"isAutomated,omitempty\" graphql:\"isAutomated\""
	Name                string                "json:\"name\" graphql:\"name\""
	Operation           history.OpType        "json:\"operation\" graphql:\"operation\""
	OwnerID             *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                 *string               "json:\"ref,omitempty\" graphql:\"ref\""
	RenewalDate         *time.Time            "json:\"renewalDate,omitempty\" graphql:\"renewalDate\""
	Source              *string               "json:\"source,omitempty\" graphql:\"source\""
	Status              *enums.EvidenceStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags                []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt           *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URL                 *string               "json:\"url,omitempty\" graphql:\"url\""
}

func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetCollectionProcedure() *string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.CollectionProcedure
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetCreationDate() *time.Time {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return &t.CreationDate
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetIsAutomated() *bool {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.IsAutomated
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetRenewalDate() *time.Time {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.RenewalDate
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetStatus() *enums.EvidenceStatus {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetURL() *string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.URL
}

type GetEvidenceHistories_EvidenceHistories_Edges struct {
	Node *GetEvidenceHistories_EvidenceHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvidenceHistories_EvidenceHistories_Edges) GetNode() *GetEvidenceHistories_EvidenceHistories_Edges_Node {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges{}
	}
	return t.Node
}

type GetEvidenceHistories_EvidenceHistories struct {
	Edges      []*GetEvidenceHistories_EvidenceHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetEvidenceHistories_EvidenceHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                           "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetEvidenceHistories_EvidenceHistories) GetEdges() []*GetEvidenceHistories_EvidenceHistories_Edges {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories{}
	}
	return t.Edges
}
func (t *GetEvidenceHistories_EvidenceHistories) GetPageInfo() *GetEvidenceHistories_EvidenceHistories_PageInfo {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories{}
	}
	return &t.PageInfo
}
func (t *GetEvidenceHistories_EvidenceHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories{}
	}
	return t.TotalCount
}

type CreateExport_CreateExport_Export struct {
	CreatedAt    *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ErrorMessage *string            "json:\"errorMessage,omitempty\" graphql:\"errorMessage\""
	ExportType   enums.ExportType   "json:\"exportType\" graphql:\"exportType\""
	Fields       []string           "json:\"fields,omitempty\" graphql:\"fields\""
	Filters      *string            "json:\"filters,omitempty\" graphql:\"filters\""
	Format       enums.ExportFormat "json:\"format\" graphql:\"format\""
	ID           string             "json:\"id\" graphql:\"id\""
	OwnerID      *string            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RequestorID  *string            "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Status       enums.ExportStatus "json:\"status\" graphql:\"status\""
	UpdatedAt    *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateExport_CreateExport_Export) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateExport_CreateExport_Export{}
	}
	return t.CreatedAt
}
func (t *CreateExport_CreateExport_Export) GetCreatedBy() *string {
	if t == nil {
		t = &CreateExport_CreateExport_Export{}
	}
	return t.CreatedBy
}
func (t *CreateExport_CreateExport_Export) GetErrorMessage() *string {
	if t == nil {
		t = &CreateExport_CreateExport_Export{}
	}
	return t.ErrorMessage
}
func (t *CreateExport_CreateExport_Export) GetExportType() *enums.ExportType {
	if t == nil {
		t = &CreateExport_CreateExport_Export{}
	}
	return &t.ExportType
}
func (t *CreateExport_CreateExport_Export) GetFields() []string {
	if t == nil {
		t = &CreateExport_CreateExport_Export{}
	}
	return t.Fields
}
func (t *CreateExport_CreateExport_Export) GetFilters() *string {
	if t == nil {
		t = &CreateExport_CreateExport_Export{}
	}
	return t.Filters
}
func (t *CreateExport_CreateExport_Export) GetFormat() *enums.ExportFormat {
	if t == nil {
		t = &CreateExport_CreateExport_Export{}
	}
	return &t.Format
}
func (t *CreateExport_CreateExport_Export) GetID() string {
	if t == nil {
		t = &CreateExport_CreateExport_Export{}
	}
	return t.ID
}
func (t *CreateExport_CreateExport_Export) GetOwnerID() *string {
	if t == nil {
		t = &CreateExport_CreateExport_Export{}
	}
	return t.OwnerID
}
func (t *CreateExport_CreateExport_Export) GetRequestorID() *string {
	if t == nil {
		t = &CreateExport_CreateExport_Export{}
	}
	return t.RequestorID
}
func (t *CreateExport_CreateExport_Export) GetStatus() *enums.ExportStatus {
	if t == nil {
		t = &CreateExport_CreateExport_Export{}
	}
	return &t.Status
}
func (t *CreateExport_CreateExport_Export) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateExport_CreateExport_Export{}
	}
	return t.UpdatedAt
}
func (t *CreateExport_CreateExport_Export) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateExport_CreateExport_Export{}
	}
	return t.UpdatedBy
}

type CreateExport_CreateExport struct {
	Export CreateExport_CreateExport_Export "json:\"export\" graphql:\"export\""
}

func (t *CreateExport_CreateExport) GetExport() *CreateExport_CreateExport_Export {
	if t == nil {
		t = &CreateExport_CreateExport{}
	}
	return &t.Export
}

type GetAllExports_Exports_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllExports_Exports_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllExports_Exports_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllExports_Exports_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllExports_Exports_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllExports_Exports_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllExports_Exports_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllExports_Exports_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllExports_Exports_PageInfo{}
	}
	return t.StartCursor
}

type GetAllExports_Exports_Edges_Node struct {
	CreatedAt    *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ErrorMessage *string            "json:\"errorMessage,omitempty\" graphql:\"errorMessage\""
	ExportType   enums.ExportType   "json:\"exportType\" graphql:\"exportType\""
	Fields       []string           "json:\"fields,omitempty\" graphql:\"fields\""
	Filters      *string            "json:\"filters,omitempty\" graphql:\"filters\""
	Format       enums.ExportFormat "json:\"format\" graphql:\"format\""
	ID           string             "json:\"id\" graphql:\"id\""
	OwnerID      *string            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RequestorID  *string            "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Status       enums.ExportStatus "json:\"status\" graphql:\"status\""
	UpdatedAt    *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllExports_Exports_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllExports_Exports_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllExports_Exports_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllExports_Exports_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllExports_Exports_Edges_Node) GetErrorMessage() *string {
	if t == nil {
		t = &GetAllExports_Exports_Edges_Node{}
	}
	return t.ErrorMessage
}
func (t *GetAllExports_Exports_Edges_Node) GetExportType() *enums.ExportType {
	if t == nil {
		t = &GetAllExports_Exports_Edges_Node{}
	}
	return &t.ExportType
}
func (t *GetAllExports_Exports_Edges_Node) GetFields() []string {
	if t == nil {
		t = &GetAllExports_Exports_Edges_Node{}
	}
	return t.Fields
}
func (t *GetAllExports_Exports_Edges_Node) GetFilters() *string {
	if t == nil {
		t = &GetAllExports_Exports_Edges_Node{}
	}
	return t.Filters
}
func (t *GetAllExports_Exports_Edges_Node) GetFormat() *enums.ExportFormat {
	if t == nil {
		t = &GetAllExports_Exports_Edges_Node{}
	}
	return &t.Format
}
func (t *GetAllExports_Exports_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllExports_Exports_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllExports_Exports_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllExports_Exports_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllExports_Exports_Edges_Node) GetRequestorID() *string {
	if t == nil {
		t = &GetAllExports_Exports_Edges_Node{}
	}
	return t.RequestorID
}
func (t *GetAllExports_Exports_Edges_Node) GetStatus() *enums.ExportStatus {
	if t == nil {
		t = &GetAllExports_Exports_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllExports_Exports_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllExports_Exports_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllExports_Exports_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllExports_Exports_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllExports_Exports_Edges struct {
	Node *GetAllExports_Exports_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllExports_Exports_Edges) GetNode() *GetAllExports_Exports_Edges_Node {
	if t == nil {
		t = &GetAllExports_Exports_Edges{}
	}
	return t.Node
}

type GetAllExports_Exports struct {
	Edges      []*GetAllExports_Exports_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllExports_Exports_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                          "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllExports_Exports) GetEdges() []*GetAllExports_Exports_Edges {
	if t == nil {
		t = &GetAllExports_Exports{}
	}
	return t.Edges
}
func (t *GetAllExports_Exports) GetPageInfo() *GetAllExports_Exports_PageInfo {
	if t == nil {
		t = &GetAllExports_Exports{}
	}
	return &t.PageInfo
}
func (t *GetAllExports_Exports) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllExports_Exports{}
	}
	return t.TotalCount
}

type GetExportByID_Export struct {
	CreatedAt    *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ErrorMessage *string            "json:\"errorMessage,omitempty\" graphql:\"errorMessage\""
	ExportType   enums.ExportType   "json:\"exportType\" graphql:\"exportType\""
	Fields       []string           "json:\"fields,omitempty\" graphql:\"fields\""
	Filters      *string            "json:\"filters,omitempty\" graphql:\"filters\""
	Format       enums.ExportFormat "json:\"format\" graphql:\"format\""
	ID           string             "json:\"id\" graphql:\"id\""
	OwnerID      *string            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RequestorID  *string            "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Status       enums.ExportStatus "json:\"status\" graphql:\"status\""
	UpdatedAt    *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetExportByID_Export) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetExportByID_Export{}
	}
	return t.CreatedAt
}
func (t *GetExportByID_Export) GetCreatedBy() *string {
	if t == nil {
		t = &GetExportByID_Export{}
	}
	return t.CreatedBy
}
func (t *GetExportByID_Export) GetErrorMessage() *string {
	if t == nil {
		t = &GetExportByID_Export{}
	}
	return t.ErrorMessage
}
func (t *GetExportByID_Export) GetExportType() *enums.ExportType {
	if t == nil {
		t = &GetExportByID_Export{}
	}
	return &t.ExportType
}
func (t *GetExportByID_Export) GetFields() []string {
	if t == nil {
		t = &GetExportByID_Export{}
	}
	return t.Fields
}
func (t *GetExportByID_Export) GetFilters() *string {
	if t == nil {
		t = &GetExportByID_Export{}
	}
	return t.Filters
}
func (t *GetExportByID_Export) GetFormat() *enums.ExportFormat {
	if t == nil {
		t = &GetExportByID_Export{}
	}
	return &t.Format
}
func (t *GetExportByID_Export) GetID() string {
	if t == nil {
		t = &GetExportByID_Export{}
	}
	return t.ID
}
func (t *GetExportByID_Export) GetOwnerID() *string {
	if t == nil {
		t = &GetExportByID_Export{}
	}
	return t.OwnerID
}
func (t *GetExportByID_Export) GetRequestorID() *string {
	if t == nil {
		t = &GetExportByID_Export{}
	}
	return t.RequestorID
}
func (t *GetExportByID_Export) GetStatus() *enums.ExportStatus {
	if t == nil {
		t = &GetExportByID_Export{}
	}
	return &t.Status
}
func (t *GetExportByID_Export) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetExportByID_Export{}
	}
	return t.UpdatedAt
}
func (t *GetExportByID_Export) GetUpdatedBy() *string {
	if t == nil {
		t = &GetExportByID_Export{}
	}
	return t.UpdatedBy
}

type GetExports_Exports_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetExports_Exports_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetExports_Exports_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetExports_Exports_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetExports_Exports_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetExports_Exports_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetExports_Exports_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetExports_Exports_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetExports_Exports_PageInfo{}
	}
	return t.StartCursor
}

type GetExports_Exports_Edges_Node struct {
	CreatedAt    *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ErrorMessage *string            "json:\"errorMessage,omitempty\" graphql:\"errorMessage\""
	ExportType   enums.ExportType   "json:\"exportType\" graphql:\"exportType\""
	Fields       []string           "json:\"fields,omitempty\" graphql:\"fields\""
	Filters      *string            "json:\"filters,omitempty\" graphql:\"filters\""
	Format       enums.ExportFormat "json:\"format\" graphql:\"format\""
	ID           string             "json:\"id\" graphql:\"id\""
	OwnerID      *string            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RequestorID  *string            "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Status       enums.ExportStatus "json:\"status\" graphql:\"status\""
	UpdatedAt    *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetExports_Exports_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetExports_Exports_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetExports_Exports_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetExports_Exports_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetExports_Exports_Edges_Node) GetErrorMessage() *string {
	if t == nil {
		t = &GetExports_Exports_Edges_Node{}
	}
	return t.ErrorMessage
}
func (t *GetExports_Exports_Edges_Node) GetExportType() *enums.ExportType {
	if t == nil {
		t = &GetExports_Exports_Edges_Node{}
	}
	return &t.ExportType
}
func (t *GetExports_Exports_Edges_Node) GetFields() []string {
	if t == nil {
		t = &GetExports_Exports_Edges_Node{}
	}
	return t.Fields
}
func (t *GetExports_Exports_Edges_Node) GetFilters() *string {
	if t == nil {
		t = &GetExports_Exports_Edges_Node{}
	}
	return t.Filters
}
func (t *GetExports_Exports_Edges_Node) GetFormat() *enums.ExportFormat {
	if t == nil {
		t = &GetExports_Exports_Edges_Node{}
	}
	return &t.Format
}
func (t *GetExports_Exports_Edges_Node) GetID() string {
	if t == nil {
		t = &GetExports_Exports_Edges_Node{}
	}
	return t.ID
}
func (t *GetExports_Exports_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetExports_Exports_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetExports_Exports_Edges_Node) GetRequestorID() *string {
	if t == nil {
		t = &GetExports_Exports_Edges_Node{}
	}
	return t.RequestorID
}
func (t *GetExports_Exports_Edges_Node) GetStatus() *enums.ExportStatus {
	if t == nil {
		t = &GetExports_Exports_Edges_Node{}
	}
	return &t.Status
}
func (t *GetExports_Exports_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetExports_Exports_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetExports_Exports_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetExports_Exports_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetExports_Exports_Edges struct {
	Node *GetExports_Exports_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetExports_Exports_Edges) GetNode() *GetExports_Exports_Edges_Node {
	if t == nil {
		t = &GetExports_Exports_Edges{}
	}
	return t.Node
}

type GetExports_Exports struct {
	Edges      []*GetExports_Exports_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetExports_Exports_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                       "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetExports_Exports) GetEdges() []*GetExports_Exports_Edges {
	if t == nil {
		t = &GetExports_Exports{}
	}
	return t.Edges
}
func (t *GetExports_Exports) GetPageInfo() *GetExports_Exports_PageInfo {
	if t == nil {
		t = &GetExports_Exports{}
	}
	return &t.PageInfo
}
func (t *GetExports_Exports) GetTotalCount() int64 {
	if t == nil {
		t = &GetExports_Exports{}
	}
	return t.TotalCount
}

type UpdateExport_UpdateExport_Export struct {
	CreatedAt    *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ErrorMessage *string            "json:\"errorMessage,omitempty\" graphql:\"errorMessage\""
	ExportType   enums.ExportType   "json:\"exportType\" graphql:\"exportType\""
	Fields       []string           "json:\"fields,omitempty\" graphql:\"fields\""
	Filters      *string            "json:\"filters,omitempty\" graphql:\"filters\""
	Format       enums.ExportFormat "json:\"format\" graphql:\"format\""
	ID           string             "json:\"id\" graphql:\"id\""
	OwnerID      *string            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RequestorID  *string            "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Status       enums.ExportStatus "json:\"status\" graphql:\"status\""
	UpdatedAt    *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateExport_UpdateExport_Export) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateExport_UpdateExport_Export{}
	}
	return t.CreatedAt
}
func (t *UpdateExport_UpdateExport_Export) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateExport_UpdateExport_Export{}
	}
	return t.CreatedBy
}
func (t *UpdateExport_UpdateExport_Export) GetErrorMessage() *string {
	if t == nil {
		t = &UpdateExport_UpdateExport_Export{}
	}
	return t.ErrorMessage
}
func (t *UpdateExport_UpdateExport_Export) GetExportType() *enums.ExportType {
	if t == nil {
		t = &UpdateExport_UpdateExport_Export{}
	}
	return &t.ExportType
}
func (t *UpdateExport_UpdateExport_Export) GetFields() []string {
	if t == nil {
		t = &UpdateExport_UpdateExport_Export{}
	}
	return t.Fields
}
func (t *UpdateExport_UpdateExport_Export) GetFilters() *string {
	if t == nil {
		t = &UpdateExport_UpdateExport_Export{}
	}
	return t.Filters
}
func (t *UpdateExport_UpdateExport_Export) GetFormat() *enums.ExportFormat {
	if t == nil {
		t = &UpdateExport_UpdateExport_Export{}
	}
	return &t.Format
}
func (t *UpdateExport_UpdateExport_Export) GetID() string {
	if t == nil {
		t = &UpdateExport_UpdateExport_Export{}
	}
	return t.ID
}
func (t *UpdateExport_UpdateExport_Export) GetOwnerID() *string {
	if t == nil {
		t = &UpdateExport_UpdateExport_Export{}
	}
	return t.OwnerID
}
func (t *UpdateExport_UpdateExport_Export) GetRequestorID() *string {
	if t == nil {
		t = &UpdateExport_UpdateExport_Export{}
	}
	return t.RequestorID
}
func (t *UpdateExport_UpdateExport_Export) GetStatus() *enums.ExportStatus {
	if t == nil {
		t = &UpdateExport_UpdateExport_Export{}
	}
	return &t.Status
}
func (t *UpdateExport_UpdateExport_Export) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateExport_UpdateExport_Export{}
	}
	return t.UpdatedAt
}
func (t *UpdateExport_UpdateExport_Export) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateExport_UpdateExport_Export{}
	}
	return t.UpdatedBy
}

type UpdateExport_UpdateExport struct {
	Export UpdateExport_UpdateExport_Export "json:\"export\" graphql:\"export\""
}

func (t *UpdateExport_UpdateExport) GetExport() *UpdateExport_UpdateExport_Export {
	if t == nil {
		t = &UpdateExport_UpdateExport{}
	}
	return &t.Export
}

type DeleteExport_DeleteExport struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteExport_DeleteExport) GetDeletedID() string {
	if t == nil {
		t = &DeleteExport_DeleteExport{}
	}
	return t.DeletedID
}

type DeleteBulkExport_DeleteBulkExport struct {
	DeletedIDs []string "json:\"deletedIDs\" graphql:\"deletedIDs\""
}

func (t *DeleteBulkExport_DeleteBulkExport) GetDeletedIDs() []string {
	if t == nil {
		t = &DeleteBulkExport_DeleteBulkExport{}
	}
	return t.DeletedIDs
}

type DeleteFile_DeleteFile struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteFile_DeleteFile) GetDeletedID() string {
	if t == nil {
		t = &DeleteFile_DeleteFile{}
	}
	return t.DeletedID
}

type GetAllFiles_Files_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllFiles_Files_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllFiles_Files_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllFiles_Files_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllFiles_Files_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllFiles_Files_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllFiles_Files_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllFiles_Files_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllFiles_Files_PageInfo{}
	}
	return t.StartCursor
}

type GetAllFiles_Files_Edges_Node struct {
	CategoryType          *string    "json:\"categoryType,omitempty\" graphql:\"categoryType\""
	CreatedAt             *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy             *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DetectedContentType   string     "json:\"detectedContentType\" graphql:\"detectedContentType\""
	DetectedMimeType      *string    "json:\"detectedMimeType,omitempty\" graphql:\"detectedMimeType\""
	ID                    string     "json:\"id\" graphql:\"id\""
	Md5Hash               *string    "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	PersistedFileSize     *int64     "json:\"persistedFileSize,omitempty\" graphql:\"persistedFileSize\""
	ProvidedFileExtension string     "json:\"providedFileExtension\" graphql:\"providedFileExtension\""
	ProvidedFileName      string     "json:\"providedFileName\" graphql:\"providedFileName\""
	ProvidedFileSize      *int64     "json:\"providedFileSize,omitempty\" graphql:\"providedFileSize\""
	StoragePath           *string    "json:\"storagePath,omitempty\" graphql:\"storagePath\""
	StorageScheme         *string    "json:\"storageScheme,omitempty\" graphql:\"storageScheme\""
	StorageVolume         *string    "json:\"storageVolume,omitempty\" graphql:\"storageVolume\""
	StoreKey              *string    "json:\"storeKey,omitempty\" graphql:\"storeKey\""
	Tags                  []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt             *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy             *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URI                   *string    "json:\"uri,omitempty\" graphql:\"uri\""
}

func (t *GetAllFiles_Files_Edges_Node) GetCategoryType() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.CategoryType
}
func (t *GetAllFiles_Files_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllFiles_Files_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllFiles_Files_Edges_Node) GetDetectedContentType() string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.DetectedContentType
}
func (t *GetAllFiles_Files_Edges_Node) GetDetectedMimeType() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.DetectedMimeType
}
func (t *GetAllFiles_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllFiles_Files_Edges_Node) GetMd5Hash() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.Md5Hash
}
func (t *GetAllFiles_Files_Edges_Node) GetPersistedFileSize() *int64 {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.PersistedFileSize
}
func (t *GetAllFiles_Files_Edges_Node) GetProvidedFileExtension() string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.ProvidedFileExtension
}
func (t *GetAllFiles_Files_Edges_Node) GetProvidedFileName() string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.ProvidedFileName
}
func (t *GetAllFiles_Files_Edges_Node) GetProvidedFileSize() *int64 {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.ProvidedFileSize
}
func (t *GetAllFiles_Files_Edges_Node) GetStoragePath() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.StoragePath
}
func (t *GetAllFiles_Files_Edges_Node) GetStorageScheme() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.StorageScheme
}
func (t *GetAllFiles_Files_Edges_Node) GetStorageVolume() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.StorageVolume
}
func (t *GetAllFiles_Files_Edges_Node) GetStoreKey() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.StoreKey
}
func (t *GetAllFiles_Files_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllFiles_Files_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllFiles_Files_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllFiles_Files_Edges_Node) GetURI() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.URI
}

type GetAllFiles_Files_Edges struct {
	Node *GetAllFiles_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllFiles_Files_Edges) GetNode() *GetAllFiles_Files_Edges_Node {
	if t == nil {
		t = &GetAllFiles_Files_Edges{}
	}
	return t.Node
}

type GetAllFiles_Files struct {
	Edges      []*GetAllFiles_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllFiles_Files_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllFiles_Files) GetEdges() []*GetAllFiles_Files_Edges {
	if t == nil {
		t = &GetAllFiles_Files{}
	}
	return t.Edges
}
func (t *GetAllFiles_Files) GetPageInfo() *GetAllFiles_Files_PageInfo {
	if t == nil {
		t = &GetAllFiles_Files{}
	}
	return &t.PageInfo
}
func (t *GetAllFiles_Files) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllFiles_Files{}
	}
	return t.TotalCount
}

type GetFileByID_File struct {
	CategoryType          *string    "json:\"categoryType,omitempty\" graphql:\"categoryType\""
	CreatedAt             *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy             *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DetectedContentType   string     "json:\"detectedContentType\" graphql:\"detectedContentType\""
	DetectedMimeType      *string    "json:\"detectedMimeType,omitempty\" graphql:\"detectedMimeType\""
	ID                    string     "json:\"id\" graphql:\"id\""
	Md5Hash               *string    "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	PersistedFileSize     *int64     "json:\"persistedFileSize,omitempty\" graphql:\"persistedFileSize\""
	ProvidedFileExtension string     "json:\"providedFileExtension\" graphql:\"providedFileExtension\""
	ProvidedFileName      string     "json:\"providedFileName\" graphql:\"providedFileName\""
	ProvidedFileSize      *int64     "json:\"providedFileSize,omitempty\" graphql:\"providedFileSize\""
	StoragePath           *string    "json:\"storagePath,omitempty\" graphql:\"storagePath\""
	StorageScheme         *string    "json:\"storageScheme,omitempty\" graphql:\"storageScheme\""
	StorageVolume         *string    "json:\"storageVolume,omitempty\" graphql:\"storageVolume\""
	StoreKey              *string    "json:\"storeKey,omitempty\" graphql:\"storeKey\""
	Tags                  []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt             *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy             *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URI                   *string    "json:\"uri,omitempty\" graphql:\"uri\""
}

func (t *GetFileByID_File) GetCategoryType() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.CategoryType
}
func (t *GetFileByID_File) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.CreatedAt
}
func (t *GetFileByID_File) GetCreatedBy() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.CreatedBy
}
func (t *GetFileByID_File) GetDetectedContentType() string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.DetectedContentType
}
func (t *GetFileByID_File) GetDetectedMimeType() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.DetectedMimeType
}
func (t *GetFileByID_File) GetID() string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.ID
}
func (t *GetFileByID_File) GetMd5Hash() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.Md5Hash
}
func (t *GetFileByID_File) GetPersistedFileSize() *int64 {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.PersistedFileSize
}
func (t *GetFileByID_File) GetProvidedFileExtension() string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.ProvidedFileExtension
}
func (t *GetFileByID_File) GetProvidedFileName() string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.ProvidedFileName
}
func (t *GetFileByID_File) GetProvidedFileSize() *int64 {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.ProvidedFileSize
}
func (t *GetFileByID_File) GetStoragePath() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.StoragePath
}
func (t *GetFileByID_File) GetStorageScheme() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.StorageScheme
}
func (t *GetFileByID_File) GetStorageVolume() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.StorageVolume
}
func (t *GetFileByID_File) GetStoreKey() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.StoreKey
}
func (t *GetFileByID_File) GetTags() []string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.Tags
}
func (t *GetFileByID_File) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.UpdatedAt
}
func (t *GetFileByID_File) GetUpdatedBy() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.UpdatedBy
}
func (t *GetFileByID_File) GetURI() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.URI
}

type GetFiles_Files_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetFiles_Files_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetFiles_Files_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetFiles_Files_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetFiles_Files_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetFiles_Files_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetFiles_Files_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetFiles_Files_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetFiles_Files_PageInfo{}
	}
	return t.StartCursor
}

type GetFiles_Files_Edges_Node struct {
	CategoryType          *string    "json:\"categoryType,omitempty\" graphql:\"categoryType\""
	CreatedAt             *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy             *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DetectedContentType   string     "json:\"detectedContentType\" graphql:\"detectedContentType\""
	DetectedMimeType      *string    "json:\"detectedMimeType,omitempty\" graphql:\"detectedMimeType\""
	ID                    string     "json:\"id\" graphql:\"id\""
	Md5Hash               *string    "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	PersistedFileSize     *int64     "json:\"persistedFileSize,omitempty\" graphql:\"persistedFileSize\""
	ProvidedFileExtension string     "json:\"providedFileExtension\" graphql:\"providedFileExtension\""
	ProvidedFileName      string     "json:\"providedFileName\" graphql:\"providedFileName\""
	ProvidedFileSize      *int64     "json:\"providedFileSize,omitempty\" graphql:\"providedFileSize\""
	StoragePath           *string    "json:\"storagePath,omitempty\" graphql:\"storagePath\""
	StorageScheme         *string    "json:\"storageScheme,omitempty\" graphql:\"storageScheme\""
	StorageVolume         *string    "json:\"storageVolume,omitempty\" graphql:\"storageVolume\""
	StoreKey              *string    "json:\"storeKey,omitempty\" graphql:\"storeKey\""
	Tags                  []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt             *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy             *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URI                   *string    "json:\"uri,omitempty\" graphql:\"uri\""
}

func (t *GetFiles_Files_Edges_Node) GetCategoryType() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.CategoryType
}
func (t *GetFiles_Files_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetFiles_Files_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetFiles_Files_Edges_Node) GetDetectedContentType() string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.DetectedContentType
}
func (t *GetFiles_Files_Edges_Node) GetDetectedMimeType() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.DetectedMimeType
}
func (t *GetFiles_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GetFiles_Files_Edges_Node) GetMd5Hash() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.Md5Hash
}
func (t *GetFiles_Files_Edges_Node) GetPersistedFileSize() *int64 {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.PersistedFileSize
}
func (t *GetFiles_Files_Edges_Node) GetProvidedFileExtension() string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.ProvidedFileExtension
}
func (t *GetFiles_Files_Edges_Node) GetProvidedFileName() string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.ProvidedFileName
}
func (t *GetFiles_Files_Edges_Node) GetProvidedFileSize() *int64 {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.ProvidedFileSize
}
func (t *GetFiles_Files_Edges_Node) GetStoragePath() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.StoragePath
}
func (t *GetFiles_Files_Edges_Node) GetStorageScheme() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.StorageScheme
}
func (t *GetFiles_Files_Edges_Node) GetStorageVolume() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.StorageVolume
}
func (t *GetFiles_Files_Edges_Node) GetStoreKey() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.StoreKey
}
func (t *GetFiles_Files_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.Tags
}
func (t *GetFiles_Files_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetFiles_Files_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetFiles_Files_Edges_Node) GetURI() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.URI
}

type GetFiles_Files_Edges struct {
	Node *GetFiles_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetFiles_Files_Edges) GetNode() *GetFiles_Files_Edges_Node {
	if t == nil {
		t = &GetFiles_Files_Edges{}
	}
	return t.Node
}

type GetFiles_Files struct {
	Edges      []*GetFiles_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetFiles_Files_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetFiles_Files) GetEdges() []*GetFiles_Files_Edges {
	if t == nil {
		t = &GetFiles_Files{}
	}
	return t.Edges
}
func (t *GetFiles_Files) GetPageInfo() *GetFiles_Files_PageInfo {
	if t == nil {
		t = &GetFiles_Files{}
	}
	return &t.PageInfo
}
func (t *GetFiles_Files) GetTotalCount() int64 {
	if t == nil {
		t = &GetFiles_Files{}
	}
	return t.TotalCount
}

type GetAllFileHistories_FileHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllFileHistories_FileHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllFileHistories_FileHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllFileHistories_FileHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllFileHistories_FileHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllFileHistories_FileHistories_Edges_Node struct {
	CategoryType          *string        "json:\"categoryType,omitempty\" graphql:\"categoryType\""
	CreatedAt             *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy             *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DetectedContentType   string         "json:\"detectedContentType\" graphql:\"detectedContentType\""
	DetectedMimeType      *string        "json:\"detectedMimeType,omitempty\" graphql:\"detectedMimeType\""
	HistoryTime           time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID                    string         "json:\"id\" graphql:\"id\""
	Md5Hash               *string        "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	Operation             history.OpType "json:\"operation\" graphql:\"operation\""
	PersistedFileSize     *int64         "json:\"persistedFileSize,omitempty\" graphql:\"persistedFileSize\""
	ProvidedFileExtension string         "json:\"providedFileExtension\" graphql:\"providedFileExtension\""
	ProvidedFileName      string         "json:\"providedFileName\" graphql:\"providedFileName\""
	ProvidedFileSize      *int64         "json:\"providedFileSize,omitempty\" graphql:\"providedFileSize\""
	Ref                   *string        "json:\"ref,omitempty\" graphql:\"ref\""
	StoragePath           *string        "json:\"storagePath,omitempty\" graphql:\"storagePath\""
	StorageScheme         *string        "json:\"storageScheme,omitempty\" graphql:\"storageScheme\""
	StorageVolume         *string        "json:\"storageVolume,omitempty\" graphql:\"storageVolume\""
	StoreKey              *string        "json:\"storeKey,omitempty\" graphql:\"storeKey\""
	Tags                  []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt             *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy             *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URI                   *string        "json:\"uri,omitempty\" graphql:\"uri\""
}

func (t *GetAllFileHistories_FileHistories_Edges_Node) GetCategoryType() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.CategoryType
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetDetectedContentType() string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.DetectedContentType
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetDetectedMimeType() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.DetectedMimeType
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetMd5Hash() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.Md5Hash
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetPersistedFileSize() *int64 {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.PersistedFileSize
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetProvidedFileExtension() string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.ProvidedFileExtension
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetProvidedFileName() string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.ProvidedFileName
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetProvidedFileSize() *int64 {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.ProvidedFileSize
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetStoragePath() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.StoragePath
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetStorageScheme() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.StorageScheme
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetStorageVolume() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.StorageVolume
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetStoreKey() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.StoreKey
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetURI() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.URI
}

type GetAllFileHistories_FileHistories_Edges struct {
	Node *GetAllFileHistories_FileHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllFileHistories_FileHistories_Edges) GetNode() *GetAllFileHistories_FileHistories_Edges_Node {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges{}
	}
	return t.Node
}

type GetAllFileHistories_FileHistories struct {
	Edges      []*GetAllFileHistories_FileHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllFileHistories_FileHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllFileHistories_FileHistories) GetEdges() []*GetAllFileHistories_FileHistories_Edges {
	if t == nil {
		t = &GetAllFileHistories_FileHistories{}
	}
	return t.Edges
}
func (t *GetAllFileHistories_FileHistories) GetPageInfo() *GetAllFileHistories_FileHistories_PageInfo {
	if t == nil {
		t = &GetAllFileHistories_FileHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllFileHistories_FileHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllFileHistories_FileHistories{}
	}
	return t.TotalCount
}

type GetFileHistories_FileHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetFileHistories_FileHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetFileHistories_FileHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetFileHistories_FileHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetFileHistories_FileHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetFileHistories_FileHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetFileHistories_FileHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetFileHistories_FileHistories_Edges_Node struct {
	CategoryType          *string        "json:\"categoryType,omitempty\" graphql:\"categoryType\""
	CreatedAt             *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy             *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DetectedContentType   string         "json:\"detectedContentType\" graphql:\"detectedContentType\""
	DetectedMimeType      *string        "json:\"detectedMimeType,omitempty\" graphql:\"detectedMimeType\""
	HistoryTime           time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID                    string         "json:\"id\" graphql:\"id\""
	Md5Hash               *string        "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	Operation             history.OpType "json:\"operation\" graphql:\"operation\""
	PersistedFileSize     *int64         "json:\"persistedFileSize,omitempty\" graphql:\"persistedFileSize\""
	ProvidedFileExtension string         "json:\"providedFileExtension\" graphql:\"providedFileExtension\""
	ProvidedFileName      string         "json:\"providedFileName\" graphql:\"providedFileName\""
	ProvidedFileSize      *int64         "json:\"providedFileSize,omitempty\" graphql:\"providedFileSize\""
	Ref                   *string        "json:\"ref,omitempty\" graphql:\"ref\""
	StoragePath           *string        "json:\"storagePath,omitempty\" graphql:\"storagePath\""
	StorageScheme         *string        "json:\"storageScheme,omitempty\" graphql:\"storageScheme\""
	StorageVolume         *string        "json:\"storageVolume,omitempty\" graphql:\"storageVolume\""
	StoreKey              *string        "json:\"storeKey,omitempty\" graphql:\"storeKey\""
	Tags                  []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt             *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy             *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URI                   *string        "json:\"uri,omitempty\" graphql:\"uri\""
}

func (t *GetFileHistories_FileHistories_Edges_Node) GetCategoryType() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.CategoryType
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetDetectedContentType() string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.DetectedContentType
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetDetectedMimeType() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.DetectedMimeType
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetMd5Hash() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.Md5Hash
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetPersistedFileSize() *int64 {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.PersistedFileSize
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetProvidedFileExtension() string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.ProvidedFileExtension
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetProvidedFileName() string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.ProvidedFileName
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetProvidedFileSize() *int64 {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.ProvidedFileSize
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetStoragePath() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.StoragePath
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetStorageScheme() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.StorageScheme
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetStorageVolume() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.StorageVolume
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetStoreKey() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.StoreKey
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetURI() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.URI
}

type GetFileHistories_FileHistories_Edges struct {
	Node *GetFileHistories_FileHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetFileHistories_FileHistories_Edges) GetNode() *GetFileHistories_FileHistories_Edges_Node {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges{}
	}
	return t.Node
}

type GetFileHistories_FileHistories struct {
	Edges      []*GetFileHistories_FileHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetFileHistories_FileHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetFileHistories_FileHistories) GetEdges() []*GetFileHistories_FileHistories_Edges {
	if t == nil {
		t = &GetFileHistories_FileHistories{}
	}
	return t.Edges
}
func (t *GetFileHistories_FileHistories) GetPageInfo() *GetFileHistories_FileHistories_PageInfo {
	if t == nil {
		t = &GetFileHistories_FileHistories{}
	}
	return &t.PageInfo
}
func (t *GetFileHistories_FileHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetFileHistories_FileHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVGroup_CreateBulkCSVGroup_Groups struct {
	CreatedAt       *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string    "json:\"description,omitempty\" graphql:\"description\""
	DisplayID       string     "json:\"displayID\" graphql:\"displayID\""
	DisplayName     string     "json:\"displayName\" graphql:\"displayName\""
	GravatarLogoURL *string    "json:\"gravatarLogoURL,omitempty\" graphql:\"gravatarLogoURL\""
	ID              string     "json:\"id\" graphql:\"id\""
	IsManaged       *bool      "json:\"isManaged,omitempty\" graphql:\"isManaged\""
	LogoURL         *string    "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name            string     "json:\"name\" graphql:\"name\""
	OwnerID         *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags            []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.Description
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.DisplayID
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.DisplayName
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetGravatarLogoURL() *string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.GravatarLogoURL
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetIsManaged() *bool {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.IsManaged
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetLogoURL() *string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.LogoURL
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetName() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.Name
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.Tags
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVGroup_CreateBulkCSVGroup struct {
	Groups []*CreateBulkCSVGroup_CreateBulkCSVGroup_Groups "json:\"groups,omitempty\" graphql:\"groups\""
}

func (t *CreateBulkCSVGroup_CreateBulkCSVGroup) GetGroups() []*CreateBulkCSVGroup_CreateBulkCSVGroup_Groups {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup{}
	}
	return t.Groups
}

type CreateBulkGroup_CreateBulkGroup_Groups struct {
	CreatedAt       *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string    "json:\"description,omitempty\" graphql:\"description\""
	DisplayID       string     "json:\"displayID\" graphql:\"displayID\""
	DisplayName     string     "json:\"displayName\" graphql:\"displayName\""
	GravatarLogoURL *string    "json:\"gravatarLogoURL,omitempty\" graphql:\"gravatarLogoURL\""
	ID              string     "json:\"id\" graphql:\"id\""
	IsManaged       *bool      "json:\"isManaged,omitempty\" graphql:\"isManaged\""
	LogoURL         *string    "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name            string     "json:\"name\" graphql:\"name\""
	OwnerID         *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags            []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.CreatedAt
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.CreatedBy
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetDescription() *string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.Description
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.DisplayID
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.DisplayName
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetGravatarLogoURL() *string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.GravatarLogoURL
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetID() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.ID
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetIsManaged() *bool {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.IsManaged
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetLogoURL() *string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.LogoURL
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetName() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.Name
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.OwnerID
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetTags() []string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.Tags
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.UpdatedBy
}

type CreateBulkGroup_CreateBulkGroup struct {
	Groups []*CreateBulkGroup_CreateBulkGroup_Groups "json:\"groups,omitempty\" graphql:\"groups\""
}

func (t *CreateBulkGroup_CreateBulkGroup) GetGroups() []*CreateBulkGroup_CreateBulkGroup_Groups {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup{}
	}
	return t.Groups
}

type CreateGroup_CreateGroup_Group_Setting struct {
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *CreateGroup_CreateGroup_Group_Setting) GetID() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return t.ID
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return &t.JoinPolicy
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return t.SyncToGithub
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return t.SyncToSlack
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return &t.Visibility
}

type CreateGroup_CreateGroup_Group_Members struct {
	TotalCount int64 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *CreateGroup_CreateGroup_Group_Members) GetTotalCount() int64 {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Members{}
	}
	return t.TotalCount
}

type CreateGroup_CreateGroup_Group struct {
	CreatedAt       *time.Time                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                                "json:\"description,omitempty\" graphql:\"description\""
	DisplayID       string                                 "json:\"displayID\" graphql:\"displayID\""
	DisplayName     string                                 "json:\"displayName\" graphql:\"displayName\""
	GravatarLogoURL *string                                "json:\"gravatarLogoURL,omitempty\" graphql:\"gravatarLogoURL\""
	ID              string                                 "json:\"id\" graphql:\"id\""
	IsManaged       *bool                                  "json:\"isManaged,omitempty\" graphql:\"isManaged\""
	LogoURL         *string                                "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Members         CreateGroup_CreateGroup_Group_Members  "json:\"members\" graphql:\"members\""
	Name            string                                 "json:\"name\" graphql:\"name\""
	OwnerID         *string                                "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Setting         *CreateGroup_CreateGroup_Group_Setting "json:\"setting,omitempty\" graphql:\"setting\""
	Tags            []string                               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateGroup_CreateGroup_Group) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.CreatedAt
}
func (t *CreateGroup_CreateGroup_Group) GetCreatedBy() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.CreatedBy
}
func (t *CreateGroup_CreateGroup_Group) GetDescription() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Description
}
func (t *CreateGroup_CreateGroup_Group) GetDisplayID() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.DisplayID
}
func (t *CreateGroup_CreateGroup_Group) GetDisplayName() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.DisplayName
}
func (t *CreateGroup_CreateGroup_Group) GetGravatarLogoURL() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.GravatarLogoURL
}
func (t *CreateGroup_CreateGroup_Group) GetID() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.ID
}
func (t *CreateGroup_CreateGroup_Group) GetIsManaged() *bool {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.IsManaged
}
func (t *CreateGroup_CreateGroup_Group) GetLogoURL() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.LogoURL
}
func (t *CreateGroup_CreateGroup_Group) GetMembers() *CreateGroup_CreateGroup_Group_Members {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return &t.Members
}
func (t *CreateGroup_CreateGroup_Group) GetName() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Name
}
func (t *CreateGroup_CreateGroup_Group) GetOwnerID() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.OwnerID
}
func (t *CreateGroup_CreateGroup_Group) GetSetting() *CreateGroup_CreateGroup_Group_Setting {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Setting
}
func (t *CreateGroup_CreateGroup_Group) GetTags() []string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Tags
}
func (t *CreateGroup_CreateGroup_Group) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.UpdatedAt
}
func (t *CreateGroup_CreateGroup_Group) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.UpdatedBy
}

type CreateGroup_CreateGroup struct {
	Group CreateGroup_CreateGroup_Group "json:\"group\" graphql:\"group\""
}

func (t *CreateGroup_CreateGroup) GetGroup() *CreateGroup_CreateGroup_Group {
	if t == nil {
		t = &CreateGroup_CreateGroup{}
	}
	return &t.Group
}

type DeleteGroup_DeleteGroup struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteGroup_DeleteGroup) GetDeletedID() string {
	if t == nil {
		t = &DeleteGroup_DeleteGroup{}
	}
	return t.DeletedID
}

type GetAllGroups_Groups_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllGroups_Groups_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllGroups_Groups_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllGroups_Groups_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllGroups_Groups_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllGroups_Groups_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllGroups_Groups_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllGroups_Groups_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllGroups_Groups_PageInfo{}
	}
	return t.StartCursor
}

type GetAllGroups_Groups_Edges_Node_Setting struct {
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetAllGroups_Groups_Edges_Node_Setting) GetID() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.ID
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return &t.JoinPolicy
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.SyncToGithub
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.SyncToSlack
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return &t.Visibility
}

type GetAllGroups_Groups_Edges_Node_Members struct {
	TotalCount int64 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllGroups_Groups_Edges_Node_Members) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Members{}
	}
	return t.TotalCount
}

type GetAllGroups_Groups_Edges_Node struct {
	CreatedAt       *time.Time                              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                                 "json:\"description,omitempty\" graphql:\"description\""
	DisplayID       string                                  "json:\"displayID\" graphql:\"displayID\""
	DisplayName     string                                  "json:\"displayName\" graphql:\"displayName\""
	GravatarLogoURL *string                                 "json:\"gravatarLogoURL,omitempty\" graphql:\"gravatarLogoURL\""
	ID              string                                  "json:\"id\" graphql:\"id\""
	IsManaged       *bool                                   "json:\"isManaged,omitempty\" graphql:\"isManaged\""
	LogoURL         *string                                 "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Members         GetAllGroups_Groups_Edges_Node_Members  "json:\"members\" graphql:\"members\""
	Name            string                                  "json:\"name\" graphql:\"name\""
	OwnerID         *string                                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Setting         *GetAllGroups_Groups_Edges_Node_Setting "json:\"setting,omitempty\" graphql:\"setting\""
	Tags            []string                                "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time                              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllGroups_Groups_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllGroups_Groups_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllGroups_Groups_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllGroups_Groups_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllGroups_Groups_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllGroups_Groups_Edges_Node) GetGravatarLogoURL() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.GravatarLogoURL
}
func (t *GetAllGroups_Groups_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllGroups_Groups_Edges_Node) GetIsManaged() *bool {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.IsManaged
}
func (t *GetAllGroups_Groups_Edges_Node) GetLogoURL() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.LogoURL
}
func (t *GetAllGroups_Groups_Edges_Node) GetMembers() *GetAllGroups_Groups_Edges_Node_Members {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return &t.Members
}
func (t *GetAllGroups_Groups_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllGroups_Groups_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllGroups_Groups_Edges_Node) GetSetting() *GetAllGroups_Groups_Edges_Node_Setting {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Setting
}
func (t *GetAllGroups_Groups_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllGroups_Groups_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllGroups_Groups_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllGroups_Groups_Edges struct {
	Node *GetAllGroups_Groups_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllGroups_Groups_Edges) GetNode() *GetAllGroups_Groups_Edges_Node {
	if t == nil {
		t = &GetAllGroups_Groups_Edges{}
	}
	return t.Node
}

type GetAllGroups_Groups struct {
	Edges      []*GetAllGroups_Groups_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllGroups_Groups_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                        "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllGroups_Groups) GetEdges() []*GetAllGroups_Groups_Edges {
	if t == nil {
		t = &GetAllGroups_Groups{}
	}
	return t.Edges
}
func (t *GetAllGroups_Groups) GetPageInfo() *GetAllGroups_Groups_PageInfo {
	if t == nil {
		t = &GetAllGroups_Groups{}
	}
	return &t.PageInfo
}
func (t *GetAllGroups_Groups) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllGroups_Groups{}
	}
	return t.TotalCount
}

type GetGroupByID_Group_Setting struct {
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetGroupByID_Group_Setting) GetID() string {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.ID
}
func (t *GetGroupByID_Group_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return &t.JoinPolicy
}
func (t *GetGroupByID_Group_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.SyncToGithub
}
func (t *GetGroupByID_Group_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.SyncToSlack
}
func (t *GetGroupByID_Group_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return &t.Visibility
}

type GetGroupByID_Group_Members struct {
	TotalCount int64 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetGroupByID_Group_Members) GetTotalCount() int64 {
	if t == nil {
		t = &GetGroupByID_Group_Members{}
	}
	return t.TotalCount
}

type GetGroupByID_Group struct {
	CreatedAt       *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                     "json:\"description,omitempty\" graphql:\"description\""
	DisplayID       string                      "json:\"displayID\" graphql:\"displayID\""
	DisplayName     string                      "json:\"displayName\" graphql:\"displayName\""
	GravatarLogoURL *string                     "json:\"gravatarLogoURL,omitempty\" graphql:\"gravatarLogoURL\""
	ID              string                      "json:\"id\" graphql:\"id\""
	IsManaged       *bool                       "json:\"isManaged,omitempty\" graphql:\"isManaged\""
	LogoURL         *string                     "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Members         GetGroupByID_Group_Members  "json:\"members\" graphql:\"members\""
	Name            string                      "json:\"name\" graphql:\"name\""
	OwnerID         *string                     "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Setting         *GetGroupByID_Group_Setting "json:\"setting,omitempty\" graphql:\"setting\""
	Tags            []string                    "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetGroupByID_Group) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.CreatedAt
}
func (t *GetGroupByID_Group) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.CreatedBy
}
func (t *GetGroupByID_Group) GetDescription() *string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Description
}
func (t *GetGroupByID_Group) GetDisplayID() string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.DisplayID
}
func (t *GetGroupByID_Group) GetDisplayName() string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.DisplayName
}
func (t *GetGroupByID_Group) GetGravatarLogoURL() *string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.GravatarLogoURL
}
func (t *GetGroupByID_Group) GetID() string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.ID
}
func (t *GetGroupByID_Group) GetIsManaged() *bool {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.IsManaged
}
func (t *GetGroupByID_Group) GetLogoURL() *string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.LogoURL
}
func (t *GetGroupByID_Group) GetMembers() *GetGroupByID_Group_Members {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return &t.Members
}
func (t *GetGroupByID_Group) GetName() string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Name
}
func (t *GetGroupByID_Group) GetOwnerID() *string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.OwnerID
}
func (t *GetGroupByID_Group) GetSetting() *GetGroupByID_Group_Setting {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Setting
}
func (t *GetGroupByID_Group) GetTags() []string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Tags
}
func (t *GetGroupByID_Group) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.UpdatedAt
}
func (t *GetGroupByID_Group) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.UpdatedBy
}

type GetGroups_Groups_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetGroups_Groups_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetGroups_Groups_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetGroups_Groups_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetGroups_Groups_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetGroups_Groups_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetGroups_Groups_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetGroups_Groups_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetGroups_Groups_PageInfo{}
	}
	return t.StartCursor
}

type GetGroups_Groups_Edges_Node_Setting struct {
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetGroups_Groups_Edges_Node_Setting) GetID() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.ID
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return &t.JoinPolicy
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.SyncToGithub
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.SyncToSlack
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return &t.Visibility
}

type GetGroups_Groups_Edges_Node_Members struct {
	TotalCount int64 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetGroups_Groups_Edges_Node_Members) GetTotalCount() int64 {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Members{}
	}
	return t.TotalCount
}

type GetGroups_Groups_Edges_Node struct {
	CreatedAt       *time.Time                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                              "json:\"description,omitempty\" graphql:\"description\""
	DisplayID       string                               "json:\"displayID\" graphql:\"displayID\""
	DisplayName     string                               "json:\"displayName\" graphql:\"displayName\""
	GravatarLogoURL *string                              "json:\"gravatarLogoURL,omitempty\" graphql:\"gravatarLogoURL\""
	ID              string                               "json:\"id\" graphql:\"id\""
	IsManaged       *bool                                "json:\"isManaged,omitempty\" graphql:\"isManaged\""
	LogoURL         *string                              "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Members         GetGroups_Groups_Edges_Node_Members  "json:\"members\" graphql:\"members\""
	Name            string                               "json:\"name\" graphql:\"name\""
	OwnerID         *string                              "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Setting         *GetGroups_Groups_Edges_Node_Setting "json:\"setting,omitempty\" graphql:\"setting\""
	Tags            []string                             "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetGroups_Groups_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetGroups_Groups_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetGroups_Groups_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.Description
}
func (t *GetGroups_Groups_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetGroups_Groups_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetGroups_Groups_Edges_Node) GetGravatarLogoURL() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.GravatarLogoURL
}
func (t *GetGroups_Groups_Edges_Node) GetID() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.ID
}
func (t *GetGroups_Groups_Edges_Node) GetIsManaged() *bool {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.IsManaged
}
func (t *GetGroups_Groups_Edges_Node) GetLogoURL() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.LogoURL
}
func (t *GetGroups_Groups_Edges_Node) GetMembers() *GetGroups_Groups_Edges_Node_Members {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return &t.Members
}
func (t *GetGroups_Groups_Edges_Node) GetName() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.Name
}
func (t *GetGroups_Groups_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetGroups_Groups_Edges_Node) GetSetting() *GetGroups_Groups_Edges_Node_Setting {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.Setting
}
func (t *GetGroups_Groups_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.Tags
}
func (t *GetGroups_Groups_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetGroups_Groups_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetGroups_Groups_Edges struct {
	Node *GetGroups_Groups_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetGroups_Groups_Edges) GetNode() *GetGroups_Groups_Edges_Node {
	if t == nil {
		t = &GetGroups_Groups_Edges{}
	}
	return t.Node
}

type GetGroups_Groups struct {
	Edges      []*GetGroups_Groups_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetGroups_Groups_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetGroups_Groups) GetEdges() []*GetGroups_Groups_Edges {
	if t == nil {
		t = &GetGroups_Groups{}
	}
	return t.Edges
}
func (t *GetGroups_Groups) GetPageInfo() *GetGroups_Groups_PageInfo {
	if t == nil {
		t = &GetGroups_Groups{}
	}
	return &t.PageInfo
}
func (t *GetGroups_Groups) GetTotalCount() int64 {
	if t == nil {
		t = &GetGroups_Groups{}
	}
	return t.TotalCount
}

type UpdateGroup_UpdateGroup_Group_Setting struct {
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *UpdateGroup_UpdateGroup_Group_Setting) GetID() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.ID
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return &t.JoinPolicy
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.SyncToGithub
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.SyncToSlack
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return &t.Visibility
}

type UpdateGroup_UpdateGroup_Group_Members struct {
	TotalCount int64 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *UpdateGroup_UpdateGroup_Group_Members) GetTotalCount() int64 {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Members{}
	}
	return t.TotalCount
}

type UpdateGroup_UpdateGroup_Group struct {
	CreatedAt       *time.Time                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                                "json:\"description,omitempty\" graphql:\"description\""
	DisplayID       string                                 "json:\"displayID\" graphql:\"displayID\""
	DisplayName     string                                 "json:\"displayName\" graphql:\"displayName\""
	GravatarLogoURL *string                                "json:\"gravatarLogoURL,omitempty\" graphql:\"gravatarLogoURL\""
	ID              string                                 "json:\"id\" graphql:\"id\""
	IsManaged       *bool                                  "json:\"isManaged,omitempty\" graphql:\"isManaged\""
	LogoURL         *string                                "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Members         UpdateGroup_UpdateGroup_Group_Members  "json:\"members\" graphql:\"members\""
	Name            string                                 "json:\"name\" graphql:\"name\""
	OwnerID         *string                                "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Setting         *UpdateGroup_UpdateGroup_Group_Setting "json:\"setting,omitempty\" graphql:\"setting\""
	Tags            []string                               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateGroup_UpdateGroup_Group) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.CreatedAt
}
func (t *UpdateGroup_UpdateGroup_Group) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.CreatedBy
}
func (t *UpdateGroup_UpdateGroup_Group) GetDescription() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Description
}
func (t *UpdateGroup_UpdateGroup_Group) GetDisplayID() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.DisplayID
}
func (t *UpdateGroup_UpdateGroup_Group) GetDisplayName() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.DisplayName
}
func (t *UpdateGroup_UpdateGroup_Group) GetGravatarLogoURL() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.GravatarLogoURL
}
func (t *UpdateGroup_UpdateGroup_Group) GetID() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.ID
}
func (t *UpdateGroup_UpdateGroup_Group) GetIsManaged() *bool {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.IsManaged
}
func (t *UpdateGroup_UpdateGroup_Group) GetLogoURL() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.LogoURL
}
func (t *UpdateGroup_UpdateGroup_Group) GetMembers() *UpdateGroup_UpdateGroup_Group_Members {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return &t.Members
}
func (t *UpdateGroup_UpdateGroup_Group) GetName() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Name
}
func (t *UpdateGroup_UpdateGroup_Group) GetOwnerID() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.OwnerID
}
func (t *UpdateGroup_UpdateGroup_Group) GetSetting() *UpdateGroup_UpdateGroup_Group_Setting {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Setting
}
func (t *UpdateGroup_UpdateGroup_Group) GetTags() []string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Tags
}
func (t *UpdateGroup_UpdateGroup_Group) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.UpdatedAt
}
func (t *UpdateGroup_UpdateGroup_Group) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.UpdatedBy
}

type UpdateGroup_UpdateGroup struct {
	Group UpdateGroup_UpdateGroup_Group "json:\"group\" graphql:\"group\""
}

func (t *UpdateGroup_UpdateGroup) GetGroup() *UpdateGroup_UpdateGroup_Group {
	if t == nil {
		t = &UpdateGroup_UpdateGroup{}
	}
	return &t.Group
}

type GetAllGroupHistories_GroupHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllGroupHistories_GroupHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllGroupHistories_GroupHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllGroupHistories_GroupHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllGroupHistories_GroupHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllGroupHistories_GroupHistories_Edges_Node struct {
	CreatedAt       *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string        "json:\"description,omitempty\" graphql:\"description\""
	DisplayID       string         "json:\"displayID\" graphql:\"displayID\""
	DisplayName     string         "json:\"displayName\" graphql:\"displayName\""
	GravatarLogoURL *string        "json:\"gravatarLogoURL,omitempty\" graphql:\"gravatarLogoURL\""
	HistoryTime     time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID              string         "json:\"id\" graphql:\"id\""
	IsManaged       *bool          "json:\"isManaged,omitempty\" graphql:\"isManaged\""
	LogoURL         *string        "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name            string         "json:\"name\" graphql:\"name\""
	Operation       history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID         *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref             *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags            []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetGravatarLogoURL() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.GravatarLogoURL
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetIsManaged() *bool {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.IsManaged
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetLogoURL() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.LogoURL
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllGroupHistories_GroupHistories_Edges struct {
	Node *GetAllGroupHistories_GroupHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllGroupHistories_GroupHistories_Edges) GetNode() *GetAllGroupHistories_GroupHistories_Edges_Node {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges{}
	}
	return t.Node
}

type GetAllGroupHistories_GroupHistories struct {
	Edges      []*GetAllGroupHistories_GroupHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllGroupHistories_GroupHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                        "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllGroupHistories_GroupHistories) GetEdges() []*GetAllGroupHistories_GroupHistories_Edges {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories{}
	}
	return t.Edges
}
func (t *GetAllGroupHistories_GroupHistories) GetPageInfo() *GetAllGroupHistories_GroupHistories_PageInfo {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllGroupHistories_GroupHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories{}
	}
	return t.TotalCount
}

type GetGroupHistories_GroupHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetGroupHistories_GroupHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetGroupHistories_GroupHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetGroupHistories_GroupHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetGroupHistories_GroupHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetGroupHistories_GroupHistories_Edges_Node struct {
	CreatedAt       *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string        "json:\"description,omitempty\" graphql:\"description\""
	DisplayID       string         "json:\"displayID\" graphql:\"displayID\""
	DisplayName     string         "json:\"displayName\" graphql:\"displayName\""
	GravatarLogoURL *string        "json:\"gravatarLogoURL,omitempty\" graphql:\"gravatarLogoURL\""
	HistoryTime     time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID              string         "json:\"id\" graphql:\"id\""
	IsManaged       *bool          "json:\"isManaged,omitempty\" graphql:\"isManaged\""
	LogoURL         *string        "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name            string         "json:\"name\" graphql:\"name\""
	Operation       history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID         *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref             *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags            []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetGroupHistories_GroupHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetGravatarLogoURL() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.GravatarLogoURL
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetIsManaged() *bool {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.IsManaged
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetLogoURL() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.LogoURL
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetGroupHistories_GroupHistories_Edges struct {
	Node *GetGroupHistories_GroupHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetGroupHistories_GroupHistories_Edges) GetNode() *GetGroupHistories_GroupHistories_Edges_Node {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges{}
	}
	return t.Node
}

type GetGroupHistories_GroupHistories struct {
	Edges      []*GetGroupHistories_GroupHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetGroupHistories_GroupHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetGroupHistories_GroupHistories) GetEdges() []*GetGroupHistories_GroupHistories_Edges {
	if t == nil {
		t = &GetGroupHistories_GroupHistories{}
	}
	return t.Edges
}
func (t *GetGroupHistories_GroupHistories) GetPageInfo() *GetGroupHistories_GroupHistories_PageInfo {
	if t == nil {
		t = &GetGroupHistories_GroupHistories{}
	}
	return &t.PageInfo
}
func (t *GetGroupHistories_GroupHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetGroupHistories_GroupHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership_GroupMemberships struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID   string     "json:\"groupID\" graphql:\"groupID\""
	ID        string     "json:\"id\" graphql:\"id\""
	Role      enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID    string     "json:\"userID\" graphql:\"userID\""
}

func (t *CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership_GroupMemberships) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership_GroupMemberships) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership_GroupMemberships) GetGroupID() string {
	if t == nil {
		t = &CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return t.GroupID
}
func (t *CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership_GroupMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership_GroupMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership_GroupMemberships) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership_GroupMemberships) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership_GroupMemberships) GetUserID() string {
	if t == nil {
		t = &CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return t.UserID
}

type CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership struct {
	GroupMemberships []*CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership_GroupMemberships "json:\"groupMemberships,omitempty\" graphql:\"groupMemberships\""
}

func (t *CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership) GetGroupMemberships() []*CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership_GroupMemberships {
	if t == nil {
		t = &CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership{}
	}
	return t.GroupMemberships
}

type CreateBulkGroupMembership_CreateBulkGroupMembership_GroupMemberships struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID   string     "json:\"groupID\" graphql:\"groupID\""
	ID        string     "json:\"id\" graphql:\"id\""
	Role      enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID    string     "json:\"userID\" graphql:\"userID\""
}

func (t *CreateBulkGroupMembership_CreateBulkGroupMembership_GroupMemberships) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkGroupMembership_CreateBulkGroupMembership_GroupMemberships{}
	}
	return t.CreatedAt
}
func (t *CreateBulkGroupMembership_CreateBulkGroupMembership_GroupMemberships) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkGroupMembership_CreateBulkGroupMembership_GroupMemberships{}
	}
	return t.CreatedBy
}
func (t *CreateBulkGroupMembership_CreateBulkGroupMembership_GroupMemberships) GetGroupID() string {
	if t == nil {
		t = &CreateBulkGroupMembership_CreateBulkGroupMembership_GroupMemberships{}
	}
	return t.GroupID
}
func (t *CreateBulkGroupMembership_CreateBulkGroupMembership_GroupMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkGroupMembership_CreateBulkGroupMembership_GroupMemberships{}
	}
	return t.ID
}
func (t *CreateBulkGroupMembership_CreateBulkGroupMembership_GroupMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkGroupMembership_CreateBulkGroupMembership_GroupMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkGroupMembership_CreateBulkGroupMembership_GroupMemberships) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkGroupMembership_CreateBulkGroupMembership_GroupMemberships{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkGroupMembership_CreateBulkGroupMembership_GroupMemberships) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkGroupMembership_CreateBulkGroupMembership_GroupMemberships{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkGroupMembership_CreateBulkGroupMembership_GroupMemberships) GetUserID() string {
	if t == nil {
		t = &CreateBulkGroupMembership_CreateBulkGroupMembership_GroupMemberships{}
	}
	return t.UserID
}

type CreateBulkGroupMembership_CreateBulkGroupMembership struct {
	GroupMemberships []*CreateBulkGroupMembership_CreateBulkGroupMembership_GroupMemberships "json:\"groupMemberships,omitempty\" graphql:\"groupMemberships\""
}

func (t *CreateBulkGroupMembership_CreateBulkGroupMembership) GetGroupMemberships() []*CreateBulkGroupMembership_CreateBulkGroupMembership_GroupMemberships {
	if t == nil {
		t = &CreateBulkGroupMembership_CreateBulkGroupMembership{}
	}
	return t.GroupMemberships
}

type CreateGroupMembership_CreateGroupMembership_GroupMembership_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateGroupMembership_CreateGroupMembership_GroupMembership_User) GetDisplayName() string {
	if t == nil {
		t = &CreateGroupMembership_CreateGroupMembership_GroupMembership_User{}
	}
	return t.DisplayName
}
func (t *CreateGroupMembership_CreateGroupMembership_GroupMembership_User) GetEmail() string {
	if t == nil {
		t = &CreateGroupMembership_CreateGroupMembership_GroupMembership_User{}
	}
	return t.Email
}
func (t *CreateGroupMembership_CreateGroupMembership_GroupMembership_User) GetFirstName() *string {
	if t == nil {
		t = &CreateGroupMembership_CreateGroupMembership_GroupMembership_User{}
	}
	return t.FirstName
}
func (t *CreateGroupMembership_CreateGroupMembership_GroupMembership_User) GetID() string {
	if t == nil {
		t = &CreateGroupMembership_CreateGroupMembership_GroupMembership_User{}
	}
	return t.ID
}
func (t *CreateGroupMembership_CreateGroupMembership_GroupMembership_User) GetLastName() *string {
	if t == nil {
		t = &CreateGroupMembership_CreateGroupMembership_GroupMembership_User{}
	}
	return t.LastName
}

type CreateGroupMembership_CreateGroupMembership_GroupMembership struct {
	CreatedAt *time.Time                                                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID   string                                                           "json:\"groupID\" graphql:\"groupID\""
	ID        string                                                           "json:\"id\" graphql:\"id\""
	Role      enums.Role                                                       "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time                                                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	User      CreateGroupMembership_CreateGroupMembership_GroupMembership_User "json:\"user\" graphql:\"user\""
}

func (t *CreateGroupMembership_CreateGroupMembership_GroupMembership) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateGroupMembership_CreateGroupMembership_GroupMembership{}
	}
	return t.CreatedAt
}
func (t *CreateGroupMembership_CreateGroupMembership_GroupMembership) GetCreatedBy() *string {
	if t == nil {
		t = &CreateGroupMembership_CreateGroupMembership_GroupMembership{}
	}
	return t.CreatedBy
}
func (t *CreateGroupMembership_CreateGroupMembership_GroupMembership) GetGroupID() string {
	if t == nil {
		t = &CreateGroupMembership_CreateGroupMembership_GroupMembership{}
	}
	return t.GroupID
}
func (t *CreateGroupMembership_CreateGroupMembership_GroupMembership) GetID() string {
	if t == nil {
		t = &CreateGroupMembership_CreateGroupMembership_GroupMembership{}
	}
	return t.ID
}
func (t *CreateGroupMembership_CreateGroupMembership_GroupMembership) GetRole() *enums.Role {
	if t == nil {
		t = &CreateGroupMembership_CreateGroupMembership_GroupMembership{}
	}
	return &t.Role
}
func (t *CreateGroupMembership_CreateGroupMembership_GroupMembership) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateGroupMembership_CreateGroupMembership_GroupMembership{}
	}
	return t.UpdatedAt
}
func (t *CreateGroupMembership_CreateGroupMembership_GroupMembership) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateGroupMembership_CreateGroupMembership_GroupMembership{}
	}
	return t.UpdatedBy
}
func (t *CreateGroupMembership_CreateGroupMembership_GroupMembership) GetUser() *CreateGroupMembership_CreateGroupMembership_GroupMembership_User {
	if t == nil {
		t = &CreateGroupMembership_CreateGroupMembership_GroupMembership{}
	}
	return &t.User
}

type CreateGroupMembership_CreateGroupMembership struct {
	GroupMembership CreateGroupMembership_CreateGroupMembership_GroupMembership "json:\"groupMembership\" graphql:\"groupMembership\""
}

func (t *CreateGroupMembership_CreateGroupMembership) GetGroupMembership() *CreateGroupMembership_CreateGroupMembership_GroupMembership {
	if t == nil {
		t = &CreateGroupMembership_CreateGroupMembership{}
	}
	return &t.GroupMembership
}

type DeleteGroupMembership_DeleteGroupMembership struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteGroupMembership_DeleteGroupMembership) GetDeletedID() string {
	if t == nil {
		t = &DeleteGroupMembership_DeleteGroupMembership{}
	}
	return t.DeletedID
}

type GetAllGroupMemberships_GroupMemberships_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllGroupMemberships_GroupMemberships_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllGroupMemberships_GroupMemberships_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllGroupMemberships_GroupMemberships_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllGroupMemberships_GroupMemberships_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllGroupMemberships_GroupMemberships_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllGroupMemberships_GroupMemberships_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllGroupMemberships_GroupMemberships_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllGroupMemberships_GroupMemberships_PageInfo{}
	}
	return t.StartCursor
}

type GetAllGroupMemberships_GroupMemberships_Edges_Node_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetAllGroupMemberships_GroupMemberships_Edges_Node_User) GetDisplayName() string {
	if t == nil {
		t = &GetAllGroupMemberships_GroupMemberships_Edges_Node_User{}
	}
	return t.DisplayName
}
func (t *GetAllGroupMemberships_GroupMemberships_Edges_Node_User) GetEmail() string {
	if t == nil {
		t = &GetAllGroupMemberships_GroupMemberships_Edges_Node_User{}
	}
	return t.Email
}
func (t *GetAllGroupMemberships_GroupMemberships_Edges_Node_User) GetFirstName() *string {
	if t == nil {
		t = &GetAllGroupMemberships_GroupMemberships_Edges_Node_User{}
	}
	return t.FirstName
}
func (t *GetAllGroupMemberships_GroupMemberships_Edges_Node_User) GetID() string {
	if t == nil {
		t = &GetAllGroupMemberships_GroupMemberships_Edges_Node_User{}
	}
	return t.ID
}
func (t *GetAllGroupMemberships_GroupMemberships_Edges_Node_User) GetLastName() *string {
	if t == nil {
		t = &GetAllGroupMemberships_GroupMemberships_Edges_Node_User{}
	}
	return t.LastName
}

type GetAllGroupMemberships_GroupMemberships_Edges_Node struct {
	CreatedAt *time.Time                                              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID   string                                                  "json:\"groupID\" graphql:\"groupID\""
	ID        string                                                  "json:\"id\" graphql:\"id\""
	Role      enums.Role                                              "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time                                              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	User      GetAllGroupMemberships_GroupMemberships_Edges_Node_User "json:\"user\" graphql:\"user\""
}

func (t *GetAllGroupMemberships_GroupMemberships_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupMemberships_GroupMemberships_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllGroupMemberships_GroupMemberships_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroupMemberships_GroupMemberships_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllGroupMemberships_GroupMemberships_Edges_Node) GetGroupID() string {
	if t == nil {
		t = &GetAllGroupMemberships_GroupMemberships_Edges_Node{}
	}
	return t.GroupID
}
func (t *GetAllGroupMemberships_GroupMemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllGroupMemberships_GroupMemberships_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllGroupMemberships_GroupMemberships_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllGroupMemberships_GroupMemberships_Edges_Node{}
	}
	return &t.Role
}
func (t *GetAllGroupMemberships_GroupMemberships_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupMemberships_GroupMemberships_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllGroupMemberships_GroupMemberships_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroupMemberships_GroupMemberships_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllGroupMemberships_GroupMemberships_Edges_Node) GetUser() *GetAllGroupMemberships_GroupMemberships_Edges_Node_User {
	if t == nil {
		t = &GetAllGroupMemberships_GroupMemberships_Edges_Node{}
	}
	return &t.User
}

type GetAllGroupMemberships_GroupMemberships_Edges struct {
	Node *GetAllGroupMemberships_GroupMemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllGroupMemberships_GroupMemberships_Edges) GetNode() *GetAllGroupMemberships_GroupMemberships_Edges_Node {
	if t == nil {
		t = &GetAllGroupMemberships_GroupMemberships_Edges{}
	}
	return t.Node
}

type GetAllGroupMemberships_GroupMemberships struct {
	Edges      []*GetAllGroupMemberships_GroupMemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllGroupMemberships_GroupMemberships_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                            "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllGroupMemberships_GroupMemberships) GetEdges() []*GetAllGroupMemberships_GroupMemberships_Edges {
	if t == nil {
		t = &GetAllGroupMemberships_GroupMemberships{}
	}
	return t.Edges
}
func (t *GetAllGroupMemberships_GroupMemberships) GetPageInfo() *GetAllGroupMemberships_GroupMemberships_PageInfo {
	if t == nil {
		t = &GetAllGroupMemberships_GroupMemberships{}
	}
	return &t.PageInfo
}
func (t *GetAllGroupMemberships_GroupMemberships) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllGroupMemberships_GroupMemberships{}
	}
	return t.TotalCount
}

type GetGroupMembershipByID_GroupMembership_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetGroupMembershipByID_GroupMembership_User) GetDisplayName() string {
	if t == nil {
		t = &GetGroupMembershipByID_GroupMembership_User{}
	}
	return t.DisplayName
}
func (t *GetGroupMembershipByID_GroupMembership_User) GetEmail() string {
	if t == nil {
		t = &GetGroupMembershipByID_GroupMembership_User{}
	}
	return t.Email
}
func (t *GetGroupMembershipByID_GroupMembership_User) GetFirstName() *string {
	if t == nil {
		t = &GetGroupMembershipByID_GroupMembership_User{}
	}
	return t.FirstName
}
func (t *GetGroupMembershipByID_GroupMembership_User) GetID() string {
	if t == nil {
		t = &GetGroupMembershipByID_GroupMembership_User{}
	}
	return t.ID
}
func (t *GetGroupMembershipByID_GroupMembership_User) GetLastName() *string {
	if t == nil {
		t = &GetGroupMembershipByID_GroupMembership_User{}
	}
	return t.LastName
}

type GetGroupMembershipByID_GroupMembership struct {
	CreatedAt *time.Time                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID   string                                      "json:\"groupID\" graphql:\"groupID\""
	ID        string                                      "json:\"id\" graphql:\"id\""
	Role      enums.Role                                  "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	User      GetGroupMembershipByID_GroupMembership_User "json:\"user\" graphql:\"user\""
}

func (t *GetGroupMembershipByID_GroupMembership) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupMembershipByID_GroupMembership{}
	}
	return t.CreatedAt
}
func (t *GetGroupMembershipByID_GroupMembership) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupMembershipByID_GroupMembership{}
	}
	return t.CreatedBy
}
func (t *GetGroupMembershipByID_GroupMembership) GetGroupID() string {
	if t == nil {
		t = &GetGroupMembershipByID_GroupMembership{}
	}
	return t.GroupID
}
func (t *GetGroupMembershipByID_GroupMembership) GetID() string {
	if t == nil {
		t = &GetGroupMembershipByID_GroupMembership{}
	}
	return t.ID
}
func (t *GetGroupMembershipByID_GroupMembership) GetRole() *enums.Role {
	if t == nil {
		t = &GetGroupMembershipByID_GroupMembership{}
	}
	return &t.Role
}
func (t *GetGroupMembershipByID_GroupMembership) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupMembershipByID_GroupMembership{}
	}
	return t.UpdatedAt
}
func (t *GetGroupMembershipByID_GroupMembership) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupMembershipByID_GroupMembership{}
	}
	return t.UpdatedBy
}
func (t *GetGroupMembershipByID_GroupMembership) GetUser() *GetGroupMembershipByID_GroupMembership_User {
	if t == nil {
		t = &GetGroupMembershipByID_GroupMembership{}
	}
	return &t.User
}

type GetGroupMemberships_GroupMemberships_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetGroupMemberships_GroupMemberships_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetGroupMemberships_GroupMemberships_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetGroupMemberships_GroupMemberships_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetGroupMemberships_GroupMemberships_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetGroupMemberships_GroupMemberships_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetGroupMemberships_GroupMemberships_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetGroupMemberships_GroupMemberships_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetGroupMemberships_GroupMemberships_PageInfo{}
	}
	return t.StartCursor
}

type GetGroupMemberships_GroupMemberships_Edges_Node_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetGroupMemberships_GroupMemberships_Edges_Node_User) GetDisplayName() string {
	if t == nil {
		t = &GetGroupMemberships_GroupMemberships_Edges_Node_User{}
	}
	return t.DisplayName
}
func (t *GetGroupMemberships_GroupMemberships_Edges_Node_User) GetEmail() string {
	if t == nil {
		t = &GetGroupMemberships_GroupMemberships_Edges_Node_User{}
	}
	return t.Email
}
func (t *GetGroupMemberships_GroupMemberships_Edges_Node_User) GetFirstName() *string {
	if t == nil {
		t = &GetGroupMemberships_GroupMemberships_Edges_Node_User{}
	}
	return t.FirstName
}
func (t *GetGroupMemberships_GroupMemberships_Edges_Node_User) GetID() string {
	if t == nil {
		t = &GetGroupMemberships_GroupMemberships_Edges_Node_User{}
	}
	return t.ID
}
func (t *GetGroupMemberships_GroupMemberships_Edges_Node_User) GetLastName() *string {
	if t == nil {
		t = &GetGroupMemberships_GroupMemberships_Edges_Node_User{}
	}
	return t.LastName
}

type GetGroupMemberships_GroupMemberships_Edges_Node struct {
	CreatedAt *time.Time                                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID   string                                               "json:\"groupID\" graphql:\"groupID\""
	ID        string                                               "json:\"id\" graphql:\"id\""
	Role      enums.Role                                           "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time                                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	User      GetGroupMemberships_GroupMemberships_Edges_Node_User "json:\"user\" graphql:\"user\""
}

func (t *GetGroupMemberships_GroupMemberships_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupMemberships_GroupMemberships_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetGroupMemberships_GroupMemberships_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupMemberships_GroupMemberships_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetGroupMemberships_GroupMemberships_Edges_Node) GetGroupID() string {
	if t == nil {
		t = &GetGroupMemberships_GroupMemberships_Edges_Node{}
	}
	return t.GroupID
}
func (t *GetGroupMemberships_GroupMemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &GetGroupMemberships_GroupMemberships_Edges_Node{}
	}
	return t.ID
}
func (t *GetGroupMemberships_GroupMemberships_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetGroupMemberships_GroupMemberships_Edges_Node{}
	}
	return &t.Role
}
func (t *GetGroupMemberships_GroupMemberships_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupMemberships_GroupMemberships_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetGroupMemberships_GroupMemberships_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupMemberships_GroupMemberships_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetGroupMemberships_GroupMemberships_Edges_Node) GetUser() *GetGroupMemberships_GroupMemberships_Edges_Node_User {
	if t == nil {
		t = &GetGroupMemberships_GroupMemberships_Edges_Node{}
	}
	return &t.User
}

type GetGroupMemberships_GroupMemberships_Edges struct {
	Node *GetGroupMemberships_GroupMemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetGroupMemberships_GroupMemberships_Edges) GetNode() *GetGroupMemberships_GroupMemberships_Edges_Node {
	if t == nil {
		t = &GetGroupMemberships_GroupMemberships_Edges{}
	}
	return t.Node
}

type GetGroupMemberships_GroupMemberships struct {
	Edges      []*GetGroupMemberships_GroupMemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetGroupMemberships_GroupMemberships_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetGroupMemberships_GroupMemberships) GetEdges() []*GetGroupMemberships_GroupMemberships_Edges {
	if t == nil {
		t = &GetGroupMemberships_GroupMemberships{}
	}
	return t.Edges
}
func (t *GetGroupMemberships_GroupMemberships) GetPageInfo() *GetGroupMemberships_GroupMemberships_PageInfo {
	if t == nil {
		t = &GetGroupMemberships_GroupMemberships{}
	}
	return &t.PageInfo
}
func (t *GetGroupMemberships_GroupMemberships) GetTotalCount() int64 {
	if t == nil {
		t = &GetGroupMemberships_GroupMemberships{}
	}
	return t.TotalCount
}

type UpdateGroupMembership_UpdateGroupMembership_GroupMembership_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *UpdateGroupMembership_UpdateGroupMembership_GroupMembership_User) GetDisplayName() string {
	if t == nil {
		t = &UpdateGroupMembership_UpdateGroupMembership_GroupMembership_User{}
	}
	return t.DisplayName
}
func (t *UpdateGroupMembership_UpdateGroupMembership_GroupMembership_User) GetEmail() string {
	if t == nil {
		t = &UpdateGroupMembership_UpdateGroupMembership_GroupMembership_User{}
	}
	return t.Email
}
func (t *UpdateGroupMembership_UpdateGroupMembership_GroupMembership_User) GetFirstName() *string {
	if t == nil {
		t = &UpdateGroupMembership_UpdateGroupMembership_GroupMembership_User{}
	}
	return t.FirstName
}
func (t *UpdateGroupMembership_UpdateGroupMembership_GroupMembership_User) GetID() string {
	if t == nil {
		t = &UpdateGroupMembership_UpdateGroupMembership_GroupMembership_User{}
	}
	return t.ID
}
func (t *UpdateGroupMembership_UpdateGroupMembership_GroupMembership_User) GetLastName() *string {
	if t == nil {
		t = &UpdateGroupMembership_UpdateGroupMembership_GroupMembership_User{}
	}
	return t.LastName
}

type UpdateGroupMembership_UpdateGroupMembership_GroupMembership struct {
	CreatedAt *time.Time                                                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID   string                                                           "json:\"groupID\" graphql:\"groupID\""
	ID        string                                                           "json:\"id\" graphql:\"id\""
	Role      enums.Role                                                       "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time                                                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	User      UpdateGroupMembership_UpdateGroupMembership_GroupMembership_User "json:\"user\" graphql:\"user\""
}

func (t *UpdateGroupMembership_UpdateGroupMembership_GroupMembership) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateGroupMembership_UpdateGroupMembership_GroupMembership{}
	}
	return t.CreatedAt
}
func (t *UpdateGroupMembership_UpdateGroupMembership_GroupMembership) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateGroupMembership_UpdateGroupMembership_GroupMembership{}
	}
	return t.CreatedBy
}
func (t *UpdateGroupMembership_UpdateGroupMembership_GroupMembership) GetGroupID() string {
	if t == nil {
		t = &UpdateGroupMembership_UpdateGroupMembership_GroupMembership{}
	}
	return t.GroupID
}
func (t *UpdateGroupMembership_UpdateGroupMembership_GroupMembership) GetID() string {
	if t == nil {
		t = &UpdateGroupMembership_UpdateGroupMembership_GroupMembership{}
	}
	return t.ID
}
func (t *UpdateGroupMembership_UpdateGroupMembership_GroupMembership) GetRole() *enums.Role {
	if t == nil {
		t = &UpdateGroupMembership_UpdateGroupMembership_GroupMembership{}
	}
	return &t.Role
}
func (t *UpdateGroupMembership_UpdateGroupMembership_GroupMembership) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateGroupMembership_UpdateGroupMembership_GroupMembership{}
	}
	return t.UpdatedAt
}
func (t *UpdateGroupMembership_UpdateGroupMembership_GroupMembership) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateGroupMembership_UpdateGroupMembership_GroupMembership{}
	}
	return t.UpdatedBy
}
func (t *UpdateGroupMembership_UpdateGroupMembership_GroupMembership) GetUser() *UpdateGroupMembership_UpdateGroupMembership_GroupMembership_User {
	if t == nil {
		t = &UpdateGroupMembership_UpdateGroupMembership_GroupMembership{}
	}
	return &t.User
}

type UpdateGroupMembership_UpdateGroupMembership struct {
	GroupMembership UpdateGroupMembership_UpdateGroupMembership_GroupMembership "json:\"groupMembership\" graphql:\"groupMembership\""
}

func (t *UpdateGroupMembership_UpdateGroupMembership) GetGroupMembership() *UpdateGroupMembership_UpdateGroupMembership_GroupMembership {
	if t == nil {
		t = &UpdateGroupMembership_UpdateGroupMembership{}
	}
	return &t.GroupMembership
}

type GetAllGroupMembershipHistories_GroupMembershipHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID     string         "json:\"groupID\" graphql:\"groupID\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Role        enums.Role     "json:\"role\" graphql:\"role\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID      string         "json:\"userID\" graphql:\"userID\""
}

func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetGroupID() string {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.GroupID
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return &t.Role
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.UserID
}

type GetAllGroupMembershipHistories_GroupMembershipHistories_Edges struct {
	Node *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges) GetNode() *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges{}
	}
	return t.Node
}

type GetAllGroupMembershipHistories_GroupMembershipHistories struct {
	Edges      []*GetAllGroupMembershipHistories_GroupMembershipHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllGroupMembershipHistories_GroupMembershipHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                            "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllGroupMembershipHistories_GroupMembershipHistories) GetEdges() []*GetAllGroupMembershipHistories_GroupMembershipHistories_Edges {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories{}
	}
	return t.Edges
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories) GetPageInfo() *GetAllGroupMembershipHistories_GroupMembershipHistories_PageInfo {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories{}
	}
	return t.TotalCount
}

type GetGroupMembershipHistories_GroupMembershipHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetGroupMembershipHistories_GroupMembershipHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID     string         "json:\"groupID\" graphql:\"groupID\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Role        enums.Role     "json:\"role\" graphql:\"role\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID      string         "json:\"userID\" graphql:\"userID\""
}

func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetGroupID() string {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.GroupID
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return &t.Role
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.UserID
}

type GetGroupMembershipHistories_GroupMembershipHistories_Edges struct {
	Node *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges) GetNode() *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges{}
	}
	return t.Node
}

type GetGroupMembershipHistories_GroupMembershipHistories struct {
	Edges      []*GetGroupMembershipHistories_GroupMembershipHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetGroupMembershipHistories_GroupMembershipHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetGroupMembershipHistories_GroupMembershipHistories) GetEdges() []*GetGroupMembershipHistories_GroupMembershipHistories_Edges {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories{}
	}
	return t.Edges
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories) GetPageInfo() *GetGroupMembershipHistories_GroupMembershipHistories_PageInfo {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories{}
	}
	return &t.PageInfo
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID      *string          "json:\"groupID,omitempty\" graphql:\"groupID\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings) GetGroupID() *string {
	if t == nil {
		t = &CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings{}
	}
	return t.GroupID
}
func (t *CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings{}
	}
	return &t.JoinPolicy
}
func (t *CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings) GetSyncToGithub() *bool {
	if t == nil {
		t = &CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings{}
	}
	return t.SyncToGithub
}
func (t *CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings) GetSyncToSlack() *bool {
	if t == nil {
		t = &CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings{}
	}
	return t.SyncToSlack
}
func (t *CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings{}
	}
	return &t.Visibility
}

type CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting struct {
	GroupSettings []*CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings "json:\"groupSettings,omitempty\" graphql:\"groupSettings\""
}

func (t *CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting) GetGroupSettings() []*CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting_GroupSettings {
	if t == nil {
		t = &CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting{}
	}
	return t.GroupSettings
}

type CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID      *string          "json:\"groupID,omitempty\" graphql:\"groupID\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings{}
	}
	return t.CreatedAt
}
func (t *CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings{}
	}
	return t.CreatedBy
}
func (t *CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings) GetGroupID() *string {
	if t == nil {
		t = &CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings{}
	}
	return t.GroupID
}
func (t *CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings) GetID() string {
	if t == nil {
		t = &CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings{}
	}
	return t.ID
}
func (t *CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings{}
	}
	return &t.JoinPolicy
}
func (t *CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings) GetSyncToGithub() *bool {
	if t == nil {
		t = &CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings{}
	}
	return t.SyncToGithub
}
func (t *CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings) GetSyncToSlack() *bool {
	if t == nil {
		t = &CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings{}
	}
	return t.SyncToSlack
}
func (t *CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings{}
	}
	return &t.Visibility
}

type CreateBulkGroupSetting_CreateBulkGroupSetting struct {
	GroupSettings []*CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings "json:\"groupSettings,omitempty\" graphql:\"groupSettings\""
}

func (t *CreateBulkGroupSetting_CreateBulkGroupSetting) GetGroupSettings() []*CreateBulkGroupSetting_CreateBulkGroupSetting_GroupSettings {
	if t == nil {
		t = &CreateBulkGroupSetting_CreateBulkGroupSetting{}
	}
	return t.GroupSettings
}

type CreateGroupSetting_CreateGroupSetting_GroupSetting struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID      *string          "json:\"groupID,omitempty\" graphql:\"groupID\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *CreateGroupSetting_CreateGroupSetting_GroupSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateGroupSetting_CreateGroupSetting_GroupSetting{}
	}
	return t.CreatedAt
}
func (t *CreateGroupSetting_CreateGroupSetting_GroupSetting) GetCreatedBy() *string {
	if t == nil {
		t = &CreateGroupSetting_CreateGroupSetting_GroupSetting{}
	}
	return t.CreatedBy
}
func (t *CreateGroupSetting_CreateGroupSetting_GroupSetting) GetGroupID() *string {
	if t == nil {
		t = &CreateGroupSetting_CreateGroupSetting_GroupSetting{}
	}
	return t.GroupID
}
func (t *CreateGroupSetting_CreateGroupSetting_GroupSetting) GetID() string {
	if t == nil {
		t = &CreateGroupSetting_CreateGroupSetting_GroupSetting{}
	}
	return t.ID
}
func (t *CreateGroupSetting_CreateGroupSetting_GroupSetting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &CreateGroupSetting_CreateGroupSetting_GroupSetting{}
	}
	return &t.JoinPolicy
}
func (t *CreateGroupSetting_CreateGroupSetting_GroupSetting) GetSyncToGithub() *bool {
	if t == nil {
		t = &CreateGroupSetting_CreateGroupSetting_GroupSetting{}
	}
	return t.SyncToGithub
}
func (t *CreateGroupSetting_CreateGroupSetting_GroupSetting) GetSyncToSlack() *bool {
	if t == nil {
		t = &CreateGroupSetting_CreateGroupSetting_GroupSetting{}
	}
	return t.SyncToSlack
}
func (t *CreateGroupSetting_CreateGroupSetting_GroupSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateGroupSetting_CreateGroupSetting_GroupSetting{}
	}
	return t.UpdatedAt
}
func (t *CreateGroupSetting_CreateGroupSetting_GroupSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateGroupSetting_CreateGroupSetting_GroupSetting{}
	}
	return t.UpdatedBy
}
func (t *CreateGroupSetting_CreateGroupSetting_GroupSetting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &CreateGroupSetting_CreateGroupSetting_GroupSetting{}
	}
	return &t.Visibility
}

type CreateGroupSetting_CreateGroupSetting struct {
	GroupSetting CreateGroupSetting_CreateGroupSetting_GroupSetting "json:\"groupSetting\" graphql:\"groupSetting\""
}

func (t *CreateGroupSetting_CreateGroupSetting) GetGroupSetting() *CreateGroupSetting_CreateGroupSetting_GroupSetting {
	if t == nil {
		t = &CreateGroupSetting_CreateGroupSetting{}
	}
	return &t.GroupSetting
}

type DeleteGroupSetting_DeleteGroupSetting struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteGroupSetting_DeleteGroupSetting) GetDeletedID() string {
	if t == nil {
		t = &DeleteGroupSetting_DeleteGroupSetting{}
	}
	return t.DeletedID
}

type GetAllGroupSettings_GroupSettings_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllGroupSettings_GroupSettings_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllGroupSettings_GroupSettings_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllGroupSettings_GroupSettings_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllGroupSettings_GroupSettings_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_PageInfo{}
	}
	return t.StartCursor
}

type GetAllGroupSettings_GroupSettings_Edges_Node struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID      *string          "json:\"groupID,omitempty\" graphql:\"groupID\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetGroupID() *string {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.GroupID
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return &t.JoinPolicy
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.SyncToGithub
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.SyncToSlack
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return &t.Visibility
}

type GetAllGroupSettings_GroupSettings_Edges struct {
	Node *GetAllGroupSettings_GroupSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllGroupSettings_GroupSettings_Edges) GetNode() *GetAllGroupSettings_GroupSettings_Edges_Node {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges{}
	}
	return t.Node
}

type GetAllGroupSettings_GroupSettings struct {
	Edges      []*GetAllGroupSettings_GroupSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllGroupSettings_GroupSettings_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllGroupSettings_GroupSettings) GetEdges() []*GetAllGroupSettings_GroupSettings_Edges {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings{}
	}
	return t.Edges
}
func (t *GetAllGroupSettings_GroupSettings) GetPageInfo() *GetAllGroupSettings_GroupSettings_PageInfo {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings{}
	}
	return &t.PageInfo
}
func (t *GetAllGroupSettings_GroupSettings) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings{}
	}
	return t.TotalCount
}

type GetGroupSettingByID_GroupSetting struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID      *string          "json:\"groupID,omitempty\" graphql:\"groupID\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetGroupSettingByID_GroupSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.CreatedAt
}
func (t *GetGroupSettingByID_GroupSetting) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.CreatedBy
}
func (t *GetGroupSettingByID_GroupSetting) GetGroupID() *string {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.GroupID
}
func (t *GetGroupSettingByID_GroupSetting) GetID() string {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.ID
}
func (t *GetGroupSettingByID_GroupSetting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return &t.JoinPolicy
}
func (t *GetGroupSettingByID_GroupSetting) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.SyncToGithub
}
func (t *GetGroupSettingByID_GroupSetting) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.SyncToSlack
}
func (t *GetGroupSettingByID_GroupSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.UpdatedAt
}
func (t *GetGroupSettingByID_GroupSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.UpdatedBy
}
func (t *GetGroupSettingByID_GroupSetting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return &t.Visibility
}

type GetGroupSettings_GroupSettings_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetGroupSettings_GroupSettings_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetGroupSettings_GroupSettings_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetGroupSettings_GroupSettings_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetGroupSettings_GroupSettings_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_PageInfo{}
	}
	return t.StartCursor
}

type GetGroupSettings_GroupSettings_Edges_Node struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID      *string          "json:\"groupID,omitempty\" graphql:\"groupID\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetGroupSettings_GroupSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetGroupID() *string {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.GroupID
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return &t.JoinPolicy
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.SyncToGithub
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.SyncToSlack
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return &t.Visibility
}

type GetGroupSettings_GroupSettings_Edges struct {
	Node *GetGroupSettings_GroupSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetGroupSettings_GroupSettings_Edges) GetNode() *GetGroupSettings_GroupSettings_Edges_Node {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges{}
	}
	return t.Node
}

type GetGroupSettings_GroupSettings struct {
	Edges      []*GetGroupSettings_GroupSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetGroupSettings_GroupSettings_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetGroupSettings_GroupSettings) GetEdges() []*GetGroupSettings_GroupSettings_Edges {
	if t == nil {
		t = &GetGroupSettings_GroupSettings{}
	}
	return t.Edges
}
func (t *GetGroupSettings_GroupSettings) GetPageInfo() *GetGroupSettings_GroupSettings_PageInfo {
	if t == nil {
		t = &GetGroupSettings_GroupSettings{}
	}
	return &t.PageInfo
}
func (t *GetGroupSettings_GroupSettings) GetTotalCount() int64 {
	if t == nil {
		t = &GetGroupSettings_GroupSettings{}
	}
	return t.TotalCount
}

type UpdateGroupSetting_UpdateGroupSetting_GroupSetting struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID      *string          "json:\"groupID,omitempty\" graphql:\"groupID\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.CreatedAt
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.CreatedBy
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetGroupID() *string {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.GroupID
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetID() string {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.ID
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return &t.JoinPolicy
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetSyncToGithub() *bool {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.SyncToGithub
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetSyncToSlack() *bool {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.SyncToSlack
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.UpdatedAt
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.UpdatedBy
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return &t.Visibility
}

type UpdateGroupSetting_UpdateGroupSetting struct {
	GroupSetting UpdateGroupSetting_UpdateGroupSetting_GroupSetting "json:\"groupSetting\" graphql:\"groupSetting\""
}

func (t *UpdateGroupSetting_UpdateGroupSetting) GetGroupSetting() *UpdateGroupSetting_UpdateGroupSetting_GroupSetting {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting{}
	}
	return &t.GroupSetting
}

type GetAllGroupSettingHistories_GroupSettingHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllGroupSettingHistories_GroupSettingHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID      *string          "json:\"groupID,omitempty\" graphql:\"groupID\""
	HistoryTime  time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	Operation    history.OpType   "json:\"operation\" graphql:\"operation\""
	Ref          *string          "json:\"ref,omitempty\" graphql:\"ref\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetGroupID() *string {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.GroupID
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.JoinPolicy
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.SyncToGithub
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.SyncToSlack
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.Visibility
}

type GetAllGroupSettingHistories_GroupSettingHistories_Edges struct {
	Node *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges) GetNode() *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges{}
	}
	return t.Node
}

type GetAllGroupSettingHistories_GroupSettingHistories struct {
	Edges      []*GetAllGroupSettingHistories_GroupSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllGroupSettingHistories_GroupSettingHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllGroupSettingHistories_GroupSettingHistories) GetEdges() []*GetAllGroupSettingHistories_GroupSettingHistories_Edges {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories{}
	}
	return t.Edges
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories) GetPageInfo() *GetAllGroupSettingHistories_GroupSettingHistories_PageInfo {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories{}
	}
	return t.TotalCount
}

type GetGroupSettingHistories_GroupSettingHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetGroupSettingHistories_GroupSettingHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetGroupSettingHistories_GroupSettingHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetGroupSettingHistories_GroupSettingHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetGroupSettingHistories_GroupSettingHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetGroupSettingHistories_GroupSettingHistories_Edges_Node struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID      *string          "json:\"groupID,omitempty\" graphql:\"groupID\""
	HistoryTime  time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	Operation    history.OpType   "json:\"operation\" graphql:\"operation\""
	Ref          *string          "json:\"ref,omitempty\" graphql:\"ref\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetGroupID() *string {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.GroupID
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.JoinPolicy
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.SyncToGithub
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.SyncToSlack
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.Visibility
}

type GetGroupSettingHistories_GroupSettingHistories_Edges struct {
	Node *GetGroupSettingHistories_GroupSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetGroupSettingHistories_GroupSettingHistories_Edges) GetNode() *GetGroupSettingHistories_GroupSettingHistories_Edges_Node {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges{}
	}
	return t.Node
}

type GetGroupSettingHistories_GroupSettingHistories struct {
	Edges      []*GetGroupSettingHistories_GroupSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetGroupSettingHistories_GroupSettingHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetGroupSettingHistories_GroupSettingHistories) GetEdges() []*GetGroupSettingHistories_GroupSettingHistories_Edges {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories{}
	}
	return t.Edges
}
func (t *GetGroupSettingHistories_GroupSettingHistories) GetPageInfo() *GetGroupSettingHistories_GroupSettingHistories_PageInfo {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories{}
	}
	return &t.PageInfo
}
func (t *GetGroupSettingHistories_GroupSettingHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVHush_CreateBulkCSVHush_Hushes struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string    "json:\"description,omitempty\" graphql:\"description\""
	ID          string     "json:\"id\" graphql:\"id\""
	Kind        *string    "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string     "json:\"name\" graphql:\"name\""
	OwnerID     *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SecretName  *string    "json:\"secretName,omitempty\" graphql:\"secretName\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.Description
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetID() string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.ID
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetKind() *string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.Kind
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetName() string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.Name
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetSecretName() *string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.SecretName
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVHush_CreateBulkCSVHush struct {
	Hushes []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes "json:\"hushes,omitempty\" graphql:\"hushes\""
}

func (t *CreateBulkCSVHush_CreateBulkCSVHush) GetHushes() []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush{}
	}
	return t.Hushes
}

type CreateBulkHush_CreateBulkHush_Hushes struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string    "json:\"description,omitempty\" graphql:\"description\""
	ID          string     "json:\"id\" graphql:\"id\""
	Kind        *string    "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string     "json:\"name\" graphql:\"name\""
	OwnerID     *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SecretName  *string    "json:\"secretName,omitempty\" graphql:\"secretName\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkHush_CreateBulkHush_Hushes) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.CreatedAt
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.CreatedBy
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetDescription() *string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.Description
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetID() string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.ID
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetKind() *string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.Kind
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetName() string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.Name
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.OwnerID
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetSecretName() *string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.SecretName
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.UpdatedBy
}

type CreateBulkHush_CreateBulkHush struct {
	Hushes []*CreateBulkHush_CreateBulkHush_Hushes "json:\"hushes,omitempty\" graphql:\"hushes\""
}

func (t *CreateBulkHush_CreateBulkHush) GetHushes() []*CreateBulkHush_CreateBulkHush_Hushes {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush{}
	}
	return t.Hushes
}

type CreateHush_CreateHush_Hush struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string    "json:\"description,omitempty\" graphql:\"description\""
	ID          string     "json:\"id\" graphql:\"id\""
	Kind        *string    "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string     "json:\"name\" graphql:\"name\""
	OwnerID     *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SecretName  *string    "json:\"secretName,omitempty\" graphql:\"secretName\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateHush_CreateHush_Hush) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.CreatedAt
}
func (t *CreateHush_CreateHush_Hush) GetCreatedBy() *string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.CreatedBy
}
func (t *CreateHush_CreateHush_Hush) GetDescription() *string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.Description
}
func (t *CreateHush_CreateHush_Hush) GetID() string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.ID
}
func (t *CreateHush_CreateHush_Hush) GetKind() *string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.Kind
}
func (t *CreateHush_CreateHush_Hush) GetName() string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.Name
}
func (t *CreateHush_CreateHush_Hush) GetOwnerID() *string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.OwnerID
}
func (t *CreateHush_CreateHush_Hush) GetSecretName() *string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.SecretName
}
func (t *CreateHush_CreateHush_Hush) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.UpdatedAt
}
func (t *CreateHush_CreateHush_Hush) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.UpdatedBy
}

type CreateHush_CreateHush struct {
	Hush CreateHush_CreateHush_Hush "json:\"hush\" graphql:\"hush\""
}

func (t *CreateHush_CreateHush) GetHush() *CreateHush_CreateHush_Hush {
	if t == nil {
		t = &CreateHush_CreateHush{}
	}
	return &t.Hush
}

type DeleteHush_DeleteHush struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteHush_DeleteHush) GetDeletedID() string {
	if t == nil {
		t = &DeleteHush_DeleteHush{}
	}
	return t.DeletedID
}

type GetAllHushes_Hushes_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllHushes_Hushes_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllHushes_Hushes_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllHushes_Hushes_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllHushes_Hushes_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllHushes_Hushes_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllHushes_Hushes_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_PageInfo{}
	}
	return t.StartCursor
}

type GetAllHushes_Hushes_Edges_Node struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string    "json:\"description,omitempty\" graphql:\"description\""
	ID          string     "json:\"id\" graphql:\"id\""
	Kind        *string    "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string     "json:\"name\" graphql:\"name\""
	OwnerID     *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SecretName  *string    "json:\"secretName,omitempty\" graphql:\"secretName\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllHushes_Hushes_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllHushes_Hushes_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllHushes_Hushes_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllHushes_Hushes_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllHushes_Hushes_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.Kind
}
func (t *GetAllHushes_Hushes_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllHushes_Hushes_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllHushes_Hushes_Edges_Node) GetSecretName() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.SecretName
}
func (t *GetAllHushes_Hushes_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllHushes_Hushes_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllHushes_Hushes_Edges struct {
	Node *GetAllHushes_Hushes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllHushes_Hushes_Edges) GetNode() *GetAllHushes_Hushes_Edges_Node {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges{}
	}
	return t.Node
}

type GetAllHushes_Hushes struct {
	Edges      []*GetAllHushes_Hushes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllHushes_Hushes_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                        "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllHushes_Hushes) GetEdges() []*GetAllHushes_Hushes_Edges {
	if t == nil {
		t = &GetAllHushes_Hushes{}
	}
	return t.Edges
}
func (t *GetAllHushes_Hushes) GetPageInfo() *GetAllHushes_Hushes_PageInfo {
	if t == nil {
		t = &GetAllHushes_Hushes{}
	}
	return &t.PageInfo
}
func (t *GetAllHushes_Hushes) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllHushes_Hushes{}
	}
	return t.TotalCount
}

type GetHushByID_Hush struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string    "json:\"description,omitempty\" graphql:\"description\""
	ID          string     "json:\"id\" graphql:\"id\""
	Kind        *string    "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string     "json:\"name\" graphql:\"name\""
	OwnerID     *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SecretName  *string    "json:\"secretName,omitempty\" graphql:\"secretName\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetHushByID_Hush) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.CreatedAt
}
func (t *GetHushByID_Hush) GetCreatedBy() *string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.CreatedBy
}
func (t *GetHushByID_Hush) GetDescription() *string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.Description
}
func (t *GetHushByID_Hush) GetID() string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.ID
}
func (t *GetHushByID_Hush) GetKind() *string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.Kind
}
func (t *GetHushByID_Hush) GetName() string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.Name
}
func (t *GetHushByID_Hush) GetOwnerID() *string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.OwnerID
}
func (t *GetHushByID_Hush) GetSecretName() *string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.SecretName
}
func (t *GetHushByID_Hush) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.UpdatedAt
}
func (t *GetHushByID_Hush) GetUpdatedBy() *string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.UpdatedBy
}

type GetHushes_Hushes_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetHushes_Hushes_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetHushes_Hushes_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetHushes_Hushes_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetHushes_Hushes_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetHushes_Hushes_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetHushes_Hushes_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetHushes_Hushes_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetHushes_Hushes_PageInfo{}
	}
	return t.StartCursor
}

type GetHushes_Hushes_Edges_Node struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string    "json:\"description,omitempty\" graphql:\"description\""
	ID          string     "json:\"id\" graphql:\"id\""
	Kind        *string    "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string     "json:\"name\" graphql:\"name\""
	OwnerID     *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SecretName  *string    "json:\"secretName,omitempty\" graphql:\"secretName\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetHushes_Hushes_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetHushes_Hushes_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetHushes_Hushes_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.Description
}
func (t *GetHushes_Hushes_Edges_Node) GetID() string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.ID
}
func (t *GetHushes_Hushes_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.Kind
}
func (t *GetHushes_Hushes_Edges_Node) GetName() string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.Name
}
func (t *GetHushes_Hushes_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetHushes_Hushes_Edges_Node) GetSecretName() *string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.SecretName
}
func (t *GetHushes_Hushes_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetHushes_Hushes_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetHushes_Hushes_Edges struct {
	Node *GetHushes_Hushes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetHushes_Hushes_Edges) GetNode() *GetHushes_Hushes_Edges_Node {
	if t == nil {
		t = &GetHushes_Hushes_Edges{}
	}
	return t.Node
}

type GetHushes_Hushes struct {
	Edges      []*GetHushes_Hushes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetHushes_Hushes_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetHushes_Hushes) GetEdges() []*GetHushes_Hushes_Edges {
	if t == nil {
		t = &GetHushes_Hushes{}
	}
	return t.Edges
}
func (t *GetHushes_Hushes) GetPageInfo() *GetHushes_Hushes_PageInfo {
	if t == nil {
		t = &GetHushes_Hushes{}
	}
	return &t.PageInfo
}
func (t *GetHushes_Hushes) GetTotalCount() int64 {
	if t == nil {
		t = &GetHushes_Hushes{}
	}
	return t.TotalCount
}

type UpdateHush_UpdateHush_Hush struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string    "json:\"description,omitempty\" graphql:\"description\""
	ID          string     "json:\"id\" graphql:\"id\""
	Kind        *string    "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string     "json:\"name\" graphql:\"name\""
	OwnerID     *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SecretName  *string    "json:\"secretName,omitempty\" graphql:\"secretName\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateHush_UpdateHush_Hush) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.CreatedAt
}
func (t *UpdateHush_UpdateHush_Hush) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.CreatedBy
}
func (t *UpdateHush_UpdateHush_Hush) GetDescription() *string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.Description
}
func (t *UpdateHush_UpdateHush_Hush) GetID() string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.ID
}
func (t *UpdateHush_UpdateHush_Hush) GetKind() *string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.Kind
}
func (t *UpdateHush_UpdateHush_Hush) GetName() string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.Name
}
func (t *UpdateHush_UpdateHush_Hush) GetOwnerID() *string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.OwnerID
}
func (t *UpdateHush_UpdateHush_Hush) GetSecretName() *string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.SecretName
}
func (t *UpdateHush_UpdateHush_Hush) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.UpdatedAt
}
func (t *UpdateHush_UpdateHush_Hush) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.UpdatedBy
}

type UpdateHush_UpdateHush struct {
	Hush UpdateHush_UpdateHush_Hush "json:\"hush\" graphql:\"hush\""
}

func (t *UpdateHush_UpdateHush) GetHush() *UpdateHush_UpdateHush_Hush {
	if t == nil {
		t = &UpdateHush_UpdateHush{}
	}
	return &t.Hush
}

type GetAllHushHistories_HushHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllHushHistories_HushHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllHushHistories_HushHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllHushHistories_HushHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllHushHistories_HushHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllHushHistories_HushHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string        "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Kind        *string        "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	SecretName  *string        "json:\"secretName,omitempty\" graphql:\"secretName\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllHushHistories_HushHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.Kind
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetSecretName() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.SecretName
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllHushHistories_HushHistories_Edges struct {
	Node *GetAllHushHistories_HushHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllHushHistories_HushHistories_Edges) GetNode() *GetAllHushHistories_HushHistories_Edges_Node {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges{}
	}
	return t.Node
}

type GetAllHushHistories_HushHistories struct {
	Edges      []*GetAllHushHistories_HushHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllHushHistories_HushHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllHushHistories_HushHistories) GetEdges() []*GetAllHushHistories_HushHistories_Edges {
	if t == nil {
		t = &GetAllHushHistories_HushHistories{}
	}
	return t.Edges
}
func (t *GetAllHushHistories_HushHistories) GetPageInfo() *GetAllHushHistories_HushHistories_PageInfo {
	if t == nil {
		t = &GetAllHushHistories_HushHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllHushHistories_HushHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllHushHistories_HushHistories{}
	}
	return t.TotalCount
}

type GetHushHistories_HushHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetHushHistories_HushHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetHushHistories_HushHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetHushHistories_HushHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetHushHistories_HushHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetHushHistories_HushHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetHushHistories_HushHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetHushHistories_HushHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string        "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Kind        *string        "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	SecretName  *string        "json:\"secretName,omitempty\" graphql:\"secretName\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetHushHistories_HushHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.Kind
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetSecretName() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.SecretName
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetHushHistories_HushHistories_Edges struct {
	Node *GetHushHistories_HushHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetHushHistories_HushHistories_Edges) GetNode() *GetHushHistories_HushHistories_Edges_Node {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges{}
	}
	return t.Node
}

type GetHushHistories_HushHistories struct {
	Edges      []*GetHushHistories_HushHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetHushHistories_HushHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetHushHistories_HushHistories) GetEdges() []*GetHushHistories_HushHistories_Edges {
	if t == nil {
		t = &GetHushHistories_HushHistories{}
	}
	return t.Edges
}
func (t *GetHushHistories_HushHistories) GetPageInfo() *GetHushHistories_HushHistories_PageInfo {
	if t == nil {
		t = &GetHushHistories_HushHistories{}
	}
	return &t.PageInfo
}
func (t *GetHushHistories_HushHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetHushHistories_HushHistories{}
	}
	return t.TotalCount
}

type DeleteIntegration_DeleteIntegration struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteIntegration_DeleteIntegration) GetDeletedID() string {
	if t == nil {
		t = &DeleteIntegration_DeleteIntegration{}
	}
	return t.DeletedID
}

type GetAllIntegrations_Integrations_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllIntegrations_Integrations_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllIntegrations_Integrations_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllIntegrations_Integrations_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllIntegrations_Integrations_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllIntegrations_Integrations_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllIntegrations_Integrations_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_PageInfo{}
	}
	return t.StartCursor
}

type GetAllIntegrations_Integrations_Edges_Node struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string    "json:\"description,omitempty\" graphql:\"description\""
	ID          string     "json:\"id\" graphql:\"id\""
	Kind        *string    "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string     "json:\"name\" graphql:\"name\""
	OwnerID     *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllIntegrations_Integrations_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Kind
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllIntegrations_Integrations_Edges struct {
	Node *GetAllIntegrations_Integrations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllIntegrations_Integrations_Edges) GetNode() *GetAllIntegrations_Integrations_Edges_Node {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges{}
	}
	return t.Node
}

type GetAllIntegrations_Integrations struct {
	Edges      []*GetAllIntegrations_Integrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllIntegrations_Integrations_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllIntegrations_Integrations) GetEdges() []*GetAllIntegrations_Integrations_Edges {
	if t == nil {
		t = &GetAllIntegrations_Integrations{}
	}
	return t.Edges
}
func (t *GetAllIntegrations_Integrations) GetPageInfo() *GetAllIntegrations_Integrations_PageInfo {
	if t == nil {
		t = &GetAllIntegrations_Integrations{}
	}
	return &t.PageInfo
}
func (t *GetAllIntegrations_Integrations) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllIntegrations_Integrations{}
	}
	return t.TotalCount
}

type GetIntegrationByID_Integration struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string    "json:\"description,omitempty\" graphql:\"description\""
	ID          string     "json:\"id\" graphql:\"id\""
	Kind        *string    "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string     "json:\"name\" graphql:\"name\""
	OwnerID     *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetIntegrationByID_Integration) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.CreatedAt
}
func (t *GetIntegrationByID_Integration) GetCreatedBy() *string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.CreatedBy
}
func (t *GetIntegrationByID_Integration) GetDescription() *string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Description
}
func (t *GetIntegrationByID_Integration) GetID() string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.ID
}
func (t *GetIntegrationByID_Integration) GetKind() *string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Kind
}
func (t *GetIntegrationByID_Integration) GetName() string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Name
}
func (t *GetIntegrationByID_Integration) GetOwnerID() *string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.OwnerID
}
func (t *GetIntegrationByID_Integration) GetTags() []string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Tags
}
func (t *GetIntegrationByID_Integration) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.UpdatedAt
}
func (t *GetIntegrationByID_Integration) GetUpdatedBy() *string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.UpdatedBy
}

type GetIntegrations_Integrations_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetIntegrations_Integrations_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetIntegrations_Integrations_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetIntegrations_Integrations_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetIntegrations_Integrations_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetIntegrations_Integrations_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetIntegrations_Integrations_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetIntegrations_Integrations_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetIntegrations_Integrations_PageInfo{}
	}
	return t.StartCursor
}

type GetIntegrations_Integrations_Edges_Node struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string    "json:\"description,omitempty\" graphql:\"description\""
	ID          string     "json:\"id\" graphql:\"id\""
	Kind        *string    "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string     "json:\"name\" graphql:\"name\""
	OwnerID     *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetIntegrations_Integrations_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetIntegrations_Integrations_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetIntegrations_Integrations_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Description
}
func (t *GetIntegrations_Integrations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.ID
}
func (t *GetIntegrations_Integrations_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Kind
}
func (t *GetIntegrations_Integrations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Name
}
func (t *GetIntegrations_Integrations_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetIntegrations_Integrations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Tags
}
func (t *GetIntegrations_Integrations_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetIntegrations_Integrations_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetIntegrations_Integrations_Edges struct {
	Node *GetIntegrations_Integrations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetIntegrations_Integrations_Edges) GetNode() *GetIntegrations_Integrations_Edges_Node {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges{}
	}
	return t.Node
}

type GetIntegrations_Integrations struct {
	Edges      []*GetIntegrations_Integrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetIntegrations_Integrations_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetIntegrations_Integrations) GetEdges() []*GetIntegrations_Integrations_Edges {
	if t == nil {
		t = &GetIntegrations_Integrations{}
	}
	return t.Edges
}
func (t *GetIntegrations_Integrations) GetPageInfo() *GetIntegrations_Integrations_PageInfo {
	if t == nil {
		t = &GetIntegrations_Integrations{}
	}
	return &t.PageInfo
}
func (t *GetIntegrations_Integrations) GetTotalCount() int64 {
	if t == nil {
		t = &GetIntegrations_Integrations{}
	}
	return t.TotalCount
}

type GetAllIntegrationHistories_IntegrationHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllIntegrationHistories_IntegrationHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllIntegrationHistories_IntegrationHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllIntegrationHistories_IntegrationHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllIntegrationHistories_IntegrationHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllIntegrationHistories_IntegrationHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string        "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Kind        *string        "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Kind
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllIntegrationHistories_IntegrationHistories_Edges struct {
	Node *GetAllIntegrationHistories_IntegrationHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllIntegrationHistories_IntegrationHistories_Edges) GetNode() *GetAllIntegrationHistories_IntegrationHistories_Edges_Node {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges{}
	}
	return t.Node
}

type GetAllIntegrationHistories_IntegrationHistories struct {
	Edges      []*GetAllIntegrationHistories_IntegrationHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllIntegrationHistories_IntegrationHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllIntegrationHistories_IntegrationHistories) GetEdges() []*GetAllIntegrationHistories_IntegrationHistories_Edges {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories{}
	}
	return t.Edges
}
func (t *GetAllIntegrationHistories_IntegrationHistories) GetPageInfo() *GetAllIntegrationHistories_IntegrationHistories_PageInfo {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllIntegrationHistories_IntegrationHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories{}
	}
	return t.TotalCount
}

type GetIntegrationHistories_IntegrationHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetIntegrationHistories_IntegrationHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetIntegrationHistories_IntegrationHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetIntegrationHistories_IntegrationHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetIntegrationHistories_IntegrationHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetIntegrationHistories_IntegrationHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string        "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Kind        *string        "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Kind
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetIntegrationHistories_IntegrationHistories_Edges struct {
	Node *GetIntegrationHistories_IntegrationHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetIntegrationHistories_IntegrationHistories_Edges) GetNode() *GetIntegrationHistories_IntegrationHistories_Edges_Node {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges{}
	}
	return t.Node
}

type GetIntegrationHistories_IntegrationHistories struct {
	Edges      []*GetIntegrationHistories_IntegrationHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetIntegrationHistories_IntegrationHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetIntegrationHistories_IntegrationHistories) GetEdges() []*GetIntegrationHistories_IntegrationHistories_Edges {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories{}
	}
	return t.Edges
}
func (t *GetIntegrationHistories_IntegrationHistories) GetPageInfo() *GetIntegrationHistories_IntegrationHistories_PageInfo {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories{}
	}
	return &t.PageInfo
}
func (t *GetIntegrationHistories_IntegrationHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies struct {
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DisplayID                       string                "json:\"displayID\" graphql:\"displayID\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PolicyType                      *string               "json:\"policyType,omitempty\" graphql:\"policyType\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetApprovalRequired() *bool {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.ApprovalRequired
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetApproverID() *string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.ApproverID
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetControlSuggestions() []string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.ControlSuggestions
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetDelegateID() *string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.DelegateID
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetDetails() *string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.Details
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.DismissedControlSuggestions
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.DismissedTagSuggestions
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.DisplayID
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetID() string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.ID
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetImprovementSuggestions() []string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.ImprovementSuggestions
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetName() string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.Name
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetPolicyType() *string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.PolicyType
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetReviewDue() *time.Time {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.ReviewDue
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.ReviewFrequency
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetRevision() *string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.Revision
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.Status
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetSummary() *string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.Summary
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetTagSuggestions() []string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.TagSuggestions
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.Tags
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy struct {
	InternalPolicies []*CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies "json:\"internalPolicies,omitempty\" graphql:\"internalPolicies\""
}

func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy) GetInternalPolicies() []*CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy{}
	}
	return t.InternalPolicies
}

type CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies struct {
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DisplayID                       string                "json:\"displayID\" graphql:\"displayID\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PolicyType                      *string               "json:\"policyType,omitempty\" graphql:\"policyType\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetApprovalRequired() *bool {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.ApprovalRequired
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetApproverID() *string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.ApproverID
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetControlSuggestions() []string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.ControlSuggestions
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.CreatedAt
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.CreatedBy
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetDelegateID() *string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.DelegateID
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetDetails() *string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.Details
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.DismissedControlSuggestions
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.DismissedTagSuggestions
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.DisplayID
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetID() string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.ID
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetImprovementSuggestions() []string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.ImprovementSuggestions
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetName() string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.Name
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.OwnerID
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetPolicyType() *string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.PolicyType
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetReviewDue() *time.Time {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.ReviewDue
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.ReviewFrequency
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetRevision() *string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.Revision
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.Status
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetSummary() *string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.Summary
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetTagSuggestions() []string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.TagSuggestions
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetTags() []string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.Tags
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.UpdatedBy
}

type CreateBulkInternalPolicy_CreateBulkInternalPolicy struct {
	InternalPolicies []*CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies "json:\"internalPolicies,omitempty\" graphql:\"internalPolicies\""
}

func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy) GetInternalPolicies() []*CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy{}
	}
	return t.InternalPolicies
}

type CreateInternalPolicy_CreateInternalPolicy_InternalPolicy struct {
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DisplayID                       string                "json:\"displayID\" graphql:\"displayID\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PolicyType                      *string               "json:\"policyType,omitempty\" graphql:\"policyType\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetApprovalRequired() *bool {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.ApprovalRequired
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetApproverID() *string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.ApproverID
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetControlSuggestions() []string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.ControlSuggestions
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.CreatedAt
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetCreatedBy() *string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.CreatedBy
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetDelegateID() *string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.DelegateID
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetDetails() *string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.Details
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.DismissedControlSuggestions
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.DismissedTagSuggestions
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetDisplayID() string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.DisplayID
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetID() string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.ID
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetImprovementSuggestions() []string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.ImprovementSuggestions
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetName() string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.Name
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetOwnerID() *string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.OwnerID
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetPolicyType() *string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.PolicyType
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetReviewDue() *time.Time {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.ReviewDue
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.ReviewFrequency
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetRevision() *string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.Revision
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.Status
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetSummary() *string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.Summary
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetTagSuggestions() []string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.TagSuggestions
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetTags() []string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.Tags
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.UpdatedAt
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.UpdatedBy
}

type CreateInternalPolicy_CreateInternalPolicy struct {
	InternalPolicy CreateInternalPolicy_CreateInternalPolicy_InternalPolicy "json:\"internalPolicy\" graphql:\"internalPolicy\""
}

func (t *CreateInternalPolicy_CreateInternalPolicy) GetInternalPolicy() *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy{}
	}
	return &t.InternalPolicy
}

type DeleteInternalPolicy_DeleteInternalPolicy struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteInternalPolicy_DeleteInternalPolicy) GetDeletedID() string {
	if t == nil {
		t = &DeleteInternalPolicy_DeleteInternalPolicy{}
	}
	return t.DeletedID
}

type GetAllInternalPolicies_InternalPolicies_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllInternalPolicies_InternalPolicies_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllInternalPolicies_InternalPolicies_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllInternalPolicies_InternalPolicies_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllInternalPolicies_InternalPolicies_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_PageInfo{}
	}
	return t.StartCursor
}

type GetAllInternalPolicies_InternalPolicies_Edges_Node struct {
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DisplayID                       string                "json:\"displayID\" graphql:\"displayID\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PolicyType                      *string               "json:\"policyType,omitempty\" graphql:\"policyType\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetApproverID() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ApproverID
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetControlSuggestions() []string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ControlSuggestions
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.DismissedControlSuggestions
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.DismissedTagSuggestions
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetImprovementSuggestions() []string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ImprovementSuggestions
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetPolicyType() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.PolicyType
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Revision
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetSummary() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Summary
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetTagSuggestions() []string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.TagSuggestions
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllInternalPolicies_InternalPolicies_Edges struct {
	Node *GetAllInternalPolicies_InternalPolicies_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllInternalPolicies_InternalPolicies_Edges) GetNode() *GetAllInternalPolicies_InternalPolicies_Edges_Node {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges{}
	}
	return t.Node
}

type GetAllInternalPolicies_InternalPolicies struct {
	Edges      []*GetAllInternalPolicies_InternalPolicies_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllInternalPolicies_InternalPolicies_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                            "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllInternalPolicies_InternalPolicies) GetEdges() []*GetAllInternalPolicies_InternalPolicies_Edges {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies{}
	}
	return t.Edges
}
func (t *GetAllInternalPolicies_InternalPolicies) GetPageInfo() *GetAllInternalPolicies_InternalPolicies_PageInfo {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies{}
	}
	return &t.PageInfo
}
func (t *GetAllInternalPolicies_InternalPolicies) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies{}
	}
	return t.TotalCount
}

type GetInternalPolicyByID_InternalPolicy struct {
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DisplayID                       string                "json:\"displayID\" graphql:\"displayID\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PolicyType                      *string               "json:\"policyType,omitempty\" graphql:\"policyType\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetInternalPolicyByID_InternalPolicy) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.ApprovalRequired
}
func (t *GetInternalPolicyByID_InternalPolicy) GetApproverID() *string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.ApproverID
}
func (t *GetInternalPolicyByID_InternalPolicy) GetControlSuggestions() []string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.ControlSuggestions
}
func (t *GetInternalPolicyByID_InternalPolicy) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.CreatedAt
}
func (t *GetInternalPolicyByID_InternalPolicy) GetCreatedBy() *string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.CreatedBy
}
func (t *GetInternalPolicyByID_InternalPolicy) GetDelegateID() *string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.DelegateID
}
func (t *GetInternalPolicyByID_InternalPolicy) GetDetails() *string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.Details
}
func (t *GetInternalPolicyByID_InternalPolicy) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.DismissedControlSuggestions
}
func (t *GetInternalPolicyByID_InternalPolicy) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *GetInternalPolicyByID_InternalPolicy) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.DismissedTagSuggestions
}
func (t *GetInternalPolicyByID_InternalPolicy) GetDisplayID() string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.DisplayID
}
func (t *GetInternalPolicyByID_InternalPolicy) GetID() string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.ID
}
func (t *GetInternalPolicyByID_InternalPolicy) GetImprovementSuggestions() []string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.ImprovementSuggestions
}
func (t *GetInternalPolicyByID_InternalPolicy) GetName() string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.Name
}
func (t *GetInternalPolicyByID_InternalPolicy) GetOwnerID() *string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.OwnerID
}
func (t *GetInternalPolicyByID_InternalPolicy) GetPolicyType() *string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.PolicyType
}
func (t *GetInternalPolicyByID_InternalPolicy) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.ReviewDue
}
func (t *GetInternalPolicyByID_InternalPolicy) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.ReviewFrequency
}
func (t *GetInternalPolicyByID_InternalPolicy) GetRevision() *string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.Revision
}
func (t *GetInternalPolicyByID_InternalPolicy) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.Status
}
func (t *GetInternalPolicyByID_InternalPolicy) GetSummary() *string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.Summary
}
func (t *GetInternalPolicyByID_InternalPolicy) GetTagSuggestions() []string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.TagSuggestions
}
func (t *GetInternalPolicyByID_InternalPolicy) GetTags() []string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.Tags
}
func (t *GetInternalPolicyByID_InternalPolicy) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.UpdatedAt
}
func (t *GetInternalPolicyByID_InternalPolicy) GetUpdatedBy() *string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.UpdatedBy
}

type GetInternalPolicies_InternalPolicies_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetInternalPolicies_InternalPolicies_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetInternalPolicies_InternalPolicies_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetInternalPolicies_InternalPolicies_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetInternalPolicies_InternalPolicies_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_PageInfo{}
	}
	return t.StartCursor
}

type GetInternalPolicies_InternalPolicies_Edges_Node struct {
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DisplayID                       string                "json:\"displayID\" graphql:\"displayID\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PolicyType                      *string               "json:\"policyType,omitempty\" graphql:\"policyType\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetApproverID() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ApproverID
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetControlSuggestions() []string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ControlSuggestions
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Details
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.DismissedControlSuggestions
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.DismissedTagSuggestions
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetID() string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ID
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetImprovementSuggestions() []string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ImprovementSuggestions
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetName() string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Name
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetPolicyType() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.PolicyType
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Revision
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Status
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetSummary() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Summary
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetTagSuggestions() []string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.TagSuggestions
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Tags
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetInternalPolicies_InternalPolicies_Edges struct {
	Node *GetInternalPolicies_InternalPolicies_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetInternalPolicies_InternalPolicies_Edges) GetNode() *GetInternalPolicies_InternalPolicies_Edges_Node {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges{}
	}
	return t.Node
}

type GetInternalPolicies_InternalPolicies struct {
	Edges      []*GetInternalPolicies_InternalPolicies_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetInternalPolicies_InternalPolicies_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetInternalPolicies_InternalPolicies) GetEdges() []*GetInternalPolicies_InternalPolicies_Edges {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies{}
	}
	return t.Edges
}
func (t *GetInternalPolicies_InternalPolicies) GetPageInfo() *GetInternalPolicies_InternalPolicies_PageInfo {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies{}
	}
	return &t.PageInfo
}
func (t *GetInternalPolicies_InternalPolicies) GetTotalCount() int64 {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies{}
	}
	return t.TotalCount
}

type UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy struct {
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DisplayID                       string                "json:\"displayID\" graphql:\"displayID\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PolicyType                      *string               "json:\"policyType,omitempty\" graphql:\"policyType\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetApprovalRequired() *bool {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.ApprovalRequired
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetApproverID() *string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.ApproverID
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetControlSuggestions() []string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.ControlSuggestions
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.CreatedAt
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.CreatedBy
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetDelegateID() *string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.DelegateID
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetDetails() *string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.Details
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.DismissedControlSuggestions
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.DismissedTagSuggestions
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetDisplayID() string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.DisplayID
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetID() string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.ID
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetImprovementSuggestions() []string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.ImprovementSuggestions
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetName() string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.Name
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetOwnerID() *string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.OwnerID
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetPolicyType() *string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.PolicyType
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetReviewDue() *time.Time {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.ReviewDue
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.ReviewFrequency
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetRevision() *string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.Revision
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.Status
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetSummary() *string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.Summary
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetTagSuggestions() []string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.TagSuggestions
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetTags() []string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.Tags
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.UpdatedAt
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.UpdatedBy
}

type UpdateInternalPolicy_UpdateInternalPolicy struct {
	InternalPolicy UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy "json:\"internalPolicy\" graphql:\"internalPolicy\""
}

func (t *UpdateInternalPolicy_UpdateInternalPolicy) GetInternalPolicy() *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy{}
	}
	return &t.InternalPolicy
}

type GetAllInternalPolicyHistories_InternalPolicyHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node struct {
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DisplayID                       string                "json:\"displayID\" graphql:\"displayID\""
	HistoryTime                     time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	Operation                       history.OpType        "json:\"operation\" graphql:\"operation\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PolicyType                      *string               "json:\"policyType,omitempty\" graphql:\"policyType\""
	Ref                             *string               "json:\"ref,omitempty\" graphql:\"ref\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetApproverID() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ApproverID
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetControlSuggestions() []string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ControlSuggestions
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.DismissedControlSuggestions
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.DismissedTagSuggestions
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetImprovementSuggestions() []string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ImprovementSuggestions
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetPolicyType() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.PolicyType
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Revision
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetSummary() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Summary
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetTagSuggestions() []string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.TagSuggestions
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllInternalPolicyHistories_InternalPolicyHistories_Edges struct {
	Node *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges) GetNode() *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges{}
	}
	return t.Node
}

type GetAllInternalPolicyHistories_InternalPolicyHistories struct {
	Edges      []*GetAllInternalPolicyHistories_InternalPolicyHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllInternalPolicyHistories_InternalPolicyHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                          "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllInternalPolicyHistories_InternalPolicyHistories) GetEdges() []*GetAllInternalPolicyHistories_InternalPolicyHistories_Edges {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories{}
	}
	return t.Edges
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories) GetPageInfo() *GetAllInternalPolicyHistories_InternalPolicyHistories_PageInfo {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories{}
	}
	return t.TotalCount
}

type GetInternalPolicyHistories_InternalPolicyHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetInternalPolicyHistories_InternalPolicyHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node struct {
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DisplayID                       string                "json:\"displayID\" graphql:\"displayID\""
	HistoryTime                     time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	Operation                       history.OpType        "json:\"operation\" graphql:\"operation\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PolicyType                      *string               "json:\"policyType,omitempty\" graphql:\"policyType\""
	Ref                             *string               "json:\"ref,omitempty\" graphql:\"ref\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetApproverID() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ApproverID
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetControlSuggestions() []string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ControlSuggestions
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.DismissedControlSuggestions
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.DismissedTagSuggestions
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetImprovementSuggestions() []string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ImprovementSuggestions
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetPolicyType() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.PolicyType
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Revision
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetSummary() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Summary
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetTagSuggestions() []string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.TagSuggestions
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetInternalPolicyHistories_InternalPolicyHistories_Edges struct {
	Node *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges) GetNode() *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges{}
	}
	return t.Node
}

type GetInternalPolicyHistories_InternalPolicyHistories struct {
	Edges      []*GetInternalPolicyHistories_InternalPolicyHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetInternalPolicyHistories_InternalPolicyHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                       "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetInternalPolicyHistories_InternalPolicyHistories) GetEdges() []*GetInternalPolicyHistories_InternalPolicyHistories_Edges {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories{}
	}
	return t.Edges
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories) GetPageInfo() *GetInternalPolicyHistories_InternalPolicyHistories_PageInfo {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories{}
	}
	return &t.PageInfo
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVInvite_CreateBulkCSVInvite_Invites struct {
	CreatedAt    *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Expires      *time.Time         "json:\"expires,omitempty\" graphql:\"expires\""
	ID           string             "json:\"id\" graphql:\"id\""
	OwnerID      *string            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Recipient    string             "json:\"recipient\" graphql:\"recipient\""
	RequestorID  *string            "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Role         enums.Role         "json:\"role\" graphql:\"role\""
	SendAttempts int64              "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Status       enums.InviteStatus "json:\"status\" graphql:\"status\""
	UpdatedAt    *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetExpires() *time.Time {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.Expires
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetID() string {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.ID
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetRecipient() string {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.Recipient
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetRequestorID() *string {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.RequestorID
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return &t.Role
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetSendAttempts() int64 {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.SendAttempts
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return &t.Status
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVInvite_CreateBulkCSVInvite struct {
	Invites []*CreateBulkCSVInvite_CreateBulkCSVInvite_Invites "json:\"invites,omitempty\" graphql:\"invites\""
}

func (t *CreateBulkCSVInvite_CreateBulkCSVInvite) GetInvites() []*CreateBulkCSVInvite_CreateBulkCSVInvite_Invites {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite{}
	}
	return t.Invites
}

type CreateBulkInvite_CreateBulkInvite_Invites struct {
	CreatedAt    *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Expires      *time.Time         "json:\"expires,omitempty\" graphql:\"expires\""
	ID           string             "json:\"id\" graphql:\"id\""
	OwnerID      *string            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Recipient    string             "json:\"recipient\" graphql:\"recipient\""
	RequestorID  *string            "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Role         enums.Role         "json:\"role\" graphql:\"role\""
	SendAttempts int64              "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Status       enums.InviteStatus "json:\"status\" graphql:\"status\""
	UpdatedAt    *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.CreatedAt
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.CreatedBy
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetExpires() *time.Time {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.Expires
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetID() string {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.ID
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.OwnerID
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetRecipient() string {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.Recipient
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetRequestorID() *string {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.RequestorID
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return &t.Role
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetSendAttempts() int64 {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.SendAttempts
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return &t.Status
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.UpdatedBy
}

type CreateBulkInvite_CreateBulkInvite struct {
	Invites []*CreateBulkInvite_CreateBulkInvite_Invites "json:\"invites,omitempty\" graphql:\"invites\""
}

func (t *CreateBulkInvite_CreateBulkInvite) GetInvites() []*CreateBulkInvite_CreateBulkInvite_Invites {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite{}
	}
	return t.Invites
}

type CreateInvite_CreateInvite_Invite struct {
	CreatedAt    *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Expires      *time.Time         "json:\"expires,omitempty\" graphql:\"expires\""
	ID           string             "json:\"id\" graphql:\"id\""
	OwnerID      *string            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Recipient    string             "json:\"recipient\" graphql:\"recipient\""
	RequestorID  *string            "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Role         enums.Role         "json:\"role\" graphql:\"role\""
	SendAttempts int64              "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Status       enums.InviteStatus "json:\"status\" graphql:\"status\""
	UpdatedAt    *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateInvite_CreateInvite_Invite) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.CreatedAt
}
func (t *CreateInvite_CreateInvite_Invite) GetCreatedBy() *string {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.CreatedBy
}
func (t *CreateInvite_CreateInvite_Invite) GetExpires() *time.Time {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.Expires
}
func (t *CreateInvite_CreateInvite_Invite) GetID() string {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.ID
}
func (t *CreateInvite_CreateInvite_Invite) GetOwnerID() *string {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.OwnerID
}
func (t *CreateInvite_CreateInvite_Invite) GetRecipient() string {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.Recipient
}
func (t *CreateInvite_CreateInvite_Invite) GetRequestorID() *string {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.RequestorID
}
func (t *CreateInvite_CreateInvite_Invite) GetRole() *enums.Role {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return &t.Role
}
func (t *CreateInvite_CreateInvite_Invite) GetSendAttempts() int64 {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.SendAttempts
}
func (t *CreateInvite_CreateInvite_Invite) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return &t.Status
}
func (t *CreateInvite_CreateInvite_Invite) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.UpdatedAt
}
func (t *CreateInvite_CreateInvite_Invite) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.UpdatedBy
}

type CreateInvite_CreateInvite struct {
	Invite CreateInvite_CreateInvite_Invite "json:\"invite\" graphql:\"invite\""
}

func (t *CreateInvite_CreateInvite) GetInvite() *CreateInvite_CreateInvite_Invite {
	if t == nil {
		t = &CreateInvite_CreateInvite{}
	}
	return &t.Invite
}

type DeleteInvite_DeleteInvite struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteInvite_DeleteInvite) GetDeletedID() string {
	if t == nil {
		t = &DeleteInvite_DeleteInvite{}
	}
	return t.DeletedID
}

type GetAllInvites_Invites_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllInvites_Invites_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllInvites_Invites_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllInvites_Invites_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllInvites_Invites_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllInvites_Invites_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllInvites_Invites_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllInvites_Invites_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllInvites_Invites_PageInfo{}
	}
	return t.StartCursor
}

type GetAllInvites_Invites_Edges_Node struct {
	CreatedAt    *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Expires      *time.Time         "json:\"expires,omitempty\" graphql:\"expires\""
	ID           string             "json:\"id\" graphql:\"id\""
	OwnerID      *string            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Recipient    string             "json:\"recipient\" graphql:\"recipient\""
	RequestorID  *string            "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Role         enums.Role         "json:\"role\" graphql:\"role\""
	SendAttempts int64              "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Status       enums.InviteStatus "json:\"status\" graphql:\"status\""
	UpdatedAt    *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllInvites_Invites_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllInvites_Invites_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllInvites_Invites_Edges_Node) GetExpires() *time.Time {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return t.Expires
}
func (t *GetAllInvites_Invites_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllInvites_Invites_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllInvites_Invites_Edges_Node) GetRecipient() string {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return t.Recipient
}
func (t *GetAllInvites_Invites_Edges_Node) GetRequestorID() *string {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return t.RequestorID
}
func (t *GetAllInvites_Invites_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return &t.Role
}
func (t *GetAllInvites_Invites_Edges_Node) GetSendAttempts() int64 {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return t.SendAttempts
}
func (t *GetAllInvites_Invites_Edges_Node) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllInvites_Invites_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllInvites_Invites_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllInvites_Invites_Edges struct {
	Node *GetAllInvites_Invites_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllInvites_Invites_Edges) GetNode() *GetAllInvites_Invites_Edges_Node {
	if t == nil {
		t = &GetAllInvites_Invites_Edges{}
	}
	return t.Node
}

type GetAllInvites_Invites struct {
	Edges      []*GetAllInvites_Invites_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllInvites_Invites_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                          "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllInvites_Invites) GetEdges() []*GetAllInvites_Invites_Edges {
	if t == nil {
		t = &GetAllInvites_Invites{}
	}
	return t.Edges
}
func (t *GetAllInvites_Invites) GetPageInfo() *GetAllInvites_Invites_PageInfo {
	if t == nil {
		t = &GetAllInvites_Invites{}
	}
	return &t.PageInfo
}
func (t *GetAllInvites_Invites) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllInvites_Invites{}
	}
	return t.TotalCount
}

type GetInviteByID_Invite struct {
	CreatedAt    *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Expires      *time.Time         "json:\"expires,omitempty\" graphql:\"expires\""
	ID           string             "json:\"id\" graphql:\"id\""
	OwnerID      *string            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Recipient    string             "json:\"recipient\" graphql:\"recipient\""
	RequestorID  *string            "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Role         enums.Role         "json:\"role\" graphql:\"role\""
	SendAttempts int64              "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Status       enums.InviteStatus "json:\"status\" graphql:\"status\""
	UpdatedAt    *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetInviteByID_Invite) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.CreatedAt
}
func (t *GetInviteByID_Invite) GetCreatedBy() *string {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.CreatedBy
}
func (t *GetInviteByID_Invite) GetExpires() *time.Time {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.Expires
}
func (t *GetInviteByID_Invite) GetID() string {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.ID
}
func (t *GetInviteByID_Invite) GetOwnerID() *string {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.OwnerID
}
func (t *GetInviteByID_Invite) GetRecipient() string {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.Recipient
}
func (t *GetInviteByID_Invite) GetRequestorID() *string {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.RequestorID
}
func (t *GetInviteByID_Invite) GetRole() *enums.Role {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return &t.Role
}
func (t *GetInviteByID_Invite) GetSendAttempts() int64 {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.SendAttempts
}
func (t *GetInviteByID_Invite) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return &t.Status
}
func (t *GetInviteByID_Invite) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.UpdatedAt
}
func (t *GetInviteByID_Invite) GetUpdatedBy() *string {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.UpdatedBy
}

type GetInvites_Invites_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetInvites_Invites_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetInvites_Invites_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetInvites_Invites_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetInvites_Invites_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetInvites_Invites_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetInvites_Invites_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetInvites_Invites_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetInvites_Invites_PageInfo{}
	}
	return t.StartCursor
}

type GetInvites_Invites_Edges_Node struct {
	CreatedAt    *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Expires      *time.Time         "json:\"expires,omitempty\" graphql:\"expires\""
	ID           string             "json:\"id\" graphql:\"id\""
	OwnerID      *string            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Recipient    string             "json:\"recipient\" graphql:\"recipient\""
	RequestorID  *string            "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Role         enums.Role         "json:\"role\" graphql:\"role\""
	SendAttempts int64              "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Status       enums.InviteStatus "json:\"status\" graphql:\"status\""
	UpdatedAt    *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetInvites_Invites_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetInvites_Invites_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetInvites_Invites_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetInvites_Invites_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetInvites_Invites_Edges_Node) GetExpires() *time.Time {
	if t == nil {
		t = &GetInvites_Invites_Edges_Node{}
	}
	return t.Expires
}
func (t *GetInvites_Invites_Edges_Node) GetID() string {
	if t == nil {
		t = &GetInvites_Invites_Edges_Node{}
	}
	return t.ID
}
func (t *GetInvites_Invites_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetInvites_Invites_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetInvites_Invites_Edges_Node) GetRecipient() string {
	if t == nil {
		t = &GetInvites_Invites_Edges_Node{}
	}
	return t.Recipient
}
func (t *GetInvites_Invites_Edges_Node) GetRequestorID() *string {
	if t == nil {
		t = &GetInvites_Invites_Edges_Node{}
	}
	return t.RequestorID
}
func (t *GetInvites_Invites_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetInvites_Invites_Edges_Node{}
	}
	return &t.Role
}
func (t *GetInvites_Invites_Edges_Node) GetSendAttempts() int64 {
	if t == nil {
		t = &GetInvites_Invites_Edges_Node{}
	}
	return t.SendAttempts
}
func (t *GetInvites_Invites_Edges_Node) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &GetInvites_Invites_Edges_Node{}
	}
	return &t.Status
}
func (t *GetInvites_Invites_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetInvites_Invites_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetInvites_Invites_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetInvites_Invites_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetInvites_Invites_Edges struct {
	Node *GetInvites_Invites_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetInvites_Invites_Edges) GetNode() *GetInvites_Invites_Edges_Node {
	if t == nil {
		t = &GetInvites_Invites_Edges{}
	}
	return t.Node
}

type GetInvites_Invites struct {
	Edges      []*GetInvites_Invites_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetInvites_Invites_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                       "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetInvites_Invites) GetEdges() []*GetInvites_Invites_Edges {
	if t == nil {
		t = &GetInvites_Invites{}
	}
	return t.Edges
}
func (t *GetInvites_Invites) GetPageInfo() *GetInvites_Invites_PageInfo {
	if t == nil {
		t = &GetInvites_Invites{}
	}
	return &t.PageInfo
}
func (t *GetInvites_Invites) GetTotalCount() int64 {
	if t == nil {
		t = &GetInvites_Invites{}
	}
	return t.TotalCount
}

type UpdateInvite_UpdateInvite_Invite struct {
	CreatedAt    *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Expires      *time.Time         "json:\"expires,omitempty\" graphql:\"expires\""
	ID           string             "json:\"id\" graphql:\"id\""
	OwnerID      *string            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Recipient    string             "json:\"recipient\" graphql:\"recipient\""
	RequestorID  *string            "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Role         enums.Role         "json:\"role\" graphql:\"role\""
	SendAttempts int64              "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Status       enums.InviteStatus "json:\"status\" graphql:\"status\""
	UpdatedAt    *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateInvite_UpdateInvite_Invite) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateInvite_UpdateInvite_Invite{}
	}
	return t.CreatedAt
}
func (t *UpdateInvite_UpdateInvite_Invite) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateInvite_UpdateInvite_Invite{}
	}
	return t.CreatedBy
}
func (t *UpdateInvite_UpdateInvite_Invite) GetExpires() *time.Time {
	if t == nil {
		t = &UpdateInvite_UpdateInvite_Invite{}
	}
	return t.Expires
}
func (t *UpdateInvite_UpdateInvite_Invite) GetID() string {
	if t == nil {
		t = &UpdateInvite_UpdateInvite_Invite{}
	}
	return t.ID
}
func (t *UpdateInvite_UpdateInvite_Invite) GetOwnerID() *string {
	if t == nil {
		t = &UpdateInvite_UpdateInvite_Invite{}
	}
	return t.OwnerID
}
func (t *UpdateInvite_UpdateInvite_Invite) GetRecipient() string {
	if t == nil {
		t = &UpdateInvite_UpdateInvite_Invite{}
	}
	return t.Recipient
}
func (t *UpdateInvite_UpdateInvite_Invite) GetRequestorID() *string {
	if t == nil {
		t = &UpdateInvite_UpdateInvite_Invite{}
	}
	return t.RequestorID
}
func (t *UpdateInvite_UpdateInvite_Invite) GetRole() *enums.Role {
	if t == nil {
		t = &UpdateInvite_UpdateInvite_Invite{}
	}
	return &t.Role
}
func (t *UpdateInvite_UpdateInvite_Invite) GetSendAttempts() int64 {
	if t == nil {
		t = &UpdateInvite_UpdateInvite_Invite{}
	}
	return t.SendAttempts
}
func (t *UpdateInvite_UpdateInvite_Invite) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &UpdateInvite_UpdateInvite_Invite{}
	}
	return &t.Status
}
func (t *UpdateInvite_UpdateInvite_Invite) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateInvite_UpdateInvite_Invite{}
	}
	return t.UpdatedAt
}
func (t *UpdateInvite_UpdateInvite_Invite) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateInvite_UpdateInvite_Invite{}
	}
	return t.UpdatedBy
}

type UpdateInvite_UpdateInvite struct {
	Invite UpdateInvite_UpdateInvite_Invite "json:\"invite\" graphql:\"invite\""
}

func (t *UpdateInvite_UpdateInvite) GetInvite() *UpdateInvite_UpdateInvite_Invite {
	if t == nil {
		t = &UpdateInvite_UpdateInvite{}
	}
	return &t.Invite
}

type CreateJobResult_CreateJobResult_JobResult struct {
	CreatedAt      *time.Time               "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                  "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ExitCode       int64                    "json:\"exitCode\" graphql:\"exitCode\""
	FileID         string                   "json:\"fileID\" graphql:\"fileID\""
	FinishedAt     time.Time                "json:\"finishedAt\" graphql:\"finishedAt\""
	ID             string                   "json:\"id\" graphql:\"id\""
	OwnerID        *string                  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ScheduledJobID string                   "json:\"scheduledJobID\" graphql:\"scheduledJobID\""
	StartedAt      time.Time                "json:\"startedAt\" graphql:\"startedAt\""
	Status         enums.JobExecutionStatus "json:\"status\" graphql:\"status\""
	UpdatedAt      *time.Time               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                  "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateJobResult_CreateJobResult_JobResult) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateJobResult_CreateJobResult_JobResult{}
	}
	return t.CreatedAt
}
func (t *CreateJobResult_CreateJobResult_JobResult) GetCreatedBy() *string {
	if t == nil {
		t = &CreateJobResult_CreateJobResult_JobResult{}
	}
	return t.CreatedBy
}
func (t *CreateJobResult_CreateJobResult_JobResult) GetExitCode() int64 {
	if t == nil {
		t = &CreateJobResult_CreateJobResult_JobResult{}
	}
	return t.ExitCode
}
func (t *CreateJobResult_CreateJobResult_JobResult) GetFileID() string {
	if t == nil {
		t = &CreateJobResult_CreateJobResult_JobResult{}
	}
	return t.FileID
}
func (t *CreateJobResult_CreateJobResult_JobResult) GetFinishedAt() *time.Time {
	if t == nil {
		t = &CreateJobResult_CreateJobResult_JobResult{}
	}
	return &t.FinishedAt
}
func (t *CreateJobResult_CreateJobResult_JobResult) GetID() string {
	if t == nil {
		t = &CreateJobResult_CreateJobResult_JobResult{}
	}
	return t.ID
}
func (t *CreateJobResult_CreateJobResult_JobResult) GetOwnerID() *string {
	if t == nil {
		t = &CreateJobResult_CreateJobResult_JobResult{}
	}
	return t.OwnerID
}
func (t *CreateJobResult_CreateJobResult_JobResult) GetScheduledJobID() string {
	if t == nil {
		t = &CreateJobResult_CreateJobResult_JobResult{}
	}
	return t.ScheduledJobID
}
func (t *CreateJobResult_CreateJobResult_JobResult) GetStartedAt() *time.Time {
	if t == nil {
		t = &CreateJobResult_CreateJobResult_JobResult{}
	}
	return &t.StartedAt
}
func (t *CreateJobResult_CreateJobResult_JobResult) GetStatus() *enums.JobExecutionStatus {
	if t == nil {
		t = &CreateJobResult_CreateJobResult_JobResult{}
	}
	return &t.Status
}
func (t *CreateJobResult_CreateJobResult_JobResult) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateJobResult_CreateJobResult_JobResult{}
	}
	return t.UpdatedAt
}
func (t *CreateJobResult_CreateJobResult_JobResult) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateJobResult_CreateJobResult_JobResult{}
	}
	return t.UpdatedBy
}

type CreateJobResult_CreateJobResult struct {
	JobResult CreateJobResult_CreateJobResult_JobResult "json:\"jobResult\" graphql:\"jobResult\""
}

func (t *CreateJobResult_CreateJobResult) GetJobResult() *CreateJobResult_CreateJobResult_JobResult {
	if t == nil {
		t = &CreateJobResult_CreateJobResult{}
	}
	return &t.JobResult
}

type DeleteJobResult_DeleteJobResult struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteJobResult_DeleteJobResult) GetDeletedID() string {
	if t == nil {
		t = &DeleteJobResult_DeleteJobResult{}
	}
	return t.DeletedID
}

type GetAllJobResults_JobResults_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllJobResults_JobResults_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllJobResults_JobResults_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllJobResults_JobResults_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllJobResults_JobResults_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllJobResults_JobResults_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllJobResults_JobResults_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllJobResults_JobResults_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllJobResults_JobResults_PageInfo{}
	}
	return t.StartCursor
}

type GetAllJobResults_JobResults_Edges_Node struct {
	CreatedAt      *time.Time               "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                  "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ExitCode       int64                    "json:\"exitCode\" graphql:\"exitCode\""
	FileID         string                   "json:\"fileID\" graphql:\"fileID\""
	FinishedAt     time.Time                "json:\"finishedAt\" graphql:\"finishedAt\""
	ID             string                   "json:\"id\" graphql:\"id\""
	OwnerID        *string                  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ScheduledJobID string                   "json:\"scheduledJobID\" graphql:\"scheduledJobID\""
	StartedAt      time.Time                "json:\"startedAt\" graphql:\"startedAt\""
	Status         enums.JobExecutionStatus "json:\"status\" graphql:\"status\""
	UpdatedAt      *time.Time               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                  "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllJobResults_JobResults_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllJobResults_JobResults_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllJobResults_JobResults_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllJobResults_JobResults_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllJobResults_JobResults_Edges_Node) GetExitCode() int64 {
	if t == nil {
		t = &GetAllJobResults_JobResults_Edges_Node{}
	}
	return t.ExitCode
}
func (t *GetAllJobResults_JobResults_Edges_Node) GetFileID() string {
	if t == nil {
		t = &GetAllJobResults_JobResults_Edges_Node{}
	}
	return t.FileID
}
func (t *GetAllJobResults_JobResults_Edges_Node) GetFinishedAt() *time.Time {
	if t == nil {
		t = &GetAllJobResults_JobResults_Edges_Node{}
	}
	return &t.FinishedAt
}
func (t *GetAllJobResults_JobResults_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllJobResults_JobResults_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllJobResults_JobResults_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllJobResults_JobResults_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllJobResults_JobResults_Edges_Node) GetScheduledJobID() string {
	if t == nil {
		t = &GetAllJobResults_JobResults_Edges_Node{}
	}
	return t.ScheduledJobID
}
func (t *GetAllJobResults_JobResults_Edges_Node) GetStartedAt() *time.Time {
	if t == nil {
		t = &GetAllJobResults_JobResults_Edges_Node{}
	}
	return &t.StartedAt
}
func (t *GetAllJobResults_JobResults_Edges_Node) GetStatus() *enums.JobExecutionStatus {
	if t == nil {
		t = &GetAllJobResults_JobResults_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllJobResults_JobResults_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllJobResults_JobResults_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllJobResults_JobResults_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllJobResults_JobResults_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllJobResults_JobResults_Edges struct {
	Node *GetAllJobResults_JobResults_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllJobResults_JobResults_Edges) GetNode() *GetAllJobResults_JobResults_Edges_Node {
	if t == nil {
		t = &GetAllJobResults_JobResults_Edges{}
	}
	return t.Node
}

type GetAllJobResults_JobResults struct {
	Edges      []*GetAllJobResults_JobResults_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllJobResults_JobResults_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllJobResults_JobResults) GetEdges() []*GetAllJobResults_JobResults_Edges {
	if t == nil {
		t = &GetAllJobResults_JobResults{}
	}
	return t.Edges
}
func (t *GetAllJobResults_JobResults) GetPageInfo() *GetAllJobResults_JobResults_PageInfo {
	if t == nil {
		t = &GetAllJobResults_JobResults{}
	}
	return &t.PageInfo
}
func (t *GetAllJobResults_JobResults) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllJobResults_JobResults{}
	}
	return t.TotalCount
}

type GetJobResultByID_JobResult struct {
	CreatedAt      *time.Time               "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                  "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ExitCode       int64                    "json:\"exitCode\" graphql:\"exitCode\""
	FileID         string                   "json:\"fileID\" graphql:\"fileID\""
	FinishedAt     time.Time                "json:\"finishedAt\" graphql:\"finishedAt\""
	ID             string                   "json:\"id\" graphql:\"id\""
	OwnerID        *string                  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ScheduledJobID string                   "json:\"scheduledJobID\" graphql:\"scheduledJobID\""
	StartedAt      time.Time                "json:\"startedAt\" graphql:\"startedAt\""
	Status         enums.JobExecutionStatus "json:\"status\" graphql:\"status\""
	UpdatedAt      *time.Time               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                  "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetJobResultByID_JobResult) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetJobResultByID_JobResult{}
	}
	return t.CreatedAt
}
func (t *GetJobResultByID_JobResult) GetCreatedBy() *string {
	if t == nil {
		t = &GetJobResultByID_JobResult{}
	}
	return t.CreatedBy
}
func (t *GetJobResultByID_JobResult) GetExitCode() int64 {
	if t == nil {
		t = &GetJobResultByID_JobResult{}
	}
	return t.ExitCode
}
func (t *GetJobResultByID_JobResult) GetFileID() string {
	if t == nil {
		t = &GetJobResultByID_JobResult{}
	}
	return t.FileID
}
func (t *GetJobResultByID_JobResult) GetFinishedAt() *time.Time {
	if t == nil {
		t = &GetJobResultByID_JobResult{}
	}
	return &t.FinishedAt
}
func (t *GetJobResultByID_JobResult) GetID() string {
	if t == nil {
		t = &GetJobResultByID_JobResult{}
	}
	return t.ID
}
func (t *GetJobResultByID_JobResult) GetOwnerID() *string {
	if t == nil {
		t = &GetJobResultByID_JobResult{}
	}
	return t.OwnerID
}
func (t *GetJobResultByID_JobResult) GetScheduledJobID() string {
	if t == nil {
		t = &GetJobResultByID_JobResult{}
	}
	return t.ScheduledJobID
}
func (t *GetJobResultByID_JobResult) GetStartedAt() *time.Time {
	if t == nil {
		t = &GetJobResultByID_JobResult{}
	}
	return &t.StartedAt
}
func (t *GetJobResultByID_JobResult) GetStatus() *enums.JobExecutionStatus {
	if t == nil {
		t = &GetJobResultByID_JobResult{}
	}
	return &t.Status
}
func (t *GetJobResultByID_JobResult) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetJobResultByID_JobResult{}
	}
	return t.UpdatedAt
}
func (t *GetJobResultByID_JobResult) GetUpdatedBy() *string {
	if t == nil {
		t = &GetJobResultByID_JobResult{}
	}
	return t.UpdatedBy
}

type GetJobResults_JobResults_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetJobResults_JobResults_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetJobResults_JobResults_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetJobResults_JobResults_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetJobResults_JobResults_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetJobResults_JobResults_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetJobResults_JobResults_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetJobResults_JobResults_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetJobResults_JobResults_PageInfo{}
	}
	return t.StartCursor
}

type GetJobResults_JobResults_Edges_Node struct {
	CreatedAt      *time.Time               "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                  "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ExitCode       int64                    "json:\"exitCode\" graphql:\"exitCode\""
	FileID         string                   "json:\"fileID\" graphql:\"fileID\""
	FinishedAt     time.Time                "json:\"finishedAt\" graphql:\"finishedAt\""
	ID             string                   "json:\"id\" graphql:\"id\""
	OwnerID        *string                  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ScheduledJobID string                   "json:\"scheduledJobID\" graphql:\"scheduledJobID\""
	StartedAt      time.Time                "json:\"startedAt\" graphql:\"startedAt\""
	Status         enums.JobExecutionStatus "json:\"status\" graphql:\"status\""
	UpdatedAt      *time.Time               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                  "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetJobResults_JobResults_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetJobResults_JobResults_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetJobResults_JobResults_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetJobResults_JobResults_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetJobResults_JobResults_Edges_Node) GetExitCode() int64 {
	if t == nil {
		t = &GetJobResults_JobResults_Edges_Node{}
	}
	return t.ExitCode
}
func (t *GetJobResults_JobResults_Edges_Node) GetFileID() string {
	if t == nil {
		t = &GetJobResults_JobResults_Edges_Node{}
	}
	return t.FileID
}
func (t *GetJobResults_JobResults_Edges_Node) GetFinishedAt() *time.Time {
	if t == nil {
		t = &GetJobResults_JobResults_Edges_Node{}
	}
	return &t.FinishedAt
}
func (t *GetJobResults_JobResults_Edges_Node) GetID() string {
	if t == nil {
		t = &GetJobResults_JobResults_Edges_Node{}
	}
	return t.ID
}
func (t *GetJobResults_JobResults_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetJobResults_JobResults_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetJobResults_JobResults_Edges_Node) GetScheduledJobID() string {
	if t == nil {
		t = &GetJobResults_JobResults_Edges_Node{}
	}
	return t.ScheduledJobID
}
func (t *GetJobResults_JobResults_Edges_Node) GetStartedAt() *time.Time {
	if t == nil {
		t = &GetJobResults_JobResults_Edges_Node{}
	}
	return &t.StartedAt
}
func (t *GetJobResults_JobResults_Edges_Node) GetStatus() *enums.JobExecutionStatus {
	if t == nil {
		t = &GetJobResults_JobResults_Edges_Node{}
	}
	return &t.Status
}
func (t *GetJobResults_JobResults_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetJobResults_JobResults_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetJobResults_JobResults_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetJobResults_JobResults_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetJobResults_JobResults_Edges struct {
	Node *GetJobResults_JobResults_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetJobResults_JobResults_Edges) GetNode() *GetJobResults_JobResults_Edges_Node {
	if t == nil {
		t = &GetJobResults_JobResults_Edges{}
	}
	return t.Node
}

type GetJobResults_JobResults struct {
	Edges      []*GetJobResults_JobResults_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetJobResults_JobResults_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                             "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetJobResults_JobResults) GetEdges() []*GetJobResults_JobResults_Edges {
	if t == nil {
		t = &GetJobResults_JobResults{}
	}
	return t.Edges
}
func (t *GetJobResults_JobResults) GetPageInfo() *GetJobResults_JobResults_PageInfo {
	if t == nil {
		t = &GetJobResults_JobResults{}
	}
	return &t.PageInfo
}
func (t *GetJobResults_JobResults) GetTotalCount() int64 {
	if t == nil {
		t = &GetJobResults_JobResults{}
	}
	return t.TotalCount
}

type UpdateJobResult_UpdateJobResult_JobResult struct {
	CreatedAt      *time.Time               "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                  "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ExitCode       int64                    "json:\"exitCode\" graphql:\"exitCode\""
	FileID         string                   "json:\"fileID\" graphql:\"fileID\""
	FinishedAt     time.Time                "json:\"finishedAt\" graphql:\"finishedAt\""
	ID             string                   "json:\"id\" graphql:\"id\""
	OwnerID        *string                  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ScheduledJobID string                   "json:\"scheduledJobID\" graphql:\"scheduledJobID\""
	StartedAt      time.Time                "json:\"startedAt\" graphql:\"startedAt\""
	Status         enums.JobExecutionStatus "json:\"status\" graphql:\"status\""
	UpdatedAt      *time.Time               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                  "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateJobResult_UpdateJobResult_JobResult) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateJobResult_UpdateJobResult_JobResult{}
	}
	return t.CreatedAt
}
func (t *UpdateJobResult_UpdateJobResult_JobResult) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateJobResult_UpdateJobResult_JobResult{}
	}
	return t.CreatedBy
}
func (t *UpdateJobResult_UpdateJobResult_JobResult) GetExitCode() int64 {
	if t == nil {
		t = &UpdateJobResult_UpdateJobResult_JobResult{}
	}
	return t.ExitCode
}
func (t *UpdateJobResult_UpdateJobResult_JobResult) GetFileID() string {
	if t == nil {
		t = &UpdateJobResult_UpdateJobResult_JobResult{}
	}
	return t.FileID
}
func (t *UpdateJobResult_UpdateJobResult_JobResult) GetFinishedAt() *time.Time {
	if t == nil {
		t = &UpdateJobResult_UpdateJobResult_JobResult{}
	}
	return &t.FinishedAt
}
func (t *UpdateJobResult_UpdateJobResult_JobResult) GetID() string {
	if t == nil {
		t = &UpdateJobResult_UpdateJobResult_JobResult{}
	}
	return t.ID
}
func (t *UpdateJobResult_UpdateJobResult_JobResult) GetOwnerID() *string {
	if t == nil {
		t = &UpdateJobResult_UpdateJobResult_JobResult{}
	}
	return t.OwnerID
}
func (t *UpdateJobResult_UpdateJobResult_JobResult) GetScheduledJobID() string {
	if t == nil {
		t = &UpdateJobResult_UpdateJobResult_JobResult{}
	}
	return t.ScheduledJobID
}
func (t *UpdateJobResult_UpdateJobResult_JobResult) GetStartedAt() *time.Time {
	if t == nil {
		t = &UpdateJobResult_UpdateJobResult_JobResult{}
	}
	return &t.StartedAt
}
func (t *UpdateJobResult_UpdateJobResult_JobResult) GetStatus() *enums.JobExecutionStatus {
	if t == nil {
		t = &UpdateJobResult_UpdateJobResult_JobResult{}
	}
	return &t.Status
}
func (t *UpdateJobResult_UpdateJobResult_JobResult) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateJobResult_UpdateJobResult_JobResult{}
	}
	return t.UpdatedAt
}
func (t *UpdateJobResult_UpdateJobResult_JobResult) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateJobResult_UpdateJobResult_JobResult{}
	}
	return t.UpdatedBy
}

type UpdateJobResult_UpdateJobResult struct {
	JobResult UpdateJobResult_UpdateJobResult_JobResult "json:\"jobResult\" graphql:\"jobResult\""
}

func (t *UpdateJobResult_UpdateJobResult) GetJobResult() *UpdateJobResult_UpdateJobResult_JobResult {
	if t == nil {
		t = &UpdateJobResult_UpdateJobResult{}
	}
	return &t.JobResult
}

type CreateJobRunner_CreateJobRunner_JobRunner struct {
	CreatedAt   *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID   string                "json:\"displayID\" graphql:\"displayID\""
	ID          string                "json:\"id\" graphql:\"id\""
	IPAddress   *string               "json:\"ipAddress,omitempty\" graphql:\"ipAddress\""
	Name        string                "json:\"name\" graphql:\"name\""
	OwnerID     *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status      enums.JobRunnerStatus "json:\"status\" graphql:\"status\""
	SystemOwned *bool                 "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags        []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateJobRunner_CreateJobRunner_JobRunner) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateJobRunner_CreateJobRunner_JobRunner{}
	}
	return t.CreatedAt
}
func (t *CreateJobRunner_CreateJobRunner_JobRunner) GetCreatedBy() *string {
	if t == nil {
		t = &CreateJobRunner_CreateJobRunner_JobRunner{}
	}
	return t.CreatedBy
}
func (t *CreateJobRunner_CreateJobRunner_JobRunner) GetDisplayID() string {
	if t == nil {
		t = &CreateJobRunner_CreateJobRunner_JobRunner{}
	}
	return t.DisplayID
}
func (t *CreateJobRunner_CreateJobRunner_JobRunner) GetID() string {
	if t == nil {
		t = &CreateJobRunner_CreateJobRunner_JobRunner{}
	}
	return t.ID
}
func (t *CreateJobRunner_CreateJobRunner_JobRunner) GetIPAddress() *string {
	if t == nil {
		t = &CreateJobRunner_CreateJobRunner_JobRunner{}
	}
	return t.IPAddress
}
func (t *CreateJobRunner_CreateJobRunner_JobRunner) GetName() string {
	if t == nil {
		t = &CreateJobRunner_CreateJobRunner_JobRunner{}
	}
	return t.Name
}
func (t *CreateJobRunner_CreateJobRunner_JobRunner) GetOwnerID() *string {
	if t == nil {
		t = &CreateJobRunner_CreateJobRunner_JobRunner{}
	}
	return t.OwnerID
}
func (t *CreateJobRunner_CreateJobRunner_JobRunner) GetStatus() *enums.JobRunnerStatus {
	if t == nil {
		t = &CreateJobRunner_CreateJobRunner_JobRunner{}
	}
	return &t.Status
}
func (t *CreateJobRunner_CreateJobRunner_JobRunner) GetSystemOwned() *bool {
	if t == nil {
		t = &CreateJobRunner_CreateJobRunner_JobRunner{}
	}
	return t.SystemOwned
}
func (t *CreateJobRunner_CreateJobRunner_JobRunner) GetTags() []string {
	if t == nil {
		t = &CreateJobRunner_CreateJobRunner_JobRunner{}
	}
	return t.Tags
}
func (t *CreateJobRunner_CreateJobRunner_JobRunner) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateJobRunner_CreateJobRunner_JobRunner{}
	}
	return t.UpdatedAt
}
func (t *CreateJobRunner_CreateJobRunner_JobRunner) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateJobRunner_CreateJobRunner_JobRunner{}
	}
	return t.UpdatedBy
}

type CreateJobRunner_CreateJobRunner struct {
	JobRunner CreateJobRunner_CreateJobRunner_JobRunner "json:\"jobRunner\" graphql:\"jobRunner\""
}

func (t *CreateJobRunner_CreateJobRunner) GetJobRunner() *CreateJobRunner_CreateJobRunner_JobRunner {
	if t == nil {
		t = &CreateJobRunner_CreateJobRunner{}
	}
	return &t.JobRunner
}

type DeleteJobRunner_DeleteJobRunner struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteJobRunner_DeleteJobRunner) GetDeletedID() string {
	if t == nil {
		t = &DeleteJobRunner_DeleteJobRunner{}
	}
	return t.DeletedID
}

type GetAllJobRunners_JobRunners_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllJobRunners_JobRunners_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllJobRunners_JobRunners_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllJobRunners_JobRunners_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllJobRunners_JobRunners_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllJobRunners_JobRunners_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllJobRunners_JobRunners_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllJobRunners_JobRunners_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllJobRunners_JobRunners_PageInfo{}
	}
	return t.StartCursor
}

type GetAllJobRunners_JobRunners_Edges_Node struct {
	CreatedAt   *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID   string                "json:\"displayID\" graphql:\"displayID\""
	ID          string                "json:\"id\" graphql:\"id\""
	IPAddress   *string               "json:\"ipAddress,omitempty\" graphql:\"ipAddress\""
	Name        string                "json:\"name\" graphql:\"name\""
	OwnerID     *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status      enums.JobRunnerStatus "json:\"status\" graphql:\"status\""
	SystemOwned *bool                 "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags        []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllJobRunners_JobRunners_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllJobRunners_JobRunners_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllJobRunners_JobRunners_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllJobRunners_JobRunners_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllJobRunners_JobRunners_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllJobRunners_JobRunners_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllJobRunners_JobRunners_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllJobRunners_JobRunners_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllJobRunners_JobRunners_Edges_Node) GetIPAddress() *string {
	if t == nil {
		t = &GetAllJobRunners_JobRunners_Edges_Node{}
	}
	return t.IPAddress
}
func (t *GetAllJobRunners_JobRunners_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllJobRunners_JobRunners_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllJobRunners_JobRunners_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllJobRunners_JobRunners_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllJobRunners_JobRunners_Edges_Node) GetStatus() *enums.JobRunnerStatus {
	if t == nil {
		t = &GetAllJobRunners_JobRunners_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllJobRunners_JobRunners_Edges_Node) GetSystemOwned() *bool {
	if t == nil {
		t = &GetAllJobRunners_JobRunners_Edges_Node{}
	}
	return t.SystemOwned
}
func (t *GetAllJobRunners_JobRunners_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllJobRunners_JobRunners_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllJobRunners_JobRunners_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllJobRunners_JobRunners_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllJobRunners_JobRunners_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllJobRunners_JobRunners_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllJobRunners_JobRunners_Edges struct {
	Node *GetAllJobRunners_JobRunners_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllJobRunners_JobRunners_Edges) GetNode() *GetAllJobRunners_JobRunners_Edges_Node {
	if t == nil {
		t = &GetAllJobRunners_JobRunners_Edges{}
	}
	return t.Node
}

type GetAllJobRunners_JobRunners struct {
	Edges      []*GetAllJobRunners_JobRunners_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllJobRunners_JobRunners_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllJobRunners_JobRunners) GetEdges() []*GetAllJobRunners_JobRunners_Edges {
	if t == nil {
		t = &GetAllJobRunners_JobRunners{}
	}
	return t.Edges
}
func (t *GetAllJobRunners_JobRunners) GetPageInfo() *GetAllJobRunners_JobRunners_PageInfo {
	if t == nil {
		t = &GetAllJobRunners_JobRunners{}
	}
	return &t.PageInfo
}
func (t *GetAllJobRunners_JobRunners) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllJobRunners_JobRunners{}
	}
	return t.TotalCount
}

type GetJobRunnerByID_JobRunner struct {
	CreatedAt   *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID   string                "json:\"displayID\" graphql:\"displayID\""
	ID          string                "json:\"id\" graphql:\"id\""
	IPAddress   *string               "json:\"ipAddress,omitempty\" graphql:\"ipAddress\""
	Name        string                "json:\"name\" graphql:\"name\""
	OwnerID     *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status      enums.JobRunnerStatus "json:\"status\" graphql:\"status\""
	SystemOwned *bool                 "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags        []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetJobRunnerByID_JobRunner) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetJobRunnerByID_JobRunner{}
	}
	return t.CreatedAt
}
func (t *GetJobRunnerByID_JobRunner) GetCreatedBy() *string {
	if t == nil {
		t = &GetJobRunnerByID_JobRunner{}
	}
	return t.CreatedBy
}
func (t *GetJobRunnerByID_JobRunner) GetDisplayID() string {
	if t == nil {
		t = &GetJobRunnerByID_JobRunner{}
	}
	return t.DisplayID
}
func (t *GetJobRunnerByID_JobRunner) GetID() string {
	if t == nil {
		t = &GetJobRunnerByID_JobRunner{}
	}
	return t.ID
}
func (t *GetJobRunnerByID_JobRunner) GetIPAddress() *string {
	if t == nil {
		t = &GetJobRunnerByID_JobRunner{}
	}
	return t.IPAddress
}
func (t *GetJobRunnerByID_JobRunner) GetName() string {
	if t == nil {
		t = &GetJobRunnerByID_JobRunner{}
	}
	return t.Name
}
func (t *GetJobRunnerByID_JobRunner) GetOwnerID() *string {
	if t == nil {
		t = &GetJobRunnerByID_JobRunner{}
	}
	return t.OwnerID
}
func (t *GetJobRunnerByID_JobRunner) GetStatus() *enums.JobRunnerStatus {
	if t == nil {
		t = &GetJobRunnerByID_JobRunner{}
	}
	return &t.Status
}
func (t *GetJobRunnerByID_JobRunner) GetSystemOwned() *bool {
	if t == nil {
		t = &GetJobRunnerByID_JobRunner{}
	}
	return t.SystemOwned
}
func (t *GetJobRunnerByID_JobRunner) GetTags() []string {
	if t == nil {
		t = &GetJobRunnerByID_JobRunner{}
	}
	return t.Tags
}
func (t *GetJobRunnerByID_JobRunner) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetJobRunnerByID_JobRunner{}
	}
	return t.UpdatedAt
}
func (t *GetJobRunnerByID_JobRunner) GetUpdatedBy() *string {
	if t == nil {
		t = &GetJobRunnerByID_JobRunner{}
	}
	return t.UpdatedBy
}

type GetJobRunners_JobRunners_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetJobRunners_JobRunners_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetJobRunners_JobRunners_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetJobRunners_JobRunners_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetJobRunners_JobRunners_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetJobRunners_JobRunners_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetJobRunners_JobRunners_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetJobRunners_JobRunners_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetJobRunners_JobRunners_PageInfo{}
	}
	return t.StartCursor
}

type GetJobRunners_JobRunners_Edges_Node struct {
	CreatedAt   *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID   string                "json:\"displayID\" graphql:\"displayID\""
	ID          string                "json:\"id\" graphql:\"id\""
	IPAddress   *string               "json:\"ipAddress,omitempty\" graphql:\"ipAddress\""
	Name        string                "json:\"name\" graphql:\"name\""
	OwnerID     *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status      enums.JobRunnerStatus "json:\"status\" graphql:\"status\""
	SystemOwned *bool                 "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags        []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetJobRunners_JobRunners_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetJobRunners_JobRunners_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetJobRunners_JobRunners_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetJobRunners_JobRunners_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetJobRunners_JobRunners_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetJobRunners_JobRunners_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetJobRunners_JobRunners_Edges_Node) GetID() string {
	if t == nil {
		t = &GetJobRunners_JobRunners_Edges_Node{}
	}
	return t.ID
}
func (t *GetJobRunners_JobRunners_Edges_Node) GetIPAddress() *string {
	if t == nil {
		t = &GetJobRunners_JobRunners_Edges_Node{}
	}
	return t.IPAddress
}
func (t *GetJobRunners_JobRunners_Edges_Node) GetName() string {
	if t == nil {
		t = &GetJobRunners_JobRunners_Edges_Node{}
	}
	return t.Name
}
func (t *GetJobRunners_JobRunners_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetJobRunners_JobRunners_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetJobRunners_JobRunners_Edges_Node) GetStatus() *enums.JobRunnerStatus {
	if t == nil {
		t = &GetJobRunners_JobRunners_Edges_Node{}
	}
	return &t.Status
}
func (t *GetJobRunners_JobRunners_Edges_Node) GetSystemOwned() *bool {
	if t == nil {
		t = &GetJobRunners_JobRunners_Edges_Node{}
	}
	return t.SystemOwned
}
func (t *GetJobRunners_JobRunners_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetJobRunners_JobRunners_Edges_Node{}
	}
	return t.Tags
}
func (t *GetJobRunners_JobRunners_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetJobRunners_JobRunners_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetJobRunners_JobRunners_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetJobRunners_JobRunners_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetJobRunners_JobRunners_Edges struct {
	Node *GetJobRunners_JobRunners_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetJobRunners_JobRunners_Edges) GetNode() *GetJobRunners_JobRunners_Edges_Node {
	if t == nil {
		t = &GetJobRunners_JobRunners_Edges{}
	}
	return t.Node
}

type GetJobRunners_JobRunners struct {
	Edges      []*GetJobRunners_JobRunners_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetJobRunners_JobRunners_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                             "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetJobRunners_JobRunners) GetEdges() []*GetJobRunners_JobRunners_Edges {
	if t == nil {
		t = &GetJobRunners_JobRunners{}
	}
	return t.Edges
}
func (t *GetJobRunners_JobRunners) GetPageInfo() *GetJobRunners_JobRunners_PageInfo {
	if t == nil {
		t = &GetJobRunners_JobRunners{}
	}
	return &t.PageInfo
}
func (t *GetJobRunners_JobRunners) GetTotalCount() int64 {
	if t == nil {
		t = &GetJobRunners_JobRunners{}
	}
	return t.TotalCount
}

type UpdateJobRunner_UpdateJobRunner_JobRunner struct {
	CreatedAt   *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID   string                "json:\"displayID\" graphql:\"displayID\""
	ID          string                "json:\"id\" graphql:\"id\""
	IPAddress   *string               "json:\"ipAddress,omitempty\" graphql:\"ipAddress\""
	Name        string                "json:\"name\" graphql:\"name\""
	OwnerID     *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status      enums.JobRunnerStatus "json:\"status\" graphql:\"status\""
	SystemOwned *bool                 "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags        []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateJobRunner_UpdateJobRunner_JobRunner) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateJobRunner_UpdateJobRunner_JobRunner{}
	}
	return t.CreatedAt
}
func (t *UpdateJobRunner_UpdateJobRunner_JobRunner) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateJobRunner_UpdateJobRunner_JobRunner{}
	}
	return t.CreatedBy
}
func (t *UpdateJobRunner_UpdateJobRunner_JobRunner) GetDisplayID() string {
	if t == nil {
		t = &UpdateJobRunner_UpdateJobRunner_JobRunner{}
	}
	return t.DisplayID
}
func (t *UpdateJobRunner_UpdateJobRunner_JobRunner) GetID() string {
	if t == nil {
		t = &UpdateJobRunner_UpdateJobRunner_JobRunner{}
	}
	return t.ID
}
func (t *UpdateJobRunner_UpdateJobRunner_JobRunner) GetIPAddress() *string {
	if t == nil {
		t = &UpdateJobRunner_UpdateJobRunner_JobRunner{}
	}
	return t.IPAddress
}
func (t *UpdateJobRunner_UpdateJobRunner_JobRunner) GetName() string {
	if t == nil {
		t = &UpdateJobRunner_UpdateJobRunner_JobRunner{}
	}
	return t.Name
}
func (t *UpdateJobRunner_UpdateJobRunner_JobRunner) GetOwnerID() *string {
	if t == nil {
		t = &UpdateJobRunner_UpdateJobRunner_JobRunner{}
	}
	return t.OwnerID
}
func (t *UpdateJobRunner_UpdateJobRunner_JobRunner) GetStatus() *enums.JobRunnerStatus {
	if t == nil {
		t = &UpdateJobRunner_UpdateJobRunner_JobRunner{}
	}
	return &t.Status
}
func (t *UpdateJobRunner_UpdateJobRunner_JobRunner) GetSystemOwned() *bool {
	if t == nil {
		t = &UpdateJobRunner_UpdateJobRunner_JobRunner{}
	}
	return t.SystemOwned
}
func (t *UpdateJobRunner_UpdateJobRunner_JobRunner) GetTags() []string {
	if t == nil {
		t = &UpdateJobRunner_UpdateJobRunner_JobRunner{}
	}
	return t.Tags
}
func (t *UpdateJobRunner_UpdateJobRunner_JobRunner) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateJobRunner_UpdateJobRunner_JobRunner{}
	}
	return t.UpdatedAt
}
func (t *UpdateJobRunner_UpdateJobRunner_JobRunner) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateJobRunner_UpdateJobRunner_JobRunner{}
	}
	return t.UpdatedBy
}

type UpdateJobRunner_UpdateJobRunner struct {
	JobRunner UpdateJobRunner_UpdateJobRunner_JobRunner "json:\"jobRunner\" graphql:\"jobRunner\""
}

func (t *UpdateJobRunner_UpdateJobRunner) GetJobRunner() *UpdateJobRunner_UpdateJobRunner_JobRunner {
	if t == nil {
		t = &UpdateJobRunner_UpdateJobRunner{}
	}
	return &t.JobRunner
}

type CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ExpiresAt   time.Time  "json:\"expiresAt\" graphql:\"expiresAt\""
	ID          string     "json:\"id\" graphql:\"id\""
	JobRunnerID *string    "json:\"jobRunnerID,omitempty\" graphql:\"jobRunnerID\""
	LastUsedAt  *time.Time "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	OwnerID     *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string   "json:\"tags,omitempty\" graphql:\"tags\""
	Token       string     "json:\"token\" graphql:\"token\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken{}
	}
	return t.CreatedAt
}
func (t *CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken) GetCreatedBy() *string {
	if t == nil {
		t = &CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken{}
	}
	return t.CreatedBy
}
func (t *CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken{}
	}
	return &t.ExpiresAt
}
func (t *CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken) GetID() string {
	if t == nil {
		t = &CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken{}
	}
	return t.ID
}
func (t *CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken) GetJobRunnerID() *string {
	if t == nil {
		t = &CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken{}
	}
	return t.JobRunnerID
}
func (t *CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken{}
	}
	return t.LastUsedAt
}
func (t *CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken) GetOwnerID() *string {
	if t == nil {
		t = &CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken{}
	}
	return t.OwnerID
}
func (t *CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken) GetTags() []string {
	if t == nil {
		t = &CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken{}
	}
	return t.Tags
}
func (t *CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken) GetToken() string {
	if t == nil {
		t = &CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken{}
	}
	return t.Token
}
func (t *CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken{}
	}
	return t.UpdatedAt
}
func (t *CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken{}
	}
	return t.UpdatedBy
}

type CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken struct {
	JobRunnerRegistrationToken CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken "json:\"jobRunnerRegistrationToken\" graphql:\"jobRunnerRegistrationToken\""
}

func (t *CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken) GetJobRunnerRegistrationToken() *CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken_JobRunnerRegistrationToken {
	if t == nil {
		t = &CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken{}
	}
	return &t.JobRunnerRegistrationToken
}

type DeleteJobRunnerRegistrationToken_DeleteJobRunnerRegistrationToken struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteJobRunnerRegistrationToken_DeleteJobRunnerRegistrationToken) GetDeletedID() string {
	if t == nil {
		t = &DeleteJobRunnerRegistrationToken_DeleteJobRunnerRegistrationToken{}
	}
	return t.DeletedID
}

type GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_PageInfo{}
	}
	return t.StartCursor
}

type GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ExpiresAt   time.Time  "json:\"expiresAt\" graphql:\"expiresAt\""
	ID          string     "json:\"id\" graphql:\"id\""
	JobRunnerID *string    "json:\"jobRunnerID,omitempty\" graphql:\"jobRunnerID\""
	LastUsedAt  *time.Time "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	OwnerID     *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string   "json:\"tags,omitempty\" graphql:\"tags\""
	Token       string     "json:\"token\" graphql:\"token\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return &t.ExpiresAt
}
func (t *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node) GetJobRunnerID() *string {
	if t == nil {
		t = &GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return t.JobRunnerID
}
func (t *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return t.LastUsedAt
}
func (t *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node) GetToken() string {
	if t == nil {
		t = &GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return t.Token
}
func (t *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges struct {
	Node *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges) GetNode() *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node {
	if t == nil {
		t = &GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges{}
	}
	return t.Node
}

type GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens struct {
	Edges      []*GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens) GetEdges() []*GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges {
	if t == nil {
		t = &GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens{}
	}
	return t.Edges
}
func (t *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens) GetPageInfo() *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_PageInfo {
	if t == nil {
		t = &GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens{}
	}
	return &t.PageInfo
}
func (t *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens{}
	}
	return t.TotalCount
}

type GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ExpiresAt   time.Time  "json:\"expiresAt\" graphql:\"expiresAt\""
	ID          string     "json:\"id\" graphql:\"id\""
	JobRunnerID *string    "json:\"jobRunnerID,omitempty\" graphql:\"jobRunnerID\""
	LastUsedAt  *time.Time "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	OwnerID     *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string   "json:\"tags,omitempty\" graphql:\"tags\""
	Token       string     "json:\"token\" graphql:\"token\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken{}
	}
	return t.CreatedAt
}
func (t *GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken) GetCreatedBy() *string {
	if t == nil {
		t = &GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken{}
	}
	return t.CreatedBy
}
func (t *GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken{}
	}
	return &t.ExpiresAt
}
func (t *GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken) GetID() string {
	if t == nil {
		t = &GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken{}
	}
	return t.ID
}
func (t *GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken) GetJobRunnerID() *string {
	if t == nil {
		t = &GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken{}
	}
	return t.JobRunnerID
}
func (t *GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken{}
	}
	return t.LastUsedAt
}
func (t *GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken) GetOwnerID() *string {
	if t == nil {
		t = &GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken{}
	}
	return t.OwnerID
}
func (t *GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken) GetTags() []string {
	if t == nil {
		t = &GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken{}
	}
	return t.Tags
}
func (t *GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken) GetToken() string {
	if t == nil {
		t = &GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken{}
	}
	return t.Token
}
func (t *GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken{}
	}
	return t.UpdatedAt
}
func (t *GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken) GetUpdatedBy() *string {
	if t == nil {
		t = &GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken{}
	}
	return t.UpdatedBy
}

type GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_PageInfo{}
	}
	return t.StartCursor
}

type GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ExpiresAt   time.Time  "json:\"expiresAt\" graphql:\"expiresAt\""
	ID          string     "json:\"id\" graphql:\"id\""
	JobRunnerID *string    "json:\"jobRunnerID,omitempty\" graphql:\"jobRunnerID\""
	LastUsedAt  *time.Time "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	OwnerID     *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string   "json:\"tags,omitempty\" graphql:\"tags\""
	Token       string     "json:\"token\" graphql:\"token\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return &t.ExpiresAt
}
func (t *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return t.ID
}
func (t *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node) GetJobRunnerID() *string {
	if t == nil {
		t = &GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return t.JobRunnerID
}
func (t *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return t.LastUsedAt
}
func (t *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return t.Tags
}
func (t *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node) GetToken() string {
	if t == nil {
		t = &GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return t.Token
}
func (t *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges struct {
	Node *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges) GetNode() *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges_Node {
	if t == nil {
		t = &GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges{}
	}
	return t.Node
}

type GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens struct {
	Edges      []*GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens) GetEdges() []*GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_Edges {
	if t == nil {
		t = &GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens{}
	}
	return t.Edges
}
func (t *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens) GetPageInfo() *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens_PageInfo {
	if t == nil {
		t = &GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens{}
	}
	return &t.PageInfo
}
func (t *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens) GetTotalCount() int64 {
	if t == nil {
		t = &GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens{}
	}
	return t.TotalCount
}

type CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken struct {
	CreatedAt     *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ExpiresAt     *time.Time "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID            string     "json:\"id\" graphql:\"id\""
	IsActive      *bool      "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt    *time.Time "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	OwnerID       *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RevokedAt     *time.Time "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy     *string    "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason *string    "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Tags          []string   "json:\"tags,omitempty\" graphql:\"tags\""
	Token         string     "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken{}
	}
	return t.CreatedAt
}
func (t *CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken) GetCreatedBy() *string {
	if t == nil {
		t = &CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken{}
	}
	return t.CreatedBy
}
func (t *CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken{}
	}
	return t.ExpiresAt
}
func (t *CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken) GetID() string {
	if t == nil {
		t = &CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken{}
	}
	return t.ID
}
func (t *CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken) GetIsActive() *bool {
	if t == nil {
		t = &CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken{}
	}
	return t.IsActive
}
func (t *CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken{}
	}
	return t.LastUsedAt
}
func (t *CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken) GetOwnerID() *string {
	if t == nil {
		t = &CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken{}
	}
	return t.OwnerID
}
func (t *CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken) GetRevokedAt() *time.Time {
	if t == nil {
		t = &CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken{}
	}
	return t.RevokedAt
}
func (t *CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken) GetRevokedBy() *string {
	if t == nil {
		t = &CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken{}
	}
	return t.RevokedBy
}
func (t *CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken) GetRevokedReason() *string {
	if t == nil {
		t = &CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken{}
	}
	return t.RevokedReason
}
func (t *CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken) GetTags() []string {
	if t == nil {
		t = &CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken{}
	}
	return t.Tags
}
func (t *CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken) GetToken() string {
	if t == nil {
		t = &CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken{}
	}
	return t.Token
}
func (t *CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken{}
	}
	return t.UpdatedAt
}
func (t *CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken{}
	}
	return t.UpdatedBy
}

type CreateJobRunnerToken_CreateJobRunnerToken struct {
	JobRunnerToken CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken "json:\"jobRunnerToken\" graphql:\"jobRunnerToken\""
}

func (t *CreateJobRunnerToken_CreateJobRunnerToken) GetJobRunnerToken() *CreateJobRunnerToken_CreateJobRunnerToken_JobRunnerToken {
	if t == nil {
		t = &CreateJobRunnerToken_CreateJobRunnerToken{}
	}
	return &t.JobRunnerToken
}

type DeleteJobRunnerToken_DeleteJobRunnerToken struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteJobRunnerToken_DeleteJobRunnerToken) GetDeletedID() string {
	if t == nil {
		t = &DeleteJobRunnerToken_DeleteJobRunnerToken{}
	}
	return t.DeletedID
}

type GetAllJobRunnerTokens_JobRunnerTokens_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllJobRunnerTokens_JobRunnerTokens_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllJobRunnerTokens_JobRunnerTokens_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllJobRunnerTokens_JobRunnerTokens_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllJobRunnerTokens_JobRunnerTokens_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllJobRunnerTokens_JobRunnerTokens_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllJobRunnerTokens_JobRunnerTokens_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllJobRunnerTokens_JobRunnerTokens_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllJobRunnerTokens_JobRunnerTokens_PageInfo{}
	}
	return t.StartCursor
}

type GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node struct {
	CreatedAt     *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ExpiresAt     *time.Time "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID            string     "json:\"id\" graphql:\"id\""
	IsActive      *bool      "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt    *time.Time "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	OwnerID       *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RevokedAt     *time.Time "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy     *string    "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason *string    "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Tags          []string   "json:\"tags,omitempty\" graphql:\"tags\""
	Token         string     "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node) GetIsActive() *bool {
	if t == nil {
		t = &GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.IsActive
}
func (t *GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.LastUsedAt
}
func (t *GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node) GetRevokedAt() *time.Time {
	if t == nil {
		t = &GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.RevokedAt
}
func (t *GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node) GetRevokedBy() *string {
	if t == nil {
		t = &GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.RevokedBy
}
func (t *GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node) GetRevokedReason() *string {
	if t == nil {
		t = &GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.RevokedReason
}
func (t *GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node) GetToken() string {
	if t == nil {
		t = &GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.Token
}
func (t *GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllJobRunnerTokens_JobRunnerTokens_Edges struct {
	Node *GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllJobRunnerTokens_JobRunnerTokens_Edges) GetNode() *GetAllJobRunnerTokens_JobRunnerTokens_Edges_Node {
	if t == nil {
		t = &GetAllJobRunnerTokens_JobRunnerTokens_Edges{}
	}
	return t.Node
}

type GetAllJobRunnerTokens_JobRunnerTokens struct {
	Edges      []*GetAllJobRunnerTokens_JobRunnerTokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllJobRunnerTokens_JobRunnerTokens_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                          "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllJobRunnerTokens_JobRunnerTokens) GetEdges() []*GetAllJobRunnerTokens_JobRunnerTokens_Edges {
	if t == nil {
		t = &GetAllJobRunnerTokens_JobRunnerTokens{}
	}
	return t.Edges
}
func (t *GetAllJobRunnerTokens_JobRunnerTokens) GetPageInfo() *GetAllJobRunnerTokens_JobRunnerTokens_PageInfo {
	if t == nil {
		t = &GetAllJobRunnerTokens_JobRunnerTokens{}
	}
	return &t.PageInfo
}
func (t *GetAllJobRunnerTokens_JobRunnerTokens) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllJobRunnerTokens_JobRunnerTokens{}
	}
	return t.TotalCount
}

type GetJobRunnerTokenByID_JobRunnerToken struct {
	CreatedAt     *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ExpiresAt     *time.Time "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID            string     "json:\"id\" graphql:\"id\""
	IsActive      *bool      "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt    *time.Time "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	OwnerID       *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RevokedAt     *time.Time "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy     *string    "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason *string    "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Tags          []string   "json:\"tags,omitempty\" graphql:\"tags\""
	Token         string     "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetJobRunnerTokenByID_JobRunnerToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetJobRunnerTokenByID_JobRunnerToken{}
	}
	return t.CreatedAt
}
func (t *GetJobRunnerTokenByID_JobRunnerToken) GetCreatedBy() *string {
	if t == nil {
		t = &GetJobRunnerTokenByID_JobRunnerToken{}
	}
	return t.CreatedBy
}
func (t *GetJobRunnerTokenByID_JobRunnerToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetJobRunnerTokenByID_JobRunnerToken{}
	}
	return t.ExpiresAt
}
func (t *GetJobRunnerTokenByID_JobRunnerToken) GetID() string {
	if t == nil {
		t = &GetJobRunnerTokenByID_JobRunnerToken{}
	}
	return t.ID
}
func (t *GetJobRunnerTokenByID_JobRunnerToken) GetIsActive() *bool {
	if t == nil {
		t = &GetJobRunnerTokenByID_JobRunnerToken{}
	}
	return t.IsActive
}
func (t *GetJobRunnerTokenByID_JobRunnerToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetJobRunnerTokenByID_JobRunnerToken{}
	}
	return t.LastUsedAt
}
func (t *GetJobRunnerTokenByID_JobRunnerToken) GetOwnerID() *string {
	if t == nil {
		t = &GetJobRunnerTokenByID_JobRunnerToken{}
	}
	return t.OwnerID
}
func (t *GetJobRunnerTokenByID_JobRunnerToken) GetRevokedAt() *time.Time {
	if t == nil {
		t = &GetJobRunnerTokenByID_JobRunnerToken{}
	}
	return t.RevokedAt
}
func (t *GetJobRunnerTokenByID_JobRunnerToken) GetRevokedBy() *string {
	if t == nil {
		t = &GetJobRunnerTokenByID_JobRunnerToken{}
	}
	return t.RevokedBy
}
func (t *GetJobRunnerTokenByID_JobRunnerToken) GetRevokedReason() *string {
	if t == nil {
		t = &GetJobRunnerTokenByID_JobRunnerToken{}
	}
	return t.RevokedReason
}
func (t *GetJobRunnerTokenByID_JobRunnerToken) GetTags() []string {
	if t == nil {
		t = &GetJobRunnerTokenByID_JobRunnerToken{}
	}
	return t.Tags
}
func (t *GetJobRunnerTokenByID_JobRunnerToken) GetToken() string {
	if t == nil {
		t = &GetJobRunnerTokenByID_JobRunnerToken{}
	}
	return t.Token
}
func (t *GetJobRunnerTokenByID_JobRunnerToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetJobRunnerTokenByID_JobRunnerToken{}
	}
	return t.UpdatedAt
}
func (t *GetJobRunnerTokenByID_JobRunnerToken) GetUpdatedBy() *string {
	if t == nil {
		t = &GetJobRunnerTokenByID_JobRunnerToken{}
	}
	return t.UpdatedBy
}

type GetJobRunnerTokens_JobRunnerTokens_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetJobRunnerTokens_JobRunnerTokens_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetJobRunnerTokens_JobRunnerTokens_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetJobRunnerTokens_JobRunnerTokens_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetJobRunnerTokens_JobRunnerTokens_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetJobRunnerTokens_JobRunnerTokens_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetJobRunnerTokens_JobRunnerTokens_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetJobRunnerTokens_JobRunnerTokens_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetJobRunnerTokens_JobRunnerTokens_PageInfo{}
	}
	return t.StartCursor
}

type GetJobRunnerTokens_JobRunnerTokens_Edges_Node struct {
	CreatedAt     *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ExpiresAt     *time.Time "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID            string     "json:\"id\" graphql:\"id\""
	IsActive      *bool      "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt    *time.Time "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	OwnerID       *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RevokedAt     *time.Time "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy     *string    "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason *string    "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Tags          []string   "json:\"tags,omitempty\" graphql:\"tags\""
	Token         string     "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetJobRunnerTokens_JobRunnerTokens_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetJobRunnerTokens_JobRunnerTokens_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetJobRunnerTokens_JobRunnerTokens_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetJobRunnerTokens_JobRunnerTokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GetJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.ID
}
func (t *GetJobRunnerTokens_JobRunnerTokens_Edges_Node) GetIsActive() *bool {
	if t == nil {
		t = &GetJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.IsActive
}
func (t *GetJobRunnerTokens_JobRunnerTokens_Edges_Node) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.LastUsedAt
}
func (t *GetJobRunnerTokens_JobRunnerTokens_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetJobRunnerTokens_JobRunnerTokens_Edges_Node) GetRevokedAt() *time.Time {
	if t == nil {
		t = &GetJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.RevokedAt
}
func (t *GetJobRunnerTokens_JobRunnerTokens_Edges_Node) GetRevokedBy() *string {
	if t == nil {
		t = &GetJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.RevokedBy
}
func (t *GetJobRunnerTokens_JobRunnerTokens_Edges_Node) GetRevokedReason() *string {
	if t == nil {
		t = &GetJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.RevokedReason
}
func (t *GetJobRunnerTokens_JobRunnerTokens_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.Tags
}
func (t *GetJobRunnerTokens_JobRunnerTokens_Edges_Node) GetToken() string {
	if t == nil {
		t = &GetJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.Token
}
func (t *GetJobRunnerTokens_JobRunnerTokens_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetJobRunnerTokens_JobRunnerTokens_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetJobRunnerTokens_JobRunnerTokens_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetJobRunnerTokens_JobRunnerTokens_Edges struct {
	Node *GetJobRunnerTokens_JobRunnerTokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetJobRunnerTokens_JobRunnerTokens_Edges) GetNode() *GetJobRunnerTokens_JobRunnerTokens_Edges_Node {
	if t == nil {
		t = &GetJobRunnerTokens_JobRunnerTokens_Edges{}
	}
	return t.Node
}

type GetJobRunnerTokens_JobRunnerTokens struct {
	Edges      []*GetJobRunnerTokens_JobRunnerTokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetJobRunnerTokens_JobRunnerTokens_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                       "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetJobRunnerTokens_JobRunnerTokens) GetEdges() []*GetJobRunnerTokens_JobRunnerTokens_Edges {
	if t == nil {
		t = &GetJobRunnerTokens_JobRunnerTokens{}
	}
	return t.Edges
}
func (t *GetJobRunnerTokens_JobRunnerTokens) GetPageInfo() *GetJobRunnerTokens_JobRunnerTokens_PageInfo {
	if t == nil {
		t = &GetJobRunnerTokens_JobRunnerTokens{}
	}
	return &t.PageInfo
}
func (t *GetJobRunnerTokens_JobRunnerTokens) GetTotalCount() int64 {
	if t == nil {
		t = &GetJobRunnerTokens_JobRunnerTokens{}
	}
	return t.TotalCount
}

type CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates struct {
	Configuration models.JobConfiguration "json:\"configuration,omitempty\" graphql:\"configuration\""
	CreatedAt     *time.Time              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Cron          *string                 "json:\"cron,omitempty\" graphql:\"cron\""
	Description   *string                 "json:\"description,omitempty\" graphql:\"description\""
	DisplayID     string                  "json:\"displayID\" graphql:\"displayID\""
	DownloadURL   string                  "json:\"downloadURL\" graphql:\"downloadURL\""
	ID            string                  "json:\"id\" graphql:\"id\""
	OwnerID       *string                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Platform      enums.JobPlatformType   "json:\"platform\" graphql:\"platform\""
	SystemOwned   *bool                   "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags          []string                "json:\"tags,omitempty\" graphql:\"tags\""
	Title         string                  "json:\"title\" graphql:\"title\""
	UpdatedAt     *time.Time              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates) GetConfiguration() *models.JobConfiguration {
	if t == nil {
		t = &CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates{}
	}
	return &t.Configuration
}
func (t *CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates) GetCron() *string {
	if t == nil {
		t = &CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates{}
	}
	return t.Cron
}
func (t *CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates{}
	}
	return t.Description
}
func (t *CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates{}
	}
	return t.DisplayID
}
func (t *CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates) GetDownloadURL() string {
	if t == nil {
		t = &CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates{}
	}
	return t.DownloadURL
}
func (t *CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates) GetID() string {
	if t == nil {
		t = &CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates{}
	}
	return t.ID
}
func (t *CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates) GetPlatform() *enums.JobPlatformType {
	if t == nil {
		t = &CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates{}
	}
	return &t.Platform
}
func (t *CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates) GetSystemOwned() *bool {
	if t == nil {
		t = &CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates{}
	}
	return t.SystemOwned
}
func (t *CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates{}
	}
	return t.Tags
}
func (t *CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates) GetTitle() string {
	if t == nil {
		t = &CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates{}
	}
	return t.Title
}
func (t *CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate struct {
	JobTemplates []*CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates "json:\"jobTemplates,omitempty\" graphql:\"jobTemplates\""
}

func (t *CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate) GetJobTemplates() []*CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate_JobTemplates {
	if t == nil {
		t = &CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate{}
	}
	return t.JobTemplates
}

type CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates struct {
	Configuration models.JobConfiguration "json:\"configuration,omitempty\" graphql:\"configuration\""
	CreatedAt     *time.Time              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Cron          *string                 "json:\"cron,omitempty\" graphql:\"cron\""
	Description   *string                 "json:\"description,omitempty\" graphql:\"description\""
	DisplayID     string                  "json:\"displayID\" graphql:\"displayID\""
	DownloadURL   string                  "json:\"downloadURL\" graphql:\"downloadURL\""
	ID            string                  "json:\"id\" graphql:\"id\""
	OwnerID       *string                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Platform      enums.JobPlatformType   "json:\"platform\" graphql:\"platform\""
	SystemOwned   *bool                   "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags          []string                "json:\"tags,omitempty\" graphql:\"tags\""
	Title         string                  "json:\"title\" graphql:\"title\""
	UpdatedAt     *time.Time              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates) GetConfiguration() *models.JobConfiguration {
	if t == nil {
		t = &CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates{}
	}
	return &t.Configuration
}
func (t *CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates{}
	}
	return t.CreatedAt
}
func (t *CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates{}
	}
	return t.CreatedBy
}
func (t *CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates) GetCron() *string {
	if t == nil {
		t = &CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates{}
	}
	return t.Cron
}
func (t *CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates) GetDescription() *string {
	if t == nil {
		t = &CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates{}
	}
	return t.Description
}
func (t *CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates{}
	}
	return t.DisplayID
}
func (t *CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates) GetDownloadURL() string {
	if t == nil {
		t = &CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates{}
	}
	return t.DownloadURL
}
func (t *CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates) GetID() string {
	if t == nil {
		t = &CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates{}
	}
	return t.ID
}
func (t *CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates{}
	}
	return t.OwnerID
}
func (t *CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates) GetPlatform() *enums.JobPlatformType {
	if t == nil {
		t = &CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates{}
	}
	return &t.Platform
}
func (t *CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates) GetSystemOwned() *bool {
	if t == nil {
		t = &CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates{}
	}
	return t.SystemOwned
}
func (t *CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates) GetTags() []string {
	if t == nil {
		t = &CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates{}
	}
	return t.Tags
}
func (t *CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates) GetTitle() string {
	if t == nil {
		t = &CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates{}
	}
	return t.Title
}
func (t *CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates{}
	}
	return t.UpdatedBy
}

type CreateBulkJobTemplate_CreateBulkJobTemplate struct {
	JobTemplates []*CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates "json:\"jobTemplates,omitempty\" graphql:\"jobTemplates\""
}

func (t *CreateBulkJobTemplate_CreateBulkJobTemplate) GetJobTemplates() []*CreateBulkJobTemplate_CreateBulkJobTemplate_JobTemplates {
	if t == nil {
		t = &CreateBulkJobTemplate_CreateBulkJobTemplate{}
	}
	return t.JobTemplates
}

type CreateJobTemplate_CreateJobTemplate_JobTemplate struct {
	Configuration models.JobConfiguration "json:\"configuration,omitempty\" graphql:\"configuration\""
	CreatedAt     *time.Time              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Cron          *string                 "json:\"cron,omitempty\" graphql:\"cron\""
	Description   *string                 "json:\"description,omitempty\" graphql:\"description\""
	DisplayID     string                  "json:\"displayID\" graphql:\"displayID\""
	DownloadURL   string                  "json:\"downloadURL\" graphql:\"downloadURL\""
	ID            string                  "json:\"id\" graphql:\"id\""
	OwnerID       *string                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Platform      enums.JobPlatformType   "json:\"platform\" graphql:\"platform\""
	SystemOwned   *bool                   "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags          []string                "json:\"tags,omitempty\" graphql:\"tags\""
	Title         string                  "json:\"title\" graphql:\"title\""
	UpdatedAt     *time.Time              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateJobTemplate_CreateJobTemplate_JobTemplate) GetConfiguration() *models.JobConfiguration {
	if t == nil {
		t = &CreateJobTemplate_CreateJobTemplate_JobTemplate{}
	}
	return &t.Configuration
}
func (t *CreateJobTemplate_CreateJobTemplate_JobTemplate) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateJobTemplate_CreateJobTemplate_JobTemplate{}
	}
	return t.CreatedAt
}
func (t *CreateJobTemplate_CreateJobTemplate_JobTemplate) GetCreatedBy() *string {
	if t == nil {
		t = &CreateJobTemplate_CreateJobTemplate_JobTemplate{}
	}
	return t.CreatedBy
}
func (t *CreateJobTemplate_CreateJobTemplate_JobTemplate) GetCron() *string {
	if t == nil {
		t = &CreateJobTemplate_CreateJobTemplate_JobTemplate{}
	}
	return t.Cron
}
func (t *CreateJobTemplate_CreateJobTemplate_JobTemplate) GetDescription() *string {
	if t == nil {
		t = &CreateJobTemplate_CreateJobTemplate_JobTemplate{}
	}
	return t.Description
}
func (t *CreateJobTemplate_CreateJobTemplate_JobTemplate) GetDisplayID() string {
	if t == nil {
		t = &CreateJobTemplate_CreateJobTemplate_JobTemplate{}
	}
	return t.DisplayID
}
func (t *CreateJobTemplate_CreateJobTemplate_JobTemplate) GetDownloadURL() string {
	if t == nil {
		t = &CreateJobTemplate_CreateJobTemplate_JobTemplate{}
	}
	return t.DownloadURL
}
func (t *CreateJobTemplate_CreateJobTemplate_JobTemplate) GetID() string {
	if t == nil {
		t = &CreateJobTemplate_CreateJobTemplate_JobTemplate{}
	}
	return t.ID
}
func (t *CreateJobTemplate_CreateJobTemplate_JobTemplate) GetOwnerID() *string {
	if t == nil {
		t = &CreateJobTemplate_CreateJobTemplate_JobTemplate{}
	}
	return t.OwnerID
}
func (t *CreateJobTemplate_CreateJobTemplate_JobTemplate) GetPlatform() *enums.JobPlatformType {
	if t == nil {
		t = &CreateJobTemplate_CreateJobTemplate_JobTemplate{}
	}
	return &t.Platform
}
func (t *CreateJobTemplate_CreateJobTemplate_JobTemplate) GetSystemOwned() *bool {
	if t == nil {
		t = &CreateJobTemplate_CreateJobTemplate_JobTemplate{}
	}
	return t.SystemOwned
}
func (t *CreateJobTemplate_CreateJobTemplate_JobTemplate) GetTags() []string {
	if t == nil {
		t = &CreateJobTemplate_CreateJobTemplate_JobTemplate{}
	}
	return t.Tags
}
func (t *CreateJobTemplate_CreateJobTemplate_JobTemplate) GetTitle() string {
	if t == nil {
		t = &CreateJobTemplate_CreateJobTemplate_JobTemplate{}
	}
	return t.Title
}
func (t *CreateJobTemplate_CreateJobTemplate_JobTemplate) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateJobTemplate_CreateJobTemplate_JobTemplate{}
	}
	return t.UpdatedAt
}
func (t *CreateJobTemplate_CreateJobTemplate_JobTemplate) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateJobTemplate_CreateJobTemplate_JobTemplate{}
	}
	return t.UpdatedBy
}

type CreateJobTemplate_CreateJobTemplate struct {
	JobTemplate CreateJobTemplate_CreateJobTemplate_JobTemplate "json:\"jobTemplate\" graphql:\"jobTemplate\""
}

func (t *CreateJobTemplate_CreateJobTemplate) GetJobTemplate() *CreateJobTemplate_CreateJobTemplate_JobTemplate {
	if t == nil {
		t = &CreateJobTemplate_CreateJobTemplate{}
	}
	return &t.JobTemplate
}

type DeleteJobTemplate_DeleteJobTemplate struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteJobTemplate_DeleteJobTemplate) GetDeletedID() string {
	if t == nil {
		t = &DeleteJobTemplate_DeleteJobTemplate{}
	}
	return t.DeletedID
}

type GetAllJobTemplates_JobTemplates_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllJobTemplates_JobTemplates_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllJobTemplates_JobTemplates_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllJobTemplates_JobTemplates_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllJobTemplates_JobTemplates_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates_PageInfo{}
	}
	return t.StartCursor
}

type GetAllJobTemplates_JobTemplates_Edges_Node struct {
	Configuration models.JobConfiguration "json:\"configuration,omitempty\" graphql:\"configuration\""
	CreatedAt     *time.Time              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Cron          *string                 "json:\"cron,omitempty\" graphql:\"cron\""
	Description   *string                 "json:\"description,omitempty\" graphql:\"description\""
	DisplayID     string                  "json:\"displayID\" graphql:\"displayID\""
	DownloadURL   string                  "json:\"downloadURL\" graphql:\"downloadURL\""
	ID            string                  "json:\"id\" graphql:\"id\""
	OwnerID       *string                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Platform      enums.JobPlatformType   "json:\"platform\" graphql:\"platform\""
	SystemOwned   *bool                   "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags          []string                "json:\"tags,omitempty\" graphql:\"tags\""
	Title         string                  "json:\"title\" graphql:\"title\""
	UpdatedAt     *time.Time              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllJobTemplates_JobTemplates_Edges_Node) GetConfiguration() *models.JobConfiguration {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates_Edges_Node{}
	}
	return &t.Configuration
}
func (t *GetAllJobTemplates_JobTemplates_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllJobTemplates_JobTemplates_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllJobTemplates_JobTemplates_Edges_Node) GetCron() *string {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.Cron
}
func (t *GetAllJobTemplates_JobTemplates_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllJobTemplates_JobTemplates_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllJobTemplates_JobTemplates_Edges_Node) GetDownloadURL() string {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.DownloadURL
}
func (t *GetAllJobTemplates_JobTemplates_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllJobTemplates_JobTemplates_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllJobTemplates_JobTemplates_Edges_Node) GetPlatform() *enums.JobPlatformType {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates_Edges_Node{}
	}
	return &t.Platform
}
func (t *GetAllJobTemplates_JobTemplates_Edges_Node) GetSystemOwned() *bool {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.SystemOwned
}
func (t *GetAllJobTemplates_JobTemplates_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllJobTemplates_JobTemplates_Edges_Node) GetTitle() string {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.Title
}
func (t *GetAllJobTemplates_JobTemplates_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllJobTemplates_JobTemplates_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllJobTemplates_JobTemplates_Edges struct {
	Node *GetAllJobTemplates_JobTemplates_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllJobTemplates_JobTemplates_Edges) GetNode() *GetAllJobTemplates_JobTemplates_Edges_Node {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates_Edges{}
	}
	return t.Node
}

type GetAllJobTemplates_JobTemplates struct {
	Edges      []*GetAllJobTemplates_JobTemplates_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllJobTemplates_JobTemplates_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllJobTemplates_JobTemplates) GetEdges() []*GetAllJobTemplates_JobTemplates_Edges {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates{}
	}
	return t.Edges
}
func (t *GetAllJobTemplates_JobTemplates) GetPageInfo() *GetAllJobTemplates_JobTemplates_PageInfo {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates{}
	}
	return &t.PageInfo
}
func (t *GetAllJobTemplates_JobTemplates) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllJobTemplates_JobTemplates{}
	}
	return t.TotalCount
}

type GetJobTemplateByID_JobTemplate struct {
	Configuration models.JobConfiguration "json:\"configuration,omitempty\" graphql:\"configuration\""
	CreatedAt     *time.Time              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Cron          *string                 "json:\"cron,omitempty\" graphql:\"cron\""
	Description   *string                 "json:\"description,omitempty\" graphql:\"description\""
	DisplayID     string                  "json:\"displayID\" graphql:\"displayID\""
	DownloadURL   string                  "json:\"downloadURL\" graphql:\"downloadURL\""
	ID            string                  "json:\"id\" graphql:\"id\""
	OwnerID       *string                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Platform      enums.JobPlatformType   "json:\"platform\" graphql:\"platform\""
	SystemOwned   *bool                   "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags          []string                "json:\"tags,omitempty\" graphql:\"tags\""
	Title         string                  "json:\"title\" graphql:\"title\""
	UpdatedAt     *time.Time              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetJobTemplateByID_JobTemplate) GetConfiguration() *models.JobConfiguration {
	if t == nil {
		t = &GetJobTemplateByID_JobTemplate{}
	}
	return &t.Configuration
}
func (t *GetJobTemplateByID_JobTemplate) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetJobTemplateByID_JobTemplate{}
	}
	return t.CreatedAt
}
func (t *GetJobTemplateByID_JobTemplate) GetCreatedBy() *string {
	if t == nil {
		t = &GetJobTemplateByID_JobTemplate{}
	}
	return t.CreatedBy
}
func (t *GetJobTemplateByID_JobTemplate) GetCron() *string {
	if t == nil {
		t = &GetJobTemplateByID_JobTemplate{}
	}
	return t.Cron
}
func (t *GetJobTemplateByID_JobTemplate) GetDescription() *string {
	if t == nil {
		t = &GetJobTemplateByID_JobTemplate{}
	}
	return t.Description
}
func (t *GetJobTemplateByID_JobTemplate) GetDisplayID() string {
	if t == nil {
		t = &GetJobTemplateByID_JobTemplate{}
	}
	return t.DisplayID
}
func (t *GetJobTemplateByID_JobTemplate) GetDownloadURL() string {
	if t == nil {
		t = &GetJobTemplateByID_JobTemplate{}
	}
	return t.DownloadURL
}
func (t *GetJobTemplateByID_JobTemplate) GetID() string {
	if t == nil {
		t = &GetJobTemplateByID_JobTemplate{}
	}
	return t.ID
}
func (t *GetJobTemplateByID_JobTemplate) GetOwnerID() *string {
	if t == nil {
		t = &GetJobTemplateByID_JobTemplate{}
	}
	return t.OwnerID
}
func (t *GetJobTemplateByID_JobTemplate) GetPlatform() *enums.JobPlatformType {
	if t == nil {
		t = &GetJobTemplateByID_JobTemplate{}
	}
	return &t.Platform
}
func (t *GetJobTemplateByID_JobTemplate) GetSystemOwned() *bool {
	if t == nil {
		t = &GetJobTemplateByID_JobTemplate{}
	}
	return t.SystemOwned
}
func (t *GetJobTemplateByID_JobTemplate) GetTags() []string {
	if t == nil {
		t = &GetJobTemplateByID_JobTemplate{}
	}
	return t.Tags
}
func (t *GetJobTemplateByID_JobTemplate) GetTitle() string {
	if t == nil {
		t = &GetJobTemplateByID_JobTemplate{}
	}
	return t.Title
}
func (t *GetJobTemplateByID_JobTemplate) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetJobTemplateByID_JobTemplate{}
	}
	return t.UpdatedAt
}
func (t *GetJobTemplateByID_JobTemplate) GetUpdatedBy() *string {
	if t == nil {
		t = &GetJobTemplateByID_JobTemplate{}
	}
	return t.UpdatedBy
}

type GetJobTemplates_JobTemplates_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetJobTemplates_JobTemplates_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetJobTemplates_JobTemplates_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetJobTemplates_JobTemplates_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetJobTemplates_JobTemplates_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetJobTemplates_JobTemplates_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetJobTemplates_JobTemplates_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetJobTemplates_JobTemplates_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetJobTemplates_JobTemplates_PageInfo{}
	}
	return t.StartCursor
}

type GetJobTemplates_JobTemplates_Edges_Node struct {
	Configuration models.JobConfiguration "json:\"configuration,omitempty\" graphql:\"configuration\""
	CreatedAt     *time.Time              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Cron          *string                 "json:\"cron,omitempty\" graphql:\"cron\""
	Description   *string                 "json:\"description,omitempty\" graphql:\"description\""
	DisplayID     string                  "json:\"displayID\" graphql:\"displayID\""
	DownloadURL   string                  "json:\"downloadURL\" graphql:\"downloadURL\""
	ID            string                  "json:\"id\" graphql:\"id\""
	OwnerID       *string                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Platform      enums.JobPlatformType   "json:\"platform\" graphql:\"platform\""
	SystemOwned   *bool                   "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags          []string                "json:\"tags,omitempty\" graphql:\"tags\""
	Title         string                  "json:\"title\" graphql:\"title\""
	UpdatedAt     *time.Time              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetJobTemplates_JobTemplates_Edges_Node) GetConfiguration() *models.JobConfiguration {
	if t == nil {
		t = &GetJobTemplates_JobTemplates_Edges_Node{}
	}
	return &t.Configuration
}
func (t *GetJobTemplates_JobTemplates_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetJobTemplates_JobTemplates_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetJobTemplates_JobTemplates_Edges_Node) GetCron() *string {
	if t == nil {
		t = &GetJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.Cron
}
func (t *GetJobTemplates_JobTemplates_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.Description
}
func (t *GetJobTemplates_JobTemplates_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetJobTemplates_JobTemplates_Edges_Node) GetDownloadURL() string {
	if t == nil {
		t = &GetJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.DownloadURL
}
func (t *GetJobTemplates_JobTemplates_Edges_Node) GetID() string {
	if t == nil {
		t = &GetJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.ID
}
func (t *GetJobTemplates_JobTemplates_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetJobTemplates_JobTemplates_Edges_Node) GetPlatform() *enums.JobPlatformType {
	if t == nil {
		t = &GetJobTemplates_JobTemplates_Edges_Node{}
	}
	return &t.Platform
}
func (t *GetJobTemplates_JobTemplates_Edges_Node) GetSystemOwned() *bool {
	if t == nil {
		t = &GetJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.SystemOwned
}
func (t *GetJobTemplates_JobTemplates_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.Tags
}
func (t *GetJobTemplates_JobTemplates_Edges_Node) GetTitle() string {
	if t == nil {
		t = &GetJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.Title
}
func (t *GetJobTemplates_JobTemplates_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetJobTemplates_JobTemplates_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetJobTemplates_JobTemplates_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetJobTemplates_JobTemplates_Edges struct {
	Node *GetJobTemplates_JobTemplates_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetJobTemplates_JobTemplates_Edges) GetNode() *GetJobTemplates_JobTemplates_Edges_Node {
	if t == nil {
		t = &GetJobTemplates_JobTemplates_Edges{}
	}
	return t.Node
}

type GetJobTemplates_JobTemplates struct {
	Edges      []*GetJobTemplates_JobTemplates_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetJobTemplates_JobTemplates_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetJobTemplates_JobTemplates) GetEdges() []*GetJobTemplates_JobTemplates_Edges {
	if t == nil {
		t = &GetJobTemplates_JobTemplates{}
	}
	return t.Edges
}
func (t *GetJobTemplates_JobTemplates) GetPageInfo() *GetJobTemplates_JobTemplates_PageInfo {
	if t == nil {
		t = &GetJobTemplates_JobTemplates{}
	}
	return &t.PageInfo
}
func (t *GetJobTemplates_JobTemplates) GetTotalCount() int64 {
	if t == nil {
		t = &GetJobTemplates_JobTemplates{}
	}
	return t.TotalCount
}

type UpdateJobTemplate_UpdateJobTemplate_JobTemplate struct {
	Configuration models.JobConfiguration "json:\"configuration,omitempty\" graphql:\"configuration\""
	CreatedAt     *time.Time              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Cron          *string                 "json:\"cron,omitempty\" graphql:\"cron\""
	Description   *string                 "json:\"description,omitempty\" graphql:\"description\""
	DisplayID     string                  "json:\"displayID\" graphql:\"displayID\""
	DownloadURL   string                  "json:\"downloadURL\" graphql:\"downloadURL\""
	ID            string                  "json:\"id\" graphql:\"id\""
	OwnerID       *string                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Platform      enums.JobPlatformType   "json:\"platform\" graphql:\"platform\""
	SystemOwned   *bool                   "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags          []string                "json:\"tags,omitempty\" graphql:\"tags\""
	Title         string                  "json:\"title\" graphql:\"title\""
	UpdatedAt     *time.Time              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateJobTemplate_UpdateJobTemplate_JobTemplate) GetConfiguration() *models.JobConfiguration {
	if t == nil {
		t = &UpdateJobTemplate_UpdateJobTemplate_JobTemplate{}
	}
	return &t.Configuration
}
func (t *UpdateJobTemplate_UpdateJobTemplate_JobTemplate) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateJobTemplate_UpdateJobTemplate_JobTemplate{}
	}
	return t.CreatedAt
}
func (t *UpdateJobTemplate_UpdateJobTemplate_JobTemplate) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateJobTemplate_UpdateJobTemplate_JobTemplate{}
	}
	return t.CreatedBy
}
func (t *UpdateJobTemplate_UpdateJobTemplate_JobTemplate) GetCron() *string {
	if t == nil {
		t = &UpdateJobTemplate_UpdateJobTemplate_JobTemplate{}
	}
	return t.Cron
}
func (t *UpdateJobTemplate_UpdateJobTemplate_JobTemplate) GetDescription() *string {
	if t == nil {
		t = &UpdateJobTemplate_UpdateJobTemplate_JobTemplate{}
	}
	return t.Description
}
func (t *UpdateJobTemplate_UpdateJobTemplate_JobTemplate) GetDisplayID() string {
	if t == nil {
		t = &UpdateJobTemplate_UpdateJobTemplate_JobTemplate{}
	}
	return t.DisplayID
}
func (t *UpdateJobTemplate_UpdateJobTemplate_JobTemplate) GetDownloadURL() string {
	if t == nil {
		t = &UpdateJobTemplate_UpdateJobTemplate_JobTemplate{}
	}
	return t.DownloadURL
}
func (t *UpdateJobTemplate_UpdateJobTemplate_JobTemplate) GetID() string {
	if t == nil {
		t = &UpdateJobTemplate_UpdateJobTemplate_JobTemplate{}
	}
	return t.ID
}
func (t *UpdateJobTemplate_UpdateJobTemplate_JobTemplate) GetOwnerID() *string {
	if t == nil {
		t = &UpdateJobTemplate_UpdateJobTemplate_JobTemplate{}
	}
	return t.OwnerID
}
func (t *UpdateJobTemplate_UpdateJobTemplate_JobTemplate) GetPlatform() *enums.JobPlatformType {
	if t == nil {
		t = &UpdateJobTemplate_UpdateJobTemplate_JobTemplate{}
	}
	return &t.Platform
}
func (t *UpdateJobTemplate_UpdateJobTemplate_JobTemplate) GetSystemOwned() *bool {
	if t == nil {
		t = &UpdateJobTemplate_UpdateJobTemplate_JobTemplate{}
	}
	return t.SystemOwned
}
func (t *UpdateJobTemplate_UpdateJobTemplate_JobTemplate) GetTags() []string {
	if t == nil {
		t = &UpdateJobTemplate_UpdateJobTemplate_JobTemplate{}
	}
	return t.Tags
}
func (t *UpdateJobTemplate_UpdateJobTemplate_JobTemplate) GetTitle() string {
	if t == nil {
		t = &UpdateJobTemplate_UpdateJobTemplate_JobTemplate{}
	}
	return t.Title
}
func (t *UpdateJobTemplate_UpdateJobTemplate_JobTemplate) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateJobTemplate_UpdateJobTemplate_JobTemplate{}
	}
	return t.UpdatedAt
}
func (t *UpdateJobTemplate_UpdateJobTemplate_JobTemplate) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateJobTemplate_UpdateJobTemplate_JobTemplate{}
	}
	return t.UpdatedBy
}

type UpdateJobTemplate_UpdateJobTemplate struct {
	JobTemplate UpdateJobTemplate_UpdateJobTemplate_JobTemplate "json:\"jobTemplate\" graphql:\"jobTemplate\""
}

func (t *UpdateJobTemplate_UpdateJobTemplate) GetJobTemplate() *UpdateJobTemplate_UpdateJobTemplate_JobTemplate {
	if t == nil {
		t = &UpdateJobTemplate_UpdateJobTemplate{}
	}
	return &t.JobTemplate
}

type GetAllJobTemplateHistories_JobTemplateHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllJobTemplateHistories_JobTemplateHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllJobTemplateHistories_JobTemplateHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllJobTemplateHistories_JobTemplateHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllJobTemplateHistories_JobTemplateHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node struct {
	Configuration models.JobConfiguration "json:\"configuration,omitempty\" graphql:\"configuration\""
	CreatedAt     *time.Time              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Cron          *string                 "json:\"cron,omitempty\" graphql:\"cron\""
	Description   *string                 "json:\"description,omitempty\" graphql:\"description\""
	DisplayID     string                  "json:\"displayID\" graphql:\"displayID\""
	DownloadURL   string                  "json:\"downloadURL\" graphql:\"downloadURL\""
	HistoryTime   time.Time               "json:\"historyTime\" graphql:\"historyTime\""
	ID            string                  "json:\"id\" graphql:\"id\""
	Operation     history.OpType          "json:\"operation\" graphql:\"operation\""
	OwnerID       *string                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Platform      enums.JobPlatformType   "json:\"platform\" graphql:\"platform\""
	Ref           *string                 "json:\"ref,omitempty\" graphql:\"ref\""
	SystemOwned   *bool                   "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags          []string                "json:\"tags,omitempty\" graphql:\"tags\""
	Title         string                  "json:\"title\" graphql:\"title\""
	UpdatedAt     *time.Time              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node) GetConfiguration() *models.JobConfiguration {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return &t.Configuration
}
func (t *GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node) GetCron() *string {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.Cron
}
func (t *GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node) GetDownloadURL() string {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.DownloadURL
}
func (t *GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node) GetPlatform() *enums.JobPlatformType {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return &t.Platform
}
func (t *GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node) GetSystemOwned() *bool {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.SystemOwned
}
func (t *GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node) GetTitle() string {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.Title
}
func (t *GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllJobTemplateHistories_JobTemplateHistories_Edges struct {
	Node *GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllJobTemplateHistories_JobTemplateHistories_Edges) GetNode() *GetAllJobTemplateHistories_JobTemplateHistories_Edges_Node {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories_Edges{}
	}
	return t.Node
}

type GetAllJobTemplateHistories_JobTemplateHistories struct {
	Edges      []*GetAllJobTemplateHistories_JobTemplateHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllJobTemplateHistories_JobTemplateHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllJobTemplateHistories_JobTemplateHistories) GetEdges() []*GetAllJobTemplateHistories_JobTemplateHistories_Edges {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories{}
	}
	return t.Edges
}
func (t *GetAllJobTemplateHistories_JobTemplateHistories) GetPageInfo() *GetAllJobTemplateHistories_JobTemplateHistories_PageInfo {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllJobTemplateHistories_JobTemplateHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllJobTemplateHistories_JobTemplateHistories{}
	}
	return t.TotalCount
}

type GetJobTemplateHistories_JobTemplateHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetJobTemplateHistories_JobTemplateHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetJobTemplateHistories_JobTemplateHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetJobTemplateHistories_JobTemplateHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetJobTemplateHistories_JobTemplateHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetJobTemplateHistories_JobTemplateHistories_Edges_Node struct {
	Configuration models.JobConfiguration "json:\"configuration,omitempty\" graphql:\"configuration\""
	CreatedAt     *time.Time              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Cron          *string                 "json:\"cron,omitempty\" graphql:\"cron\""
	Description   *string                 "json:\"description,omitempty\" graphql:\"description\""
	DisplayID     string                  "json:\"displayID\" graphql:\"displayID\""
	DownloadURL   string                  "json:\"downloadURL\" graphql:\"downloadURL\""
	HistoryTime   time.Time               "json:\"historyTime\" graphql:\"historyTime\""
	ID            string                  "json:\"id\" graphql:\"id\""
	Operation     history.OpType          "json:\"operation\" graphql:\"operation\""
	OwnerID       *string                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Platform      enums.JobPlatformType   "json:\"platform\" graphql:\"platform\""
	Ref           *string                 "json:\"ref,omitempty\" graphql:\"ref\""
	SystemOwned   *bool                   "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags          []string                "json:\"tags,omitempty\" graphql:\"tags\""
	Title         string                  "json:\"title\" graphql:\"title\""
	UpdatedAt     *time.Time              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetJobTemplateHistories_JobTemplateHistories_Edges_Node) GetConfiguration() *models.JobConfiguration {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return &t.Configuration
}
func (t *GetJobTemplateHistories_JobTemplateHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetJobTemplateHistories_JobTemplateHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetJobTemplateHistories_JobTemplateHistories_Edges_Node) GetCron() *string {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.Cron
}
func (t *GetJobTemplateHistories_JobTemplateHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetJobTemplateHistories_JobTemplateHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetJobTemplateHistories_JobTemplateHistories_Edges_Node) GetDownloadURL() string {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.DownloadURL
}
func (t *GetJobTemplateHistories_JobTemplateHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetJobTemplateHistories_JobTemplateHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetJobTemplateHistories_JobTemplateHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetJobTemplateHistories_JobTemplateHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetJobTemplateHistories_JobTemplateHistories_Edges_Node) GetPlatform() *enums.JobPlatformType {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return &t.Platform
}
func (t *GetJobTemplateHistories_JobTemplateHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetJobTemplateHistories_JobTemplateHistories_Edges_Node) GetSystemOwned() *bool {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.SystemOwned
}
func (t *GetJobTemplateHistories_JobTemplateHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetJobTemplateHistories_JobTemplateHistories_Edges_Node) GetTitle() string {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.Title
}
func (t *GetJobTemplateHistories_JobTemplateHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetJobTemplateHistories_JobTemplateHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetJobTemplateHistories_JobTemplateHistories_Edges struct {
	Node *GetJobTemplateHistories_JobTemplateHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetJobTemplateHistories_JobTemplateHistories_Edges) GetNode() *GetJobTemplateHistories_JobTemplateHistories_Edges_Node {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories_Edges{}
	}
	return t.Node
}

type GetJobTemplateHistories_JobTemplateHistories struct {
	Edges      []*GetJobTemplateHistories_JobTemplateHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetJobTemplateHistories_JobTemplateHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetJobTemplateHistories_JobTemplateHistories) GetEdges() []*GetJobTemplateHistories_JobTemplateHistories_Edges {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories{}
	}
	return t.Edges
}
func (t *GetJobTemplateHistories_JobTemplateHistories) GetPageInfo() *GetJobTemplateHistories_JobTemplateHistories_PageInfo {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories{}
	}
	return &t.PageInfo
}
func (t *GetJobTemplateHistories_JobTemplateHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetJobTemplateHistories_JobTemplateHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain_MappableDomains struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	ZoneID    string     "json:\"zoneID\" graphql:\"zoneID\""
}

func (t *CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain_MappableDomains) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain_MappableDomains{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain_MappableDomains) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain_MappableDomains{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain_MappableDomains) GetID() string {
	if t == nil {
		t = &CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain_MappableDomains{}
	}
	return t.ID
}
func (t *CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain_MappableDomains) GetName() string {
	if t == nil {
		t = &CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain_MappableDomains{}
	}
	return t.Name
}
func (t *CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain_MappableDomains) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain_MappableDomains{}
	}
	return t.Tags
}
func (t *CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain_MappableDomains) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain_MappableDomains{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain_MappableDomains) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain_MappableDomains{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain_MappableDomains) GetZoneID() string {
	if t == nil {
		t = &CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain_MappableDomains{}
	}
	return t.ZoneID
}

type CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain struct {
	MappableDomains []*CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain_MappableDomains "json:\"mappableDomains,omitempty\" graphql:\"mappableDomains\""
}

func (t *CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain) GetMappableDomains() []*CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain_MappableDomains {
	if t == nil {
		t = &CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain{}
	}
	return t.MappableDomains
}

type CreateBulkMappableDomain_CreateBulkMappableDomain_MappableDomains struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	ZoneID    string     "json:\"zoneID\" graphql:\"zoneID\""
}

func (t *CreateBulkMappableDomain_CreateBulkMappableDomain_MappableDomains) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkMappableDomain_CreateBulkMappableDomain_MappableDomains{}
	}
	return t.CreatedAt
}
func (t *CreateBulkMappableDomain_CreateBulkMappableDomain_MappableDomains) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkMappableDomain_CreateBulkMappableDomain_MappableDomains{}
	}
	return t.CreatedBy
}
func (t *CreateBulkMappableDomain_CreateBulkMappableDomain_MappableDomains) GetID() string {
	if t == nil {
		t = &CreateBulkMappableDomain_CreateBulkMappableDomain_MappableDomains{}
	}
	return t.ID
}
func (t *CreateBulkMappableDomain_CreateBulkMappableDomain_MappableDomains) GetName() string {
	if t == nil {
		t = &CreateBulkMappableDomain_CreateBulkMappableDomain_MappableDomains{}
	}
	return t.Name
}
func (t *CreateBulkMappableDomain_CreateBulkMappableDomain_MappableDomains) GetTags() []string {
	if t == nil {
		t = &CreateBulkMappableDomain_CreateBulkMappableDomain_MappableDomains{}
	}
	return t.Tags
}
func (t *CreateBulkMappableDomain_CreateBulkMappableDomain_MappableDomains) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkMappableDomain_CreateBulkMappableDomain_MappableDomains{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkMappableDomain_CreateBulkMappableDomain_MappableDomains) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkMappableDomain_CreateBulkMappableDomain_MappableDomains{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkMappableDomain_CreateBulkMappableDomain_MappableDomains) GetZoneID() string {
	if t == nil {
		t = &CreateBulkMappableDomain_CreateBulkMappableDomain_MappableDomains{}
	}
	return t.ZoneID
}

type CreateBulkMappableDomain_CreateBulkMappableDomain struct {
	MappableDomains []*CreateBulkMappableDomain_CreateBulkMappableDomain_MappableDomains "json:\"mappableDomains,omitempty\" graphql:\"mappableDomains\""
}

func (t *CreateBulkMappableDomain_CreateBulkMappableDomain) GetMappableDomains() []*CreateBulkMappableDomain_CreateBulkMappableDomain_MappableDomains {
	if t == nil {
		t = &CreateBulkMappableDomain_CreateBulkMappableDomain{}
	}
	return t.MappableDomains
}

type CreateMappableDomain_CreateMappableDomain_MappableDomain struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	ZoneID    string     "json:\"zoneID\" graphql:\"zoneID\""
}

func (t *CreateMappableDomain_CreateMappableDomain_MappableDomain) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateMappableDomain_CreateMappableDomain_MappableDomain{}
	}
	return t.CreatedAt
}
func (t *CreateMappableDomain_CreateMappableDomain_MappableDomain) GetCreatedBy() *string {
	if t == nil {
		t = &CreateMappableDomain_CreateMappableDomain_MappableDomain{}
	}
	return t.CreatedBy
}
func (t *CreateMappableDomain_CreateMappableDomain_MappableDomain) GetID() string {
	if t == nil {
		t = &CreateMappableDomain_CreateMappableDomain_MappableDomain{}
	}
	return t.ID
}
func (t *CreateMappableDomain_CreateMappableDomain_MappableDomain) GetName() string {
	if t == nil {
		t = &CreateMappableDomain_CreateMappableDomain_MappableDomain{}
	}
	return t.Name
}
func (t *CreateMappableDomain_CreateMappableDomain_MappableDomain) GetTags() []string {
	if t == nil {
		t = &CreateMappableDomain_CreateMappableDomain_MappableDomain{}
	}
	return t.Tags
}
func (t *CreateMappableDomain_CreateMappableDomain_MappableDomain) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateMappableDomain_CreateMappableDomain_MappableDomain{}
	}
	return t.UpdatedAt
}
func (t *CreateMappableDomain_CreateMappableDomain_MappableDomain) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateMappableDomain_CreateMappableDomain_MappableDomain{}
	}
	return t.UpdatedBy
}
func (t *CreateMappableDomain_CreateMappableDomain_MappableDomain) GetZoneID() string {
	if t == nil {
		t = &CreateMappableDomain_CreateMappableDomain_MappableDomain{}
	}
	return t.ZoneID
}

type CreateMappableDomain_CreateMappableDomain struct {
	MappableDomain CreateMappableDomain_CreateMappableDomain_MappableDomain "json:\"mappableDomain\" graphql:\"mappableDomain\""
}

func (t *CreateMappableDomain_CreateMappableDomain) GetMappableDomain() *CreateMappableDomain_CreateMappableDomain_MappableDomain {
	if t == nil {
		t = &CreateMappableDomain_CreateMappableDomain{}
	}
	return &t.MappableDomain
}

type DeleteMappableDomain_DeleteMappableDomain struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteMappableDomain_DeleteMappableDomain) GetDeletedID() string {
	if t == nil {
		t = &DeleteMappableDomain_DeleteMappableDomain{}
	}
	return t.DeletedID
}

type GetAllMappableDomains_MappableDomains_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllMappableDomains_MappableDomains_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllMappableDomains_MappableDomains_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllMappableDomains_MappableDomains_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllMappableDomains_MappableDomains_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllMappableDomains_MappableDomains_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllMappableDomains_MappableDomains_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllMappableDomains_MappableDomains_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllMappableDomains_MappableDomains_PageInfo{}
	}
	return t.StartCursor
}

type GetAllMappableDomains_MappableDomains_Edges_Node struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	ZoneID    string     "json:\"zoneID\" graphql:\"zoneID\""
}

func (t *GetAllMappableDomains_MappableDomains_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllMappableDomains_MappableDomains_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllMappableDomains_MappableDomains_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllMappableDomains_MappableDomains_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllMappableDomains_MappableDomains_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllMappableDomains_MappableDomains_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllMappableDomains_MappableDomains_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllMappableDomains_MappableDomains_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllMappableDomains_MappableDomains_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllMappableDomains_MappableDomains_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllMappableDomains_MappableDomains_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllMappableDomains_MappableDomains_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllMappableDomains_MappableDomains_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllMappableDomains_MappableDomains_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllMappableDomains_MappableDomains_Edges_Node) GetZoneID() string {
	if t == nil {
		t = &GetAllMappableDomains_MappableDomains_Edges_Node{}
	}
	return t.ZoneID
}

type GetAllMappableDomains_MappableDomains_Edges struct {
	Node *GetAllMappableDomains_MappableDomains_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllMappableDomains_MappableDomains_Edges) GetNode() *GetAllMappableDomains_MappableDomains_Edges_Node {
	if t == nil {
		t = &GetAllMappableDomains_MappableDomains_Edges{}
	}
	return t.Node
}

type GetAllMappableDomains_MappableDomains struct {
	Edges      []*GetAllMappableDomains_MappableDomains_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllMappableDomains_MappableDomains_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                          "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllMappableDomains_MappableDomains) GetEdges() []*GetAllMappableDomains_MappableDomains_Edges {
	if t == nil {
		t = &GetAllMappableDomains_MappableDomains{}
	}
	return t.Edges
}
func (t *GetAllMappableDomains_MappableDomains) GetPageInfo() *GetAllMappableDomains_MappableDomains_PageInfo {
	if t == nil {
		t = &GetAllMappableDomains_MappableDomains{}
	}
	return &t.PageInfo
}
func (t *GetAllMappableDomains_MappableDomains) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllMappableDomains_MappableDomains{}
	}
	return t.TotalCount
}

type GetMappableDomainByID_MappableDomain struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	ZoneID    string     "json:\"zoneID\" graphql:\"zoneID\""
}

func (t *GetMappableDomainByID_MappableDomain) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetMappableDomainByID_MappableDomain{}
	}
	return t.CreatedAt
}
func (t *GetMappableDomainByID_MappableDomain) GetCreatedBy() *string {
	if t == nil {
		t = &GetMappableDomainByID_MappableDomain{}
	}
	return t.CreatedBy
}
func (t *GetMappableDomainByID_MappableDomain) GetID() string {
	if t == nil {
		t = &GetMappableDomainByID_MappableDomain{}
	}
	return t.ID
}
func (t *GetMappableDomainByID_MappableDomain) GetName() string {
	if t == nil {
		t = &GetMappableDomainByID_MappableDomain{}
	}
	return t.Name
}
func (t *GetMappableDomainByID_MappableDomain) GetTags() []string {
	if t == nil {
		t = &GetMappableDomainByID_MappableDomain{}
	}
	return t.Tags
}
func (t *GetMappableDomainByID_MappableDomain) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetMappableDomainByID_MappableDomain{}
	}
	return t.UpdatedAt
}
func (t *GetMappableDomainByID_MappableDomain) GetUpdatedBy() *string {
	if t == nil {
		t = &GetMappableDomainByID_MappableDomain{}
	}
	return t.UpdatedBy
}
func (t *GetMappableDomainByID_MappableDomain) GetZoneID() string {
	if t == nil {
		t = &GetMappableDomainByID_MappableDomain{}
	}
	return t.ZoneID
}

type GetMappableDomains_MappableDomains_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetMappableDomains_MappableDomains_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetMappableDomains_MappableDomains_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetMappableDomains_MappableDomains_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetMappableDomains_MappableDomains_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetMappableDomains_MappableDomains_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetMappableDomains_MappableDomains_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetMappableDomains_MappableDomains_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetMappableDomains_MappableDomains_PageInfo{}
	}
	return t.StartCursor
}

type GetMappableDomains_MappableDomains_Edges_Node struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	ZoneID    string     "json:\"zoneID\" graphql:\"zoneID\""
}

func (t *GetMappableDomains_MappableDomains_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetMappableDomains_MappableDomains_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetMappableDomains_MappableDomains_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetMappableDomains_MappableDomains_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetMappableDomains_MappableDomains_Edges_Node) GetID() string {
	if t == nil {
		t = &GetMappableDomains_MappableDomains_Edges_Node{}
	}
	return t.ID
}
func (t *GetMappableDomains_MappableDomains_Edges_Node) GetName() string {
	if t == nil {
		t = &GetMappableDomains_MappableDomains_Edges_Node{}
	}
	return t.Name
}
func (t *GetMappableDomains_MappableDomains_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetMappableDomains_MappableDomains_Edges_Node{}
	}
	return t.Tags
}
func (t *GetMappableDomains_MappableDomains_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetMappableDomains_MappableDomains_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetMappableDomains_MappableDomains_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetMappableDomains_MappableDomains_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetMappableDomains_MappableDomains_Edges_Node) GetZoneID() string {
	if t == nil {
		t = &GetMappableDomains_MappableDomains_Edges_Node{}
	}
	return t.ZoneID
}

type GetMappableDomains_MappableDomains_Edges struct {
	Node *GetMappableDomains_MappableDomains_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetMappableDomains_MappableDomains_Edges) GetNode() *GetMappableDomains_MappableDomains_Edges_Node {
	if t == nil {
		t = &GetMappableDomains_MappableDomains_Edges{}
	}
	return t.Node
}

type GetMappableDomains_MappableDomains struct {
	Edges      []*GetMappableDomains_MappableDomains_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetMappableDomains_MappableDomains_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                       "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetMappableDomains_MappableDomains) GetEdges() []*GetMappableDomains_MappableDomains_Edges {
	if t == nil {
		t = &GetMappableDomains_MappableDomains{}
	}
	return t.Edges
}
func (t *GetMappableDomains_MappableDomains) GetPageInfo() *GetMappableDomains_MappableDomains_PageInfo {
	if t == nil {
		t = &GetMappableDomains_MappableDomains{}
	}
	return &t.PageInfo
}
func (t *GetMappableDomains_MappableDomains) GetTotalCount() int64 {
	if t == nil {
		t = &GetMappableDomains_MappableDomains{}
	}
	return t.TotalCount
}

type UpdateMappableDomain_UpdateMappableDomain_MappableDomain struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	ZoneID    string     "json:\"zoneID\" graphql:\"zoneID\""
}

func (t *UpdateMappableDomain_UpdateMappableDomain_MappableDomain) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateMappableDomain_UpdateMappableDomain_MappableDomain{}
	}
	return t.CreatedAt
}
func (t *UpdateMappableDomain_UpdateMappableDomain_MappableDomain) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateMappableDomain_UpdateMappableDomain_MappableDomain{}
	}
	return t.CreatedBy
}
func (t *UpdateMappableDomain_UpdateMappableDomain_MappableDomain) GetID() string {
	if t == nil {
		t = &UpdateMappableDomain_UpdateMappableDomain_MappableDomain{}
	}
	return t.ID
}
func (t *UpdateMappableDomain_UpdateMappableDomain_MappableDomain) GetName() string {
	if t == nil {
		t = &UpdateMappableDomain_UpdateMappableDomain_MappableDomain{}
	}
	return t.Name
}
func (t *UpdateMappableDomain_UpdateMappableDomain_MappableDomain) GetTags() []string {
	if t == nil {
		t = &UpdateMappableDomain_UpdateMappableDomain_MappableDomain{}
	}
	return t.Tags
}
func (t *UpdateMappableDomain_UpdateMappableDomain_MappableDomain) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateMappableDomain_UpdateMappableDomain_MappableDomain{}
	}
	return t.UpdatedAt
}
func (t *UpdateMappableDomain_UpdateMappableDomain_MappableDomain) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateMappableDomain_UpdateMappableDomain_MappableDomain{}
	}
	return t.UpdatedBy
}
func (t *UpdateMappableDomain_UpdateMappableDomain_MappableDomain) GetZoneID() string {
	if t == nil {
		t = &UpdateMappableDomain_UpdateMappableDomain_MappableDomain{}
	}
	return t.ZoneID
}

type UpdateMappableDomain_UpdateMappableDomain struct {
	MappableDomain UpdateMappableDomain_UpdateMappableDomain_MappableDomain "json:\"mappableDomain\" graphql:\"mappableDomain\""
}

func (t *UpdateMappableDomain_UpdateMappableDomain) GetMappableDomain() *UpdateMappableDomain_UpdateMappableDomain_MappableDomain {
	if t == nil {
		t = &UpdateMappableDomain_UpdateMappableDomain{}
	}
	return &t.MappableDomain
}

type GetAllMappableDomainHistories_MappableDomainHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllMappableDomainHistories_MappableDomainHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllMappableDomainHistories_MappableDomainHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllMappableDomainHistories_MappableDomainHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllMappableDomainHistories_MappableDomainHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllMappableDomainHistories_MappableDomainHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllMappableDomainHistories_MappableDomainHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllMappableDomainHistories_MappableDomainHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllMappableDomainHistories_MappableDomainHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	ZoneID      string         "json:\"zoneID\" graphql:\"zoneID\""
}

func (t *GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node) GetZoneID() string {
	if t == nil {
		t = &GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node{}
	}
	return t.ZoneID
}

type GetAllMappableDomainHistories_MappableDomainHistories_Edges struct {
	Node *GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllMappableDomainHistories_MappableDomainHistories_Edges) GetNode() *GetAllMappableDomainHistories_MappableDomainHistories_Edges_Node {
	if t == nil {
		t = &GetAllMappableDomainHistories_MappableDomainHistories_Edges{}
	}
	return t.Node
}

type GetAllMappableDomainHistories_MappableDomainHistories struct {
	Edges      []*GetAllMappableDomainHistories_MappableDomainHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllMappableDomainHistories_MappableDomainHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                          "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllMappableDomainHistories_MappableDomainHistories) GetEdges() []*GetAllMappableDomainHistories_MappableDomainHistories_Edges {
	if t == nil {
		t = &GetAllMappableDomainHistories_MappableDomainHistories{}
	}
	return t.Edges
}
func (t *GetAllMappableDomainHistories_MappableDomainHistories) GetPageInfo() *GetAllMappableDomainHistories_MappableDomainHistories_PageInfo {
	if t == nil {
		t = &GetAllMappableDomainHistories_MappableDomainHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllMappableDomainHistories_MappableDomainHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllMappableDomainHistories_MappableDomainHistories{}
	}
	return t.TotalCount
}

type GetMappableDomainHistories_MappableDomainHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetMappableDomainHistories_MappableDomainHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetMappableDomainHistories_MappableDomainHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetMappableDomainHistories_MappableDomainHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetMappableDomainHistories_MappableDomainHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetMappableDomainHistories_MappableDomainHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetMappableDomainHistories_MappableDomainHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetMappableDomainHistories_MappableDomainHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetMappableDomainHistories_MappableDomainHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetMappableDomainHistories_MappableDomainHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	ZoneID      string         "json:\"zoneID\" graphql:\"zoneID\""
}

func (t *GetMappableDomainHistories_MappableDomainHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetMappableDomainHistories_MappableDomainHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetMappableDomainHistories_MappableDomainHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetMappableDomainHistories_MappableDomainHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetMappableDomainHistories_MappableDomainHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetMappableDomainHistories_MappableDomainHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetMappableDomainHistories_MappableDomainHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetMappableDomainHistories_MappableDomainHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetMappableDomainHistories_MappableDomainHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetMappableDomainHistories_MappableDomainHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetMappableDomainHistories_MappableDomainHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetMappableDomainHistories_MappableDomainHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetMappableDomainHistories_MappableDomainHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetMappableDomainHistories_MappableDomainHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetMappableDomainHistories_MappableDomainHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetMappableDomainHistories_MappableDomainHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetMappableDomainHistories_MappableDomainHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetMappableDomainHistories_MappableDomainHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetMappableDomainHistories_MappableDomainHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetMappableDomainHistories_MappableDomainHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetMappableDomainHistories_MappableDomainHistories_Edges_Node) GetZoneID() string {
	if t == nil {
		t = &GetMappableDomainHistories_MappableDomainHistories_Edges_Node{}
	}
	return t.ZoneID
}

type GetMappableDomainHistories_MappableDomainHistories_Edges struct {
	Node *GetMappableDomainHistories_MappableDomainHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetMappableDomainHistories_MappableDomainHistories_Edges) GetNode() *GetMappableDomainHistories_MappableDomainHistories_Edges_Node {
	if t == nil {
		t = &GetMappableDomainHistories_MappableDomainHistories_Edges{}
	}
	return t.Node
}

type GetMappableDomainHistories_MappableDomainHistories struct {
	Edges      []*GetMappableDomainHistories_MappableDomainHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetMappableDomainHistories_MappableDomainHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                       "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetMappableDomainHistories_MappableDomainHistories) GetEdges() []*GetMappableDomainHistories_MappableDomainHistories_Edges {
	if t == nil {
		t = &GetMappableDomainHistories_MappableDomainHistories{}
	}
	return t.Edges
}
func (t *GetMappableDomainHistories_MappableDomainHistories) GetPageInfo() *GetMappableDomainHistories_MappableDomainHistories_PageInfo {
	if t == nil {
		t = &GetMappableDomainHistories_MappableDomainHistories{}
	}
	return &t.PageInfo
}
func (t *GetMappableDomainHistories_MappableDomainHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetMappableDomainHistories_MappableDomainHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls struct {
	Confidence  *int64               "json:\"confidence,omitempty\" graphql:\"confidence\""
	CreatedAt   *time.Time           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID          string               "json:\"id\" graphql:\"id\""
	MappingType enums.MappingType    "json:\"mappingType\" graphql:\"mappingType\""
	Relation    *string              "json:\"relation,omitempty\" graphql:\"relation\""
	Source      *enums.MappingSource "json:\"source,omitempty\" graphql:\"source\""
	Tags        []string             "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls) GetConfidence() *int64 {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls{}
	}
	return t.Confidence
}
func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls) GetID() string {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls{}
	}
	return t.ID
}
func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls) GetMappingType() *enums.MappingType {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls{}
	}
	return &t.MappingType
}
func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls) GetRelation() *string {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls{}
	}
	return t.Relation
}
func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls) GetSource() *enums.MappingSource {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls{}
	}
	return t.Source
}
func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls{}
	}
	return t.Tags
}
func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVMappedControl_CreateBulkCSVMappedControl struct {
	MappedControls []*CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls "json:\"mappedControls,omitempty\" graphql:\"mappedControls\""
}

func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl) GetMappedControls() []*CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl{}
	}
	return t.MappedControls
}

type CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromControls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromControls_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromControls_Edges_Node{}
	}
	return t.ID
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromControls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromControls_Edges_Node{}
	}
	return t.RefCode
}

type CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromControls_Edges struct {
	Node *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromControls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromControls_Edges) GetNode() *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromControls_Edges_Node {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromControls_Edges{}
	}
	return t.Node
}

type CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromControls struct {
	Edges []*CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromControls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromControls) GetEdges() []*CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromControls_Edges {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromControls{}
	}
	return t.Edges
}

type CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToControls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToControls_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToControls_Edges_Node{}
	}
	return t.ID
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToControls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToControls_Edges_Node{}
	}
	return t.RefCode
}

type CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToControls_Edges struct {
	Node *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToControls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToControls_Edges) GetNode() *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToControls_Edges_Node {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToControls_Edges{}
	}
	return t.Node
}

type CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToControls struct {
	Edges []*CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToControls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToControls) GetEdges() []*CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToControls_Edges {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToControls{}
	}
	return t.Edges
}

type CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromSubcontrols_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromSubcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromSubcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromSubcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromSubcontrols_Edges_Node{}
	}
	return t.RefCode
}

type CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromSubcontrols_Edges struct {
	Node *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromSubcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromSubcontrols_Edges) GetNode() *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromSubcontrols_Edges_Node {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromSubcontrols_Edges{}
	}
	return t.Node
}

type CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromSubcontrols struct {
	Edges []*CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromSubcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromSubcontrols) GetEdges() []*CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromSubcontrols_Edges {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromSubcontrols{}
	}
	return t.Edges
}

type CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToSubcontrols_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToSubcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToSubcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToSubcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToSubcontrols_Edges_Node{}
	}
	return t.RefCode
}

type CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToSubcontrols_Edges struct {
	Node *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToSubcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToSubcontrols_Edges) GetNode() *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToSubcontrols_Edges_Node {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToSubcontrols_Edges{}
	}
	return t.Node
}

type CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToSubcontrols struct {
	Edges []*CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToSubcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToSubcontrols) GetEdges() []*CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToSubcontrols_Edges {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToSubcontrols{}
	}
	return t.Edges
}

type CreateBulkMappedControl_CreateBulkMappedControl_MappedControls struct {
	Confidence      *int64                                                                         "json:\"confidence,omitempty\" graphql:\"confidence\""
	CreatedAt       *time.Time                                                                     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                                                                        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	FromControls    CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromControls    "json:\"fromControls\" graphql:\"fromControls\""
	FromSubcontrols CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromSubcontrols "json:\"fromSubcontrols\" graphql:\"fromSubcontrols\""
	ID              string                                                                         "json:\"id\" graphql:\"id\""
	MappingType     enums.MappingType                                                              "json:\"mappingType\" graphql:\"mappingType\""
	Relation        *string                                                                        "json:\"relation,omitempty\" graphql:\"relation\""
	Source          *enums.MappingSource                                                           "json:\"source,omitempty\" graphql:\"source\""
	Tags            []string                                                                       "json:\"tags,omitempty\" graphql:\"tags\""
	ToControls      CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToControls      "json:\"toControls\" graphql:\"toControls\""
	ToSubcontrols   CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToSubcontrols   "json:\"toSubcontrols\" graphql:\"toSubcontrols\""
	UpdatedAt       *time.Time                                                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                                                                        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetConfidence() *int64 {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return t.Confidence
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return t.CreatedAt
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return t.CreatedBy
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetFromControls() *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromControls {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return &t.FromControls
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetFromSubcontrols() *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_FromSubcontrols {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return &t.FromSubcontrols
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetID() string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return t.ID
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetMappingType() *enums.MappingType {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return &t.MappingType
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetRelation() *string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return t.Relation
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetSource() *enums.MappingSource {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return t.Source
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetTags() []string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return t.Tags
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetToControls() *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToControls {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return &t.ToControls
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetToSubcontrols() *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_ToSubcontrols {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return &t.ToSubcontrols
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return t.UpdatedBy
}

type CreateBulkMappedControl_CreateBulkMappedControl struct {
	MappedControls []*CreateBulkMappedControl_CreateBulkMappedControl_MappedControls "json:\"mappedControls,omitempty\" graphql:\"mappedControls\""
}

func (t *CreateBulkMappedControl_CreateBulkMappedControl) GetMappedControls() []*CreateBulkMappedControl_CreateBulkMappedControl_MappedControls {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl{}
	}
	return t.MappedControls
}

type CreateMappedControl_CreateMappedControl_MappedControl_FromControls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateMappedControl_CreateMappedControl_MappedControl_FromControls_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_FromControls_Edges_Node{}
	}
	return t.ID
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl_FromControls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_FromControls_Edges_Node{}
	}
	return t.RefCode
}

type CreateMappedControl_CreateMappedControl_MappedControl_FromControls_Edges struct {
	Node *CreateMappedControl_CreateMappedControl_MappedControl_FromControls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateMappedControl_CreateMappedControl_MappedControl_FromControls_Edges) GetNode() *CreateMappedControl_CreateMappedControl_MappedControl_FromControls_Edges_Node {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_FromControls_Edges{}
	}
	return t.Node
}

type CreateMappedControl_CreateMappedControl_MappedControl_FromControls struct {
	Edges []*CreateMappedControl_CreateMappedControl_MappedControl_FromControls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateMappedControl_CreateMappedControl_MappedControl_FromControls) GetEdges() []*CreateMappedControl_CreateMappedControl_MappedControl_FromControls_Edges {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_FromControls{}
	}
	return t.Edges
}

type CreateMappedControl_CreateMappedControl_MappedControl_ToControls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateMappedControl_CreateMappedControl_MappedControl_ToControls_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_ToControls_Edges_Node{}
	}
	return t.ID
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl_ToControls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_ToControls_Edges_Node{}
	}
	return t.RefCode
}

type CreateMappedControl_CreateMappedControl_MappedControl_ToControls_Edges struct {
	Node *CreateMappedControl_CreateMappedControl_MappedControl_ToControls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateMappedControl_CreateMappedControl_MappedControl_ToControls_Edges) GetNode() *CreateMappedControl_CreateMappedControl_MappedControl_ToControls_Edges_Node {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_ToControls_Edges{}
	}
	return t.Node
}

type CreateMappedControl_CreateMappedControl_MappedControl_ToControls struct {
	Edges []*CreateMappedControl_CreateMappedControl_MappedControl_ToControls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateMappedControl_CreateMappedControl_MappedControl_ToControls) GetEdges() []*CreateMappedControl_CreateMappedControl_MappedControl_ToControls_Edges {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_ToControls{}
	}
	return t.Edges
}

type CreateMappedControl_CreateMappedControl_MappedControl_FromSubcontrols_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateMappedControl_CreateMappedControl_MappedControl_FromSubcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_FromSubcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl_FromSubcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_FromSubcontrols_Edges_Node{}
	}
	return t.RefCode
}

type CreateMappedControl_CreateMappedControl_MappedControl_FromSubcontrols_Edges struct {
	Node *CreateMappedControl_CreateMappedControl_MappedControl_FromSubcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateMappedControl_CreateMappedControl_MappedControl_FromSubcontrols_Edges) GetNode() *CreateMappedControl_CreateMappedControl_MappedControl_FromSubcontrols_Edges_Node {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_FromSubcontrols_Edges{}
	}
	return t.Node
}

type CreateMappedControl_CreateMappedControl_MappedControl_FromSubcontrols struct {
	Edges []*CreateMappedControl_CreateMappedControl_MappedControl_FromSubcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateMappedControl_CreateMappedControl_MappedControl_FromSubcontrols) GetEdges() []*CreateMappedControl_CreateMappedControl_MappedControl_FromSubcontrols_Edges {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_FromSubcontrols{}
	}
	return t.Edges
}

type CreateMappedControl_CreateMappedControl_MappedControl_ToSubcontrols_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateMappedControl_CreateMappedControl_MappedControl_ToSubcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_ToSubcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl_ToSubcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_ToSubcontrols_Edges_Node{}
	}
	return t.RefCode
}

type CreateMappedControl_CreateMappedControl_MappedControl_ToSubcontrols_Edges struct {
	Node *CreateMappedControl_CreateMappedControl_MappedControl_ToSubcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateMappedControl_CreateMappedControl_MappedControl_ToSubcontrols_Edges) GetNode() *CreateMappedControl_CreateMappedControl_MappedControl_ToSubcontrols_Edges_Node {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_ToSubcontrols_Edges{}
	}
	return t.Node
}

type CreateMappedControl_CreateMappedControl_MappedControl_ToSubcontrols struct {
	Edges []*CreateMappedControl_CreateMappedControl_MappedControl_ToSubcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateMappedControl_CreateMappedControl_MappedControl_ToSubcontrols) GetEdges() []*CreateMappedControl_CreateMappedControl_MappedControl_ToSubcontrols_Edges {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_ToSubcontrols{}
	}
	return t.Edges
}

type CreateMappedControl_CreateMappedControl_MappedControl struct {
	Confidence      *int64                                                                "json:\"confidence,omitempty\" graphql:\"confidence\""
	CreatedAt       *time.Time                                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                                                               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	FromControls    CreateMappedControl_CreateMappedControl_MappedControl_FromControls    "json:\"fromControls\" graphql:\"fromControls\""
	FromSubcontrols CreateMappedControl_CreateMappedControl_MappedControl_FromSubcontrols "json:\"fromSubcontrols\" graphql:\"fromSubcontrols\""
	ID              string                                                                "json:\"id\" graphql:\"id\""
	MappingType     enums.MappingType                                                     "json:\"mappingType\" graphql:\"mappingType\""
	Relation        *string                                                               "json:\"relation,omitempty\" graphql:\"relation\""
	Source          *enums.MappingSource                                                  "json:\"source,omitempty\" graphql:\"source\""
	Tags            []string                                                              "json:\"tags,omitempty\" graphql:\"tags\""
	ToControls      CreateMappedControl_CreateMappedControl_MappedControl_ToControls      "json:\"toControls\" graphql:\"toControls\""
	ToSubcontrols   CreateMappedControl_CreateMappedControl_MappedControl_ToSubcontrols   "json:\"toSubcontrols\" graphql:\"toSubcontrols\""
	UpdatedAt       *time.Time                                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                                                               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetConfidence() *int64 {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return t.Confidence
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return t.CreatedAt
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetCreatedBy() *string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return t.CreatedBy
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetFromControls() *CreateMappedControl_CreateMappedControl_MappedControl_FromControls {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return &t.FromControls
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetFromSubcontrols() *CreateMappedControl_CreateMappedControl_MappedControl_FromSubcontrols {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return &t.FromSubcontrols
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetID() string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return t.ID
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetMappingType() *enums.MappingType {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return &t.MappingType
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetRelation() *string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return t.Relation
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetSource() *enums.MappingSource {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return t.Source
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetTags() []string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return t.Tags
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetToControls() *CreateMappedControl_CreateMappedControl_MappedControl_ToControls {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return &t.ToControls
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetToSubcontrols() *CreateMappedControl_CreateMappedControl_MappedControl_ToSubcontrols {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return &t.ToSubcontrols
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return t.UpdatedAt
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return t.UpdatedBy
}

type CreateMappedControl_CreateMappedControl struct {
	MappedControl CreateMappedControl_CreateMappedControl_MappedControl "json:\"mappedControl\" graphql:\"mappedControl\""
}

func (t *CreateMappedControl_CreateMappedControl) GetMappedControl() *CreateMappedControl_CreateMappedControl_MappedControl {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl{}
	}
	return &t.MappedControl
}

type DeleteMappedControl_DeleteMappedControl struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteMappedControl_DeleteMappedControl) GetDeletedID() string {
	if t == nil {
		t = &DeleteMappedControl_DeleteMappedControl{}
	}
	return t.DeletedID
}

type GetAllMappedControls_MappedControls_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllMappedControls_MappedControls_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllMappedControls_MappedControls_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllMappedControls_MappedControls_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllMappedControls_MappedControls_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_PageInfo{}
	}
	return t.StartCursor
}

type GetAllMappedControls_MappedControls_Edges_Node_FromControls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetAllMappedControls_MappedControls_Edges_Node_FromControls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_FromControls_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllMappedControls_MappedControls_Edges_Node_FromControls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_FromControls_Edges_Node{}
	}
	return t.RefCode
}

type GetAllMappedControls_MappedControls_Edges_Node_FromControls_Edges struct {
	Node *GetAllMappedControls_MappedControls_Edges_Node_FromControls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllMappedControls_MappedControls_Edges_Node_FromControls_Edges) GetNode() *GetAllMappedControls_MappedControls_Edges_Node_FromControls_Edges_Node {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_FromControls_Edges{}
	}
	return t.Node
}

type GetAllMappedControls_MappedControls_Edges_Node_FromControls struct {
	Edges []*GetAllMappedControls_MappedControls_Edges_Node_FromControls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllMappedControls_MappedControls_Edges_Node_FromControls) GetEdges() []*GetAllMappedControls_MappedControls_Edges_Node_FromControls_Edges {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_FromControls{}
	}
	return t.Edges
}

type GetAllMappedControls_MappedControls_Edges_Node_ToControls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetAllMappedControls_MappedControls_Edges_Node_ToControls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_ToControls_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllMappedControls_MappedControls_Edges_Node_ToControls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_ToControls_Edges_Node{}
	}
	return t.RefCode
}

type GetAllMappedControls_MappedControls_Edges_Node_ToControls_Edges struct {
	Node *GetAllMappedControls_MappedControls_Edges_Node_ToControls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllMappedControls_MappedControls_Edges_Node_ToControls_Edges) GetNode() *GetAllMappedControls_MappedControls_Edges_Node_ToControls_Edges_Node {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_ToControls_Edges{}
	}
	return t.Node
}

type GetAllMappedControls_MappedControls_Edges_Node_ToControls struct {
	Edges []*GetAllMappedControls_MappedControls_Edges_Node_ToControls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllMappedControls_MappedControls_Edges_Node_ToControls) GetEdges() []*GetAllMappedControls_MappedControls_Edges_Node_ToControls_Edges {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_ToControls{}
	}
	return t.Edges
}

type GetAllMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetAllMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges_Node{}
	}
	return t.RefCode
}

type GetAllMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges struct {
	Node *GetAllMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges) GetNode() *GetAllMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges_Node {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges{}
	}
	return t.Node
}

type GetAllMappedControls_MappedControls_Edges_Node_FromSubcontrols struct {
	Edges []*GetAllMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllMappedControls_MappedControls_Edges_Node_FromSubcontrols) GetEdges() []*GetAllMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_FromSubcontrols{}
	}
	return t.Edges
}

type GetAllMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetAllMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges_Node{}
	}
	return t.RefCode
}

type GetAllMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges struct {
	Node *GetAllMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges) GetNode() *GetAllMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges_Node {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges{}
	}
	return t.Node
}

type GetAllMappedControls_MappedControls_Edges_Node_ToSubcontrols struct {
	Edges []*GetAllMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllMappedControls_MappedControls_Edges_Node_ToSubcontrols) GetEdges() []*GetAllMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_ToSubcontrols{}
	}
	return t.Edges
}

type GetAllMappedControls_MappedControls_Edges_Node struct {
	Confidence      *int64                                                         "json:\"confidence,omitempty\" graphql:\"confidence\""
	CreatedAt       *time.Time                                                     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                                                        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	FromControls    GetAllMappedControls_MappedControls_Edges_Node_FromControls    "json:\"fromControls\" graphql:\"fromControls\""
	FromSubcontrols GetAllMappedControls_MappedControls_Edges_Node_FromSubcontrols "json:\"fromSubcontrols\" graphql:\"fromSubcontrols\""
	ID              string                                                         "json:\"id\" graphql:\"id\""
	MappingType     enums.MappingType                                              "json:\"mappingType\" graphql:\"mappingType\""
	Relation        *string                                                        "json:\"relation,omitempty\" graphql:\"relation\""
	Source          *enums.MappingSource                                           "json:\"source,omitempty\" graphql:\"source\""
	Tags            []string                                                       "json:\"tags,omitempty\" graphql:\"tags\""
	ToControls      GetAllMappedControls_MappedControls_Edges_Node_ToControls      "json:\"toControls\" graphql:\"toControls\""
	ToSubcontrols   GetAllMappedControls_MappedControls_Edges_Node_ToSubcontrols   "json:\"toSubcontrols\" graphql:\"toSubcontrols\""
	UpdatedAt       *time.Time                                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                                                        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllMappedControls_MappedControls_Edges_Node) GetConfidence() *int64 {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return t.Confidence
}
func (t *GetAllMappedControls_MappedControls_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllMappedControls_MappedControls_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllMappedControls_MappedControls_Edges_Node) GetFromControls() *GetAllMappedControls_MappedControls_Edges_Node_FromControls {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return &t.FromControls
}
func (t *GetAllMappedControls_MappedControls_Edges_Node) GetFromSubcontrols() *GetAllMappedControls_MappedControls_Edges_Node_FromSubcontrols {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return &t.FromSubcontrols
}
func (t *GetAllMappedControls_MappedControls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllMappedControls_MappedControls_Edges_Node) GetMappingType() *enums.MappingType {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return &t.MappingType
}
func (t *GetAllMappedControls_MappedControls_Edges_Node) GetRelation() *string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return t.Relation
}
func (t *GetAllMappedControls_MappedControls_Edges_Node) GetSource() *enums.MappingSource {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllMappedControls_MappedControls_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllMappedControls_MappedControls_Edges_Node) GetToControls() *GetAllMappedControls_MappedControls_Edges_Node_ToControls {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return &t.ToControls
}
func (t *GetAllMappedControls_MappedControls_Edges_Node) GetToSubcontrols() *GetAllMappedControls_MappedControls_Edges_Node_ToSubcontrols {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return &t.ToSubcontrols
}
func (t *GetAllMappedControls_MappedControls_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllMappedControls_MappedControls_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllMappedControls_MappedControls_Edges struct {
	Node *GetAllMappedControls_MappedControls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllMappedControls_MappedControls_Edges) GetNode() *GetAllMappedControls_MappedControls_Edges_Node {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges{}
	}
	return t.Node
}

type GetAllMappedControls_MappedControls struct {
	Edges      []*GetAllMappedControls_MappedControls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllMappedControls_MappedControls_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                        "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllMappedControls_MappedControls) GetEdges() []*GetAllMappedControls_MappedControls_Edges {
	if t == nil {
		t = &GetAllMappedControls_MappedControls{}
	}
	return t.Edges
}
func (t *GetAllMappedControls_MappedControls) GetPageInfo() *GetAllMappedControls_MappedControls_PageInfo {
	if t == nil {
		t = &GetAllMappedControls_MappedControls{}
	}
	return &t.PageInfo
}
func (t *GetAllMappedControls_MappedControls) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllMappedControls_MappedControls{}
	}
	return t.TotalCount
}

type GetMappedControlByID_MappedControl_FromControls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetMappedControlByID_MappedControl_FromControls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_FromControls_Edges_Node{}
	}
	return t.ID
}
func (t *GetMappedControlByID_MappedControl_FromControls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_FromControls_Edges_Node{}
	}
	return t.RefCode
}

type GetMappedControlByID_MappedControl_FromControls_Edges struct {
	Node *GetMappedControlByID_MappedControl_FromControls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetMappedControlByID_MappedControl_FromControls_Edges) GetNode() *GetMappedControlByID_MappedControl_FromControls_Edges_Node {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_FromControls_Edges{}
	}
	return t.Node
}

type GetMappedControlByID_MappedControl_FromControls struct {
	Edges []*GetMappedControlByID_MappedControl_FromControls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetMappedControlByID_MappedControl_FromControls) GetEdges() []*GetMappedControlByID_MappedControl_FromControls_Edges {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_FromControls{}
	}
	return t.Edges
}

type GetMappedControlByID_MappedControl_ToControls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetMappedControlByID_MappedControl_ToControls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_ToControls_Edges_Node{}
	}
	return t.ID
}
func (t *GetMappedControlByID_MappedControl_ToControls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_ToControls_Edges_Node{}
	}
	return t.RefCode
}

type GetMappedControlByID_MappedControl_ToControls_Edges struct {
	Node *GetMappedControlByID_MappedControl_ToControls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetMappedControlByID_MappedControl_ToControls_Edges) GetNode() *GetMappedControlByID_MappedControl_ToControls_Edges_Node {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_ToControls_Edges{}
	}
	return t.Node
}

type GetMappedControlByID_MappedControl_ToControls struct {
	Edges []*GetMappedControlByID_MappedControl_ToControls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetMappedControlByID_MappedControl_ToControls) GetEdges() []*GetMappedControlByID_MappedControl_ToControls_Edges {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_ToControls{}
	}
	return t.Edges
}

type GetMappedControlByID_MappedControl_FromSubcontrols_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetMappedControlByID_MappedControl_FromSubcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_FromSubcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GetMappedControlByID_MappedControl_FromSubcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_FromSubcontrols_Edges_Node{}
	}
	return t.RefCode
}

type GetMappedControlByID_MappedControl_FromSubcontrols_Edges struct {
	Node *GetMappedControlByID_MappedControl_FromSubcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetMappedControlByID_MappedControl_FromSubcontrols_Edges) GetNode() *GetMappedControlByID_MappedControl_FromSubcontrols_Edges_Node {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_FromSubcontrols_Edges{}
	}
	return t.Node
}

type GetMappedControlByID_MappedControl_FromSubcontrols struct {
	Edges []*GetMappedControlByID_MappedControl_FromSubcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetMappedControlByID_MappedControl_FromSubcontrols) GetEdges() []*GetMappedControlByID_MappedControl_FromSubcontrols_Edges {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_FromSubcontrols{}
	}
	return t.Edges
}

type GetMappedControlByID_MappedControl_ToSubcontrols_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetMappedControlByID_MappedControl_ToSubcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_ToSubcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GetMappedControlByID_MappedControl_ToSubcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_ToSubcontrols_Edges_Node{}
	}
	return t.RefCode
}

type GetMappedControlByID_MappedControl_ToSubcontrols_Edges struct {
	Node *GetMappedControlByID_MappedControl_ToSubcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetMappedControlByID_MappedControl_ToSubcontrols_Edges) GetNode() *GetMappedControlByID_MappedControl_ToSubcontrols_Edges_Node {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_ToSubcontrols_Edges{}
	}
	return t.Node
}

type GetMappedControlByID_MappedControl_ToSubcontrols struct {
	Edges []*GetMappedControlByID_MappedControl_ToSubcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetMappedControlByID_MappedControl_ToSubcontrols) GetEdges() []*GetMappedControlByID_MappedControl_ToSubcontrols_Edges {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_ToSubcontrols{}
	}
	return t.Edges
}

type GetMappedControlByID_MappedControl struct {
	Confidence      *int64                                             "json:\"confidence,omitempty\" graphql:\"confidence\""
	CreatedAt       *time.Time                                         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                                            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	FromControls    GetMappedControlByID_MappedControl_FromControls    "json:\"fromControls\" graphql:\"fromControls\""
	FromSubcontrols GetMappedControlByID_MappedControl_FromSubcontrols "json:\"fromSubcontrols\" graphql:\"fromSubcontrols\""
	ID              string                                             "json:\"id\" graphql:\"id\""
	MappingType     enums.MappingType                                  "json:\"mappingType\" graphql:\"mappingType\""
	Relation        *string                                            "json:\"relation,omitempty\" graphql:\"relation\""
	Source          *enums.MappingSource                               "json:\"source,omitempty\" graphql:\"source\""
	Tags            []string                                           "json:\"tags,omitempty\" graphql:\"tags\""
	ToControls      GetMappedControlByID_MappedControl_ToControls      "json:\"toControls\" graphql:\"toControls\""
	ToSubcontrols   GetMappedControlByID_MappedControl_ToSubcontrols   "json:\"toSubcontrols\" graphql:\"toSubcontrols\""
	UpdatedAt       *time.Time                                         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                                            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetMappedControlByID_MappedControl) GetConfidence() *int64 {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return t.Confidence
}
func (t *GetMappedControlByID_MappedControl) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return t.CreatedAt
}
func (t *GetMappedControlByID_MappedControl) GetCreatedBy() *string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return t.CreatedBy
}
func (t *GetMappedControlByID_MappedControl) GetFromControls() *GetMappedControlByID_MappedControl_FromControls {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return &t.FromControls
}
func (t *GetMappedControlByID_MappedControl) GetFromSubcontrols() *GetMappedControlByID_MappedControl_FromSubcontrols {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return &t.FromSubcontrols
}
func (t *GetMappedControlByID_MappedControl) GetID() string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return t.ID
}
func (t *GetMappedControlByID_MappedControl) GetMappingType() *enums.MappingType {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return &t.MappingType
}
func (t *GetMappedControlByID_MappedControl) GetRelation() *string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return t.Relation
}
func (t *GetMappedControlByID_MappedControl) GetSource() *enums.MappingSource {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return t.Source
}
func (t *GetMappedControlByID_MappedControl) GetTags() []string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return t.Tags
}
func (t *GetMappedControlByID_MappedControl) GetToControls() *GetMappedControlByID_MappedControl_ToControls {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return &t.ToControls
}
func (t *GetMappedControlByID_MappedControl) GetToSubcontrols() *GetMappedControlByID_MappedControl_ToSubcontrols {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return &t.ToSubcontrols
}
func (t *GetMappedControlByID_MappedControl) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return t.UpdatedAt
}
func (t *GetMappedControlByID_MappedControl) GetUpdatedBy() *string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return t.UpdatedBy
}

type GetMappedControls_MappedControls_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetMappedControls_MappedControls_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetMappedControls_MappedControls_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetMappedControls_MappedControls_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetMappedControls_MappedControls_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetMappedControls_MappedControls_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetMappedControls_MappedControls_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetMappedControls_MappedControls_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetMappedControls_MappedControls_PageInfo{}
	}
	return t.StartCursor
}

type GetMappedControls_MappedControls_Edges_Node_FromControls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetMappedControls_MappedControls_Edges_Node_FromControls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_FromControls_Edges_Node{}
	}
	return t.ID
}
func (t *GetMappedControls_MappedControls_Edges_Node_FromControls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_FromControls_Edges_Node{}
	}
	return t.RefCode
}

type GetMappedControls_MappedControls_Edges_Node_FromControls_Edges struct {
	Node *GetMappedControls_MappedControls_Edges_Node_FromControls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetMappedControls_MappedControls_Edges_Node_FromControls_Edges) GetNode() *GetMappedControls_MappedControls_Edges_Node_FromControls_Edges_Node {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_FromControls_Edges{}
	}
	return t.Node
}

type GetMappedControls_MappedControls_Edges_Node_FromControls struct {
	Edges []*GetMappedControls_MappedControls_Edges_Node_FromControls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetMappedControls_MappedControls_Edges_Node_FromControls) GetEdges() []*GetMappedControls_MappedControls_Edges_Node_FromControls_Edges {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_FromControls{}
	}
	return t.Edges
}

type GetMappedControls_MappedControls_Edges_Node_ToControls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetMappedControls_MappedControls_Edges_Node_ToControls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_ToControls_Edges_Node{}
	}
	return t.ID
}
func (t *GetMappedControls_MappedControls_Edges_Node_ToControls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_ToControls_Edges_Node{}
	}
	return t.RefCode
}

type GetMappedControls_MappedControls_Edges_Node_ToControls_Edges struct {
	Node *GetMappedControls_MappedControls_Edges_Node_ToControls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetMappedControls_MappedControls_Edges_Node_ToControls_Edges) GetNode() *GetMappedControls_MappedControls_Edges_Node_ToControls_Edges_Node {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_ToControls_Edges{}
	}
	return t.Node
}

type GetMappedControls_MappedControls_Edges_Node_ToControls struct {
	Edges []*GetMappedControls_MappedControls_Edges_Node_ToControls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetMappedControls_MappedControls_Edges_Node_ToControls) GetEdges() []*GetMappedControls_MappedControls_Edges_Node_ToControls_Edges {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_ToControls{}
	}
	return t.Edges
}

type GetMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GetMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges_Node{}
	}
	return t.RefCode
}

type GetMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges struct {
	Node *GetMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges) GetNode() *GetMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges_Node {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges{}
	}
	return t.Node
}

type GetMappedControls_MappedControls_Edges_Node_FromSubcontrols struct {
	Edges []*GetMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetMappedControls_MappedControls_Edges_Node_FromSubcontrols) GetEdges() []*GetMappedControls_MappedControls_Edges_Node_FromSubcontrols_Edges {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_FromSubcontrols{}
	}
	return t.Edges
}

type GetMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GetMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges_Node{}
	}
	return t.RefCode
}

type GetMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges struct {
	Node *GetMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges) GetNode() *GetMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges_Node {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges{}
	}
	return t.Node
}

type GetMappedControls_MappedControls_Edges_Node_ToSubcontrols struct {
	Edges []*GetMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetMappedControls_MappedControls_Edges_Node_ToSubcontrols) GetEdges() []*GetMappedControls_MappedControls_Edges_Node_ToSubcontrols_Edges {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_ToSubcontrols{}
	}
	return t.Edges
}

type GetMappedControls_MappedControls_Edges_Node struct {
	Confidence      *int64                                                      "json:\"confidence,omitempty\" graphql:\"confidence\""
	CreatedAt       *time.Time                                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	FromControls    GetMappedControls_MappedControls_Edges_Node_FromControls    "json:\"fromControls\" graphql:\"fromControls\""
	FromSubcontrols GetMappedControls_MappedControls_Edges_Node_FromSubcontrols "json:\"fromSubcontrols\" graphql:\"fromSubcontrols\""
	ID              string                                                      "json:\"id\" graphql:\"id\""
	MappingType     enums.MappingType                                           "json:\"mappingType\" graphql:\"mappingType\""
	Relation        *string                                                     "json:\"relation,omitempty\" graphql:\"relation\""
	Source          *enums.MappingSource                                        "json:\"source,omitempty\" graphql:\"source\""
	Tags            []string                                                    "json:\"tags,omitempty\" graphql:\"tags\""
	ToControls      GetMappedControls_MappedControls_Edges_Node_ToControls      "json:\"toControls\" graphql:\"toControls\""
	ToSubcontrols   GetMappedControls_MappedControls_Edges_Node_ToSubcontrols   "json:\"toSubcontrols\" graphql:\"toSubcontrols\""
	UpdatedAt       *time.Time                                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetMappedControls_MappedControls_Edges_Node) GetConfidence() *int64 {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return t.Confidence
}
func (t *GetMappedControls_MappedControls_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetMappedControls_MappedControls_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetMappedControls_MappedControls_Edges_Node) GetFromControls() *GetMappedControls_MappedControls_Edges_Node_FromControls {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return &t.FromControls
}
func (t *GetMappedControls_MappedControls_Edges_Node) GetFromSubcontrols() *GetMappedControls_MappedControls_Edges_Node_FromSubcontrols {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return &t.FromSubcontrols
}
func (t *GetMappedControls_MappedControls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return t.ID
}
func (t *GetMappedControls_MappedControls_Edges_Node) GetMappingType() *enums.MappingType {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return &t.MappingType
}
func (t *GetMappedControls_MappedControls_Edges_Node) GetRelation() *string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return t.Relation
}
func (t *GetMappedControls_MappedControls_Edges_Node) GetSource() *enums.MappingSource {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return t.Source
}
func (t *GetMappedControls_MappedControls_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return t.Tags
}
func (t *GetMappedControls_MappedControls_Edges_Node) GetToControls() *GetMappedControls_MappedControls_Edges_Node_ToControls {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return &t.ToControls
}
func (t *GetMappedControls_MappedControls_Edges_Node) GetToSubcontrols() *GetMappedControls_MappedControls_Edges_Node_ToSubcontrols {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return &t.ToSubcontrols
}
func (t *GetMappedControls_MappedControls_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetMappedControls_MappedControls_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetMappedControls_MappedControls_Edges struct {
	Node *GetMappedControls_MappedControls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetMappedControls_MappedControls_Edges) GetNode() *GetMappedControls_MappedControls_Edges_Node {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges{}
	}
	return t.Node
}

type GetMappedControls_MappedControls struct {
	Edges      []*GetMappedControls_MappedControls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetMappedControls_MappedControls_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetMappedControls_MappedControls) GetEdges() []*GetMappedControls_MappedControls_Edges {
	if t == nil {
		t = &GetMappedControls_MappedControls{}
	}
	return t.Edges
}
func (t *GetMappedControls_MappedControls) GetPageInfo() *GetMappedControls_MappedControls_PageInfo {
	if t == nil {
		t = &GetMappedControls_MappedControls{}
	}
	return &t.PageInfo
}
func (t *GetMappedControls_MappedControls) GetTotalCount() int64 {
	if t == nil {
		t = &GetMappedControls_MappedControls{}
	}
	return t.TotalCount
}

type UpdateMappedControl_UpdateMappedControl_MappedControl_FromControls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_FromControls_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_FromControls_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_FromControls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_FromControls_Edges_Node{}
	}
	return t.RefCode
}

type UpdateMappedControl_UpdateMappedControl_MappedControl_FromControls_Edges struct {
	Node *UpdateMappedControl_UpdateMappedControl_MappedControl_FromControls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_FromControls_Edges) GetNode() *UpdateMappedControl_UpdateMappedControl_MappedControl_FromControls_Edges_Node {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_FromControls_Edges{}
	}
	return t.Node
}

type UpdateMappedControl_UpdateMappedControl_MappedControl_FromControls struct {
	Edges []*UpdateMappedControl_UpdateMappedControl_MappedControl_FromControls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_FromControls) GetEdges() []*UpdateMappedControl_UpdateMappedControl_MappedControl_FromControls_Edges {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_FromControls{}
	}
	return t.Edges
}

type UpdateMappedControl_UpdateMappedControl_MappedControl_ToControls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_ToControls_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_ToControls_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_ToControls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_ToControls_Edges_Node{}
	}
	return t.RefCode
}

type UpdateMappedControl_UpdateMappedControl_MappedControl_ToControls_Edges struct {
	Node *UpdateMappedControl_UpdateMappedControl_MappedControl_ToControls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_ToControls_Edges) GetNode() *UpdateMappedControl_UpdateMappedControl_MappedControl_ToControls_Edges_Node {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_ToControls_Edges{}
	}
	return t.Node
}

type UpdateMappedControl_UpdateMappedControl_MappedControl_ToControls struct {
	Edges []*UpdateMappedControl_UpdateMappedControl_MappedControl_ToControls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_ToControls) GetEdges() []*UpdateMappedControl_UpdateMappedControl_MappedControl_ToControls_Edges {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_ToControls{}
	}
	return t.Edges
}

type UpdateMappedControl_UpdateMappedControl_MappedControl_FromSubcontrols_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_FromSubcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_FromSubcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_FromSubcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_FromSubcontrols_Edges_Node{}
	}
	return t.RefCode
}

type UpdateMappedControl_UpdateMappedControl_MappedControl_FromSubcontrols_Edges struct {
	Node *UpdateMappedControl_UpdateMappedControl_MappedControl_FromSubcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_FromSubcontrols_Edges) GetNode() *UpdateMappedControl_UpdateMappedControl_MappedControl_FromSubcontrols_Edges_Node {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_FromSubcontrols_Edges{}
	}
	return t.Node
}

type UpdateMappedControl_UpdateMappedControl_MappedControl_FromSubcontrols struct {
	Edges []*UpdateMappedControl_UpdateMappedControl_MappedControl_FromSubcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_FromSubcontrols) GetEdges() []*UpdateMappedControl_UpdateMappedControl_MappedControl_FromSubcontrols_Edges {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_FromSubcontrols{}
	}
	return t.Edges
}

type UpdateMappedControl_UpdateMappedControl_MappedControl_ToSubcontrols_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_ToSubcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_ToSubcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_ToSubcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_ToSubcontrols_Edges_Node{}
	}
	return t.RefCode
}

type UpdateMappedControl_UpdateMappedControl_MappedControl_ToSubcontrols_Edges struct {
	Node *UpdateMappedControl_UpdateMappedControl_MappedControl_ToSubcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_ToSubcontrols_Edges) GetNode() *UpdateMappedControl_UpdateMappedControl_MappedControl_ToSubcontrols_Edges_Node {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_ToSubcontrols_Edges{}
	}
	return t.Node
}

type UpdateMappedControl_UpdateMappedControl_MappedControl_ToSubcontrols struct {
	Edges []*UpdateMappedControl_UpdateMappedControl_MappedControl_ToSubcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_ToSubcontrols) GetEdges() []*UpdateMappedControl_UpdateMappedControl_MappedControl_ToSubcontrols_Edges {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_ToSubcontrols{}
	}
	return t.Edges
}

type UpdateMappedControl_UpdateMappedControl_MappedControl struct {
	Confidence      *int64                                                                "json:\"confidence,omitempty\" graphql:\"confidence\""
	CreatedAt       *time.Time                                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                                                               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	FromControls    UpdateMappedControl_UpdateMappedControl_MappedControl_FromControls    "json:\"fromControls\" graphql:\"fromControls\""
	FromSubcontrols UpdateMappedControl_UpdateMappedControl_MappedControl_FromSubcontrols "json:\"fromSubcontrols\" graphql:\"fromSubcontrols\""
	ID              string                                                                "json:\"id\" graphql:\"id\""
	MappingType     enums.MappingType                                                     "json:\"mappingType\" graphql:\"mappingType\""
	Relation        *string                                                               "json:\"relation,omitempty\" graphql:\"relation\""
	Source          *enums.MappingSource                                                  "json:\"source,omitempty\" graphql:\"source\""
	Tags            []string                                                              "json:\"tags,omitempty\" graphql:\"tags\""
	ToControls      UpdateMappedControl_UpdateMappedControl_MappedControl_ToControls      "json:\"toControls\" graphql:\"toControls\""
	ToSubcontrols   UpdateMappedControl_UpdateMappedControl_MappedControl_ToSubcontrols   "json:\"toSubcontrols\" graphql:\"toSubcontrols\""
	UpdatedAt       *time.Time                                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                                                               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetConfidence() *int64 {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return t.Confidence
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return t.CreatedAt
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return t.CreatedBy
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetFromControls() *UpdateMappedControl_UpdateMappedControl_MappedControl_FromControls {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return &t.FromControls
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetFromSubcontrols() *UpdateMappedControl_UpdateMappedControl_MappedControl_FromSubcontrols {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return &t.FromSubcontrols
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetID() string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return t.ID
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetMappingType() *enums.MappingType {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return &t.MappingType
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetRelation() *string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return t.Relation
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetSource() *enums.MappingSource {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return t.Source
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetTags() []string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return t.Tags
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetToControls() *UpdateMappedControl_UpdateMappedControl_MappedControl_ToControls {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return &t.ToControls
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetToSubcontrols() *UpdateMappedControl_UpdateMappedControl_MappedControl_ToSubcontrols {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return &t.ToSubcontrols
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return t.UpdatedAt
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return t.UpdatedBy
}

type UpdateMappedControl_UpdateMappedControl struct {
	MappedControl UpdateMappedControl_UpdateMappedControl_MappedControl "json:\"mappedControl\" graphql:\"mappedControl\""
}

func (t *UpdateMappedControl_UpdateMappedControl) GetMappedControl() *UpdateMappedControl_UpdateMappedControl_MappedControl {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl{}
	}
	return &t.MappedControl
}

type GetAllMappedControlHistories_MappedControlHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllMappedControlHistories_MappedControlHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllMappedControlHistories_MappedControlHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllMappedControlHistories_MappedControlHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllMappedControlHistories_MappedControlHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllMappedControlHistories_MappedControlHistories_Edges_Node struct {
	Confidence  *int64               "json:\"confidence,omitempty\" graphql:\"confidence\""
	CreatedAt   *time.Time           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time            "json:\"historyTime\" graphql:\"historyTime\""
	ID          string               "json:\"id\" graphql:\"id\""
	MappingType enums.MappingType    "json:\"mappingType\" graphql:\"mappingType\""
	Operation   history.OpType       "json:\"operation\" graphql:\"operation\""
	OwnerID     *string              "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string              "json:\"ref,omitempty\" graphql:\"ref\""
	Relation    *string              "json:\"relation,omitempty\" graphql:\"relation\""
	Source      *enums.MappingSource "json:\"source,omitempty\" graphql:\"source\""
	Tags        []string             "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetConfidence() *int64 {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.Confidence
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetMappingType() *enums.MappingType {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return &t.MappingType
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetRelation() *string {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.Relation
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetSource() *enums.MappingSource {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllMappedControlHistories_MappedControlHistories_Edges struct {
	Node *GetAllMappedControlHistories_MappedControlHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllMappedControlHistories_MappedControlHistories_Edges) GetNode() *GetAllMappedControlHistories_MappedControlHistories_Edges_Node {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges{}
	}
	return t.Node
}

type GetAllMappedControlHistories_MappedControlHistories struct {
	Edges      []*GetAllMappedControlHistories_MappedControlHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllMappedControlHistories_MappedControlHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                        "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllMappedControlHistories_MappedControlHistories) GetEdges() []*GetAllMappedControlHistories_MappedControlHistories_Edges {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories{}
	}
	return t.Edges
}
func (t *GetAllMappedControlHistories_MappedControlHistories) GetPageInfo() *GetAllMappedControlHistories_MappedControlHistories_PageInfo {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllMappedControlHistories_MappedControlHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories{}
	}
	return t.TotalCount
}

type GetMappedControlHistories_MappedControlHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetMappedControlHistories_MappedControlHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetMappedControlHistories_MappedControlHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetMappedControlHistories_MappedControlHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetMappedControlHistories_MappedControlHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetMappedControlHistories_MappedControlHistories_Edges_Node struct {
	Confidence  *int64               "json:\"confidence,omitempty\" graphql:\"confidence\""
	CreatedAt   *time.Time           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time            "json:\"historyTime\" graphql:\"historyTime\""
	ID          string               "json:\"id\" graphql:\"id\""
	MappingType enums.MappingType    "json:\"mappingType\" graphql:\"mappingType\""
	Operation   history.OpType       "json:\"operation\" graphql:\"operation\""
	OwnerID     *string              "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string              "json:\"ref,omitempty\" graphql:\"ref\""
	Relation    *string              "json:\"relation,omitempty\" graphql:\"relation\""
	Source      *enums.MappingSource "json:\"source,omitempty\" graphql:\"source\""
	Tags        []string             "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetConfidence() *int64 {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.Confidence
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetMappingType() *enums.MappingType {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return &t.MappingType
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetRelation() *string {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.Relation
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetSource() *enums.MappingSource {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetMappedControlHistories_MappedControlHistories_Edges struct {
	Node *GetMappedControlHistories_MappedControlHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetMappedControlHistories_MappedControlHistories_Edges) GetNode() *GetMappedControlHistories_MappedControlHistories_Edges_Node {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges{}
	}
	return t.Node
}

type GetMappedControlHistories_MappedControlHistories struct {
	Edges      []*GetMappedControlHistories_MappedControlHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetMappedControlHistories_MappedControlHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetMappedControlHistories_MappedControlHistories) GetEdges() []*GetMappedControlHistories_MappedControlHistories_Edges {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories{}
	}
	return t.Edges
}
func (t *GetMappedControlHistories_MappedControlHistories) GetPageInfo() *GetMappedControlHistories_MappedControlHistories_PageInfo {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories{}
	}
	return &t.PageInfo
}
func (t *GetMappedControlHistories_MappedControlHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string    "json:\"description,omitempty\" graphql:\"description\""
	Details     *string    "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string     "json:\"displayID\" graphql:\"displayID\""
	ID          string     "json:\"id\" graphql:\"id\""
	Name        string     "json:\"name\" graphql:\"name\""
	OwnerID     *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.Description
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetDetails() *string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.Details
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.DisplayID
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetID() string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.ID
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetName() string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.Name
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.Tags
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVNarrative_CreateBulkCSVNarrative struct {
	Narratives []*CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives "json:\"narratives,omitempty\" graphql:\"narratives\""
}

func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative) GetNarratives() []*CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative{}
	}
	return t.Narratives
}

type CreateBulkNarrative_CreateBulkNarrative_Narratives struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string    "json:\"description,omitempty\" graphql:\"description\""
	Details     *string    "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string     "json:\"displayID\" graphql:\"displayID\""
	ID          string     "json:\"id\" graphql:\"id\""
	Name        string     "json:\"name\" graphql:\"name\""
	OwnerID     *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.CreatedAt
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.CreatedBy
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetDescription() *string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.Description
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetDetails() *string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.Details
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.DisplayID
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetID() string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.ID
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetName() string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.Name
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.OwnerID
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetTags() []string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.Tags
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.UpdatedBy
}

type CreateBulkNarrative_CreateBulkNarrative struct {
	Narratives []*CreateBulkNarrative_CreateBulkNarrative_Narratives "json:\"narratives,omitempty\" graphql:\"narratives\""
}

func (t *CreateBulkNarrative_CreateBulkNarrative) GetNarratives() []*CreateBulkNarrative_CreateBulkNarrative_Narratives {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative{}
	}
	return t.Narratives
}

type CreateNarrative_CreateNarrative_Narrative struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string    "json:\"description,omitempty\" graphql:\"description\""
	Details     *string    "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string     "json:\"displayID\" graphql:\"displayID\""
	ID          string     "json:\"id\" graphql:\"id\""
	Name        string     "json:\"name\" graphql:\"name\""
	OwnerID     *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateNarrative_CreateNarrative_Narrative) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.CreatedAt
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetCreatedBy() *string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.CreatedBy
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetDescription() *string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.Description
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetDetails() *string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.Details
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetDisplayID() string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.DisplayID
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetID() string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.ID
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetName() string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.Name
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetOwnerID() *string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.OwnerID
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetTags() []string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.Tags
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.UpdatedAt
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.UpdatedBy
}

type CreateNarrative_CreateNarrative struct {
	Narrative CreateNarrative_CreateNarrative_Narrative "json:\"narrative\" graphql:\"narrative\""
}

func (t *CreateNarrative_CreateNarrative) GetNarrative() *CreateNarrative_CreateNarrative_Narrative {
	if t == nil {
		t = &CreateNarrative_CreateNarrative{}
	}
	return &t.Narrative
}

type DeleteNarrative_DeleteNarrative struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteNarrative_DeleteNarrative) GetDeletedID() string {
	if t == nil {
		t = &DeleteNarrative_DeleteNarrative{}
	}
	return t.DeletedID
}

type GetAllNarratives_Narratives_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllNarratives_Narratives_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllNarratives_Narratives_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllNarratives_Narratives_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllNarratives_Narratives_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllNarratives_Narratives_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllNarratives_Narratives_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllNarratives_Narratives_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllNarratives_Narratives_PageInfo{}
	}
	return t.StartCursor
}

type GetAllNarratives_Narratives_Edges_Node struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string    "json:\"description,omitempty\" graphql:\"description\""
	Details     *string    "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string     "json:\"displayID\" graphql:\"displayID\""
	ID          string     "json:\"id\" graphql:\"id\""
	Name        string     "json:\"name\" graphql:\"name\""
	OwnerID     *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllNarratives_Narratives_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllNarratives_Narratives_Edges struct {
	Node *GetAllNarratives_Narratives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllNarratives_Narratives_Edges) GetNode() *GetAllNarratives_Narratives_Edges_Node {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges{}
	}
	return t.Node
}

type GetAllNarratives_Narratives struct {
	Edges      []*GetAllNarratives_Narratives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllNarratives_Narratives_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllNarratives_Narratives) GetEdges() []*GetAllNarratives_Narratives_Edges {
	if t == nil {
		t = &GetAllNarratives_Narratives{}
	}
	return t.Edges
}
func (t *GetAllNarratives_Narratives) GetPageInfo() *GetAllNarratives_Narratives_PageInfo {
	if t == nil {
		t = &GetAllNarratives_Narratives{}
	}
	return &t.PageInfo
}
func (t *GetAllNarratives_Narratives) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllNarratives_Narratives{}
	}
	return t.TotalCount
}

type GetNarrativeByID_Narrative struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string    "json:\"description,omitempty\" graphql:\"description\""
	Details     *string    "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string     "json:\"displayID\" graphql:\"displayID\""
	ID          string     "json:\"id\" graphql:\"id\""
	Name        string     "json:\"name\" graphql:\"name\""
	OwnerID     *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetNarrativeByID_Narrative) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.CreatedAt
}
func (t *GetNarrativeByID_Narrative) GetCreatedBy() *string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.CreatedBy
}
func (t *GetNarrativeByID_Narrative) GetDescription() *string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.Description
}
func (t *GetNarrativeByID_Narrative) GetDetails() *string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.Details
}
func (t *GetNarrativeByID_Narrative) GetDisplayID() string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.DisplayID
}
func (t *GetNarrativeByID_Narrative) GetID() string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.ID
}
func (t *GetNarrativeByID_Narrative) GetName() string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.Name
}
func (t *GetNarrativeByID_Narrative) GetOwnerID() *string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.OwnerID
}
func (t *GetNarrativeByID_Narrative) GetTags() []string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.Tags
}
func (t *GetNarrativeByID_Narrative) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.UpdatedAt
}
func (t *GetNarrativeByID_Narrative) GetUpdatedBy() *string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.UpdatedBy
}

type GetNarratives_Narratives_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetNarratives_Narratives_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetNarratives_Narratives_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetNarratives_Narratives_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetNarratives_Narratives_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetNarratives_Narratives_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetNarratives_Narratives_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetNarratives_Narratives_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetNarratives_Narratives_PageInfo{}
	}
	return t.StartCursor
}

type GetNarratives_Narratives_Edges_Node struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string    "json:\"description,omitempty\" graphql:\"description\""
	Details     *string    "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string     "json:\"displayID\" graphql:\"displayID\""
	ID          string     "json:\"id\" graphql:\"id\""
	Name        string     "json:\"name\" graphql:\"name\""
	OwnerID     *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetNarratives_Narratives_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetNarratives_Narratives_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetNarratives_Narratives_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.Description
}
func (t *GetNarratives_Narratives_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.Details
}
func (t *GetNarratives_Narratives_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetNarratives_Narratives_Edges_Node) GetID() string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.ID
}
func (t *GetNarratives_Narratives_Edges_Node) GetName() string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.Name
}
func (t *GetNarratives_Narratives_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetNarratives_Narratives_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.Tags
}
func (t *GetNarratives_Narratives_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetNarratives_Narratives_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetNarratives_Narratives_Edges struct {
	Node *GetNarratives_Narratives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetNarratives_Narratives_Edges) GetNode() *GetNarratives_Narratives_Edges_Node {
	if t == nil {
		t = &GetNarratives_Narratives_Edges{}
	}
	return t.Node
}

type GetNarratives_Narratives struct {
	Edges      []*GetNarratives_Narratives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetNarratives_Narratives_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                             "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetNarratives_Narratives) GetEdges() []*GetNarratives_Narratives_Edges {
	if t == nil {
		t = &GetNarratives_Narratives{}
	}
	return t.Edges
}
func (t *GetNarratives_Narratives) GetPageInfo() *GetNarratives_Narratives_PageInfo {
	if t == nil {
		t = &GetNarratives_Narratives{}
	}
	return &t.PageInfo
}
func (t *GetNarratives_Narratives) GetTotalCount() int64 {
	if t == nil {
		t = &GetNarratives_Narratives{}
	}
	return t.TotalCount
}

type UpdateNarrative_UpdateNarrative_Narrative struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string    "json:\"description,omitempty\" graphql:\"description\""
	Details     *string    "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string     "json:\"displayID\" graphql:\"displayID\""
	ID          string     "json:\"id\" graphql:\"id\""
	Name        string     "json:\"name\" graphql:\"name\""
	OwnerID     *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateNarrative_UpdateNarrative_Narrative) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.CreatedAt
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.CreatedBy
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetDescription() *string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.Description
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetDetails() *string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.Details
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetDisplayID() string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.DisplayID
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetID() string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.ID
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetName() string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.Name
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetOwnerID() *string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.OwnerID
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetTags() []string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.Tags
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.UpdatedAt
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.UpdatedBy
}

type UpdateNarrative_UpdateNarrative struct {
	Narrative UpdateNarrative_UpdateNarrative_Narrative "json:\"narrative\" graphql:\"narrative\""
}

func (t *UpdateNarrative_UpdateNarrative) GetNarrative() *UpdateNarrative_UpdateNarrative_Narrative {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative{}
	}
	return &t.Narrative
}

type GetAllNarrativeHistories_NarrativeHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllNarrativeHistories_NarrativeHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllNarrativeHistories_NarrativeHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllNarrativeHistories_NarrativeHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllNarrativeHistories_NarrativeHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllNarrativeHistories_NarrativeHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string        "json:\"description,omitempty\" graphql:\"description\""
	Details     *string        "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string         "json:\"displayID\" graphql:\"displayID\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllNarrativeHistories_NarrativeHistories_Edges struct {
	Node *GetAllNarrativeHistories_NarrativeHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllNarrativeHistories_NarrativeHistories_Edges) GetNode() *GetAllNarrativeHistories_NarrativeHistories_Edges_Node {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges{}
	}
	return t.Node
}

type GetAllNarrativeHistories_NarrativeHistories struct {
	Edges      []*GetAllNarrativeHistories_NarrativeHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllNarrativeHistories_NarrativeHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllNarrativeHistories_NarrativeHistories) GetEdges() []*GetAllNarrativeHistories_NarrativeHistories_Edges {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories{}
	}
	return t.Edges
}
func (t *GetAllNarrativeHistories_NarrativeHistories) GetPageInfo() *GetAllNarrativeHistories_NarrativeHistories_PageInfo {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllNarrativeHistories_NarrativeHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories{}
	}
	return t.TotalCount
}

type GetNarrativeHistories_NarrativeHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetNarrativeHistories_NarrativeHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetNarrativeHistories_NarrativeHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetNarrativeHistories_NarrativeHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetNarrativeHistories_NarrativeHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetNarrativeHistories_NarrativeHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string        "json:\"description,omitempty\" graphql:\"description\""
	Details     *string        "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string         "json:\"displayID\" graphql:\"displayID\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetNarrativeHistories_NarrativeHistories_Edges struct {
	Node *GetNarrativeHistories_NarrativeHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetNarrativeHistories_NarrativeHistories_Edges) GetNode() *GetNarrativeHistories_NarrativeHistories_Edges_Node {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges{}
	}
	return t.Node
}

type GetNarrativeHistories_NarrativeHistories struct {
	Edges      []*GetNarrativeHistories_NarrativeHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetNarrativeHistories_NarrativeHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                             "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetNarrativeHistories_NarrativeHistories) GetEdges() []*GetNarrativeHistories_NarrativeHistories_Edges {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories{}
	}
	return t.Edges
}
func (t *GetNarrativeHistories_NarrativeHistories) GetPageInfo() *GetNarrativeHistories_NarrativeHistories_PageInfo {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories{}
	}
	return &t.PageInfo
}
func (t *GetNarrativeHistories_NarrativeHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories{}
	}
	return t.TotalCount
}

type GetAllNoteHistories_NoteHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllNoteHistories_NoteHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllNoteHistories_NoteHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllNoteHistories_NoteHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllNoteHistories_NoteHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllNoteHistories_NoteHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID   string         "json:\"displayID\" graphql:\"displayID\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Text        string         "json:\"text\" graphql:\"text\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetText() string {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.Text
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllNoteHistories_NoteHistories_Edges struct {
	Node *GetAllNoteHistories_NoteHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllNoteHistories_NoteHistories_Edges) GetNode() *GetAllNoteHistories_NoteHistories_Edges_Node {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges{}
	}
	return t.Node
}

type GetAllNoteHistories_NoteHistories struct {
	Edges      []*GetAllNoteHistories_NoteHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllNoteHistories_NoteHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllNoteHistories_NoteHistories) GetEdges() []*GetAllNoteHistories_NoteHistories_Edges {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories{}
	}
	return t.Edges
}
func (t *GetAllNoteHistories_NoteHistories) GetPageInfo() *GetAllNoteHistories_NoteHistories_PageInfo {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllNoteHistories_NoteHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories{}
	}
	return t.TotalCount
}

type GetNoteHistories_NoteHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetNoteHistories_NoteHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetNoteHistories_NoteHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetNoteHistories_NoteHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetNoteHistories_NoteHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetNoteHistories_NoteHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID   string         "json:\"displayID\" graphql:\"displayID\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Text        string         "json:\"text\" graphql:\"text\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetNoteHistories_NoteHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetText() string {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.Text
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetNoteHistories_NoteHistories_Edges struct {
	Node *GetNoteHistories_NoteHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetNoteHistories_NoteHistories_Edges) GetNode() *GetNoteHistories_NoteHistories_Edges_Node {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges{}
	}
	return t.Node
}

type GetNoteHistories_NoteHistories struct {
	Edges      []*GetNoteHistories_NoteHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetNoteHistories_NoteHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetNoteHistories_NoteHistories) GetEdges() []*GetNoteHistories_NoteHistories_Edges {
	if t == nil {
		t = &GetNoteHistories_NoteHistories{}
	}
	return t.Edges
}
func (t *GetNoteHistories_NoteHistories) GetPageInfo() *GetNoteHistories_NoteHistories_PageInfo {
	if t == nil {
		t = &GetNoteHistories_NoteHistories{}
	}
	return &t.PageInfo
}
func (t *GetNoteHistories_NoteHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetNoteHistories_NoteHistories{}
	}
	return t.TotalCount
}

type CreateOnboarding_CreateOnboarding_Onboarding struct {
	CompanyDetails map[string]any "json:\"companyDetails,omitempty\" graphql:\"companyDetails\""
	CompanyName    string         "json:\"companyName\" graphql:\"companyName\""
	Compliance     map[string]any "json:\"compliance,omitempty\" graphql:\"compliance\""
	Domains        []string       "json:\"domains,omitempty\" graphql:\"domains\""
	ID             string         "json:\"id\" graphql:\"id\""
	OrganizationID *string        "json:\"organizationID,omitempty\" graphql:\"organizationID\""
	UserDetails    map[string]any "json:\"userDetails,omitempty\" graphql:\"userDetails\""
}

func (t *CreateOnboarding_CreateOnboarding_Onboarding) GetCompanyDetails() map[string]any {
	if t == nil {
		t = &CreateOnboarding_CreateOnboarding_Onboarding{}
	}
	return t.CompanyDetails
}
func (t *CreateOnboarding_CreateOnboarding_Onboarding) GetCompanyName() string {
	if t == nil {
		t = &CreateOnboarding_CreateOnboarding_Onboarding{}
	}
	return t.CompanyName
}
func (t *CreateOnboarding_CreateOnboarding_Onboarding) GetCompliance() map[string]any {
	if t == nil {
		t = &CreateOnboarding_CreateOnboarding_Onboarding{}
	}
	return t.Compliance
}
func (t *CreateOnboarding_CreateOnboarding_Onboarding) GetDomains() []string {
	if t == nil {
		t = &CreateOnboarding_CreateOnboarding_Onboarding{}
	}
	return t.Domains
}
func (t *CreateOnboarding_CreateOnboarding_Onboarding) GetID() string {
	if t == nil {
		t = &CreateOnboarding_CreateOnboarding_Onboarding{}
	}
	return t.ID
}
func (t *CreateOnboarding_CreateOnboarding_Onboarding) GetOrganizationID() *string {
	if t == nil {
		t = &CreateOnboarding_CreateOnboarding_Onboarding{}
	}
	return t.OrganizationID
}
func (t *CreateOnboarding_CreateOnboarding_Onboarding) GetUserDetails() map[string]any {
	if t == nil {
		t = &CreateOnboarding_CreateOnboarding_Onboarding{}
	}
	return t.UserDetails
}

type CreateOnboarding_CreateOnboarding struct {
	Onboarding CreateOnboarding_CreateOnboarding_Onboarding "json:\"onboarding\" graphql:\"onboarding\""
}

func (t *CreateOnboarding_CreateOnboarding) GetOnboarding() *CreateOnboarding_CreateOnboarding_Onboarding {
	if t == nil {
		t = &CreateOnboarding_CreateOnboarding{}
	}
	return &t.Onboarding
}

type CreateOrganization_CreateOrganization_Organization struct {
	AvatarLocalFileID *string    "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string    "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarUpdatedAt   *time.Time "json:\"avatarUpdatedAt,omitempty\" graphql:\"avatarUpdatedAt\""
	CreatedAt         *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DedicatedDb       bool       "json:\"dedicatedDb\" graphql:\"dedicatedDb\""
	Description       *string    "json:\"description,omitempty\" graphql:\"description\""
	DisplayName       string     "json:\"displayName\" graphql:\"displayName\""
	ID                string     "json:\"id\" graphql:\"id\""
	Name              string     "json:\"name\" graphql:\"name\""
	PersonalOrg       *bool      "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Tags              []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateOrganization_CreateOrganization_Organization) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.AvatarLocalFileID
}
func (t *CreateOrganization_CreateOrganization_Organization) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.AvatarRemoteURL
}
func (t *CreateOrganization_CreateOrganization_Organization) GetAvatarUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.AvatarUpdatedAt
}
func (t *CreateOrganization_CreateOrganization_Organization) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.CreatedAt
}
func (t *CreateOrganization_CreateOrganization_Organization) GetCreatedBy() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.CreatedBy
}
func (t *CreateOrganization_CreateOrganization_Organization) GetDedicatedDb() bool {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.DedicatedDb
}
func (t *CreateOrganization_CreateOrganization_Organization) GetDescription() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.Description
}
func (t *CreateOrganization_CreateOrganization_Organization) GetDisplayName() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.DisplayName
}
func (t *CreateOrganization_CreateOrganization_Organization) GetID() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.ID
}
func (t *CreateOrganization_CreateOrganization_Organization) GetName() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.Name
}
func (t *CreateOrganization_CreateOrganization_Organization) GetPersonalOrg() *bool {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.PersonalOrg
}
func (t *CreateOrganization_CreateOrganization_Organization) GetTags() []string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.Tags
}
func (t *CreateOrganization_CreateOrganization_Organization) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.UpdatedAt
}
func (t *CreateOrganization_CreateOrganization_Organization) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.UpdatedBy
}

type CreateOrganization_CreateOrganization struct {
	Organization CreateOrganization_CreateOrganization_Organization "json:\"organization\" graphql:\"organization\""
}

func (t *CreateOrganization_CreateOrganization) GetOrganization() *CreateOrganization_CreateOrganization_Organization {
	if t == nil {
		t = &CreateOrganization_CreateOrganization{}
	}
	return &t.Organization
}

type DeleteOrganization_DeleteOrganization struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteOrganization_DeleteOrganization) GetDeletedID() string {
	if t == nil {
		t = &DeleteOrganization_DeleteOrganization{}
	}
	return t.DeletedID
}

type GetAllOrganizations_Organizations_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllOrganizations_Organizations_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllOrganizations_Organizations_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllOrganizations_Organizations_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllOrganizations_Organizations_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllOrganizations_Organizations_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllOrganizations_Organizations_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_PageInfo{}
	}
	return t.StartCursor
}

type GetAllOrganizations_Organizations_Edges_Node struct {
	AvatarLocalFileID *string    "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string    "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarUpdatedAt   *time.Time "json:\"avatarUpdatedAt,omitempty\" graphql:\"avatarUpdatedAt\""
	CreatedAt         *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DedicatedDb       bool       "json:\"dedicatedDb\" graphql:\"dedicatedDb\""
	Description       *string    "json:\"description,omitempty\" graphql:\"description\""
	DisplayName       string     "json:\"displayName\" graphql:\"displayName\""
	ID                string     "json:\"id\" graphql:\"id\""
	Name              string     "json:\"name\" graphql:\"name\""
	PersonalOrg       *bool      "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Tags              []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.AvatarLocalFileID
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetAvatarUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.AvatarUpdatedAt
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetDedicatedDb() bool {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.DedicatedDb
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.PersonalOrg
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllOrganizations_Organizations_Edges struct {
	Node *GetAllOrganizations_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrganizations_Organizations_Edges) GetNode() *GetAllOrganizations_Organizations_Edges_Node {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges{}
	}
	return t.Node
}

type GetAllOrganizations_Organizations struct {
	Edges      []*GetAllOrganizations_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllOrganizations_Organizations_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllOrganizations_Organizations) GetEdges() []*GetAllOrganizations_Organizations_Edges {
	if t == nil {
		t = &GetAllOrganizations_Organizations{}
	}
	return t.Edges
}
func (t *GetAllOrganizations_Organizations) GetPageInfo() *GetAllOrganizations_Organizations_PageInfo {
	if t == nil {
		t = &GetAllOrganizations_Organizations{}
	}
	return &t.PageInfo
}
func (t *GetAllOrganizations_Organizations) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllOrganizations_Organizations{}
	}
	return t.TotalCount
}

type GetOrganizationByID_Organization struct {
	AvatarLocalFileID *string    "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string    "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarUpdatedAt   *time.Time "json:\"avatarUpdatedAt,omitempty\" graphql:\"avatarUpdatedAt\""
	CreatedAt         *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DedicatedDb       bool       "json:\"dedicatedDb\" graphql:\"dedicatedDb\""
	Description       *string    "json:\"description,omitempty\" graphql:\"description\""
	DisplayName       string     "json:\"displayName\" graphql:\"displayName\""
	ID                string     "json:\"id\" graphql:\"id\""
	Name              string     "json:\"name\" graphql:\"name\""
	PersonalOrg       *bool      "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Tags              []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrganizationByID_Organization) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.AvatarLocalFileID
}
func (t *GetOrganizationByID_Organization) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.AvatarRemoteURL
}
func (t *GetOrganizationByID_Organization) GetAvatarUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.AvatarUpdatedAt
}
func (t *GetOrganizationByID_Organization) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.CreatedAt
}
func (t *GetOrganizationByID_Organization) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationByID_Organization) GetDedicatedDb() bool {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.DedicatedDb
}
func (t *GetOrganizationByID_Organization) GetDescription() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Description
}
func (t *GetOrganizationByID_Organization) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.DisplayName
}
func (t *GetOrganizationByID_Organization) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization) GetName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Name
}
func (t *GetOrganizationByID_Organization) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.PersonalOrg
}
func (t *GetOrganizationByID_Organization) GetTags() []string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Tags
}
func (t *GetOrganizationByID_Organization) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizationByID_Organization) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.UpdatedBy
}

type GetOrganizations_Organizations_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetOrganizations_Organizations_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetOrganizations_Organizations_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetOrganizations_Organizations_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetOrganizations_Organizations_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetOrganizations_Organizations_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetOrganizations_Organizations_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_PageInfo{}
	}
	return t.StartCursor
}

type GetOrganizations_Organizations_Edges_Node struct {
	AvatarLocalFileID *string    "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string    "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarUpdatedAt   *time.Time "json:\"avatarUpdatedAt,omitempty\" graphql:\"avatarUpdatedAt\""
	CreatedAt         *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DedicatedDb       bool       "json:\"dedicatedDb\" graphql:\"dedicatedDb\""
	Description       *string    "json:\"description,omitempty\" graphql:\"description\""
	DisplayName       string     "json:\"displayName\" graphql:\"displayName\""
	ID                string     "json:\"id\" graphql:\"id\""
	Name              string     "json:\"name\" graphql:\"name\""
	PersonalOrg       *bool      "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Tags              []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrganizations_Organizations_Edges_Node) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.AvatarLocalFileID
}
func (t *GetOrganizations_Organizations_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *GetOrganizations_Organizations_Edges_Node) GetAvatarUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.AvatarUpdatedAt
}
func (t *GetOrganizations_Organizations_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrganizations_Organizations_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOrganizations_Organizations_Edges_Node) GetDedicatedDb() bool {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.DedicatedDb
}
func (t *GetOrganizations_Organizations_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.Description
}
func (t *GetOrganizations_Organizations_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetOrganizations_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.Name
}
func (t *GetOrganizations_Organizations_Edges_Node) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.PersonalOrg
}
func (t *GetOrganizations_Organizations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.Tags
}
func (t *GetOrganizations_Organizations_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizations_Organizations_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetOrganizations_Organizations_Edges struct {
	Node *GetOrganizations_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizations_Organizations_Edges) GetNode() *GetOrganizations_Organizations_Edges_Node {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges{}
	}
	return t.Node
}

type GetOrganizations_Organizations struct {
	Edges      []*GetOrganizations_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetOrganizations_Organizations_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetOrganizations_Organizations) GetEdges() []*GetOrganizations_Organizations_Edges {
	if t == nil {
		t = &GetOrganizations_Organizations{}
	}
	return t.Edges
}
func (t *GetOrganizations_Organizations) GetPageInfo() *GetOrganizations_Organizations_PageInfo {
	if t == nil {
		t = &GetOrganizations_Organizations{}
	}
	return &t.PageInfo
}
func (t *GetOrganizations_Organizations) GetTotalCount() int64 {
	if t == nil {
		t = &GetOrganizations_Organizations{}
	}
	return t.TotalCount
}

type UpdateOrganization_UpdateOrganization_Organization struct {
	AvatarLocalFileID *string    "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string    "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarUpdatedAt   *time.Time "json:\"avatarUpdatedAt,omitempty\" graphql:\"avatarUpdatedAt\""
	CreatedAt         *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DedicatedDb       bool       "json:\"dedicatedDb\" graphql:\"dedicatedDb\""
	Description       *string    "json:\"description,omitempty\" graphql:\"description\""
	DisplayName       string     "json:\"displayName\" graphql:\"displayName\""
	ID                string     "json:\"id\" graphql:\"id\""
	Name              string     "json:\"name\" graphql:\"name\""
	PersonalOrg       *bool      "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Tags              []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.AvatarLocalFileID
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.AvatarRemoteURL
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetAvatarUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.AvatarUpdatedAt
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.CreatedAt
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.CreatedBy
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetDedicatedDb() bool {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.DedicatedDb
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetDescription() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.Description
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetDisplayName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.DisplayName
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.ID
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.Name
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetPersonalOrg() *bool {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.PersonalOrg
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetTags() []string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.Tags
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.UpdatedAt
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.UpdatedBy
}

type UpdateOrganization_UpdateOrganization struct {
	Organization UpdateOrganization_UpdateOrganization_Organization "json:\"organization\" graphql:\"organization\""
}

func (t *UpdateOrganization_UpdateOrganization) GetOrganization() *UpdateOrganization_UpdateOrganization_Organization {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization{}
	}
	return &t.Organization
}

type GetAllOrganizationHistories_OrganizationHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllOrganizationHistories_OrganizationHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllOrganizationHistories_OrganizationHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllOrganizationHistories_OrganizationHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllOrganizationHistories_OrganizationHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllOrganizationHistories_OrganizationHistories_Edges_Node struct {
	AvatarLocalFileID *string        "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string        "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarUpdatedAt   *time.Time     "json:\"avatarUpdatedAt,omitempty\" graphql:\"avatarUpdatedAt\""
	CreatedAt         *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DedicatedDb       bool           "json:\"dedicatedDb\" graphql:\"dedicatedDb\""
	Description       *string        "json:\"description,omitempty\" graphql:\"description\""
	DisplayName       string         "json:\"displayName\" graphql:\"displayName\""
	HistoryTime       time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID                string         "json:\"id\" graphql:\"id\""
	Name              string         "json:\"name\" graphql:\"name\""
	Operation         history.OpType "json:\"operation\" graphql:\"operation\""
	PersonalOrg       *bool          "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Ref               *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags              []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.AvatarLocalFileID
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetAvatarUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.AvatarUpdatedAt
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetDedicatedDb() bool {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.DedicatedDb
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.PersonalOrg
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllOrganizationHistories_OrganizationHistories_Edges struct {
	Node *GetAllOrganizationHistories_OrganizationHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrganizationHistories_OrganizationHistories_Edges) GetNode() *GetAllOrganizationHistories_OrganizationHistories_Edges_Node {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges{}
	}
	return t.Node
}

type GetAllOrganizationHistories_OrganizationHistories struct {
	Edges      []*GetAllOrganizationHistories_OrganizationHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllOrganizationHistories_OrganizationHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllOrganizationHistories_OrganizationHistories) GetEdges() []*GetAllOrganizationHistories_OrganizationHistories_Edges {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories{}
	}
	return t.Edges
}
func (t *GetAllOrganizationHistories_OrganizationHistories) GetPageInfo() *GetAllOrganizationHistories_OrganizationHistories_PageInfo {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllOrganizationHistories_OrganizationHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories{}
	}
	return t.TotalCount
}

type GetOrganizationHistories_OrganizationHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetOrganizationHistories_OrganizationHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetOrganizationHistories_OrganizationHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetOrganizationHistories_OrganizationHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetOrganizationHistories_OrganizationHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetOrganizationHistories_OrganizationHistories_Edges_Node struct {
	AvatarLocalFileID *string        "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string        "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarUpdatedAt   *time.Time     "json:\"avatarUpdatedAt,omitempty\" graphql:\"avatarUpdatedAt\""
	CreatedAt         *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DedicatedDb       bool           "json:\"dedicatedDb\" graphql:\"dedicatedDb\""
	Description       *string        "json:\"description,omitempty\" graphql:\"description\""
	DisplayName       string         "json:\"displayName\" graphql:\"displayName\""
	HistoryTime       time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID                string         "json:\"id\" graphql:\"id\""
	Name              string         "json:\"name\" graphql:\"name\""
	Operation         history.OpType "json:\"operation\" graphql:\"operation\""
	PersonalOrg       *bool          "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Ref               *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags              []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.AvatarLocalFileID
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetAvatarUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.AvatarUpdatedAt
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetDedicatedDb() bool {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.DedicatedDb
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.PersonalOrg
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetOrganizationHistories_OrganizationHistories_Edges struct {
	Node *GetOrganizationHistories_OrganizationHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizationHistories_OrganizationHistories_Edges) GetNode() *GetOrganizationHistories_OrganizationHistories_Edges_Node {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges{}
	}
	return t.Node
}

type GetOrganizationHistories_OrganizationHistories struct {
	Edges      []*GetOrganizationHistories_OrganizationHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetOrganizationHistories_OrganizationHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetOrganizationHistories_OrganizationHistories) GetEdges() []*GetOrganizationHistories_OrganizationHistories_Edges {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories{}
	}
	return t.Edges
}
func (t *GetOrganizationHistories_OrganizationHistories) GetPageInfo() *GetOrganizationHistories_OrganizationHistories_PageInfo {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories{}
	}
	return &t.PageInfo
}
func (t *GetOrganizationHistories_OrganizationHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings struct {
	AllowedEmailDomains              []string           "json:\"allowedEmailDomains,omitempty\" graphql:\"allowedEmailDomains\""
	BillingAddress                   *models.Address    "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact                   *string            "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail                     *string            "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingNotificationsEnabled      bool               "json:\"billingNotificationsEnabled\" graphql:\"billingNotificationsEnabled\""
	BillingPhone                     *string            "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	ComplianceWebhookToken           *string            "json:\"complianceWebhookToken,omitempty\" graphql:\"complianceWebhookToken\""
	CreatedAt                        *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                        *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains                          []string           "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation                      *enums.Region      "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID                               string             "json:\"id\" graphql:\"id\""
	IdentityProvider                 *enums.SSOProvider "json:\"identityProvider,omitempty\" graphql:\"identityProvider\""
	IdentityProviderAuthTested       bool               "json:\"identityProviderAuthTested\" graphql:\"identityProviderAuthTested\""
	IdentityProviderClientID         *string            "json:\"identityProviderClientID,omitempty\" graphql:\"identityProviderClientID\""
	IdentityProviderClientSecret     *string            "json:\"identityProviderClientSecret,omitempty\" graphql:\"identityProviderClientSecret\""
	IdentityProviderEntityID         *string            "json:\"identityProviderEntityID,omitempty\" graphql:\"identityProviderEntityID\""
	IdentityProviderLoginEnforced    bool               "json:\"identityProviderLoginEnforced\" graphql:\"identityProviderLoginEnforced\""
	IdentityProviderMetadataEndpoint *string            "json:\"identityProviderMetadataEndpoint,omitempty\" graphql:\"identityProviderMetadataEndpoint\""
	OidcDiscoveryEndpoint            *string            "json:\"oidcDiscoveryEndpoint,omitempty\" graphql:\"oidcDiscoveryEndpoint\""
	OrganizationID                   *string            "json:\"organizationID,omitempty\" graphql:\"organizationID\""
	Tags                             []string           "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier                    *string            "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt                        *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                        *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetAllowedEmailDomains() []string {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.AllowedEmailDomains
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetBillingAddress() *models.Address {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.BillingAddress
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetBillingContact() *string {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.BillingContact
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetBillingEmail() *string {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.BillingEmail
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetBillingNotificationsEnabled() bool {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.BillingNotificationsEnabled
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetBillingPhone() *string {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.BillingPhone
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetComplianceWebhookToken() *string {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.ComplianceWebhookToken
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetDomains() []string {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.Domains
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.GeoLocation
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetID() string {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.ID
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetIdentityProvider() *enums.SSOProvider {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.IdentityProvider
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetIdentityProviderAuthTested() bool {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.IdentityProviderAuthTested
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetIdentityProviderClientID() *string {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.IdentityProviderClientID
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetIdentityProviderClientSecret() *string {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.IdentityProviderClientSecret
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetIdentityProviderEntityID() *string {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.IdentityProviderEntityID
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetIdentityProviderLoginEnforced() bool {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.IdentityProviderLoginEnforced
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetIdentityProviderMetadataEndpoint() *string {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.IdentityProviderMetadataEndpoint
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetOidcDiscoveryEndpoint() *string {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.OidcDiscoveryEndpoint
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetOrganizationID() *string {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.OrganizationID
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.Tags
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetTaxIdentifier() *string {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.TaxIdentifier
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting struct {
	OrganizationSettings []*CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings "json:\"organizationSettings,omitempty\" graphql:\"organizationSettings\""
}

func (t *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting) GetOrganizationSettings() []*CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting_OrganizationSettings {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting{}
	}
	return t.OrganizationSettings
}

type CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings struct {
	AllowedEmailDomains              []string           "json:\"allowedEmailDomains,omitempty\" graphql:\"allowedEmailDomains\""
	BillingAddress                   *models.Address    "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact                   *string            "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail                     *string            "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingNotificationsEnabled      bool               "json:\"billingNotificationsEnabled\" graphql:\"billingNotificationsEnabled\""
	BillingPhone                     *string            "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	ComplianceWebhookToken           *string            "json:\"complianceWebhookToken,omitempty\" graphql:\"complianceWebhookToken\""
	CreatedAt                        *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                        *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains                          []string           "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation                      *enums.Region      "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID                               string             "json:\"id\" graphql:\"id\""
	IdentityProvider                 *enums.SSOProvider "json:\"identityProvider,omitempty\" graphql:\"identityProvider\""
	IdentityProviderAuthTested       bool               "json:\"identityProviderAuthTested\" graphql:\"identityProviderAuthTested\""
	IdentityProviderClientID         *string            "json:\"identityProviderClientID,omitempty\" graphql:\"identityProviderClientID\""
	IdentityProviderClientSecret     *string            "json:\"identityProviderClientSecret,omitempty\" graphql:\"identityProviderClientSecret\""
	IdentityProviderEntityID         *string            "json:\"identityProviderEntityID,omitempty\" graphql:\"identityProviderEntityID\""
	IdentityProviderLoginEnforced    bool               "json:\"identityProviderLoginEnforced\" graphql:\"identityProviderLoginEnforced\""
	IdentityProviderMetadataEndpoint *string            "json:\"identityProviderMetadataEndpoint,omitempty\" graphql:\"identityProviderMetadataEndpoint\""
	OidcDiscoveryEndpoint            *string            "json:\"oidcDiscoveryEndpoint,omitempty\" graphql:\"oidcDiscoveryEndpoint\""
	OrganizationID                   *string            "json:\"organizationID,omitempty\" graphql:\"organizationID\""
	Tags                             []string           "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier                    *string            "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt                        *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                        *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetAllowedEmailDomains() []string {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.AllowedEmailDomains
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetBillingAddress() *models.Address {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.BillingAddress
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetBillingContact() *string {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.BillingContact
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetBillingEmail() *string {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.BillingEmail
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetBillingNotificationsEnabled() bool {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.BillingNotificationsEnabled
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetBillingPhone() *string {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.BillingPhone
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetComplianceWebhookToken() *string {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.ComplianceWebhookToken
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.CreatedAt
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.CreatedBy
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetDomains() []string {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.Domains
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.GeoLocation
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetID() string {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.ID
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetIdentityProvider() *enums.SSOProvider {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.IdentityProvider
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetIdentityProviderAuthTested() bool {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.IdentityProviderAuthTested
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetIdentityProviderClientID() *string {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.IdentityProviderClientID
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetIdentityProviderClientSecret() *string {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.IdentityProviderClientSecret
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetIdentityProviderEntityID() *string {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.IdentityProviderEntityID
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetIdentityProviderLoginEnforced() bool {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.IdentityProviderLoginEnforced
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetIdentityProviderMetadataEndpoint() *string {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.IdentityProviderMetadataEndpoint
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetOidcDiscoveryEndpoint() *string {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.OidcDiscoveryEndpoint
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetOrganizationID() *string {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.OrganizationID
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetTags() []string {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.Tags
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetTaxIdentifier() *string {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.TaxIdentifier
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings{}
	}
	return t.UpdatedBy
}

type CreateBulkOrganizationSetting_CreateBulkOrganizationSetting struct {
	OrganizationSettings []*CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings "json:\"organizationSettings,omitempty\" graphql:\"organizationSettings\""
}

func (t *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting) GetOrganizationSettings() []*CreateBulkOrganizationSetting_CreateBulkOrganizationSetting_OrganizationSettings {
	if t == nil {
		t = &CreateBulkOrganizationSetting_CreateBulkOrganizationSetting{}
	}
	return t.OrganizationSettings
}

type CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting struct {
	AllowedEmailDomains              []string           "json:\"allowedEmailDomains,omitempty\" graphql:\"allowedEmailDomains\""
	BillingAddress                   *models.Address    "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact                   *string            "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail                     *string            "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingNotificationsEnabled      bool               "json:\"billingNotificationsEnabled\" graphql:\"billingNotificationsEnabled\""
	BillingPhone                     *string            "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	ComplianceWebhookToken           *string            "json:\"complianceWebhookToken,omitempty\" graphql:\"complianceWebhookToken\""
	CreatedAt                        *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                        *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains                          []string           "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation                      *enums.Region      "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID                               string             "json:\"id\" graphql:\"id\""
	IdentityProvider                 *enums.SSOProvider "json:\"identityProvider,omitempty\" graphql:\"identityProvider\""
	IdentityProviderAuthTested       bool               "json:\"identityProviderAuthTested\" graphql:\"identityProviderAuthTested\""
	IdentityProviderClientID         *string            "json:\"identityProviderClientID,omitempty\" graphql:\"identityProviderClientID\""
	IdentityProviderClientSecret     *string            "json:\"identityProviderClientSecret,omitempty\" graphql:\"identityProviderClientSecret\""
	IdentityProviderEntityID         *string            "json:\"identityProviderEntityID,omitempty\" graphql:\"identityProviderEntityID\""
	IdentityProviderLoginEnforced    bool               "json:\"identityProviderLoginEnforced\" graphql:\"identityProviderLoginEnforced\""
	IdentityProviderMetadataEndpoint *string            "json:\"identityProviderMetadataEndpoint,omitempty\" graphql:\"identityProviderMetadataEndpoint\""
	OidcDiscoveryEndpoint            *string            "json:\"oidcDiscoveryEndpoint,omitempty\" graphql:\"oidcDiscoveryEndpoint\""
	OrganizationID                   *string            "json:\"organizationID,omitempty\" graphql:\"organizationID\""
	Tags                             []string           "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier                    *string            "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt                        *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                        *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetAllowedEmailDomains() []string {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.AllowedEmailDomains
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetBillingAddress() *models.Address {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.BillingAddress
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetBillingContact() *string {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.BillingContact
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetBillingEmail() *string {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.BillingEmail
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetBillingNotificationsEnabled() bool {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.BillingNotificationsEnabled
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetBillingPhone() *string {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.BillingPhone
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetComplianceWebhookToken() *string {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.ComplianceWebhookToken
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.CreatedAt
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetCreatedBy() *string {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.CreatedBy
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetDomains() []string {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.Domains
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.GeoLocation
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetID() string {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.ID
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetIdentityProvider() *enums.SSOProvider {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.IdentityProvider
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetIdentityProviderAuthTested() bool {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.IdentityProviderAuthTested
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetIdentityProviderClientID() *string {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.IdentityProviderClientID
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetIdentityProviderClientSecret() *string {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.IdentityProviderClientSecret
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetIdentityProviderEntityID() *string {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.IdentityProviderEntityID
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetIdentityProviderLoginEnforced() bool {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.IdentityProviderLoginEnforced
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetIdentityProviderMetadataEndpoint() *string {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.IdentityProviderMetadataEndpoint
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetOidcDiscoveryEndpoint() *string {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.OidcDiscoveryEndpoint
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetOrganizationID() *string {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.OrganizationID
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetTags() []string {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.Tags
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetTaxIdentifier() *string {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.TaxIdentifier
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.UpdatedAt
}
func (t *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting{}
	}
	return t.UpdatedBy
}

type CreateOrganizationSetting_CreateOrganizationSetting struct {
	OrganizationSetting CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting "json:\"organizationSetting\" graphql:\"organizationSetting\""
}

func (t *CreateOrganizationSetting_CreateOrganizationSetting) GetOrganizationSetting() *CreateOrganizationSetting_CreateOrganizationSetting_OrganizationSetting {
	if t == nil {
		t = &CreateOrganizationSetting_CreateOrganizationSetting{}
	}
	return &t.OrganizationSetting
}

type DeleteOrganizationSetting_DeleteOrganizationSetting struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteOrganizationSetting_DeleteOrganizationSetting) GetDeletedID() string {
	if t == nil {
		t = &DeleteOrganizationSetting_DeleteOrganizationSetting{}
	}
	return t.DeletedID
}

type GetAllOrganizationSettings_OrganizationSettings_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllOrganizationSettings_OrganizationSettings_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllOrganizationSettings_OrganizationSettings_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllOrganizationSettings_OrganizationSettings_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllOrganizationSettings_OrganizationSettings_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_PageInfo{}
	}
	return t.StartCursor
}

type GetAllOrganizationSettings_OrganizationSettings_Edges_Node struct {
	AllowedEmailDomains              []string           "json:\"allowedEmailDomains,omitempty\" graphql:\"allowedEmailDomains\""
	BillingAddress                   *models.Address    "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact                   *string            "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail                     *string            "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingNotificationsEnabled      bool               "json:\"billingNotificationsEnabled\" graphql:\"billingNotificationsEnabled\""
	BillingPhone                     *string            "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	ComplianceWebhookToken           *string            "json:\"complianceWebhookToken,omitempty\" graphql:\"complianceWebhookToken\""
	CreatedAt                        *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                        *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains                          []string           "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation                      *enums.Region      "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID                               string             "json:\"id\" graphql:\"id\""
	IdentityProvider                 *enums.SSOProvider "json:\"identityProvider,omitempty\" graphql:\"identityProvider\""
	IdentityProviderAuthTested       bool               "json:\"identityProviderAuthTested\" graphql:\"identityProviderAuthTested\""
	IdentityProviderClientID         *string            "json:\"identityProviderClientID,omitempty\" graphql:\"identityProviderClientID\""
	IdentityProviderClientSecret     *string            "json:\"identityProviderClientSecret,omitempty\" graphql:\"identityProviderClientSecret\""
	IdentityProviderEntityID         *string            "json:\"identityProviderEntityID,omitempty\" graphql:\"identityProviderEntityID\""
	IdentityProviderLoginEnforced    bool               "json:\"identityProviderLoginEnforced\" graphql:\"identityProviderLoginEnforced\""
	IdentityProviderMetadataEndpoint *string            "json:\"identityProviderMetadataEndpoint,omitempty\" graphql:\"identityProviderMetadataEndpoint\""
	OidcDiscoveryEndpoint            *string            "json:\"oidcDiscoveryEndpoint,omitempty\" graphql:\"oidcDiscoveryEndpoint\""
	OrganizationID                   *string            "json:\"organizationID,omitempty\" graphql:\"organizationID\""
	Tags                             []string           "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier                    *string            "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt                        *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                        *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetAllowedEmailDomains() []string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.AllowedEmailDomains
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingAddress() *models.Address {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingAddress
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingContact() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingContact
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingEmail() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingEmail
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingNotificationsEnabled() bool {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingNotificationsEnabled
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingPhone() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingPhone
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetComplianceWebhookToken() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.ComplianceWebhookToken
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.Domains
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.GeoLocation
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetIdentityProvider() *enums.SSOProvider {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.IdentityProvider
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetIdentityProviderAuthTested() bool {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.IdentityProviderAuthTested
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetIdentityProviderClientID() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.IdentityProviderClientID
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetIdentityProviderClientSecret() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.IdentityProviderClientSecret
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetIdentityProviderEntityID() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.IdentityProviderEntityID
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetIdentityProviderLoginEnforced() bool {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.IdentityProviderLoginEnforced
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetIdentityProviderMetadataEndpoint() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.IdentityProviderMetadataEndpoint
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetOidcDiscoveryEndpoint() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.OidcDiscoveryEndpoint
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetOrganizationID() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.TaxIdentifier
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllOrganizationSettings_OrganizationSettings_Edges struct {
	Node *GetAllOrganizationSettings_OrganizationSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrganizationSettings_OrganizationSettings_Edges) GetNode() *GetAllOrganizationSettings_OrganizationSettings_Edges_Node {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges{}
	}
	return t.Node
}

type GetAllOrganizationSettings_OrganizationSettings struct {
	Edges      []*GetAllOrganizationSettings_OrganizationSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllOrganizationSettings_OrganizationSettings_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllOrganizationSettings_OrganizationSettings) GetEdges() []*GetAllOrganizationSettings_OrganizationSettings_Edges {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings{}
	}
	return t.Edges
}
func (t *GetAllOrganizationSettings_OrganizationSettings) GetPageInfo() *GetAllOrganizationSettings_OrganizationSettings_PageInfo {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings{}
	}
	return &t.PageInfo
}
func (t *GetAllOrganizationSettings_OrganizationSettings) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings{}
	}
	return t.TotalCount
}

type GetOrganizationSettingByID_OrganizationSetting struct {
	AllowedEmailDomains              []string           "json:\"allowedEmailDomains,omitempty\" graphql:\"allowedEmailDomains\""
	BillingAddress                   *models.Address    "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact                   *string            "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail                     *string            "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingNotificationsEnabled      bool               "json:\"billingNotificationsEnabled\" graphql:\"billingNotificationsEnabled\""
	BillingPhone                     *string            "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	ComplianceWebhookToken           *string            "json:\"complianceWebhookToken,omitempty\" graphql:\"complianceWebhookToken\""
	CreatedAt                        *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                        *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains                          []string           "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation                      *enums.Region      "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID                               string             "json:\"id\" graphql:\"id\""
	IdentityProvider                 *enums.SSOProvider "json:\"identityProvider,omitempty\" graphql:\"identityProvider\""
	IdentityProviderAuthTested       bool               "json:\"identityProviderAuthTested\" graphql:\"identityProviderAuthTested\""
	IdentityProviderClientID         *string            "json:\"identityProviderClientID,omitempty\" graphql:\"identityProviderClientID\""
	IdentityProviderClientSecret     *string            "json:\"identityProviderClientSecret,omitempty\" graphql:\"identityProviderClientSecret\""
	IdentityProviderEntityID         *string            "json:\"identityProviderEntityID,omitempty\" graphql:\"identityProviderEntityID\""
	IdentityProviderLoginEnforced    bool               "json:\"identityProviderLoginEnforced\" graphql:\"identityProviderLoginEnforced\""
	IdentityProviderMetadataEndpoint *string            "json:\"identityProviderMetadataEndpoint,omitempty\" graphql:\"identityProviderMetadataEndpoint\""
	OidcDiscoveryEndpoint            *string            "json:\"oidcDiscoveryEndpoint,omitempty\" graphql:\"oidcDiscoveryEndpoint\""
	OrganizationID                   *string            "json:\"organizationID,omitempty\" graphql:\"organizationID\""
	Tags                             []string           "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier                    *string            "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt                        *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                        *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrganizationSettingByID_OrganizationSetting) GetAllowedEmailDomains() []string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.AllowedEmailDomains
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetBillingAddress() *models.Address {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.BillingAddress
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetBillingContact() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.BillingContact
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetBillingEmail() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.BillingEmail
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetBillingNotificationsEnabled() bool {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.BillingNotificationsEnabled
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetBillingPhone() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.BillingPhone
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetComplianceWebhookToken() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.ComplianceWebhookToken
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.CreatedAt
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetDomains() []string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.Domains
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.GeoLocation
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetID() string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.ID
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetIdentityProvider() *enums.SSOProvider {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.IdentityProvider
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetIdentityProviderAuthTested() bool {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.IdentityProviderAuthTested
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetIdentityProviderClientID() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.IdentityProviderClientID
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetIdentityProviderClientSecret() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.IdentityProviderClientSecret
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetIdentityProviderEntityID() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.IdentityProviderEntityID
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetIdentityProviderLoginEnforced() bool {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.IdentityProviderLoginEnforced
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetIdentityProviderMetadataEndpoint() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.IdentityProviderMetadataEndpoint
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetOidcDiscoveryEndpoint() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.OidcDiscoveryEndpoint
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetOrganizationID() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.OrganizationID
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetTags() []string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.Tags
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.TaxIdentifier
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.UpdatedBy
}

type GetOrganizationSettings_OrganizationSettings_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetOrganizationSettings_OrganizationSettings_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetOrganizationSettings_OrganizationSettings_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetOrganizationSettings_OrganizationSettings_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetOrganizationSettings_OrganizationSettings_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_PageInfo{}
	}
	return t.StartCursor
}

type GetOrganizationSettings_OrganizationSettings_Edges_Node struct {
	AllowedEmailDomains              []string           "json:\"allowedEmailDomains,omitempty\" graphql:\"allowedEmailDomains\""
	BillingAddress                   *models.Address    "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact                   *string            "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail                     *string            "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingNotificationsEnabled      bool               "json:\"billingNotificationsEnabled\" graphql:\"billingNotificationsEnabled\""
	BillingPhone                     *string            "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	ComplianceWebhookToken           *string            "json:\"complianceWebhookToken,omitempty\" graphql:\"complianceWebhookToken\""
	CreatedAt                        *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                        *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains                          []string           "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation                      *enums.Region      "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID                               string             "json:\"id\" graphql:\"id\""
	IdentityProvider                 *enums.SSOProvider "json:\"identityProvider,omitempty\" graphql:\"identityProvider\""
	IdentityProviderAuthTested       bool               "json:\"identityProviderAuthTested\" graphql:\"identityProviderAuthTested\""
	IdentityProviderClientID         *string            "json:\"identityProviderClientID,omitempty\" graphql:\"identityProviderClientID\""
	IdentityProviderClientSecret     *string            "json:\"identityProviderClientSecret,omitempty\" graphql:\"identityProviderClientSecret\""
	IdentityProviderEntityID         *string            "json:\"identityProviderEntityID,omitempty\" graphql:\"identityProviderEntityID\""
	IdentityProviderLoginEnforced    bool               "json:\"identityProviderLoginEnforced\" graphql:\"identityProviderLoginEnforced\""
	IdentityProviderMetadataEndpoint *string            "json:\"identityProviderMetadataEndpoint,omitempty\" graphql:\"identityProviderMetadataEndpoint\""
	OidcDiscoveryEndpoint            *string            "json:\"oidcDiscoveryEndpoint,omitempty\" graphql:\"oidcDiscoveryEndpoint\""
	OrganizationID                   *string            "json:\"organizationID,omitempty\" graphql:\"organizationID\""
	Tags                             []string           "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier                    *string            "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt                        *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                        *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetAllowedEmailDomains() []string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.AllowedEmailDomains
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingAddress() *models.Address {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingAddress
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingContact() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingContact
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingEmail() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingEmail
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingNotificationsEnabled() bool {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingNotificationsEnabled
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingPhone() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingPhone
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetComplianceWebhookToken() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.ComplianceWebhookToken
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.Domains
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.GeoLocation
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetIdentityProvider() *enums.SSOProvider {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.IdentityProvider
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetIdentityProviderAuthTested() bool {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.IdentityProviderAuthTested
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetIdentityProviderClientID() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.IdentityProviderClientID
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetIdentityProviderClientSecret() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.IdentityProviderClientSecret
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetIdentityProviderEntityID() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.IdentityProviderEntityID
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetIdentityProviderLoginEnforced() bool {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.IdentityProviderLoginEnforced
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetIdentityProviderMetadataEndpoint() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.IdentityProviderMetadataEndpoint
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetOidcDiscoveryEndpoint() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.OidcDiscoveryEndpoint
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetOrganizationID() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.Tags
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.TaxIdentifier
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetOrganizationSettings_OrganizationSettings_Edges struct {
	Node *GetOrganizationSettings_OrganizationSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizationSettings_OrganizationSettings_Edges) GetNode() *GetOrganizationSettings_OrganizationSettings_Edges_Node {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges{}
	}
	return t.Node
}

type GetOrganizationSettings_OrganizationSettings struct {
	Edges      []*GetOrganizationSettings_OrganizationSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetOrganizationSettings_OrganizationSettings_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetOrganizationSettings_OrganizationSettings) GetEdges() []*GetOrganizationSettings_OrganizationSettings_Edges {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings{}
	}
	return t.Edges
}
func (t *GetOrganizationSettings_OrganizationSettings) GetPageInfo() *GetOrganizationSettings_OrganizationSettings_PageInfo {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings{}
	}
	return &t.PageInfo
}
func (t *GetOrganizationSettings_OrganizationSettings) GetTotalCount() int64 {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings{}
	}
	return t.TotalCount
}

type UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting struct {
	AllowedEmailDomains              []string           "json:\"allowedEmailDomains,omitempty\" graphql:\"allowedEmailDomains\""
	BillingAddress                   *models.Address    "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact                   *string            "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail                     *string            "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingNotificationsEnabled      bool               "json:\"billingNotificationsEnabled\" graphql:\"billingNotificationsEnabled\""
	BillingPhone                     *string            "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	ComplianceWebhookToken           *string            "json:\"complianceWebhookToken,omitempty\" graphql:\"complianceWebhookToken\""
	CreatedAt                        *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                        *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains                          []string           "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation                      *enums.Region      "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID                               string             "json:\"id\" graphql:\"id\""
	IdentityProvider                 *enums.SSOProvider "json:\"identityProvider,omitempty\" graphql:\"identityProvider\""
	IdentityProviderAuthTested       bool               "json:\"identityProviderAuthTested\" graphql:\"identityProviderAuthTested\""
	IdentityProviderClientID         *string            "json:\"identityProviderClientID,omitempty\" graphql:\"identityProviderClientID\""
	IdentityProviderClientSecret     *string            "json:\"identityProviderClientSecret,omitempty\" graphql:\"identityProviderClientSecret\""
	IdentityProviderEntityID         *string            "json:\"identityProviderEntityID,omitempty\" graphql:\"identityProviderEntityID\""
	IdentityProviderLoginEnforced    bool               "json:\"identityProviderLoginEnforced\" graphql:\"identityProviderLoginEnforced\""
	IdentityProviderMetadataEndpoint *string            "json:\"identityProviderMetadataEndpoint,omitempty\" graphql:\"identityProviderMetadataEndpoint\""
	OidcDiscoveryEndpoint            *string            "json:\"oidcDiscoveryEndpoint,omitempty\" graphql:\"oidcDiscoveryEndpoint\""
	OrganizationID                   *string            "json:\"organizationID,omitempty\" graphql:\"organizationID\""
	Tags                             []string           "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier                    *string            "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt                        *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                        *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetAllowedEmailDomains() []string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.AllowedEmailDomains
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetBillingAddress() *models.Address {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.BillingAddress
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetBillingContact() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.BillingContact
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetBillingEmail() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.BillingEmail
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetBillingNotificationsEnabled() bool {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.BillingNotificationsEnabled
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetBillingPhone() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.BillingPhone
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetComplianceWebhookToken() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.ComplianceWebhookToken
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.CreatedAt
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.CreatedBy
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetDomains() []string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.Domains
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.GeoLocation
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetID() string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.ID
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetIdentityProvider() *enums.SSOProvider {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.IdentityProvider
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetIdentityProviderAuthTested() bool {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.IdentityProviderAuthTested
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetIdentityProviderClientID() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.IdentityProviderClientID
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetIdentityProviderClientSecret() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.IdentityProviderClientSecret
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetIdentityProviderEntityID() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.IdentityProviderEntityID
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetIdentityProviderLoginEnforced() bool {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.IdentityProviderLoginEnforced
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetIdentityProviderMetadataEndpoint() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.IdentityProviderMetadataEndpoint
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetOidcDiscoveryEndpoint() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.OidcDiscoveryEndpoint
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetOrganizationID() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.OrganizationID
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetTags() []string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.Tags
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetTaxIdentifier() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.TaxIdentifier
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.UpdatedAt
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.UpdatedBy
}

type UpdateOrganizationSetting_UpdateOrganizationSetting struct {
	OrganizationSetting UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting "json:\"organizationSetting\" graphql:\"organizationSetting\""
}

func (t *UpdateOrganizationSetting_UpdateOrganizationSetting) GetOrganizationSetting() *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting{}
	}
	return &t.OrganizationSetting
}

type GetAllOrganizationSettingHistories_OrganizationSettingHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node struct {
	AllowedEmailDomains              []string           "json:\"allowedEmailDomains,omitempty\" graphql:\"allowedEmailDomains\""
	BillingAddress                   *models.Address    "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact                   *string            "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail                     *string            "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingNotificationsEnabled      bool               "json:\"billingNotificationsEnabled\" graphql:\"billingNotificationsEnabled\""
	BillingPhone                     *string            "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	ComplianceWebhookToken           *string            "json:\"complianceWebhookToken,omitempty\" graphql:\"complianceWebhookToken\""
	CreatedAt                        *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                        *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains                          []string           "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation                      *enums.Region      "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	HistoryTime                      time.Time          "json:\"historyTime\" graphql:\"historyTime\""
	ID                               string             "json:\"id\" graphql:\"id\""
	IdentityProvider                 *enums.SSOProvider "json:\"identityProvider,omitempty\" graphql:\"identityProvider\""
	IdentityProviderClientID         *string            "json:\"identityProviderClientID,omitempty\" graphql:\"identityProviderClientID\""
	IdentityProviderClientSecret     *string            "json:\"identityProviderClientSecret,omitempty\" graphql:\"identityProviderClientSecret\""
	IdentityProviderEntityID         *string            "json:\"identityProviderEntityID,omitempty\" graphql:\"identityProviderEntityID\""
	IdentityProviderLoginEnforced    bool               "json:\"identityProviderLoginEnforced\" graphql:\"identityProviderLoginEnforced\""
	IdentityProviderMetadataEndpoint *string            "json:\"identityProviderMetadataEndpoint,omitempty\" graphql:\"identityProviderMetadataEndpoint\""
	OidcDiscoveryEndpoint            *string            "json:\"oidcDiscoveryEndpoint,omitempty\" graphql:\"oidcDiscoveryEndpoint\""
	Operation                        history.OpType     "json:\"operation\" graphql:\"operation\""
	OrganizationID                   *string            "json:\"organizationID,omitempty\" graphql:\"organizationID\""
	Ref                              *string            "json:\"ref,omitempty\" graphql:\"ref\""
	Tags                             []string           "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier                    *string            "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt                        *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                        *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetAllowedEmailDomains() []string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.AllowedEmailDomains
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingAddress() *models.Address {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingAddress
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingContact() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingContact
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingEmail() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingEmail
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingNotificationsEnabled() bool {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingNotificationsEnabled
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingPhone() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingPhone
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetComplianceWebhookToken() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.ComplianceWebhookToken
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Domains
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.GeoLocation
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetIdentityProvider() *enums.SSOProvider {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.IdentityProvider
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetIdentityProviderClientID() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.IdentityProviderClientID
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetIdentityProviderClientSecret() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.IdentityProviderClientSecret
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetIdentityProviderEntityID() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.IdentityProviderEntityID
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetIdentityProviderLoginEnforced() bool {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.IdentityProviderLoginEnforced
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetIdentityProviderMetadataEndpoint() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.IdentityProviderMetadataEndpoint
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetOidcDiscoveryEndpoint() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.OidcDiscoveryEndpoint
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetOrganizationID() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.TaxIdentifier
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges struct {
	Node *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges) GetNode() *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges{}
	}
	return t.Node
}

type GetAllOrganizationSettingHistories_OrganizationSettingHistories struct {
	Edges      []*GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllOrganizationSettingHistories_OrganizationSettingHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories) GetEdges() []*GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories{}
	}
	return t.Edges
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories) GetPageInfo() *GetAllOrganizationSettingHistories_OrganizationSettingHistories_PageInfo {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories{}
	}
	return t.TotalCount
}

type GetOrganizationSettingHistories_OrganizationSettingHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node struct {
	AllowedEmailDomains              []string           "json:\"allowedEmailDomains,omitempty\" graphql:\"allowedEmailDomains\""
	BillingAddress                   *models.Address    "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact                   *string            "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail                     *string            "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingNotificationsEnabled      bool               "json:\"billingNotificationsEnabled\" graphql:\"billingNotificationsEnabled\""
	BillingPhone                     *string            "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	ComplianceWebhookToken           *string            "json:\"complianceWebhookToken,omitempty\" graphql:\"complianceWebhookToken\""
	CreatedAt                        *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                        *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains                          []string           "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation                      *enums.Region      "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	HistoryTime                      time.Time          "json:\"historyTime\" graphql:\"historyTime\""
	ID                               string             "json:\"id\" graphql:\"id\""
	IdentityProvider                 *enums.SSOProvider "json:\"identityProvider,omitempty\" graphql:\"identityProvider\""
	IdentityProviderClientID         *string            "json:\"identityProviderClientID,omitempty\" graphql:\"identityProviderClientID\""
	IdentityProviderClientSecret     *string            "json:\"identityProviderClientSecret,omitempty\" graphql:\"identityProviderClientSecret\""
	IdentityProviderEntityID         *string            "json:\"identityProviderEntityID,omitempty\" graphql:\"identityProviderEntityID\""
	IdentityProviderLoginEnforced    bool               "json:\"identityProviderLoginEnforced\" graphql:\"identityProviderLoginEnforced\""
	IdentityProviderMetadataEndpoint *string            "json:\"identityProviderMetadataEndpoint,omitempty\" graphql:\"identityProviderMetadataEndpoint\""
	OidcDiscoveryEndpoint            *string            "json:\"oidcDiscoveryEndpoint,omitempty\" graphql:\"oidcDiscoveryEndpoint\""
	Operation                        history.OpType     "json:\"operation\" graphql:\"operation\""
	OrganizationID                   *string            "json:\"organizationID,omitempty\" graphql:\"organizationID\""
	Ref                              *string            "json:\"ref,omitempty\" graphql:\"ref\""
	Tags                             []string           "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier                    *string            "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt                        *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                        *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetAllowedEmailDomains() []string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.AllowedEmailDomains
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingAddress() *models.Address {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingAddress
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingContact() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingContact
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingEmail() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingEmail
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingNotificationsEnabled() bool {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingNotificationsEnabled
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingPhone() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingPhone
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetComplianceWebhookToken() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.ComplianceWebhookToken
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Domains
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.GeoLocation
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetIdentityProvider() *enums.SSOProvider {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.IdentityProvider
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetIdentityProviderClientID() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.IdentityProviderClientID
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetIdentityProviderClientSecret() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.IdentityProviderClientSecret
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetIdentityProviderEntityID() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.IdentityProviderEntityID
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetIdentityProviderLoginEnforced() bool {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.IdentityProviderLoginEnforced
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetIdentityProviderMetadataEndpoint() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.IdentityProviderMetadataEndpoint
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetOidcDiscoveryEndpoint() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.OidcDiscoveryEndpoint
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetOrganizationID() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.TaxIdentifier
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetOrganizationSettingHistories_OrganizationSettingHistories_Edges struct {
	Node *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges) GetNode() *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges{}
	}
	return t.Node
}

type GetOrganizationSettingHistories_OrganizationSettingHistories struct {
	Edges      []*GetOrganizationSettingHistories_OrganizationSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetOrganizationSettingHistories_OrganizationSettingHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetOrganizationSettingHistories_OrganizationSettingHistories) GetEdges() []*GetOrganizationSettingHistories_OrganizationSettingHistories_Edges {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories{}
	}
	return t.Edges
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories) GetPageInfo() *GetOrganizationSettingHistories_OrganizationSettingHistories_PageInfo {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories{}
	}
	return &t.PageInfo
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership_OrgMemberships struct {
	CreatedAt      *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID             string     "json:\"id\" graphql:\"id\""
	OrganizationID string     "json:\"organizationID\" graphql:\"organizationID\""
	Role           enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt      *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID         string     "json:\"userID\" graphql:\"userID\""
}

func (t *CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership_OrgMemberships) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership_OrgMemberships{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership_OrgMemberships) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership_OrgMemberships{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership_OrgMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership_OrgMemberships{}
	}
	return t.ID
}
func (t *CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership_OrgMemberships) GetOrganizationID() string {
	if t == nil {
		t = &CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership_OrgMemberships{}
	}
	return t.OrganizationID
}
func (t *CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership_OrgMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership_OrgMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership_OrgMemberships) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership_OrgMemberships{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership_OrgMemberships) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership_OrgMemberships{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership_OrgMemberships) GetUserID() string {
	if t == nil {
		t = &CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership_OrgMemberships{}
	}
	return t.UserID
}

type CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership struct {
	OrgMemberships []*CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership_OrgMemberships "json:\"orgMemberships,omitempty\" graphql:\"orgMemberships\""
}

func (t *CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership) GetOrgMemberships() []*CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership_OrgMemberships {
	if t == nil {
		t = &CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership{}
	}
	return t.OrgMemberships
}

type CreateBulkOrgMembership_CreateBulkOrgMembership_OrgMemberships struct {
	CreatedAt      *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID             string     "json:\"id\" graphql:\"id\""
	OrganizationID string     "json:\"organizationID\" graphql:\"organizationID\""
	Role           enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt      *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID         string     "json:\"userID\" graphql:\"userID\""
}

func (t *CreateBulkOrgMembership_CreateBulkOrgMembership_OrgMemberships) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkOrgMembership_CreateBulkOrgMembership_OrgMemberships{}
	}
	return t.CreatedAt
}
func (t *CreateBulkOrgMembership_CreateBulkOrgMembership_OrgMemberships) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkOrgMembership_CreateBulkOrgMembership_OrgMemberships{}
	}
	return t.CreatedBy
}
func (t *CreateBulkOrgMembership_CreateBulkOrgMembership_OrgMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkOrgMembership_CreateBulkOrgMembership_OrgMemberships{}
	}
	return t.ID
}
func (t *CreateBulkOrgMembership_CreateBulkOrgMembership_OrgMemberships) GetOrganizationID() string {
	if t == nil {
		t = &CreateBulkOrgMembership_CreateBulkOrgMembership_OrgMemberships{}
	}
	return t.OrganizationID
}
func (t *CreateBulkOrgMembership_CreateBulkOrgMembership_OrgMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkOrgMembership_CreateBulkOrgMembership_OrgMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkOrgMembership_CreateBulkOrgMembership_OrgMemberships) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkOrgMembership_CreateBulkOrgMembership_OrgMemberships{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkOrgMembership_CreateBulkOrgMembership_OrgMemberships) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkOrgMembership_CreateBulkOrgMembership_OrgMemberships{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkOrgMembership_CreateBulkOrgMembership_OrgMemberships) GetUserID() string {
	if t == nil {
		t = &CreateBulkOrgMembership_CreateBulkOrgMembership_OrgMemberships{}
	}
	return t.UserID
}

type CreateBulkOrgMembership_CreateBulkOrgMembership struct {
	OrgMemberships []*CreateBulkOrgMembership_CreateBulkOrgMembership_OrgMemberships "json:\"orgMemberships,omitempty\" graphql:\"orgMemberships\""
}

func (t *CreateBulkOrgMembership_CreateBulkOrgMembership) GetOrgMemberships() []*CreateBulkOrgMembership_CreateBulkOrgMembership_OrgMemberships {
	if t == nil {
		t = &CreateBulkOrgMembership_CreateBulkOrgMembership{}
	}
	return t.OrgMemberships
}

type CreateOrgMembership_CreateOrgMembership_OrgMembership struct {
	CreatedAt      *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID             string     "json:\"id\" graphql:\"id\""
	OrganizationID string     "json:\"organizationID\" graphql:\"organizationID\""
	Role           enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt      *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID         string     "json:\"userID\" graphql:\"userID\""
}

func (t *CreateOrgMembership_CreateOrgMembership_OrgMembership) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateOrgMembership_CreateOrgMembership_OrgMembership{}
	}
	return t.CreatedAt
}
func (t *CreateOrgMembership_CreateOrgMembership_OrgMembership) GetCreatedBy() *string {
	if t == nil {
		t = &CreateOrgMembership_CreateOrgMembership_OrgMembership{}
	}
	return t.CreatedBy
}
func (t *CreateOrgMembership_CreateOrgMembership_OrgMembership) GetID() string {
	if t == nil {
		t = &CreateOrgMembership_CreateOrgMembership_OrgMembership{}
	}
	return t.ID
}
func (t *CreateOrgMembership_CreateOrgMembership_OrgMembership) GetOrganizationID() string {
	if t == nil {
		t = &CreateOrgMembership_CreateOrgMembership_OrgMembership{}
	}
	return t.OrganizationID
}
func (t *CreateOrgMembership_CreateOrgMembership_OrgMembership) GetRole() *enums.Role {
	if t == nil {
		t = &CreateOrgMembership_CreateOrgMembership_OrgMembership{}
	}
	return &t.Role
}
func (t *CreateOrgMembership_CreateOrgMembership_OrgMembership) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateOrgMembership_CreateOrgMembership_OrgMembership{}
	}
	return t.UpdatedAt
}
func (t *CreateOrgMembership_CreateOrgMembership_OrgMembership) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateOrgMembership_CreateOrgMembership_OrgMembership{}
	}
	return t.UpdatedBy
}
func (t *CreateOrgMembership_CreateOrgMembership_OrgMembership) GetUserID() string {
	if t == nil {
		t = &CreateOrgMembership_CreateOrgMembership_OrgMembership{}
	}
	return t.UserID
}

type CreateOrgMembership_CreateOrgMembership struct {
	OrgMembership CreateOrgMembership_CreateOrgMembership_OrgMembership "json:\"orgMembership\" graphql:\"orgMembership\""
}

func (t *CreateOrgMembership_CreateOrgMembership) GetOrgMembership() *CreateOrgMembership_CreateOrgMembership_OrgMembership {
	if t == nil {
		t = &CreateOrgMembership_CreateOrgMembership{}
	}
	return &t.OrgMembership
}

type DeleteOrgMembership_DeleteOrgMembership struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteOrgMembership_DeleteOrgMembership) GetDeletedID() string {
	if t == nil {
		t = &DeleteOrgMembership_DeleteOrgMembership{}
	}
	return t.DeletedID
}

type GetAllOrgMemberships_OrgMemberships_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllOrgMemberships_OrgMemberships_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllOrgMemberships_OrgMemberships_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllOrgMemberships_OrgMemberships_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllOrgMemberships_OrgMemberships_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllOrgMemberships_OrgMemberships_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllOrgMemberships_OrgMemberships_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllOrgMemberships_OrgMemberships_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllOrgMemberships_OrgMemberships_PageInfo{}
	}
	return t.StartCursor
}

type GetAllOrgMemberships_OrgMemberships_Edges_Node struct {
	CreatedAt      *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID             string     "json:\"id\" graphql:\"id\""
	OrganizationID string     "json:\"organizationID\" graphql:\"organizationID\""
	Role           enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt      *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID         string     "json:\"userID\" graphql:\"userID\""
}

func (t *GetAllOrgMemberships_OrgMemberships_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrgMemberships_OrgMemberships_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrgMemberships_OrgMemberships_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrgMemberships_OrgMemberships_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOrgMemberships_OrgMemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrgMemberships_OrgMemberships_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrgMemberships_OrgMemberships_Edges_Node) GetOrganizationID() string {
	if t == nil {
		t = &GetAllOrgMemberships_OrgMemberships_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetAllOrgMemberships_OrgMemberships_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllOrgMemberships_OrgMemberships_Edges_Node{}
	}
	return &t.Role
}
func (t *GetAllOrgMemberships_OrgMemberships_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrgMemberships_OrgMemberships_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrgMemberships_OrgMemberships_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrgMemberships_OrgMemberships_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllOrgMemberships_OrgMemberships_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetAllOrgMemberships_OrgMemberships_Edges_Node{}
	}
	return t.UserID
}

type GetAllOrgMemberships_OrgMemberships_Edges struct {
	Node *GetAllOrgMemberships_OrgMemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrgMemberships_OrgMemberships_Edges) GetNode() *GetAllOrgMemberships_OrgMemberships_Edges_Node {
	if t == nil {
		t = &GetAllOrgMemberships_OrgMemberships_Edges{}
	}
	return t.Node
}

type GetAllOrgMemberships_OrgMemberships struct {
	Edges      []*GetAllOrgMemberships_OrgMemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllOrgMemberships_OrgMemberships_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                        "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllOrgMemberships_OrgMemberships) GetEdges() []*GetAllOrgMemberships_OrgMemberships_Edges {
	if t == nil {
		t = &GetAllOrgMemberships_OrgMemberships{}
	}
	return t.Edges
}
func (t *GetAllOrgMemberships_OrgMemberships) GetPageInfo() *GetAllOrgMemberships_OrgMemberships_PageInfo {
	if t == nil {
		t = &GetAllOrgMemberships_OrgMemberships{}
	}
	return &t.PageInfo
}
func (t *GetAllOrgMemberships_OrgMemberships) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllOrgMemberships_OrgMemberships{}
	}
	return t.TotalCount
}

type GetOrgMembershipByID_OrgMembership struct {
	CreatedAt      *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID             string     "json:\"id\" graphql:\"id\""
	OrganizationID string     "json:\"organizationID\" graphql:\"organizationID\""
	Role           enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt      *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID         string     "json:\"userID\" graphql:\"userID\""
}

func (t *GetOrgMembershipByID_OrgMembership) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrgMembershipByID_OrgMembership{}
	}
	return t.CreatedAt
}
func (t *GetOrgMembershipByID_OrgMembership) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrgMembershipByID_OrgMembership{}
	}
	return t.CreatedBy
}
func (t *GetOrgMembershipByID_OrgMembership) GetID() string {
	if t == nil {
		t = &GetOrgMembershipByID_OrgMembership{}
	}
	return t.ID
}
func (t *GetOrgMembershipByID_OrgMembership) GetOrganizationID() string {
	if t == nil {
		t = &GetOrgMembershipByID_OrgMembership{}
	}
	return t.OrganizationID
}
func (t *GetOrgMembershipByID_OrgMembership) GetRole() *enums.Role {
	if t == nil {
		t = &GetOrgMembershipByID_OrgMembership{}
	}
	return &t.Role
}
func (t *GetOrgMembershipByID_OrgMembership) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrgMembershipByID_OrgMembership{}
	}
	return t.UpdatedAt
}
func (t *GetOrgMembershipByID_OrgMembership) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrgMembershipByID_OrgMembership{}
	}
	return t.UpdatedBy
}
func (t *GetOrgMembershipByID_OrgMembership) GetUserID() string {
	if t == nil {
		t = &GetOrgMembershipByID_OrgMembership{}
	}
	return t.UserID
}

type GetOrgMemberships_OrgMemberships_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetOrgMemberships_OrgMemberships_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetOrgMemberships_OrgMemberships_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetOrgMemberships_OrgMemberships_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetOrgMemberships_OrgMemberships_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetOrgMemberships_OrgMemberships_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetOrgMemberships_OrgMemberships_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetOrgMemberships_OrgMemberships_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetOrgMemberships_OrgMemberships_PageInfo{}
	}
	return t.StartCursor
}

type GetOrgMemberships_OrgMemberships_Edges_Node struct {
	CreatedAt      *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID             string     "json:\"id\" graphql:\"id\""
	OrganizationID string     "json:\"organizationID\" graphql:\"organizationID\""
	Role           enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt      *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID         string     "json:\"userID\" graphql:\"userID\""
}

func (t *GetOrgMemberships_OrgMemberships_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrgMemberships_OrgMemberships_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrgMemberships_OrgMemberships_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrgMemberships_OrgMemberships_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOrgMemberships_OrgMemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrgMemberships_OrgMemberships_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrgMemberships_OrgMemberships_Edges_Node) GetOrganizationID() string {
	if t == nil {
		t = &GetOrgMemberships_OrgMemberships_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetOrgMemberships_OrgMemberships_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetOrgMemberships_OrgMemberships_Edges_Node{}
	}
	return &t.Role
}
func (t *GetOrgMemberships_OrgMemberships_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrgMemberships_OrgMemberships_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOrgMemberships_OrgMemberships_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrgMemberships_OrgMemberships_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetOrgMemberships_OrgMemberships_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetOrgMemberships_OrgMemberships_Edges_Node{}
	}
	return t.UserID
}

type GetOrgMemberships_OrgMemberships_Edges struct {
	Node *GetOrgMemberships_OrgMemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrgMemberships_OrgMemberships_Edges) GetNode() *GetOrgMemberships_OrgMemberships_Edges_Node {
	if t == nil {
		t = &GetOrgMemberships_OrgMemberships_Edges{}
	}
	return t.Node
}

type GetOrgMemberships_OrgMemberships struct {
	Edges      []*GetOrgMemberships_OrgMemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetOrgMemberships_OrgMemberships_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetOrgMemberships_OrgMemberships) GetEdges() []*GetOrgMemberships_OrgMemberships_Edges {
	if t == nil {
		t = &GetOrgMemberships_OrgMemberships{}
	}
	return t.Edges
}
func (t *GetOrgMemberships_OrgMemberships) GetPageInfo() *GetOrgMemberships_OrgMemberships_PageInfo {
	if t == nil {
		t = &GetOrgMemberships_OrgMemberships{}
	}
	return &t.PageInfo
}
func (t *GetOrgMemberships_OrgMemberships) GetTotalCount() int64 {
	if t == nil {
		t = &GetOrgMemberships_OrgMemberships{}
	}
	return t.TotalCount
}

type UpdateOrgMembership_UpdateOrgMembership_OrgMembership struct {
	CreatedAt      *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID             string     "json:\"id\" graphql:\"id\""
	OrganizationID string     "json:\"organizationID\" graphql:\"organizationID\""
	Role           enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt      *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID         string     "json:\"userID\" graphql:\"userID\""
}

func (t *UpdateOrgMembership_UpdateOrgMembership_OrgMembership) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateOrgMembership_UpdateOrgMembership_OrgMembership{}
	}
	return t.CreatedAt
}
func (t *UpdateOrgMembership_UpdateOrgMembership_OrgMembership) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateOrgMembership_UpdateOrgMembership_OrgMembership{}
	}
	return t.CreatedBy
}
func (t *UpdateOrgMembership_UpdateOrgMembership_OrgMembership) GetID() string {
	if t == nil {
		t = &UpdateOrgMembership_UpdateOrgMembership_OrgMembership{}
	}
	return t.ID
}
func (t *UpdateOrgMembership_UpdateOrgMembership_OrgMembership) GetOrganizationID() string {
	if t == nil {
		t = &UpdateOrgMembership_UpdateOrgMembership_OrgMembership{}
	}
	return t.OrganizationID
}
func (t *UpdateOrgMembership_UpdateOrgMembership_OrgMembership) GetRole() *enums.Role {
	if t == nil {
		t = &UpdateOrgMembership_UpdateOrgMembership_OrgMembership{}
	}
	return &t.Role
}
func (t *UpdateOrgMembership_UpdateOrgMembership_OrgMembership) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateOrgMembership_UpdateOrgMembership_OrgMembership{}
	}
	return t.UpdatedAt
}
func (t *UpdateOrgMembership_UpdateOrgMembership_OrgMembership) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateOrgMembership_UpdateOrgMembership_OrgMembership{}
	}
	return t.UpdatedBy
}
func (t *UpdateOrgMembership_UpdateOrgMembership_OrgMembership) GetUserID() string {
	if t == nil {
		t = &UpdateOrgMembership_UpdateOrgMembership_OrgMembership{}
	}
	return t.UserID
}

type UpdateOrgMembership_UpdateOrgMembership struct {
	OrgMembership UpdateOrgMembership_UpdateOrgMembership_OrgMembership "json:\"orgMembership\" graphql:\"orgMembership\""
}

func (t *UpdateOrgMembership_UpdateOrgMembership) GetOrgMembership() *UpdateOrgMembership_UpdateOrgMembership_OrgMembership {
	if t == nil {
		t = &UpdateOrgMembership_UpdateOrgMembership{}
	}
	return &t.OrgMembership
}

type GetAllOrgMembershipHistories_OrgMembershipHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node struct {
	CreatedAt      *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime    time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID             string         "json:\"id\" graphql:\"id\""
	Operation      history.OpType "json:\"operation\" graphql:\"operation\""
	OrganizationID string         "json:\"organizationID\" graphql:\"organizationID\""
	Ref            *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Role           enums.Role     "json:\"role\" graphql:\"role\""
	UpdatedAt      *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID         string         "json:\"userID\" graphql:\"userID\""
}

func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetOrganizationID() string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.Role
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UserID
}

type GetAllOrgMembershipHistories_OrgMembershipHistories_Edges struct {
	Node *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges) GetNode() *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges{}
	}
	return t.Node
}

type GetAllOrgMembershipHistories_OrgMembershipHistories struct {
	Edges      []*GetAllOrgMembershipHistories_OrgMembershipHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllOrgMembershipHistories_OrgMembershipHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                        "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllOrgMembershipHistories_OrgMembershipHistories) GetEdges() []*GetAllOrgMembershipHistories_OrgMembershipHistories_Edges {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories{}
	}
	return t.Edges
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories) GetPageInfo() *GetAllOrgMembershipHistories_OrgMembershipHistories_PageInfo {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories{}
	}
	return t.TotalCount
}

type GetOrgMembershipHistories_OrgMembershipHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetOrgMembershipHistories_OrgMembershipHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node struct {
	CreatedAt      *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime    time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID             string         "json:\"id\" graphql:\"id\""
	Operation      history.OpType "json:\"operation\" graphql:\"operation\""
	OrganizationID string         "json:\"organizationID\" graphql:\"organizationID\""
	Ref            *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Role           enums.Role     "json:\"role\" graphql:\"role\""
	UpdatedAt      *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID         string         "json:\"userID\" graphql:\"userID\""
}

func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetOrganizationID() string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.Role
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UserID
}

type GetOrgMembershipHistories_OrgMembershipHistories_Edges struct {
	Node *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges) GetNode() *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges{}
	}
	return t.Node
}

type GetOrgMembershipHistories_OrgMembershipHistories struct {
	Edges      []*GetOrgMembershipHistories_OrgMembershipHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetOrgMembershipHistories_OrgMembershipHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetOrgMembershipHistories_OrgMembershipHistories) GetEdges() []*GetOrgMembershipHistories_OrgMembershipHistories_Edges {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories{}
	}
	return t.Edges
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories) GetPageInfo() *GetOrgMembershipHistories_OrgMembershipHistories_PageInfo {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories{}
	}
	return &t.PageInfo
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories{}
	}
	return t.TotalCount
}

type GetAllOrgSubscriptions_OrgSubscriptions_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllOrgSubscriptions_OrgSubscriptions_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_PageInfo{}
	}
	return t.StartCursor
}

type GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node struct {
	Active                   bool       "json:\"active\" graphql:\"active\""
	CreatedAt                *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DaysUntilDue             *string    "json:\"daysUntilDue,omitempty\" graphql:\"daysUntilDue\""
	ExpiresAt                *time.Time "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID                       string     "json:\"id\" graphql:\"id\""
	OwnerID                  *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	StripeSubscriptionID     *string    "json:\"stripeSubscriptionID,omitempty\" graphql:\"stripeSubscriptionID\""
	StripeSubscriptionStatus *string    "json:\"stripeSubscriptionStatus,omitempty\" graphql:\"stripeSubscriptionStatus\""
	Tags                     []string   "json:\"tags,omitempty\" graphql:\"tags\""
	TrialExpiresAt           *time.Time "json:\"trialExpiresAt,omitempty\" graphql:\"trialExpiresAt\""
	UpdatedAt                *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetActive() bool {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.Active
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetDaysUntilDue() *string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.DaysUntilDue
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetStripeSubscriptionID() *string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.StripeSubscriptionID
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetStripeSubscriptionStatus() *string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.StripeSubscriptionStatus
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetTrialExpiresAt() *time.Time {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.TrialExpiresAt
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllOrgSubscriptions_OrgSubscriptions_Edges struct {
	Node *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges) GetNode() *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges{}
	}
	return t.Node
}

type GetAllOrgSubscriptions_OrgSubscriptions struct {
	Edges      []*GetAllOrgSubscriptions_OrgSubscriptions_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllOrgSubscriptions_OrgSubscriptions_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                            "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllOrgSubscriptions_OrgSubscriptions) GetEdges() []*GetAllOrgSubscriptions_OrgSubscriptions_Edges {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions{}
	}
	return t.Edges
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions) GetPageInfo() *GetAllOrgSubscriptions_OrgSubscriptions_PageInfo {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions{}
	}
	return &t.PageInfo
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions{}
	}
	return t.TotalCount
}

type GetOrgSubscriptionByID_OrgSubscription struct {
	Active                   bool       "json:\"active\" graphql:\"active\""
	CreatedAt                *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DaysUntilDue             *string    "json:\"daysUntilDue,omitempty\" graphql:\"daysUntilDue\""
	ExpiresAt                *time.Time "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID                       string     "json:\"id\" graphql:\"id\""
	OwnerID                  *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	StripeSubscriptionID     *string    "json:\"stripeSubscriptionID,omitempty\" graphql:\"stripeSubscriptionID\""
	StripeSubscriptionStatus *string    "json:\"stripeSubscriptionStatus,omitempty\" graphql:\"stripeSubscriptionStatus\""
	Tags                     []string   "json:\"tags,omitempty\" graphql:\"tags\""
	TrialExpiresAt           *time.Time "json:\"trialExpiresAt,omitempty\" graphql:\"trialExpiresAt\""
	UpdatedAt                *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrgSubscriptionByID_OrgSubscription) GetActive() bool {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.Active
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.CreatedAt
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.CreatedBy
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetDaysUntilDue() *string {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.DaysUntilDue
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.ExpiresAt
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetID() string {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.ID
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetOwnerID() *string {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.OwnerID
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetStripeSubscriptionID() *string {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.StripeSubscriptionID
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetStripeSubscriptionStatus() *string {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.StripeSubscriptionStatus
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetTags() []string {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.Tags
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetTrialExpiresAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.TrialExpiresAt
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.UpdatedAt
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.UpdatedBy
}

type GetOrgSubscriptions_OrgSubscriptions_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetOrgSubscriptions_OrgSubscriptions_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetOrgSubscriptions_OrgSubscriptions_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetOrgSubscriptions_OrgSubscriptions_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetOrgSubscriptions_OrgSubscriptions_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_PageInfo{}
	}
	return t.StartCursor
}

type GetOrgSubscriptions_OrgSubscriptions_Edges_Node struct {
	Active                   bool       "json:\"active\" graphql:\"active\""
	CreatedAt                *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DaysUntilDue             *string    "json:\"daysUntilDue,omitempty\" graphql:\"daysUntilDue\""
	ExpiresAt                *time.Time "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID                       string     "json:\"id\" graphql:\"id\""
	OwnerID                  *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	StripeSubscriptionID     *string    "json:\"stripeSubscriptionID,omitempty\" graphql:\"stripeSubscriptionID\""
	StripeSubscriptionStatus *string    "json:\"stripeSubscriptionStatus,omitempty\" graphql:\"stripeSubscriptionStatus\""
	Tags                     []string   "json:\"tags,omitempty\" graphql:\"tags\""
	TrialExpiresAt           *time.Time "json:\"trialExpiresAt,omitempty\" graphql:\"trialExpiresAt\""
	UpdatedAt                *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetActive() bool {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.Active
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetDaysUntilDue() *string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.DaysUntilDue
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetStripeSubscriptionID() *string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.StripeSubscriptionID
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetStripeSubscriptionStatus() *string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.StripeSubscriptionStatus
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.Tags
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetTrialExpiresAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.TrialExpiresAt
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetOrgSubscriptions_OrgSubscriptions_Edges struct {
	Node *GetOrgSubscriptions_OrgSubscriptions_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrgSubscriptions_OrgSubscriptions_Edges) GetNode() *GetOrgSubscriptions_OrgSubscriptions_Edges_Node {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges{}
	}
	return t.Node
}

type GetOrgSubscriptions_OrgSubscriptions struct {
	Edges      []*GetOrgSubscriptions_OrgSubscriptions_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetOrgSubscriptions_OrgSubscriptions_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetOrgSubscriptions_OrgSubscriptions) GetEdges() []*GetOrgSubscriptions_OrgSubscriptions_Edges {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions{}
	}
	return t.Edges
}
func (t *GetOrgSubscriptions_OrgSubscriptions) GetPageInfo() *GetOrgSubscriptions_OrgSubscriptions_PageInfo {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions{}
	}
	return &t.PageInfo
}
func (t *GetOrgSubscriptions_OrgSubscriptions) GetTotalCount() int64 {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions{}
	}
	return t.TotalCount
}

type GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node struct {
	Active                   bool           "json:\"active\" graphql:\"active\""
	CreatedAt                *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DaysUntilDue             *string        "json:\"daysUntilDue,omitempty\" graphql:\"daysUntilDue\""
	ExpiresAt                *time.Time     "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	HistoryTime              time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID                       string         "json:\"id\" graphql:\"id\""
	Operation                history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID                  *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                      *string        "json:\"ref,omitempty\" graphql:\"ref\""
	StripeSubscriptionID     *string        "json:\"stripeSubscriptionID,omitempty\" graphql:\"stripeSubscriptionID\""
	StripeSubscriptionStatus *string        "json:\"stripeSubscriptionStatus,omitempty\" graphql:\"stripeSubscriptionStatus\""
	Tags                     []string       "json:\"tags,omitempty\" graphql:\"tags\""
	TrialExpiresAt           *time.Time     "json:\"trialExpiresAt,omitempty\" graphql:\"trialExpiresAt\""
	UpdatedAt                *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetActive() bool {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.Active
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetDaysUntilDue() *string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.DaysUntilDue
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetStripeSubscriptionID() *string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.StripeSubscriptionID
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetStripeSubscriptionStatus() *string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.StripeSubscriptionStatus
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetTrialExpiresAt() *time.Time {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.TrialExpiresAt
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges struct {
	Node *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges) GetNode() *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges{}
	}
	return t.Node
}

type GetAllOrgSubscriptionHistories_OrgSubscriptionHistories struct {
	Edges      []*GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                            "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories) GetEdges() []*GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories{}
	}
	return t.Edges
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories) GetPageInfo() *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_PageInfo {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories{}
	}
	return t.TotalCount
}

type GetOrgSubscriptionHistories_OrgSubscriptionHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node struct {
	Active                   bool           "json:\"active\" graphql:\"active\""
	CreatedAt                *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DaysUntilDue             *string        "json:\"daysUntilDue,omitempty\" graphql:\"daysUntilDue\""
	ExpiresAt                *time.Time     "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	HistoryTime              time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID                       string         "json:\"id\" graphql:\"id\""
	Operation                history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID                  *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                      *string        "json:\"ref,omitempty\" graphql:\"ref\""
	StripeSubscriptionID     *string        "json:\"stripeSubscriptionID,omitempty\" graphql:\"stripeSubscriptionID\""
	StripeSubscriptionStatus *string        "json:\"stripeSubscriptionStatus,omitempty\" graphql:\"stripeSubscriptionStatus\""
	Tags                     []string       "json:\"tags,omitempty\" graphql:\"tags\""
	TrialExpiresAt           *time.Time     "json:\"trialExpiresAt,omitempty\" graphql:\"trialExpiresAt\""
	UpdatedAt                *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetActive() bool {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.Active
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetDaysUntilDue() *string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.DaysUntilDue
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetStripeSubscriptionID() *string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.StripeSubscriptionID
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetStripeSubscriptionStatus() *string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.StripeSubscriptionStatus
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetTrialExpiresAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.TrialExpiresAt
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges struct {
	Node *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges) GetNode() *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges{}
	}
	return t.Node
}

type GetOrgSubscriptionHistories_OrgSubscriptionHistories struct {
	Edges      []*GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetOrgSubscriptionHistories_OrgSubscriptionHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories) GetEdges() []*GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories{}
	}
	return t.Edges
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories) GetPageInfo() *GetOrgSubscriptionHistories_OrgSubscriptionHistories_PageInfo {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories{}
	}
	return &t.PageInfo
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories{}
	}
	return t.TotalCount
}

type CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node{}
	}
	return t.DisplayName
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node{}
	}
	return t.Name
}

type CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges struct {
	Node *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges) GetNode() *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges{}
	}
	return t.Node
}

type CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations struct {
	Edges []*CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations) GetEdges() []*CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations{}
	}
	return t.Edges
}

type CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken struct {
	CreatedAt         *time.Time                                                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string                                                                               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description       *string                                                                               "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt         *time.Time                                                                            "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID                string                                                                                "json:\"id\" graphql:\"id\""
	IsActive          *bool                                                                                 "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt        *time.Time                                                                            "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name              string                                                                                "json:\"name\" graphql:\"name\""
	Organizations     CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations "json:\"organizations\" graphql:\"organizations\""
	RevokedAt         *time.Time                                                                            "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy         *string                                                                               "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason     *string                                                                               "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes            []string                                                                              "json:\"scopes,omitempty\" graphql:\"scopes\""
	SsoAuthorizations *string                                                                               "json:\"ssoAuthorizations,omitempty\" graphql:\"ssoAuthorizations\""
	Tags              []string                                                                              "json:\"tags,omitempty\" graphql:\"tags\""
	Token             string                                                                                "json:\"token\" graphql:\"token\""
	UpdatedAt         *time.Time                                                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string                                                                               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.CreatedAt
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetCreatedBy() *string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.CreatedBy
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetDescription() *string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Description
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.ExpiresAt
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.ID
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetIsActive() *bool {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.IsActive
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.LastUsedAt
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetName() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Name
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetOrganizations() *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return &t.Organizations
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetRevokedAt() *time.Time {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.RevokedAt
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetRevokedBy() *string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.RevokedBy
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetRevokedReason() *string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.RevokedReason
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetScopes() []string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Scopes
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetSsoAuthorizations() *string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.SsoAuthorizations
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetTags() []string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Tags
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetToken() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Token
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.UpdatedAt
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetUpdatedBy() *string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.UpdatedBy
}

type CreatePersonalAccessToken_CreatePersonalAccessToken struct {
	PersonalAccessToken CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken "json:\"personalAccessToken\" graphql:\"personalAccessToken\""
}

func (t *CreatePersonalAccessToken_CreatePersonalAccessToken) GetPersonalAccessToken() *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken{}
	}
	return &t.PersonalAccessToken
}

type DeletePersonalAccessToken_DeletePersonalAccessToken struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeletePersonalAccessToken_DeletePersonalAccessToken) GetDeletedID() string {
	if t == nil {
		t = &DeletePersonalAccessToken_DeletePersonalAccessToken{}
	}
	return t.DeletedID
}

type GetAllPersonalAccessTokens_PersonalAccessTokens_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_PageInfo{}
	}
	return t.StartCursor
}

type GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node{}
	}
	return t.Name
}

type GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges struct {
	Node *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges) GetNode() *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges{}
	}
	return t.Node
}

type GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations struct {
	Edges []*GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations) GetEdges() []*GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations{}
	}
	return t.Edges
}

type GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node struct {
	CreatedAt         *time.Time                                                               "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string                                                                  "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description       *string                                                                  "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt         *time.Time                                                               "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID                string                                                                   "json:\"id\" graphql:\"id\""
	IsActive          *bool                                                                    "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt        *time.Time                                                               "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name              string                                                                   "json:\"name\" graphql:\"name\""
	Organizations     GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations "json:\"organizations\" graphql:\"organizations\""
	RevokedAt         *time.Time                                                               "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy         *string                                                                  "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason     *string                                                                  "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes            []string                                                                 "json:\"scopes,omitempty\" graphql:\"scopes\""
	SsoAuthorizations *string                                                                  "json:\"ssoAuthorizations,omitempty\" graphql:\"ssoAuthorizations\""
	Tags              []string                                                                 "json:\"tags,omitempty\" graphql:\"tags\""
	Token             string                                                                   "json:\"token\" graphql:\"token\""
	UpdatedAt         *time.Time                                                               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string                                                                  "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetIsActive() *bool {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.IsActive
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.LastUsedAt
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetOrganizations() *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return &t.Organizations
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetRevokedAt() *time.Time {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.RevokedAt
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetRevokedBy() *string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.RevokedBy
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetRevokedReason() *string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.RevokedReason
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetScopes() []string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Scopes
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetSsoAuthorizations() *string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.SsoAuthorizations
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetToken() string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Token
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllPersonalAccessTokens_PersonalAccessTokens_Edges struct {
	Node *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges) GetNode() *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges{}
	}
	return t.Node
}

type GetAllPersonalAccessTokens_PersonalAccessTokens struct {
	Edges      []*GetAllPersonalAccessTokens_PersonalAccessTokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllPersonalAccessTokens_PersonalAccessTokens_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllPersonalAccessTokens_PersonalAccessTokens) GetEdges() []*GetAllPersonalAccessTokens_PersonalAccessTokens_Edges {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens{}
	}
	return t.Edges
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens) GetPageInfo() *GetAllPersonalAccessTokens_PersonalAccessTokens_PageInfo {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens{}
	}
	return &t.PageInfo
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens{}
	}
	return t.TotalCount
}

type GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges_Node struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges_Node{}
	}
	return t.Name
}

type GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges struct {
	Node *GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges) GetNode() *GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges_Node {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges{}
	}
	return t.Node
}

type GetPersonalAccessTokenByID_PersonalAccessToken_Organizations struct {
	Edges []*GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetPersonalAccessTokenByID_PersonalAccessToken_Organizations) GetEdges() []*GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken_Organizations{}
	}
	return t.Edges
}

type GetPersonalAccessTokenByID_PersonalAccessToken struct {
	CreatedAt         *time.Time                                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string                                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description       *string                                                      "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt         *time.Time                                                   "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID                string                                                       "json:\"id\" graphql:\"id\""
	IsActive          *bool                                                        "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt        *time.Time                                                   "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name              string                                                       "json:\"name\" graphql:\"name\""
	Organizations     GetPersonalAccessTokenByID_PersonalAccessToken_Organizations "json:\"organizations\" graphql:\"organizations\""
	RevokedAt         *time.Time                                                   "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy         *string                                                      "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason     *string                                                      "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes            []string                                                     "json:\"scopes,omitempty\" graphql:\"scopes\""
	SsoAuthorizations *string                                                      "json:\"ssoAuthorizations,omitempty\" graphql:\"ssoAuthorizations\""
	Tags              []string                                                     "json:\"tags,omitempty\" graphql:\"tags\""
	Token             string                                                       "json:\"token\" graphql:\"token\""
	UpdatedAt         *time.Time                                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string                                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.CreatedAt
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetCreatedBy() *string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.CreatedBy
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetDescription() *string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.Description
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.ExpiresAt
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.ID
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetIsActive() *bool {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.IsActive
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.LastUsedAt
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetName() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.Name
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetOrganizations() *GetPersonalAccessTokenByID_PersonalAccessToken_Organizations {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return &t.Organizations
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetRevokedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.RevokedAt
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetRevokedBy() *string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.RevokedBy
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetRevokedReason() *string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.RevokedReason
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetScopes() []string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.Scopes
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetSsoAuthorizations() *string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.SsoAuthorizations
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetTags() []string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.Tags
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetToken() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.Token
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.UpdatedAt
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetUpdatedBy() *string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.UpdatedBy
}

type GetPersonalAccessTokens_PersonalAccessTokens_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetPersonalAccessTokens_PersonalAccessTokens_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_PageInfo{}
	}
	return t.StartCursor
}

type GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node{}
	}
	return t.Name
}

type GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges struct {
	Node *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges) GetNode() *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges{}
	}
	return t.Node
}

type GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations struct {
	Edges []*GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations) GetEdges() []*GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations{}
	}
	return t.Edges
}

type GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node struct {
	CreatedAt         *time.Time                                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string                                                               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description       *string                                                               "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt         *time.Time                                                            "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID                string                                                                "json:\"id\" graphql:\"id\""
	IsActive          *bool                                                                 "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt        *time.Time                                                            "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name              string                                                                "json:\"name\" graphql:\"name\""
	Organizations     GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations "json:\"organizations\" graphql:\"organizations\""
	RevokedAt         *time.Time                                                            "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy         *string                                                               "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason     *string                                                               "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes            []string                                                              "json:\"scopes,omitempty\" graphql:\"scopes\""
	SsoAuthorizations *string                                                               "json:\"ssoAuthorizations,omitempty\" graphql:\"ssoAuthorizations\""
	Tags              []string                                                              "json:\"tags,omitempty\" graphql:\"tags\""
	Token             string                                                                "json:\"token\" graphql:\"token\""
	UpdatedAt         *time.Time                                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string                                                               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Description
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.ID
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetIsActive() *bool {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.IsActive
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.LastUsedAt
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetName() string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Name
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetOrganizations() *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return &t.Organizations
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetRevokedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.RevokedAt
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetRevokedBy() *string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.RevokedBy
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetRevokedReason() *string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.RevokedReason
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetScopes() []string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Scopes
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetSsoAuthorizations() *string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.SsoAuthorizations
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Tags
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetToken() string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Token
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetPersonalAccessTokens_PersonalAccessTokens_Edges struct {
	Node *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges) GetNode() *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges{}
	}
	return t.Node
}

type GetPersonalAccessTokens_PersonalAccessTokens struct {
	Edges      []*GetPersonalAccessTokens_PersonalAccessTokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetPersonalAccessTokens_PersonalAccessTokens_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetPersonalAccessTokens_PersonalAccessTokens) GetEdges() []*GetPersonalAccessTokens_PersonalAccessTokens_Edges {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens{}
	}
	return t.Edges
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens) GetPageInfo() *GetPersonalAccessTokens_PersonalAccessTokens_PageInfo {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens{}
	}
	return &t.PageInfo
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens) GetTotalCount() int64 {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens{}
	}
	return t.TotalCount
}

type UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node{}
	}
	return t.DisplayName
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node{}
	}
	return t.Name
}

type UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges struct {
	Node *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges) GetNode() *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges{}
	}
	return t.Node
}

type UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations struct {
	Edges []*UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations) GetEdges() []*UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations{}
	}
	return t.Edges
}

type UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken struct {
	CreatedAt         *time.Time                                                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string                                                                               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description       *string                                                                               "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt         *time.Time                                                                            "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID                string                                                                                "json:\"id\" graphql:\"id\""
	IsActive          *bool                                                                                 "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt        *time.Time                                                                            "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name              string                                                                                "json:\"name\" graphql:\"name\""
	Organizations     UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations "json:\"organizations\" graphql:\"organizations\""
	RevokedAt         *time.Time                                                                            "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy         *string                                                                               "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason     *string                                                                               "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes            []string                                                                              "json:\"scopes,omitempty\" graphql:\"scopes\""
	SsoAuthorizations *string                                                                               "json:\"ssoAuthorizations,omitempty\" graphql:\"ssoAuthorizations\""
	Tags              []string                                                                              "json:\"tags,omitempty\" graphql:\"tags\""
	Token             string                                                                                "json:\"token\" graphql:\"token\""
	UpdatedAt         *time.Time                                                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string                                                                               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.CreatedAt
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetCreatedBy() *string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.CreatedBy
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetDescription() *string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Description
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.ExpiresAt
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.ID
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetIsActive() *bool {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.IsActive
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.LastUsedAt
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetName() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Name
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetOrganizations() *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return &t.Organizations
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetRevokedAt() *time.Time {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.RevokedAt
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetRevokedBy() *string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.RevokedBy
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetRevokedReason() *string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.RevokedReason
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetScopes() []string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Scopes
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetSsoAuthorizations() *string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.SsoAuthorizations
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetTags() []string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Tags
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetToken() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Token
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.UpdatedAt
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.UpdatedBy
}

type UpdatePersonalAccessToken_UpdatePersonalAccessToken struct {
	PersonalAccessToken UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken "json:\"personalAccessToken\" graphql:\"personalAccessToken\""
}

func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken) GetPersonalAccessToken() *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken{}
	}
	return &t.PersonalAccessToken
}

type CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures struct {
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DisplayID                       string                "json:\"displayID\" graphql:\"displayID\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProcedureType                   *string               "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetApprovalRequired() *bool {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.ApprovalRequired
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetApproverID() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.ApproverID
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetControlSuggestions() []string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.ControlSuggestions
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetDelegateID() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.DelegateID
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetDetails() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.Details
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.DismissedControlSuggestions
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.DismissedTagSuggestions
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.DisplayID
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetID() string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.ID
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetImprovementSuggestions() []string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.ImprovementSuggestions
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetName() string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.Name
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetProcedureType() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.ProcedureType
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetReviewDue() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.ReviewDue
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.ReviewFrequency
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetRevision() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.Revision
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.Status
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetSummary() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.Summary
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetTagSuggestions() []string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.TagSuggestions
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.Tags
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVProcedure_CreateBulkCSVProcedure struct {
	Procedures []*CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures "json:\"procedures,omitempty\" graphql:\"procedures\""
}

func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure) GetProcedures() []*CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure{}
	}
	return t.Procedures
}

type CreateBulkProcedure_CreateBulkProcedure_Procedures struct {
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DisplayID                       string                "json:\"displayID\" graphql:\"displayID\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProcedureType                   *string               "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetApprovalRequired() *bool {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.ApprovalRequired
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetApproverID() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.ApproverID
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetControlSuggestions() []string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.ControlSuggestions
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.CreatedAt
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.CreatedBy
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetDelegateID() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.DelegateID
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetDetails() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.Details
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.DismissedControlSuggestions
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.DismissedTagSuggestions
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.DisplayID
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetID() string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.ID
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetImprovementSuggestions() []string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.ImprovementSuggestions
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetName() string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.Name
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.OwnerID
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetProcedureType() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.ProcedureType
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetReviewDue() *time.Time {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.ReviewDue
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.ReviewFrequency
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetRevision() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.Revision
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.Status
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetSummary() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.Summary
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetTagSuggestions() []string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.TagSuggestions
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetTags() []string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.Tags
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.UpdatedBy
}

type CreateBulkProcedure_CreateBulkProcedure struct {
	Procedures []*CreateBulkProcedure_CreateBulkProcedure_Procedures "json:\"procedures,omitempty\" graphql:\"procedures\""
}

func (t *CreateBulkProcedure_CreateBulkProcedure) GetProcedures() []*CreateBulkProcedure_CreateBulkProcedure_Procedures {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure{}
	}
	return t.Procedures
}

type CreateProcedure_CreateProcedure_Procedure struct {
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DisplayID                       string                "json:\"displayID\" graphql:\"displayID\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProcedureType                   *string               "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateProcedure_CreateProcedure_Procedure) GetApprovalRequired() *bool {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.ApprovalRequired
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetApproverID() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.ApproverID
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetControlSuggestions() []string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.ControlSuggestions
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.CreatedAt
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetCreatedBy() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.CreatedBy
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetDelegateID() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.DelegateID
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetDetails() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.Details
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.DismissedControlSuggestions
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.DismissedTagSuggestions
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetDisplayID() string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.DisplayID
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetID() string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.ID
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetImprovementSuggestions() []string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.ImprovementSuggestions
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetName() string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.Name
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetOwnerID() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.OwnerID
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetProcedureType() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.ProcedureType
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetReviewDue() *time.Time {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.ReviewDue
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.ReviewFrequency
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetRevision() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.Revision
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.Status
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetSummary() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.Summary
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetTagSuggestions() []string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.TagSuggestions
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetTags() []string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.Tags
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.UpdatedAt
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.UpdatedBy
}

type CreateProcedure_CreateProcedure struct {
	Procedure CreateProcedure_CreateProcedure_Procedure "json:\"procedure\" graphql:\"procedure\""
}

func (t *CreateProcedure_CreateProcedure) GetProcedure() *CreateProcedure_CreateProcedure_Procedure {
	if t == nil {
		t = &CreateProcedure_CreateProcedure{}
	}
	return &t.Procedure
}

type CreateUploadProcedure_CreateUploadProcedure_Procedure struct {
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DisplayID                       string                "json:\"displayID\" graphql:\"displayID\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProcedureType                   *string               "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetApprovalRequired() *bool {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.ApprovalRequired
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetApproverID() *string {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.ApproverID
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetControlSuggestions() []string {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.ControlSuggestions
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.CreatedAt
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetCreatedBy() *string {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.CreatedBy
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetDelegateID() *string {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.DelegateID
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetDetails() *string {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.Details
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.DismissedControlSuggestions
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.DismissedTagSuggestions
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetDisplayID() string {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.DisplayID
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetID() string {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.ID
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetImprovementSuggestions() []string {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.ImprovementSuggestions
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetName() string {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.Name
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetOwnerID() *string {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.OwnerID
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetProcedureType() *string {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.ProcedureType
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetReviewDue() *time.Time {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.ReviewDue
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.ReviewFrequency
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetRevision() *string {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.Revision
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.Status
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetSummary() *string {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.Summary
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetTagSuggestions() []string {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.TagSuggestions
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetTags() []string {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.Tags
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.UpdatedAt
}
func (t *CreateUploadProcedure_CreateUploadProcedure_Procedure) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure_Procedure{}
	}
	return t.UpdatedBy
}

type CreateUploadProcedure_CreateUploadProcedure struct {
	Procedure CreateUploadProcedure_CreateUploadProcedure_Procedure "json:\"procedure\" graphql:\"procedure\""
}

func (t *CreateUploadProcedure_CreateUploadProcedure) GetProcedure() *CreateUploadProcedure_CreateUploadProcedure_Procedure {
	if t == nil {
		t = &CreateUploadProcedure_CreateUploadProcedure{}
	}
	return &t.Procedure
}

type DeleteProcedure_DeleteProcedure struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteProcedure_DeleteProcedure) GetDeletedID() string {
	if t == nil {
		t = &DeleteProcedure_DeleteProcedure{}
	}
	return t.DeletedID
}

type GetAllProcedures_Procedures_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllProcedures_Procedures_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllProcedures_Procedures_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllProcedures_Procedures_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllProcedures_Procedures_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllProcedures_Procedures_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllProcedures_Procedures_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_PageInfo{}
	}
	return t.StartCursor
}

type GetAllProcedures_Procedures_Edges_Node struct {
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DisplayID                       string                "json:\"displayID\" graphql:\"displayID\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProcedureType                   *string               "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllProcedures_Procedures_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetApproverID() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.ApproverID
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetControlSuggestions() []string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.ControlSuggestions
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.DismissedControlSuggestions
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.DismissedTagSuggestions
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetImprovementSuggestions() []string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.ImprovementSuggestions
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetProcedureType() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.ProcedureType
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.Revision
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetSummary() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.Summary
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetTagSuggestions() []string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.TagSuggestions
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllProcedures_Procedures_Edges struct {
	Node *GetAllProcedures_Procedures_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllProcedures_Procedures_Edges) GetNode() *GetAllProcedures_Procedures_Edges_Node {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges{}
	}
	return t.Node
}

type GetAllProcedures_Procedures struct {
	Edges      []*GetAllProcedures_Procedures_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllProcedures_Procedures_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllProcedures_Procedures) GetEdges() []*GetAllProcedures_Procedures_Edges {
	if t == nil {
		t = &GetAllProcedures_Procedures{}
	}
	return t.Edges
}
func (t *GetAllProcedures_Procedures) GetPageInfo() *GetAllProcedures_Procedures_PageInfo {
	if t == nil {
		t = &GetAllProcedures_Procedures{}
	}
	return &t.PageInfo
}
func (t *GetAllProcedures_Procedures) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllProcedures_Procedures{}
	}
	return t.TotalCount
}

type GetProcedureByID_Procedure struct {
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DisplayID                       string                "json:\"displayID\" graphql:\"displayID\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProcedureType                   *string               "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetProcedureByID_Procedure) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.ApprovalRequired
}
func (t *GetProcedureByID_Procedure) GetApproverID() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.ApproverID
}
func (t *GetProcedureByID_Procedure) GetControlSuggestions() []string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.ControlSuggestions
}
func (t *GetProcedureByID_Procedure) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.CreatedAt
}
func (t *GetProcedureByID_Procedure) GetCreatedBy() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.CreatedBy
}
func (t *GetProcedureByID_Procedure) GetDelegateID() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.DelegateID
}
func (t *GetProcedureByID_Procedure) GetDetails() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.Details
}
func (t *GetProcedureByID_Procedure) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.DismissedControlSuggestions
}
func (t *GetProcedureByID_Procedure) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *GetProcedureByID_Procedure) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.DismissedTagSuggestions
}
func (t *GetProcedureByID_Procedure) GetDisplayID() string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.DisplayID
}
func (t *GetProcedureByID_Procedure) GetID() string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.ID
}
func (t *GetProcedureByID_Procedure) GetImprovementSuggestions() []string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.ImprovementSuggestions
}
func (t *GetProcedureByID_Procedure) GetName() string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.Name
}
func (t *GetProcedureByID_Procedure) GetOwnerID() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.OwnerID
}
func (t *GetProcedureByID_Procedure) GetProcedureType() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.ProcedureType
}
func (t *GetProcedureByID_Procedure) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.ReviewDue
}
func (t *GetProcedureByID_Procedure) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.ReviewFrequency
}
func (t *GetProcedureByID_Procedure) GetRevision() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.Revision
}
func (t *GetProcedureByID_Procedure) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.Status
}
func (t *GetProcedureByID_Procedure) GetSummary() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.Summary
}
func (t *GetProcedureByID_Procedure) GetTagSuggestions() []string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.TagSuggestions
}
func (t *GetProcedureByID_Procedure) GetTags() []string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.Tags
}
func (t *GetProcedureByID_Procedure) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.UpdatedAt
}
func (t *GetProcedureByID_Procedure) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.UpdatedBy
}

type GetProcedures_Procedures_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetProcedures_Procedures_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetProcedures_Procedures_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetProcedures_Procedures_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetProcedures_Procedures_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetProcedures_Procedures_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetProcedures_Procedures_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetProcedures_Procedures_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetProcedures_Procedures_PageInfo{}
	}
	return t.StartCursor
}

type GetProcedures_Procedures_Edges_Node struct {
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DisplayID                       string                "json:\"displayID\" graphql:\"displayID\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProcedureType                   *string               "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetProcedures_Procedures_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetProcedures_Procedures_Edges_Node) GetApproverID() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.ApproverID
}
func (t *GetProcedures_Procedures_Edges_Node) GetControlSuggestions() []string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.ControlSuggestions
}
func (t *GetProcedures_Procedures_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetProcedures_Procedures_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetProcedures_Procedures_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetProcedures_Procedures_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.Details
}
func (t *GetProcedures_Procedures_Edges_Node) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.DismissedControlSuggestions
}
func (t *GetProcedures_Procedures_Edges_Node) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *GetProcedures_Procedures_Edges_Node) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.DismissedTagSuggestions
}
func (t *GetProcedures_Procedures_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetProcedures_Procedures_Edges_Node) GetID() string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.ID
}
func (t *GetProcedures_Procedures_Edges_Node) GetImprovementSuggestions() []string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.ImprovementSuggestions
}
func (t *GetProcedures_Procedures_Edges_Node) GetName() string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.Name
}
func (t *GetProcedures_Procedures_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetProcedures_Procedures_Edges_Node) GetProcedureType() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.ProcedureType
}
func (t *GetProcedures_Procedures_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetProcedures_Procedures_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetProcedures_Procedures_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.Revision
}
func (t *GetProcedures_Procedures_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.Status
}
func (t *GetProcedures_Procedures_Edges_Node) GetSummary() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.Summary
}
func (t *GetProcedures_Procedures_Edges_Node) GetTagSuggestions() []string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.TagSuggestions
}
func (t *GetProcedures_Procedures_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.Tags
}
func (t *GetProcedures_Procedures_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetProcedures_Procedures_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetProcedures_Procedures_Edges struct {
	Node *GetProcedures_Procedures_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetProcedures_Procedures_Edges) GetNode() *GetProcedures_Procedures_Edges_Node {
	if t == nil {
		t = &GetProcedures_Procedures_Edges{}
	}
	return t.Node
}

type GetProcedures_Procedures struct {
	Edges      []*GetProcedures_Procedures_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetProcedures_Procedures_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                             "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetProcedures_Procedures) GetEdges() []*GetProcedures_Procedures_Edges {
	if t == nil {
		t = &GetProcedures_Procedures{}
	}
	return t.Edges
}
func (t *GetProcedures_Procedures) GetPageInfo() *GetProcedures_Procedures_PageInfo {
	if t == nil {
		t = &GetProcedures_Procedures{}
	}
	return &t.PageInfo
}
func (t *GetProcedures_Procedures) GetTotalCount() int64 {
	if t == nil {
		t = &GetProcedures_Procedures{}
	}
	return t.TotalCount
}

type UpdateProcedure_UpdateProcedure_Procedure struct {
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DisplayID                       string                "json:\"displayID\" graphql:\"displayID\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProcedureType                   *string               "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateProcedure_UpdateProcedure_Procedure) GetApprovalRequired() *bool {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.ApprovalRequired
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetApproverID() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.ApproverID
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetControlSuggestions() []string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.ControlSuggestions
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.CreatedAt
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.CreatedBy
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetDelegateID() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.DelegateID
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetDetails() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.Details
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.DismissedControlSuggestions
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.DismissedTagSuggestions
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetDisplayID() string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.DisplayID
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetID() string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.ID
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetImprovementSuggestions() []string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.ImprovementSuggestions
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetName() string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.Name
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetOwnerID() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.OwnerID
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetProcedureType() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.ProcedureType
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetReviewDue() *time.Time {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.ReviewDue
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.ReviewFrequency
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetRevision() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.Revision
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.Status
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetSummary() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.Summary
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetTagSuggestions() []string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.TagSuggestions
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetTags() []string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.Tags
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.UpdatedAt
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.UpdatedBy
}

type UpdateProcedure_UpdateProcedure struct {
	Procedure UpdateProcedure_UpdateProcedure_Procedure "json:\"procedure\" graphql:\"procedure\""
}

func (t *UpdateProcedure_UpdateProcedure) GetProcedure() *UpdateProcedure_UpdateProcedure_Procedure {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure{}
	}
	return &t.Procedure
}

type GetAllProcedureHistories_ProcedureHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllProcedureHistories_ProcedureHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllProcedureHistories_ProcedureHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllProcedureHistories_ProcedureHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllProcedureHistories_ProcedureHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllProcedureHistories_ProcedureHistories_Edges_Node struct {
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DisplayID                       string                "json:\"displayID\" graphql:\"displayID\""
	HistoryTime                     time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	Operation                       history.OpType        "json:\"operation\" graphql:\"operation\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProcedureType                   *string               "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	Ref                             *string               "json:\"ref,omitempty\" graphql:\"ref\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetApproverID() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ApproverID
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetControlSuggestions() []string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ControlSuggestions
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.DismissedControlSuggestions
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.DismissedTagSuggestions
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetImprovementSuggestions() []string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ImprovementSuggestions
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetProcedureType() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ProcedureType
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Revision
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetSummary() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Summary
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetTagSuggestions() []string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.TagSuggestions
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllProcedureHistories_ProcedureHistories_Edges struct {
	Node *GetAllProcedureHistories_ProcedureHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllProcedureHistories_ProcedureHistories_Edges) GetNode() *GetAllProcedureHistories_ProcedureHistories_Edges_Node {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges{}
	}
	return t.Node
}

type GetAllProcedureHistories_ProcedureHistories struct {
	Edges      []*GetAllProcedureHistories_ProcedureHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllProcedureHistories_ProcedureHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllProcedureHistories_ProcedureHistories) GetEdges() []*GetAllProcedureHistories_ProcedureHistories_Edges {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories{}
	}
	return t.Edges
}
func (t *GetAllProcedureHistories_ProcedureHistories) GetPageInfo() *GetAllProcedureHistories_ProcedureHistories_PageInfo {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllProcedureHistories_ProcedureHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories{}
	}
	return t.TotalCount
}

type GetProcedureHistories_ProcedureHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetProcedureHistories_ProcedureHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetProcedureHistories_ProcedureHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetProcedureHistories_ProcedureHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetProcedureHistories_ProcedureHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetProcedureHistories_ProcedureHistories_Edges_Node struct {
	ApprovalRequired                *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	ApproverID                      *string               "json:\"approverID,omitempty\" graphql:\"approverID\""
	ControlSuggestions              []string              "json:\"controlSuggestions,omitempty\" graphql:\"controlSuggestions\""
	CreatedAt                       *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                       *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID                      *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details                         *string               "json:\"details,omitempty\" graphql:\"details\""
	DismissedControlSuggestions     []string              "json:\"dismissedControlSuggestions,omitempty\" graphql:\"dismissedControlSuggestions\""
	DismissedImprovementSuggestions []string              "json:\"dismissedImprovementSuggestions,omitempty\" graphql:\"dismissedImprovementSuggestions\""
	DismissedTagSuggestions         []string              "json:\"dismissedTagSuggestions,omitempty\" graphql:\"dismissedTagSuggestions\""
	DisplayID                       string                "json:\"displayID\" graphql:\"displayID\""
	HistoryTime                     time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID                              string                "json:\"id\" graphql:\"id\""
	ImprovementSuggestions          []string              "json:\"improvementSuggestions,omitempty\" graphql:\"improvementSuggestions\""
	Name                            string                "json:\"name\" graphql:\"name\""
	Operation                       history.OpType        "json:\"operation\" graphql:\"operation\""
	OwnerID                         *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProcedureType                   *string               "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	Ref                             *string               "json:\"ref,omitempty\" graphql:\"ref\""
	ReviewDue                       *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency                 *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision                        *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status                          *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Summary                         *string               "json:\"summary,omitempty\" graphql:\"summary\""
	TagSuggestions                  []string              "json:\"tagSuggestions,omitempty\" graphql:\"tagSuggestions\""
	Tags                            []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                       *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                       *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetApproverID() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ApproverID
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetControlSuggestions() []string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ControlSuggestions
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetDismissedControlSuggestions() []string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.DismissedControlSuggestions
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetDismissedImprovementSuggestions() []string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.DismissedImprovementSuggestions
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetDismissedTagSuggestions() []string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.DismissedTagSuggestions
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetImprovementSuggestions() []string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ImprovementSuggestions
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetProcedureType() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ProcedureType
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Revision
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetSummary() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Summary
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetTagSuggestions() []string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.TagSuggestions
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetProcedureHistories_ProcedureHistories_Edges struct {
	Node *GetProcedureHistories_ProcedureHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetProcedureHistories_ProcedureHistories_Edges) GetNode() *GetProcedureHistories_ProcedureHistories_Edges_Node {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges{}
	}
	return t.Node
}

type GetProcedureHistories_ProcedureHistories struct {
	Edges      []*GetProcedureHistories_ProcedureHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetProcedureHistories_ProcedureHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                             "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetProcedureHistories_ProcedureHistories) GetEdges() []*GetProcedureHistories_ProcedureHistories_Edges {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories{}
	}
	return t.Edges
}
func (t *GetProcedureHistories_ProcedureHistories) GetPageInfo() *GetProcedureHistories_ProcedureHistories_PageInfo {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories{}
	}
	return &t.PageInfo
}
func (t *GetProcedureHistories_ProcedureHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVProgram_CreateBulkCSVProgram_Programs struct {
	AuditFirm            *string             "json:\"auditFirm,omitempty\" graphql:\"auditFirm\""
	Auditor              *string             "json:\"auditor,omitempty\" graphql:\"auditor\""
	AuditorEmail         *string             "json:\"auditorEmail,omitempty\" graphql:\"auditorEmail\""
	AuditorReadComments  bool                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	CreatedAt            *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string             "json:\"description,omitempty\" graphql:\"description\""
	DisplayID            string              "json:\"displayID\" graphql:\"displayID\""
	EndDate              *time.Time          "json:\"endDate,omitempty\" graphql:\"endDate\""
	FrameworkName        *string             "json:\"frameworkName,omitempty\" graphql:\"frameworkName\""
	ID                   string              "json:\"id\" graphql:\"id\""
	Name                 string              "json:\"name\" graphql:\"name\""
	OwnerID              *string             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProgramType          enums.ProgramType   "json:\"programType\" graphql:\"programType\""
	StartDate            *time.Time          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus "json:\"status\" graphql:\"status\""
	Tags                 []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetAuditFirm() *string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.AuditFirm
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetAuditor() *string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.Auditor
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetAuditorEmail() *string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.AuditorEmail
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetAuditorReadComments() bool {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.AuditorReadComments
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetAuditorReady() bool {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.AuditorReady
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetAuditorWriteComments() bool {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.AuditorWriteComments
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.Description
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.DisplayID
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetEndDate() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.EndDate
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetFrameworkName() *string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.FrameworkName
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetID() string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.ID
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetName() string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.Name
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetProgramType() *enums.ProgramType {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return &t.ProgramType
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetStartDate() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.StartDate
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return &t.Status
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.Tags
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVProgram_CreateBulkCSVProgram struct {
	Programs []*CreateBulkCSVProgram_CreateBulkCSVProgram_Programs "json:\"programs,omitempty\" graphql:\"programs\""
}

func (t *CreateBulkCSVProgram_CreateBulkCSVProgram) GetPrograms() []*CreateBulkCSVProgram_CreateBulkCSVProgram_Programs {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram{}
	}
	return t.Programs
}

type CreateBulkProgram_CreateBulkProgram_Programs struct {
	AuditFirm            *string             "json:\"auditFirm,omitempty\" graphql:\"auditFirm\""
	Auditor              *string             "json:\"auditor,omitempty\" graphql:\"auditor\""
	AuditorEmail         *string             "json:\"auditorEmail,omitempty\" graphql:\"auditorEmail\""
	AuditorReadComments  bool                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	CreatedAt            *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string             "json:\"description,omitempty\" graphql:\"description\""
	DisplayID            string              "json:\"displayID\" graphql:\"displayID\""
	EndDate              *time.Time          "json:\"endDate,omitempty\" graphql:\"endDate\""
	FrameworkName        *string             "json:\"frameworkName,omitempty\" graphql:\"frameworkName\""
	ID                   string              "json:\"id\" graphql:\"id\""
	Name                 string              "json:\"name\" graphql:\"name\""
	OwnerID              *string             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProgramType          enums.ProgramType   "json:\"programType\" graphql:\"programType\""
	StartDate            *time.Time          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus "json:\"status\" graphql:\"status\""
	Tags                 []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetAuditFirm() *string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.AuditFirm
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetAuditor() *string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.Auditor
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetAuditorEmail() *string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.AuditorEmail
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetAuditorReadComments() bool {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.AuditorReadComments
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetAuditorReady() bool {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.AuditorReady
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetAuditorWriteComments() bool {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.AuditorWriteComments
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.CreatedAt
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.CreatedBy
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetDescription() *string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.Description
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.DisplayID
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetEndDate() *time.Time {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.EndDate
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetFrameworkName() *string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.FrameworkName
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetID() string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.ID
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetName() string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.Name
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.OwnerID
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetProgramType() *enums.ProgramType {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return &t.ProgramType
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetStartDate() *time.Time {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.StartDate
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return &t.Status
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetTags() []string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.Tags
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.UpdatedBy
}

type CreateBulkProgram_CreateBulkProgram struct {
	Programs []*CreateBulkProgram_CreateBulkProgram_Programs "json:\"programs,omitempty\" graphql:\"programs\""
}

func (t *CreateBulkProgram_CreateBulkProgram) GetPrograms() []*CreateBulkProgram_CreateBulkProgram_Programs {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram{}
	}
	return t.Programs
}

type CreateProgram_CreateProgram_Program struct {
	AuditFirm            *string             "json:\"auditFirm,omitempty\" graphql:\"auditFirm\""
	Auditor              *string             "json:\"auditor,omitempty\" graphql:\"auditor\""
	AuditorEmail         *string             "json:\"auditorEmail,omitempty\" graphql:\"auditorEmail\""
	AuditorReadComments  bool                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	CreatedAt            *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string             "json:\"description,omitempty\" graphql:\"description\""
	DisplayID            string              "json:\"displayID\" graphql:\"displayID\""
	EndDate              *time.Time          "json:\"endDate,omitempty\" graphql:\"endDate\""
	FrameworkName        *string             "json:\"frameworkName,omitempty\" graphql:\"frameworkName\""
	ID                   string              "json:\"id\" graphql:\"id\""
	Name                 string              "json:\"name\" graphql:\"name\""
	OwnerID              *string             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProgramType          enums.ProgramType   "json:\"programType\" graphql:\"programType\""
	StartDate            *time.Time          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus "json:\"status\" graphql:\"status\""
	Tags                 []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateProgram_CreateProgram_Program) GetAuditFirm() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.AuditFirm
}
func (t *CreateProgram_CreateProgram_Program) GetAuditor() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.Auditor
}
func (t *CreateProgram_CreateProgram_Program) GetAuditorEmail() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.AuditorEmail
}
func (t *CreateProgram_CreateProgram_Program) GetAuditorReadComments() bool {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.AuditorReadComments
}
func (t *CreateProgram_CreateProgram_Program) GetAuditorReady() bool {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.AuditorReady
}
func (t *CreateProgram_CreateProgram_Program) GetAuditorWriteComments() bool {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.AuditorWriteComments
}
func (t *CreateProgram_CreateProgram_Program) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.CreatedAt
}
func (t *CreateProgram_CreateProgram_Program) GetCreatedBy() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.CreatedBy
}
func (t *CreateProgram_CreateProgram_Program) GetDescription() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.Description
}
func (t *CreateProgram_CreateProgram_Program) GetDisplayID() string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.DisplayID
}
func (t *CreateProgram_CreateProgram_Program) GetEndDate() *time.Time {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.EndDate
}
func (t *CreateProgram_CreateProgram_Program) GetFrameworkName() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.FrameworkName
}
func (t *CreateProgram_CreateProgram_Program) GetID() string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.ID
}
func (t *CreateProgram_CreateProgram_Program) GetName() string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.Name
}
func (t *CreateProgram_CreateProgram_Program) GetOwnerID() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.OwnerID
}
func (t *CreateProgram_CreateProgram_Program) GetProgramType() *enums.ProgramType {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return &t.ProgramType
}
func (t *CreateProgram_CreateProgram_Program) GetStartDate() *time.Time {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.StartDate
}
func (t *CreateProgram_CreateProgram_Program) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return &t.Status
}
func (t *CreateProgram_CreateProgram_Program) GetTags() []string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.Tags
}
func (t *CreateProgram_CreateProgram_Program) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.UpdatedAt
}
func (t *CreateProgram_CreateProgram_Program) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.UpdatedBy
}

type CreateProgram_CreateProgram struct {
	Program CreateProgram_CreateProgram_Program "json:\"program\" graphql:\"program\""
}

func (t *CreateProgram_CreateProgram) GetProgram() *CreateProgram_CreateProgram_Program {
	if t == nil {
		t = &CreateProgram_CreateProgram{}
	}
	return &t.Program
}

type DeleteProgram_DeleteProgram struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteProgram_DeleteProgram) GetDeletedID() string {
	if t == nil {
		t = &DeleteProgram_DeleteProgram{}
	}
	return t.DeletedID
}

type GetAllPrograms_Programs_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllPrograms_Programs_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllPrograms_Programs_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllPrograms_Programs_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllPrograms_Programs_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllPrograms_Programs_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllPrograms_Programs_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_PageInfo{}
	}
	return t.StartCursor
}

type GetAllPrograms_Programs_Edges_Node struct {
	AuditFirm            *string             "json:\"auditFirm,omitempty\" graphql:\"auditFirm\""
	Auditor              *string             "json:\"auditor,omitempty\" graphql:\"auditor\""
	AuditorEmail         *string             "json:\"auditorEmail,omitempty\" graphql:\"auditorEmail\""
	AuditorReadComments  bool                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	CreatedAt            *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string             "json:\"description,omitempty\" graphql:\"description\""
	DisplayID            string              "json:\"displayID\" graphql:\"displayID\""
	EndDate              *time.Time          "json:\"endDate,omitempty\" graphql:\"endDate\""
	FrameworkName        *string             "json:\"frameworkName,omitempty\" graphql:\"frameworkName\""
	ID                   string              "json:\"id\" graphql:\"id\""
	Name                 string              "json:\"name\" graphql:\"name\""
	OwnerID              *string             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProgramType          enums.ProgramType   "json:\"programType\" graphql:\"programType\""
	StartDate            *time.Time          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus "json:\"status\" graphql:\"status\""
	Tags                 []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllPrograms_Programs_Edges_Node) GetAuditFirm() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.AuditFirm
}
func (t *GetAllPrograms_Programs_Edges_Node) GetAuditor() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.Auditor
}
func (t *GetAllPrograms_Programs_Edges_Node) GetAuditorEmail() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.AuditorEmail
}
func (t *GetAllPrograms_Programs_Edges_Node) GetAuditorReadComments() bool {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.AuditorReadComments
}
func (t *GetAllPrograms_Programs_Edges_Node) GetAuditorReady() bool {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.AuditorReady
}
func (t *GetAllPrograms_Programs_Edges_Node) GetAuditorWriteComments() bool {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.AuditorWriteComments
}
func (t *GetAllPrograms_Programs_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllPrograms_Programs_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllPrograms_Programs_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllPrograms_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllPrograms_Programs_Edges_Node) GetEndDate() *time.Time {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.EndDate
}
func (t *GetAllPrograms_Programs_Edges_Node) GetFrameworkName() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.FrameworkName
}
func (t *GetAllPrograms_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllPrograms_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllPrograms_Programs_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllPrograms_Programs_Edges_Node) GetProgramType() *enums.ProgramType {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return &t.ProgramType
}
func (t *GetAllPrograms_Programs_Edges_Node) GetStartDate() *time.Time {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.StartDate
}
func (t *GetAllPrograms_Programs_Edges_Node) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllPrograms_Programs_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllPrograms_Programs_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllPrograms_Programs_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllPrograms_Programs_Edges struct {
	Node *GetAllPrograms_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllPrograms_Programs_Edges) GetNode() *GetAllPrograms_Programs_Edges_Node {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges{}
	}
	return t.Node
}

type GetAllPrograms_Programs struct {
	Edges      []*GetAllPrograms_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllPrograms_Programs_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                            "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllPrograms_Programs) GetEdges() []*GetAllPrograms_Programs_Edges {
	if t == nil {
		t = &GetAllPrograms_Programs{}
	}
	return t.Edges
}
func (t *GetAllPrograms_Programs) GetPageInfo() *GetAllPrograms_Programs_PageInfo {
	if t == nil {
		t = &GetAllPrograms_Programs{}
	}
	return &t.PageInfo
}
func (t *GetAllPrograms_Programs) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllPrograms_Programs{}
	}
	return t.TotalCount
}

type GetProgramByID_Program struct {
	AuditFirm            *string             "json:\"auditFirm,omitempty\" graphql:\"auditFirm\""
	Auditor              *string             "json:\"auditor,omitempty\" graphql:\"auditor\""
	AuditorEmail         *string             "json:\"auditorEmail,omitempty\" graphql:\"auditorEmail\""
	AuditorReadComments  bool                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	CreatedAt            *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string             "json:\"description,omitempty\" graphql:\"description\""
	DisplayID            string              "json:\"displayID\" graphql:\"displayID\""
	EndDate              *time.Time          "json:\"endDate,omitempty\" graphql:\"endDate\""
	FrameworkName        *string             "json:\"frameworkName,omitempty\" graphql:\"frameworkName\""
	ID                   string              "json:\"id\" graphql:\"id\""
	Name                 string              "json:\"name\" graphql:\"name\""
	OwnerID              *string             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProgramType          enums.ProgramType   "json:\"programType\" graphql:\"programType\""
	StartDate            *time.Time          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus "json:\"status\" graphql:\"status\""
	Tags                 []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetProgramByID_Program) GetAuditFirm() *string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.AuditFirm
}
func (t *GetProgramByID_Program) GetAuditor() *string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.Auditor
}
func (t *GetProgramByID_Program) GetAuditorEmail() *string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.AuditorEmail
}
func (t *GetProgramByID_Program) GetAuditorReadComments() bool {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.AuditorReadComments
}
func (t *GetProgramByID_Program) GetAuditorReady() bool {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.AuditorReady
}
func (t *GetProgramByID_Program) GetAuditorWriteComments() bool {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.AuditorWriteComments
}
func (t *GetProgramByID_Program) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.CreatedAt
}
func (t *GetProgramByID_Program) GetCreatedBy() *string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.CreatedBy
}
func (t *GetProgramByID_Program) GetDescription() *string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.Description
}
func (t *GetProgramByID_Program) GetDisplayID() string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.DisplayID
}
func (t *GetProgramByID_Program) GetEndDate() *time.Time {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.EndDate
}
func (t *GetProgramByID_Program) GetFrameworkName() *string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.FrameworkName
}
func (t *GetProgramByID_Program) GetID() string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.ID
}
func (t *GetProgramByID_Program) GetName() string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.Name
}
func (t *GetProgramByID_Program) GetOwnerID() *string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.OwnerID
}
func (t *GetProgramByID_Program) GetProgramType() *enums.ProgramType {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return &t.ProgramType
}
func (t *GetProgramByID_Program) GetStartDate() *time.Time {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.StartDate
}
func (t *GetProgramByID_Program) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return &t.Status
}
func (t *GetProgramByID_Program) GetTags() []string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.Tags
}
func (t *GetProgramByID_Program) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.UpdatedAt
}
func (t *GetProgramByID_Program) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.UpdatedBy
}

type GetPrograms_Programs_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetPrograms_Programs_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetPrograms_Programs_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetPrograms_Programs_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetPrograms_Programs_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetPrograms_Programs_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetPrograms_Programs_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetPrograms_Programs_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetPrograms_Programs_PageInfo{}
	}
	return t.StartCursor
}

type GetPrograms_Programs_Edges_Node struct {
	AuditFirm            *string             "json:\"auditFirm,omitempty\" graphql:\"auditFirm\""
	Auditor              *string             "json:\"auditor,omitempty\" graphql:\"auditor\""
	AuditorEmail         *string             "json:\"auditorEmail,omitempty\" graphql:\"auditorEmail\""
	AuditorReadComments  bool                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	CreatedAt            *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string             "json:\"description,omitempty\" graphql:\"description\""
	DisplayID            string              "json:\"displayID\" graphql:\"displayID\""
	EndDate              *time.Time          "json:\"endDate,omitempty\" graphql:\"endDate\""
	FrameworkName        *string             "json:\"frameworkName,omitempty\" graphql:\"frameworkName\""
	ID                   string              "json:\"id\" graphql:\"id\""
	Name                 string              "json:\"name\" graphql:\"name\""
	OwnerID              *string             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProgramType          enums.ProgramType   "json:\"programType\" graphql:\"programType\""
	StartDate            *time.Time          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus "json:\"status\" graphql:\"status\""
	Tags                 []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetPrograms_Programs_Edges_Node) GetAuditFirm() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.AuditFirm
}
func (t *GetPrograms_Programs_Edges_Node) GetAuditor() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.Auditor
}
func (t *GetPrograms_Programs_Edges_Node) GetAuditorEmail() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.AuditorEmail
}
func (t *GetPrograms_Programs_Edges_Node) GetAuditorReadComments() bool {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.AuditorReadComments
}
func (t *GetPrograms_Programs_Edges_Node) GetAuditorReady() bool {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.AuditorReady
}
func (t *GetPrograms_Programs_Edges_Node) GetAuditorWriteComments() bool {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.AuditorWriteComments
}
func (t *GetPrograms_Programs_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetPrograms_Programs_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetPrograms_Programs_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.Description
}
func (t *GetPrograms_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetPrograms_Programs_Edges_Node) GetEndDate() *time.Time {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.EndDate
}
func (t *GetPrograms_Programs_Edges_Node) GetFrameworkName() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.FrameworkName
}
func (t *GetPrograms_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GetPrograms_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.Name
}
func (t *GetPrograms_Programs_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetPrograms_Programs_Edges_Node) GetProgramType() *enums.ProgramType {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return &t.ProgramType
}
func (t *GetPrograms_Programs_Edges_Node) GetStartDate() *time.Time {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.StartDate
}
func (t *GetPrograms_Programs_Edges_Node) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return &t.Status
}
func (t *GetPrograms_Programs_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.Tags
}
func (t *GetPrograms_Programs_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetPrograms_Programs_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetPrograms_Programs_Edges struct {
	Node *GetPrograms_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetPrograms_Programs_Edges) GetNode() *GetPrograms_Programs_Edges_Node {
	if t == nil {
		t = &GetPrograms_Programs_Edges{}
	}
	return t.Node
}

type GetPrograms_Programs struct {
	Edges      []*GetPrograms_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetPrograms_Programs_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetPrograms_Programs) GetEdges() []*GetPrograms_Programs_Edges {
	if t == nil {
		t = &GetPrograms_Programs{}
	}
	return t.Edges
}
func (t *GetPrograms_Programs) GetPageInfo() *GetPrograms_Programs_PageInfo {
	if t == nil {
		t = &GetPrograms_Programs{}
	}
	return &t.PageInfo
}
func (t *GetPrograms_Programs) GetTotalCount() int64 {
	if t == nil {
		t = &GetPrograms_Programs{}
	}
	return t.TotalCount
}

type UpdateProgram_UpdateProgram_Program struct {
	AuditFirm            *string             "json:\"auditFirm,omitempty\" graphql:\"auditFirm\""
	Auditor              *string             "json:\"auditor,omitempty\" graphql:\"auditor\""
	AuditorEmail         *string             "json:\"auditorEmail,omitempty\" graphql:\"auditorEmail\""
	AuditorReadComments  bool                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	CreatedAt            *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string             "json:\"description,omitempty\" graphql:\"description\""
	DisplayID            string              "json:\"displayID\" graphql:\"displayID\""
	EndDate              *time.Time          "json:\"endDate,omitempty\" graphql:\"endDate\""
	FrameworkName        *string             "json:\"frameworkName,omitempty\" graphql:\"frameworkName\""
	ID                   string              "json:\"id\" graphql:\"id\""
	Name                 string              "json:\"name\" graphql:\"name\""
	OwnerID              *string             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProgramType          enums.ProgramType   "json:\"programType\" graphql:\"programType\""
	StartDate            *time.Time          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus "json:\"status\" graphql:\"status\""
	Tags                 []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateProgram_UpdateProgram_Program) GetAuditFirm() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.AuditFirm
}
func (t *UpdateProgram_UpdateProgram_Program) GetAuditor() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.Auditor
}
func (t *UpdateProgram_UpdateProgram_Program) GetAuditorEmail() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.AuditorEmail
}
func (t *UpdateProgram_UpdateProgram_Program) GetAuditorReadComments() bool {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.AuditorReadComments
}
func (t *UpdateProgram_UpdateProgram_Program) GetAuditorReady() bool {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.AuditorReady
}
func (t *UpdateProgram_UpdateProgram_Program) GetAuditorWriteComments() bool {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.AuditorWriteComments
}
func (t *UpdateProgram_UpdateProgram_Program) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.CreatedAt
}
func (t *UpdateProgram_UpdateProgram_Program) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.CreatedBy
}
func (t *UpdateProgram_UpdateProgram_Program) GetDescription() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.Description
}
func (t *UpdateProgram_UpdateProgram_Program) GetDisplayID() string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.DisplayID
}
func (t *UpdateProgram_UpdateProgram_Program) GetEndDate() *time.Time {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.EndDate
}
func (t *UpdateProgram_UpdateProgram_Program) GetFrameworkName() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.FrameworkName
}
func (t *UpdateProgram_UpdateProgram_Program) GetID() string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.ID
}
func (t *UpdateProgram_UpdateProgram_Program) GetName() string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.Name
}
func (t *UpdateProgram_UpdateProgram_Program) GetOwnerID() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.OwnerID
}
func (t *UpdateProgram_UpdateProgram_Program) GetProgramType() *enums.ProgramType {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return &t.ProgramType
}
func (t *UpdateProgram_UpdateProgram_Program) GetStartDate() *time.Time {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.StartDate
}
func (t *UpdateProgram_UpdateProgram_Program) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return &t.Status
}
func (t *UpdateProgram_UpdateProgram_Program) GetTags() []string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.Tags
}
func (t *UpdateProgram_UpdateProgram_Program) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.UpdatedAt
}
func (t *UpdateProgram_UpdateProgram_Program) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.UpdatedBy
}

type UpdateProgram_UpdateProgram struct {
	Program UpdateProgram_UpdateProgram_Program "json:\"program\" graphql:\"program\""
}

func (t *UpdateProgram_UpdateProgram) GetProgram() *UpdateProgram_UpdateProgram_Program {
	if t == nil {
		t = &UpdateProgram_UpdateProgram{}
	}
	return &t.Program
}

type GetAllProgramHistories_ProgramHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllProgramHistories_ProgramHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllProgramHistories_ProgramHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllProgramHistories_ProgramHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllProgramHistories_ProgramHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllProgramHistories_ProgramHistories_Edges_Node struct {
	AuditFirm            *string             "json:\"auditFirm,omitempty\" graphql:\"auditFirm\""
	Auditor              *string             "json:\"auditor,omitempty\" graphql:\"auditor\""
	AuditorEmail         *string             "json:\"auditorEmail,omitempty\" graphql:\"auditorEmail\""
	AuditorReadComments  bool                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	CreatedAt            *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string             "json:\"description,omitempty\" graphql:\"description\""
	DisplayID            string              "json:\"displayID\" graphql:\"displayID\""
	EndDate              *time.Time          "json:\"endDate,omitempty\" graphql:\"endDate\""
	FrameworkName        *string             "json:\"frameworkName,omitempty\" graphql:\"frameworkName\""
	HistoryTime          time.Time           "json:\"historyTime\" graphql:\"historyTime\""
	ID                   string              "json:\"id\" graphql:\"id\""
	Name                 string              "json:\"name\" graphql:\"name\""
	Operation            history.OpType      "json:\"operation\" graphql:\"operation\""
	OwnerID              *string             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProgramType          enums.ProgramType   "json:\"programType\" graphql:\"programType\""
	Ref                  *string             "json:\"ref,omitempty\" graphql:\"ref\""
	StartDate            *time.Time          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus "json:\"status\" graphql:\"status\""
	Tags                 []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetAuditFirm() *string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.AuditFirm
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetAuditor() *string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Auditor
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetAuditorEmail() *string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.AuditorEmail
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetAuditorReadComments() bool {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.AuditorReadComments
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetAuditorReady() bool {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.AuditorReady
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetAuditorWriteComments() bool {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.AuditorWriteComments
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetEndDate() *time.Time {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.EndDate
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetFrameworkName() *string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.FrameworkName
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetProgramType() *enums.ProgramType {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return &t.ProgramType
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetStartDate() *time.Time {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.StartDate
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllProgramHistories_ProgramHistories_Edges struct {
	Node *GetAllProgramHistories_ProgramHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllProgramHistories_ProgramHistories_Edges) GetNode() *GetAllProgramHistories_ProgramHistories_Edges_Node {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges{}
	}
	return t.Node
}

type GetAllProgramHistories_ProgramHistories struct {
	Edges      []*GetAllProgramHistories_ProgramHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllProgramHistories_ProgramHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                            "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllProgramHistories_ProgramHistories) GetEdges() []*GetAllProgramHistories_ProgramHistories_Edges {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories{}
	}
	return t.Edges
}
func (t *GetAllProgramHistories_ProgramHistories) GetPageInfo() *GetAllProgramHistories_ProgramHistories_PageInfo {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllProgramHistories_ProgramHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories{}
	}
	return t.TotalCount
}

type GetProgramHistories_ProgramHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetProgramHistories_ProgramHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetProgramHistories_ProgramHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetProgramHistories_ProgramHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetProgramHistories_ProgramHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetProgramHistories_ProgramHistories_Edges_Node struct {
	AuditFirm            *string             "json:\"auditFirm,omitempty\" graphql:\"auditFirm\""
	Auditor              *string             "json:\"auditor,omitempty\" graphql:\"auditor\""
	AuditorEmail         *string             "json:\"auditorEmail,omitempty\" graphql:\"auditorEmail\""
	AuditorReadComments  bool                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	CreatedAt            *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string             "json:\"description,omitempty\" graphql:\"description\""
	DisplayID            string              "json:\"displayID\" graphql:\"displayID\""
	EndDate              *time.Time          "json:\"endDate,omitempty\" graphql:\"endDate\""
	FrameworkName        *string             "json:\"frameworkName,omitempty\" graphql:\"frameworkName\""
	HistoryTime          time.Time           "json:\"historyTime\" graphql:\"historyTime\""
	ID                   string              "json:\"id\" graphql:\"id\""
	Name                 string              "json:\"name\" graphql:\"name\""
	Operation            history.OpType      "json:\"operation\" graphql:\"operation\""
	OwnerID              *string             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProgramType          enums.ProgramType   "json:\"programType\" graphql:\"programType\""
	Ref                  *string             "json:\"ref,omitempty\" graphql:\"ref\""
	StartDate            *time.Time          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus "json:\"status\" graphql:\"status\""
	Tags                 []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetAuditFirm() *string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.AuditFirm
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetAuditor() *string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Auditor
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetAuditorEmail() *string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.AuditorEmail
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetAuditorReadComments() bool {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.AuditorReadComments
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetAuditorReady() bool {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.AuditorReady
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetAuditorWriteComments() bool {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.AuditorWriteComments
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetEndDate() *time.Time {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.EndDate
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetFrameworkName() *string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.FrameworkName
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetProgramType() *enums.ProgramType {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return &t.ProgramType
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetStartDate() *time.Time {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.StartDate
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetProgramHistories_ProgramHistories_Edges struct {
	Node *GetProgramHistories_ProgramHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetProgramHistories_ProgramHistories_Edges) GetNode() *GetProgramHistories_ProgramHistories_Edges_Node {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges{}
	}
	return t.Node
}

type GetProgramHistories_ProgramHistories struct {
	Edges      []*GetProgramHistories_ProgramHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetProgramHistories_ProgramHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetProgramHistories_ProgramHistories) GetEdges() []*GetProgramHistories_ProgramHistories_Edges {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories{}
	}
	return t.Edges
}
func (t *GetProgramHistories_ProgramHistories) GetPageInfo() *GetProgramHistories_ProgramHistories_PageInfo {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories{}
	}
	return &t.PageInfo
}
func (t *GetProgramHistories_ProgramHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships_User) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships_User{}
	}
	return t.DisplayName
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships_User) GetEmail() string {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships_User{}
	}
	return t.Email
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships_User) GetFirstName() *string {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships_User{}
	}
	return t.FirstName
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships_User) GetID() string {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships_User{}
	}
	return t.ID
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships_User) GetLastName() *string {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships_User{}
	}
	return t.LastName
}

type CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships struct {
	CreatedAt *time.Time                                                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                                                               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string                                                                                "json:\"id\" graphql:\"id\""
	ProgramID string                                                                                "json:\"programID\" graphql:\"programID\""
	Role      enums.Role                                                                            "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time                                                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                                                               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	User      CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships_User "json:\"user\" graphql:\"user\""
}

func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.ID
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetProgramID() string {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.ProgramID
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetUser() *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships_User {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return &t.User
}

type CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership struct {
	ProgramMemberships []*CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships "json:\"programMemberships,omitempty\" graphql:\"programMemberships\""
}

func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership) GetProgramMemberships() []*CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership{}
	}
	return t.ProgramMemberships
}

type CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships_User) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships_User{}
	}
	return t.DisplayName
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships_User) GetEmail() string {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships_User{}
	}
	return t.Email
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships_User) GetFirstName() *string {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships_User{}
	}
	return t.FirstName
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships_User) GetID() string {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships_User{}
	}
	return t.ID
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships_User) GetLastName() *string {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships_User{}
	}
	return t.LastName
}

type CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships struct {
	CreatedAt *time.Time                                                                      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                                                         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string                                                                          "json:\"id\" graphql:\"id\""
	ProgramID string                                                                          "json:\"programID\" graphql:\"programID\""
	Role      enums.Role                                                                      "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time                                                                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                                                         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	User      CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships_User "json:\"user\" graphql:\"user\""
}

func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.CreatedAt
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.CreatedBy
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.ID
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetProgramID() string {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.ProgramID
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetUser() *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships_User {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return &t.User
}

type CreateBulkProgramMembership_CreateBulkProgramMembership struct {
	ProgramMemberships []*CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships "json:\"programMemberships,omitempty\" graphql:\"programMemberships\""
}

func (t *CreateBulkProgramMembership_CreateBulkProgramMembership) GetProgramMemberships() []*CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership{}
	}
	return t.ProgramMemberships
}

type CreateProgramMembership_CreateProgramMembership_ProgramMembership_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership_User) GetDisplayName() string {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership_User{}
	}
	return t.DisplayName
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership_User) GetEmail() string {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership_User{}
	}
	return t.Email
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership_User) GetFirstName() *string {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership_User{}
	}
	return t.FirstName
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership_User) GetID() string {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership_User{}
	}
	return t.ID
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership_User) GetLastName() *string {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership_User{}
	}
	return t.LastName
}

type CreateProgramMembership_CreateProgramMembership_ProgramMembership struct {
	CreatedAt *time.Time                                                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string                                                                 "json:\"id\" graphql:\"id\""
	ProgramID string                                                                 "json:\"programID\" graphql:\"programID\""
	Role      enums.Role                                                             "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time                                                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	User      CreateProgramMembership_CreateProgramMembership_ProgramMembership_User "json:\"user\" graphql:\"user\""
}

func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return t.CreatedAt
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetCreatedBy() *string {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return t.CreatedBy
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetID() string {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return t.ID
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetProgramID() string {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return t.ProgramID
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetRole() *enums.Role {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return &t.Role
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return t.UpdatedAt
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return t.UpdatedBy
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetUser() *CreateProgramMembership_CreateProgramMembership_ProgramMembership_User {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return &t.User
}

type CreateProgramMembership_CreateProgramMembership struct {
	ProgramMembership CreateProgramMembership_CreateProgramMembership_ProgramMembership "json:\"programMembership\" graphql:\"programMembership\""
}

func (t *CreateProgramMembership_CreateProgramMembership) GetProgramMembership() *CreateProgramMembership_CreateProgramMembership_ProgramMembership {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership{}
	}
	return &t.ProgramMembership
}

type DeleteProgramMembership_DeleteProgramMembership struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteProgramMembership_DeleteProgramMembership) GetDeletedID() string {
	if t == nil {
		t = &DeleteProgramMembership_DeleteProgramMembership{}
	}
	return t.DeletedID
}

type GetAllProgramMemberships_ProgramMemberships_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllProgramMemberships_ProgramMemberships_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllProgramMemberships_ProgramMemberships_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllProgramMemberships_ProgramMemberships_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllProgramMemberships_ProgramMemberships_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_PageInfo{}
	}
	return t.StartCursor
}

type GetAllProgramMemberships_ProgramMemberships_Edges_Node_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node_User) GetDisplayName() string {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node_User{}
	}
	return t.DisplayName
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node_User) GetEmail() string {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node_User{}
	}
	return t.Email
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node_User) GetFirstName() *string {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node_User{}
	}
	return t.FirstName
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node_User) GetID() string {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node_User{}
	}
	return t.ID
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node_User) GetLastName() *string {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node_User{}
	}
	return t.LastName
}

type GetAllProgramMemberships_ProgramMemberships_Edges_Node struct {
	CreatedAt *time.Time                                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string                                                      "json:\"id\" graphql:\"id\""
	ProgramID string                                                      "json:\"programID\" graphql:\"programID\""
	Role      enums.Role                                                  "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time                                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	User      GetAllProgramMemberships_ProgramMemberships_Edges_Node_User "json:\"user\" graphql:\"user\""
}

func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetProgramID() string {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.ProgramID
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return &t.Role
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetUser() *GetAllProgramMemberships_ProgramMemberships_Edges_Node_User {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return &t.User
}

type GetAllProgramMemberships_ProgramMemberships_Edges struct {
	Node *GetAllProgramMemberships_ProgramMemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllProgramMemberships_ProgramMemberships_Edges) GetNode() *GetAllProgramMemberships_ProgramMemberships_Edges_Node {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges{}
	}
	return t.Node
}

type GetAllProgramMemberships_ProgramMemberships struct {
	Edges      []*GetAllProgramMemberships_ProgramMemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllProgramMemberships_ProgramMemberships_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllProgramMemberships_ProgramMemberships) GetEdges() []*GetAllProgramMemberships_ProgramMemberships_Edges {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships{}
	}
	return t.Edges
}
func (t *GetAllProgramMemberships_ProgramMemberships) GetPageInfo() *GetAllProgramMemberships_ProgramMemberships_PageInfo {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships{}
	}
	return &t.PageInfo
}
func (t *GetAllProgramMemberships_ProgramMemberships) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships{}
	}
	return t.TotalCount
}

type GetProgramMembershipByID_ProgramMembership_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetProgramMembershipByID_ProgramMembership_User) GetDisplayName() string {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership_User{}
	}
	return t.DisplayName
}
func (t *GetProgramMembershipByID_ProgramMembership_User) GetEmail() string {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership_User{}
	}
	return t.Email
}
func (t *GetProgramMembershipByID_ProgramMembership_User) GetFirstName() *string {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership_User{}
	}
	return t.FirstName
}
func (t *GetProgramMembershipByID_ProgramMembership_User) GetID() string {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership_User{}
	}
	return t.ID
}
func (t *GetProgramMembershipByID_ProgramMembership_User) GetLastName() *string {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership_User{}
	}
	return t.LastName
}

type GetProgramMembershipByID_ProgramMembership struct {
	CreatedAt *time.Time                                      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string                                          "json:\"id\" graphql:\"id\""
	ProgramID string                                          "json:\"programID\" graphql:\"programID\""
	Role      enums.Role                                      "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time                                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	User      GetProgramMembershipByID_ProgramMembership_User "json:\"user\" graphql:\"user\""
}

func (t *GetProgramMembershipByID_ProgramMembership) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return t.CreatedAt
}
func (t *GetProgramMembershipByID_ProgramMembership) GetCreatedBy() *string {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return t.CreatedBy
}
func (t *GetProgramMembershipByID_ProgramMembership) GetID() string {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return t.ID
}
func (t *GetProgramMembershipByID_ProgramMembership) GetProgramID() string {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return t.ProgramID
}
func (t *GetProgramMembershipByID_ProgramMembership) GetRole() *enums.Role {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return &t.Role
}
func (t *GetProgramMembershipByID_ProgramMembership) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return t.UpdatedAt
}
func (t *GetProgramMembershipByID_ProgramMembership) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return t.UpdatedBy
}
func (t *GetProgramMembershipByID_ProgramMembership) GetUser() *GetProgramMembershipByID_ProgramMembership_User {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return &t.User
}

type GetProgramMemberships_ProgramMemberships_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetProgramMemberships_ProgramMemberships_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetProgramMemberships_ProgramMemberships_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetProgramMemberships_ProgramMemberships_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetProgramMemberships_ProgramMemberships_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_PageInfo{}
	}
	return t.StartCursor
}

type GetProgramMemberships_ProgramMemberships_Edges_Node_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetProgramMemberships_ProgramMemberships_Edges_Node_User) GetDisplayName() string {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node_User{}
	}
	return t.DisplayName
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node_User) GetEmail() string {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node_User{}
	}
	return t.Email
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node_User) GetFirstName() *string {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node_User{}
	}
	return t.FirstName
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node_User) GetID() string {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node_User{}
	}
	return t.ID
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node_User) GetLastName() *string {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node_User{}
	}
	return t.LastName
}

type GetProgramMemberships_ProgramMemberships_Edges_Node struct {
	CreatedAt *time.Time                                               "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                                  "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string                                                   "json:\"id\" graphql:\"id\""
	ProgramID string                                                   "json:\"programID\" graphql:\"programID\""
	Role      enums.Role                                               "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time                                               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                                  "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	User      GetProgramMemberships_ProgramMemberships_Edges_Node_User "json:\"user\" graphql:\"user\""
}

func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.ID
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetProgramID() string {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.ProgramID
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return &t.Role
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetUser() *GetProgramMemberships_ProgramMemberships_Edges_Node_User {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return &t.User
}

type GetProgramMemberships_ProgramMemberships_Edges struct {
	Node *GetProgramMemberships_ProgramMemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetProgramMemberships_ProgramMemberships_Edges) GetNode() *GetProgramMemberships_ProgramMemberships_Edges_Node {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges{}
	}
	return t.Node
}

type GetProgramMemberships_ProgramMemberships struct {
	Edges      []*GetProgramMemberships_ProgramMemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetProgramMemberships_ProgramMemberships_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                             "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetProgramMemberships_ProgramMemberships) GetEdges() []*GetProgramMemberships_ProgramMemberships_Edges {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships{}
	}
	return t.Edges
}
func (t *GetProgramMemberships_ProgramMemberships) GetPageInfo() *GetProgramMemberships_ProgramMemberships_PageInfo {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships{}
	}
	return &t.PageInfo
}
func (t *GetProgramMemberships_ProgramMemberships) GetTotalCount() int64 {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships{}
	}
	return t.TotalCount
}

type UpdateProgramMembership_UpdateProgramMembership_ProgramMembership_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership_User) GetDisplayName() string {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership_User{}
	}
	return t.DisplayName
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership_User) GetEmail() string {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership_User{}
	}
	return t.Email
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership_User) GetFirstName() *string {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership_User{}
	}
	return t.FirstName
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership_User) GetID() string {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership_User{}
	}
	return t.ID
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership_User) GetLastName() *string {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership_User{}
	}
	return t.LastName
}

type UpdateProgramMembership_UpdateProgramMembership_ProgramMembership struct {
	CreatedAt *time.Time                                                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string                                                                 "json:\"id\" graphql:\"id\""
	ProgramID string                                                                 "json:\"programID\" graphql:\"programID\""
	Role      enums.Role                                                             "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time                                                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	User      UpdateProgramMembership_UpdateProgramMembership_ProgramMembership_User "json:\"user\" graphql:\"user\""
}

func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return t.CreatedAt
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return t.CreatedBy
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetID() string {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return t.ID
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetProgramID() string {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return t.ProgramID
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetRole() *enums.Role {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return &t.Role
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return t.UpdatedAt
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return t.UpdatedBy
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetUser() *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership_User {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return &t.User
}

type UpdateProgramMembership_UpdateProgramMembership struct {
	ProgramMembership UpdateProgramMembership_UpdateProgramMembership_ProgramMembership "json:\"programMembership\" graphql:\"programMembership\""
}

func (t *UpdateProgramMembership_UpdateProgramMembership) GetProgramMembership() *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership{}
	}
	return &t.ProgramMembership
}

type GetAllProgramMembershipHistories_ProgramMembershipHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	ProgramID   string         "json:\"programID\" graphql:\"programID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Role        enums.Role     "json:\"role\" graphql:\"role\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID      string         "json:\"userID\" graphql:\"userID\""
}

func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetProgramID() string {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.ProgramID
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return &t.Role
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.UserID
}

type GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges struct {
	Node *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges) GetNode() *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges{}
	}
	return t.Node
}

type GetAllProgramMembershipHistories_ProgramMembershipHistories struct {
	Edges      []*GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllProgramMembershipHistories_ProgramMembershipHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                                "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories) GetEdges() []*GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories{}
	}
	return t.Edges
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories) GetPageInfo() *GetAllProgramMembershipHistories_ProgramMembershipHistories_PageInfo {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories{}
	}
	return t.TotalCount
}

type GetProgramMembershipHistories_ProgramMembershipHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetProgramMembershipHistories_ProgramMembershipHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	ProgramID   string         "json:\"programID\" graphql:\"programID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Role        enums.Role     "json:\"role\" graphql:\"role\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID      string         "json:\"userID\" graphql:\"userID\""
}

func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetProgramID() string {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.ProgramID
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return &t.Role
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.UserID
}

type GetProgramMembershipHistories_ProgramMembershipHistories_Edges struct {
	Node *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges) GetNode() *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges{}
	}
	return t.Node
}

type GetProgramMembershipHistories_ProgramMembershipHistories struct {
	Edges      []*GetProgramMembershipHistories_ProgramMembershipHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetProgramMembershipHistories_ProgramMembershipHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                             "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetProgramMembershipHistories_ProgramMembershipHistories) GetEdges() []*GetProgramMembershipHistories_ProgramMembershipHistories_Edges {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories{}
	}
	return t.Edges
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories) GetPageInfo() *GetProgramMembershipHistories_ProgramMembershipHistories_PageInfo {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories{}
	}
	return &t.PageInfo
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVRisk_CreateBulkCSVRisk_Risks struct {
	BusinessCosts *string               "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	Category      *string               "json:\"category,omitempty\" graphql:\"category\""
	CreatedAt     *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID    *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details       *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                "json:\"displayID\" graphql:\"displayID\""
	ID            string                "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact     "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string               "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                "json:\"name\" graphql:\"name\""
	OwnerID       *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RiskType      *string               "json:\"riskType,omitempty\" graphql:\"riskType\""
	Score         *int64                "json:\"score,omitempty\" graphql:\"score\""
	StakeholderID *string               "json:\"stakeholderID,omitempty\" graphql:\"stakeholderID\""
	Status        *enums.RiskStatus     "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetBusinessCosts() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.BusinessCosts
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetCategory() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Category
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetDelegateID() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.DelegateID
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetDetails() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Details
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.DisplayID
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetID() string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.ID
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Impact
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Likelihood
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetMitigation() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Mitigation
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetName() string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Name
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetRiskType() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.RiskType
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetScore() *int64 {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Score
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetStakeholderID() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.StakeholderID
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetStatus() *enums.RiskStatus {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Status
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Tags
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVRisk_CreateBulkCSVRisk struct {
	Risks []*CreateBulkCSVRisk_CreateBulkCSVRisk_Risks "json:\"risks,omitempty\" graphql:\"risks\""
}

func (t *CreateBulkCSVRisk_CreateBulkCSVRisk) GetRisks() []*CreateBulkCSVRisk_CreateBulkCSVRisk_Risks {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk{}
	}
	return t.Risks
}

type CreateBulkRisk_CreateBulkRisk_Risks struct {
	BusinessCosts *string               "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	Category      *string               "json:\"category,omitempty\" graphql:\"category\""
	CreatedAt     *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID    *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details       *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                "json:\"displayID\" graphql:\"displayID\""
	ID            string                "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact     "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string               "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                "json:\"name\" graphql:\"name\""
	OwnerID       *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RiskType      *string               "json:\"riskType,omitempty\" graphql:\"riskType\""
	Score         *int64                "json:\"score,omitempty\" graphql:\"score\""
	StakeholderID *string               "json:\"stakeholderID,omitempty\" graphql:\"stakeholderID\""
	Status        *enums.RiskStatus     "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetBusinessCosts() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.BusinessCosts
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetCategory() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Category
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.CreatedAt
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.CreatedBy
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetDelegateID() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.DelegateID
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetDetails() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Details
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.DisplayID
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetID() string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.ID
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Impact
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Likelihood
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetMitigation() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Mitigation
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetName() string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Name
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.OwnerID
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetRiskType() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.RiskType
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetScore() *int64 {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Score
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetStakeholderID() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.StakeholderID
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetStatus() *enums.RiskStatus {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Status
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetTags() []string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Tags
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.UpdatedBy
}

type CreateBulkRisk_CreateBulkRisk struct {
	Risks []*CreateBulkRisk_CreateBulkRisk_Risks "json:\"risks,omitempty\" graphql:\"risks\""
}

func (t *CreateBulkRisk_CreateBulkRisk) GetRisks() []*CreateBulkRisk_CreateBulkRisk_Risks {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk{}
	}
	return t.Risks
}

type CreateRisk_CreateRisk_Risk struct {
	BusinessCosts *string               "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	Category      *string               "json:\"category,omitempty\" graphql:\"category\""
	CreatedAt     *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID    *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details       *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                "json:\"displayID\" graphql:\"displayID\""
	ID            string                "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact     "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string               "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                "json:\"name\" graphql:\"name\""
	OwnerID       *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RiskType      *string               "json:\"riskType,omitempty\" graphql:\"riskType\""
	Score         *int64                "json:\"score,omitempty\" graphql:\"score\""
	StakeholderID *string               "json:\"stakeholderID,omitempty\" graphql:\"stakeholderID\""
	Status        *enums.RiskStatus     "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateRisk_CreateRisk_Risk) GetBusinessCosts() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.BusinessCosts
}
func (t *CreateRisk_CreateRisk_Risk) GetCategory() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Category
}
func (t *CreateRisk_CreateRisk_Risk) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.CreatedAt
}
func (t *CreateRisk_CreateRisk_Risk) GetCreatedBy() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.CreatedBy
}
func (t *CreateRisk_CreateRisk_Risk) GetDelegateID() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.DelegateID
}
func (t *CreateRisk_CreateRisk_Risk) GetDetails() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Details
}
func (t *CreateRisk_CreateRisk_Risk) GetDisplayID() string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.DisplayID
}
func (t *CreateRisk_CreateRisk_Risk) GetID() string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.ID
}
func (t *CreateRisk_CreateRisk_Risk) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Impact
}
func (t *CreateRisk_CreateRisk_Risk) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Likelihood
}
func (t *CreateRisk_CreateRisk_Risk) GetMitigation() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Mitigation
}
func (t *CreateRisk_CreateRisk_Risk) GetName() string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Name
}
func (t *CreateRisk_CreateRisk_Risk) GetOwnerID() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.OwnerID
}
func (t *CreateRisk_CreateRisk_Risk) GetRiskType() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.RiskType
}
func (t *CreateRisk_CreateRisk_Risk) GetScore() *int64 {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Score
}
func (t *CreateRisk_CreateRisk_Risk) GetStakeholderID() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.StakeholderID
}
func (t *CreateRisk_CreateRisk_Risk) GetStatus() *enums.RiskStatus {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Status
}
func (t *CreateRisk_CreateRisk_Risk) GetTags() []string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Tags
}
func (t *CreateRisk_CreateRisk_Risk) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.UpdatedAt
}
func (t *CreateRisk_CreateRisk_Risk) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.UpdatedBy
}

type CreateRisk_CreateRisk struct {
	Risk CreateRisk_CreateRisk_Risk "json:\"risk\" graphql:\"risk\""
}

func (t *CreateRisk_CreateRisk) GetRisk() *CreateRisk_CreateRisk_Risk {
	if t == nil {
		t = &CreateRisk_CreateRisk{}
	}
	return &t.Risk
}

type DeleteRisk_DeleteRisk struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteRisk_DeleteRisk) GetDeletedID() string {
	if t == nil {
		t = &DeleteRisk_DeleteRisk{}
	}
	return t.DeletedID
}

type GetAllRisks_Risks_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllRisks_Risks_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllRisks_Risks_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllRisks_Risks_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllRisks_Risks_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllRisks_Risks_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllRisks_Risks_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllRisks_Risks_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllRisks_Risks_PageInfo{}
	}
	return t.StartCursor
}

type GetAllRisks_Risks_Edges_Node struct {
	BusinessCosts *string               "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	Category      *string               "json:\"category,omitempty\" graphql:\"category\""
	CreatedAt     *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID    *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details       *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                "json:\"displayID\" graphql:\"displayID\""
	ID            string                "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact     "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string               "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                "json:\"name\" graphql:\"name\""
	OwnerID       *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RiskType      *string               "json:\"riskType,omitempty\" graphql:\"riskType\""
	Score         *int64                "json:\"score,omitempty\" graphql:\"score\""
	StakeholderID *string               "json:\"stakeholderID,omitempty\" graphql:\"stakeholderID\""
	Status        *enums.RiskStatus     "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllRisks_Risks_Edges_Node) GetBusinessCosts() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.BusinessCosts
}
func (t *GetAllRisks_Risks_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllRisks_Risks_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllRisks_Risks_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllRisks_Risks_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetAllRisks_Risks_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllRisks_Risks_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllRisks_Risks_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllRisks_Risks_Edges_Node) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Impact
}
func (t *GetAllRisks_Risks_Edges_Node) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Likelihood
}
func (t *GetAllRisks_Risks_Edges_Node) GetMitigation() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Mitigation
}
func (t *GetAllRisks_Risks_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllRisks_Risks_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllRisks_Risks_Edges_Node) GetRiskType() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.RiskType
}
func (t *GetAllRisks_Risks_Edges_Node) GetScore() *int64 {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Score
}
func (t *GetAllRisks_Risks_Edges_Node) GetStakeholderID() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.StakeholderID
}
func (t *GetAllRisks_Risks_Edges_Node) GetStatus() *enums.RiskStatus {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllRisks_Risks_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllRisks_Risks_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllRisks_Risks_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllRisks_Risks_Edges struct {
	Node *GetAllRisks_Risks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllRisks_Risks_Edges) GetNode() *GetAllRisks_Risks_Edges_Node {
	if t == nil {
		t = &GetAllRisks_Risks_Edges{}
	}
	return t.Node
}

type GetAllRisks_Risks struct {
	Edges      []*GetAllRisks_Risks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllRisks_Risks_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllRisks_Risks) GetEdges() []*GetAllRisks_Risks_Edges {
	if t == nil {
		t = &GetAllRisks_Risks{}
	}
	return t.Edges
}
func (t *GetAllRisks_Risks) GetPageInfo() *GetAllRisks_Risks_PageInfo {
	if t == nil {
		t = &GetAllRisks_Risks{}
	}
	return &t.PageInfo
}
func (t *GetAllRisks_Risks) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllRisks_Risks{}
	}
	return t.TotalCount
}

type GetRiskByID_Risk struct {
	BusinessCosts *string               "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	Category      *string               "json:\"category,omitempty\" graphql:\"category\""
	CreatedAt     *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID    *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details       *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                "json:\"displayID\" graphql:\"displayID\""
	ID            string                "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact     "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string               "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                "json:\"name\" graphql:\"name\""
	OwnerID       *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RiskType      *string               "json:\"riskType,omitempty\" graphql:\"riskType\""
	Score         *int64                "json:\"score,omitempty\" graphql:\"score\""
	StakeholderID *string               "json:\"stakeholderID,omitempty\" graphql:\"stakeholderID\""
	Status        *enums.RiskStatus     "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetRiskByID_Risk) GetBusinessCosts() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.BusinessCosts
}
func (t *GetRiskByID_Risk) GetCategory() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Category
}
func (t *GetRiskByID_Risk) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.CreatedAt
}
func (t *GetRiskByID_Risk) GetCreatedBy() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.CreatedBy
}
func (t *GetRiskByID_Risk) GetDelegateID() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.DelegateID
}
func (t *GetRiskByID_Risk) GetDetails() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Details
}
func (t *GetRiskByID_Risk) GetDisplayID() string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.DisplayID
}
func (t *GetRiskByID_Risk) GetID() string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.ID
}
func (t *GetRiskByID_Risk) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Impact
}
func (t *GetRiskByID_Risk) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Likelihood
}
func (t *GetRiskByID_Risk) GetMitigation() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Mitigation
}
func (t *GetRiskByID_Risk) GetName() string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Name
}
func (t *GetRiskByID_Risk) GetOwnerID() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.OwnerID
}
func (t *GetRiskByID_Risk) GetRiskType() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.RiskType
}
func (t *GetRiskByID_Risk) GetScore() *int64 {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Score
}
func (t *GetRiskByID_Risk) GetStakeholderID() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.StakeholderID
}
func (t *GetRiskByID_Risk) GetStatus() *enums.RiskStatus {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Status
}
func (t *GetRiskByID_Risk) GetTags() []string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Tags
}
func (t *GetRiskByID_Risk) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.UpdatedAt
}
func (t *GetRiskByID_Risk) GetUpdatedBy() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.UpdatedBy
}

type GetRisks_Risks_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetRisks_Risks_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetRisks_Risks_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetRisks_Risks_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetRisks_Risks_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetRisks_Risks_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetRisks_Risks_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetRisks_Risks_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetRisks_Risks_PageInfo{}
	}
	return t.StartCursor
}

type GetRisks_Risks_Edges_Node struct {
	BusinessCosts *string               "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	Category      *string               "json:\"category,omitempty\" graphql:\"category\""
	CreatedAt     *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID    *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details       *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                "json:\"displayID\" graphql:\"displayID\""
	ID            string                "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact     "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string               "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                "json:\"name\" graphql:\"name\""
	OwnerID       *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RiskType      *string               "json:\"riskType,omitempty\" graphql:\"riskType\""
	Score         *int64                "json:\"score,omitempty\" graphql:\"score\""
	StakeholderID *string               "json:\"stakeholderID,omitempty\" graphql:\"stakeholderID\""
	Status        *enums.RiskStatus     "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetRisks_Risks_Edges_Node) GetBusinessCosts() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.BusinessCosts
}
func (t *GetRisks_Risks_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Category
}
func (t *GetRisks_Risks_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetRisks_Risks_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetRisks_Risks_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetRisks_Risks_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Details
}
func (t *GetRisks_Risks_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetRisks_Risks_Edges_Node) GetID() string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.ID
}
func (t *GetRisks_Risks_Edges_Node) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Impact
}
func (t *GetRisks_Risks_Edges_Node) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Likelihood
}
func (t *GetRisks_Risks_Edges_Node) GetMitigation() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Mitigation
}
func (t *GetRisks_Risks_Edges_Node) GetName() string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Name
}
func (t *GetRisks_Risks_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetRisks_Risks_Edges_Node) GetRiskType() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.RiskType
}
func (t *GetRisks_Risks_Edges_Node) GetScore() *int64 {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Score
}
func (t *GetRisks_Risks_Edges_Node) GetStakeholderID() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.StakeholderID
}
func (t *GetRisks_Risks_Edges_Node) GetStatus() *enums.RiskStatus {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Status
}
func (t *GetRisks_Risks_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Tags
}
func (t *GetRisks_Risks_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetRisks_Risks_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetRisks_Risks_Edges struct {
	Node *GetRisks_Risks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetRisks_Risks_Edges) GetNode() *GetRisks_Risks_Edges_Node {
	if t == nil {
		t = &GetRisks_Risks_Edges{}
	}
	return t.Node
}

type GetRisks_Risks struct {
	Edges      []*GetRisks_Risks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetRisks_Risks_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetRisks_Risks) GetEdges() []*GetRisks_Risks_Edges {
	if t == nil {
		t = &GetRisks_Risks{}
	}
	return t.Edges
}
func (t *GetRisks_Risks) GetPageInfo() *GetRisks_Risks_PageInfo {
	if t == nil {
		t = &GetRisks_Risks{}
	}
	return &t.PageInfo
}
func (t *GetRisks_Risks) GetTotalCount() int64 {
	if t == nil {
		t = &GetRisks_Risks{}
	}
	return t.TotalCount
}

type UpdateRisk_UpdateRisk_Risk struct {
	BusinessCosts *string               "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	Category      *string               "json:\"category,omitempty\" graphql:\"category\""
	CreatedAt     *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID    *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details       *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                "json:\"displayID\" graphql:\"displayID\""
	ID            string                "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact     "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string               "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                "json:\"name\" graphql:\"name\""
	OwnerID       *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RiskType      *string               "json:\"riskType,omitempty\" graphql:\"riskType\""
	Score         *int64                "json:\"score,omitempty\" graphql:\"score\""
	StakeholderID *string               "json:\"stakeholderID,omitempty\" graphql:\"stakeholderID\""
	Status        *enums.RiskStatus     "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateRisk_UpdateRisk_Risk) GetBusinessCosts() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.BusinessCosts
}
func (t *UpdateRisk_UpdateRisk_Risk) GetCategory() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Category
}
func (t *UpdateRisk_UpdateRisk_Risk) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.CreatedAt
}
func (t *UpdateRisk_UpdateRisk_Risk) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.CreatedBy
}
func (t *UpdateRisk_UpdateRisk_Risk) GetDelegateID() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.DelegateID
}
func (t *UpdateRisk_UpdateRisk_Risk) GetDetails() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Details
}
func (t *UpdateRisk_UpdateRisk_Risk) GetDisplayID() string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.DisplayID
}
func (t *UpdateRisk_UpdateRisk_Risk) GetID() string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.ID
}
func (t *UpdateRisk_UpdateRisk_Risk) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Impact
}
func (t *UpdateRisk_UpdateRisk_Risk) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Likelihood
}
func (t *UpdateRisk_UpdateRisk_Risk) GetMitigation() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Mitigation
}
func (t *UpdateRisk_UpdateRisk_Risk) GetName() string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Name
}
func (t *UpdateRisk_UpdateRisk_Risk) GetOwnerID() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.OwnerID
}
func (t *UpdateRisk_UpdateRisk_Risk) GetRiskType() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.RiskType
}
func (t *UpdateRisk_UpdateRisk_Risk) GetScore() *int64 {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Score
}
func (t *UpdateRisk_UpdateRisk_Risk) GetStakeholderID() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.StakeholderID
}
func (t *UpdateRisk_UpdateRisk_Risk) GetStatus() *enums.RiskStatus {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Status
}
func (t *UpdateRisk_UpdateRisk_Risk) GetTags() []string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Tags
}
func (t *UpdateRisk_UpdateRisk_Risk) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.UpdatedAt
}
func (t *UpdateRisk_UpdateRisk_Risk) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.UpdatedBy
}

type UpdateRisk_UpdateRisk struct {
	Risk UpdateRisk_UpdateRisk_Risk "json:\"risk\" graphql:\"risk\""
}

func (t *UpdateRisk_UpdateRisk) GetRisk() *UpdateRisk_UpdateRisk_Risk {
	if t == nil {
		t = &UpdateRisk_UpdateRisk{}
	}
	return &t.Risk
}

type GetAllRiskHistories_RiskHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllRiskHistories_RiskHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllRiskHistories_RiskHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllRiskHistories_RiskHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllRiskHistories_RiskHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllRiskHistories_RiskHistories_Edges_Node struct {
	BusinessCosts *string               "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	Category      *string               "json:\"category,omitempty\" graphql:\"category\""
	CreatedAt     *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID    *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details       *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                "json:\"displayID\" graphql:\"displayID\""
	HistoryTime   time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID            string                "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact     "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string               "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                "json:\"name\" graphql:\"name\""
	Operation     history.OpType        "json:\"operation\" graphql:\"operation\""
	OwnerID       *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref           *string               "json:\"ref,omitempty\" graphql:\"ref\""
	RiskType      *string               "json:\"riskType,omitempty\" graphql:\"riskType\""
	Score         *int64                "json:\"score,omitempty\" graphql:\"score\""
	StakeholderID *string               "json:\"stakeholderID,omitempty\" graphql:\"stakeholderID\""
	Status        *enums.RiskStatus     "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetBusinessCosts() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.BusinessCosts
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Impact
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Likelihood
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetMitigation() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Mitigation
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetRiskType() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.RiskType
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetScore() *int64 {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Score
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetStakeholderID() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.StakeholderID
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetStatus() *enums.RiskStatus {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllRiskHistories_RiskHistories_Edges struct {
	Node *GetAllRiskHistories_RiskHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllRiskHistories_RiskHistories_Edges) GetNode() *GetAllRiskHistories_RiskHistories_Edges_Node {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges{}
	}
	return t.Node
}

type GetAllRiskHistories_RiskHistories struct {
	Edges      []*GetAllRiskHistories_RiskHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllRiskHistories_RiskHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllRiskHistories_RiskHistories) GetEdges() []*GetAllRiskHistories_RiskHistories_Edges {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories{}
	}
	return t.Edges
}
func (t *GetAllRiskHistories_RiskHistories) GetPageInfo() *GetAllRiskHistories_RiskHistories_PageInfo {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllRiskHistories_RiskHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories{}
	}
	return t.TotalCount
}

type GetRiskHistories_RiskHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetRiskHistories_RiskHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetRiskHistories_RiskHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetRiskHistories_RiskHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetRiskHistories_RiskHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetRiskHistories_RiskHistories_Edges_Node struct {
	BusinessCosts *string               "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	Category      *string               "json:\"category,omitempty\" graphql:\"category\""
	CreatedAt     *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID    *string               "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Details       *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                "json:\"displayID\" graphql:\"displayID\""
	HistoryTime   time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID            string                "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact     "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string               "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                "json:\"name\" graphql:\"name\""
	Operation     history.OpType        "json:\"operation\" graphql:\"operation\""
	OwnerID       *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref           *string               "json:\"ref,omitempty\" graphql:\"ref\""
	RiskType      *string               "json:\"riskType,omitempty\" graphql:\"riskType\""
	Score         *int64                "json:\"score,omitempty\" graphql:\"score\""
	StakeholderID *string               "json:\"stakeholderID,omitempty\" graphql:\"stakeholderID\""
	Status        *enums.RiskStatus     "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetRiskHistories_RiskHistories_Edges_Node) GetBusinessCosts() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.BusinessCosts
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Category
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Impact
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Likelihood
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetMitigation() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Mitigation
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetRiskType() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.RiskType
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetScore() *int64 {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Score
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetStakeholderID() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.StakeholderID
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetStatus() *enums.RiskStatus {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetRiskHistories_RiskHistories_Edges struct {
	Node *GetRiskHistories_RiskHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetRiskHistories_RiskHistories_Edges) GetNode() *GetRiskHistories_RiskHistories_Edges_Node {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges{}
	}
	return t.Node
}

type GetRiskHistories_RiskHistories struct {
	Edges      []*GetRiskHistories_RiskHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetRiskHistories_RiskHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetRiskHistories_RiskHistories) GetEdges() []*GetRiskHistories_RiskHistories_Edges {
	if t == nil {
		t = &GetRiskHistories_RiskHistories{}
	}
	return t.Edges
}
func (t *GetRiskHistories_RiskHistories) GetPageInfo() *GetRiskHistories_RiskHistories_PageInfo {
	if t == nil {
		t = &GetRiskHistories_RiskHistories{}
	}
	return &t.PageInfo
}
func (t *GetRiskHistories_RiskHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetRiskHistories_RiskHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVScan_CreateBulkCSVScan_Scans struct {
	CreatedAt *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string           "json:\"id\" graphql:\"id\""
	Metadata  map[string]any   "json:\"metadata,omitempty\" graphql:\"metadata\""
	OwnerID   *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ScanType  enums.ScanType   "json:\"scanType\" graphql:\"scanType\""
	Status    enums.ScanStatus "json:\"status\" graphql:\"status\""
	Tags      []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Target    string           "json:\"target\" graphql:\"target\""
	UpdatedAt *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVScan_CreateBulkCSVScan_Scans) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVScan_CreateBulkCSVScan_Scans{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVScan_CreateBulkCSVScan_Scans) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVScan_CreateBulkCSVScan_Scans{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVScan_CreateBulkCSVScan_Scans) GetID() string {
	if t == nil {
		t = &CreateBulkCSVScan_CreateBulkCSVScan_Scans{}
	}
	return t.ID
}
func (t *CreateBulkCSVScan_CreateBulkCSVScan_Scans) GetMetadata() map[string]any {
	if t == nil {
		t = &CreateBulkCSVScan_CreateBulkCSVScan_Scans{}
	}
	return t.Metadata
}
func (t *CreateBulkCSVScan_CreateBulkCSVScan_Scans) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVScan_CreateBulkCSVScan_Scans{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVScan_CreateBulkCSVScan_Scans) GetScanType() *enums.ScanType {
	if t == nil {
		t = &CreateBulkCSVScan_CreateBulkCSVScan_Scans{}
	}
	return &t.ScanType
}
func (t *CreateBulkCSVScan_CreateBulkCSVScan_Scans) GetStatus() *enums.ScanStatus {
	if t == nil {
		t = &CreateBulkCSVScan_CreateBulkCSVScan_Scans{}
	}
	return &t.Status
}
func (t *CreateBulkCSVScan_CreateBulkCSVScan_Scans) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVScan_CreateBulkCSVScan_Scans{}
	}
	return t.Tags
}
func (t *CreateBulkCSVScan_CreateBulkCSVScan_Scans) GetTarget() string {
	if t == nil {
		t = &CreateBulkCSVScan_CreateBulkCSVScan_Scans{}
	}
	return t.Target
}
func (t *CreateBulkCSVScan_CreateBulkCSVScan_Scans) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVScan_CreateBulkCSVScan_Scans{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVScan_CreateBulkCSVScan_Scans) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVScan_CreateBulkCSVScan_Scans{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVScan_CreateBulkCSVScan struct {
	Scans []*CreateBulkCSVScan_CreateBulkCSVScan_Scans "json:\"scans,omitempty\" graphql:\"scans\""
}

func (t *CreateBulkCSVScan_CreateBulkCSVScan) GetScans() []*CreateBulkCSVScan_CreateBulkCSVScan_Scans {
	if t == nil {
		t = &CreateBulkCSVScan_CreateBulkCSVScan{}
	}
	return t.Scans
}

type CreateBulkScan_CreateBulkScan_Scans struct {
	CreatedAt *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string           "json:\"id\" graphql:\"id\""
	Metadata  map[string]any   "json:\"metadata,omitempty\" graphql:\"metadata\""
	OwnerID   *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ScanType  enums.ScanType   "json:\"scanType\" graphql:\"scanType\""
	Status    enums.ScanStatus "json:\"status\" graphql:\"status\""
	Tags      []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Target    string           "json:\"target\" graphql:\"target\""
	UpdatedAt *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkScan_CreateBulkScan_Scans) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkScan_CreateBulkScan_Scans{}
	}
	return t.CreatedAt
}
func (t *CreateBulkScan_CreateBulkScan_Scans) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkScan_CreateBulkScan_Scans{}
	}
	return t.CreatedBy
}
func (t *CreateBulkScan_CreateBulkScan_Scans) GetID() string {
	if t == nil {
		t = &CreateBulkScan_CreateBulkScan_Scans{}
	}
	return t.ID
}
func (t *CreateBulkScan_CreateBulkScan_Scans) GetMetadata() map[string]any {
	if t == nil {
		t = &CreateBulkScan_CreateBulkScan_Scans{}
	}
	return t.Metadata
}
func (t *CreateBulkScan_CreateBulkScan_Scans) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkScan_CreateBulkScan_Scans{}
	}
	return t.OwnerID
}
func (t *CreateBulkScan_CreateBulkScan_Scans) GetScanType() *enums.ScanType {
	if t == nil {
		t = &CreateBulkScan_CreateBulkScan_Scans{}
	}
	return &t.ScanType
}
func (t *CreateBulkScan_CreateBulkScan_Scans) GetStatus() *enums.ScanStatus {
	if t == nil {
		t = &CreateBulkScan_CreateBulkScan_Scans{}
	}
	return &t.Status
}
func (t *CreateBulkScan_CreateBulkScan_Scans) GetTags() []string {
	if t == nil {
		t = &CreateBulkScan_CreateBulkScan_Scans{}
	}
	return t.Tags
}
func (t *CreateBulkScan_CreateBulkScan_Scans) GetTarget() string {
	if t == nil {
		t = &CreateBulkScan_CreateBulkScan_Scans{}
	}
	return t.Target
}
func (t *CreateBulkScan_CreateBulkScan_Scans) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkScan_CreateBulkScan_Scans{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkScan_CreateBulkScan_Scans) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkScan_CreateBulkScan_Scans{}
	}
	return t.UpdatedBy
}

type CreateBulkScan_CreateBulkScan struct {
	Scans []*CreateBulkScan_CreateBulkScan_Scans "json:\"scans,omitempty\" graphql:\"scans\""
}

func (t *CreateBulkScan_CreateBulkScan) GetScans() []*CreateBulkScan_CreateBulkScan_Scans {
	if t == nil {
		t = &CreateBulkScan_CreateBulkScan{}
	}
	return t.Scans
}

type CreateScan_CreateScan_Scan struct {
	CreatedAt *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string           "json:\"id\" graphql:\"id\""
	Metadata  map[string]any   "json:\"metadata,omitempty\" graphql:\"metadata\""
	OwnerID   *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ScanType  enums.ScanType   "json:\"scanType\" graphql:\"scanType\""
	Status    enums.ScanStatus "json:\"status\" graphql:\"status\""
	Tags      []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Target    string           "json:\"target\" graphql:\"target\""
	UpdatedAt *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateScan_CreateScan_Scan) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateScan_CreateScan_Scan{}
	}
	return t.CreatedAt
}
func (t *CreateScan_CreateScan_Scan) GetCreatedBy() *string {
	if t == nil {
		t = &CreateScan_CreateScan_Scan{}
	}
	return t.CreatedBy
}
func (t *CreateScan_CreateScan_Scan) GetID() string {
	if t == nil {
		t = &CreateScan_CreateScan_Scan{}
	}
	return t.ID
}
func (t *CreateScan_CreateScan_Scan) GetMetadata() map[string]any {
	if t == nil {
		t = &CreateScan_CreateScan_Scan{}
	}
	return t.Metadata
}
func (t *CreateScan_CreateScan_Scan) GetOwnerID() *string {
	if t == nil {
		t = &CreateScan_CreateScan_Scan{}
	}
	return t.OwnerID
}
func (t *CreateScan_CreateScan_Scan) GetScanType() *enums.ScanType {
	if t == nil {
		t = &CreateScan_CreateScan_Scan{}
	}
	return &t.ScanType
}
func (t *CreateScan_CreateScan_Scan) GetStatus() *enums.ScanStatus {
	if t == nil {
		t = &CreateScan_CreateScan_Scan{}
	}
	return &t.Status
}
func (t *CreateScan_CreateScan_Scan) GetTags() []string {
	if t == nil {
		t = &CreateScan_CreateScan_Scan{}
	}
	return t.Tags
}
func (t *CreateScan_CreateScan_Scan) GetTarget() string {
	if t == nil {
		t = &CreateScan_CreateScan_Scan{}
	}
	return t.Target
}
func (t *CreateScan_CreateScan_Scan) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateScan_CreateScan_Scan{}
	}
	return t.UpdatedAt
}
func (t *CreateScan_CreateScan_Scan) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateScan_CreateScan_Scan{}
	}
	return t.UpdatedBy
}

type CreateScan_CreateScan struct {
	Scan CreateScan_CreateScan_Scan "json:\"scan\" graphql:\"scan\""
}

func (t *CreateScan_CreateScan) GetScan() *CreateScan_CreateScan_Scan {
	if t == nil {
		t = &CreateScan_CreateScan{}
	}
	return &t.Scan
}

type DeleteScan_DeleteScan struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteScan_DeleteScan) GetDeletedID() string {
	if t == nil {
		t = &DeleteScan_DeleteScan{}
	}
	return t.DeletedID
}

type GetAllScans_Scans_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllScans_Scans_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllScans_Scans_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllScans_Scans_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllScans_Scans_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllScans_Scans_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllScans_Scans_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllScans_Scans_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllScans_Scans_PageInfo{}
	}
	return t.StartCursor
}

type GetAllScans_Scans_Edges_Node struct {
	CreatedAt *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string           "json:\"id\" graphql:\"id\""
	Metadata  map[string]any   "json:\"metadata,omitempty\" graphql:\"metadata\""
	OwnerID   *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ScanType  enums.ScanType   "json:\"scanType\" graphql:\"scanType\""
	Status    enums.ScanStatus "json:\"status\" graphql:\"status\""
	Tags      []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Target    string           "json:\"target\" graphql:\"target\""
	UpdatedAt *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllScans_Scans_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllScans_Scans_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllScans_Scans_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllScans_Scans_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllScans_Scans_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllScans_Scans_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllScans_Scans_Edges_Node) GetMetadata() map[string]any {
	if t == nil {
		t = &GetAllScans_Scans_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetAllScans_Scans_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllScans_Scans_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllScans_Scans_Edges_Node) GetScanType() *enums.ScanType {
	if t == nil {
		t = &GetAllScans_Scans_Edges_Node{}
	}
	return &t.ScanType
}
func (t *GetAllScans_Scans_Edges_Node) GetStatus() *enums.ScanStatus {
	if t == nil {
		t = &GetAllScans_Scans_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllScans_Scans_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllScans_Scans_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllScans_Scans_Edges_Node) GetTarget() string {
	if t == nil {
		t = &GetAllScans_Scans_Edges_Node{}
	}
	return t.Target
}
func (t *GetAllScans_Scans_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllScans_Scans_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllScans_Scans_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllScans_Scans_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllScans_Scans_Edges struct {
	Node *GetAllScans_Scans_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllScans_Scans_Edges) GetNode() *GetAllScans_Scans_Edges_Node {
	if t == nil {
		t = &GetAllScans_Scans_Edges{}
	}
	return t.Node
}

type GetAllScans_Scans struct {
	Edges      []*GetAllScans_Scans_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllScans_Scans_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllScans_Scans) GetEdges() []*GetAllScans_Scans_Edges {
	if t == nil {
		t = &GetAllScans_Scans{}
	}
	return t.Edges
}
func (t *GetAllScans_Scans) GetPageInfo() *GetAllScans_Scans_PageInfo {
	if t == nil {
		t = &GetAllScans_Scans{}
	}
	return &t.PageInfo
}
func (t *GetAllScans_Scans) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllScans_Scans{}
	}
	return t.TotalCount
}

type GetScanByID_Scan struct {
	CreatedAt *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string           "json:\"id\" graphql:\"id\""
	Metadata  map[string]any   "json:\"metadata,omitempty\" graphql:\"metadata\""
	OwnerID   *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ScanType  enums.ScanType   "json:\"scanType\" graphql:\"scanType\""
	Status    enums.ScanStatus "json:\"status\" graphql:\"status\""
	Tags      []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Target    string           "json:\"target\" graphql:\"target\""
	UpdatedAt *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetScanByID_Scan) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetScanByID_Scan{}
	}
	return t.CreatedAt
}
func (t *GetScanByID_Scan) GetCreatedBy() *string {
	if t == nil {
		t = &GetScanByID_Scan{}
	}
	return t.CreatedBy
}
func (t *GetScanByID_Scan) GetID() string {
	if t == nil {
		t = &GetScanByID_Scan{}
	}
	return t.ID
}
func (t *GetScanByID_Scan) GetMetadata() map[string]any {
	if t == nil {
		t = &GetScanByID_Scan{}
	}
	return t.Metadata
}
func (t *GetScanByID_Scan) GetOwnerID() *string {
	if t == nil {
		t = &GetScanByID_Scan{}
	}
	return t.OwnerID
}
func (t *GetScanByID_Scan) GetScanType() *enums.ScanType {
	if t == nil {
		t = &GetScanByID_Scan{}
	}
	return &t.ScanType
}
func (t *GetScanByID_Scan) GetStatus() *enums.ScanStatus {
	if t == nil {
		t = &GetScanByID_Scan{}
	}
	return &t.Status
}
func (t *GetScanByID_Scan) GetTags() []string {
	if t == nil {
		t = &GetScanByID_Scan{}
	}
	return t.Tags
}
func (t *GetScanByID_Scan) GetTarget() string {
	if t == nil {
		t = &GetScanByID_Scan{}
	}
	return t.Target
}
func (t *GetScanByID_Scan) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetScanByID_Scan{}
	}
	return t.UpdatedAt
}
func (t *GetScanByID_Scan) GetUpdatedBy() *string {
	if t == nil {
		t = &GetScanByID_Scan{}
	}
	return t.UpdatedBy
}

type GetScans_Scans_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetScans_Scans_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetScans_Scans_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetScans_Scans_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetScans_Scans_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetScans_Scans_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetScans_Scans_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetScans_Scans_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetScans_Scans_PageInfo{}
	}
	return t.StartCursor
}

type GetScans_Scans_Edges_Node struct {
	CreatedAt *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string           "json:\"id\" graphql:\"id\""
	Metadata  map[string]any   "json:\"metadata,omitempty\" graphql:\"metadata\""
	OwnerID   *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ScanType  enums.ScanType   "json:\"scanType\" graphql:\"scanType\""
	Status    enums.ScanStatus "json:\"status\" graphql:\"status\""
	Tags      []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Target    string           "json:\"target\" graphql:\"target\""
	UpdatedAt *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetScans_Scans_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetScans_Scans_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetScans_Scans_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetScans_Scans_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetScans_Scans_Edges_Node) GetID() string {
	if t == nil {
		t = &GetScans_Scans_Edges_Node{}
	}
	return t.ID
}
func (t *GetScans_Scans_Edges_Node) GetMetadata() map[string]any {
	if t == nil {
		t = &GetScans_Scans_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetScans_Scans_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetScans_Scans_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetScans_Scans_Edges_Node) GetScanType() *enums.ScanType {
	if t == nil {
		t = &GetScans_Scans_Edges_Node{}
	}
	return &t.ScanType
}
func (t *GetScans_Scans_Edges_Node) GetStatus() *enums.ScanStatus {
	if t == nil {
		t = &GetScans_Scans_Edges_Node{}
	}
	return &t.Status
}
func (t *GetScans_Scans_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetScans_Scans_Edges_Node{}
	}
	return t.Tags
}
func (t *GetScans_Scans_Edges_Node) GetTarget() string {
	if t == nil {
		t = &GetScans_Scans_Edges_Node{}
	}
	return t.Target
}
func (t *GetScans_Scans_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetScans_Scans_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetScans_Scans_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetScans_Scans_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetScans_Scans_Edges struct {
	Node *GetScans_Scans_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetScans_Scans_Edges) GetNode() *GetScans_Scans_Edges_Node {
	if t == nil {
		t = &GetScans_Scans_Edges{}
	}
	return t.Node
}

type GetScans_Scans struct {
	Edges      []*GetScans_Scans_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetScans_Scans_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetScans_Scans) GetEdges() []*GetScans_Scans_Edges {
	if t == nil {
		t = &GetScans_Scans{}
	}
	return t.Edges
}
func (t *GetScans_Scans) GetPageInfo() *GetScans_Scans_PageInfo {
	if t == nil {
		t = &GetScans_Scans{}
	}
	return &t.PageInfo
}
func (t *GetScans_Scans) GetTotalCount() int64 {
	if t == nil {
		t = &GetScans_Scans{}
	}
	return t.TotalCount
}

type UpdateScan_UpdateScan_Scan struct {
	CreatedAt *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string           "json:\"id\" graphql:\"id\""
	Metadata  map[string]any   "json:\"metadata,omitempty\" graphql:\"metadata\""
	OwnerID   *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ScanType  enums.ScanType   "json:\"scanType\" graphql:\"scanType\""
	Status    enums.ScanStatus "json:\"status\" graphql:\"status\""
	Tags      []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Target    string           "json:\"target\" graphql:\"target\""
	UpdatedAt *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateScan_UpdateScan_Scan) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateScan_UpdateScan_Scan{}
	}
	return t.CreatedAt
}
func (t *UpdateScan_UpdateScan_Scan) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateScan_UpdateScan_Scan{}
	}
	return t.CreatedBy
}
func (t *UpdateScan_UpdateScan_Scan) GetID() string {
	if t == nil {
		t = &UpdateScan_UpdateScan_Scan{}
	}
	return t.ID
}
func (t *UpdateScan_UpdateScan_Scan) GetMetadata() map[string]any {
	if t == nil {
		t = &UpdateScan_UpdateScan_Scan{}
	}
	return t.Metadata
}
func (t *UpdateScan_UpdateScan_Scan) GetOwnerID() *string {
	if t == nil {
		t = &UpdateScan_UpdateScan_Scan{}
	}
	return t.OwnerID
}
func (t *UpdateScan_UpdateScan_Scan) GetScanType() *enums.ScanType {
	if t == nil {
		t = &UpdateScan_UpdateScan_Scan{}
	}
	return &t.ScanType
}
func (t *UpdateScan_UpdateScan_Scan) GetStatus() *enums.ScanStatus {
	if t == nil {
		t = &UpdateScan_UpdateScan_Scan{}
	}
	return &t.Status
}
func (t *UpdateScan_UpdateScan_Scan) GetTags() []string {
	if t == nil {
		t = &UpdateScan_UpdateScan_Scan{}
	}
	return t.Tags
}
func (t *UpdateScan_UpdateScan_Scan) GetTarget() string {
	if t == nil {
		t = &UpdateScan_UpdateScan_Scan{}
	}
	return t.Target
}
func (t *UpdateScan_UpdateScan_Scan) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateScan_UpdateScan_Scan{}
	}
	return t.UpdatedAt
}
func (t *UpdateScan_UpdateScan_Scan) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateScan_UpdateScan_Scan{}
	}
	return t.UpdatedBy
}

type UpdateScan_UpdateScan struct {
	Scan UpdateScan_UpdateScan_Scan "json:\"scan\" graphql:\"scan\""
}

func (t *UpdateScan_UpdateScan) GetScan() *UpdateScan_UpdateScan_Scan {
	if t == nil {
		t = &UpdateScan_UpdateScan{}
	}
	return &t.Scan
}

type GetAllScanHistories_ScanHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllScanHistories_ScanHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllScanHistories_ScanHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllScanHistories_ScanHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllScanHistories_ScanHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllScanHistories_ScanHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllScanHistories_ScanHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllScanHistories_ScanHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllScanHistories_ScanHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllScanHistories_ScanHistories_Edges_Node struct {
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID          string           "json:\"id\" graphql:\"id\""
	Metadata    map[string]any   "json:\"metadata,omitempty\" graphql:\"metadata\""
	Operation   history.OpType   "json:\"operation\" graphql:\"operation\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string          "json:\"ref,omitempty\" graphql:\"ref\""
	ScanType    enums.ScanType   "json:\"scanType\" graphql:\"scanType\""
	Status      enums.ScanStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Target      string           "json:\"target\" graphql:\"target\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllScanHistories_ScanHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllScanHistories_ScanHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllScanHistories_ScanHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllScanHistories_ScanHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllScanHistories_ScanHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllScanHistories_ScanHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllScanHistories_ScanHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllScanHistories_ScanHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllScanHistories_ScanHistories_Edges_Node) GetMetadata() map[string]any {
	if t == nil {
		t = &GetAllScanHistories_ScanHistories_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetAllScanHistories_ScanHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllScanHistories_ScanHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllScanHistories_ScanHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllScanHistories_ScanHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllScanHistories_ScanHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllScanHistories_ScanHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllScanHistories_ScanHistories_Edges_Node) GetScanType() *enums.ScanType {
	if t == nil {
		t = &GetAllScanHistories_ScanHistories_Edges_Node{}
	}
	return &t.ScanType
}
func (t *GetAllScanHistories_ScanHistories_Edges_Node) GetStatus() *enums.ScanStatus {
	if t == nil {
		t = &GetAllScanHistories_ScanHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllScanHistories_ScanHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllScanHistories_ScanHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllScanHistories_ScanHistories_Edges_Node) GetTarget() string {
	if t == nil {
		t = &GetAllScanHistories_ScanHistories_Edges_Node{}
	}
	return t.Target
}
func (t *GetAllScanHistories_ScanHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllScanHistories_ScanHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllScanHistories_ScanHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllScanHistories_ScanHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllScanHistories_ScanHistories_Edges struct {
	Node *GetAllScanHistories_ScanHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllScanHistories_ScanHistories_Edges) GetNode() *GetAllScanHistories_ScanHistories_Edges_Node {
	if t == nil {
		t = &GetAllScanHistories_ScanHistories_Edges{}
	}
	return t.Node
}

type GetAllScanHistories_ScanHistories struct {
	Edges      []*GetAllScanHistories_ScanHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllScanHistories_ScanHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllScanHistories_ScanHistories) GetEdges() []*GetAllScanHistories_ScanHistories_Edges {
	if t == nil {
		t = &GetAllScanHistories_ScanHistories{}
	}
	return t.Edges
}
func (t *GetAllScanHistories_ScanHistories) GetPageInfo() *GetAllScanHistories_ScanHistories_PageInfo {
	if t == nil {
		t = &GetAllScanHistories_ScanHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllScanHistories_ScanHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllScanHistories_ScanHistories{}
	}
	return t.TotalCount
}

type GetScanHistories_ScanHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetScanHistories_ScanHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetScanHistories_ScanHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetScanHistories_ScanHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetScanHistories_ScanHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetScanHistories_ScanHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetScanHistories_ScanHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetScanHistories_ScanHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetScanHistories_ScanHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetScanHistories_ScanHistories_Edges_Node struct {
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID          string           "json:\"id\" graphql:\"id\""
	Metadata    map[string]any   "json:\"metadata,omitempty\" graphql:\"metadata\""
	Operation   history.OpType   "json:\"operation\" graphql:\"operation\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string          "json:\"ref,omitempty\" graphql:\"ref\""
	ScanType    enums.ScanType   "json:\"scanType\" graphql:\"scanType\""
	Status      enums.ScanStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Target      string           "json:\"target\" graphql:\"target\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetScanHistories_ScanHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetScanHistories_ScanHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetScanHistories_ScanHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetScanHistories_ScanHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetScanHistories_ScanHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetScanHistories_ScanHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetScanHistories_ScanHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetScanHistories_ScanHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetScanHistories_ScanHistories_Edges_Node) GetMetadata() map[string]any {
	if t == nil {
		t = &GetScanHistories_ScanHistories_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetScanHistories_ScanHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetScanHistories_ScanHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetScanHistories_ScanHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetScanHistories_ScanHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetScanHistories_ScanHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetScanHistories_ScanHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetScanHistories_ScanHistories_Edges_Node) GetScanType() *enums.ScanType {
	if t == nil {
		t = &GetScanHistories_ScanHistories_Edges_Node{}
	}
	return &t.ScanType
}
func (t *GetScanHistories_ScanHistories_Edges_Node) GetStatus() *enums.ScanStatus {
	if t == nil {
		t = &GetScanHistories_ScanHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetScanHistories_ScanHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetScanHistories_ScanHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetScanHistories_ScanHistories_Edges_Node) GetTarget() string {
	if t == nil {
		t = &GetScanHistories_ScanHistories_Edges_Node{}
	}
	return t.Target
}
func (t *GetScanHistories_ScanHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetScanHistories_ScanHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetScanHistories_ScanHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetScanHistories_ScanHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetScanHistories_ScanHistories_Edges struct {
	Node *GetScanHistories_ScanHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetScanHistories_ScanHistories_Edges) GetNode() *GetScanHistories_ScanHistories_Edges_Node {
	if t == nil {
		t = &GetScanHistories_ScanHistories_Edges{}
	}
	return t.Node
}

type GetScanHistories_ScanHistories struct {
	Edges      []*GetScanHistories_ScanHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetScanHistories_ScanHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetScanHistories_ScanHistories) GetEdges() []*GetScanHistories_ScanHistories_Edges {
	if t == nil {
		t = &GetScanHistories_ScanHistories{}
	}
	return t.Edges
}
func (t *GetScanHistories_ScanHistories) GetPageInfo() *GetScanHistories_ScanHistories_PageInfo {
	if t == nil {
		t = &GetScanHistories_ScanHistories{}
	}
	return &t.PageInfo
}
func (t *GetScanHistories_ScanHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetScanHistories_ScanHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs struct {
	Active        bool                    "json:\"active\" graphql:\"active\""
	Configuration models.JobConfiguration "json:\"configuration,omitempty\" graphql:\"configuration\""
	CreatedAt     *time.Time              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Cron          *string                 "json:\"cron,omitempty\" graphql:\"cron\""
	DisplayID     string                  "json:\"displayID\" graphql:\"displayID\""
	ID            string                  "json:\"id\" graphql:\"id\""
	JobID         string                  "json:\"jobID\" graphql:\"jobID\""
	JobRunnerID   *string                 "json:\"jobRunnerID,omitempty\" graphql:\"jobRunnerID\""
	OwnerID       *string                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	UpdatedAt     *time.Time              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs) GetActive() bool {
	if t == nil {
		t = &CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs{}
	}
	return t.Active
}
func (t *CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs) GetConfiguration() *models.JobConfiguration {
	if t == nil {
		t = &CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs{}
	}
	return &t.Configuration
}
func (t *CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs) GetCron() *string {
	if t == nil {
		t = &CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs{}
	}
	return t.Cron
}
func (t *CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs{}
	}
	return t.DisplayID
}
func (t *CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs) GetID() string {
	if t == nil {
		t = &CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs{}
	}
	return t.ID
}
func (t *CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs) GetJobID() string {
	if t == nil {
		t = &CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs{}
	}
	return t.JobID
}
func (t *CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs) GetJobRunnerID() *string {
	if t == nil {
		t = &CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs{}
	}
	return t.JobRunnerID
}
func (t *CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob struct {
	ScheduledJobs []*CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs "json:\"scheduledJobs,omitempty\" graphql:\"scheduledJobs\""
}

func (t *CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob) GetScheduledJobs() []*CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob_ScheduledJobs {
	if t == nil {
		t = &CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob{}
	}
	return t.ScheduledJobs
}

type CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs struct {
	Active        bool                    "json:\"active\" graphql:\"active\""
	Configuration models.JobConfiguration "json:\"configuration,omitempty\" graphql:\"configuration\""
	CreatedAt     *time.Time              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Cron          *string                 "json:\"cron,omitempty\" graphql:\"cron\""
	DisplayID     string                  "json:\"displayID\" graphql:\"displayID\""
	ID            string                  "json:\"id\" graphql:\"id\""
	JobID         string                  "json:\"jobID\" graphql:\"jobID\""
	JobRunnerID   *string                 "json:\"jobRunnerID,omitempty\" graphql:\"jobRunnerID\""
	OwnerID       *string                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	UpdatedAt     *time.Time              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs) GetActive() bool {
	if t == nil {
		t = &CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs{}
	}
	return t.Active
}
func (t *CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs) GetConfiguration() *models.JobConfiguration {
	if t == nil {
		t = &CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs{}
	}
	return &t.Configuration
}
func (t *CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs{}
	}
	return t.CreatedAt
}
func (t *CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs{}
	}
	return t.CreatedBy
}
func (t *CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs) GetCron() *string {
	if t == nil {
		t = &CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs{}
	}
	return t.Cron
}
func (t *CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs{}
	}
	return t.DisplayID
}
func (t *CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs) GetID() string {
	if t == nil {
		t = &CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs{}
	}
	return t.ID
}
func (t *CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs) GetJobID() string {
	if t == nil {
		t = &CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs{}
	}
	return t.JobID
}
func (t *CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs) GetJobRunnerID() *string {
	if t == nil {
		t = &CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs{}
	}
	return t.JobRunnerID
}
func (t *CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs{}
	}
	return t.OwnerID
}
func (t *CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs{}
	}
	return t.UpdatedBy
}

type CreateBulkScheduledJob_CreateBulkScheduledJob struct {
	ScheduledJobs []*CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs "json:\"scheduledJobs,omitempty\" graphql:\"scheduledJobs\""
}

func (t *CreateBulkScheduledJob_CreateBulkScheduledJob) GetScheduledJobs() []*CreateBulkScheduledJob_CreateBulkScheduledJob_ScheduledJobs {
	if t == nil {
		t = &CreateBulkScheduledJob_CreateBulkScheduledJob{}
	}
	return t.ScheduledJobs
}

type CreateScheduledJob_CreateScheduledJob_ScheduledJob struct {
	Active        bool                    "json:\"active\" graphql:\"active\""
	Configuration models.JobConfiguration "json:\"configuration,omitempty\" graphql:\"configuration\""
	CreatedAt     *time.Time              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Cron          *string                 "json:\"cron,omitempty\" graphql:\"cron\""
	DisplayID     string                  "json:\"displayID\" graphql:\"displayID\""
	ID            string                  "json:\"id\" graphql:\"id\""
	JobID         string                  "json:\"jobID\" graphql:\"jobID\""
	JobRunnerID   *string                 "json:\"jobRunnerID,omitempty\" graphql:\"jobRunnerID\""
	OwnerID       *string                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	UpdatedAt     *time.Time              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateScheduledJob_CreateScheduledJob_ScheduledJob) GetActive() bool {
	if t == nil {
		t = &CreateScheduledJob_CreateScheduledJob_ScheduledJob{}
	}
	return t.Active
}
func (t *CreateScheduledJob_CreateScheduledJob_ScheduledJob) GetConfiguration() *models.JobConfiguration {
	if t == nil {
		t = &CreateScheduledJob_CreateScheduledJob_ScheduledJob{}
	}
	return &t.Configuration
}
func (t *CreateScheduledJob_CreateScheduledJob_ScheduledJob) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateScheduledJob_CreateScheduledJob_ScheduledJob{}
	}
	return t.CreatedAt
}
func (t *CreateScheduledJob_CreateScheduledJob_ScheduledJob) GetCreatedBy() *string {
	if t == nil {
		t = &CreateScheduledJob_CreateScheduledJob_ScheduledJob{}
	}
	return t.CreatedBy
}
func (t *CreateScheduledJob_CreateScheduledJob_ScheduledJob) GetCron() *string {
	if t == nil {
		t = &CreateScheduledJob_CreateScheduledJob_ScheduledJob{}
	}
	return t.Cron
}
func (t *CreateScheduledJob_CreateScheduledJob_ScheduledJob) GetDisplayID() string {
	if t == nil {
		t = &CreateScheduledJob_CreateScheduledJob_ScheduledJob{}
	}
	return t.DisplayID
}
func (t *CreateScheduledJob_CreateScheduledJob_ScheduledJob) GetID() string {
	if t == nil {
		t = &CreateScheduledJob_CreateScheduledJob_ScheduledJob{}
	}
	return t.ID
}
func (t *CreateScheduledJob_CreateScheduledJob_ScheduledJob) GetJobID() string {
	if t == nil {
		t = &CreateScheduledJob_CreateScheduledJob_ScheduledJob{}
	}
	return t.JobID
}
func (t *CreateScheduledJob_CreateScheduledJob_ScheduledJob) GetJobRunnerID() *string {
	if t == nil {
		t = &CreateScheduledJob_CreateScheduledJob_ScheduledJob{}
	}
	return t.JobRunnerID
}
func (t *CreateScheduledJob_CreateScheduledJob_ScheduledJob) GetOwnerID() *string {
	if t == nil {
		t = &CreateScheduledJob_CreateScheduledJob_ScheduledJob{}
	}
	return t.OwnerID
}
func (t *CreateScheduledJob_CreateScheduledJob_ScheduledJob) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateScheduledJob_CreateScheduledJob_ScheduledJob{}
	}
	return t.UpdatedAt
}
func (t *CreateScheduledJob_CreateScheduledJob_ScheduledJob) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateScheduledJob_CreateScheduledJob_ScheduledJob{}
	}
	return t.UpdatedBy
}

type CreateScheduledJob_CreateScheduledJob struct {
	ScheduledJob CreateScheduledJob_CreateScheduledJob_ScheduledJob "json:\"scheduledJob\" graphql:\"scheduledJob\""
}

func (t *CreateScheduledJob_CreateScheduledJob) GetScheduledJob() *CreateScheduledJob_CreateScheduledJob_ScheduledJob {
	if t == nil {
		t = &CreateScheduledJob_CreateScheduledJob{}
	}
	return &t.ScheduledJob
}

type DeleteScheduledJob_DeleteScheduledJob struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteScheduledJob_DeleteScheduledJob) GetDeletedID() string {
	if t == nil {
		t = &DeleteScheduledJob_DeleteScheduledJob{}
	}
	return t.DeletedID
}

type GetAllScheduledJobs_ScheduledJobs_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllScheduledJobs_ScheduledJobs_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllScheduledJobs_ScheduledJobs_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllScheduledJobs_ScheduledJobs_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllScheduledJobs_ScheduledJobs_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllScheduledJobs_ScheduledJobs_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllScheduledJobs_ScheduledJobs_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllScheduledJobs_ScheduledJobs_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllScheduledJobs_ScheduledJobs_PageInfo{}
	}
	return t.StartCursor
}

type GetAllScheduledJobs_ScheduledJobs_Edges_Node struct {
	Active        bool                    "json:\"active\" graphql:\"active\""
	Configuration models.JobConfiguration "json:\"configuration,omitempty\" graphql:\"configuration\""
	CreatedAt     *time.Time              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Cron          *string                 "json:\"cron,omitempty\" graphql:\"cron\""
	DisplayID     string                  "json:\"displayID\" graphql:\"displayID\""
	ID            string                  "json:\"id\" graphql:\"id\""
	JobID         string                  "json:\"jobID\" graphql:\"jobID\""
	JobRunnerID   *string                 "json:\"jobRunnerID,omitempty\" graphql:\"jobRunnerID\""
	OwnerID       *string                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	UpdatedAt     *time.Time              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllScheduledJobs_ScheduledJobs_Edges_Node) GetActive() bool {
	if t == nil {
		t = &GetAllScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return t.Active
}
func (t *GetAllScheduledJobs_ScheduledJobs_Edges_Node) GetConfiguration() *models.JobConfiguration {
	if t == nil {
		t = &GetAllScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return &t.Configuration
}
func (t *GetAllScheduledJobs_ScheduledJobs_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllScheduledJobs_ScheduledJobs_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllScheduledJobs_ScheduledJobs_Edges_Node) GetCron() *string {
	if t == nil {
		t = &GetAllScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return t.Cron
}
func (t *GetAllScheduledJobs_ScheduledJobs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllScheduledJobs_ScheduledJobs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllScheduledJobs_ScheduledJobs_Edges_Node) GetJobID() string {
	if t == nil {
		t = &GetAllScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return t.JobID
}
func (t *GetAllScheduledJobs_ScheduledJobs_Edges_Node) GetJobRunnerID() *string {
	if t == nil {
		t = &GetAllScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return t.JobRunnerID
}
func (t *GetAllScheduledJobs_ScheduledJobs_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllScheduledJobs_ScheduledJobs_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllScheduledJobs_ScheduledJobs_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllScheduledJobs_ScheduledJobs_Edges struct {
	Node *GetAllScheduledJobs_ScheduledJobs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllScheduledJobs_ScheduledJobs_Edges) GetNode() *GetAllScheduledJobs_ScheduledJobs_Edges_Node {
	if t == nil {
		t = &GetAllScheduledJobs_ScheduledJobs_Edges{}
	}
	return t.Node
}

type GetAllScheduledJobs_ScheduledJobs struct {
	Edges      []*GetAllScheduledJobs_ScheduledJobs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllScheduledJobs_ScheduledJobs_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllScheduledJobs_ScheduledJobs) GetEdges() []*GetAllScheduledJobs_ScheduledJobs_Edges {
	if t == nil {
		t = &GetAllScheduledJobs_ScheduledJobs{}
	}
	return t.Edges
}
func (t *GetAllScheduledJobs_ScheduledJobs) GetPageInfo() *GetAllScheduledJobs_ScheduledJobs_PageInfo {
	if t == nil {
		t = &GetAllScheduledJobs_ScheduledJobs{}
	}
	return &t.PageInfo
}
func (t *GetAllScheduledJobs_ScheduledJobs) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllScheduledJobs_ScheduledJobs{}
	}
	return t.TotalCount
}

type GetScheduledJobByID_ScheduledJob struct {
	Active        bool                    "json:\"active\" graphql:\"active\""
	Configuration models.JobConfiguration "json:\"configuration,omitempty\" graphql:\"configuration\""
	CreatedAt     *time.Time              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Cron          *string                 "json:\"cron,omitempty\" graphql:\"cron\""
	DisplayID     string                  "json:\"displayID\" graphql:\"displayID\""
	ID            string                  "json:\"id\" graphql:\"id\""
	JobID         string                  "json:\"jobID\" graphql:\"jobID\""
	JobRunnerID   *string                 "json:\"jobRunnerID,omitempty\" graphql:\"jobRunnerID\""
	OwnerID       *string                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	UpdatedAt     *time.Time              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetScheduledJobByID_ScheduledJob) GetActive() bool {
	if t == nil {
		t = &GetScheduledJobByID_ScheduledJob{}
	}
	return t.Active
}
func (t *GetScheduledJobByID_ScheduledJob) GetConfiguration() *models.JobConfiguration {
	if t == nil {
		t = &GetScheduledJobByID_ScheduledJob{}
	}
	return &t.Configuration
}
func (t *GetScheduledJobByID_ScheduledJob) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetScheduledJobByID_ScheduledJob{}
	}
	return t.CreatedAt
}
func (t *GetScheduledJobByID_ScheduledJob) GetCreatedBy() *string {
	if t == nil {
		t = &GetScheduledJobByID_ScheduledJob{}
	}
	return t.CreatedBy
}
func (t *GetScheduledJobByID_ScheduledJob) GetCron() *string {
	if t == nil {
		t = &GetScheduledJobByID_ScheduledJob{}
	}
	return t.Cron
}
func (t *GetScheduledJobByID_ScheduledJob) GetDisplayID() string {
	if t == nil {
		t = &GetScheduledJobByID_ScheduledJob{}
	}
	return t.DisplayID
}
func (t *GetScheduledJobByID_ScheduledJob) GetID() string {
	if t == nil {
		t = &GetScheduledJobByID_ScheduledJob{}
	}
	return t.ID
}
func (t *GetScheduledJobByID_ScheduledJob) GetJobID() string {
	if t == nil {
		t = &GetScheduledJobByID_ScheduledJob{}
	}
	return t.JobID
}
func (t *GetScheduledJobByID_ScheduledJob) GetJobRunnerID() *string {
	if t == nil {
		t = &GetScheduledJobByID_ScheduledJob{}
	}
	return t.JobRunnerID
}
func (t *GetScheduledJobByID_ScheduledJob) GetOwnerID() *string {
	if t == nil {
		t = &GetScheduledJobByID_ScheduledJob{}
	}
	return t.OwnerID
}
func (t *GetScheduledJobByID_ScheduledJob) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetScheduledJobByID_ScheduledJob{}
	}
	return t.UpdatedAt
}
func (t *GetScheduledJobByID_ScheduledJob) GetUpdatedBy() *string {
	if t == nil {
		t = &GetScheduledJobByID_ScheduledJob{}
	}
	return t.UpdatedBy
}

type GetScheduledJobs_ScheduledJobs_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetScheduledJobs_ScheduledJobs_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetScheduledJobs_ScheduledJobs_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetScheduledJobs_ScheduledJobs_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetScheduledJobs_ScheduledJobs_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetScheduledJobs_ScheduledJobs_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetScheduledJobs_ScheduledJobs_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetScheduledJobs_ScheduledJobs_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetScheduledJobs_ScheduledJobs_PageInfo{}
	}
	return t.StartCursor
}

type GetScheduledJobs_ScheduledJobs_Edges_Node struct {
	Active        bool                    "json:\"active\" graphql:\"active\""
	Configuration models.JobConfiguration "json:\"configuration,omitempty\" graphql:\"configuration\""
	CreatedAt     *time.Time              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Cron          *string                 "json:\"cron,omitempty\" graphql:\"cron\""
	DisplayID     string                  "json:\"displayID\" graphql:\"displayID\""
	ID            string                  "json:\"id\" graphql:\"id\""
	JobID         string                  "json:\"jobID\" graphql:\"jobID\""
	JobRunnerID   *string                 "json:\"jobRunnerID,omitempty\" graphql:\"jobRunnerID\""
	OwnerID       *string                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	UpdatedAt     *time.Time              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetScheduledJobs_ScheduledJobs_Edges_Node) GetActive() bool {
	if t == nil {
		t = &GetScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return t.Active
}
func (t *GetScheduledJobs_ScheduledJobs_Edges_Node) GetConfiguration() *models.JobConfiguration {
	if t == nil {
		t = &GetScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return &t.Configuration
}
func (t *GetScheduledJobs_ScheduledJobs_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetScheduledJobs_ScheduledJobs_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetScheduledJobs_ScheduledJobs_Edges_Node) GetCron() *string {
	if t == nil {
		t = &GetScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return t.Cron
}
func (t *GetScheduledJobs_ScheduledJobs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetScheduledJobs_ScheduledJobs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return t.ID
}
func (t *GetScheduledJobs_ScheduledJobs_Edges_Node) GetJobID() string {
	if t == nil {
		t = &GetScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return t.JobID
}
func (t *GetScheduledJobs_ScheduledJobs_Edges_Node) GetJobRunnerID() *string {
	if t == nil {
		t = &GetScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return t.JobRunnerID
}
func (t *GetScheduledJobs_ScheduledJobs_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetScheduledJobs_ScheduledJobs_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetScheduledJobs_ScheduledJobs_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetScheduledJobs_ScheduledJobs_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetScheduledJobs_ScheduledJobs_Edges struct {
	Node *GetScheduledJobs_ScheduledJobs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetScheduledJobs_ScheduledJobs_Edges) GetNode() *GetScheduledJobs_ScheduledJobs_Edges_Node {
	if t == nil {
		t = &GetScheduledJobs_ScheduledJobs_Edges{}
	}
	return t.Node
}

type GetScheduledJobs_ScheduledJobs struct {
	Edges      []*GetScheduledJobs_ScheduledJobs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetScheduledJobs_ScheduledJobs_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetScheduledJobs_ScheduledJobs) GetEdges() []*GetScheduledJobs_ScheduledJobs_Edges {
	if t == nil {
		t = &GetScheduledJobs_ScheduledJobs{}
	}
	return t.Edges
}
func (t *GetScheduledJobs_ScheduledJobs) GetPageInfo() *GetScheduledJobs_ScheduledJobs_PageInfo {
	if t == nil {
		t = &GetScheduledJobs_ScheduledJobs{}
	}
	return &t.PageInfo
}
func (t *GetScheduledJobs_ScheduledJobs) GetTotalCount() int64 {
	if t == nil {
		t = &GetScheduledJobs_ScheduledJobs{}
	}
	return t.TotalCount
}

type UpdateScheduledJob_UpdateScheduledJob_ScheduledJob struct {
	Active        bool                    "json:\"active\" graphql:\"active\""
	Configuration models.JobConfiguration "json:\"configuration,omitempty\" graphql:\"configuration\""
	CreatedAt     *time.Time              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Cron          *string                 "json:\"cron,omitempty\" graphql:\"cron\""
	DisplayID     string                  "json:\"displayID\" graphql:\"displayID\""
	ID            string                  "json:\"id\" graphql:\"id\""
	JobID         string                  "json:\"jobID\" graphql:\"jobID\""
	JobRunnerID   *string                 "json:\"jobRunnerID,omitempty\" graphql:\"jobRunnerID\""
	OwnerID       *string                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	UpdatedAt     *time.Time              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateScheduledJob_UpdateScheduledJob_ScheduledJob) GetActive() bool {
	if t == nil {
		t = &UpdateScheduledJob_UpdateScheduledJob_ScheduledJob{}
	}
	return t.Active
}
func (t *UpdateScheduledJob_UpdateScheduledJob_ScheduledJob) GetConfiguration() *models.JobConfiguration {
	if t == nil {
		t = &UpdateScheduledJob_UpdateScheduledJob_ScheduledJob{}
	}
	return &t.Configuration
}
func (t *UpdateScheduledJob_UpdateScheduledJob_ScheduledJob) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateScheduledJob_UpdateScheduledJob_ScheduledJob{}
	}
	return t.CreatedAt
}
func (t *UpdateScheduledJob_UpdateScheduledJob_ScheduledJob) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateScheduledJob_UpdateScheduledJob_ScheduledJob{}
	}
	return t.CreatedBy
}
func (t *UpdateScheduledJob_UpdateScheduledJob_ScheduledJob) GetCron() *string {
	if t == nil {
		t = &UpdateScheduledJob_UpdateScheduledJob_ScheduledJob{}
	}
	return t.Cron
}
func (t *UpdateScheduledJob_UpdateScheduledJob_ScheduledJob) GetDisplayID() string {
	if t == nil {
		t = &UpdateScheduledJob_UpdateScheduledJob_ScheduledJob{}
	}
	return t.DisplayID
}
func (t *UpdateScheduledJob_UpdateScheduledJob_ScheduledJob) GetID() string {
	if t == nil {
		t = &UpdateScheduledJob_UpdateScheduledJob_ScheduledJob{}
	}
	return t.ID
}
func (t *UpdateScheduledJob_UpdateScheduledJob_ScheduledJob) GetJobID() string {
	if t == nil {
		t = &UpdateScheduledJob_UpdateScheduledJob_ScheduledJob{}
	}
	return t.JobID
}
func (t *UpdateScheduledJob_UpdateScheduledJob_ScheduledJob) GetJobRunnerID() *string {
	if t == nil {
		t = &UpdateScheduledJob_UpdateScheduledJob_ScheduledJob{}
	}
	return t.JobRunnerID
}
func (t *UpdateScheduledJob_UpdateScheduledJob_ScheduledJob) GetOwnerID() *string {
	if t == nil {
		t = &UpdateScheduledJob_UpdateScheduledJob_ScheduledJob{}
	}
	return t.OwnerID
}
func (t *UpdateScheduledJob_UpdateScheduledJob_ScheduledJob) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateScheduledJob_UpdateScheduledJob_ScheduledJob{}
	}
	return t.UpdatedAt
}
func (t *UpdateScheduledJob_UpdateScheduledJob_ScheduledJob) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateScheduledJob_UpdateScheduledJob_ScheduledJob{}
	}
	return t.UpdatedBy
}

type UpdateScheduledJob_UpdateScheduledJob struct {
	ScheduledJob UpdateScheduledJob_UpdateScheduledJob_ScheduledJob "json:\"scheduledJob\" graphql:\"scheduledJob\""
}

func (t *UpdateScheduledJob_UpdateScheduledJob) GetScheduledJob() *UpdateScheduledJob_UpdateScheduledJob_ScheduledJob {
	if t == nil {
		t = &UpdateScheduledJob_UpdateScheduledJob{}
	}
	return &t.ScheduledJob
}

type GetAllScheduledJobHistories_ScheduledJobHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllScheduledJobHistories_ScheduledJobHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllScheduledJobHistories_ScheduledJobHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllScheduledJobHistories_ScheduledJobHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllScheduledJobHistories_ScheduledJobHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node struct {
	Active        bool                    "json:\"active\" graphql:\"active\""
	Configuration models.JobConfiguration "json:\"configuration,omitempty\" graphql:\"configuration\""
	CreatedAt     *time.Time              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Cron          *string                 "json:\"cron,omitempty\" graphql:\"cron\""
	DisplayID     string                  "json:\"displayID\" graphql:\"displayID\""
	HistoryTime   time.Time               "json:\"historyTime\" graphql:\"historyTime\""
	ID            string                  "json:\"id\" graphql:\"id\""
	JobID         string                  "json:\"jobID\" graphql:\"jobID\""
	JobRunnerID   *string                 "json:\"jobRunnerID,omitempty\" graphql:\"jobRunnerID\""
	Operation     history.OpType          "json:\"operation\" graphql:\"operation\""
	OwnerID       *string                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref           *string                 "json:\"ref,omitempty\" graphql:\"ref\""
	UpdatedAt     *time.Time              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetActive() bool {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.Active
}
func (t *GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetConfiguration() *models.JobConfiguration {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return &t.Configuration
}
func (t *GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetCron() *string {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.Cron
}
func (t *GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetJobID() string {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.JobID
}
func (t *GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetJobRunnerID() *string {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.JobRunnerID
}
func (t *GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllScheduledJobHistories_ScheduledJobHistories_Edges struct {
	Node *GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllScheduledJobHistories_ScheduledJobHistories_Edges) GetNode() *GetAllScheduledJobHistories_ScheduledJobHistories_Edges_Node {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories_Edges{}
	}
	return t.Node
}

type GetAllScheduledJobHistories_ScheduledJobHistories struct {
	Edges      []*GetAllScheduledJobHistories_ScheduledJobHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllScheduledJobHistories_ScheduledJobHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllScheduledJobHistories_ScheduledJobHistories) GetEdges() []*GetAllScheduledJobHistories_ScheduledJobHistories_Edges {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories{}
	}
	return t.Edges
}
func (t *GetAllScheduledJobHistories_ScheduledJobHistories) GetPageInfo() *GetAllScheduledJobHistories_ScheduledJobHistories_PageInfo {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllScheduledJobHistories_ScheduledJobHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllScheduledJobHistories_ScheduledJobHistories{}
	}
	return t.TotalCount
}

type GetScheduledJobHistories_ScheduledJobHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetScheduledJobHistories_ScheduledJobHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetScheduledJobHistories_ScheduledJobHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetScheduledJobHistories_ScheduledJobHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetScheduledJobHistories_ScheduledJobHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetScheduledJobHistories_ScheduledJobHistories_Edges_Node struct {
	Active        bool                    "json:\"active\" graphql:\"active\""
	Configuration models.JobConfiguration "json:\"configuration,omitempty\" graphql:\"configuration\""
	CreatedAt     *time.Time              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Cron          *string                 "json:\"cron,omitempty\" graphql:\"cron\""
	DisplayID     string                  "json:\"displayID\" graphql:\"displayID\""
	HistoryTime   time.Time               "json:\"historyTime\" graphql:\"historyTime\""
	ID            string                  "json:\"id\" graphql:\"id\""
	JobID         string                  "json:\"jobID\" graphql:\"jobID\""
	JobRunnerID   *string                 "json:\"jobRunnerID,omitempty\" graphql:\"jobRunnerID\""
	Operation     history.OpType          "json:\"operation\" graphql:\"operation\""
	OwnerID       *string                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref           *string                 "json:\"ref,omitempty\" graphql:\"ref\""
	UpdatedAt     *time.Time              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetActive() bool {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.Active
}
func (t *GetScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetConfiguration() *models.JobConfiguration {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return &t.Configuration
}
func (t *GetScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetCron() *string {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.Cron
}
func (t *GetScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetJobID() string {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.JobID
}
func (t *GetScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetJobRunnerID() *string {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.JobRunnerID
}
func (t *GetScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetScheduledJobHistories_ScheduledJobHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetScheduledJobHistories_ScheduledJobHistories_Edges struct {
	Node *GetScheduledJobHistories_ScheduledJobHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetScheduledJobHistories_ScheduledJobHistories_Edges) GetNode() *GetScheduledJobHistories_ScheduledJobHistories_Edges_Node {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories_Edges{}
	}
	return t.Node
}

type GetScheduledJobHistories_ScheduledJobHistories struct {
	Edges      []*GetScheduledJobHistories_ScheduledJobHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetScheduledJobHistories_ScheduledJobHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetScheduledJobHistories_ScheduledJobHistories) GetEdges() []*GetScheduledJobHistories_ScheduledJobHistories_Edges {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories{}
	}
	return t.Edges
}
func (t *GetScheduledJobHistories_ScheduledJobHistories) GetPageInfo() *GetScheduledJobHistories_ScheduledJobHistories_PageInfo {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories{}
	}
	return &t.PageInfo
}
func (t *GetScheduledJobHistories_ScheduledJobHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetScheduledJobHistories_ScheduledJobHistories{}
	}
	return t.TotalCount
}

type CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun struct {
	CreatedAt             *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy             *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ExpectedExecutionTime time.Time                   "json:\"expectedExecutionTime\" graphql:\"expectedExecutionTime\""
	ID                    string                      "json:\"id\" graphql:\"id\""
	JobRunnerID           string                      "json:\"jobRunnerID\" graphql:\"jobRunnerID\""
	OwnerID               *string                     "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ScheduledJobID        string                      "json:\"scheduledJobID\" graphql:\"scheduledJobID\""
	Script                string                      "json:\"script\" graphql:\"script\""
	Status                enums.ScheduledJobRunStatus "json:\"status\" graphql:\"status\""
	UpdatedAt             *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy             *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun{}
	}
	return t.CreatedAt
}
func (t *CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun) GetCreatedBy() *string {
	if t == nil {
		t = &CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun{}
	}
	return t.CreatedBy
}
func (t *CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun) GetExpectedExecutionTime() *time.Time {
	if t == nil {
		t = &CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun{}
	}
	return &t.ExpectedExecutionTime
}
func (t *CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun) GetID() string {
	if t == nil {
		t = &CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun{}
	}
	return t.ID
}
func (t *CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun) GetJobRunnerID() string {
	if t == nil {
		t = &CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun{}
	}
	return t.JobRunnerID
}
func (t *CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun) GetOwnerID() *string {
	if t == nil {
		t = &CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun{}
	}
	return t.OwnerID
}
func (t *CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun) GetScheduledJobID() string {
	if t == nil {
		t = &CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun{}
	}
	return t.ScheduledJobID
}
func (t *CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun) GetScript() string {
	if t == nil {
		t = &CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun{}
	}
	return t.Script
}
func (t *CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun) GetStatus() *enums.ScheduledJobRunStatus {
	if t == nil {
		t = &CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun{}
	}
	return &t.Status
}
func (t *CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun{}
	}
	return t.UpdatedAt
}
func (t *CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun{}
	}
	return t.UpdatedBy
}

type CreateScheduledJobRun_CreateScheduledJobRun struct {
	ScheduledJobRun CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun "json:\"scheduledJobRun\" graphql:\"scheduledJobRun\""
}

func (t *CreateScheduledJobRun_CreateScheduledJobRun) GetScheduledJobRun() *CreateScheduledJobRun_CreateScheduledJobRun_ScheduledJobRun {
	if t == nil {
		t = &CreateScheduledJobRun_CreateScheduledJobRun{}
	}
	return &t.ScheduledJobRun
}

type DeleteScheduledJobRun_DeleteScheduledJobRun struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteScheduledJobRun_DeleteScheduledJobRun) GetDeletedID() string {
	if t == nil {
		t = &DeleteScheduledJobRun_DeleteScheduledJobRun{}
	}
	return t.DeletedID
}

type GetAllScheduledJobRuns_ScheduledJobRuns_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllScheduledJobRuns_ScheduledJobRuns_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllScheduledJobRuns_ScheduledJobRuns_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllScheduledJobRuns_ScheduledJobRuns_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllScheduledJobRuns_ScheduledJobRuns_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllScheduledJobRuns_ScheduledJobRuns_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllScheduledJobRuns_ScheduledJobRuns_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllScheduledJobRuns_ScheduledJobRuns_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllScheduledJobRuns_ScheduledJobRuns_PageInfo{}
	}
	return t.StartCursor
}

type GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node struct {
	CreatedAt             *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy             *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ExpectedExecutionTime time.Time                   "json:\"expectedExecutionTime\" graphql:\"expectedExecutionTime\""
	ID                    string                      "json:\"id\" graphql:\"id\""
	JobRunnerID           string                      "json:\"jobRunnerID\" graphql:\"jobRunnerID\""
	OwnerID               *string                     "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ScheduledJobID        string                      "json:\"scheduledJobID\" graphql:\"scheduledJobID\""
	Script                string                      "json:\"script\" graphql:\"script\""
	Status                enums.ScheduledJobRunStatus "json:\"status\" graphql:\"status\""
	UpdatedAt             *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy             *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node) GetExpectedExecutionTime() *time.Time {
	if t == nil {
		t = &GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node{}
	}
	return &t.ExpectedExecutionTime
}
func (t *GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node) GetJobRunnerID() string {
	if t == nil {
		t = &GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node{}
	}
	return t.JobRunnerID
}
func (t *GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node) GetScheduledJobID() string {
	if t == nil {
		t = &GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node{}
	}
	return t.ScheduledJobID
}
func (t *GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node) GetScript() string {
	if t == nil {
		t = &GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node{}
	}
	return t.Script
}
func (t *GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node) GetStatus() *enums.ScheduledJobRunStatus {
	if t == nil {
		t = &GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllScheduledJobRuns_ScheduledJobRuns_Edges struct {
	Node *GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllScheduledJobRuns_ScheduledJobRuns_Edges) GetNode() *GetAllScheduledJobRuns_ScheduledJobRuns_Edges_Node {
	if t == nil {
		t = &GetAllScheduledJobRuns_ScheduledJobRuns_Edges{}
	}
	return t.Node
}

type GetAllScheduledJobRuns_ScheduledJobRuns struct {
	Edges      []*GetAllScheduledJobRuns_ScheduledJobRuns_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllScheduledJobRuns_ScheduledJobRuns_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                            "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllScheduledJobRuns_ScheduledJobRuns) GetEdges() []*GetAllScheduledJobRuns_ScheduledJobRuns_Edges {
	if t == nil {
		t = &GetAllScheduledJobRuns_ScheduledJobRuns{}
	}
	return t.Edges
}
func (t *GetAllScheduledJobRuns_ScheduledJobRuns) GetPageInfo() *GetAllScheduledJobRuns_ScheduledJobRuns_PageInfo {
	if t == nil {
		t = &GetAllScheduledJobRuns_ScheduledJobRuns{}
	}
	return &t.PageInfo
}
func (t *GetAllScheduledJobRuns_ScheduledJobRuns) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllScheduledJobRuns_ScheduledJobRuns{}
	}
	return t.TotalCount
}

type GetScheduledJobRunByID_ScheduledJobRun struct {
	CreatedAt             *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy             *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ExpectedExecutionTime time.Time                   "json:\"expectedExecutionTime\" graphql:\"expectedExecutionTime\""
	ID                    string                      "json:\"id\" graphql:\"id\""
	JobRunnerID           string                      "json:\"jobRunnerID\" graphql:\"jobRunnerID\""
	OwnerID               *string                     "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ScheduledJobID        string                      "json:\"scheduledJobID\" graphql:\"scheduledJobID\""
	Script                string                      "json:\"script\" graphql:\"script\""
	Status                enums.ScheduledJobRunStatus "json:\"status\" graphql:\"status\""
	UpdatedAt             *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy             *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetScheduledJobRunByID_ScheduledJobRun) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetScheduledJobRunByID_ScheduledJobRun{}
	}
	return t.CreatedAt
}
func (t *GetScheduledJobRunByID_ScheduledJobRun) GetCreatedBy() *string {
	if t == nil {
		t = &GetScheduledJobRunByID_ScheduledJobRun{}
	}
	return t.CreatedBy
}
func (t *GetScheduledJobRunByID_ScheduledJobRun) GetExpectedExecutionTime() *time.Time {
	if t == nil {
		t = &GetScheduledJobRunByID_ScheduledJobRun{}
	}
	return &t.ExpectedExecutionTime
}
func (t *GetScheduledJobRunByID_ScheduledJobRun) GetID() string {
	if t == nil {
		t = &GetScheduledJobRunByID_ScheduledJobRun{}
	}
	return t.ID
}
func (t *GetScheduledJobRunByID_ScheduledJobRun) GetJobRunnerID() string {
	if t == nil {
		t = &GetScheduledJobRunByID_ScheduledJobRun{}
	}
	return t.JobRunnerID
}
func (t *GetScheduledJobRunByID_ScheduledJobRun) GetOwnerID() *string {
	if t == nil {
		t = &GetScheduledJobRunByID_ScheduledJobRun{}
	}
	return t.OwnerID
}
func (t *GetScheduledJobRunByID_ScheduledJobRun) GetScheduledJobID() string {
	if t == nil {
		t = &GetScheduledJobRunByID_ScheduledJobRun{}
	}
	return t.ScheduledJobID
}
func (t *GetScheduledJobRunByID_ScheduledJobRun) GetScript() string {
	if t == nil {
		t = &GetScheduledJobRunByID_ScheduledJobRun{}
	}
	return t.Script
}
func (t *GetScheduledJobRunByID_ScheduledJobRun) GetStatus() *enums.ScheduledJobRunStatus {
	if t == nil {
		t = &GetScheduledJobRunByID_ScheduledJobRun{}
	}
	return &t.Status
}
func (t *GetScheduledJobRunByID_ScheduledJobRun) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetScheduledJobRunByID_ScheduledJobRun{}
	}
	return t.UpdatedAt
}
func (t *GetScheduledJobRunByID_ScheduledJobRun) GetUpdatedBy() *string {
	if t == nil {
		t = &GetScheduledJobRunByID_ScheduledJobRun{}
	}
	return t.UpdatedBy
}

type GetScheduledJobRuns_ScheduledJobRuns_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetScheduledJobRuns_ScheduledJobRuns_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetScheduledJobRuns_ScheduledJobRuns_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetScheduledJobRuns_ScheduledJobRuns_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetScheduledJobRuns_ScheduledJobRuns_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetScheduledJobRuns_ScheduledJobRuns_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetScheduledJobRuns_ScheduledJobRuns_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetScheduledJobRuns_ScheduledJobRuns_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetScheduledJobRuns_ScheduledJobRuns_PageInfo{}
	}
	return t.StartCursor
}

type GetScheduledJobRuns_ScheduledJobRuns_Edges_Node struct {
	CreatedAt             *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy             *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ExpectedExecutionTime time.Time                   "json:\"expectedExecutionTime\" graphql:\"expectedExecutionTime\""
	ID                    string                      "json:\"id\" graphql:\"id\""
	JobRunnerID           string                      "json:\"jobRunnerID\" graphql:\"jobRunnerID\""
	OwnerID               *string                     "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ScheduledJobID        string                      "json:\"scheduledJobID\" graphql:\"scheduledJobID\""
	Script                string                      "json:\"script\" graphql:\"script\""
	Status                enums.ScheduledJobRunStatus "json:\"status\" graphql:\"status\""
	UpdatedAt             *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy             *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetScheduledJobRuns_ScheduledJobRuns_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetScheduledJobRuns_ScheduledJobRuns_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetScheduledJobRuns_ScheduledJobRuns_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetScheduledJobRuns_ScheduledJobRuns_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetScheduledJobRuns_ScheduledJobRuns_Edges_Node) GetExpectedExecutionTime() *time.Time {
	if t == nil {
		t = &GetScheduledJobRuns_ScheduledJobRuns_Edges_Node{}
	}
	return &t.ExpectedExecutionTime
}
func (t *GetScheduledJobRuns_ScheduledJobRuns_Edges_Node) GetID() string {
	if t == nil {
		t = &GetScheduledJobRuns_ScheduledJobRuns_Edges_Node{}
	}
	return t.ID
}
func (t *GetScheduledJobRuns_ScheduledJobRuns_Edges_Node) GetJobRunnerID() string {
	if t == nil {
		t = &GetScheduledJobRuns_ScheduledJobRuns_Edges_Node{}
	}
	return t.JobRunnerID
}
func (t *GetScheduledJobRuns_ScheduledJobRuns_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetScheduledJobRuns_ScheduledJobRuns_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetScheduledJobRuns_ScheduledJobRuns_Edges_Node) GetScheduledJobID() string {
	if t == nil {
		t = &GetScheduledJobRuns_ScheduledJobRuns_Edges_Node{}
	}
	return t.ScheduledJobID
}
func (t *GetScheduledJobRuns_ScheduledJobRuns_Edges_Node) GetScript() string {
	if t == nil {
		t = &GetScheduledJobRuns_ScheduledJobRuns_Edges_Node{}
	}
	return t.Script
}
func (t *GetScheduledJobRuns_ScheduledJobRuns_Edges_Node) GetStatus() *enums.ScheduledJobRunStatus {
	if t == nil {
		t = &GetScheduledJobRuns_ScheduledJobRuns_Edges_Node{}
	}
	return &t.Status
}
func (t *GetScheduledJobRuns_ScheduledJobRuns_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetScheduledJobRuns_ScheduledJobRuns_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetScheduledJobRuns_ScheduledJobRuns_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetScheduledJobRuns_ScheduledJobRuns_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetScheduledJobRuns_ScheduledJobRuns_Edges struct {
	Node *GetScheduledJobRuns_ScheduledJobRuns_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetScheduledJobRuns_ScheduledJobRuns_Edges) GetNode() *GetScheduledJobRuns_ScheduledJobRuns_Edges_Node {
	if t == nil {
		t = &GetScheduledJobRuns_ScheduledJobRuns_Edges{}
	}
	return t.Node
}

type GetScheduledJobRuns_ScheduledJobRuns struct {
	Edges      []*GetScheduledJobRuns_ScheduledJobRuns_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetScheduledJobRuns_ScheduledJobRuns_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetScheduledJobRuns_ScheduledJobRuns) GetEdges() []*GetScheduledJobRuns_ScheduledJobRuns_Edges {
	if t == nil {
		t = &GetScheduledJobRuns_ScheduledJobRuns{}
	}
	return t.Edges
}
func (t *GetScheduledJobRuns_ScheduledJobRuns) GetPageInfo() *GetScheduledJobRuns_ScheduledJobRuns_PageInfo {
	if t == nil {
		t = &GetScheduledJobRuns_ScheduledJobRuns{}
	}
	return &t.PageInfo
}
func (t *GetScheduledJobRuns_ScheduledJobRuns) GetTotalCount() int64 {
	if t == nil {
		t = &GetScheduledJobRuns_ScheduledJobRuns{}
	}
	return t.TotalCount
}

type UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun struct {
	CreatedAt             *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy             *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ExpectedExecutionTime time.Time                   "json:\"expectedExecutionTime\" graphql:\"expectedExecutionTime\""
	ID                    string                      "json:\"id\" graphql:\"id\""
	JobRunnerID           string                      "json:\"jobRunnerID\" graphql:\"jobRunnerID\""
	OwnerID               *string                     "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ScheduledJobID        string                      "json:\"scheduledJobID\" graphql:\"scheduledJobID\""
	Script                string                      "json:\"script\" graphql:\"script\""
	Status                enums.ScheduledJobRunStatus "json:\"status\" graphql:\"status\""
	UpdatedAt             *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy             *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun{}
	}
	return t.CreatedAt
}
func (t *UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun{}
	}
	return t.CreatedBy
}
func (t *UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun) GetExpectedExecutionTime() *time.Time {
	if t == nil {
		t = &UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun{}
	}
	return &t.ExpectedExecutionTime
}
func (t *UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun) GetID() string {
	if t == nil {
		t = &UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun{}
	}
	return t.ID
}
func (t *UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun) GetJobRunnerID() string {
	if t == nil {
		t = &UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun{}
	}
	return t.JobRunnerID
}
func (t *UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun) GetOwnerID() *string {
	if t == nil {
		t = &UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun{}
	}
	return t.OwnerID
}
func (t *UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun) GetScheduledJobID() string {
	if t == nil {
		t = &UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun{}
	}
	return t.ScheduledJobID
}
func (t *UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun) GetScript() string {
	if t == nil {
		t = &UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun{}
	}
	return t.Script
}
func (t *UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun) GetStatus() *enums.ScheduledJobRunStatus {
	if t == nil {
		t = &UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun{}
	}
	return &t.Status
}
func (t *UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun{}
	}
	return t.UpdatedAt
}
func (t *UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun{}
	}
	return t.UpdatedBy
}

type UpdateScheduledJobRun_UpdateScheduledJobRun struct {
	ScheduledJobRun UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun "json:\"scheduledJobRun\" graphql:\"scheduledJobRun\""
}

func (t *UpdateScheduledJobRun_UpdateScheduledJobRun) GetScheduledJobRun() *UpdateScheduledJobRun_UpdateScheduledJobRun_ScheduledJobRun {
	if t == nil {
		t = &UpdateScheduledJobRun_UpdateScheduledJobRun{}
	}
	return &t.ScheduledJobRun
}

type GlobalSearch_Search_APITokens_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_APITokens_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_APITokens_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_APITokens_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_APITokens_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_APITokens_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_APITokens_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_APITokens_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_APITokens_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_APITokens_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_APITokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_APITokens_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_APITokens_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_APITokens_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_APITokens_Edges struct {
	Node *GlobalSearch_Search_APITokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_APITokens_Edges) GetNode() *GlobalSearch_Search_APITokens_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_APITokens_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_APITokens struct {
	Edges      []*GlobalSearch_Search_APITokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_APITokens_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_APITokens) GetEdges() []*GlobalSearch_Search_APITokens_Edges {
	if t == nil {
		t = &GlobalSearch_Search_APITokens{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_APITokens) GetPageInfo() *GlobalSearch_Search_APITokens_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_APITokens{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_APITokens) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_APITokens{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_ActionPlans_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_ActionPlans_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_ActionPlans_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_ActionPlans_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_ActionPlans_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_ActionPlans_Edges_Node struct {
	Details *string  "json:\"details,omitempty\" graphql:\"details\""
	ID      string   "json:\"id\" graphql:\"id\""
	Name    string   "json:\"name\" graphql:\"name\""
	Tags    []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_ActionPlans_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans_Edges_Node{}
	}
	return t.Details
}
func (t *GlobalSearch_Search_ActionPlans_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_ActionPlans_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_ActionPlans_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_ActionPlans_Edges struct {
	Node *GlobalSearch_Search_ActionPlans_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_ActionPlans_Edges) GetNode() *GlobalSearch_Search_ActionPlans_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_ActionPlans struct {
	Edges      []*GlobalSearch_Search_ActionPlans_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_ActionPlans_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_ActionPlans) GetEdges() []*GlobalSearch_Search_ActionPlans_Edges {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_ActionPlans) GetPageInfo() *GlobalSearch_Search_ActionPlans_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_ActionPlans) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Assets_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Assets_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Assets_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Assets_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Assets_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Assets_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Assets_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Assets_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Assets_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Assets_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Name string   "json:\"name\" graphql:\"name\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Assets_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Assets_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Assets_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Assets_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Assets_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Assets_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Assets_Edges struct {
	Node *GlobalSearch_Search_Assets_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Assets_Edges) GetNode() *GlobalSearch_Search_Assets_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Assets_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Assets struct {
	Edges      []*GlobalSearch_Search_Assets_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Assets_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Assets) GetEdges() []*GlobalSearch_Search_Assets_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Assets{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Assets) GetPageInfo() *GlobalSearch_Search_Assets_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Assets{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Assets) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Assets{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Contacts_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Contacts_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Contacts_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Contacts_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Contacts_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Contacts_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Contacts_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Contacts_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Contacts_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Contacts_Edges_Node struct {
	Email    *string  "json:\"email,omitempty\" graphql:\"email\""
	FullName string   "json:\"fullName\" graphql:\"fullName\""
	ID       string   "json:\"id\" graphql:\"id\""
	Tags     []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Contacts_Edges_Node) GetEmail() *string {
	if t == nil {
		t = &GlobalSearch_Search_Contacts_Edges_Node{}
	}
	return t.Email
}
func (t *GlobalSearch_Search_Contacts_Edges_Node) GetFullName() string {
	if t == nil {
		t = &GlobalSearch_Search_Contacts_Edges_Node{}
	}
	return t.FullName
}
func (t *GlobalSearch_Search_Contacts_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Contacts_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Contacts_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Contacts_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Contacts_Edges struct {
	Node *GlobalSearch_Search_Contacts_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Contacts_Edges) GetNode() *GlobalSearch_Search_Contacts_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Contacts_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Contacts struct {
	Edges      []*GlobalSearch_Search_Contacts_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Contacts_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Contacts) GetEdges() []*GlobalSearch_Search_Contacts_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Contacts{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Contacts) GetPageInfo() *GlobalSearch_Search_Contacts_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Contacts{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Contacts) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Contacts{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Controls_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Controls_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Controls_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Controls_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Controls_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Controls_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Controls_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Controls_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Controls_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Controls_Edges_Node struct {
	Category         *string  "json:\"category,omitempty\" graphql:\"category\""
	Description      *string  "json:\"description,omitempty\" graphql:\"description\""
	DisplayID        string   "json:\"displayID\" graphql:\"displayID\""
	ID               string   "json:\"id\" graphql:\"id\""
	MappedCategories []string "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	RefCode          string   "json:\"refCode\" graphql:\"refCode\""
	Subcategory      *string  "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags             []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Controls_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GlobalSearch_Search_Controls_Edges_Node{}
	}
	return t.Category
}
func (t *GlobalSearch_Search_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GlobalSearch_Search_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *GlobalSearch_Search_Controls_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_Controls_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Controls_Edges_Node) GetMappedCategories() []string {
	if t == nil {
		t = &GlobalSearch_Search_Controls_Edges_Node{}
	}
	return t.MappedCategories
}
func (t *GlobalSearch_Search_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GlobalSearch_Search_Controls_Edges_Node{}
	}
	return t.RefCode
}
func (t *GlobalSearch_Search_Controls_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GlobalSearch_Search_Controls_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GlobalSearch_Search_Controls_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Controls_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Controls_Edges struct {
	Node *GlobalSearch_Search_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Controls_Edges) GetNode() *GlobalSearch_Search_Controls_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Controls_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Controls struct {
	Edges      []*GlobalSearch_Search_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Controls_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Controls) GetEdges() []*GlobalSearch_Search_Controls_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Controls{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Controls) GetPageInfo() *GlobalSearch_Search_Controls_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Controls{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Controls{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_ControlImplementations_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_ControlImplementations_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_ControlImplementations_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_ControlImplementations_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_ControlImplementations_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_ControlImplementations_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_ControlImplementations_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_ControlImplementations_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_ControlImplementations_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_ControlImplementations_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_ControlImplementations_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_ControlImplementations_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_ControlImplementations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_ControlImplementations_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_ControlImplementations_Edges struct {
	Node *GlobalSearch_Search_ControlImplementations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_ControlImplementations_Edges) GetNode() *GlobalSearch_Search_ControlImplementations_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_ControlImplementations_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_ControlImplementations struct {
	Edges      []*GlobalSearch_Search_ControlImplementations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_ControlImplementations_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_ControlImplementations) GetEdges() []*GlobalSearch_Search_ControlImplementations_Edges {
	if t == nil {
		t = &GlobalSearch_Search_ControlImplementations{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_ControlImplementations) GetPageInfo() *GlobalSearch_Search_ControlImplementations_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_ControlImplementations{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_ControlImplementations) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_ControlImplementations{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_ControlObjectives_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_ControlObjectives_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_ControlObjectives_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_ControlObjectives_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_ControlObjectives_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_ControlObjectives_Edges_Node struct {
	Category    *string  "json:\"category,omitempty\" graphql:\"category\""
	DisplayID   string   "json:\"displayID\" graphql:\"displayID\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	Subcategory *string  "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_ControlObjectives_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives_Edges_Node{}
	}
	return t.Category
}
func (t *GlobalSearch_Search_ControlObjectives_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_ControlObjectives_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_ControlObjectives_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_ControlObjectives_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GlobalSearch_Search_ControlObjectives_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_ControlObjectives_Edges struct {
	Node *GlobalSearch_Search_ControlObjectives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_ControlObjectives_Edges) GetNode() *GlobalSearch_Search_ControlObjectives_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_ControlObjectives struct {
	Edges      []*GlobalSearch_Search_ControlObjectives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_ControlObjectives_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                          "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_ControlObjectives) GetEdges() []*GlobalSearch_Search_ControlObjectives_Edges {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_ControlObjectives) GetPageInfo() *GlobalSearch_Search_ControlObjectives_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_ControlObjectives) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_CustomDomains_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_CustomDomains_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_CustomDomains_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_CustomDomains_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_CustomDomains_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_CustomDomains_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_CustomDomains_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_CustomDomains_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_CustomDomains_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_CustomDomains_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_CustomDomains_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_CustomDomains_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_CustomDomains_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_CustomDomains_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_CustomDomains_Edges struct {
	Node *GlobalSearch_Search_CustomDomains_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_CustomDomains_Edges) GetNode() *GlobalSearch_Search_CustomDomains_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_CustomDomains_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_CustomDomains struct {
	Edges      []*GlobalSearch_Search_CustomDomains_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_CustomDomains_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_CustomDomains) GetEdges() []*GlobalSearch_Search_CustomDomains_Edges {
	if t == nil {
		t = &GlobalSearch_Search_CustomDomains{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_CustomDomains) GetPageInfo() *GlobalSearch_Search_CustomDomains_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_CustomDomains{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_CustomDomains) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_CustomDomains{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_DNSVerifications_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_DNSVerifications_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_DNSVerifications_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_DNSVerifications_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_DNSVerifications_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_DNSVerifications_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_DNSVerifications_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_DNSVerifications_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_DNSVerifications_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_DNSVerifications_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_DNSVerifications_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_DNSVerifications_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_DNSVerifications_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_DNSVerifications_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_DNSVerifications_Edges struct {
	Node *GlobalSearch_Search_DNSVerifications_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_DNSVerifications_Edges) GetNode() *GlobalSearch_Search_DNSVerifications_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_DNSVerifications_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_DNSVerifications struct {
	Edges      []*GlobalSearch_Search_DNSVerifications_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_DNSVerifications_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_DNSVerifications) GetEdges() []*GlobalSearch_Search_DNSVerifications_Edges {
	if t == nil {
		t = &GlobalSearch_Search_DNSVerifications{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_DNSVerifications) GetPageInfo() *GlobalSearch_Search_DNSVerifications_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_DNSVerifications{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_DNSVerifications) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_DNSVerifications{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_DocumentData_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_DocumentData_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_DocumentData_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_DocumentData_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_DocumentData_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_DocumentData_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_DocumentData_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_DocumentData_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_DocumentData_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_DocumentData_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_DocumentData_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_DocumentData_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_DocumentData_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_DocumentData_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_DocumentData_Edges struct {
	Node *GlobalSearch_Search_DocumentData_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_DocumentData_Edges) GetNode() *GlobalSearch_Search_DocumentData_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_DocumentData_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_DocumentData struct {
	Edges      []*GlobalSearch_Search_DocumentData_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_DocumentData_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_DocumentData) GetEdges() []*GlobalSearch_Search_DocumentData_Edges {
	if t == nil {
		t = &GlobalSearch_Search_DocumentData{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_DocumentData) GetPageInfo() *GlobalSearch_Search_DocumentData_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_DocumentData{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_DocumentData) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_DocumentData{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Entities_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Entities_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Entities_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Entities_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Entities_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Entities_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Entities_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Entities_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Entities_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Entities_Edges_Node struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	DisplayName *string  "json:\"displayName,omitempty\" graphql:\"displayName\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        *string  "json:\"name,omitempty\" graphql:\"name\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Entities_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GlobalSearch_Search_Entities_Edges_Node{}
	}
	return t.Description
}
func (t *GlobalSearch_Search_Entities_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GlobalSearch_Search_Entities_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GlobalSearch_Search_Entities_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Entities_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Entities_Edges_Node) GetName() *string {
	if t == nil {
		t = &GlobalSearch_Search_Entities_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Entities_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Entities_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Entities_Edges struct {
	Node *GlobalSearch_Search_Entities_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Entities_Edges) GetNode() *GlobalSearch_Search_Entities_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Entities_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Entities struct {
	Edges      []*GlobalSearch_Search_Entities_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Entities_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Entities) GetEdges() []*GlobalSearch_Search_Entities_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Entities{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Entities) GetPageInfo() *GlobalSearch_Search_Entities_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Entities{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Entities) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Entities{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_EntityTypes_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_EntityTypes_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_EntityTypes_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_EntityTypes_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_EntityTypes_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_EntityTypes_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_EntityTypes_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_EntityTypes_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_EntityTypes_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_EntityTypes_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_EntityTypes_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_EntityTypes_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_EntityTypes_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_EntityTypes_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_EntityTypes_Edges struct {
	Node *GlobalSearch_Search_EntityTypes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_EntityTypes_Edges) GetNode() *GlobalSearch_Search_EntityTypes_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_EntityTypes_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_EntityTypes struct {
	Edges      []*GlobalSearch_Search_EntityTypes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_EntityTypes_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_EntityTypes) GetEdges() []*GlobalSearch_Search_EntityTypes_Edges {
	if t == nil {
		t = &GlobalSearch_Search_EntityTypes{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_EntityTypes) GetPageInfo() *GlobalSearch_Search_EntityTypes_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_EntityTypes{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_EntityTypes) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_EntityTypes{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Events_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Events_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Events_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Events_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Events_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Events_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Events_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Events_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Events_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Events_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Events_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Events_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Events_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Events_Edges struct {
	Node *GlobalSearch_Search_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Events_Edges) GetNode() *GlobalSearch_Search_Events_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Events_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Events struct {
	Edges      []*GlobalSearch_Search_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Events_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Events) GetEdges() []*GlobalSearch_Search_Events_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Events{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Events) GetPageInfo() *GlobalSearch_Search_Events_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Events{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Events) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Events{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Evidences_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Evidences_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Evidences_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Evidences_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Evidences_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Evidences_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Evidences_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Evidences_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Evidences_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Evidences_Edges_Node struct {
	DisplayID string   "json:\"displayID\" graphql:\"displayID\""
	ID        string   "json:\"id\" graphql:\"id\""
	Name      string   "json:\"name\" graphql:\"name\""
	Tags      []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Evidences_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_Evidences_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_Evidences_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Evidences_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Evidences_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Evidences_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Evidences_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Evidences_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Evidences_Edges struct {
	Node *GlobalSearch_Search_Evidences_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Evidences_Edges) GetNode() *GlobalSearch_Search_Evidences_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Evidences_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Evidences struct {
	Edges      []*GlobalSearch_Search_Evidences_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Evidences_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Evidences) GetEdges() []*GlobalSearch_Search_Evidences_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Evidences{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Evidences) GetPageInfo() *GlobalSearch_Search_Evidences_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Evidences{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Evidences) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Evidences{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Files_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Files_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Files_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Files_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Files_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Files_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Files_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Files_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Files_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Files_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Files_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Files_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Files_Edges struct {
	Node *GlobalSearch_Search_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Files_Edges) GetNode() *GlobalSearch_Search_Files_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Files_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Files struct {
	Edges      []*GlobalSearch_Search_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Files_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Files) GetEdges() []*GlobalSearch_Search_Files_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Files{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Files) GetPageInfo() *GlobalSearch_Search_Files_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Files{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Files) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Files{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Groups_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Groups_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Groups_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Groups_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Groups_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Groups_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Groups_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Groups_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Groups_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Groups_Edges_Node struct {
	DisplayID   string   "json:\"displayID\" graphql:\"displayID\""
	DisplayName string   "json:\"displayName\" graphql:\"displayName\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Groups_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_Groups_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_Groups_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GlobalSearch_Search_Groups_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GlobalSearch_Search_Groups_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Groups_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Groups_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Groups_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Groups_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Groups_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Groups_Edges struct {
	Node *GlobalSearch_Search_Groups_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Groups_Edges) GetNode() *GlobalSearch_Search_Groups_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Groups_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Groups struct {
	Edges      []*GlobalSearch_Search_Groups_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Groups_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Groups) GetEdges() []*GlobalSearch_Search_Groups_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Groups{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Groups) GetPageInfo() *GlobalSearch_Search_Groups_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Groups{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Groups) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Groups{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Integrations_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Integrations_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Integrations_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Integrations_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Integrations_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Integrations_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Integrations_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Integrations_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Integrations_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Integrations_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Integrations_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Integrations_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Integrations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Integrations_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Integrations_Edges struct {
	Node *GlobalSearch_Search_Integrations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Integrations_Edges) GetNode() *GlobalSearch_Search_Integrations_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Integrations_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Integrations struct {
	Edges      []*GlobalSearch_Search_Integrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Integrations_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Integrations) GetEdges() []*GlobalSearch_Search_Integrations_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Integrations{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Integrations) GetPageInfo() *GlobalSearch_Search_Integrations_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Integrations{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Integrations) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Integrations{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_InternalPolicies_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_InternalPolicies_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_InternalPolicies_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_InternalPolicies_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_InternalPolicies_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_InternalPolicies_Edges_Node struct {
	Details   *string  "json:\"details,omitempty\" graphql:\"details\""
	DisplayID string   "json:\"displayID\" graphql:\"displayID\""
	ID        string   "json:\"id\" graphql:\"id\""
	Name      string   "json:\"name\" graphql:\"name\""
	Tags      []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_InternalPolicies_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies_Edges_Node{}
	}
	return t.Details
}
func (t *GlobalSearch_Search_InternalPolicies_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_InternalPolicies_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_InternalPolicies_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_InternalPolicies_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_InternalPolicies_Edges struct {
	Node *GlobalSearch_Search_InternalPolicies_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_InternalPolicies_Edges) GetNode() *GlobalSearch_Search_InternalPolicies_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_InternalPolicies struct {
	Edges      []*GlobalSearch_Search_InternalPolicies_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_InternalPolicies_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_InternalPolicies) GetEdges() []*GlobalSearch_Search_InternalPolicies_Edges {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_InternalPolicies) GetPageInfo() *GlobalSearch_Search_InternalPolicies_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_InternalPolicies) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Invites_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Invites_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Invites_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Invites_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Invites_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Invites_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Invites_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Invites_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Invites_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Invites_Edges_Node struct {
	ID        string "json:\"id\" graphql:\"id\""
	Recipient string "json:\"recipient\" graphql:\"recipient\""
}

func (t *GlobalSearch_Search_Invites_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Invites_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Invites_Edges_Node) GetRecipient() string {
	if t == nil {
		t = &GlobalSearch_Search_Invites_Edges_Node{}
	}
	return t.Recipient
}

type GlobalSearch_Search_Invites_Edges struct {
	Node *GlobalSearch_Search_Invites_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Invites_Edges) GetNode() *GlobalSearch_Search_Invites_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Invites_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Invites struct {
	Edges      []*GlobalSearch_Search_Invites_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Invites_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Invites) GetEdges() []*GlobalSearch_Search_Invites_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Invites{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Invites) GetPageInfo() *GlobalSearch_Search_Invites_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Invites{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Invites) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Invites{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_JobRunners_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_JobRunners_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_JobRunners_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_JobRunners_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_JobRunners_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_JobRunners_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_JobRunners_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_JobRunners_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_JobRunners_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_JobRunners_Edges_Node struct {
	DisplayID string   "json:\"displayID\" graphql:\"displayID\""
	ID        string   "json:\"id\" graphql:\"id\""
	Name      string   "json:\"name\" graphql:\"name\""
	Tags      []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_JobRunners_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_JobRunners_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_JobRunners_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_JobRunners_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_JobRunners_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_JobRunners_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_JobRunners_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_JobRunners_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_JobRunners_Edges struct {
	Node *GlobalSearch_Search_JobRunners_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_JobRunners_Edges) GetNode() *GlobalSearch_Search_JobRunners_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_JobRunners_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_JobRunners struct {
	Edges      []*GlobalSearch_Search_JobRunners_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_JobRunners_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_JobRunners) GetEdges() []*GlobalSearch_Search_JobRunners_Edges {
	if t == nil {
		t = &GlobalSearch_Search_JobRunners{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_JobRunners) GetPageInfo() *GlobalSearch_Search_JobRunners_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_JobRunners{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_JobRunners) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_JobRunners{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_JobRunnerRegistrationTokens_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_JobRunnerRegistrationTokens_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_JobRunnerRegistrationTokens_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_JobRunnerRegistrationTokens_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_JobRunnerRegistrationTokens_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_JobRunnerRegistrationTokens_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_JobRunnerRegistrationTokens_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_JobRunnerRegistrationTokens_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_JobRunnerRegistrationTokens_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_JobRunnerRegistrationTokens_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_JobRunnerRegistrationTokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_JobRunnerRegistrationTokens_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_JobRunnerRegistrationTokens_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_JobRunnerRegistrationTokens_Edges struct {
	Node *GlobalSearch_Search_JobRunnerRegistrationTokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_JobRunnerRegistrationTokens_Edges) GetNode() *GlobalSearch_Search_JobRunnerRegistrationTokens_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_JobRunnerRegistrationTokens_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_JobRunnerRegistrationTokens struct {
	Edges      []*GlobalSearch_Search_JobRunnerRegistrationTokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_JobRunnerRegistrationTokens_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_JobRunnerRegistrationTokens) GetEdges() []*GlobalSearch_Search_JobRunnerRegistrationTokens_Edges {
	if t == nil {
		t = &GlobalSearch_Search_JobRunnerRegistrationTokens{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_JobRunnerRegistrationTokens) GetPageInfo() *GlobalSearch_Search_JobRunnerRegistrationTokens_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_JobRunnerRegistrationTokens{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_JobRunnerRegistrationTokens) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_JobRunnerRegistrationTokens{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_JobRunnerTokens_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_JobRunnerTokens_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_JobRunnerTokens_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_JobRunnerTokens_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_JobRunnerTokens_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_JobRunnerTokens_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_JobRunnerTokens_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_JobRunnerTokens_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_JobRunnerTokens_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_JobRunnerTokens_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_JobRunnerTokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_JobRunnerTokens_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_JobRunnerTokens_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_JobRunnerTokens_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_JobRunnerTokens_Edges struct {
	Node *GlobalSearch_Search_JobRunnerTokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_JobRunnerTokens_Edges) GetNode() *GlobalSearch_Search_JobRunnerTokens_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_JobRunnerTokens_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_JobRunnerTokens struct {
	Edges      []*GlobalSearch_Search_JobRunnerTokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_JobRunnerTokens_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                        "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_JobRunnerTokens) GetEdges() []*GlobalSearch_Search_JobRunnerTokens_Edges {
	if t == nil {
		t = &GlobalSearch_Search_JobRunnerTokens{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_JobRunnerTokens) GetPageInfo() *GlobalSearch_Search_JobRunnerTokens_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_JobRunnerTokens{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_JobRunnerTokens) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_JobRunnerTokens{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_JobTemplates_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_JobTemplates_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_JobTemplates_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_JobTemplates_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_JobTemplates_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_JobTemplates_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_JobTemplates_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_JobTemplates_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_JobTemplates_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_JobTemplates_Edges_Node struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	DisplayID   string   "json:\"displayID\" graphql:\"displayID\""
	ID          string   "json:\"id\" graphql:\"id\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string   "json:\"title\" graphql:\"title\""
}

func (t *GlobalSearch_Search_JobTemplates_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GlobalSearch_Search_JobTemplates_Edges_Node{}
	}
	return t.Description
}
func (t *GlobalSearch_Search_JobTemplates_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_JobTemplates_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_JobTemplates_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_JobTemplates_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_JobTemplates_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_JobTemplates_Edges_Node{}
	}
	return t.Tags
}
func (t *GlobalSearch_Search_JobTemplates_Edges_Node) GetTitle() string {
	if t == nil {
		t = &GlobalSearch_Search_JobTemplates_Edges_Node{}
	}
	return t.Title
}

type GlobalSearch_Search_JobTemplates_Edges struct {
	Node *GlobalSearch_Search_JobTemplates_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_JobTemplates_Edges) GetNode() *GlobalSearch_Search_JobTemplates_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_JobTemplates_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_JobTemplates struct {
	Edges      []*GlobalSearch_Search_JobTemplates_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_JobTemplates_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_JobTemplates) GetEdges() []*GlobalSearch_Search_JobTemplates_Edges {
	if t == nil {
		t = &GlobalSearch_Search_JobTemplates{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_JobTemplates) GetPageInfo() *GlobalSearch_Search_JobTemplates_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_JobTemplates{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_JobTemplates) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_JobTemplates{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_MappableDomains_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_MappableDomains_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_MappableDomains_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_MappableDomains_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_MappableDomains_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_MappableDomains_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_MappableDomains_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_MappableDomains_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_MappableDomains_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_MappableDomains_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_MappableDomains_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_MappableDomains_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_MappableDomains_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_MappableDomains_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_MappableDomains_Edges struct {
	Node *GlobalSearch_Search_MappableDomains_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_MappableDomains_Edges) GetNode() *GlobalSearch_Search_MappableDomains_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_MappableDomains_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_MappableDomains struct {
	Edges      []*GlobalSearch_Search_MappableDomains_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_MappableDomains_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                        "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_MappableDomains) GetEdges() []*GlobalSearch_Search_MappableDomains_Edges {
	if t == nil {
		t = &GlobalSearch_Search_MappableDomains{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_MappableDomains) GetPageInfo() *GlobalSearch_Search_MappableDomains_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_MappableDomains{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_MappableDomains) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_MappableDomains{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_MappedControls_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_MappedControls_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_MappedControls_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_MappedControls_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_MappedControls_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_MappedControls_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_MappedControls_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_MappedControls_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_MappedControls_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_MappedControls_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_MappedControls_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_MappedControls_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_MappedControls_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_MappedControls_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_MappedControls_Edges struct {
	Node *GlobalSearch_Search_MappedControls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_MappedControls_Edges) GetNode() *GlobalSearch_Search_MappedControls_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_MappedControls_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_MappedControls struct {
	Edges      []*GlobalSearch_Search_MappedControls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_MappedControls_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                       "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_MappedControls) GetEdges() []*GlobalSearch_Search_MappedControls_Edges {
	if t == nil {
		t = &GlobalSearch_Search_MappedControls{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_MappedControls) GetPageInfo() *GlobalSearch_Search_MappedControls_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_MappedControls{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_MappedControls) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_MappedControls{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Narratives_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Narratives_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Narratives_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Narratives_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Narratives_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Narratives_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Narratives_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Narratives_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Narratives_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Narratives_Edges_Node struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	DisplayID   string   "json:\"displayID\" graphql:\"displayID\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Narratives_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GlobalSearch_Search_Narratives_Edges_Node{}
	}
	return t.Description
}
func (t *GlobalSearch_Search_Narratives_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_Narratives_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_Narratives_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Narratives_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Narratives_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Narratives_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Narratives_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Narratives_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Narratives_Edges struct {
	Node *GlobalSearch_Search_Narratives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Narratives_Edges) GetNode() *GlobalSearch_Search_Narratives_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Narratives_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Narratives struct {
	Edges      []*GlobalSearch_Search_Narratives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Narratives_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Narratives) GetEdges() []*GlobalSearch_Search_Narratives_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Narratives{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Narratives) GetPageInfo() *GlobalSearch_Search_Narratives_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Narratives{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Narratives) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Narratives{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_OrgSubscriptions_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_OrgSubscriptions_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_OrgSubscriptions_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_OrgSubscriptions_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_OrgSubscriptions_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_OrgSubscriptions_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_OrgSubscriptions_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_OrgSubscriptions_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_OrgSubscriptions_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_OrgSubscriptions_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_OrgSubscriptions_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_OrgSubscriptions_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_OrgSubscriptions_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_OrgSubscriptions_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_OrgSubscriptions_Edges struct {
	Node *GlobalSearch_Search_OrgSubscriptions_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_OrgSubscriptions_Edges) GetNode() *GlobalSearch_Search_OrgSubscriptions_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_OrgSubscriptions_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_OrgSubscriptions struct {
	Edges      []*GlobalSearch_Search_OrgSubscriptions_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_OrgSubscriptions_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_OrgSubscriptions) GetEdges() []*GlobalSearch_Search_OrgSubscriptions_Edges {
	if t == nil {
		t = &GlobalSearch_Search_OrgSubscriptions{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_OrgSubscriptions) GetPageInfo() *GlobalSearch_Search_OrgSubscriptions_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_OrgSubscriptions{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_OrgSubscriptions) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_OrgSubscriptions{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Organizations_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Organizations_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Organizations_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Organizations_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Organizations_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Organizations_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Organizations_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Organizations_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Organizations_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Organizations_Edges_Node struct {
	DisplayName string   "json:\"displayName\" graphql:\"displayName\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Organizations_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GlobalSearch_Search_Organizations_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GlobalSearch_Search_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Organizations_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Organizations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Organizations_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Organizations_Edges struct {
	Node *GlobalSearch_Search_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Organizations_Edges) GetNode() *GlobalSearch_Search_Organizations_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Organizations_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Organizations struct {
	Edges      []*GlobalSearch_Search_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Organizations_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Organizations) GetEdges() []*GlobalSearch_Search_Organizations_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Organizations{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Organizations) GetPageInfo() *GlobalSearch_Search_Organizations_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Organizations{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Organizations) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Organizations{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_OrganizationSettings_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_OrganizationSettings_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_OrganizationSettings_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_OrganizationSettings_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_OrganizationSettings_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_OrganizationSettings_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_OrganizationSettings_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_OrganizationSettings_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_OrganizationSettings_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_OrganizationSettings_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_OrganizationSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_OrganizationSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_OrganizationSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_OrganizationSettings_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_OrganizationSettings_Edges struct {
	Node *GlobalSearch_Search_OrganizationSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_OrganizationSettings_Edges) GetNode() *GlobalSearch_Search_OrganizationSettings_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_OrganizationSettings_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_OrganizationSettings struct {
	Edges      []*GlobalSearch_Search_OrganizationSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_OrganizationSettings_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                             "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_OrganizationSettings) GetEdges() []*GlobalSearch_Search_OrganizationSettings_Edges {
	if t == nil {
		t = &GlobalSearch_Search_OrganizationSettings{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_OrganizationSettings) GetPageInfo() *GlobalSearch_Search_OrganizationSettings_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_OrganizationSettings{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_OrganizationSettings) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_OrganizationSettings{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_PersonalAccessTokens_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_PersonalAccessTokens_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_PersonalAccessTokens_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_PersonalAccessTokens_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_PersonalAccessTokens_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_PersonalAccessTokens_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_PersonalAccessTokens_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_PersonalAccessTokens_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_PersonalAccessTokens_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_PersonalAccessTokens_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_PersonalAccessTokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_PersonalAccessTokens_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_PersonalAccessTokens_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_PersonalAccessTokens_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_PersonalAccessTokens_Edges struct {
	Node *GlobalSearch_Search_PersonalAccessTokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_PersonalAccessTokens_Edges) GetNode() *GlobalSearch_Search_PersonalAccessTokens_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_PersonalAccessTokens_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_PersonalAccessTokens struct {
	Edges      []*GlobalSearch_Search_PersonalAccessTokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_PersonalAccessTokens_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                             "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_PersonalAccessTokens) GetEdges() []*GlobalSearch_Search_PersonalAccessTokens_Edges {
	if t == nil {
		t = &GlobalSearch_Search_PersonalAccessTokens{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_PersonalAccessTokens) GetPageInfo() *GlobalSearch_Search_PersonalAccessTokens_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_PersonalAccessTokens{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_PersonalAccessTokens) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_PersonalAccessTokens{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Procedures_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Procedures_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Procedures_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Procedures_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Procedures_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Procedures_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Procedures_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Procedures_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Procedures_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Procedures_Edges_Node struct {
	Details   *string  "json:\"details,omitempty\" graphql:\"details\""
	DisplayID string   "json:\"displayID\" graphql:\"displayID\""
	ID        string   "json:\"id\" graphql:\"id\""
	Name      string   "json:\"name\" graphql:\"name\""
	Tags      []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Procedures_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GlobalSearch_Search_Procedures_Edges_Node{}
	}
	return t.Details
}
func (t *GlobalSearch_Search_Procedures_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_Procedures_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_Procedures_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Procedures_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Procedures_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Procedures_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Procedures_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Procedures_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Procedures_Edges struct {
	Node *GlobalSearch_Search_Procedures_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Procedures_Edges) GetNode() *GlobalSearch_Search_Procedures_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Procedures_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Procedures struct {
	Edges      []*GlobalSearch_Search_Procedures_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Procedures_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Procedures) GetEdges() []*GlobalSearch_Search_Procedures_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Procedures{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Procedures) GetPageInfo() *GlobalSearch_Search_Procedures_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Procedures{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Procedures) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Procedures{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Programs_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Programs_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Programs_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Programs_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Programs_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Programs_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Programs_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Programs_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Programs_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Programs_Edges_Node struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	DisplayID   string   "json:\"displayID\" graphql:\"displayID\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Programs_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GlobalSearch_Search_Programs_Edges_Node{}
	}
	return t.Description
}
func (t *GlobalSearch_Search_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Programs_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Programs_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Programs_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Programs_Edges struct {
	Node *GlobalSearch_Search_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Programs_Edges) GetNode() *GlobalSearch_Search_Programs_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Programs_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Programs struct {
	Edges      []*GlobalSearch_Search_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Programs_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Programs) GetEdges() []*GlobalSearch_Search_Programs_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Programs{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Programs) GetPageInfo() *GlobalSearch_Search_Programs_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Programs{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Programs) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Programs{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Risks_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Risks_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Risks_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Risks_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Risks_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Risks_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Risks_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Risks_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Risks_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Risks_Edges_Node struct {
	DisplayID string   "json:\"displayID\" graphql:\"displayID\""
	ID        string   "json:\"id\" graphql:\"id\""
	Name      string   "json:\"name\" graphql:\"name\""
	Tags      []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Risks_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_Risks_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_Risks_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Risks_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Risks_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Risks_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Risks_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Risks_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Risks_Edges struct {
	Node *GlobalSearch_Search_Risks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Risks_Edges) GetNode() *GlobalSearch_Search_Risks_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Risks_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Risks struct {
	Edges      []*GlobalSearch_Search_Risks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Risks_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Risks) GetEdges() []*GlobalSearch_Search_Risks_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Risks{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Risks) GetPageInfo() *GlobalSearch_Search_Risks_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Risks{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Risks) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Risks{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Scans_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Scans_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Scans_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Scans_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Scans_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Scans_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Scans_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Scans_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Scans_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Scans_Edges_Node struct {
	ID     string   "json:\"id\" graphql:\"id\""
	Tags   []string "json:\"tags,omitempty\" graphql:\"tags\""
	Target string   "json:\"target\" graphql:\"target\""
}

func (t *GlobalSearch_Search_Scans_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Scans_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Scans_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Scans_Edges_Node{}
	}
	return t.Tags
}
func (t *GlobalSearch_Search_Scans_Edges_Node) GetTarget() string {
	if t == nil {
		t = &GlobalSearch_Search_Scans_Edges_Node{}
	}
	return t.Target
}

type GlobalSearch_Search_Scans_Edges struct {
	Node *GlobalSearch_Search_Scans_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Scans_Edges) GetNode() *GlobalSearch_Search_Scans_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Scans_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Scans struct {
	Edges      []*GlobalSearch_Search_Scans_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Scans_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Scans) GetEdges() []*GlobalSearch_Search_Scans_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Scans{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Scans) GetPageInfo() *GlobalSearch_Search_Scans_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Scans{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Scans) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Scans{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Standards_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Standards_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Standards_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Standards_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Standards_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Standards_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Standards_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Standards_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Standards_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Standards_Edges_Node struct {
	Domains       []string "json:\"domains,omitempty\" graphql:\"domains\""
	Framework     *string  "json:\"framework,omitempty\" graphql:\"framework\""
	GoverningBody *string  "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	ID            string   "json:\"id\" graphql:\"id\""
	Name          string   "json:\"name\" graphql:\"name\""
	ShortName     *string  "json:\"shortName,omitempty\" graphql:\"shortName\""
	Tags          []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Standards_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GlobalSearch_Search_Standards_Edges_Node{}
	}
	return t.Domains
}
func (t *GlobalSearch_Search_Standards_Edges_Node) GetFramework() *string {
	if t == nil {
		t = &GlobalSearch_Search_Standards_Edges_Node{}
	}
	return t.Framework
}
func (t *GlobalSearch_Search_Standards_Edges_Node) GetGoverningBody() *string {
	if t == nil {
		t = &GlobalSearch_Search_Standards_Edges_Node{}
	}
	return t.GoverningBody
}
func (t *GlobalSearch_Search_Standards_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Standards_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Standards_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Standards_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Standards_Edges_Node) GetShortName() *string {
	if t == nil {
		t = &GlobalSearch_Search_Standards_Edges_Node{}
	}
	return t.ShortName
}
func (t *GlobalSearch_Search_Standards_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Standards_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Standards_Edges struct {
	Node *GlobalSearch_Search_Standards_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Standards_Edges) GetNode() *GlobalSearch_Search_Standards_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Standards_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Standards struct {
	Edges      []*GlobalSearch_Search_Standards_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Standards_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Standards) GetEdges() []*GlobalSearch_Search_Standards_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Standards{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Standards) GetPageInfo() *GlobalSearch_Search_Standards_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Standards{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Standards) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Standards{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Subcontrols_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Subcontrols_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Subcontrols_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Subcontrols_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Subcontrols_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Subcontrols_Edges_Node struct {
	Category         *string  "json:\"category,omitempty\" graphql:\"category\""
	Description      *string  "json:\"description,omitempty\" graphql:\"description\""
	DisplayID        string   "json:\"displayID\" graphql:\"displayID\""
	ID               string   "json:\"id\" graphql:\"id\""
	MappedCategories []string "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	RefCode          string   "json:\"refCode\" graphql:\"refCode\""
	Subcategory      *string  "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags             []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Subcontrols_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_Edges_Node{}
	}
	return t.Category
}
func (t *GlobalSearch_Search_Subcontrols_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_Edges_Node{}
	}
	return t.Description
}
func (t *GlobalSearch_Search_Subcontrols_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Subcontrols_Edges_Node) GetMappedCategories() []string {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_Edges_Node{}
	}
	return t.MappedCategories
}
func (t *GlobalSearch_Search_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}
func (t *GlobalSearch_Search_Subcontrols_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GlobalSearch_Search_Subcontrols_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Subcontrols_Edges struct {
	Node *GlobalSearch_Search_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Subcontrols_Edges) GetNode() *GlobalSearch_Search_Subcontrols_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Subcontrols struct {
	Edges      []*GlobalSearch_Search_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Subcontrols_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Subcontrols) GetEdges() []*GlobalSearch_Search_Subcontrols_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Subcontrols) GetPageInfo() *GlobalSearch_Search_Subcontrols_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Subcontrols) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Subprocessors_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Subprocessors_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Subprocessors_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Subprocessors_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Subprocessors_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Subprocessors_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Subprocessors_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Subprocessors_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Subprocessors_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Subprocessors_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Name string   "json:\"name\" graphql:\"name\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Subprocessors_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Subprocessors_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Subprocessors_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Subprocessors_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Subprocessors_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Subprocessors_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Subprocessors_Edges struct {
	Node *GlobalSearch_Search_Subprocessors_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Subprocessors_Edges) GetNode() *GlobalSearch_Search_Subprocessors_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Subprocessors_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Subprocessors struct {
	Edges      []*GlobalSearch_Search_Subprocessors_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Subprocessors_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Subprocessors) GetEdges() []*GlobalSearch_Search_Subprocessors_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Subprocessors{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Subprocessors) GetPageInfo() *GlobalSearch_Search_Subprocessors_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Subprocessors{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Subprocessors) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Subprocessors{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Subscribers_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Subscribers_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Subscribers_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Subscribers_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Subscribers_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Subscribers_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Subscribers_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Subscribers_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Subscribers_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Subscribers_Edges_Node struct {
	Email string   "json:\"email\" graphql:\"email\""
	ID    string   "json:\"id\" graphql:\"id\""
	Tags  []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Subscribers_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GlobalSearch_Search_Subscribers_Edges_Node{}
	}
	return t.Email
}
func (t *GlobalSearch_Search_Subscribers_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Subscribers_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Subscribers_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Subscribers_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Subscribers_Edges struct {
	Node *GlobalSearch_Search_Subscribers_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Subscribers_Edges) GetNode() *GlobalSearch_Search_Subscribers_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Subscribers_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Subscribers struct {
	Edges      []*GlobalSearch_Search_Subscribers_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Subscribers_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Subscribers) GetEdges() []*GlobalSearch_Search_Subscribers_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Subscribers{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Subscribers) GetPageInfo() *GlobalSearch_Search_Subscribers_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Subscribers{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Subscribers) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Subscribers{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Tasks_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Tasks_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Tasks_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Tasks_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Tasks_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Tasks_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Tasks_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Tasks_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Tasks_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Tasks_Edges_Node struct {
	DisplayID string   "json:\"displayID\" graphql:\"displayID\""
	ID        string   "json:\"id\" graphql:\"id\""
	Tags      []string "json:\"tags,omitempty\" graphql:\"tags\""
	Title     string   "json:\"title\" graphql:\"title\""
}

func (t *GlobalSearch_Search_Tasks_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_Tasks_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_Tasks_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Tasks_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Tasks_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Tasks_Edges_Node{}
	}
	return t.Tags
}
func (t *GlobalSearch_Search_Tasks_Edges_Node) GetTitle() string {
	if t == nil {
		t = &GlobalSearch_Search_Tasks_Edges_Node{}
	}
	return t.Title
}

type GlobalSearch_Search_Tasks_Edges struct {
	Node *GlobalSearch_Search_Tasks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Tasks_Edges) GetNode() *GlobalSearch_Search_Tasks_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Tasks_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Tasks struct {
	Edges      []*GlobalSearch_Search_Tasks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Tasks_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Tasks) GetEdges() []*GlobalSearch_Search_Tasks_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Tasks{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Tasks) GetPageInfo() *GlobalSearch_Search_Tasks_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Tasks{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Tasks) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Tasks{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Templates_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Templates_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Templates_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Templates_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Templates_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Templates_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Templates_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Templates_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Templates_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Templates_Edges_Node struct {
	ID         string         "json:\"id\" graphql:\"id\""
	Jsonconfig map[string]any "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name       string         "json:\"name\" graphql:\"name\""
	Tags       []string       "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Templates_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Templates_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Templates_Edges_Node) GetJsonconfig() map[string]any {
	if t == nil {
		t = &GlobalSearch_Search_Templates_Edges_Node{}
	}
	return t.Jsonconfig
}
func (t *GlobalSearch_Search_Templates_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Templates_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Templates_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Templates_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Templates_Edges struct {
	Node *GlobalSearch_Search_Templates_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Templates_Edges) GetNode() *GlobalSearch_Search_Templates_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Templates_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Templates struct {
	Edges      []*GlobalSearch_Search_Templates_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Templates_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Templates) GetEdges() []*GlobalSearch_Search_Templates_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Templates{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Templates) GetPageInfo() *GlobalSearch_Search_Templates_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Templates{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Templates) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Templates{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_TrustCenters_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_TrustCenters_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_TrustCenters_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_TrustCenters_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_TrustCenters_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_TrustCenters_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_TrustCenters_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_TrustCenters_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_TrustCenters_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_TrustCenters_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_TrustCenters_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_TrustCenters_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_TrustCenters_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_TrustCenters_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_TrustCenters_Edges struct {
	Node *GlobalSearch_Search_TrustCenters_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_TrustCenters_Edges) GetNode() *GlobalSearch_Search_TrustCenters_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_TrustCenters_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_TrustCenters struct {
	Edges      []*GlobalSearch_Search_TrustCenters_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_TrustCenters_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_TrustCenters) GetEdges() []*GlobalSearch_Search_TrustCenters_Edges {
	if t == nil {
		t = &GlobalSearch_Search_TrustCenters{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_TrustCenters) GetPageInfo() *GlobalSearch_Search_TrustCenters_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_TrustCenters{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_TrustCenters) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_TrustCenters{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_TrustCenterCompliances_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_TrustCenterCompliances_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_TrustCenterCompliances_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_TrustCenterCompliances_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_TrustCenterCompliances_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_TrustCenterCompliances_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_TrustCenterCompliances_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_TrustCenterCompliances_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_TrustCenterCompliances_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_TrustCenterCompliances_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_TrustCenterCompliances_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_TrustCenterCompliances_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_TrustCenterCompliances_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_TrustCenterCompliances_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_TrustCenterCompliances_Edges struct {
	Node *GlobalSearch_Search_TrustCenterCompliances_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_TrustCenterCompliances_Edges) GetNode() *GlobalSearch_Search_TrustCenterCompliances_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_TrustCenterCompliances_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_TrustCenterCompliances struct {
	Edges      []*GlobalSearch_Search_TrustCenterCompliances_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_TrustCenterCompliances_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_TrustCenterCompliances) GetEdges() []*GlobalSearch_Search_TrustCenterCompliances_Edges {
	if t == nil {
		t = &GlobalSearch_Search_TrustCenterCompliances{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_TrustCenterCompliances) GetPageInfo() *GlobalSearch_Search_TrustCenterCompliances_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_TrustCenterCompliances{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_TrustCenterCompliances) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_TrustCenterCompliances{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Users_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Users_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Users_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Users_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Users_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Users_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Users_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Users_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Users_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Users_Edges_Node struct {
	DisplayID string   "json:\"displayID\" graphql:\"displayID\""
	ID        string   "json:\"id\" graphql:\"id\""
	Tags      []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Users_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_Users_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_Users_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Users_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Users_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Users_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Users_Edges struct {
	Node *GlobalSearch_Search_Users_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Users_Edges) GetNode() *GlobalSearch_Search_Users_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Users_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Users struct {
	Edges      []*GlobalSearch_Search_Users_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Users_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Users) GetEdges() []*GlobalSearch_Search_Users_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Users{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Users) GetPageInfo() *GlobalSearch_Search_Users_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Users{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Users) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Users{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_UserSettings_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_UserSettings_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_UserSettings_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_UserSettings_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_UserSettings_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_UserSettings_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_UserSettings_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_UserSettings_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_UserSettings_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_UserSettings_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_UserSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_UserSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_UserSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_UserSettings_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_UserSettings_Edges struct {
	Node *GlobalSearch_Search_UserSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_UserSettings_Edges) GetNode() *GlobalSearch_Search_UserSettings_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_UserSettings_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_UserSettings struct {
	Edges      []*GlobalSearch_Search_UserSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_UserSettings_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_UserSettings) GetEdges() []*GlobalSearch_Search_UserSettings_Edges {
	if t == nil {
		t = &GlobalSearch_Search_UserSettings{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_UserSettings) GetPageInfo() *GlobalSearch_Search_UserSettings_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_UserSettings{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_UserSettings) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_UserSettings{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Webauthns_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Webauthns_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Webauthns_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Webauthns_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Webauthns_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Webauthns_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Webauthns_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Webauthns_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Webauthns_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Webauthns_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Webauthns_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Webauthns_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Webauthns_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Webauthns_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Webauthns_Edges struct {
	Node *GlobalSearch_Search_Webauthns_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Webauthns_Edges) GetNode() *GlobalSearch_Search_Webauthns_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Webauthns_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Webauthns struct {
	Edges      []*GlobalSearch_Search_Webauthns_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Webauthns_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Webauthns) GetEdges() []*GlobalSearch_Search_Webauthns_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Webauthns{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Webauthns) GetPageInfo() *GlobalSearch_Search_Webauthns_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Webauthns{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Webauthns) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Webauthns{}
	}
	return t.TotalCount
}

type GlobalSearch_Search struct {
	ActionPlans                 *GlobalSearch_Search_ActionPlans                 "json:\"actionPlans,omitempty\" graphql:\"actionPlans\""
	APITokens                   *GlobalSearch_Search_APITokens                   "json:\"apiTokens,omitempty\" graphql:\"apiTokens\""
	Assets                      *GlobalSearch_Search_Assets                      "json:\"assets,omitempty\" graphql:\"assets\""
	Contacts                    *GlobalSearch_Search_Contacts                    "json:\"contacts,omitempty\" graphql:\"contacts\""
	ControlImplementations      *GlobalSearch_Search_ControlImplementations      "json:\"controlImplementations,omitempty\" graphql:\"controlImplementations\""
	ControlObjectives           *GlobalSearch_Search_ControlObjectives           "json:\"controlObjectives,omitempty\" graphql:\"controlObjectives\""
	Controls                    *GlobalSearch_Search_Controls                    "json:\"controls,omitempty\" graphql:\"controls\""
	CustomDomains               *GlobalSearch_Search_CustomDomains               "json:\"customDomains,omitempty\" graphql:\"customDomains\""
	DNSVerifications            *GlobalSearch_Search_DNSVerifications            "json:\"dnsVerifications,omitempty\" graphql:\"dnsVerifications\""
	DocumentData                *GlobalSearch_Search_DocumentData                "json:\"documentData,omitempty\" graphql:\"documentData\""
	Entities                    *GlobalSearch_Search_Entities                    "json:\"entities,omitempty\" graphql:\"entities\""
	EntityTypes                 *GlobalSearch_Search_EntityTypes                 "json:\"entityTypes,omitempty\" graphql:\"entityTypes\""
	Events                      *GlobalSearch_Search_Events                      "json:\"events,omitempty\" graphql:\"events\""
	Evidences                   *GlobalSearch_Search_Evidences                   "json:\"evidences,omitempty\" graphql:\"evidences\""
	Files                       *GlobalSearch_Search_Files                       "json:\"files,omitempty\" graphql:\"files\""
	Groups                      *GlobalSearch_Search_Groups                      "json:\"groups,omitempty\" graphql:\"groups\""
	Integrations                *GlobalSearch_Search_Integrations                "json:\"integrations,omitempty\" graphql:\"integrations\""
	InternalPolicies            *GlobalSearch_Search_InternalPolicies            "json:\"internalPolicies,omitempty\" graphql:\"internalPolicies\""
	Invites                     *GlobalSearch_Search_Invites                     "json:\"invites,omitempty\" graphql:\"invites\""
	JobRunnerRegistrationTokens *GlobalSearch_Search_JobRunnerRegistrationTokens "json:\"jobRunnerRegistrationTokens,omitempty\" graphql:\"jobRunnerRegistrationTokens\""
	JobRunnerTokens             *GlobalSearch_Search_JobRunnerTokens             "json:\"jobRunnerTokens,omitempty\" graphql:\"jobRunnerTokens\""
	JobRunners                  *GlobalSearch_Search_JobRunners                  "json:\"jobRunners,omitempty\" graphql:\"jobRunners\""
	JobTemplates                *GlobalSearch_Search_JobTemplates                "json:\"jobTemplates,omitempty\" graphql:\"jobTemplates\""
	MappableDomains             *GlobalSearch_Search_MappableDomains             "json:\"mappableDomains,omitempty\" graphql:\"mappableDomains\""
	MappedControls              *GlobalSearch_Search_MappedControls              "json:\"mappedControls,omitempty\" graphql:\"mappedControls\""
	Narratives                  *GlobalSearch_Search_Narratives                  "json:\"narratives,omitempty\" graphql:\"narratives\""
	OrgSubscriptions            *GlobalSearch_Search_OrgSubscriptions            "json:\"orgSubscriptions,omitempty\" graphql:\"orgSubscriptions\""
	OrganizationSettings        *GlobalSearch_Search_OrganizationSettings        "json:\"organizationSettings,omitempty\" graphql:\"organizationSettings\""
	Organizations               *GlobalSearch_Search_Organizations               "json:\"organizations,omitempty\" graphql:\"organizations\""
	PersonalAccessTokens        *GlobalSearch_Search_PersonalAccessTokens        "json:\"personalAccessTokens,omitempty\" graphql:\"personalAccessTokens\""
	Procedures                  *GlobalSearch_Search_Procedures                  "json:\"procedures,omitempty\" graphql:\"procedures\""
	Programs                    *GlobalSearch_Search_Programs                    "json:\"programs,omitempty\" graphql:\"programs\""
	Risks                       *GlobalSearch_Search_Risks                       "json:\"risks,omitempty\" graphql:\"risks\""
	Scans                       *GlobalSearch_Search_Scans                       "json:\"scans,omitempty\" graphql:\"scans\""
	Standards                   *GlobalSearch_Search_Standards                   "json:\"standards,omitempty\" graphql:\"standards\""
	Subcontrols                 *GlobalSearch_Search_Subcontrols                 "json:\"subcontrols,omitempty\" graphql:\"subcontrols\""
	Subprocessors               *GlobalSearch_Search_Subprocessors               "json:\"subprocessors,omitempty\" graphql:\"subprocessors\""
	Subscribers                 *GlobalSearch_Search_Subscribers                 "json:\"subscribers,omitempty\" graphql:\"subscribers\""
	Tasks                       *GlobalSearch_Search_Tasks                       "json:\"tasks,omitempty\" graphql:\"tasks\""
	Templates                   *GlobalSearch_Search_Templates                   "json:\"templates,omitempty\" graphql:\"templates\""
	TotalCount                  int64                                            "json:\"totalCount\" graphql:\"totalCount\""
	TrustCenterCompliances      *GlobalSearch_Search_TrustCenterCompliances      "json:\"trustCenterCompliances,omitempty\" graphql:\"trustCenterCompliances\""
	TrustCenters                *GlobalSearch_Search_TrustCenters                "json:\"trustCenters,omitempty\" graphql:\"trustCenters\""
	UserSettings                *GlobalSearch_Search_UserSettings                "json:\"userSettings,omitempty\" graphql:\"userSettings\""
	Users                       *GlobalSearch_Search_Users                       "json:\"users,omitempty\" graphql:\"users\""
	Webauthns                   *GlobalSearch_Search_Webauthns                   "json:\"webauthns,omitempty\" graphql:\"webauthns\""
}

func (t *GlobalSearch_Search) GetActionPlans() *GlobalSearch_Search_ActionPlans {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.ActionPlans
}
func (t *GlobalSearch_Search) GetAPITokens() *GlobalSearch_Search_APITokens {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.APITokens
}
func (t *GlobalSearch_Search) GetAssets() *GlobalSearch_Search_Assets {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Assets
}
func (t *GlobalSearch_Search) GetContacts() *GlobalSearch_Search_Contacts {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Contacts
}
func (t *GlobalSearch_Search) GetControlImplementations() *GlobalSearch_Search_ControlImplementations {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.ControlImplementations
}
func (t *GlobalSearch_Search) GetControlObjectives() *GlobalSearch_Search_ControlObjectives {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.ControlObjectives
}
func (t *GlobalSearch_Search) GetControls() *GlobalSearch_Search_Controls {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Controls
}
func (t *GlobalSearch_Search) GetCustomDomains() *GlobalSearch_Search_CustomDomains {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.CustomDomains
}
func (t *GlobalSearch_Search) GetDNSVerifications() *GlobalSearch_Search_DNSVerifications {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.DNSVerifications
}
func (t *GlobalSearch_Search) GetDocumentData() *GlobalSearch_Search_DocumentData {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.DocumentData
}
func (t *GlobalSearch_Search) GetEntities() *GlobalSearch_Search_Entities {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Entities
}
func (t *GlobalSearch_Search) GetEntityTypes() *GlobalSearch_Search_EntityTypes {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.EntityTypes
}
func (t *GlobalSearch_Search) GetEvents() *GlobalSearch_Search_Events {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Events
}
func (t *GlobalSearch_Search) GetEvidences() *GlobalSearch_Search_Evidences {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Evidences
}
func (t *GlobalSearch_Search) GetFiles() *GlobalSearch_Search_Files {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Files
}
func (t *GlobalSearch_Search) GetGroups() *GlobalSearch_Search_Groups {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Groups
}
func (t *GlobalSearch_Search) GetIntegrations() *GlobalSearch_Search_Integrations {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Integrations
}
func (t *GlobalSearch_Search) GetInternalPolicies() *GlobalSearch_Search_InternalPolicies {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.InternalPolicies
}
func (t *GlobalSearch_Search) GetInvites() *GlobalSearch_Search_Invites {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Invites
}
func (t *GlobalSearch_Search) GetJobRunnerRegistrationTokens() *GlobalSearch_Search_JobRunnerRegistrationTokens {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.JobRunnerRegistrationTokens
}
func (t *GlobalSearch_Search) GetJobRunnerTokens() *GlobalSearch_Search_JobRunnerTokens {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.JobRunnerTokens
}
func (t *GlobalSearch_Search) GetJobRunners() *GlobalSearch_Search_JobRunners {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.JobRunners
}
func (t *GlobalSearch_Search) GetJobTemplates() *GlobalSearch_Search_JobTemplates {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.JobTemplates
}
func (t *GlobalSearch_Search) GetMappableDomains() *GlobalSearch_Search_MappableDomains {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.MappableDomains
}
func (t *GlobalSearch_Search) GetMappedControls() *GlobalSearch_Search_MappedControls {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.MappedControls
}
func (t *GlobalSearch_Search) GetNarratives() *GlobalSearch_Search_Narratives {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Narratives
}
func (t *GlobalSearch_Search) GetOrgSubscriptions() *GlobalSearch_Search_OrgSubscriptions {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.OrgSubscriptions
}
func (t *GlobalSearch_Search) GetOrganizationSettings() *GlobalSearch_Search_OrganizationSettings {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.OrganizationSettings
}
func (t *GlobalSearch_Search) GetOrganizations() *GlobalSearch_Search_Organizations {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Organizations
}
func (t *GlobalSearch_Search) GetPersonalAccessTokens() *GlobalSearch_Search_PersonalAccessTokens {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.PersonalAccessTokens
}
func (t *GlobalSearch_Search) GetProcedures() *GlobalSearch_Search_Procedures {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Procedures
}
func (t *GlobalSearch_Search) GetPrograms() *GlobalSearch_Search_Programs {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Programs
}
func (t *GlobalSearch_Search) GetRisks() *GlobalSearch_Search_Risks {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Risks
}
func (t *GlobalSearch_Search) GetScans() *GlobalSearch_Search_Scans {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Scans
}
func (t *GlobalSearch_Search) GetStandards() *GlobalSearch_Search_Standards {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Standards
}
func (t *GlobalSearch_Search) GetSubcontrols() *GlobalSearch_Search_Subcontrols {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Subcontrols
}
func (t *GlobalSearch_Search) GetSubprocessors() *GlobalSearch_Search_Subprocessors {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Subprocessors
}
func (t *GlobalSearch_Search) GetSubscribers() *GlobalSearch_Search_Subscribers {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Subscribers
}
func (t *GlobalSearch_Search) GetTasks() *GlobalSearch_Search_Tasks {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Tasks
}
func (t *GlobalSearch_Search) GetTemplates() *GlobalSearch_Search_Templates {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Templates
}
func (t *GlobalSearch_Search) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.TotalCount
}
func (t *GlobalSearch_Search) GetTrustCenterCompliances() *GlobalSearch_Search_TrustCenterCompliances {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.TrustCenterCompliances
}
func (t *GlobalSearch_Search) GetTrustCenters() *GlobalSearch_Search_TrustCenters {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.TrustCenters
}
func (t *GlobalSearch_Search) GetUserSettings() *GlobalSearch_Search_UserSettings {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.UserSettings
}
func (t *GlobalSearch_Search) GetUsers() *GlobalSearch_Search_Users {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Users
}
func (t *GlobalSearch_Search) GetWebauthns() *GlobalSearch_Search_Webauthns {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Webauthns
}

type CreateStandard_CreateStandard_Standard_Controls struct {
	TotalCount int64 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *CreateStandard_CreateStandard_Standard_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard_Controls{}
	}
	return t.TotalCount
}

type CreateStandard_CreateStandard_Standard struct {
	Controls             CreateStandard_CreateStandard_Standard_Controls "json:\"controls\" graphql:\"controls\""
	CreatedAt            *time.Time                                      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                                         "json:\"description,omitempty\" graphql:\"description\""
	Domains              []string                                        "json:\"domains,omitempty\" graphql:\"domains\""
	Framework            *string                                         "json:\"framework,omitempty\" graphql:\"framework\""
	FreeToUse            *bool                                           "json:\"freeToUse,omitempty\" graphql:\"freeToUse\""
	GoverningBody        *string                                         "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	GoverningBodyLogoURL *string                                         "json:\"governingBodyLogoURL,omitempty\" graphql:\"governingBodyLogoURL\""
	ID                   string                                          "json:\"id\" graphql:\"id\""
	IsPublic             *bool                                           "json:\"isPublic,omitempty\" graphql:\"isPublic\""
	Link                 *string                                         "json:\"link,omitempty\" graphql:\"link\""
	Name                 string                                          "json:\"name\" graphql:\"name\""
	OwnerID              *string                                         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Revision             *string                                         "json:\"revision,omitempty\" graphql:\"revision\""
	ShortName            *string                                         "json:\"shortName,omitempty\" graphql:\"shortName\""
	StandardType         *string                                         "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status               *enums.StandardStatus                           "json:\"status,omitempty\" graphql:\"status\""
	SystemOwned          *bool                                           "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags                 []string                                        "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version              *string                                         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateStandard_CreateStandard_Standard) GetControls() *CreateStandard_CreateStandard_Standard_Controls {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return &t.Controls
}
func (t *CreateStandard_CreateStandard_Standard) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.CreatedAt
}
func (t *CreateStandard_CreateStandard_Standard) GetCreatedBy() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.CreatedBy
}
func (t *CreateStandard_CreateStandard_Standard) GetDescription() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Description
}
func (t *CreateStandard_CreateStandard_Standard) GetDomains() []string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Domains
}
func (t *CreateStandard_CreateStandard_Standard) GetFramework() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Framework
}
func (t *CreateStandard_CreateStandard_Standard) GetFreeToUse() *bool {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.FreeToUse
}
func (t *CreateStandard_CreateStandard_Standard) GetGoverningBody() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.GoverningBody
}
func (t *CreateStandard_CreateStandard_Standard) GetGoverningBodyLogoURL() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.GoverningBodyLogoURL
}
func (t *CreateStandard_CreateStandard_Standard) GetID() string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.ID
}
func (t *CreateStandard_CreateStandard_Standard) GetIsPublic() *bool {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.IsPublic
}
func (t *CreateStandard_CreateStandard_Standard) GetLink() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Link
}
func (t *CreateStandard_CreateStandard_Standard) GetName() string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Name
}
func (t *CreateStandard_CreateStandard_Standard) GetOwnerID() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.OwnerID
}
func (t *CreateStandard_CreateStandard_Standard) GetRevision() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Revision
}
func (t *CreateStandard_CreateStandard_Standard) GetShortName() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.ShortName
}
func (t *CreateStandard_CreateStandard_Standard) GetStandardType() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.StandardType
}
func (t *CreateStandard_CreateStandard_Standard) GetStatus() *enums.StandardStatus {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Status
}
func (t *CreateStandard_CreateStandard_Standard) GetSystemOwned() *bool {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.SystemOwned
}
func (t *CreateStandard_CreateStandard_Standard) GetTags() []string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Tags
}
func (t *CreateStandard_CreateStandard_Standard) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.UpdatedAt
}
func (t *CreateStandard_CreateStandard_Standard) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.UpdatedBy
}
func (t *CreateStandard_CreateStandard_Standard) GetVersion() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Version
}

type CreateStandard_CreateStandard struct {
	Standard CreateStandard_CreateStandard_Standard "json:\"standard\" graphql:\"standard\""
}

func (t *CreateStandard_CreateStandard) GetStandard() *CreateStandard_CreateStandard_Standard {
	if t == nil {
		t = &CreateStandard_CreateStandard{}
	}
	return &t.Standard
}

type DeleteStandard_DeleteStandard struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteStandard_DeleteStandard) GetDeletedID() string {
	if t == nil {
		t = &DeleteStandard_DeleteStandard{}
	}
	return t.DeletedID
}

type GetAllStandards_Standards_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllStandards_Standards_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllStandards_Standards_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllStandards_Standards_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllStandards_Standards_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllStandards_Standards_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllStandards_Standards_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllStandards_Standards_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllStandards_Standards_PageInfo{}
	}
	return t.StartCursor
}

type GetAllStandards_Standards_Edges_Node_Controls struct {
	TotalCount int64 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllStandards_Standards_Edges_Node_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node_Controls{}
	}
	return t.TotalCount
}

type GetAllStandards_Standards_Edges_Node struct {
	Controls             GetAllStandards_Standards_Edges_Node_Controls "json:\"controls\" graphql:\"controls\""
	CreatedAt            *time.Time                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                                       "json:\"description,omitempty\" graphql:\"description\""
	Domains              []string                                      "json:\"domains,omitempty\" graphql:\"domains\""
	Framework            *string                                       "json:\"framework,omitempty\" graphql:\"framework\""
	FreeToUse            *bool                                         "json:\"freeToUse,omitempty\" graphql:\"freeToUse\""
	GoverningBody        *string                                       "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	GoverningBodyLogoURL *string                                       "json:\"governingBodyLogoURL,omitempty\" graphql:\"governingBodyLogoURL\""
	ID                   string                                        "json:\"id\" graphql:\"id\""
	IsPublic             *bool                                         "json:\"isPublic,omitempty\" graphql:\"isPublic\""
	Link                 *string                                       "json:\"link,omitempty\" graphql:\"link\""
	Name                 string                                        "json:\"name\" graphql:\"name\""
	OwnerID              *string                                       "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Revision             *string                                       "json:\"revision,omitempty\" graphql:\"revision\""
	ShortName            *string                                       "json:\"shortName,omitempty\" graphql:\"shortName\""
	StandardType         *string                                       "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status               *enums.StandardStatus                         "json:\"status,omitempty\" graphql:\"status\""
	SystemOwned          *bool                                         "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags                 []string                                      "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version              *string                                       "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetAllStandards_Standards_Edges_Node) GetControls() *GetAllStandards_Standards_Edges_Node_Controls {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return &t.Controls
}
func (t *GetAllStandards_Standards_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllStandards_Standards_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllStandards_Standards_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllStandards_Standards_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Domains
}
func (t *GetAllStandards_Standards_Edges_Node) GetFramework() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Framework
}
func (t *GetAllStandards_Standards_Edges_Node) GetFreeToUse() *bool {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.FreeToUse
}
func (t *GetAllStandards_Standards_Edges_Node) GetGoverningBody() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.GoverningBody
}
func (t *GetAllStandards_Standards_Edges_Node) GetGoverningBodyLogoURL() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.GoverningBodyLogoURL
}
func (t *GetAllStandards_Standards_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllStandards_Standards_Edges_Node) GetIsPublic() *bool {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.IsPublic
}
func (t *GetAllStandards_Standards_Edges_Node) GetLink() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Link
}
func (t *GetAllStandards_Standards_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllStandards_Standards_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllStandards_Standards_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Revision
}
func (t *GetAllStandards_Standards_Edges_Node) GetShortName() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.ShortName
}
func (t *GetAllStandards_Standards_Edges_Node) GetStandardType() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.StandardType
}
func (t *GetAllStandards_Standards_Edges_Node) GetStatus() *enums.StandardStatus {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllStandards_Standards_Edges_Node) GetSystemOwned() *bool {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.SystemOwned
}
func (t *GetAllStandards_Standards_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllStandards_Standards_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllStandards_Standards_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllStandards_Standards_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Version
}

type GetAllStandards_Standards_Edges struct {
	Node *GetAllStandards_Standards_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllStandards_Standards_Edges) GetNode() *GetAllStandards_Standards_Edges_Node {
	if t == nil {
		t = &GetAllStandards_Standards_Edges{}
	}
	return t.Node
}

type GetAllStandards_Standards struct {
	Edges      []*GetAllStandards_Standards_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllStandards_Standards_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllStandards_Standards) GetEdges() []*GetAllStandards_Standards_Edges {
	if t == nil {
		t = &GetAllStandards_Standards{}
	}
	return t.Edges
}
func (t *GetAllStandards_Standards) GetPageInfo() *GetAllStandards_Standards_PageInfo {
	if t == nil {
		t = &GetAllStandards_Standards{}
	}
	return &t.PageInfo
}
func (t *GetAllStandards_Standards) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllStandards_Standards{}
	}
	return t.TotalCount
}

type GetStandardByID_Standard_Controls struct {
	TotalCount int64 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetStandardByID_Standard_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &GetStandardByID_Standard_Controls{}
	}
	return t.TotalCount
}

type GetStandardByID_Standard struct {
	Controls             GetStandardByID_Standard_Controls "json:\"controls\" graphql:\"controls\""
	CreatedAt            *time.Time                        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                           "json:\"description,omitempty\" graphql:\"description\""
	Domains              []string                          "json:\"domains,omitempty\" graphql:\"domains\""
	Framework            *string                           "json:\"framework,omitempty\" graphql:\"framework\""
	FreeToUse            *bool                             "json:\"freeToUse,omitempty\" graphql:\"freeToUse\""
	GoverningBody        *string                           "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	GoverningBodyLogoURL *string                           "json:\"governingBodyLogoURL,omitempty\" graphql:\"governingBodyLogoURL\""
	ID                   string                            "json:\"id\" graphql:\"id\""
	IsPublic             *bool                             "json:\"isPublic,omitempty\" graphql:\"isPublic\""
	Link                 *string                           "json:\"link,omitempty\" graphql:\"link\""
	Name                 string                            "json:\"name\" graphql:\"name\""
	OwnerID              *string                           "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Revision             *string                           "json:\"revision,omitempty\" graphql:\"revision\""
	ShortName            *string                           "json:\"shortName,omitempty\" graphql:\"shortName\""
	StandardType         *string                           "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status               *enums.StandardStatus             "json:\"status,omitempty\" graphql:\"status\""
	SystemOwned          *bool                             "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags                 []string                          "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version              *string                           "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetStandardByID_Standard) GetControls() *GetStandardByID_Standard_Controls {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return &t.Controls
}
func (t *GetStandardByID_Standard) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.CreatedAt
}
func (t *GetStandardByID_Standard) GetCreatedBy() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.CreatedBy
}
func (t *GetStandardByID_Standard) GetDescription() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Description
}
func (t *GetStandardByID_Standard) GetDomains() []string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Domains
}
func (t *GetStandardByID_Standard) GetFramework() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Framework
}
func (t *GetStandardByID_Standard) GetFreeToUse() *bool {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.FreeToUse
}
func (t *GetStandardByID_Standard) GetGoverningBody() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.GoverningBody
}
func (t *GetStandardByID_Standard) GetGoverningBodyLogoURL() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.GoverningBodyLogoURL
}
func (t *GetStandardByID_Standard) GetID() string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.ID
}
func (t *GetStandardByID_Standard) GetIsPublic() *bool {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.IsPublic
}
func (t *GetStandardByID_Standard) GetLink() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Link
}
func (t *GetStandardByID_Standard) GetName() string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Name
}
func (t *GetStandardByID_Standard) GetOwnerID() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.OwnerID
}
func (t *GetStandardByID_Standard) GetRevision() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Revision
}
func (t *GetStandardByID_Standard) GetShortName() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.ShortName
}
func (t *GetStandardByID_Standard) GetStandardType() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.StandardType
}
func (t *GetStandardByID_Standard) GetStatus() *enums.StandardStatus {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Status
}
func (t *GetStandardByID_Standard) GetSystemOwned() *bool {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.SystemOwned
}
func (t *GetStandardByID_Standard) GetTags() []string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Tags
}
func (t *GetStandardByID_Standard) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.UpdatedAt
}
func (t *GetStandardByID_Standard) GetUpdatedBy() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.UpdatedBy
}
func (t *GetStandardByID_Standard) GetVersion() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Version
}

type GetStandards_Standards_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetStandards_Standards_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetStandards_Standards_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetStandards_Standards_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetStandards_Standards_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetStandards_Standards_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetStandards_Standards_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetStandards_Standards_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetStandards_Standards_PageInfo{}
	}
	return t.StartCursor
}

type GetStandards_Standards_Edges_Node_Controls struct {
	TotalCount int64 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetStandards_Standards_Edges_Node_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node_Controls{}
	}
	return t.TotalCount
}

type GetStandards_Standards_Edges_Node struct {
	Controls             GetStandards_Standards_Edges_Node_Controls "json:\"controls\" graphql:\"controls\""
	CreatedAt            *time.Time                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                                    "json:\"description,omitempty\" graphql:\"description\""
	Domains              []string                                   "json:\"domains,omitempty\" graphql:\"domains\""
	Framework            *string                                    "json:\"framework,omitempty\" graphql:\"framework\""
	FreeToUse            *bool                                      "json:\"freeToUse,omitempty\" graphql:\"freeToUse\""
	GoverningBody        *string                                    "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	GoverningBodyLogoURL *string                                    "json:\"governingBodyLogoURL,omitempty\" graphql:\"governingBodyLogoURL\""
	ID                   string                                     "json:\"id\" graphql:\"id\""
	IsPublic             *bool                                      "json:\"isPublic,omitempty\" graphql:\"isPublic\""
	Link                 *string                                    "json:\"link,omitempty\" graphql:\"link\""
	Name                 string                                     "json:\"name\" graphql:\"name\""
	OwnerID              *string                                    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Revision             *string                                    "json:\"revision,omitempty\" graphql:\"revision\""
	ShortName            *string                                    "json:\"shortName,omitempty\" graphql:\"shortName\""
	StandardType         *string                                    "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status               *enums.StandardStatus                      "json:\"status,omitempty\" graphql:\"status\""
	SystemOwned          *bool                                      "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags                 []string                                   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version              *string                                    "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetStandards_Standards_Edges_Node) GetControls() *GetStandards_Standards_Edges_Node_Controls {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return &t.Controls
}
func (t *GetStandards_Standards_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetStandards_Standards_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetStandards_Standards_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Description
}
func (t *GetStandards_Standards_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Domains
}
func (t *GetStandards_Standards_Edges_Node) GetFramework() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Framework
}
func (t *GetStandards_Standards_Edges_Node) GetFreeToUse() *bool {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.FreeToUse
}
func (t *GetStandards_Standards_Edges_Node) GetGoverningBody() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.GoverningBody
}
func (t *GetStandards_Standards_Edges_Node) GetGoverningBodyLogoURL() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.GoverningBodyLogoURL
}
func (t *GetStandards_Standards_Edges_Node) GetID() string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.ID
}
func (t *GetStandards_Standards_Edges_Node) GetIsPublic() *bool {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.IsPublic
}
func (t *GetStandards_Standards_Edges_Node) GetLink() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Link
}
func (t *GetStandards_Standards_Edges_Node) GetName() string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Name
}
func (t *GetStandards_Standards_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetStandards_Standards_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Revision
}
func (t *GetStandards_Standards_Edges_Node) GetShortName() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.ShortName
}
func (t *GetStandards_Standards_Edges_Node) GetStandardType() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.StandardType
}
func (t *GetStandards_Standards_Edges_Node) GetStatus() *enums.StandardStatus {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Status
}
func (t *GetStandards_Standards_Edges_Node) GetSystemOwned() *bool {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.SystemOwned
}
func (t *GetStandards_Standards_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Tags
}
func (t *GetStandards_Standards_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetStandards_Standards_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetStandards_Standards_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Version
}

type GetStandards_Standards_Edges struct {
	Node *GetStandards_Standards_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetStandards_Standards_Edges) GetNode() *GetStandards_Standards_Edges_Node {
	if t == nil {
		t = &GetStandards_Standards_Edges{}
	}
	return t.Node
}

type GetStandards_Standards struct {
	Edges      []*GetStandards_Standards_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetStandards_Standards_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                           "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetStandards_Standards) GetEdges() []*GetStandards_Standards_Edges {
	if t == nil {
		t = &GetStandards_Standards{}
	}
	return t.Edges
}
func (t *GetStandards_Standards) GetPageInfo() *GetStandards_Standards_PageInfo {
	if t == nil {
		t = &GetStandards_Standards{}
	}
	return &t.PageInfo
}
func (t *GetStandards_Standards) GetTotalCount() int64 {
	if t == nil {
		t = &GetStandards_Standards{}
	}
	return t.TotalCount
}

type UpdateStandard_UpdateStandard_Standard_Controls struct {
	TotalCount int64 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *UpdateStandard_UpdateStandard_Standard_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard_Controls{}
	}
	return t.TotalCount
}

type UpdateStandard_UpdateStandard_Standard struct {
	Controls             UpdateStandard_UpdateStandard_Standard_Controls "json:\"controls\" graphql:\"controls\""
	CreatedAt            *time.Time                                      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                                         "json:\"description,omitempty\" graphql:\"description\""
	Domains              []string                                        "json:\"domains,omitempty\" graphql:\"domains\""
	Framework            *string                                         "json:\"framework,omitempty\" graphql:\"framework\""
	FreeToUse            *bool                                           "json:\"freeToUse,omitempty\" graphql:\"freeToUse\""
	GoverningBody        *string                                         "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	GoverningBodyLogoURL *string                                         "json:\"governingBodyLogoURL,omitempty\" graphql:\"governingBodyLogoURL\""
	ID                   string                                          "json:\"id\" graphql:\"id\""
	IsPublic             *bool                                           "json:\"isPublic,omitempty\" graphql:\"isPublic\""
	Link                 *string                                         "json:\"link,omitempty\" graphql:\"link\""
	Name                 string                                          "json:\"name\" graphql:\"name\""
	OwnerID              *string                                         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Revision             *string                                         "json:\"revision,omitempty\" graphql:\"revision\""
	ShortName            *string                                         "json:\"shortName,omitempty\" graphql:\"shortName\""
	StandardType         *string                                         "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status               *enums.StandardStatus                           "json:\"status,omitempty\" graphql:\"status\""
	SystemOwned          *bool                                           "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags                 []string                                        "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version              *string                                         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *UpdateStandard_UpdateStandard_Standard) GetControls() *UpdateStandard_UpdateStandard_Standard_Controls {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return &t.Controls
}
func (t *UpdateStandard_UpdateStandard_Standard) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.CreatedAt
}
func (t *UpdateStandard_UpdateStandard_Standard) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.CreatedBy
}
func (t *UpdateStandard_UpdateStandard_Standard) GetDescription() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Description
}
func (t *UpdateStandard_UpdateStandard_Standard) GetDomains() []string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Domains
}
func (t *UpdateStandard_UpdateStandard_Standard) GetFramework() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Framework
}
func (t *UpdateStandard_UpdateStandard_Standard) GetFreeToUse() *bool {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.FreeToUse
}
func (t *UpdateStandard_UpdateStandard_Standard) GetGoverningBody() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.GoverningBody
}
func (t *UpdateStandard_UpdateStandard_Standard) GetGoverningBodyLogoURL() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.GoverningBodyLogoURL
}
func (t *UpdateStandard_UpdateStandard_Standard) GetID() string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.ID
}
func (t *UpdateStandard_UpdateStandard_Standard) GetIsPublic() *bool {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.IsPublic
}
func (t *UpdateStandard_UpdateStandard_Standard) GetLink() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Link
}
func (t *UpdateStandard_UpdateStandard_Standard) GetName() string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Name
}
func (t *UpdateStandard_UpdateStandard_Standard) GetOwnerID() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.OwnerID
}
func (t *UpdateStandard_UpdateStandard_Standard) GetRevision() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Revision
}
func (t *UpdateStandard_UpdateStandard_Standard) GetShortName() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.ShortName
}
func (t *UpdateStandard_UpdateStandard_Standard) GetStandardType() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.StandardType
}
func (t *UpdateStandard_UpdateStandard_Standard) GetStatus() *enums.StandardStatus {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Status
}
func (t *UpdateStandard_UpdateStandard_Standard) GetSystemOwned() *bool {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.SystemOwned
}
func (t *UpdateStandard_UpdateStandard_Standard) GetTags() []string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Tags
}
func (t *UpdateStandard_UpdateStandard_Standard) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.UpdatedAt
}
func (t *UpdateStandard_UpdateStandard_Standard) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.UpdatedBy
}
func (t *UpdateStandard_UpdateStandard_Standard) GetVersion() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Version
}

type UpdateStandard_UpdateStandard struct {
	Standard UpdateStandard_UpdateStandard_Standard "json:\"standard\" graphql:\"standard\""
}

func (t *UpdateStandard_UpdateStandard) GetStandard() *UpdateStandard_UpdateStandard_Standard {
	if t == nil {
		t = &UpdateStandard_UpdateStandard{}
	}
	return &t.Standard
}

type GetAllStandardHistories_StandardHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllStandardHistories_StandardHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllStandardHistories_StandardHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllStandardHistories_StandardHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllStandardHistories_StandardHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllStandardHistories_StandardHistories_Edges_Node struct {
	CreatedAt            *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string               "json:\"description,omitempty\" graphql:\"description\""
	Domains              []string              "json:\"domains,omitempty\" graphql:\"domains\""
	Framework            *string               "json:\"framework,omitempty\" graphql:\"framework\""
	FreeToUse            *bool                 "json:\"freeToUse,omitempty\" graphql:\"freeToUse\""
	GoverningBody        *string               "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	GoverningBodyLogoURL *string               "json:\"governingBodyLogoURL,omitempty\" graphql:\"governingBodyLogoURL\""
	HistoryTime          time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID                   string                "json:\"id\" graphql:\"id\""
	IsPublic             *bool                 "json:\"isPublic,omitempty\" graphql:\"isPublic\""
	Link                 *string               "json:\"link,omitempty\" graphql:\"link\""
	Name                 string                "json:\"name\" graphql:\"name\""
	Operation            history.OpType        "json:\"operation\" graphql:\"operation\""
	OwnerID              *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                  *string               "json:\"ref,omitempty\" graphql:\"ref\""
	Revision             *string               "json:\"revision,omitempty\" graphql:\"revision\""
	ShortName            *string               "json:\"shortName,omitempty\" graphql:\"shortName\""
	StandardType         *string               "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status               *enums.StandardStatus "json:\"status,omitempty\" graphql:\"status\""
	SystemOwned          *bool                 "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags                 []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version              *string               "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Domains
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetFramework() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Framework
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetFreeToUse() *bool {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.FreeToUse
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetGoverningBody() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.GoverningBody
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetGoverningBodyLogoURL() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.GoverningBodyLogoURL
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetIsPublic() *bool {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.IsPublic
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetLink() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Link
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Revision
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetShortName() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.ShortName
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetStandardType() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.StandardType
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetStatus() *enums.StandardStatus {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetSystemOwned() *bool {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.SystemOwned
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Version
}

type GetAllStandardHistories_StandardHistories_Edges struct {
	Node *GetAllStandardHistories_StandardHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllStandardHistories_StandardHistories_Edges) GetNode() *GetAllStandardHistories_StandardHistories_Edges_Node {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges{}
	}
	return t.Node
}

type GetAllStandardHistories_StandardHistories struct {
	Edges      []*GetAllStandardHistories_StandardHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllStandardHistories_StandardHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllStandardHistories_StandardHistories) GetEdges() []*GetAllStandardHistories_StandardHistories_Edges {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories{}
	}
	return t.Edges
}
func (t *GetAllStandardHistories_StandardHistories) GetPageInfo() *GetAllStandardHistories_StandardHistories_PageInfo {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllStandardHistories_StandardHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories{}
	}
	return t.TotalCount
}

type GetStandardHistories_StandardHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetStandardHistories_StandardHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetStandardHistories_StandardHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetStandardHistories_StandardHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetStandardHistories_StandardHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetStandardHistories_StandardHistories_Edges_Node struct {
	CreatedAt            *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string               "json:\"description,omitempty\" graphql:\"description\""
	Domains              []string              "json:\"domains,omitempty\" graphql:\"domains\""
	Framework            *string               "json:\"framework,omitempty\" graphql:\"framework\""
	FreeToUse            *bool                 "json:\"freeToUse,omitempty\" graphql:\"freeToUse\""
	GoverningBody        *string               "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	GoverningBodyLogoURL *string               "json:\"governingBodyLogoURL,omitempty\" graphql:\"governingBodyLogoURL\""
	HistoryTime          time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID                   string                "json:\"id\" graphql:\"id\""
	IsPublic             *bool                 "json:\"isPublic,omitempty\" graphql:\"isPublic\""
	Link                 *string               "json:\"link,omitempty\" graphql:\"link\""
	Name                 string                "json:\"name\" graphql:\"name\""
	Operation            history.OpType        "json:\"operation\" graphql:\"operation\""
	OwnerID              *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                  *string               "json:\"ref,omitempty\" graphql:\"ref\""
	Revision             *string               "json:\"revision,omitempty\" graphql:\"revision\""
	ShortName            *string               "json:\"shortName,omitempty\" graphql:\"shortName\""
	StandardType         *string               "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status               *enums.StandardStatus "json:\"status,omitempty\" graphql:\"status\""
	SystemOwned          *bool                 "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags                 []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version              *string               "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetStandardHistories_StandardHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Domains
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetFramework() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Framework
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetFreeToUse() *bool {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.FreeToUse
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetGoverningBody() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.GoverningBody
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetGoverningBodyLogoURL() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.GoverningBodyLogoURL
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetIsPublic() *bool {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.IsPublic
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetLink() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Link
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Revision
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetShortName() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.ShortName
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetStandardType() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.StandardType
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetStatus() *enums.StandardStatus {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetSystemOwned() *bool {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.SystemOwned
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Version
}

type GetStandardHistories_StandardHistories_Edges struct {
	Node *GetStandardHistories_StandardHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetStandardHistories_StandardHistories_Edges) GetNode() *GetStandardHistories_StandardHistories_Edges_Node {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges{}
	}
	return t.Node
}

type GetStandardHistories_StandardHistories struct {
	Edges      []*GetStandardHistories_StandardHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetStandardHistories_StandardHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                           "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetStandardHistories_StandardHistories) GetEdges() []*GetStandardHistories_StandardHistories_Edges {
	if t == nil {
		t = &GetStandardHistories_StandardHistories{}
	}
	return t.Edges
}
func (t *GetStandardHistories_StandardHistories) GetPageInfo() *GetStandardHistories_StandardHistories_PageInfo {
	if t == nil {
		t = &GetStandardHistories_StandardHistories{}
	}
	return &t.PageInfo
}
func (t *GetStandardHistories_StandardHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetStandardHistories_StandardHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	AuditorReferenceID     *string                          "json:\"auditorReferenceID,omitempty\" graphql:\"auditorReferenceID\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlID              string                           "json:\"controlID\" graphql:\"controlID\""
	ControlOwnerID         *string                          "json:\"controlOwnerID,omitempty\" graphql:\"controlOwnerID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID             *string                          "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	ReferenceFramework     *string                          "json:\"referenceFramework,omitempty\" graphql:\"referenceFramework\""
	ReferenceID            *string                          "json:\"referenceID,omitempty\" graphql:\"referenceID\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.AssessmentMethods
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.AssessmentObjectives
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetAuditorReferenceID() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.AuditorReferenceID
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetCategory() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.Category
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetCategoryID() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.CategoryID
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetControlID() string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.ControlID
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetControlOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.ControlOwnerID
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetControlQuestions() []string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.ControlQuestions
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetControlType() *enums.ControlType {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.ControlType
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetDelegateID() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.DelegateID
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.Description
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.DisplayID
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.ExampleEvidence
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetID() string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.ID
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.ImplementationGuidance
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetMappedCategories() []string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.MappedCategories
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetRefCode() string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.RefCode
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetReferenceFramework() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.ReferenceFramework
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetReferenceID() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.ReferenceID
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetReferences() []*models.Reference {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.References
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetSource() *enums.ControlSource {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.Source
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.Status
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetSubcategory() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.Subcategory
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.Tags
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol struct {
	Subcontrols []*CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols "json:\"subcontrols,omitempty\" graphql:\"subcontrols\""
}

func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol) GetSubcontrols() []*CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol{}
	}
	return t.Subcontrols
}

type CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	AuditorReferenceID     *string                          "json:\"auditorReferenceID,omitempty\" graphql:\"auditorReferenceID\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlID              string                           "json:\"controlID\" graphql:\"controlID\""
	ControlOwnerID         *string                          "json:\"controlOwnerID,omitempty\" graphql:\"controlOwnerID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID             *string                          "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	ReferenceFramework     *string                          "json:\"referenceFramework,omitempty\" graphql:\"referenceFramework\""
	ReferenceID            *string                          "json:\"referenceID,omitempty\" graphql:\"referenceID\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.AssessmentMethods
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.AssessmentObjectives
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetAuditorReferenceID() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.AuditorReferenceID
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetCategory() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.Category
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetCategoryID() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.CategoryID
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetControlID() string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.ControlID
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetControlOwnerID() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.ControlOwnerID
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetControlQuestions() []string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.ControlQuestions
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetControlType() *enums.ControlType {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.ControlType
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.CreatedAt
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.CreatedBy
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetDelegateID() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.DelegateID
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetDescription() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.Description
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.DisplayID
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.ExampleEvidence
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetID() string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.ID
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.ImplementationGuidance
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetMappedCategories() []string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.MappedCategories
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.OwnerID
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetRefCode() string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.RefCode
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetReferenceFramework() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.ReferenceFramework
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetReferenceID() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.ReferenceID
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetReferences() []*models.Reference {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.References
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetSource() *enums.ControlSource {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.Source
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.Status
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetSubcategory() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.Subcategory
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetTags() []string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.Tags
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.UpdatedBy
}

type CreateBulkSubcontrol_CreateBulkSubcontrol struct {
	Subcontrols []*CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols "json:\"subcontrols,omitempty\" graphql:\"subcontrols\""
}

func (t *CreateBulkSubcontrol_CreateBulkSubcontrol) GetSubcontrols() []*CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol{}
	}
	return t.Subcontrols
}

type CreateSubcontrol_CreateSubcontrol_Subcontrol struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	AuditorReferenceID     *string                          "json:\"auditorReferenceID,omitempty\" graphql:\"auditorReferenceID\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlID              string                           "json:\"controlID\" graphql:\"controlID\""
	ControlOwnerID         *string                          "json:\"controlOwnerID,omitempty\" graphql:\"controlOwnerID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID             *string                          "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	ReferenceFramework     *string                          "json:\"referenceFramework,omitempty\" graphql:\"referenceFramework\""
	ReferenceID            *string                          "json:\"referenceID,omitempty\" graphql:\"referenceID\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.AssessmentMethods
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.AssessmentObjectives
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetAuditorReferenceID() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.AuditorReferenceID
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetCategory() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.Category
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetCategoryID() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.CategoryID
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetControlID() string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.ControlID
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetControlOwnerID() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.ControlOwnerID
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetControlQuestions() []string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.ControlQuestions
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetControlType() *enums.ControlType {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.ControlType
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.CreatedAt
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetCreatedBy() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.CreatedBy
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetDelegateID() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.DelegateID
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetDescription() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.Description
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetDisplayID() string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.DisplayID
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.ExampleEvidence
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetID() string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.ID
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.ImplementationGuidance
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetMappedCategories() []string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.MappedCategories
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetOwnerID() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.OwnerID
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetRefCode() string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.RefCode
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetReferenceFramework() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.ReferenceFramework
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetReferenceID() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.ReferenceID
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetReferences() []*models.Reference {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.References
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetSource() *enums.ControlSource {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.Source
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.Status
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetSubcategory() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.Subcategory
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetTags() []string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.Tags
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.UpdatedAt
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.UpdatedBy
}

type CreateSubcontrol_CreateSubcontrol struct {
	Subcontrol CreateSubcontrol_CreateSubcontrol_Subcontrol "json:\"subcontrol\" graphql:\"subcontrol\""
}

func (t *CreateSubcontrol_CreateSubcontrol) GetSubcontrol() *CreateSubcontrol_CreateSubcontrol_Subcontrol {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol{}
	}
	return &t.Subcontrol
}

type DeleteSubcontrol_DeleteSubcontrol struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteSubcontrol_DeleteSubcontrol) GetDeletedID() string {
	if t == nil {
		t = &DeleteSubcontrol_DeleteSubcontrol{}
	}
	return t.DeletedID
}

type GetAllSubcontrols_Subcontrols_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllSubcontrols_Subcontrols_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllSubcontrols_Subcontrols_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllSubcontrols_Subcontrols_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllSubcontrols_Subcontrols_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_PageInfo{}
	}
	return t.StartCursor
}

type GetAllSubcontrols_Subcontrols_Edges_Node struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	AuditorReferenceID     *string                          "json:\"auditorReferenceID,omitempty\" graphql:\"auditorReferenceID\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlID              string                           "json:\"controlID\" graphql:\"controlID\""
	ControlOwnerID         *string                          "json:\"controlOwnerID,omitempty\" graphql:\"controlOwnerID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID             *string                          "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	ReferenceFramework     *string                          "json:\"referenceFramework,omitempty\" graphql:\"referenceFramework\""
	ReferenceID            *string                          "json:\"referenceID,omitempty\" graphql:\"referenceID\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.AssessmentMethods
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.AssessmentObjectives
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetAuditorReferenceID() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.AuditorReferenceID
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetCategoryID() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.CategoryID
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetControlID() string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ControlID
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetControlOwnerID() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ControlOwnerID
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetControlQuestions() []string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ControlQuestions
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetControlType() *enums.ControlType {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ControlType
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ExampleEvidence
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ImplementationGuidance
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetMappedCategories() []string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.MappedCategories
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetReferenceFramework() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ReferenceFramework
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetReferenceID() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ReferenceID
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetReferences() []*models.Reference {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.References
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllSubcontrols_Subcontrols_Edges struct {
	Node *GetAllSubcontrols_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllSubcontrols_Subcontrols_Edges) GetNode() *GetAllSubcontrols_Subcontrols_Edges_Node {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges{}
	}
	return t.Node
}

type GetAllSubcontrols_Subcontrols struct {
	Edges      []*GetAllSubcontrols_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllSubcontrols_Subcontrols_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllSubcontrols_Subcontrols) GetEdges() []*GetAllSubcontrols_Subcontrols_Edges {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols{}
	}
	return t.Edges
}
func (t *GetAllSubcontrols_Subcontrols) GetPageInfo() *GetAllSubcontrols_Subcontrols_PageInfo {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols{}
	}
	return &t.PageInfo
}
func (t *GetAllSubcontrols_Subcontrols) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols{}
	}
	return t.TotalCount
}

type GetSubcontrolByID_Subcontrol struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	AuditorReferenceID     *string                          "json:\"auditorReferenceID,omitempty\" graphql:\"auditorReferenceID\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlID              string                           "json:\"controlID\" graphql:\"controlID\""
	ControlOwnerID         *string                          "json:\"controlOwnerID,omitempty\" graphql:\"controlOwnerID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID             *string                          "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	ReferenceFramework     *string                          "json:\"referenceFramework,omitempty\" graphql:\"referenceFramework\""
	ReferenceID            *string                          "json:\"referenceID,omitempty\" graphql:\"referenceID\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetSubcontrolByID_Subcontrol) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.AssessmentMethods
}
func (t *GetSubcontrolByID_Subcontrol) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.AssessmentObjectives
}
func (t *GetSubcontrolByID_Subcontrol) GetAuditorReferenceID() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.AuditorReferenceID
}
func (t *GetSubcontrolByID_Subcontrol) GetCategory() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.Category
}
func (t *GetSubcontrolByID_Subcontrol) GetCategoryID() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.CategoryID
}
func (t *GetSubcontrolByID_Subcontrol) GetControlID() string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.ControlID
}
func (t *GetSubcontrolByID_Subcontrol) GetControlOwnerID() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.ControlOwnerID
}
func (t *GetSubcontrolByID_Subcontrol) GetControlQuestions() []string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.ControlQuestions
}
func (t *GetSubcontrolByID_Subcontrol) GetControlType() *enums.ControlType {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.ControlType
}
func (t *GetSubcontrolByID_Subcontrol) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.CreatedAt
}
func (t *GetSubcontrolByID_Subcontrol) GetCreatedBy() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.CreatedBy
}
func (t *GetSubcontrolByID_Subcontrol) GetDelegateID() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.DelegateID
}
func (t *GetSubcontrolByID_Subcontrol) GetDescription() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.Description
}
func (t *GetSubcontrolByID_Subcontrol) GetDisplayID() string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.DisplayID
}
func (t *GetSubcontrolByID_Subcontrol) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.ExampleEvidence
}
func (t *GetSubcontrolByID_Subcontrol) GetID() string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.ID
}
func (t *GetSubcontrolByID_Subcontrol) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.ImplementationGuidance
}
func (t *GetSubcontrolByID_Subcontrol) GetMappedCategories() []string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.MappedCategories
}
func (t *GetSubcontrolByID_Subcontrol) GetOwnerID() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.OwnerID
}
func (t *GetSubcontrolByID_Subcontrol) GetRefCode() string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.RefCode
}
func (t *GetSubcontrolByID_Subcontrol) GetReferenceFramework() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.ReferenceFramework
}
func (t *GetSubcontrolByID_Subcontrol) GetReferenceID() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.ReferenceID
}
func (t *GetSubcontrolByID_Subcontrol) GetReferences() []*models.Reference {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.References
}
func (t *GetSubcontrolByID_Subcontrol) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.Source
}
func (t *GetSubcontrolByID_Subcontrol) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.Status
}
func (t *GetSubcontrolByID_Subcontrol) GetSubcategory() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.Subcategory
}
func (t *GetSubcontrolByID_Subcontrol) GetTags() []string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.Tags
}
func (t *GetSubcontrolByID_Subcontrol) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.UpdatedAt
}
func (t *GetSubcontrolByID_Subcontrol) GetUpdatedBy() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.UpdatedBy
}

type GetSubcontrols_Subcontrols_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetSubcontrols_Subcontrols_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetSubcontrols_Subcontrols_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetSubcontrols_Subcontrols_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetSubcontrols_Subcontrols_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_PageInfo{}
	}
	return t.StartCursor
}

type GetSubcontrols_Subcontrols_Edges_Node struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	AuditorReferenceID     *string                          "json:\"auditorReferenceID,omitempty\" graphql:\"auditorReferenceID\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlID              string                           "json:\"controlID\" graphql:\"controlID\""
	ControlOwnerID         *string                          "json:\"controlOwnerID,omitempty\" graphql:\"controlOwnerID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID             *string                          "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	ReferenceFramework     *string                          "json:\"referenceFramework,omitempty\" graphql:\"referenceFramework\""
	ReferenceID            *string                          "json:\"referenceID,omitempty\" graphql:\"referenceID\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetSubcontrols_Subcontrols_Edges_Node) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.AssessmentMethods
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.AssessmentObjectives
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetAuditorReferenceID() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.AuditorReferenceID
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Category
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetCategoryID() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.CategoryID
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetControlID() string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ControlID
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetControlOwnerID() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ControlOwnerID
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetControlQuestions() []string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ControlQuestions
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetControlType() *enums.ControlType {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ControlType
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Description
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ExampleEvidence
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ImplementationGuidance
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetMappedCategories() []string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.MappedCategories
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetReferenceFramework() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ReferenceFramework
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetReferenceID() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ReferenceID
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetReferences() []*models.Reference {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.References
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Source
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Status
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Tags
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetSubcontrols_Subcontrols_Edges struct {
	Node *GetSubcontrols_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetSubcontrols_Subcontrols_Edges) GetNode() *GetSubcontrols_Subcontrols_Edges_Node {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges{}
	}
	return t.Node
}

type GetSubcontrols_Subcontrols struct {
	Edges      []*GetSubcontrols_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetSubcontrols_Subcontrols_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetSubcontrols_Subcontrols) GetEdges() []*GetSubcontrols_Subcontrols_Edges {
	if t == nil {
		t = &GetSubcontrols_Subcontrols{}
	}
	return t.Edges
}
func (t *GetSubcontrols_Subcontrols) GetPageInfo() *GetSubcontrols_Subcontrols_PageInfo {
	if t == nil {
		t = &GetSubcontrols_Subcontrols{}
	}
	return &t.PageInfo
}
func (t *GetSubcontrols_Subcontrols) GetTotalCount() int64 {
	if t == nil {
		t = &GetSubcontrols_Subcontrols{}
	}
	return t.TotalCount
}

type UpdateSubcontrol_UpdateSubcontrol_Subcontrol struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	AuditorReferenceID     *string                          "json:\"auditorReferenceID,omitempty\" graphql:\"auditorReferenceID\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlID              string                           "json:\"controlID\" graphql:\"controlID\""
	ControlOwnerID         *string                          "json:\"controlOwnerID,omitempty\" graphql:\"controlOwnerID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID             *string                          "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	ReferenceFramework     *string                          "json:\"referenceFramework,omitempty\" graphql:\"referenceFramework\""
	ReferenceID            *string                          "json:\"referenceID,omitempty\" graphql:\"referenceID\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.AssessmentMethods
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.AssessmentObjectives
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetAuditorReferenceID() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.AuditorReferenceID
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetCategory() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.Category
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetCategoryID() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.CategoryID
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetControlID() string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.ControlID
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetControlOwnerID() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.ControlOwnerID
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetControlQuestions() []string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.ControlQuestions
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetControlType() *enums.ControlType {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.ControlType
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.CreatedAt
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.CreatedBy
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetDelegateID() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.DelegateID
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetDescription() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.Description
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetDisplayID() string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.DisplayID
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.ExampleEvidence
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetID() string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.ID
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.ImplementationGuidance
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetMappedCategories() []string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.MappedCategories
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetOwnerID() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.OwnerID
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetRefCode() string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.RefCode
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetReferenceFramework() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.ReferenceFramework
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetReferenceID() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.ReferenceID
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetReferences() []*models.Reference {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.References
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetSource() *enums.ControlSource {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.Source
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.Status
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetSubcategory() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.Subcategory
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetTags() []string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.Tags
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.UpdatedAt
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.UpdatedBy
}

type UpdateSubcontrol_UpdateSubcontrol struct {
	Subcontrol UpdateSubcontrol_UpdateSubcontrol_Subcontrol "json:\"subcontrol\" graphql:\"subcontrol\""
}

func (t *UpdateSubcontrol_UpdateSubcontrol) GetSubcontrol() *UpdateSubcontrol_UpdateSubcontrol_Subcontrol {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol{}
	}
	return &t.Subcontrol
}

type GetAllSubcontrolHistories_SubcontrolHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllSubcontrolHistories_SubcontrolHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	AuditorReferenceID     *string                          "json:\"auditorReferenceID,omitempty\" graphql:\"auditorReferenceID\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlID              string                           "json:\"controlID\" graphql:\"controlID\""
	ControlOwnerID         *string                          "json:\"controlOwnerID,omitempty\" graphql:\"controlOwnerID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID             *string                          "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	HistoryTime            time.Time                        "json:\"historyTime\" graphql:\"historyTime\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	Operation              history.OpType                   "json:\"operation\" graphql:\"operation\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                    *string                          "json:\"ref,omitempty\" graphql:\"ref\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	ReferenceFramework     *string                          "json:\"referenceFramework,omitempty\" graphql:\"referenceFramework\""
	ReferenceID            *string                          "json:\"referenceID,omitempty\" graphql:\"referenceID\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.AssessmentMethods
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.AssessmentObjectives
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetAuditorReferenceID() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.AuditorReferenceID
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetCategoryID() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.CategoryID
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetControlID() string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ControlID
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetControlOwnerID() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ControlOwnerID
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetControlQuestions() []string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ControlQuestions
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetControlType() *enums.ControlType {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ControlType
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ExampleEvidence
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ImplementationGuidance
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetMappedCategories() []string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.MappedCategories
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.RefCode
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetReferenceFramework() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ReferenceFramework
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetReferenceID() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ReferenceID
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetReferences() []*models.Reference {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.References
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllSubcontrolHistories_SubcontrolHistories_Edges struct {
	Node *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges) GetNode() *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges{}
	}
	return t.Node
}

type GetAllSubcontrolHistories_SubcontrolHistories struct {
	Edges      []*GetAllSubcontrolHistories_SubcontrolHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllSubcontrolHistories_SubcontrolHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllSubcontrolHistories_SubcontrolHistories) GetEdges() []*GetAllSubcontrolHistories_SubcontrolHistories_Edges {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories{}
	}
	return t.Edges
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories) GetPageInfo() *GetAllSubcontrolHistories_SubcontrolHistories_PageInfo {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories{}
	}
	return t.TotalCount
}

type GetSubcontrolHistories_SubcontrolHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetSubcontrolHistories_SubcontrolHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetSubcontrolHistories_SubcontrolHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetSubcontrolHistories_SubcontrolHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetSubcontrolHistories_SubcontrolHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetSubcontrolHistories_SubcontrolHistories_Edges_Node struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	AuditorReferenceID     *string                          "json:\"auditorReferenceID,omitempty\" graphql:\"auditorReferenceID\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlID              string                           "json:\"controlID\" graphql:\"controlID\""
	ControlOwnerID         *string                          "json:\"controlOwnerID,omitempty\" graphql:\"controlOwnerID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DelegateID             *string                          "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	HistoryTime            time.Time                        "json:\"historyTime\" graphql:\"historyTime\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	Operation              history.OpType                   "json:\"operation\" graphql:\"operation\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                    *string                          "json:\"ref,omitempty\" graphql:\"ref\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	ReferenceFramework     *string                          "json:\"referenceFramework,omitempty\" graphql:\"referenceFramework\""
	ReferenceID            *string                          "json:\"referenceID,omitempty\" graphql:\"referenceID\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.AssessmentMethods
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.AssessmentObjectives
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetAuditorReferenceID() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.AuditorReferenceID
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Category
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetCategoryID() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.CategoryID
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetControlID() string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ControlID
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetControlOwnerID() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ControlOwnerID
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetControlQuestions() []string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ControlQuestions
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetControlType() *enums.ControlType {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ControlType
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.DelegateID
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ExampleEvidence
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ImplementationGuidance
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetMappedCategories() []string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.MappedCategories
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.RefCode
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetReferenceFramework() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ReferenceFramework
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetReferenceID() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ReferenceID
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetReferences() []*models.Reference {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.References
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetSubcontrolHistories_SubcontrolHistories_Edges struct {
	Node *GetSubcontrolHistories_SubcontrolHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetSubcontrolHistories_SubcontrolHistories_Edges) GetNode() *GetSubcontrolHistories_SubcontrolHistories_Edges_Node {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges{}
	}
	return t.Node
}

type GetSubcontrolHistories_SubcontrolHistories struct {
	Edges      []*GetSubcontrolHistories_SubcontrolHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetSubcontrolHistories_SubcontrolHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetSubcontrolHistories_SubcontrolHistories) GetEdges() []*GetSubcontrolHistories_SubcontrolHistories_Edges {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories{}
	}
	return t.Edges
}
func (t *GetSubcontrolHistories_SubcontrolHistories) GetPageInfo() *GetSubcontrolHistories_SubcontrolHistories_PageInfo {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories{}
	}
	return &t.PageInfo
}
func (t *GetSubcontrolHistories_SubcontrolHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories{}
	}
	return t.TotalCount
}

type CreateSubprocessor_CreateSubprocessor_Subprocessor struct {
	CreatedAt       *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string    "json:\"description,omitempty\" graphql:\"description\""
	ID              string     "json:\"id\" graphql:\"id\""
	LogoLocalFileID *string    "json:\"logoLocalFileID,omitempty\" graphql:\"logoLocalFileID\""
	LogoRemoteURL   *string    "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Name            string     "json:\"name\" graphql:\"name\""
	OwnerID         *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SystemOwned     *bool      "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags            []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateSubprocessor_CreateSubprocessor_Subprocessor) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateSubprocessor_CreateSubprocessor_Subprocessor{}
	}
	return t.CreatedAt
}
func (t *CreateSubprocessor_CreateSubprocessor_Subprocessor) GetCreatedBy() *string {
	if t == nil {
		t = &CreateSubprocessor_CreateSubprocessor_Subprocessor{}
	}
	return t.CreatedBy
}
func (t *CreateSubprocessor_CreateSubprocessor_Subprocessor) GetDescription() *string {
	if t == nil {
		t = &CreateSubprocessor_CreateSubprocessor_Subprocessor{}
	}
	return t.Description
}
func (t *CreateSubprocessor_CreateSubprocessor_Subprocessor) GetID() string {
	if t == nil {
		t = &CreateSubprocessor_CreateSubprocessor_Subprocessor{}
	}
	return t.ID
}
func (t *CreateSubprocessor_CreateSubprocessor_Subprocessor) GetLogoLocalFileID() *string {
	if t == nil {
		t = &CreateSubprocessor_CreateSubprocessor_Subprocessor{}
	}
	return t.LogoLocalFileID
}
func (t *CreateSubprocessor_CreateSubprocessor_Subprocessor) GetLogoRemoteURL() *string {
	if t == nil {
		t = &CreateSubprocessor_CreateSubprocessor_Subprocessor{}
	}
	return t.LogoRemoteURL
}
func (t *CreateSubprocessor_CreateSubprocessor_Subprocessor) GetName() string {
	if t == nil {
		t = &CreateSubprocessor_CreateSubprocessor_Subprocessor{}
	}
	return t.Name
}
func (t *CreateSubprocessor_CreateSubprocessor_Subprocessor) GetOwnerID() *string {
	if t == nil {
		t = &CreateSubprocessor_CreateSubprocessor_Subprocessor{}
	}
	return t.OwnerID
}
func (t *CreateSubprocessor_CreateSubprocessor_Subprocessor) GetSystemOwned() *bool {
	if t == nil {
		t = &CreateSubprocessor_CreateSubprocessor_Subprocessor{}
	}
	return t.SystemOwned
}
func (t *CreateSubprocessor_CreateSubprocessor_Subprocessor) GetTags() []string {
	if t == nil {
		t = &CreateSubprocessor_CreateSubprocessor_Subprocessor{}
	}
	return t.Tags
}
func (t *CreateSubprocessor_CreateSubprocessor_Subprocessor) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateSubprocessor_CreateSubprocessor_Subprocessor{}
	}
	return t.UpdatedAt
}
func (t *CreateSubprocessor_CreateSubprocessor_Subprocessor) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateSubprocessor_CreateSubprocessor_Subprocessor{}
	}
	return t.UpdatedBy
}

type CreateSubprocessor_CreateSubprocessor struct {
	Subprocessor CreateSubprocessor_CreateSubprocessor_Subprocessor "json:\"subprocessor\" graphql:\"subprocessor\""
}

func (t *CreateSubprocessor_CreateSubprocessor) GetSubprocessor() *CreateSubprocessor_CreateSubprocessor_Subprocessor {
	if t == nil {
		t = &CreateSubprocessor_CreateSubprocessor{}
	}
	return &t.Subprocessor
}

type DeleteSubprocessor_DeleteSubprocessor struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteSubprocessor_DeleteSubprocessor) GetDeletedID() string {
	if t == nil {
		t = &DeleteSubprocessor_DeleteSubprocessor{}
	}
	return t.DeletedID
}

type GetAllSubprocessors_Subprocessors_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllSubprocessors_Subprocessors_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllSubprocessors_Subprocessors_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllSubprocessors_Subprocessors_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllSubprocessors_Subprocessors_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllSubprocessors_Subprocessors_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllSubprocessors_Subprocessors_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllSubprocessors_Subprocessors_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllSubprocessors_Subprocessors_PageInfo{}
	}
	return t.StartCursor
}

type GetAllSubprocessors_Subprocessors_Edges_Node struct {
	CreatedAt       *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string    "json:\"description,omitempty\" graphql:\"description\""
	ID              string     "json:\"id\" graphql:\"id\""
	LogoLocalFileID *string    "json:\"logoLocalFileID,omitempty\" graphql:\"logoLocalFileID\""
	LogoRemoteURL   *string    "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Name            string     "json:\"name\" graphql:\"name\""
	OwnerID         *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SystemOwned     *bool      "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags            []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllSubprocessors_Subprocessors_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllSubprocessors_Subprocessors_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllSubprocessors_Subprocessors_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllSubprocessors_Subprocessors_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllSubprocessors_Subprocessors_Edges_Node) GetLogoLocalFileID() *string {
	if t == nil {
		t = &GetAllSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.LogoLocalFileID
}
func (t *GetAllSubprocessors_Subprocessors_Edges_Node) GetLogoRemoteURL() *string {
	if t == nil {
		t = &GetAllSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.LogoRemoteURL
}
func (t *GetAllSubprocessors_Subprocessors_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllSubprocessors_Subprocessors_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllSubprocessors_Subprocessors_Edges_Node) GetSystemOwned() *bool {
	if t == nil {
		t = &GetAllSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.SystemOwned
}
func (t *GetAllSubprocessors_Subprocessors_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllSubprocessors_Subprocessors_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllSubprocessors_Subprocessors_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllSubprocessors_Subprocessors_Edges struct {
	Node *GetAllSubprocessors_Subprocessors_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllSubprocessors_Subprocessors_Edges) GetNode() *GetAllSubprocessors_Subprocessors_Edges_Node {
	if t == nil {
		t = &GetAllSubprocessors_Subprocessors_Edges{}
	}
	return t.Node
}

type GetAllSubprocessors_Subprocessors struct {
	Edges      []*GetAllSubprocessors_Subprocessors_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllSubprocessors_Subprocessors_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllSubprocessors_Subprocessors) GetEdges() []*GetAllSubprocessors_Subprocessors_Edges {
	if t == nil {
		t = &GetAllSubprocessors_Subprocessors{}
	}
	return t.Edges
}
func (t *GetAllSubprocessors_Subprocessors) GetPageInfo() *GetAllSubprocessors_Subprocessors_PageInfo {
	if t == nil {
		t = &GetAllSubprocessors_Subprocessors{}
	}
	return &t.PageInfo
}
func (t *GetAllSubprocessors_Subprocessors) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllSubprocessors_Subprocessors{}
	}
	return t.TotalCount
}

type GetSubprocessorByID_Subprocessor struct {
	CreatedAt       *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string    "json:\"description,omitempty\" graphql:\"description\""
	ID              string     "json:\"id\" graphql:\"id\""
	LogoLocalFileID *string    "json:\"logoLocalFileID,omitempty\" graphql:\"logoLocalFileID\""
	LogoRemoteURL   *string    "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Name            string     "json:\"name\" graphql:\"name\""
	OwnerID         *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SystemOwned     *bool      "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags            []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetSubprocessorByID_Subprocessor) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetSubprocessorByID_Subprocessor{}
	}
	return t.CreatedAt
}
func (t *GetSubprocessorByID_Subprocessor) GetCreatedBy() *string {
	if t == nil {
		t = &GetSubprocessorByID_Subprocessor{}
	}
	return t.CreatedBy
}
func (t *GetSubprocessorByID_Subprocessor) GetDescription() *string {
	if t == nil {
		t = &GetSubprocessorByID_Subprocessor{}
	}
	return t.Description
}
func (t *GetSubprocessorByID_Subprocessor) GetID() string {
	if t == nil {
		t = &GetSubprocessorByID_Subprocessor{}
	}
	return t.ID
}
func (t *GetSubprocessorByID_Subprocessor) GetLogoLocalFileID() *string {
	if t == nil {
		t = &GetSubprocessorByID_Subprocessor{}
	}
	return t.LogoLocalFileID
}
func (t *GetSubprocessorByID_Subprocessor) GetLogoRemoteURL() *string {
	if t == nil {
		t = &GetSubprocessorByID_Subprocessor{}
	}
	return t.LogoRemoteURL
}
func (t *GetSubprocessorByID_Subprocessor) GetName() string {
	if t == nil {
		t = &GetSubprocessorByID_Subprocessor{}
	}
	return t.Name
}
func (t *GetSubprocessorByID_Subprocessor) GetOwnerID() *string {
	if t == nil {
		t = &GetSubprocessorByID_Subprocessor{}
	}
	return t.OwnerID
}
func (t *GetSubprocessorByID_Subprocessor) GetSystemOwned() *bool {
	if t == nil {
		t = &GetSubprocessorByID_Subprocessor{}
	}
	return t.SystemOwned
}
func (t *GetSubprocessorByID_Subprocessor) GetTags() []string {
	if t == nil {
		t = &GetSubprocessorByID_Subprocessor{}
	}
	return t.Tags
}
func (t *GetSubprocessorByID_Subprocessor) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetSubprocessorByID_Subprocessor{}
	}
	return t.UpdatedAt
}
func (t *GetSubprocessorByID_Subprocessor) GetUpdatedBy() *string {
	if t == nil {
		t = &GetSubprocessorByID_Subprocessor{}
	}
	return t.UpdatedBy
}

type GetSubprocessors_Subprocessors_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetSubprocessors_Subprocessors_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetSubprocessors_Subprocessors_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetSubprocessors_Subprocessors_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetSubprocessors_Subprocessors_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetSubprocessors_Subprocessors_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetSubprocessors_Subprocessors_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetSubprocessors_Subprocessors_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetSubprocessors_Subprocessors_PageInfo{}
	}
	return t.StartCursor
}

type GetSubprocessors_Subprocessors_Edges_Node struct {
	CreatedAt       *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string    "json:\"description,omitempty\" graphql:\"description\""
	ID              string     "json:\"id\" graphql:\"id\""
	LogoLocalFileID *string    "json:\"logoLocalFileID,omitempty\" graphql:\"logoLocalFileID\""
	LogoRemoteURL   *string    "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Name            string     "json:\"name\" graphql:\"name\""
	OwnerID         *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SystemOwned     *bool      "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags            []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetSubprocessors_Subprocessors_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetSubprocessors_Subprocessors_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetSubprocessors_Subprocessors_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.Description
}
func (t *GetSubprocessors_Subprocessors_Edges_Node) GetID() string {
	if t == nil {
		t = &GetSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.ID
}
func (t *GetSubprocessors_Subprocessors_Edges_Node) GetLogoLocalFileID() *string {
	if t == nil {
		t = &GetSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.LogoLocalFileID
}
func (t *GetSubprocessors_Subprocessors_Edges_Node) GetLogoRemoteURL() *string {
	if t == nil {
		t = &GetSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.LogoRemoteURL
}
func (t *GetSubprocessors_Subprocessors_Edges_Node) GetName() string {
	if t == nil {
		t = &GetSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.Name
}
func (t *GetSubprocessors_Subprocessors_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetSubprocessors_Subprocessors_Edges_Node) GetSystemOwned() *bool {
	if t == nil {
		t = &GetSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.SystemOwned
}
func (t *GetSubprocessors_Subprocessors_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.Tags
}
func (t *GetSubprocessors_Subprocessors_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetSubprocessors_Subprocessors_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetSubprocessors_Subprocessors_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetSubprocessors_Subprocessors_Edges struct {
	Node *GetSubprocessors_Subprocessors_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetSubprocessors_Subprocessors_Edges) GetNode() *GetSubprocessors_Subprocessors_Edges_Node {
	if t == nil {
		t = &GetSubprocessors_Subprocessors_Edges{}
	}
	return t.Node
}

type GetSubprocessors_Subprocessors struct {
	Edges      []*GetSubprocessors_Subprocessors_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetSubprocessors_Subprocessors_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetSubprocessors_Subprocessors) GetEdges() []*GetSubprocessors_Subprocessors_Edges {
	if t == nil {
		t = &GetSubprocessors_Subprocessors{}
	}
	return t.Edges
}
func (t *GetSubprocessors_Subprocessors) GetPageInfo() *GetSubprocessors_Subprocessors_PageInfo {
	if t == nil {
		t = &GetSubprocessors_Subprocessors{}
	}
	return &t.PageInfo
}
func (t *GetSubprocessors_Subprocessors) GetTotalCount() int64 {
	if t == nil {
		t = &GetSubprocessors_Subprocessors{}
	}
	return t.TotalCount
}

type UpdateSubprocessor_UpdateSubprocessor_Subprocessor struct {
	CreatedAt       *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string    "json:\"description,omitempty\" graphql:\"description\""
	ID              string     "json:\"id\" graphql:\"id\""
	LogoLocalFileID *string    "json:\"logoLocalFileID,omitempty\" graphql:\"logoLocalFileID\""
	LogoRemoteURL   *string    "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Name            string     "json:\"name\" graphql:\"name\""
	OwnerID         *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SystemOwned     *bool      "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags            []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateSubprocessor_UpdateSubprocessor_Subprocessor) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateSubprocessor_UpdateSubprocessor_Subprocessor{}
	}
	return t.CreatedAt
}
func (t *UpdateSubprocessor_UpdateSubprocessor_Subprocessor) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateSubprocessor_UpdateSubprocessor_Subprocessor{}
	}
	return t.CreatedBy
}
func (t *UpdateSubprocessor_UpdateSubprocessor_Subprocessor) GetDescription() *string {
	if t == nil {
		t = &UpdateSubprocessor_UpdateSubprocessor_Subprocessor{}
	}
	return t.Description
}
func (t *UpdateSubprocessor_UpdateSubprocessor_Subprocessor) GetID() string {
	if t == nil {
		t = &UpdateSubprocessor_UpdateSubprocessor_Subprocessor{}
	}
	return t.ID
}
func (t *UpdateSubprocessor_UpdateSubprocessor_Subprocessor) GetLogoLocalFileID() *string {
	if t == nil {
		t = &UpdateSubprocessor_UpdateSubprocessor_Subprocessor{}
	}
	return t.LogoLocalFileID
}
func (t *UpdateSubprocessor_UpdateSubprocessor_Subprocessor) GetLogoRemoteURL() *string {
	if t == nil {
		t = &UpdateSubprocessor_UpdateSubprocessor_Subprocessor{}
	}
	return t.LogoRemoteURL
}
func (t *UpdateSubprocessor_UpdateSubprocessor_Subprocessor) GetName() string {
	if t == nil {
		t = &UpdateSubprocessor_UpdateSubprocessor_Subprocessor{}
	}
	return t.Name
}
func (t *UpdateSubprocessor_UpdateSubprocessor_Subprocessor) GetOwnerID() *string {
	if t == nil {
		t = &UpdateSubprocessor_UpdateSubprocessor_Subprocessor{}
	}
	return t.OwnerID
}
func (t *UpdateSubprocessor_UpdateSubprocessor_Subprocessor) GetSystemOwned() *bool {
	if t == nil {
		t = &UpdateSubprocessor_UpdateSubprocessor_Subprocessor{}
	}
	return t.SystemOwned
}
func (t *UpdateSubprocessor_UpdateSubprocessor_Subprocessor) GetTags() []string {
	if t == nil {
		t = &UpdateSubprocessor_UpdateSubprocessor_Subprocessor{}
	}
	return t.Tags
}
func (t *UpdateSubprocessor_UpdateSubprocessor_Subprocessor) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateSubprocessor_UpdateSubprocessor_Subprocessor{}
	}
	return t.UpdatedAt
}
func (t *UpdateSubprocessor_UpdateSubprocessor_Subprocessor) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateSubprocessor_UpdateSubprocessor_Subprocessor{}
	}
	return t.UpdatedBy
}

type UpdateSubprocessor_UpdateSubprocessor struct {
	Subprocessor UpdateSubprocessor_UpdateSubprocessor_Subprocessor "json:\"subprocessor\" graphql:\"subprocessor\""
}

func (t *UpdateSubprocessor_UpdateSubprocessor) GetSubprocessor() *UpdateSubprocessor_UpdateSubprocessor_Subprocessor {
	if t == nil {
		t = &UpdateSubprocessor_UpdateSubprocessor{}
	}
	return &t.Subprocessor
}

type GetAllSubprocessorHistories_SubprocessorHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllSubprocessorHistories_SubprocessorHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllSubprocessorHistories_SubprocessorHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllSubprocessorHistories_SubprocessorHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllSubprocessorHistories_SubprocessorHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node struct {
	CreatedAt       *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string        "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime     time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID              string         "json:\"id\" graphql:\"id\""
	LogoLocalFileID *string        "json:\"logoLocalFileID,omitempty\" graphql:\"logoLocalFileID\""
	LogoRemoteURL   *string        "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Name            string         "json:\"name\" graphql:\"name\""
	Operation       history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID         *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref             *string        "json:\"ref,omitempty\" graphql:\"ref\""
	SystemOwned     *bool          "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags            []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node) GetLogoLocalFileID() *string {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.LogoLocalFileID
}
func (t *GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node) GetLogoRemoteURL() *string {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.LogoRemoteURL
}
func (t *GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node) GetSystemOwned() *bool {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.SystemOwned
}
func (t *GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllSubprocessorHistories_SubprocessorHistories_Edges struct {
	Node *GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllSubprocessorHistories_SubprocessorHistories_Edges) GetNode() *GetAllSubprocessorHistories_SubprocessorHistories_Edges_Node {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories_Edges{}
	}
	return t.Node
}

type GetAllSubprocessorHistories_SubprocessorHistories struct {
	Edges      []*GetAllSubprocessorHistories_SubprocessorHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllSubprocessorHistories_SubprocessorHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllSubprocessorHistories_SubprocessorHistories) GetEdges() []*GetAllSubprocessorHistories_SubprocessorHistories_Edges {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories{}
	}
	return t.Edges
}
func (t *GetAllSubprocessorHistories_SubprocessorHistories) GetPageInfo() *GetAllSubprocessorHistories_SubprocessorHistories_PageInfo {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllSubprocessorHistories_SubprocessorHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllSubprocessorHistories_SubprocessorHistories{}
	}
	return t.TotalCount
}

type GetSubprocessorHistories_SubprocessorHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetSubprocessorHistories_SubprocessorHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetSubprocessorHistories_SubprocessorHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetSubprocessorHistories_SubprocessorHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetSubprocessorHistories_SubprocessorHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetSubprocessorHistories_SubprocessorHistories_Edges_Node struct {
	CreatedAt       *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string        "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime     time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID              string         "json:\"id\" graphql:\"id\""
	LogoLocalFileID *string        "json:\"logoLocalFileID,omitempty\" graphql:\"logoLocalFileID\""
	LogoRemoteURL   *string        "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Name            string         "json:\"name\" graphql:\"name\""
	Operation       history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID         *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref             *string        "json:\"ref,omitempty\" graphql:\"ref\""
	SystemOwned     *bool          "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags            []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetSubprocessorHistories_SubprocessorHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetSubprocessorHistories_SubprocessorHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetSubprocessorHistories_SubprocessorHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetSubprocessorHistories_SubprocessorHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetSubprocessorHistories_SubprocessorHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetSubprocessorHistories_SubprocessorHistories_Edges_Node) GetLogoLocalFileID() *string {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.LogoLocalFileID
}
func (t *GetSubprocessorHistories_SubprocessorHistories_Edges_Node) GetLogoRemoteURL() *string {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.LogoRemoteURL
}
func (t *GetSubprocessorHistories_SubprocessorHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetSubprocessorHistories_SubprocessorHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetSubprocessorHistories_SubprocessorHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetSubprocessorHistories_SubprocessorHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetSubprocessorHistories_SubprocessorHistories_Edges_Node) GetSystemOwned() *bool {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.SystemOwned
}
func (t *GetSubprocessorHistories_SubprocessorHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetSubprocessorHistories_SubprocessorHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetSubprocessorHistories_SubprocessorHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetSubprocessorHistories_SubprocessorHistories_Edges struct {
	Node *GetSubprocessorHistories_SubprocessorHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetSubprocessorHistories_SubprocessorHistories_Edges) GetNode() *GetSubprocessorHistories_SubprocessorHistories_Edges_Node {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories_Edges{}
	}
	return t.Node
}

type GetSubprocessorHistories_SubprocessorHistories struct {
	Edges      []*GetSubprocessorHistories_SubprocessorHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetSubprocessorHistories_SubprocessorHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetSubprocessorHistories_SubprocessorHistories) GetEdges() []*GetSubprocessorHistories_SubprocessorHistories_Edges {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories{}
	}
	return t.Edges
}
func (t *GetSubprocessorHistories_SubprocessorHistories) GetPageInfo() *GetSubprocessorHistories_SubprocessorHistories_PageInfo {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories{}
	}
	return &t.PageInfo
}
func (t *GetSubprocessorHistories_SubprocessorHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetSubprocessorHistories_SubprocessorHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers struct {
	Active        bool   "json:\"active\" graphql:\"active\""
	Email         string "json:\"email\" graphql:\"email\""
	ID            string "json:\"id\" graphql:\"id\""
	Unsubscribed  bool   "json:\"unsubscribed\" graphql:\"unsubscribed\""
	VerifiedEmail bool   "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers) GetActive() bool {
	if t == nil {
		t = &CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers{}
	}
	return t.Active
}
func (t *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers) GetEmail() string {
	if t == nil {
		t = &CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers{}
	}
	return t.Email
}
func (t *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers) GetID() string {
	if t == nil {
		t = &CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers{}
	}
	return t.ID
}
func (t *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers) GetUnsubscribed() bool {
	if t == nil {
		t = &CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers{}
	}
	return t.Unsubscribed
}
func (t *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers) GetVerifiedEmail() bool {
	if t == nil {
		t = &CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers{}
	}
	return t.VerifiedEmail
}

type CreateBulkCSVSubscriber_CreateBulkCSVSubscriber struct {
	Subscribers []*CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers "json:\"subscribers,omitempty\" graphql:\"subscribers\""
}

func (t *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber) GetSubscribers() []*CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers {
	if t == nil {
		t = &CreateBulkCSVSubscriber_CreateBulkCSVSubscriber{}
	}
	return t.Subscribers
}

type CreateBulkSubscriber_CreateBulkSubscriber_Subscribers struct {
	Active        bool   "json:\"active\" graphql:\"active\""
	Email         string "json:\"email\" graphql:\"email\""
	ID            string "json:\"id\" graphql:\"id\""
	Unsubscribed  bool   "json:\"unsubscribed\" graphql:\"unsubscribed\""
	VerifiedEmail bool   "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *CreateBulkSubscriber_CreateBulkSubscriber_Subscribers) GetActive() bool {
	if t == nil {
		t = &CreateBulkSubscriber_CreateBulkSubscriber_Subscribers{}
	}
	return t.Active
}
func (t *CreateBulkSubscriber_CreateBulkSubscriber_Subscribers) GetEmail() string {
	if t == nil {
		t = &CreateBulkSubscriber_CreateBulkSubscriber_Subscribers{}
	}
	return t.Email
}
func (t *CreateBulkSubscriber_CreateBulkSubscriber_Subscribers) GetID() string {
	if t == nil {
		t = &CreateBulkSubscriber_CreateBulkSubscriber_Subscribers{}
	}
	return t.ID
}
func (t *CreateBulkSubscriber_CreateBulkSubscriber_Subscribers) GetUnsubscribed() bool {
	if t == nil {
		t = &CreateBulkSubscriber_CreateBulkSubscriber_Subscribers{}
	}
	return t.Unsubscribed
}
func (t *CreateBulkSubscriber_CreateBulkSubscriber_Subscribers) GetVerifiedEmail() bool {
	if t == nil {
		t = &CreateBulkSubscriber_CreateBulkSubscriber_Subscribers{}
	}
	return t.VerifiedEmail
}

type CreateBulkSubscriber_CreateBulkSubscriber struct {
	Subscribers []*CreateBulkSubscriber_CreateBulkSubscriber_Subscribers "json:\"subscribers,omitempty\" graphql:\"subscribers\""
}

func (t *CreateBulkSubscriber_CreateBulkSubscriber) GetSubscribers() []*CreateBulkSubscriber_CreateBulkSubscriber_Subscribers {
	if t == nil {
		t = &CreateBulkSubscriber_CreateBulkSubscriber{}
	}
	return t.Subscribers
}

type CreateSubscriber_CreateSubscriber_Subscriber struct {
	Active        bool       "json:\"active\" graphql:\"active\""
	CreatedAt     *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email         string     "json:\"email\" graphql:\"email\""
	ID            string     "json:\"id\" graphql:\"id\""
	Unsubscribed  bool       "json:\"unsubscribed\" graphql:\"unsubscribed\""
	UpdatedAt     *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerifiedEmail bool       "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetActive() bool {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.Active
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.CreatedAt
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetCreatedBy() *string {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.CreatedBy
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetEmail() string {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.Email
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetID() string {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.ID
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetUnsubscribed() bool {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.Unsubscribed
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.UpdatedAt
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.UpdatedBy
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetVerifiedEmail() bool {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.VerifiedEmail
}

type CreateSubscriber_CreateSubscriber struct {
	Subscriber CreateSubscriber_CreateSubscriber_Subscriber "json:\"subscriber\" graphql:\"subscriber\""
}

func (t *CreateSubscriber_CreateSubscriber) GetSubscriber() *CreateSubscriber_CreateSubscriber_Subscriber {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber{}
	}
	return &t.Subscriber
}

type DeleteSubscriber_DeleteSubscriber struct {
	Email string "json:\"email\" graphql:\"email\""
}

func (t *DeleteSubscriber_DeleteSubscriber) GetEmail() string {
	if t == nil {
		t = &DeleteSubscriber_DeleteSubscriber{}
	}
	return t.Email
}

type GetAllSubscribers_Subscribers_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllSubscribers_Subscribers_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllSubscribers_Subscribers_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllSubscribers_Subscribers_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllSubscribers_Subscribers_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_PageInfo{}
	}
	return t.StartCursor
}

type GetAllSubscribers_Subscribers_Edges_Node struct {
	Active        bool    "json:\"active\" graphql:\"active\""
	Email         string  "json:\"email\" graphql:\"email\""
	ID            string  "json:\"id\" graphql:\"id\""
	OwnerID       *string "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SendAttempts  int64   "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Unsubscribed  bool    "json:\"unsubscribed\" graphql:\"unsubscribed\""
	VerifiedEmail bool    "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *GetAllSubscribers_Subscribers_Edges_Node) GetActive() bool {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.Active
}
func (t *GetAllSubscribers_Subscribers_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.Email
}
func (t *GetAllSubscribers_Subscribers_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllSubscribers_Subscribers_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllSubscribers_Subscribers_Edges_Node) GetSendAttempts() int64 {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.SendAttempts
}
func (t *GetAllSubscribers_Subscribers_Edges_Node) GetUnsubscribed() bool {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.Unsubscribed
}
func (t *GetAllSubscribers_Subscribers_Edges_Node) GetVerifiedEmail() bool {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.VerifiedEmail
}

type GetAllSubscribers_Subscribers_Edges struct {
	Node *GetAllSubscribers_Subscribers_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllSubscribers_Subscribers_Edges) GetNode() *GetAllSubscribers_Subscribers_Edges_Node {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges{}
	}
	return t.Node
}

type GetAllSubscribers_Subscribers struct {
	Edges      []*GetAllSubscribers_Subscribers_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllSubscribers_Subscribers_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllSubscribers_Subscribers) GetEdges() []*GetAllSubscribers_Subscribers_Edges {
	if t == nil {
		t = &GetAllSubscribers_Subscribers{}
	}
	return t.Edges
}
func (t *GetAllSubscribers_Subscribers) GetPageInfo() *GetAllSubscribers_Subscribers_PageInfo {
	if t == nil {
		t = &GetAllSubscribers_Subscribers{}
	}
	return &t.PageInfo
}
func (t *GetAllSubscribers_Subscribers) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllSubscribers_Subscribers{}
	}
	return t.TotalCount
}

type GetSubscriberByEmail_Subscriber struct {
	Active        bool    "json:\"active\" graphql:\"active\""
	Email         string  "json:\"email\" graphql:\"email\""
	ID            string  "json:\"id\" graphql:\"id\""
	OwnerID       *string "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SendAttempts  int64   "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Unsubscribed  bool    "json:\"unsubscribed\" graphql:\"unsubscribed\""
	VerifiedEmail bool    "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *GetSubscriberByEmail_Subscriber) GetActive() bool {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.Active
}
func (t *GetSubscriberByEmail_Subscriber) GetEmail() string {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.Email
}
func (t *GetSubscriberByEmail_Subscriber) GetID() string {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.ID
}
func (t *GetSubscriberByEmail_Subscriber) GetOwnerID() *string {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.OwnerID
}
func (t *GetSubscriberByEmail_Subscriber) GetSendAttempts() int64 {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.SendAttempts
}
func (t *GetSubscriberByEmail_Subscriber) GetUnsubscribed() bool {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.Unsubscribed
}
func (t *GetSubscriberByEmail_Subscriber) GetVerifiedEmail() bool {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.VerifiedEmail
}

type GetSubscribers_Subscribers_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetSubscribers_Subscribers_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetSubscribers_Subscribers_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetSubscribers_Subscribers_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetSubscribers_Subscribers_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetSubscribers_Subscribers_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetSubscribers_Subscribers_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetSubscribers_Subscribers_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetSubscribers_Subscribers_PageInfo{}
	}
	return t.StartCursor
}

type GetSubscribers_Subscribers_Edges_Node struct {
	Active        bool    "json:\"active\" graphql:\"active\""
	Email         string  "json:\"email\" graphql:\"email\""
	ID            string  "json:\"id\" graphql:\"id\""
	OwnerID       *string "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SendAttempts  int64   "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Unsubscribed  bool    "json:\"unsubscribed\" graphql:\"unsubscribed\""
	VerifiedEmail bool    "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *GetSubscribers_Subscribers_Edges_Node) GetActive() bool {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.Active
}
func (t *GetSubscribers_Subscribers_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.Email
}
func (t *GetSubscribers_Subscribers_Edges_Node) GetID() string {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.ID
}
func (t *GetSubscribers_Subscribers_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetSubscribers_Subscribers_Edges_Node) GetSendAttempts() int64 {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.SendAttempts
}
func (t *GetSubscribers_Subscribers_Edges_Node) GetUnsubscribed() bool {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.Unsubscribed
}
func (t *GetSubscribers_Subscribers_Edges_Node) GetVerifiedEmail() bool {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.VerifiedEmail
}

type GetSubscribers_Subscribers_Edges struct {
	Node *GetSubscribers_Subscribers_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetSubscribers_Subscribers_Edges) GetNode() *GetSubscribers_Subscribers_Edges_Node {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges{}
	}
	return t.Node
}

type GetSubscribers_Subscribers struct {
	Edges      []*GetSubscribers_Subscribers_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetSubscribers_Subscribers_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetSubscribers_Subscribers) GetEdges() []*GetSubscribers_Subscribers_Edges {
	if t == nil {
		t = &GetSubscribers_Subscribers{}
	}
	return t.Edges
}
func (t *GetSubscribers_Subscribers) GetPageInfo() *GetSubscribers_Subscribers_PageInfo {
	if t == nil {
		t = &GetSubscribers_Subscribers{}
	}
	return &t.PageInfo
}
func (t *GetSubscribers_Subscribers) GetTotalCount() int64 {
	if t == nil {
		t = &GetSubscribers_Subscribers{}
	}
	return t.TotalCount
}

type UpdateSubscriber_UpdateSubscriber_Subscriber struct {
	Active        bool       "json:\"active\" graphql:\"active\""
	CreatedAt     *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email         string     "json:\"email\" graphql:\"email\""
	ID            string     "json:\"id\" graphql:\"id\""
	PhoneNumber   *string    "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Unsubscribed  bool       "json:\"unsubscribed\" graphql:\"unsubscribed\""
	UpdatedAt     *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerifiedEmail bool       "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
	VerifiedPhone bool       "json:\"verifiedPhone\" graphql:\"verifiedPhone\""
}

func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetActive() bool {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.Active
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.CreatedAt
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.CreatedBy
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetEmail() string {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.Email
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetID() string {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.ID
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetPhoneNumber() *string {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.PhoneNumber
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetUnsubscribed() bool {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.Unsubscribed
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.UpdatedAt
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.UpdatedBy
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetVerifiedEmail() bool {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.VerifiedEmail
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetVerifiedPhone() bool {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.VerifiedPhone
}

type UpdateSubscriber_UpdateSubscriber struct {
	Subscriber UpdateSubscriber_UpdateSubscriber_Subscriber "json:\"subscriber\" graphql:\"subscriber\""
}

func (t *UpdateSubscriber_UpdateSubscriber) GetSubscriber() *UpdateSubscriber_UpdateSubscriber_Subscriber {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber{}
	}
	return &t.Subscriber
}

type CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee{}
	}
	return t.DisplayName
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee) GetID() string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee{}
	}
	return t.ID
}

type CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner{}
	}
	return t.DisplayName
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner) GetID() string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner{}
	}
	return t.ID
}

type CreateBulkCSVTask_CreateBulkCSVTask_Tasks struct {
	Assignee   *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	AssigneeID *string                                             "json:\"assigneeID,omitempty\" graphql:\"assigneeID\""
	Assigner   *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner "json:\"assigner,omitempty\" graphql:\"assigner\""
	AssignerID *string                                             "json:\"assignerID,omitempty\" graphql:\"assignerID\""
	Category   *string                                             "json:\"category,omitempty\" graphql:\"category\""
	Completed  *models.DateTime                                    "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt  *time.Time                                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string                                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details    *string                                             "json:\"details,omitempty\" graphql:\"details\""
	DisplayID  string                                              "json:\"displayID\" graphql:\"displayID\""
	Due        *models.DateTime                                    "json:\"due,omitempty\" graphql:\"due\""
	ID         string                                              "json:\"id\" graphql:\"id\""
	OwnerID    *string                                             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status     enums.TaskStatus                                    "json:\"status\" graphql:\"status\""
	Tags       []string                                            "json:\"tags,omitempty\" graphql:\"tags\""
	Title      string                                              "json:\"title\" graphql:\"title\""
	UpdatedAt  *time.Time                                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string                                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetAssignee() *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Assignee
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetAssigneeID() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.AssigneeID
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetAssigner() *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Assigner
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetAssignerID() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.AssignerID
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetCategory() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Category
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetCompleted() *models.DateTime {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Completed
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetDetails() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Details
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.DisplayID
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetDue() *models.DateTime {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Due
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetID() string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.ID
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return &t.Status
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Tags
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetTitle() string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Title
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVTask_CreateBulkCSVTask struct {
	Tasks []*CreateBulkCSVTask_CreateBulkCSVTask_Tasks "json:\"tasks,omitempty\" graphql:\"tasks\""
}

func (t *CreateBulkCSVTask_CreateBulkCSVTask) GetTasks() []*CreateBulkCSVTask_CreateBulkCSVTask_Tasks {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask{}
	}
	return t.Tasks
}

type CreateBulkTask_CreateBulkTask_Tasks_Assignee struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkTask_CreateBulkTask_Tasks_Assignee) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Assignee{}
	}
	return t.DisplayName
}
func (t *CreateBulkTask_CreateBulkTask_Tasks_Assignee) GetID() string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Assignee{}
	}
	return t.ID
}

type CreateBulkTask_CreateBulkTask_Tasks_Assigner struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkTask_CreateBulkTask_Tasks_Assigner) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Assigner{}
	}
	return t.DisplayName
}
func (t *CreateBulkTask_CreateBulkTask_Tasks_Assigner) GetID() string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Assigner{}
	}
	return t.ID
}

type CreateBulkTask_CreateBulkTask_Tasks struct {
	Assignee   *CreateBulkTask_CreateBulkTask_Tasks_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	AssigneeID *string                                       "json:\"assigneeID,omitempty\" graphql:\"assigneeID\""
	Assigner   *CreateBulkTask_CreateBulkTask_Tasks_Assigner "json:\"assigner,omitempty\" graphql:\"assigner\""
	AssignerID *string                                       "json:\"assignerID,omitempty\" graphql:\"assignerID\""
	Category   *string                                       "json:\"category,omitempty\" graphql:\"category\""
	Completed  *models.DateTime                              "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt  *time.Time                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details    *string                                       "json:\"details,omitempty\" graphql:\"details\""
	DisplayID  string                                        "json:\"displayID\" graphql:\"displayID\""
	Due        *models.DateTime                              "json:\"due,omitempty\" graphql:\"due\""
	ID         string                                        "json:\"id\" graphql:\"id\""
	OwnerID    *string                                       "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status     enums.TaskStatus                              "json:\"status\" graphql:\"status\""
	Tags       []string                                      "json:\"tags,omitempty\" graphql:\"tags\""
	Title      string                                        "json:\"title\" graphql:\"title\""
	UpdatedAt  *time.Time                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkTask_CreateBulkTask_Tasks) GetAssignee() *CreateBulkTask_CreateBulkTask_Tasks_Assignee {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Assignee
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetAssigneeID() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.AssigneeID
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetAssigner() *CreateBulkTask_CreateBulkTask_Tasks_Assigner {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Assigner
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetAssignerID() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.AssignerID
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetCategory() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Category
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetCompleted() *models.DateTime {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Completed
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.CreatedAt
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.CreatedBy
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetDetails() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Details
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.DisplayID
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetDue() *models.DateTime {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Due
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetID() string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.ID
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.OwnerID
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return &t.Status
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetTags() []string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Tags
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetTitle() string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Title
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.UpdatedBy
}

type CreateBulkTask_CreateBulkTask struct {
	Tasks []*CreateBulkTask_CreateBulkTask_Tasks "json:\"tasks,omitempty\" graphql:\"tasks\""
}

func (t *CreateBulkTask_CreateBulkTask) GetTasks() []*CreateBulkTask_CreateBulkTask_Tasks {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask{}
	}
	return t.Tasks
}

type CreateTask_CreateTask_Task_Assignee struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
}

func (t *CreateTask_CreateTask_Task_Assignee) GetDisplayName() string {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Assignee{}
	}
	return t.DisplayName
}
func (t *CreateTask_CreateTask_Task_Assignee) GetID() string {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Assignee{}
	}
	return t.ID
}

type CreateTask_CreateTask_Task_Assigner struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
}

func (t *CreateTask_CreateTask_Task_Assigner) GetDisplayName() string {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Assigner{}
	}
	return t.DisplayName
}
func (t *CreateTask_CreateTask_Task_Assigner) GetID() string {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Assigner{}
	}
	return t.ID
}

type CreateTask_CreateTask_Task struct {
	Assignee   *CreateTask_CreateTask_Task_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	AssigneeID *string                              "json:\"assigneeID,omitempty\" graphql:\"assigneeID\""
	Assigner   *CreateTask_CreateTask_Task_Assigner "json:\"assigner,omitempty\" graphql:\"assigner\""
	AssignerID *string                              "json:\"assignerID,omitempty\" graphql:\"assignerID\""
	Category   *string                              "json:\"category,omitempty\" graphql:\"category\""
	Completed  *models.DateTime                     "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt  *time.Time                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string                              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details    *string                              "json:\"details,omitempty\" graphql:\"details\""
	DisplayID  string                               "json:\"displayID\" graphql:\"displayID\""
	Due        *models.DateTime                     "json:\"due,omitempty\" graphql:\"due\""
	ID         string                               "json:\"id\" graphql:\"id\""
	OwnerID    *string                              "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status     enums.TaskStatus                     "json:\"status\" graphql:\"status\""
	Tags       []string                             "json:\"tags,omitempty\" graphql:\"tags\""
	Title      string                               "json:\"title\" graphql:\"title\""
	UpdatedAt  *time.Time                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string                              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateTask_CreateTask_Task) GetAssignee() *CreateTask_CreateTask_Task_Assignee {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Assignee
}
func (t *CreateTask_CreateTask_Task) GetAssigneeID() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.AssigneeID
}
func (t *CreateTask_CreateTask_Task) GetAssigner() *CreateTask_CreateTask_Task_Assigner {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Assigner
}
func (t *CreateTask_CreateTask_Task) GetAssignerID() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.AssignerID
}
func (t *CreateTask_CreateTask_Task) GetCategory() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Category
}
func (t *CreateTask_CreateTask_Task) GetCompleted() *models.DateTime {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Completed
}
func (t *CreateTask_CreateTask_Task) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.CreatedAt
}
func (t *CreateTask_CreateTask_Task) GetCreatedBy() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.CreatedBy
}
func (t *CreateTask_CreateTask_Task) GetDetails() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Details
}
func (t *CreateTask_CreateTask_Task) GetDisplayID() string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.DisplayID
}
func (t *CreateTask_CreateTask_Task) GetDue() *models.DateTime {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Due
}
func (t *CreateTask_CreateTask_Task) GetID() string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.ID
}
func (t *CreateTask_CreateTask_Task) GetOwnerID() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.OwnerID
}
func (t *CreateTask_CreateTask_Task) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return &t.Status
}
func (t *CreateTask_CreateTask_Task) GetTags() []string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Tags
}
func (t *CreateTask_CreateTask_Task) GetTitle() string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Title
}
func (t *CreateTask_CreateTask_Task) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.UpdatedAt
}
func (t *CreateTask_CreateTask_Task) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.UpdatedBy
}

type CreateTask_CreateTask struct {
	Task CreateTask_CreateTask_Task "json:\"task\" graphql:\"task\""
}

func (t *CreateTask_CreateTask) GetTask() *CreateTask_CreateTask_Task {
	if t == nil {
		t = &CreateTask_CreateTask{}
	}
	return &t.Task
}

type DeleteTask_DeleteTask struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteTask_DeleteTask) GetDeletedID() string {
	if t == nil {
		t = &DeleteTask_DeleteTask{}
	}
	return t.DeletedID
}

type GetAllTasks_Tasks_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllTasks_Tasks_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllTasks_Tasks_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllTasks_Tasks_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllTasks_Tasks_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllTasks_Tasks_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllTasks_Tasks_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_PageInfo{}
	}
	return t.StartCursor
}

type GetAllTasks_Tasks_Edges_Node_Assignee struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
}

func (t *GetAllTasks_Tasks_Edges_Node_Assignee) GetDisplayName() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Assignee{}
	}
	return t.DisplayName
}
func (t *GetAllTasks_Tasks_Edges_Node_Assignee) GetID() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Assignee{}
	}
	return t.ID
}

type GetAllTasks_Tasks_Edges_Node_Assigner struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
}

func (t *GetAllTasks_Tasks_Edges_Node_Assigner) GetDisplayName() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Assigner{}
	}
	return t.DisplayName
}
func (t *GetAllTasks_Tasks_Edges_Node_Assigner) GetID() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Assigner{}
	}
	return t.ID
}

type GetAllTasks_Tasks_Edges_Node struct {
	Assignee   *GetAllTasks_Tasks_Edges_Node_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	AssigneeID *string                                "json:\"assigneeID,omitempty\" graphql:\"assigneeID\""
	Assigner   *GetAllTasks_Tasks_Edges_Node_Assigner "json:\"assigner,omitempty\" graphql:\"assigner\""
	AssignerID *string                                "json:\"assignerID,omitempty\" graphql:\"assignerID\""
	Category   *string                                "json:\"category,omitempty\" graphql:\"category\""
	Completed  *models.DateTime                       "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt  *time.Time                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details    *string                                "json:\"details,omitempty\" graphql:\"details\""
	DisplayID  string                                 "json:\"displayID\" graphql:\"displayID\""
	Due        *models.DateTime                       "json:\"due,omitempty\" graphql:\"due\""
	ID         string                                 "json:\"id\" graphql:\"id\""
	OwnerID    *string                                "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status     enums.TaskStatus                       "json:\"status\" graphql:\"status\""
	Tags       []string                               "json:\"tags,omitempty\" graphql:\"tags\""
	Title      string                                 "json:\"title\" graphql:\"title\""
	UpdatedAt  *time.Time                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTasks_Tasks_Edges_Node) GetAssignee() *GetAllTasks_Tasks_Edges_Node_Assignee {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Assignee
}
func (t *GetAllTasks_Tasks_Edges_Node) GetAssigneeID() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.AssigneeID
}
func (t *GetAllTasks_Tasks_Edges_Node) GetAssigner() *GetAllTasks_Tasks_Edges_Node_Assigner {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Assigner
}
func (t *GetAllTasks_Tasks_Edges_Node) GetAssignerID() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.AssignerID
}
func (t *GetAllTasks_Tasks_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllTasks_Tasks_Edges_Node) GetCompleted() *models.DateTime {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Completed
}
func (t *GetAllTasks_Tasks_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTasks_Tasks_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTasks_Tasks_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllTasks_Tasks_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllTasks_Tasks_Edges_Node) GetDue() *models.DateTime {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Due
}
func (t *GetAllTasks_Tasks_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTasks_Tasks_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllTasks_Tasks_Edges_Node) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllTasks_Tasks_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllTasks_Tasks_Edges_Node) GetTitle() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Title
}
func (t *GetAllTasks_Tasks_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTasks_Tasks_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTasks_Tasks_Edges struct {
	Node *GetAllTasks_Tasks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTasks_Tasks_Edges) GetNode() *GetAllTasks_Tasks_Edges_Node {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges{}
	}
	return t.Node
}

type GetAllTasks_Tasks struct {
	Edges      []*GetAllTasks_Tasks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllTasks_Tasks_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllTasks_Tasks) GetEdges() []*GetAllTasks_Tasks_Edges {
	if t == nil {
		t = &GetAllTasks_Tasks{}
	}
	return t.Edges
}
func (t *GetAllTasks_Tasks) GetPageInfo() *GetAllTasks_Tasks_PageInfo {
	if t == nil {
		t = &GetAllTasks_Tasks{}
	}
	return &t.PageInfo
}
func (t *GetAllTasks_Tasks) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllTasks_Tasks{}
	}
	return t.TotalCount
}

type GetTaskByID_Task_Assignee struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
}

func (t *GetTaskByID_Task_Assignee) GetDisplayName() string {
	if t == nil {
		t = &GetTaskByID_Task_Assignee{}
	}
	return t.DisplayName
}
func (t *GetTaskByID_Task_Assignee) GetID() string {
	if t == nil {
		t = &GetTaskByID_Task_Assignee{}
	}
	return t.ID
}

type GetTaskByID_Task_Assigner struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
}

func (t *GetTaskByID_Task_Assigner) GetDisplayName() string {
	if t == nil {
		t = &GetTaskByID_Task_Assigner{}
	}
	return t.DisplayName
}
func (t *GetTaskByID_Task_Assigner) GetID() string {
	if t == nil {
		t = &GetTaskByID_Task_Assigner{}
	}
	return t.ID
}

type GetTaskByID_Task struct {
	Assignee   *GetTaskByID_Task_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	AssigneeID *string                    "json:\"assigneeID,omitempty\" graphql:\"assigneeID\""
	Assigner   *GetTaskByID_Task_Assigner "json:\"assigner,omitempty\" graphql:\"assigner\""
	AssignerID *string                    "json:\"assignerID,omitempty\" graphql:\"assignerID\""
	Category   *string                    "json:\"category,omitempty\" graphql:\"category\""
	Completed  *models.DateTime           "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt  *time.Time                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details    *string                    "json:\"details,omitempty\" graphql:\"details\""
	DisplayID  string                     "json:\"displayID\" graphql:\"displayID\""
	Due        *models.DateTime           "json:\"due,omitempty\" graphql:\"due\""
	ID         string                     "json:\"id\" graphql:\"id\""
	OwnerID    *string                    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status     enums.TaskStatus           "json:\"status\" graphql:\"status\""
	Tags       []string                   "json:\"tags,omitempty\" graphql:\"tags\""
	Title      string                     "json:\"title\" graphql:\"title\""
	UpdatedAt  *time.Time                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTaskByID_Task) GetAssignee() *GetTaskByID_Task_Assignee {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Assignee
}
func (t *GetTaskByID_Task) GetAssigneeID() *string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.AssigneeID
}
func (t *GetTaskByID_Task) GetAssigner() *GetTaskByID_Task_Assigner {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Assigner
}
func (t *GetTaskByID_Task) GetAssignerID() *string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.AssignerID
}
func (t *GetTaskByID_Task) GetCategory() *string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Category
}
func (t *GetTaskByID_Task) GetCompleted() *models.DateTime {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Completed
}
func (t *GetTaskByID_Task) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.CreatedAt
}
func (t *GetTaskByID_Task) GetCreatedBy() *string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.CreatedBy
}
func (t *GetTaskByID_Task) GetDetails() *string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Details
}
func (t *GetTaskByID_Task) GetDisplayID() string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.DisplayID
}
func (t *GetTaskByID_Task) GetDue() *models.DateTime {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Due
}
func (t *GetTaskByID_Task) GetID() string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.ID
}
func (t *GetTaskByID_Task) GetOwnerID() *string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.OwnerID
}
func (t *GetTaskByID_Task) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return &t.Status
}
func (t *GetTaskByID_Task) GetTags() []string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Tags
}
func (t *GetTaskByID_Task) GetTitle() string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Title
}
func (t *GetTaskByID_Task) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.UpdatedAt
}
func (t *GetTaskByID_Task) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.UpdatedBy
}

type GetTasks_Tasks_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetTasks_Tasks_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetTasks_Tasks_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetTasks_Tasks_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetTasks_Tasks_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetTasks_Tasks_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetTasks_Tasks_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetTasks_Tasks_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetTasks_Tasks_PageInfo{}
	}
	return t.StartCursor
}

type GetTasks_Tasks_Edges_Node_Assignee struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
}

func (t *GetTasks_Tasks_Edges_Node_Assignee) GetDisplayName() string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Assignee{}
	}
	return t.DisplayName
}
func (t *GetTasks_Tasks_Edges_Node_Assignee) GetID() string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Assignee{}
	}
	return t.ID
}

type GetTasks_Tasks_Edges_Node_Assigner struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
}

func (t *GetTasks_Tasks_Edges_Node_Assigner) GetDisplayName() string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Assigner{}
	}
	return t.DisplayName
}
func (t *GetTasks_Tasks_Edges_Node_Assigner) GetID() string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Assigner{}
	}
	return t.ID
}

type GetTasks_Tasks_Edges_Node struct {
	Assignee   *GetTasks_Tasks_Edges_Node_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	AssigneeID *string                             "json:\"assigneeID,omitempty\" graphql:\"assigneeID\""
	Assigner   *GetTasks_Tasks_Edges_Node_Assigner "json:\"assigner,omitempty\" graphql:\"assigner\""
	AssignerID *string                             "json:\"assignerID,omitempty\" graphql:\"assignerID\""
	Category   *string                             "json:\"category,omitempty\" graphql:\"category\""
	Completed  *models.DateTime                    "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt  *time.Time                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details    *string                             "json:\"details,omitempty\" graphql:\"details\""
	DisplayID  string                              "json:\"displayID\" graphql:\"displayID\""
	Due        *models.DateTime                    "json:\"due,omitempty\" graphql:\"due\""
	ID         string                              "json:\"id\" graphql:\"id\""
	OwnerID    *string                             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status     enums.TaskStatus                    "json:\"status\" graphql:\"status\""
	Tags       []string                            "json:\"tags,omitempty\" graphql:\"tags\""
	Title      string                              "json:\"title\" graphql:\"title\""
	UpdatedAt  *time.Time                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTasks_Tasks_Edges_Node) GetAssignee() *GetTasks_Tasks_Edges_Node_Assignee {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Assignee
}
func (t *GetTasks_Tasks_Edges_Node) GetAssigneeID() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.AssigneeID
}
func (t *GetTasks_Tasks_Edges_Node) GetAssigner() *GetTasks_Tasks_Edges_Node_Assigner {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Assigner
}
func (t *GetTasks_Tasks_Edges_Node) GetAssignerID() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.AssignerID
}
func (t *GetTasks_Tasks_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Category
}
func (t *GetTasks_Tasks_Edges_Node) GetCompleted() *models.DateTime {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Completed
}
func (t *GetTasks_Tasks_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTasks_Tasks_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTasks_Tasks_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Details
}
func (t *GetTasks_Tasks_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetTasks_Tasks_Edges_Node) GetDue() *models.DateTime {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Due
}
func (t *GetTasks_Tasks_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.ID
}
func (t *GetTasks_Tasks_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetTasks_Tasks_Edges_Node) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return &t.Status
}
func (t *GetTasks_Tasks_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Tags
}
func (t *GetTasks_Tasks_Edges_Node) GetTitle() string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Title
}
func (t *GetTasks_Tasks_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTasks_Tasks_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTasks_Tasks_Edges struct {
	Node *GetTasks_Tasks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTasks_Tasks_Edges) GetNode() *GetTasks_Tasks_Edges_Node {
	if t == nil {
		t = &GetTasks_Tasks_Edges{}
	}
	return t.Node
}

type GetTasks_Tasks struct {
	Edges      []*GetTasks_Tasks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetTasks_Tasks_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetTasks_Tasks) GetEdges() []*GetTasks_Tasks_Edges {
	if t == nil {
		t = &GetTasks_Tasks{}
	}
	return t.Edges
}
func (t *GetTasks_Tasks) GetPageInfo() *GetTasks_Tasks_PageInfo {
	if t == nil {
		t = &GetTasks_Tasks{}
	}
	return &t.PageInfo
}
func (t *GetTasks_Tasks) GetTotalCount() int64 {
	if t == nil {
		t = &GetTasks_Tasks{}
	}
	return t.TotalCount
}

type UpdateTask_UpdateTask_Task_Assignee struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
}

func (t *UpdateTask_UpdateTask_Task_Assignee) GetDisplayName() string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Assignee{}
	}
	return t.DisplayName
}
func (t *UpdateTask_UpdateTask_Task_Assignee) GetID() string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Assignee{}
	}
	return t.ID
}

type UpdateTask_UpdateTask_Task_Assigner struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
}

func (t *UpdateTask_UpdateTask_Task_Assigner) GetDisplayName() string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Assigner{}
	}
	return t.DisplayName
}
func (t *UpdateTask_UpdateTask_Task_Assigner) GetID() string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Assigner{}
	}
	return t.ID
}

type UpdateTask_UpdateTask_Task struct {
	Assignee   *UpdateTask_UpdateTask_Task_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	AssigneeID *string                              "json:\"assigneeID,omitempty\" graphql:\"assigneeID\""
	Assigner   *UpdateTask_UpdateTask_Task_Assigner "json:\"assigner,omitempty\" graphql:\"assigner\""
	AssignerID *string                              "json:\"assignerID,omitempty\" graphql:\"assignerID\""
	Category   *string                              "json:\"category,omitempty\" graphql:\"category\""
	Completed  *models.DateTime                     "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt  *time.Time                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string                              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details    *string                              "json:\"details,omitempty\" graphql:\"details\""
	DisplayID  string                               "json:\"displayID\" graphql:\"displayID\""
	Due        *models.DateTime                     "json:\"due,omitempty\" graphql:\"due\""
	ID         string                               "json:\"id\" graphql:\"id\""
	OwnerID    *string                              "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status     enums.TaskStatus                     "json:\"status\" graphql:\"status\""
	Tags       []string                             "json:\"tags,omitempty\" graphql:\"tags\""
	Title      string                               "json:\"title\" graphql:\"title\""
	UpdatedAt  *time.Time                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string                              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateTask_UpdateTask_Task) GetAssignee() *UpdateTask_UpdateTask_Task_Assignee {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Assignee
}
func (t *UpdateTask_UpdateTask_Task) GetAssigneeID() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.AssigneeID
}
func (t *UpdateTask_UpdateTask_Task) GetAssigner() *UpdateTask_UpdateTask_Task_Assigner {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Assigner
}
func (t *UpdateTask_UpdateTask_Task) GetAssignerID() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.AssignerID
}
func (t *UpdateTask_UpdateTask_Task) GetCategory() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Category
}
func (t *UpdateTask_UpdateTask_Task) GetCompleted() *models.DateTime {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Completed
}
func (t *UpdateTask_UpdateTask_Task) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.CreatedAt
}
func (t *UpdateTask_UpdateTask_Task) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.CreatedBy
}
func (t *UpdateTask_UpdateTask_Task) GetDetails() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Details
}
func (t *UpdateTask_UpdateTask_Task) GetDisplayID() string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.DisplayID
}
func (t *UpdateTask_UpdateTask_Task) GetDue() *models.DateTime {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Due
}
func (t *UpdateTask_UpdateTask_Task) GetID() string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.ID
}
func (t *UpdateTask_UpdateTask_Task) GetOwnerID() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.OwnerID
}
func (t *UpdateTask_UpdateTask_Task) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return &t.Status
}
func (t *UpdateTask_UpdateTask_Task) GetTags() []string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Tags
}
func (t *UpdateTask_UpdateTask_Task) GetTitle() string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Title
}
func (t *UpdateTask_UpdateTask_Task) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.UpdatedAt
}
func (t *UpdateTask_UpdateTask_Task) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.UpdatedBy
}

type UpdateTask_UpdateTask struct {
	Task UpdateTask_UpdateTask_Task "json:\"task\" graphql:\"task\""
}

func (t *UpdateTask_UpdateTask) GetTask() *UpdateTask_UpdateTask_Task {
	if t == nil {
		t = &UpdateTask_UpdateTask{}
	}
	return &t.Task
}

type GetAllTaskHistories_TaskHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllTaskHistories_TaskHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllTaskHistories_TaskHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllTaskHistories_TaskHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllTaskHistories_TaskHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllTaskHistories_TaskHistories_Edges_Node struct {
	AssigneeID  *string          "json:\"assigneeID,omitempty\" graphql:\"assigneeID\""
	AssignerID  *string          "json:\"assignerID,omitempty\" graphql:\"assignerID\""
	Category    *string          "json:\"category,omitempty\" graphql:\"category\""
	Completed   *models.DateTime "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details     *string          "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string           "json:\"displayID\" graphql:\"displayID\""
	Due         *models.DateTime "json:\"due,omitempty\" graphql:\"due\""
	HistoryTime time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID          string           "json:\"id\" graphql:\"id\""
	Operation   history.OpType   "json:\"operation\" graphql:\"operation\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string          "json:\"ref,omitempty\" graphql:\"ref\""
	Status      enums.TaskStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string           "json:\"title\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetAssigneeID() *string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.AssigneeID
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetAssignerID() *string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.AssignerID
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetCompleted() *models.DateTime {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Completed
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetDue() *models.DateTime {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Due
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetTitle() string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Title
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTaskHistories_TaskHistories_Edges struct {
	Node *GetAllTaskHistories_TaskHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTaskHistories_TaskHistories_Edges) GetNode() *GetAllTaskHistories_TaskHistories_Edges_Node {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges{}
	}
	return t.Node
}

type GetAllTaskHistories_TaskHistories struct {
	Edges      []*GetAllTaskHistories_TaskHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllTaskHistories_TaskHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllTaskHistories_TaskHistories) GetEdges() []*GetAllTaskHistories_TaskHistories_Edges {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories{}
	}
	return t.Edges
}
func (t *GetAllTaskHistories_TaskHistories) GetPageInfo() *GetAllTaskHistories_TaskHistories_PageInfo {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllTaskHistories_TaskHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories{}
	}
	return t.TotalCount
}

type GetTaskHistories_TaskHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetTaskHistories_TaskHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetTaskHistories_TaskHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetTaskHistories_TaskHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetTaskHistories_TaskHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetTaskHistories_TaskHistories_Edges_Node struct {
	AssigneeID  *string          "json:\"assigneeID,omitempty\" graphql:\"assigneeID\""
	AssignerID  *string          "json:\"assignerID,omitempty\" graphql:\"assignerID\""
	Category    *string          "json:\"category,omitempty\" graphql:\"category\""
	Completed   *models.DateTime "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details     *string          "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string           "json:\"displayID\" graphql:\"displayID\""
	Due         *models.DateTime "json:\"due,omitempty\" graphql:\"due\""
	HistoryTime time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID          string           "json:\"id\" graphql:\"id\""
	Operation   history.OpType   "json:\"operation\" graphql:\"operation\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string          "json:\"ref,omitempty\" graphql:\"ref\""
	Status      enums.TaskStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string           "json:\"title\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTaskHistories_TaskHistories_Edges_Node) GetAssigneeID() *string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.AssigneeID
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetAssignerID() *string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.AssignerID
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Category
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetCompleted() *models.DateTime {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Completed
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetDue() *models.DateTime {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Due
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetTitle() string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Title
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTaskHistories_TaskHistories_Edges struct {
	Node *GetTaskHistories_TaskHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTaskHistories_TaskHistories_Edges) GetNode() *GetTaskHistories_TaskHistories_Edges_Node {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges{}
	}
	return t.Node
}

type GetTaskHistories_TaskHistories struct {
	Edges      []*GetTaskHistories_TaskHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetTaskHistories_TaskHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetTaskHistories_TaskHistories) GetEdges() []*GetTaskHistories_TaskHistories_Edges {
	if t == nil {
		t = &GetTaskHistories_TaskHistories{}
	}
	return t.Edges
}
func (t *GetTaskHistories_TaskHistories) GetPageInfo() *GetTaskHistories_TaskHistories_PageInfo {
	if t == nil {
		t = &GetTaskHistories_TaskHistories{}
	}
	return &t.PageInfo
}
func (t *GetTaskHistories_TaskHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetTaskHistories_TaskHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates struct {
	CreatedAt    *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string             "json:\"description,omitempty\" graphql:\"description\""
	ID           string              "json:\"id\" graphql:\"id\""
	Jsonconfig   map[string]any      "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Kind         *enums.TemplateKind "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string              "json:\"name\" graphql:\"name\""
	OwnerID      *string             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags         []string            "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateType enums.DocumentType  "json:\"templateType\" graphql:\"templateType\""
	Uischema     map[string]any      "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt    *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.Description
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetID() string {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.ID
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetJsonconfig() map[string]any {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.Jsonconfig
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetKind() *enums.TemplateKind {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.Kind
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetName() string {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.Name
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.Tags
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetTemplateType() *enums.DocumentType {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return &t.TemplateType
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetUischema() map[string]any {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.Uischema
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVTemplate_CreateBulkCSVTemplate struct {
	Templates []*CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates "json:\"templates,omitempty\" graphql:\"templates\""
}

func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate) GetTemplates() []*CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate{}
	}
	return t.Templates
}

type CreateBulkTemplate_CreateBulkTemplate_Templates struct {
	CreatedAt    *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string             "json:\"description,omitempty\" graphql:\"description\""
	ID           string              "json:\"id\" graphql:\"id\""
	Jsonconfig   map[string]any      "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Kind         *enums.TemplateKind "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string              "json:\"name\" graphql:\"name\""
	OwnerID      *string             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags         []string            "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateType enums.DocumentType  "json:\"templateType\" graphql:\"templateType\""
	Uischema     map[string]any      "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt    *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.CreatedAt
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.CreatedBy
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetDescription() *string {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.Description
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetID() string {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.ID
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetJsonconfig() map[string]any {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.Jsonconfig
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetKind() *enums.TemplateKind {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.Kind
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetName() string {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.Name
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.OwnerID
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetTags() []string {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.Tags
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetTemplateType() *enums.DocumentType {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return &t.TemplateType
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetUischema() map[string]any {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.Uischema
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.UpdatedBy
}

type CreateBulkTemplate_CreateBulkTemplate struct {
	Templates []*CreateBulkTemplate_CreateBulkTemplate_Templates "json:\"templates,omitempty\" graphql:\"templates\""
}

func (t *CreateBulkTemplate_CreateBulkTemplate) GetTemplates() []*CreateBulkTemplate_CreateBulkTemplate_Templates {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate{}
	}
	return t.Templates
}

type CreateTemplate_CreateTemplate_Template_Files_Edges_Node struct {
	ID           string  "json:\"id\" graphql:\"id\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *CreateTemplate_CreateTemplate_Template_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template_Files_Edges_Node{}
	}
	return t.ID
}
func (t *CreateTemplate_CreateTemplate_Template_Files_Edges_Node) GetPresignedURL() *string {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template_Files_Edges_Node{}
	}
	return t.PresignedURL
}

type CreateTemplate_CreateTemplate_Template_Files_Edges struct {
	Node *CreateTemplate_CreateTemplate_Template_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateTemplate_CreateTemplate_Template_Files_Edges) GetNode() *CreateTemplate_CreateTemplate_Template_Files_Edges_Node {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template_Files_Edges{}
	}
	return t.Node
}

type CreateTemplate_CreateTemplate_Template_Files struct {
	Edges []*CreateTemplate_CreateTemplate_Template_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateTemplate_CreateTemplate_Template_Files) GetEdges() []*CreateTemplate_CreateTemplate_Template_Files_Edges {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template_Files{}
	}
	return t.Edges
}

type CreateTemplate_CreateTemplate_Template struct {
	CreatedAt    *time.Time                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string                                      "json:\"description,omitempty\" graphql:\"description\""
	Files        CreateTemplate_CreateTemplate_Template_Files "json:\"files\" graphql:\"files\""
	ID           string                                       "json:\"id\" graphql:\"id\""
	Jsonconfig   map[string]any                               "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Kind         *enums.TemplateKind                          "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                       "json:\"name\" graphql:\"name\""
	OwnerID      *string                                      "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags         []string                                     "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateType enums.DocumentType                           "json:\"templateType\" graphql:\"templateType\""
	Uischema     map[string]any                               "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt    *time.Time                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateTemplate_CreateTemplate_Template) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.CreatedAt
}
func (t *CreateTemplate_CreateTemplate_Template) GetCreatedBy() *string {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.CreatedBy
}
func (t *CreateTemplate_CreateTemplate_Template) GetDescription() *string {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.Description
}
func (t *CreateTemplate_CreateTemplate_Template) GetFiles() *CreateTemplate_CreateTemplate_Template_Files {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return &t.Files
}
func (t *CreateTemplate_CreateTemplate_Template) GetID() string {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.ID
}
func (t *CreateTemplate_CreateTemplate_Template) GetJsonconfig() map[string]any {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.Jsonconfig
}
func (t *CreateTemplate_CreateTemplate_Template) GetKind() *enums.TemplateKind {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.Kind
}
func (t *CreateTemplate_CreateTemplate_Template) GetName() string {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.Name
}
func (t *CreateTemplate_CreateTemplate_Template) GetOwnerID() *string {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.OwnerID
}
func (t *CreateTemplate_CreateTemplate_Template) GetTags() []string {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.Tags
}
func (t *CreateTemplate_CreateTemplate_Template) GetTemplateType() *enums.DocumentType {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return &t.TemplateType
}
func (t *CreateTemplate_CreateTemplate_Template) GetUischema() map[string]any {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.Uischema
}
func (t *CreateTemplate_CreateTemplate_Template) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.UpdatedAt
}
func (t *CreateTemplate_CreateTemplate_Template) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.UpdatedBy
}

type CreateTemplate_CreateTemplate struct {
	Template CreateTemplate_CreateTemplate_Template "json:\"template\" graphql:\"template\""
}

func (t *CreateTemplate_CreateTemplate) GetTemplate() *CreateTemplate_CreateTemplate_Template {
	if t == nil {
		t = &CreateTemplate_CreateTemplate{}
	}
	return &t.Template
}

type DeleteTemplate_DeleteTemplate struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteTemplate_DeleteTemplate) GetDeletedID() string {
	if t == nil {
		t = &DeleteTemplate_DeleteTemplate{}
	}
	return t.DeletedID
}

type GetAllTemplates_Templates_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllTemplates_Templates_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllTemplates_Templates_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllTemplates_Templates_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllTemplates_Templates_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllTemplates_Templates_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllTemplates_Templates_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllTemplates_Templates_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllTemplates_Templates_PageInfo{}
	}
	return t.StartCursor
}

type GetAllTemplates_Templates_Edges_Node_Files_Edges_Node struct {
	ID           string  "json:\"id\" graphql:\"id\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetAllTemplates_Templates_Edges_Node_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTemplates_Templates_Edges_Node_Files_Edges_Node) GetPresignedURL() *string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node_Files_Edges_Node{}
	}
	return t.PresignedURL
}

type GetAllTemplates_Templates_Edges_Node_Files_Edges struct {
	Node *GetAllTemplates_Templates_Edges_Node_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTemplates_Templates_Edges_Node_Files_Edges) GetNode() *GetAllTemplates_Templates_Edges_Node_Files_Edges_Node {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node_Files_Edges{}
	}
	return t.Node
}

type GetAllTemplates_Templates_Edges_Node_Files struct {
	Edges []*GetAllTemplates_Templates_Edges_Node_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllTemplates_Templates_Edges_Node_Files) GetEdges() []*GetAllTemplates_Templates_Edges_Node_Files_Edges {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node_Files{}
	}
	return t.Edges
}

type GetAllTemplates_Templates_Edges_Node struct {
	CreatedAt    *time.Time                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string                                    "json:\"description,omitempty\" graphql:\"description\""
	Files        GetAllTemplates_Templates_Edges_Node_Files "json:\"files\" graphql:\"files\""
	ID           string                                     "json:\"id\" graphql:\"id\""
	Jsonconfig   map[string]any                             "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Kind         *enums.TemplateKind                        "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                     "json:\"name\" graphql:\"name\""
	OwnerID      *string                                    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags         []string                                   "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateType enums.DocumentType                         "json:\"templateType\" graphql:\"templateType\""
	Uischema     map[string]any                             "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt    *time.Time                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTemplates_Templates_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTemplates_Templates_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTemplates_Templates_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllTemplates_Templates_Edges_Node) GetFiles() *GetAllTemplates_Templates_Edges_Node_Files {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return &t.Files
}
func (t *GetAllTemplates_Templates_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTemplates_Templates_Edges_Node) GetJsonconfig() map[string]any {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.Jsonconfig
}
func (t *GetAllTemplates_Templates_Edges_Node) GetKind() *enums.TemplateKind {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.Kind
}
func (t *GetAllTemplates_Templates_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllTemplates_Templates_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllTemplates_Templates_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllTemplates_Templates_Edges_Node) GetTemplateType() *enums.DocumentType {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return &t.TemplateType
}
func (t *GetAllTemplates_Templates_Edges_Node) GetUischema() map[string]any {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.Uischema
}
func (t *GetAllTemplates_Templates_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTemplates_Templates_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTemplates_Templates_Edges struct {
	Node *GetAllTemplates_Templates_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTemplates_Templates_Edges) GetNode() *GetAllTemplates_Templates_Edges_Node {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges{}
	}
	return t.Node
}

type GetAllTemplates_Templates struct {
	Edges      []*GetAllTemplates_Templates_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllTemplates_Templates_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllTemplates_Templates) GetEdges() []*GetAllTemplates_Templates_Edges {
	if t == nil {
		t = &GetAllTemplates_Templates{}
	}
	return t.Edges
}
func (t *GetAllTemplates_Templates) GetPageInfo() *GetAllTemplates_Templates_PageInfo {
	if t == nil {
		t = &GetAllTemplates_Templates{}
	}
	return &t.PageInfo
}
func (t *GetAllTemplates_Templates) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllTemplates_Templates{}
	}
	return t.TotalCount
}

type GetTemplateByID_Template_Files_Edges_Node struct {
	ID           string  "json:\"id\" graphql:\"id\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetTemplateByID_Template_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTemplateByID_Template_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GetTemplateByID_Template_Files_Edges_Node) GetPresignedURL() *string {
	if t == nil {
		t = &GetTemplateByID_Template_Files_Edges_Node{}
	}
	return t.PresignedURL
}

type GetTemplateByID_Template_Files_Edges struct {
	Node *GetTemplateByID_Template_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTemplateByID_Template_Files_Edges) GetNode() *GetTemplateByID_Template_Files_Edges_Node {
	if t == nil {
		t = &GetTemplateByID_Template_Files_Edges{}
	}
	return t.Node
}

type GetTemplateByID_Template_Files struct {
	Edges []*GetTemplateByID_Template_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetTemplateByID_Template_Files) GetEdges() []*GetTemplateByID_Template_Files_Edges {
	if t == nil {
		t = &GetTemplateByID_Template_Files{}
	}
	return t.Edges
}

type GetTemplateByID_Template struct {
	CreatedAt    *time.Time                     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string                        "json:\"description,omitempty\" graphql:\"description\""
	Files        GetTemplateByID_Template_Files "json:\"files\" graphql:\"files\""
	ID           string                         "json:\"id\" graphql:\"id\""
	Jsonconfig   map[string]any                 "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Kind         *enums.TemplateKind            "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                         "json:\"name\" graphql:\"name\""
	OwnerID      *string                        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags         []string                       "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateType enums.DocumentType             "json:\"templateType\" graphql:\"templateType\""
	Uischema     map[string]any                 "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt    *time.Time                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTemplateByID_Template) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.CreatedAt
}
func (t *GetTemplateByID_Template) GetCreatedBy() *string {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.CreatedBy
}
func (t *GetTemplateByID_Template) GetDescription() *string {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.Description
}
func (t *GetTemplateByID_Template) GetFiles() *GetTemplateByID_Template_Files {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return &t.Files
}
func (t *GetTemplateByID_Template) GetID() string {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.ID
}
func (t *GetTemplateByID_Template) GetJsonconfig() map[string]any {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.Jsonconfig
}
func (t *GetTemplateByID_Template) GetKind() *enums.TemplateKind {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.Kind
}
func (t *GetTemplateByID_Template) GetName() string {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.Name
}
func (t *GetTemplateByID_Template) GetOwnerID() *string {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.OwnerID
}
func (t *GetTemplateByID_Template) GetTags() []string {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.Tags
}
func (t *GetTemplateByID_Template) GetTemplateType() *enums.DocumentType {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return &t.TemplateType
}
func (t *GetTemplateByID_Template) GetUischema() map[string]any {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.Uischema
}
func (t *GetTemplateByID_Template) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.UpdatedAt
}
func (t *GetTemplateByID_Template) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.UpdatedBy
}

type GetTemplates_Templates_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetTemplates_Templates_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetTemplates_Templates_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetTemplates_Templates_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetTemplates_Templates_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetTemplates_Templates_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetTemplates_Templates_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetTemplates_Templates_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetTemplates_Templates_PageInfo{}
	}
	return t.StartCursor
}

type GetTemplates_Templates_Edges_Node_Files_Edges_Node struct {
	ID           string  "json:\"id\" graphql:\"id\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetTemplates_Templates_Edges_Node_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTemplates_Templates_Edges_Node_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GetTemplates_Templates_Edges_Node_Files_Edges_Node) GetPresignedURL() *string {
	if t == nil {
		t = &GetTemplates_Templates_Edges_Node_Files_Edges_Node{}
	}
	return t.PresignedURL
}

type GetTemplates_Templates_Edges_Node_Files_Edges struct {
	Node *GetTemplates_Templates_Edges_Node_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTemplates_Templates_Edges_Node_Files_Edges) GetNode() *GetTemplates_Templates_Edges_Node_Files_Edges_Node {
	if t == nil {
		t = &GetTemplates_Templates_Edges_Node_Files_Edges{}
	}
	return t.Node
}

type GetTemplates_Templates_Edges_Node_Files struct {
	Edges []*GetTemplates_Templates_Edges_Node_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetTemplates_Templates_Edges_Node_Files) GetEdges() []*GetTemplates_Templates_Edges_Node_Files_Edges {
	if t == nil {
		t = &GetTemplates_Templates_Edges_Node_Files{}
	}
	return t.Edges
}

type GetTemplates_Templates_Edges_Node struct {
	CreatedAt    *time.Time                              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string                                 "json:\"description,omitempty\" graphql:\"description\""
	Files        GetTemplates_Templates_Edges_Node_Files "json:\"files\" graphql:\"files\""
	ID           string                                  "json:\"id\" graphql:\"id\""
	Jsonconfig   map[string]any                          "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Kind         *enums.TemplateKind                     "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                  "json:\"name\" graphql:\"name\""
	OwnerID      *string                                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags         []string                                "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateType enums.DocumentType                      "json:\"templateType\" graphql:\"templateType\""
	Uischema     map[string]any                          "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt    *time.Time                              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTemplates_Templates_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTemplates_Templates_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTemplates_Templates_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTemplates_Templates_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTemplates_Templates_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetTemplates_Templates_Edges_Node{}
	}
	return t.Description
}
func (t *GetTemplates_Templates_Edges_Node) GetFiles() *GetTemplates_Templates_Edges_Node_Files {
	if t == nil {
		t = &GetTemplates_Templates_Edges_Node{}
	}
	return &t.Files
}
func (t *GetTemplates_Templates_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTemplates_Templates_Edges_Node{}
	}
	return t.ID
}
func (t *GetTemplates_Templates_Edges_Node) GetJsonconfig() map[string]any {
	if t == nil {
		t = &GetTemplates_Templates_Edges_Node{}
	}
	return t.Jsonconfig
}
func (t *GetTemplates_Templates_Edges_Node) GetKind() *enums.TemplateKind {
	if t == nil {
		t = &GetTemplates_Templates_Edges_Node{}
	}
	return t.Kind
}
func (t *GetTemplates_Templates_Edges_Node) GetName() string {
	if t == nil {
		t = &GetTemplates_Templates_Edges_Node{}
	}
	return t.Name
}
func (t *GetTemplates_Templates_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetTemplates_Templates_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetTemplates_Templates_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetTemplates_Templates_Edges_Node{}
	}
	return t.Tags
}
func (t *GetTemplates_Templates_Edges_Node) GetTemplateType() *enums.DocumentType {
	if t == nil {
		t = &GetTemplates_Templates_Edges_Node{}
	}
	return &t.TemplateType
}
func (t *GetTemplates_Templates_Edges_Node) GetUischema() map[string]any {
	if t == nil {
		t = &GetTemplates_Templates_Edges_Node{}
	}
	return t.Uischema
}
func (t *GetTemplates_Templates_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTemplates_Templates_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTemplates_Templates_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTemplates_Templates_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTemplates_Templates_Edges struct {
	Node *GetTemplates_Templates_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTemplates_Templates_Edges) GetNode() *GetTemplates_Templates_Edges_Node {
	if t == nil {
		t = &GetTemplates_Templates_Edges{}
	}
	return t.Node
}

type GetTemplates_Templates struct {
	Edges      []*GetTemplates_Templates_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetTemplates_Templates_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                           "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetTemplates_Templates) GetEdges() []*GetTemplates_Templates_Edges {
	if t == nil {
		t = &GetTemplates_Templates{}
	}
	return t.Edges
}
func (t *GetTemplates_Templates) GetPageInfo() *GetTemplates_Templates_PageInfo {
	if t == nil {
		t = &GetTemplates_Templates{}
	}
	return &t.PageInfo
}
func (t *GetTemplates_Templates) GetTotalCount() int64 {
	if t == nil {
		t = &GetTemplates_Templates{}
	}
	return t.TotalCount
}

type UpdateTemplate_UpdateTemplate_Template_Files_Edges_Node struct {
	ID           string  "json:\"id\" graphql:\"id\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *UpdateTemplate_UpdateTemplate_Template_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template_Files_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateTemplate_UpdateTemplate_Template_Files_Edges_Node) GetPresignedURL() *string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template_Files_Edges_Node{}
	}
	return t.PresignedURL
}

type UpdateTemplate_UpdateTemplate_Template_Files_Edges struct {
	Node *UpdateTemplate_UpdateTemplate_Template_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateTemplate_UpdateTemplate_Template_Files_Edges) GetNode() *UpdateTemplate_UpdateTemplate_Template_Files_Edges_Node {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template_Files_Edges{}
	}
	return t.Node
}

type UpdateTemplate_UpdateTemplate_Template_Files struct {
	Edges []*UpdateTemplate_UpdateTemplate_Template_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateTemplate_UpdateTemplate_Template_Files) GetEdges() []*UpdateTemplate_UpdateTemplate_Template_Files_Edges {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template_Files{}
	}
	return t.Edges
}

type UpdateTemplate_UpdateTemplate_Template struct {
	CreatedAt    *time.Time                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string                                      "json:\"description,omitempty\" graphql:\"description\""
	Files        UpdateTemplate_UpdateTemplate_Template_Files "json:\"files\" graphql:\"files\""
	ID           string                                       "json:\"id\" graphql:\"id\""
	Jsonconfig   map[string]any                               "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Kind         *enums.TemplateKind                          "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                       "json:\"name\" graphql:\"name\""
	OwnerID      *string                                      "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags         []string                                     "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateType enums.DocumentType                           "json:\"templateType\" graphql:\"templateType\""
	Uischema     map[string]any                               "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt    *time.Time                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateTemplate_UpdateTemplate_Template) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.CreatedAt
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.CreatedBy
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetDescription() *string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.Description
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetFiles() *UpdateTemplate_UpdateTemplate_Template_Files {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return &t.Files
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetID() string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.ID
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetJsonconfig() map[string]any {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.Jsonconfig
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetKind() *enums.TemplateKind {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.Kind
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetName() string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.Name
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetOwnerID() *string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.OwnerID
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetTags() []string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.Tags
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetTemplateType() *enums.DocumentType {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return &t.TemplateType
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetUischema() map[string]any {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.Uischema
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.UpdatedAt
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.UpdatedBy
}

type UpdateTemplate_UpdateTemplate struct {
	Template UpdateTemplate_UpdateTemplate_Template "json:\"template\" graphql:\"template\""
}

func (t *UpdateTemplate_UpdateTemplate) GetTemplate() *UpdateTemplate_UpdateTemplate_Template {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate{}
	}
	return &t.Template
}

type GetAllTemplateHistories_TemplateHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllTemplateHistories_TemplateHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllTemplateHistories_TemplateHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllTemplateHistories_TemplateHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllTemplateHistories_TemplateHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllTemplateHistories_TemplateHistories_Edges_Node struct {
	CreatedAt    *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string            "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime  time.Time          "json:\"historyTime\" graphql:\"historyTime\""
	ID           string             "json:\"id\" graphql:\"id\""
	Jsonconfig   map[string]any     "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name         string             "json:\"name\" graphql:\"name\""
	Operation    history.OpType     "json:\"operation\" graphql:\"operation\""
	OwnerID      *string            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref          *string            "json:\"ref,omitempty\" graphql:\"ref\""
	Tags         []string           "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateType enums.DocumentType "json:\"templateType\" graphql:\"templateType\""
	Uischema     map[string]any     "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt    *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetJsonconfig() map[string]any {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Jsonconfig
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetTemplateType() *enums.DocumentType {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.TemplateType
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetUischema() map[string]any {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Uischema
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTemplateHistories_TemplateHistories_Edges struct {
	Node *GetAllTemplateHistories_TemplateHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTemplateHistories_TemplateHistories_Edges) GetNode() *GetAllTemplateHistories_TemplateHistories_Edges_Node {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges{}
	}
	return t.Node
}

type GetAllTemplateHistories_TemplateHistories struct {
	Edges      []*GetAllTemplateHistories_TemplateHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllTemplateHistories_TemplateHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllTemplateHistories_TemplateHistories) GetEdges() []*GetAllTemplateHistories_TemplateHistories_Edges {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories{}
	}
	return t.Edges
}
func (t *GetAllTemplateHistories_TemplateHistories) GetPageInfo() *GetAllTemplateHistories_TemplateHistories_PageInfo {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllTemplateHistories_TemplateHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories{}
	}
	return t.TotalCount
}

type GetTemplateHistories_TemplateHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetTemplateHistories_TemplateHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetTemplateHistories_TemplateHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetTemplateHistories_TemplateHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetTemplateHistories_TemplateHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetTemplateHistories_TemplateHistories_Edges_Node struct {
	CreatedAt    *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string            "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime  time.Time          "json:\"historyTime\" graphql:\"historyTime\""
	ID           string             "json:\"id\" graphql:\"id\""
	Jsonconfig   map[string]any     "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name         string             "json:\"name\" graphql:\"name\""
	Operation    history.OpType     "json:\"operation\" graphql:\"operation\""
	OwnerID      *string            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref          *string            "json:\"ref,omitempty\" graphql:\"ref\""
	Tags         []string           "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateType enums.DocumentType "json:\"templateType\" graphql:\"templateType\""
	Uischema     map[string]any     "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt    *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetJsonconfig() map[string]any {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Jsonconfig
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetTemplateType() *enums.DocumentType {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.TemplateType
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetUischema() map[string]any {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Uischema
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTemplateHistories_TemplateHistories_Edges struct {
	Node *GetTemplateHistories_TemplateHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTemplateHistories_TemplateHistories_Edges) GetNode() *GetTemplateHistories_TemplateHistories_Edges_Node {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges{}
	}
	return t.Node
}

type GetTemplateHistories_TemplateHistories struct {
	Edges      []*GetTemplateHistories_TemplateHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetTemplateHistories_TemplateHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                           "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetTemplateHistories_TemplateHistories) GetEdges() []*GetTemplateHistories_TemplateHistories_Edges {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories{}
	}
	return t.Edges
}
func (t *GetTemplateHistories_TemplateHistories) GetPageInfo() *GetTemplateHistories_TemplateHistories_PageInfo {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories{}
	}
	return &t.PageInfo
}
func (t *GetTemplateHistories_TemplateHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories{}
	}
	return t.TotalCount
}

type CreateTFASetting_CreateTFASetting_TfaSetting struct {
	TotpAllowed *bool "json:\"totpAllowed,omitempty\" graphql:\"totpAllowed\""
	Verified    bool  "json:\"verified\" graphql:\"verified\""
}

func (t *CreateTFASetting_CreateTFASetting_TfaSetting) GetTotpAllowed() *bool {
	if t == nil {
		t = &CreateTFASetting_CreateTFASetting_TfaSetting{}
	}
	return t.TotpAllowed
}
func (t *CreateTFASetting_CreateTFASetting_TfaSetting) GetVerified() bool {
	if t == nil {
		t = &CreateTFASetting_CreateTFASetting_TfaSetting{}
	}
	return t.Verified
}

type CreateTFASetting_CreateTFASetting struct {
	QRCode     *string                                      "json:\"qrCode,omitempty\" graphql:\"qrCode\""
	TfaSecret  *string                                      "json:\"tfaSecret,omitempty\" graphql:\"tfaSecret\""
	TfaSetting CreateTFASetting_CreateTFASetting_TfaSetting "json:\"tfaSetting\" graphql:\"tfaSetting\""
}

func (t *CreateTFASetting_CreateTFASetting) GetQRCode() *string {
	if t == nil {
		t = &CreateTFASetting_CreateTFASetting{}
	}
	return t.QRCode
}
func (t *CreateTFASetting_CreateTFASetting) GetTfaSecret() *string {
	if t == nil {
		t = &CreateTFASetting_CreateTFASetting{}
	}
	return t.TfaSecret
}
func (t *CreateTFASetting_CreateTFASetting) GetTfaSetting() *CreateTFASetting_CreateTFASetting_TfaSetting {
	if t == nil {
		t = &CreateTFASetting_CreateTFASetting{}
	}
	return &t.TfaSetting
}

type GetAllTFASettings_TfaSettings_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllTFASettings_TfaSettings_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllTFASettings_TfaSettings_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllTFASettings_TfaSettings_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllTFASettings_TfaSettings_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_PageInfo{}
	}
	return t.StartCursor
}

type GetAllTFASettings_TfaSettings_Edges_Node struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID          string     "json:\"id\" graphql:\"id\""
	TotpAllowed *bool      "json:\"totpAllowed,omitempty\" graphql:\"totpAllowed\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Verified    bool       "json:\"verified\" graphql:\"verified\""
}

func (t *GetAllTFASettings_TfaSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTFASettings_TfaSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTFASettings_TfaSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTFASettings_TfaSettings_Edges_Node) GetTotpAllowed() *bool {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges_Node{}
	}
	return t.TotpAllowed
}
func (t *GetAllTFASettings_TfaSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTFASettings_TfaSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllTFASettings_TfaSettings_Edges_Node) GetVerified() bool {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges_Node{}
	}
	return t.Verified
}

type GetAllTFASettings_TfaSettings_Edges struct {
	Node *GetAllTFASettings_TfaSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTFASettings_TfaSettings_Edges) GetNode() *GetAllTFASettings_TfaSettings_Edges_Node {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges{}
	}
	return t.Node
}

type GetAllTFASettings_TfaSettings struct {
	Edges      []*GetAllTFASettings_TfaSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllTFASettings_TfaSettings_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllTFASettings_TfaSettings) GetEdges() []*GetAllTFASettings_TfaSettings_Edges {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings{}
	}
	return t.Edges
}
func (t *GetAllTFASettings_TfaSettings) GetPageInfo() *GetAllTFASettings_TfaSettings_PageInfo {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings{}
	}
	return &t.PageInfo
}
func (t *GetAllTFASettings_TfaSettings) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings{}
	}
	return t.TotalCount
}

type GetTFASettingByID_TfaSetting struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID          string     "json:\"id\" graphql:\"id\""
	TotpAllowed *bool      "json:\"totpAllowed,omitempty\" graphql:\"totpAllowed\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Verified    bool       "json:\"verified\" graphql:\"verified\""
}

func (t *GetTFASettingByID_TfaSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTFASettingByID_TfaSetting{}
	}
	return t.CreatedAt
}
func (t *GetTFASettingByID_TfaSetting) GetCreatedBy() *string {
	if t == nil {
		t = &GetTFASettingByID_TfaSetting{}
	}
	return t.CreatedBy
}
func (t *GetTFASettingByID_TfaSetting) GetID() string {
	if t == nil {
		t = &GetTFASettingByID_TfaSetting{}
	}
	return t.ID
}
func (t *GetTFASettingByID_TfaSetting) GetTotpAllowed() *bool {
	if t == nil {
		t = &GetTFASettingByID_TfaSetting{}
	}
	return t.TotpAllowed
}
func (t *GetTFASettingByID_TfaSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTFASettingByID_TfaSetting{}
	}
	return t.UpdatedAt
}
func (t *GetTFASettingByID_TfaSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTFASettingByID_TfaSetting{}
	}
	return t.UpdatedBy
}
func (t *GetTFASettingByID_TfaSetting) GetVerified() bool {
	if t == nil {
		t = &GetTFASettingByID_TfaSetting{}
	}
	return t.Verified
}

type GetTFASettings_TfaSettings_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetTFASettings_TfaSettings_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetTFASettings_TfaSettings_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetTFASettings_TfaSettings_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetTFASettings_TfaSettings_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetTFASettings_TfaSettings_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetTFASettings_TfaSettings_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetTFASettings_TfaSettings_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetTFASettings_TfaSettings_PageInfo{}
	}
	return t.StartCursor
}

type GetTFASettings_TfaSettings_Edges_Node struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID          string     "json:\"id\" graphql:\"id\""
	TotpAllowed *bool      "json:\"totpAllowed,omitempty\" graphql:\"totpAllowed\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Verified    bool       "json:\"verified\" graphql:\"verified\""
}

func (t *GetTFASettings_TfaSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTFASettings_TfaSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTFASettings_TfaSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTFASettings_TfaSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTFASettings_TfaSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTFASettings_TfaSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetTFASettings_TfaSettings_Edges_Node) GetTotpAllowed() *bool {
	if t == nil {
		t = &GetTFASettings_TfaSettings_Edges_Node{}
	}
	return t.TotpAllowed
}
func (t *GetTFASettings_TfaSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTFASettings_TfaSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTFASettings_TfaSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTFASettings_TfaSettings_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetTFASettings_TfaSettings_Edges_Node) GetVerified() bool {
	if t == nil {
		t = &GetTFASettings_TfaSettings_Edges_Node{}
	}
	return t.Verified
}

type GetTFASettings_TfaSettings_Edges struct {
	Node *GetTFASettings_TfaSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTFASettings_TfaSettings_Edges) GetNode() *GetTFASettings_TfaSettings_Edges_Node {
	if t == nil {
		t = &GetTFASettings_TfaSettings_Edges{}
	}
	return t.Node
}

type GetTFASettings_TfaSettings struct {
	Edges      []*GetTFASettings_TfaSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetTFASettings_TfaSettings_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetTFASettings_TfaSettings) GetEdges() []*GetTFASettings_TfaSettings_Edges {
	if t == nil {
		t = &GetTFASettings_TfaSettings{}
	}
	return t.Edges
}
func (t *GetTFASettings_TfaSettings) GetPageInfo() *GetTFASettings_TfaSettings_PageInfo {
	if t == nil {
		t = &GetTFASettings_TfaSettings{}
	}
	return &t.PageInfo
}
func (t *GetTFASettings_TfaSettings) GetTotalCount() int64 {
	if t == nil {
		t = &GetTFASettings_TfaSettings{}
	}
	return t.TotalCount
}

type UpdateTFASetting_UpdateTFASetting_TfaSetting struct {
	TotpAllowed *bool "json:\"totpAllowed,omitempty\" graphql:\"totpAllowed\""
	Verified    bool  "json:\"verified\" graphql:\"verified\""
}

func (t *UpdateTFASetting_UpdateTFASetting_TfaSetting) GetTotpAllowed() *bool {
	if t == nil {
		t = &UpdateTFASetting_UpdateTFASetting_TfaSetting{}
	}
	return t.TotpAllowed
}
func (t *UpdateTFASetting_UpdateTFASetting_TfaSetting) GetVerified() bool {
	if t == nil {
		t = &UpdateTFASetting_UpdateTFASetting_TfaSetting{}
	}
	return t.Verified
}

type UpdateTFASetting_UpdateTFASetting struct {
	QRCode        *string                                      "json:\"qrCode,omitempty\" graphql:\"qrCode\""
	RecoveryCodes []string                                     "json:\"recoveryCodes,omitempty\" graphql:\"recoveryCodes\""
	TfaSecret     *string                                      "json:\"tfaSecret,omitempty\" graphql:\"tfaSecret\""
	TfaSetting    UpdateTFASetting_UpdateTFASetting_TfaSetting "json:\"tfaSetting\" graphql:\"tfaSetting\""
}

func (t *UpdateTFASetting_UpdateTFASetting) GetQRCode() *string {
	if t == nil {
		t = &UpdateTFASetting_UpdateTFASetting{}
	}
	return t.QRCode
}
func (t *UpdateTFASetting_UpdateTFASetting) GetRecoveryCodes() []string {
	if t == nil {
		t = &UpdateTFASetting_UpdateTFASetting{}
	}
	return t.RecoveryCodes
}
func (t *UpdateTFASetting_UpdateTFASetting) GetTfaSecret() *string {
	if t == nil {
		t = &UpdateTFASetting_UpdateTFASetting{}
	}
	return t.TfaSecret
}
func (t *UpdateTFASetting_UpdateTFASetting) GetTfaSetting() *UpdateTFASetting_UpdateTFASetting_TfaSetting {
	if t == nil {
		t = &UpdateTFASetting_UpdateTFASetting{}
	}
	return &t.TfaSetting
}

type CreateTrustCenter_CreateTrustCenter_TrustCenter_CustomDomain struct {
	CnameRecord       string  "json:\"cnameRecord\" graphql:\"cnameRecord\""
	DNSVerificationID *string "json:\"dnsVerificationID,omitempty\" graphql:\"dnsVerificationID\""
}

func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter_CustomDomain) GetCnameRecord() string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter_CustomDomain{}
	}
	return t.CnameRecord
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter_CustomDomain) GetDNSVerificationID() *string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter_CustomDomain{}
	}
	return t.DNSVerificationID
}

type CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting_LogoFile struct {
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting_LogoFile) GetPresignedURL() *string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting_LogoFile{}
	}
	return t.PresignedURL
}

type CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting_FaviconFile struct {
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting_FaviconFile) GetPresignedURL() *string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting_FaviconFile{}
	}
	return t.PresignedURL
}

type CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting struct {
	AccentColor        *string                                                              "json:\"accentColor,omitempty\" graphql:\"accentColor\""
	BackgroundColor    *string                                                              "json:\"backgroundColor,omitempty\" graphql:\"backgroundColor\""
	FaviconFile        *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting_FaviconFile "json:\"faviconFile,omitempty\" graphql:\"faviconFile\""
	FaviconLocalFileID *string                                                              "json:\"faviconLocalFileID,omitempty\" graphql:\"faviconLocalFileID\""
	FaviconRemoteURL   *string                                                              "json:\"faviconRemoteURL,omitempty\" graphql:\"faviconRemoteURL\""
	Font               *string                                                              "json:\"font,omitempty\" graphql:\"font\""
	ForegroundColor    *string                                                              "json:\"foregroundColor,omitempty\" graphql:\"foregroundColor\""
	ID                 string                                                               "json:\"id\" graphql:\"id\""
	LogoFile           *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting_LogoFile    "json:\"logoFile,omitempty\" graphql:\"logoFile\""
	LogoLocalFileID    *string                                                              "json:\"logoLocalFileID,omitempty\" graphql:\"logoLocalFileID\""
	LogoRemoteURL      *string                                                              "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Overview           *string                                                              "json:\"overview,omitempty\" graphql:\"overview\""
	PrimaryColor       *string                                                              "json:\"primaryColor,omitempty\" graphql:\"primaryColor\""
	ThemeMode          *enums.TrustCenterThemeMode                                          "json:\"themeMode,omitempty\" graphql:\"themeMode\""
	Title              *string                                                              "json:\"title,omitempty\" graphql:\"title\""
}

func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting) GetAccentColor() *string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting{}
	}
	return t.AccentColor
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting) GetBackgroundColor() *string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting{}
	}
	return t.BackgroundColor
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting) GetFaviconFile() *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting_FaviconFile {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting{}
	}
	return t.FaviconFile
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting) GetFaviconLocalFileID() *string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting{}
	}
	return t.FaviconLocalFileID
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting) GetFaviconRemoteURL() *string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting{}
	}
	return t.FaviconRemoteURL
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting) GetFont() *string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting{}
	}
	return t.Font
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting) GetForegroundColor() *string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting{}
	}
	return t.ForegroundColor
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting) GetID() string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting{}
	}
	return t.ID
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting) GetLogoFile() *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting_LogoFile {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting{}
	}
	return t.LogoFile
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting) GetLogoLocalFileID() *string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting{}
	}
	return t.LogoLocalFileID
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting) GetLogoRemoteURL() *string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting{}
	}
	return t.LogoRemoteURL
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting) GetOverview() *string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting{}
	}
	return t.Overview
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting) GetPrimaryColor() *string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting{}
	}
	return t.PrimaryColor
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting) GetThemeMode() *enums.TrustCenterThemeMode {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting{}
	}
	return t.ThemeMode
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting) GetTitle() *string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting{}
	}
	return t.Title
}

type CreateTrustCenter_CreateTrustCenter_TrustCenter struct {
	CreatedAt      *time.Time                                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	CustomDomain   *CreateTrustCenter_CreateTrustCenter_TrustCenter_CustomDomain "json:\"customDomain,omitempty\" graphql:\"customDomain\""
	CustomDomainID *string                                                       "json:\"customDomainID,omitempty\" graphql:\"customDomainID\""
	ID             string                                                        "json:\"id\" graphql:\"id\""
	OwnerID        *string                                                       "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Setting        *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting      "json:\"setting,omitempty\" graphql:\"setting\""
	Slug           *string                                                       "json:\"slug,omitempty\" graphql:\"slug\""
	Tags           []string                                                      "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter{}
	}
	return t.CreatedAt
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter) GetCreatedBy() *string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter{}
	}
	return t.CreatedBy
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter) GetCustomDomain() *CreateTrustCenter_CreateTrustCenter_TrustCenter_CustomDomain {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter{}
	}
	return t.CustomDomain
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter) GetCustomDomainID() *string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter{}
	}
	return t.CustomDomainID
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter) GetID() string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter{}
	}
	return t.ID
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter) GetOwnerID() *string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter{}
	}
	return t.OwnerID
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter) GetSetting() *CreateTrustCenter_CreateTrustCenter_TrustCenter_Setting {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter{}
	}
	return t.Setting
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter) GetSlug() *string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter{}
	}
	return t.Slug
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter) GetTags() []string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter{}
	}
	return t.Tags
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter{}
	}
	return t.UpdatedAt
}
func (t *CreateTrustCenter_CreateTrustCenter_TrustCenter) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter_TrustCenter{}
	}
	return t.UpdatedBy
}

type CreateTrustCenter_CreateTrustCenter struct {
	TrustCenter CreateTrustCenter_CreateTrustCenter_TrustCenter "json:\"trustCenter\" graphql:\"trustCenter\""
}

func (t *CreateTrustCenter_CreateTrustCenter) GetTrustCenter() *CreateTrustCenter_CreateTrustCenter_TrustCenter {
	if t == nil {
		t = &CreateTrustCenter_CreateTrustCenter{}
	}
	return &t.TrustCenter
}

type DeleteTrustCenter_DeleteTrustCenter struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteTrustCenter_DeleteTrustCenter) GetDeletedID() string {
	if t == nil {
		t = &DeleteTrustCenter_DeleteTrustCenter{}
	}
	return t.DeletedID
}

type GetAllTrustCenters_TrustCenters_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllTrustCenters_TrustCenters_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllTrustCenters_TrustCenters_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllTrustCenters_TrustCenters_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllTrustCenters_TrustCenters_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_PageInfo{}
	}
	return t.StartCursor
}

type GetAllTrustCenters_TrustCenters_Edges_Node_CustomDomain struct {
	CnameRecord       string  "json:\"cnameRecord\" graphql:\"cnameRecord\""
	DNSVerificationID *string "json:\"dnsVerificationID,omitempty\" graphql:\"dnsVerificationID\""
}

func (t *GetAllTrustCenters_TrustCenters_Edges_Node_CustomDomain) GetCnameRecord() string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node_CustomDomain{}
	}
	return t.CnameRecord
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node_CustomDomain) GetDNSVerificationID() *string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node_CustomDomain{}
	}
	return t.DNSVerificationID
}

type GetAllTrustCenters_TrustCenters_Edges_Node_Setting_LogoFile struct {
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetAllTrustCenters_TrustCenters_Edges_Node_Setting_LogoFile) GetPresignedURL() *string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node_Setting_LogoFile{}
	}
	return t.PresignedURL
}

type GetAllTrustCenters_TrustCenters_Edges_Node_Setting_FaviconFile struct {
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetAllTrustCenters_TrustCenters_Edges_Node_Setting_FaviconFile) GetPresignedURL() *string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node_Setting_FaviconFile{}
	}
	return t.PresignedURL
}

type GetAllTrustCenters_TrustCenters_Edges_Node_Setting struct {
	AccentColor        *string                                                         "json:\"accentColor,omitempty\" graphql:\"accentColor\""
	BackgroundColor    *string                                                         "json:\"backgroundColor,omitempty\" graphql:\"backgroundColor\""
	FaviconFile        *GetAllTrustCenters_TrustCenters_Edges_Node_Setting_FaviconFile "json:\"faviconFile,omitempty\" graphql:\"faviconFile\""
	FaviconLocalFileID *string                                                         "json:\"faviconLocalFileID,omitempty\" graphql:\"faviconLocalFileID\""
	FaviconRemoteURL   *string                                                         "json:\"faviconRemoteURL,omitempty\" graphql:\"faviconRemoteURL\""
	Font               *string                                                         "json:\"font,omitempty\" graphql:\"font\""
	ForegroundColor    *string                                                         "json:\"foregroundColor,omitempty\" graphql:\"foregroundColor\""
	ID                 string                                                          "json:\"id\" graphql:\"id\""
	LogoFile           *GetAllTrustCenters_TrustCenters_Edges_Node_Setting_LogoFile    "json:\"logoFile,omitempty\" graphql:\"logoFile\""
	LogoLocalFileID    *string                                                         "json:\"logoLocalFileID,omitempty\" graphql:\"logoLocalFileID\""
	LogoRemoteURL      *string                                                         "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Overview           *string                                                         "json:\"overview,omitempty\" graphql:\"overview\""
	PrimaryColor       *string                                                         "json:\"primaryColor,omitempty\" graphql:\"primaryColor\""
	ThemeMode          *enums.TrustCenterThemeMode                                     "json:\"themeMode,omitempty\" graphql:\"themeMode\""
	Title              *string                                                         "json:\"title,omitempty\" graphql:\"title\""
}

func (t *GetAllTrustCenters_TrustCenters_Edges_Node_Setting) GetAccentColor() *string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.AccentColor
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node_Setting) GetBackgroundColor() *string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.BackgroundColor
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node_Setting) GetFaviconFile() *GetAllTrustCenters_TrustCenters_Edges_Node_Setting_FaviconFile {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.FaviconFile
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node_Setting) GetFaviconLocalFileID() *string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.FaviconLocalFileID
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node_Setting) GetFaviconRemoteURL() *string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.FaviconRemoteURL
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node_Setting) GetFont() *string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.Font
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node_Setting) GetForegroundColor() *string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.ForegroundColor
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node_Setting) GetID() string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.ID
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node_Setting) GetLogoFile() *GetAllTrustCenters_TrustCenters_Edges_Node_Setting_LogoFile {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.LogoFile
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node_Setting) GetLogoLocalFileID() *string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.LogoLocalFileID
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node_Setting) GetLogoRemoteURL() *string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.LogoRemoteURL
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node_Setting) GetOverview() *string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.Overview
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node_Setting) GetPrimaryColor() *string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.PrimaryColor
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node_Setting) GetThemeMode() *enums.TrustCenterThemeMode {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.ThemeMode
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node_Setting) GetTitle() *string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.Title
}

type GetAllTrustCenters_TrustCenters_Edges_Node struct {
	CreatedAt      *time.Time                                               "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                                  "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	CustomDomain   *GetAllTrustCenters_TrustCenters_Edges_Node_CustomDomain "json:\"customDomain,omitempty\" graphql:\"customDomain\""
	CustomDomainID *string                                                  "json:\"customDomainID,omitempty\" graphql:\"customDomainID\""
	ID             string                                                   "json:\"id\" graphql:\"id\""
	OwnerID        *string                                                  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Setting        *GetAllTrustCenters_TrustCenters_Edges_Node_Setting      "json:\"setting,omitempty\" graphql:\"setting\""
	Slug           *string                                                  "json:\"slug,omitempty\" graphql:\"slug\""
	Tags           []string                                                 "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                                               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                                  "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTrustCenters_TrustCenters_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node) GetCustomDomain() *GetAllTrustCenters_TrustCenters_Edges_Node_CustomDomain {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node{}
	}
	return t.CustomDomain
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node) GetCustomDomainID() *string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node{}
	}
	return t.CustomDomainID
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node) GetSetting() *GetAllTrustCenters_TrustCenters_Edges_Node_Setting {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node{}
	}
	return t.Setting
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node) GetSlug() *string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node{}
	}
	return t.Slug
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTrustCenters_TrustCenters_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTrustCenters_TrustCenters_Edges struct {
	Node *GetAllTrustCenters_TrustCenters_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTrustCenters_TrustCenters_Edges) GetNode() *GetAllTrustCenters_TrustCenters_Edges_Node {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters_Edges{}
	}
	return t.Node
}

type GetAllTrustCenters_TrustCenters struct {
	Edges      []*GetAllTrustCenters_TrustCenters_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllTrustCenters_TrustCenters_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllTrustCenters_TrustCenters) GetEdges() []*GetAllTrustCenters_TrustCenters_Edges {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters{}
	}
	return t.Edges
}
func (t *GetAllTrustCenters_TrustCenters) GetPageInfo() *GetAllTrustCenters_TrustCenters_PageInfo {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters{}
	}
	return &t.PageInfo
}
func (t *GetAllTrustCenters_TrustCenters) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllTrustCenters_TrustCenters{}
	}
	return t.TotalCount
}

type GetTrustCenterByID_TrustCenter_CustomDomain struct {
	CnameRecord       string  "json:\"cnameRecord\" graphql:\"cnameRecord\""
	DNSVerificationID *string "json:\"dnsVerificationID,omitempty\" graphql:\"dnsVerificationID\""
}

func (t *GetTrustCenterByID_TrustCenter_CustomDomain) GetCnameRecord() string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter_CustomDomain{}
	}
	return t.CnameRecord
}
func (t *GetTrustCenterByID_TrustCenter_CustomDomain) GetDNSVerificationID() *string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter_CustomDomain{}
	}
	return t.DNSVerificationID
}

type GetTrustCenterByID_TrustCenter_Setting_LogoFile struct {
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetTrustCenterByID_TrustCenter_Setting_LogoFile) GetPresignedURL() *string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter_Setting_LogoFile{}
	}
	return t.PresignedURL
}

type GetTrustCenterByID_TrustCenter_Setting_FaviconFile struct {
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetTrustCenterByID_TrustCenter_Setting_FaviconFile) GetPresignedURL() *string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter_Setting_FaviconFile{}
	}
	return t.PresignedURL
}

type GetTrustCenterByID_TrustCenter_Setting struct {
	AccentColor        *string                                             "json:\"accentColor,omitempty\" graphql:\"accentColor\""
	BackgroundColor    *string                                             "json:\"backgroundColor,omitempty\" graphql:\"backgroundColor\""
	FaviconFile        *GetTrustCenterByID_TrustCenter_Setting_FaviconFile "json:\"faviconFile,omitempty\" graphql:\"faviconFile\""
	FaviconLocalFileID *string                                             "json:\"faviconLocalFileID,omitempty\" graphql:\"faviconLocalFileID\""
	FaviconRemoteURL   *string                                             "json:\"faviconRemoteURL,omitempty\" graphql:\"faviconRemoteURL\""
	Font               *string                                             "json:\"font,omitempty\" graphql:\"font\""
	ForegroundColor    *string                                             "json:\"foregroundColor,omitempty\" graphql:\"foregroundColor\""
	ID                 string                                              "json:\"id\" graphql:\"id\""
	LogoFile           *GetTrustCenterByID_TrustCenter_Setting_LogoFile    "json:\"logoFile,omitempty\" graphql:\"logoFile\""
	LogoLocalFileID    *string                                             "json:\"logoLocalFileID,omitempty\" graphql:\"logoLocalFileID\""
	LogoRemoteURL      *string                                             "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Overview           *string                                             "json:\"overview,omitempty\" graphql:\"overview\""
	PrimaryColor       *string                                             "json:\"primaryColor,omitempty\" graphql:\"primaryColor\""
	ThemeMode          *enums.TrustCenterThemeMode                         "json:\"themeMode,omitempty\" graphql:\"themeMode\""
	Title              *string                                             "json:\"title,omitempty\" graphql:\"title\""
}

func (t *GetTrustCenterByID_TrustCenter_Setting) GetAccentColor() *string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter_Setting{}
	}
	return t.AccentColor
}
func (t *GetTrustCenterByID_TrustCenter_Setting) GetBackgroundColor() *string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter_Setting{}
	}
	return t.BackgroundColor
}
func (t *GetTrustCenterByID_TrustCenter_Setting) GetFaviconFile() *GetTrustCenterByID_TrustCenter_Setting_FaviconFile {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter_Setting{}
	}
	return t.FaviconFile
}
func (t *GetTrustCenterByID_TrustCenter_Setting) GetFaviconLocalFileID() *string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter_Setting{}
	}
	return t.FaviconLocalFileID
}
func (t *GetTrustCenterByID_TrustCenter_Setting) GetFaviconRemoteURL() *string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter_Setting{}
	}
	return t.FaviconRemoteURL
}
func (t *GetTrustCenterByID_TrustCenter_Setting) GetFont() *string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter_Setting{}
	}
	return t.Font
}
func (t *GetTrustCenterByID_TrustCenter_Setting) GetForegroundColor() *string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter_Setting{}
	}
	return t.ForegroundColor
}
func (t *GetTrustCenterByID_TrustCenter_Setting) GetID() string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter_Setting{}
	}
	return t.ID
}
func (t *GetTrustCenterByID_TrustCenter_Setting) GetLogoFile() *GetTrustCenterByID_TrustCenter_Setting_LogoFile {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter_Setting{}
	}
	return t.LogoFile
}
func (t *GetTrustCenterByID_TrustCenter_Setting) GetLogoLocalFileID() *string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter_Setting{}
	}
	return t.LogoLocalFileID
}
func (t *GetTrustCenterByID_TrustCenter_Setting) GetLogoRemoteURL() *string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter_Setting{}
	}
	return t.LogoRemoteURL
}
func (t *GetTrustCenterByID_TrustCenter_Setting) GetOverview() *string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter_Setting{}
	}
	return t.Overview
}
func (t *GetTrustCenterByID_TrustCenter_Setting) GetPrimaryColor() *string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter_Setting{}
	}
	return t.PrimaryColor
}
func (t *GetTrustCenterByID_TrustCenter_Setting) GetThemeMode() *enums.TrustCenterThemeMode {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter_Setting{}
	}
	return t.ThemeMode
}
func (t *GetTrustCenterByID_TrustCenter_Setting) GetTitle() *string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter_Setting{}
	}
	return t.Title
}

type GetTrustCenterByID_TrustCenter struct {
	CreatedAt      *time.Time                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	CustomDomain   *GetTrustCenterByID_TrustCenter_CustomDomain "json:\"customDomain,omitempty\" graphql:\"customDomain\""
	CustomDomainID *string                                      "json:\"customDomainID,omitempty\" graphql:\"customDomainID\""
	ID             string                                       "json:\"id\" graphql:\"id\""
	OwnerID        *string                                      "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Setting        *GetTrustCenterByID_TrustCenter_Setting      "json:\"setting,omitempty\" graphql:\"setting\""
	Slug           *string                                      "json:\"slug,omitempty\" graphql:\"slug\""
	Tags           []string                                     "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTrustCenterByID_TrustCenter) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter{}
	}
	return t.CreatedAt
}
func (t *GetTrustCenterByID_TrustCenter) GetCreatedBy() *string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter{}
	}
	return t.CreatedBy
}
func (t *GetTrustCenterByID_TrustCenter) GetCustomDomain() *GetTrustCenterByID_TrustCenter_CustomDomain {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter{}
	}
	return t.CustomDomain
}
func (t *GetTrustCenterByID_TrustCenter) GetCustomDomainID() *string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter{}
	}
	return t.CustomDomainID
}
func (t *GetTrustCenterByID_TrustCenter) GetID() string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter{}
	}
	return t.ID
}
func (t *GetTrustCenterByID_TrustCenter) GetOwnerID() *string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter{}
	}
	return t.OwnerID
}
func (t *GetTrustCenterByID_TrustCenter) GetSetting() *GetTrustCenterByID_TrustCenter_Setting {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter{}
	}
	return t.Setting
}
func (t *GetTrustCenterByID_TrustCenter) GetSlug() *string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter{}
	}
	return t.Slug
}
func (t *GetTrustCenterByID_TrustCenter) GetTags() []string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter{}
	}
	return t.Tags
}
func (t *GetTrustCenterByID_TrustCenter) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter{}
	}
	return t.UpdatedAt
}
func (t *GetTrustCenterByID_TrustCenter) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTrustCenterByID_TrustCenter{}
	}
	return t.UpdatedBy
}

type GetTrustCenters_TrustCenters_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetTrustCenters_TrustCenters_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetTrustCenters_TrustCenters_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetTrustCenters_TrustCenters_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetTrustCenters_TrustCenters_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_PageInfo{}
	}
	return t.StartCursor
}

type GetTrustCenters_TrustCenters_Edges_Node_CustomDomain struct {
	CnameRecord       string  "json:\"cnameRecord\" graphql:\"cnameRecord\""
	DNSVerificationID *string "json:\"dnsVerificationID,omitempty\" graphql:\"dnsVerificationID\""
}

func (t *GetTrustCenters_TrustCenters_Edges_Node_CustomDomain) GetCnameRecord() string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node_CustomDomain{}
	}
	return t.CnameRecord
}
func (t *GetTrustCenters_TrustCenters_Edges_Node_CustomDomain) GetDNSVerificationID() *string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node_CustomDomain{}
	}
	return t.DNSVerificationID
}

type GetTrustCenters_TrustCenters_Edges_Node_Setting_LogoFile struct {
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetTrustCenters_TrustCenters_Edges_Node_Setting_LogoFile) GetPresignedURL() *string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node_Setting_LogoFile{}
	}
	return t.PresignedURL
}

type GetTrustCenters_TrustCenters_Edges_Node_Setting_FaviconFile struct {
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetTrustCenters_TrustCenters_Edges_Node_Setting_FaviconFile) GetPresignedURL() *string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node_Setting_FaviconFile{}
	}
	return t.PresignedURL
}

type GetTrustCenters_TrustCenters_Edges_Node_Setting struct {
	AccentColor        *string                                                      "json:\"accentColor,omitempty\" graphql:\"accentColor\""
	BackgroundColor    *string                                                      "json:\"backgroundColor,omitempty\" graphql:\"backgroundColor\""
	FaviconFile        *GetTrustCenters_TrustCenters_Edges_Node_Setting_FaviconFile "json:\"faviconFile,omitempty\" graphql:\"faviconFile\""
	FaviconLocalFileID *string                                                      "json:\"faviconLocalFileID,omitempty\" graphql:\"faviconLocalFileID\""
	FaviconRemoteURL   *string                                                      "json:\"faviconRemoteURL,omitempty\" graphql:\"faviconRemoteURL\""
	Font               *string                                                      "json:\"font,omitempty\" graphql:\"font\""
	ForegroundColor    *string                                                      "json:\"foregroundColor,omitempty\" graphql:\"foregroundColor\""
	ID                 string                                                       "json:\"id\" graphql:\"id\""
	LogoFile           *GetTrustCenters_TrustCenters_Edges_Node_Setting_LogoFile    "json:\"logoFile,omitempty\" graphql:\"logoFile\""
	LogoLocalFileID    *string                                                      "json:\"logoLocalFileID,omitempty\" graphql:\"logoLocalFileID\""
	LogoRemoteURL      *string                                                      "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Overview           *string                                                      "json:\"overview,omitempty\" graphql:\"overview\""
	PrimaryColor       *string                                                      "json:\"primaryColor,omitempty\" graphql:\"primaryColor\""
	ThemeMode          *enums.TrustCenterThemeMode                                  "json:\"themeMode,omitempty\" graphql:\"themeMode\""
	Title              *string                                                      "json:\"title,omitempty\" graphql:\"title\""
}

func (t *GetTrustCenters_TrustCenters_Edges_Node_Setting) GetAccentColor() *string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.AccentColor
}
func (t *GetTrustCenters_TrustCenters_Edges_Node_Setting) GetBackgroundColor() *string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.BackgroundColor
}
func (t *GetTrustCenters_TrustCenters_Edges_Node_Setting) GetFaviconFile() *GetTrustCenters_TrustCenters_Edges_Node_Setting_FaviconFile {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.FaviconFile
}
func (t *GetTrustCenters_TrustCenters_Edges_Node_Setting) GetFaviconLocalFileID() *string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.FaviconLocalFileID
}
func (t *GetTrustCenters_TrustCenters_Edges_Node_Setting) GetFaviconRemoteURL() *string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.FaviconRemoteURL
}
func (t *GetTrustCenters_TrustCenters_Edges_Node_Setting) GetFont() *string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.Font
}
func (t *GetTrustCenters_TrustCenters_Edges_Node_Setting) GetForegroundColor() *string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.ForegroundColor
}
func (t *GetTrustCenters_TrustCenters_Edges_Node_Setting) GetID() string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.ID
}
func (t *GetTrustCenters_TrustCenters_Edges_Node_Setting) GetLogoFile() *GetTrustCenters_TrustCenters_Edges_Node_Setting_LogoFile {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.LogoFile
}
func (t *GetTrustCenters_TrustCenters_Edges_Node_Setting) GetLogoLocalFileID() *string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.LogoLocalFileID
}
func (t *GetTrustCenters_TrustCenters_Edges_Node_Setting) GetLogoRemoteURL() *string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.LogoRemoteURL
}
func (t *GetTrustCenters_TrustCenters_Edges_Node_Setting) GetOverview() *string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.Overview
}
func (t *GetTrustCenters_TrustCenters_Edges_Node_Setting) GetPrimaryColor() *string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.PrimaryColor
}
func (t *GetTrustCenters_TrustCenters_Edges_Node_Setting) GetThemeMode() *enums.TrustCenterThemeMode {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.ThemeMode
}
func (t *GetTrustCenters_TrustCenters_Edges_Node_Setting) GetTitle() *string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node_Setting{}
	}
	return t.Title
}

type GetTrustCenters_TrustCenters_Edges_Node struct {
	CreatedAt      *time.Time                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	CustomDomain   *GetTrustCenters_TrustCenters_Edges_Node_CustomDomain "json:\"customDomain,omitempty\" graphql:\"customDomain\""
	CustomDomainID *string                                               "json:\"customDomainID,omitempty\" graphql:\"customDomainID\""
	ID             string                                                "json:\"id\" graphql:\"id\""
	OwnerID        *string                                               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Setting        *GetTrustCenters_TrustCenters_Edges_Node_Setting      "json:\"setting,omitempty\" graphql:\"setting\""
	Slug           *string                                               "json:\"slug,omitempty\" graphql:\"slug\""
	Tags           []string                                              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTrustCenters_TrustCenters_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTrustCenters_TrustCenters_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTrustCenters_TrustCenters_Edges_Node) GetCustomDomain() *GetTrustCenters_TrustCenters_Edges_Node_CustomDomain {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node{}
	}
	return t.CustomDomain
}
func (t *GetTrustCenters_TrustCenters_Edges_Node) GetCustomDomainID() *string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node{}
	}
	return t.CustomDomainID
}
func (t *GetTrustCenters_TrustCenters_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node{}
	}
	return t.ID
}
func (t *GetTrustCenters_TrustCenters_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetTrustCenters_TrustCenters_Edges_Node) GetSetting() *GetTrustCenters_TrustCenters_Edges_Node_Setting {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node{}
	}
	return t.Setting
}
func (t *GetTrustCenters_TrustCenters_Edges_Node) GetSlug() *string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node{}
	}
	return t.Slug
}
func (t *GetTrustCenters_TrustCenters_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node{}
	}
	return t.Tags
}
func (t *GetTrustCenters_TrustCenters_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTrustCenters_TrustCenters_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTrustCenters_TrustCenters_Edges struct {
	Node *GetTrustCenters_TrustCenters_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTrustCenters_TrustCenters_Edges) GetNode() *GetTrustCenters_TrustCenters_Edges_Node {
	if t == nil {
		t = &GetTrustCenters_TrustCenters_Edges{}
	}
	return t.Node
}

type GetTrustCenters_TrustCenters struct {
	Edges      []*GetTrustCenters_TrustCenters_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetTrustCenters_TrustCenters_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetTrustCenters_TrustCenters) GetEdges() []*GetTrustCenters_TrustCenters_Edges {
	if t == nil {
		t = &GetTrustCenters_TrustCenters{}
	}
	return t.Edges
}
func (t *GetTrustCenters_TrustCenters) GetPageInfo() *GetTrustCenters_TrustCenters_PageInfo {
	if t == nil {
		t = &GetTrustCenters_TrustCenters{}
	}
	return &t.PageInfo
}
func (t *GetTrustCenters_TrustCenters) GetTotalCount() int64 {
	if t == nil {
		t = &GetTrustCenters_TrustCenters{}
	}
	return t.TotalCount
}

type UpdateTrustCenter_UpdateTrustCenter_TrustCenter_CustomDomain struct {
	CnameRecord       string  "json:\"cnameRecord\" graphql:\"cnameRecord\""
	DNSVerificationID *string "json:\"dnsVerificationID,omitempty\" graphql:\"dnsVerificationID\""
}

func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_CustomDomain) GetCnameRecord() string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter_CustomDomain{}
	}
	return t.CnameRecord
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_CustomDomain) GetDNSVerificationID() *string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter_CustomDomain{}
	}
	return t.DNSVerificationID
}

type UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting_LogoFile struct {
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting_LogoFile) GetPresignedURL() *string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting_LogoFile{}
	}
	return t.PresignedURL
}

type UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting_FaviconFile struct {
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting_FaviconFile) GetPresignedURL() *string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting_FaviconFile{}
	}
	return t.PresignedURL
}

type UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting struct {
	AccentColor        *string                                                              "json:\"accentColor,omitempty\" graphql:\"accentColor\""
	BackgroundColor    *string                                                              "json:\"backgroundColor,omitempty\" graphql:\"backgroundColor\""
	FaviconFile        *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting_FaviconFile "json:\"faviconFile,omitempty\" graphql:\"faviconFile\""
	FaviconLocalFileID *string                                                              "json:\"faviconLocalFileID,omitempty\" graphql:\"faviconLocalFileID\""
	FaviconRemoteURL   *string                                                              "json:\"faviconRemoteURL,omitempty\" graphql:\"faviconRemoteURL\""
	Font               *string                                                              "json:\"font,omitempty\" graphql:\"font\""
	ForegroundColor    *string                                                              "json:\"foregroundColor,omitempty\" graphql:\"foregroundColor\""
	ID                 string                                                               "json:\"id\" graphql:\"id\""
	LogoFile           *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting_LogoFile    "json:\"logoFile,omitempty\" graphql:\"logoFile\""
	LogoLocalFileID    *string                                                              "json:\"logoLocalFileID,omitempty\" graphql:\"logoLocalFileID\""
	LogoRemoteURL      *string                                                              "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Overview           *string                                                              "json:\"overview,omitempty\" graphql:\"overview\""
	PrimaryColor       *string                                                              "json:\"primaryColor,omitempty\" graphql:\"primaryColor\""
	ThemeMode          *enums.TrustCenterThemeMode                                          "json:\"themeMode,omitempty\" graphql:\"themeMode\""
	Title              *string                                                              "json:\"title,omitempty\" graphql:\"title\""
}

func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting) GetAccentColor() *string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting{}
	}
	return t.AccentColor
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting) GetBackgroundColor() *string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting{}
	}
	return t.BackgroundColor
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting) GetFaviconFile() *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting_FaviconFile {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting{}
	}
	return t.FaviconFile
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting) GetFaviconLocalFileID() *string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting{}
	}
	return t.FaviconLocalFileID
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting) GetFaviconRemoteURL() *string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting{}
	}
	return t.FaviconRemoteURL
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting) GetFont() *string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting{}
	}
	return t.Font
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting) GetForegroundColor() *string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting{}
	}
	return t.ForegroundColor
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting) GetID() string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting{}
	}
	return t.ID
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting) GetLogoFile() *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting_LogoFile {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting{}
	}
	return t.LogoFile
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting) GetLogoLocalFileID() *string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting{}
	}
	return t.LogoLocalFileID
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting) GetLogoRemoteURL() *string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting{}
	}
	return t.LogoRemoteURL
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting) GetOverview() *string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting{}
	}
	return t.Overview
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting) GetPrimaryColor() *string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting{}
	}
	return t.PrimaryColor
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting) GetThemeMode() *enums.TrustCenterThemeMode {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting{}
	}
	return t.ThemeMode
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting) GetTitle() *string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting{}
	}
	return t.Title
}

type UpdateTrustCenter_UpdateTrustCenter_TrustCenter struct {
	CreatedAt      *time.Time                                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	CustomDomain   *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_CustomDomain "json:\"customDomain,omitempty\" graphql:\"customDomain\""
	CustomDomainID *string                                                       "json:\"customDomainID,omitempty\" graphql:\"customDomainID\""
	ID             string                                                        "json:\"id\" graphql:\"id\""
	OwnerID        *string                                                       "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Setting        *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting      "json:\"setting,omitempty\" graphql:\"setting\""
	Slug           *string                                                       "json:\"slug,omitempty\" graphql:\"slug\""
	Tags           []string                                                      "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter{}
	}
	return t.CreatedAt
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter{}
	}
	return t.CreatedBy
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter) GetCustomDomain() *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_CustomDomain {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter{}
	}
	return t.CustomDomain
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter) GetCustomDomainID() *string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter{}
	}
	return t.CustomDomainID
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter) GetID() string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter{}
	}
	return t.ID
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter) GetOwnerID() *string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter{}
	}
	return t.OwnerID
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter) GetSetting() *UpdateTrustCenter_UpdateTrustCenter_TrustCenter_Setting {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter{}
	}
	return t.Setting
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter) GetSlug() *string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter{}
	}
	return t.Slug
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter) GetTags() []string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter{}
	}
	return t.Tags
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter{}
	}
	return t.UpdatedAt
}
func (t *UpdateTrustCenter_UpdateTrustCenter_TrustCenter) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter_TrustCenter{}
	}
	return t.UpdatedBy
}

type UpdateTrustCenter_UpdateTrustCenter struct {
	TrustCenter UpdateTrustCenter_UpdateTrustCenter_TrustCenter "json:\"trustCenter\" graphql:\"trustCenter\""
}

func (t *UpdateTrustCenter_UpdateTrustCenter) GetTrustCenter() *UpdateTrustCenter_UpdateTrustCenter_TrustCenter {
	if t == nil {
		t = &UpdateTrustCenter_UpdateTrustCenter{}
	}
	return &t.TrustCenter
}

type CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances_Standard struct {
	Description          *string  "json:\"description,omitempty\" graphql:\"description\""
	Domains              []string "json:\"domains,omitempty\" graphql:\"domains\""
	GoverningBody        *string  "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	GoverningBodyLogoURL *string  "json:\"governingBodyLogoURL,omitempty\" graphql:\"governingBodyLogoURL\""
	Link                 *string  "json:\"link,omitempty\" graphql:\"link\""
	Name                 string   "json:\"name\" graphql:\"name\""
	ShortName            *string  "json:\"shortName,omitempty\" graphql:\"shortName\""
	StandardType         *string  "json:\"standardType,omitempty\" graphql:\"standardType\""
	Version              *string  "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances_Standard) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances_Standard{}
	}
	return t.Description
}
func (t *CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances_Standard) GetDomains() []string {
	if t == nil {
		t = &CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances_Standard{}
	}
	return t.Domains
}
func (t *CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances_Standard) GetGoverningBody() *string {
	if t == nil {
		t = &CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances_Standard{}
	}
	return t.GoverningBody
}
func (t *CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances_Standard) GetGoverningBodyLogoURL() *string {
	if t == nil {
		t = &CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances_Standard{}
	}
	return t.GoverningBodyLogoURL
}
func (t *CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances_Standard) GetLink() *string {
	if t == nil {
		t = &CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances_Standard{}
	}
	return t.Link
}
func (t *CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances_Standard) GetName() string {
	if t == nil {
		t = &CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances_Standard{}
	}
	return t.Name
}
func (t *CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances_Standard) GetShortName() *string {
	if t == nil {
		t = &CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances_Standard{}
	}
	return t.ShortName
}
func (t *CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances_Standard) GetStandardType() *string {
	if t == nil {
		t = &CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances_Standard{}
	}
	return t.StandardType
}
func (t *CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances_Standard) GetVersion() *string {
	if t == nil {
		t = &CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances_Standard{}
	}
	return t.Version
}

type CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances struct {
	CreatedAt *time.Time                                                                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                                                                               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string                                                                                                "json:\"id\" graphql:\"id\""
	Standard  CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances_Standard "json:\"standard\" graphql:\"standard\""
	Tags      []string                                                                                              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time                                                                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                                                                               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances) GetID() string {
	if t == nil {
		t = &CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances{}
	}
	return t.ID
}
func (t *CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances) GetStandard() *CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances_Standard {
	if t == nil {
		t = &CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances{}
	}
	return &t.Standard
}
func (t *CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances{}
	}
	return t.Tags
}
func (t *CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance struct {
	TrustCenterCompliances []*CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances "json:\"trustCenterCompliances,omitempty\" graphql:\"trustCenterCompliances\""
}

func (t *CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance) GetTrustCenterCompliances() []*CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance_TrustCenterCompliances {
	if t == nil {
		t = &CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance{}
	}
	return t.TrustCenterCompliances
}

type CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances_Standard struct {
	Description          *string  "json:\"description,omitempty\" graphql:\"description\""
	Domains              []string "json:\"domains,omitempty\" graphql:\"domains\""
	GoverningBody        *string  "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	GoverningBodyLogoURL *string  "json:\"governingBodyLogoURL,omitempty\" graphql:\"governingBodyLogoURL\""
	Link                 *string  "json:\"link,omitempty\" graphql:\"link\""
	Name                 string   "json:\"name\" graphql:\"name\""
	ShortName            *string  "json:\"shortName,omitempty\" graphql:\"shortName\""
	StandardType         *string  "json:\"standardType,omitempty\" graphql:\"standardType\""
	Version              *string  "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances_Standard) GetDescription() *string {
	if t == nil {
		t = &CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances_Standard{}
	}
	return t.Description
}
func (t *CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances_Standard) GetDomains() []string {
	if t == nil {
		t = &CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances_Standard{}
	}
	return t.Domains
}
func (t *CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances_Standard) GetGoverningBody() *string {
	if t == nil {
		t = &CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances_Standard{}
	}
	return t.GoverningBody
}
func (t *CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances_Standard) GetGoverningBodyLogoURL() *string {
	if t == nil {
		t = &CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances_Standard{}
	}
	return t.GoverningBodyLogoURL
}
func (t *CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances_Standard) GetLink() *string {
	if t == nil {
		t = &CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances_Standard{}
	}
	return t.Link
}
func (t *CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances_Standard) GetName() string {
	if t == nil {
		t = &CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances_Standard{}
	}
	return t.Name
}
func (t *CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances_Standard) GetShortName() *string {
	if t == nil {
		t = &CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances_Standard{}
	}
	return t.ShortName
}
func (t *CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances_Standard) GetStandardType() *string {
	if t == nil {
		t = &CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances_Standard{}
	}
	return t.StandardType
}
func (t *CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances_Standard) GetVersion() *string {
	if t == nil {
		t = &CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances_Standard{}
	}
	return t.Version
}

type CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances struct {
	CreatedAt *time.Time                                                                                      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                                                                         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string                                                                                          "json:\"id\" graphql:\"id\""
	Standard  CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances_Standard "json:\"standard\" graphql:\"standard\""
	Tags      []string                                                                                        "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time                                                                                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                                                                         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances{}
	}
	return t.CreatedAt
}
func (t *CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances{}
	}
	return t.CreatedBy
}
func (t *CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances) GetID() string {
	if t == nil {
		t = &CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances{}
	}
	return t.ID
}
func (t *CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances) GetStandard() *CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances_Standard {
	if t == nil {
		t = &CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances{}
	}
	return &t.Standard
}
func (t *CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances) GetTags() []string {
	if t == nil {
		t = &CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances{}
	}
	return t.Tags
}
func (t *CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances{}
	}
	return t.UpdatedBy
}

type CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance struct {
	TrustCenterCompliances []*CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances "json:\"trustCenterCompliances,omitempty\" graphql:\"trustCenterCompliances\""
}

func (t *CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance) GetTrustCenterCompliances() []*CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance_TrustCenterCompliances {
	if t == nil {
		t = &CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance{}
	}
	return t.TrustCenterCompliances
}

type CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance_Standard struct {
	Description          *string  "json:\"description,omitempty\" graphql:\"description\""
	Domains              []string "json:\"domains,omitempty\" graphql:\"domains\""
	GoverningBody        *string  "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	GoverningBodyLogoURL *string  "json:\"governingBodyLogoURL,omitempty\" graphql:\"governingBodyLogoURL\""
	Link                 *string  "json:\"link,omitempty\" graphql:\"link\""
	Name                 string   "json:\"name\" graphql:\"name\""
	ShortName            *string  "json:\"shortName,omitempty\" graphql:\"shortName\""
	StandardType         *string  "json:\"standardType,omitempty\" graphql:\"standardType\""
	Version              *string  "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance_Standard) GetDescription() *string {
	if t == nil {
		t = &CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance_Standard{}
	}
	return t.Description
}
func (t *CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance_Standard) GetDomains() []string {
	if t == nil {
		t = &CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance_Standard{}
	}
	return t.Domains
}
func (t *CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance_Standard) GetGoverningBody() *string {
	if t == nil {
		t = &CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance_Standard{}
	}
	return t.GoverningBody
}
func (t *CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance_Standard) GetGoverningBodyLogoURL() *string {
	if t == nil {
		t = &CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance_Standard{}
	}
	return t.GoverningBodyLogoURL
}
func (t *CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance_Standard) GetLink() *string {
	if t == nil {
		t = &CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance_Standard{}
	}
	return t.Link
}
func (t *CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance_Standard) GetName() string {
	if t == nil {
		t = &CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance_Standard{}
	}
	return t.Name
}
func (t *CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance_Standard) GetShortName() *string {
	if t == nil {
		t = &CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance_Standard{}
	}
	return t.ShortName
}
func (t *CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance_Standard) GetStandardType() *string {
	if t == nil {
		t = &CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance_Standard{}
	}
	return t.StandardType
}
func (t *CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance_Standard) GetVersion() *string {
	if t == nil {
		t = &CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance_Standard{}
	}
	return t.Version
}

type CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance struct {
	CreatedAt *time.Time                                                                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                                                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string                                                                                 "json:\"id\" graphql:\"id\""
	Standard  CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance_Standard "json:\"standard\" graphql:\"standard\""
	Tags      []string                                                                               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time                                                                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                                                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance{}
	}
	return t.CreatedAt
}
func (t *CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance) GetCreatedBy() *string {
	if t == nil {
		t = &CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance{}
	}
	return t.CreatedBy
}
func (t *CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance) GetID() string {
	if t == nil {
		t = &CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance{}
	}
	return t.ID
}
func (t *CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance) GetStandard() *CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance_Standard {
	if t == nil {
		t = &CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance{}
	}
	return &t.Standard
}
func (t *CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance) GetTags() []string {
	if t == nil {
		t = &CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance{}
	}
	return t.Tags
}
func (t *CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance{}
	}
	return t.UpdatedAt
}
func (t *CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance{}
	}
	return t.UpdatedBy
}

type CreateTrustCenterCompliance_CreateTrustCenterCompliance struct {
	TrustCenterCompliance CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance "json:\"trustCenterCompliance\" graphql:\"trustCenterCompliance\""
}

func (t *CreateTrustCenterCompliance_CreateTrustCenterCompliance) GetTrustCenterCompliance() *CreateTrustCenterCompliance_CreateTrustCenterCompliance_TrustCenterCompliance {
	if t == nil {
		t = &CreateTrustCenterCompliance_CreateTrustCenterCompliance{}
	}
	return &t.TrustCenterCompliance
}

type DeleteTrustCenterCompliance_DeleteTrustCenterCompliance struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteTrustCenterCompliance_DeleteTrustCenterCompliance) GetDeletedID() string {
	if t == nil {
		t = &DeleteTrustCenterCompliance_DeleteTrustCenterCompliance{}
	}
	return t.DeletedID
}

type GetAllTrustCenterCompliances_TrustCenterCompliances_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllTrustCenterCompliances_TrustCenterCompliances_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllTrustCenterCompliances_TrustCenterCompliances_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllTrustCenterCompliances_TrustCenterCompliances_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllTrustCenterCompliances_TrustCenterCompliances_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances_PageInfo{}
	}
	return t.StartCursor
}

type GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard struct {
	Description          *string  "json:\"description,omitempty\" graphql:\"description\""
	Domains              []string "json:\"domains,omitempty\" graphql:\"domains\""
	GoverningBody        *string  "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	GoverningBodyLogoURL *string  "json:\"governingBodyLogoURL,omitempty\" graphql:\"governingBodyLogoURL\""
	Link                 *string  "json:\"link,omitempty\" graphql:\"link\""
	Name                 string   "json:\"name\" graphql:\"name\""
	ShortName            *string  "json:\"shortName,omitempty\" graphql:\"shortName\""
	StandardType         *string  "json:\"standardType,omitempty\" graphql:\"standardType\""
	Version              *string  "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard) GetDescription() *string {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard{}
	}
	return t.Description
}
func (t *GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard) GetDomains() []string {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard{}
	}
	return t.Domains
}
func (t *GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard) GetGoverningBody() *string {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard{}
	}
	return t.GoverningBody
}
func (t *GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard) GetGoverningBodyLogoURL() *string {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard{}
	}
	return t.GoverningBodyLogoURL
}
func (t *GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard) GetLink() *string {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard{}
	}
	return t.Link
}
func (t *GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard) GetName() string {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard{}
	}
	return t.Name
}
func (t *GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard) GetShortName() *string {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard{}
	}
	return t.ShortName
}
func (t *GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard) GetStandardType() *string {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard{}
	}
	return t.StandardType
}
func (t *GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard) GetVersion() *string {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard{}
	}
	return t.Version
}

type GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node struct {
	CreatedAt *time.Time                                                              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                                                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string                                                                  "json:\"id\" graphql:\"id\""
	Standard  GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard "json:\"standard\" graphql:\"standard\""
	Tags      []string                                                                "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time                                                              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                                                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node) GetStandard() *GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node{}
	}
	return &t.Standard
}
func (t *GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTrustCenterCompliances_TrustCenterCompliances_Edges struct {
	Node *GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTrustCenterCompliances_TrustCenterCompliances_Edges) GetNode() *GetAllTrustCenterCompliances_TrustCenterCompliances_Edges_Node {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances_Edges{}
	}
	return t.Node
}

type GetAllTrustCenterCompliances_TrustCenterCompliances struct {
	Edges      []*GetAllTrustCenterCompliances_TrustCenterCompliances_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllTrustCenterCompliances_TrustCenterCompliances_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                        "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllTrustCenterCompliances_TrustCenterCompliances) GetEdges() []*GetAllTrustCenterCompliances_TrustCenterCompliances_Edges {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances{}
	}
	return t.Edges
}
func (t *GetAllTrustCenterCompliances_TrustCenterCompliances) GetPageInfo() *GetAllTrustCenterCompliances_TrustCenterCompliances_PageInfo {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances{}
	}
	return &t.PageInfo
}
func (t *GetAllTrustCenterCompliances_TrustCenterCompliances) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllTrustCenterCompliances_TrustCenterCompliances{}
	}
	return t.TotalCount
}

type GetTrustCenterComplianceByID_TrustCenterCompliance_Standard struct {
	Description          *string  "json:\"description,omitempty\" graphql:\"description\""
	Domains              []string "json:\"domains,omitempty\" graphql:\"domains\""
	GoverningBody        *string  "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	GoverningBodyLogoURL *string  "json:\"governingBodyLogoURL,omitempty\" graphql:\"governingBodyLogoURL\""
	Link                 *string  "json:\"link,omitempty\" graphql:\"link\""
	Name                 string   "json:\"name\" graphql:\"name\""
	ShortName            *string  "json:\"shortName,omitempty\" graphql:\"shortName\""
	StandardType         *string  "json:\"standardType,omitempty\" graphql:\"standardType\""
	Version              *string  "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetTrustCenterComplianceByID_TrustCenterCompliance_Standard) GetDescription() *string {
	if t == nil {
		t = &GetTrustCenterComplianceByID_TrustCenterCompliance_Standard{}
	}
	return t.Description
}
func (t *GetTrustCenterComplianceByID_TrustCenterCompliance_Standard) GetDomains() []string {
	if t == nil {
		t = &GetTrustCenterComplianceByID_TrustCenterCompliance_Standard{}
	}
	return t.Domains
}
func (t *GetTrustCenterComplianceByID_TrustCenterCompliance_Standard) GetGoverningBody() *string {
	if t == nil {
		t = &GetTrustCenterComplianceByID_TrustCenterCompliance_Standard{}
	}
	return t.GoverningBody
}
func (t *GetTrustCenterComplianceByID_TrustCenterCompliance_Standard) GetGoverningBodyLogoURL() *string {
	if t == nil {
		t = &GetTrustCenterComplianceByID_TrustCenterCompliance_Standard{}
	}
	return t.GoverningBodyLogoURL
}
func (t *GetTrustCenterComplianceByID_TrustCenterCompliance_Standard) GetLink() *string {
	if t == nil {
		t = &GetTrustCenterComplianceByID_TrustCenterCompliance_Standard{}
	}
	return t.Link
}
func (t *GetTrustCenterComplianceByID_TrustCenterCompliance_Standard) GetName() string {
	if t == nil {
		t = &GetTrustCenterComplianceByID_TrustCenterCompliance_Standard{}
	}
	return t.Name
}
func (t *GetTrustCenterComplianceByID_TrustCenterCompliance_Standard) GetShortName() *string {
	if t == nil {
		t = &GetTrustCenterComplianceByID_TrustCenterCompliance_Standard{}
	}
	return t.ShortName
}
func (t *GetTrustCenterComplianceByID_TrustCenterCompliance_Standard) GetStandardType() *string {
	if t == nil {
		t = &GetTrustCenterComplianceByID_TrustCenterCompliance_Standard{}
	}
	return t.StandardType
}
func (t *GetTrustCenterComplianceByID_TrustCenterCompliance_Standard) GetVersion() *string {
	if t == nil {
		t = &GetTrustCenterComplianceByID_TrustCenterCompliance_Standard{}
	}
	return t.Version
}

type GetTrustCenterComplianceByID_TrustCenterCompliance struct {
	CreatedAt *time.Time                                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string                                                      "json:\"id\" graphql:\"id\""
	Standard  GetTrustCenterComplianceByID_TrustCenterCompliance_Standard "json:\"standard\" graphql:\"standard\""
	Tags      []string                                                    "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time                                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTrustCenterComplianceByID_TrustCenterCompliance) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterComplianceByID_TrustCenterCompliance{}
	}
	return t.CreatedAt
}
func (t *GetTrustCenterComplianceByID_TrustCenterCompliance) GetCreatedBy() *string {
	if t == nil {
		t = &GetTrustCenterComplianceByID_TrustCenterCompliance{}
	}
	return t.CreatedBy
}
func (t *GetTrustCenterComplianceByID_TrustCenterCompliance) GetID() string {
	if t == nil {
		t = &GetTrustCenterComplianceByID_TrustCenterCompliance{}
	}
	return t.ID
}
func (t *GetTrustCenterComplianceByID_TrustCenterCompliance) GetStandard() *GetTrustCenterComplianceByID_TrustCenterCompliance_Standard {
	if t == nil {
		t = &GetTrustCenterComplianceByID_TrustCenterCompliance{}
	}
	return &t.Standard
}
func (t *GetTrustCenterComplianceByID_TrustCenterCompliance) GetTags() []string {
	if t == nil {
		t = &GetTrustCenterComplianceByID_TrustCenterCompliance{}
	}
	return t.Tags
}
func (t *GetTrustCenterComplianceByID_TrustCenterCompliance) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterComplianceByID_TrustCenterCompliance{}
	}
	return t.UpdatedAt
}
func (t *GetTrustCenterComplianceByID_TrustCenterCompliance) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTrustCenterComplianceByID_TrustCenterCompliance{}
	}
	return t.UpdatedBy
}

type GetTrustCenterCompliances_TrustCenterCompliances_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetTrustCenterCompliances_TrustCenterCompliances_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetTrustCenterCompliances_TrustCenterCompliances_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetTrustCenterCompliances_TrustCenterCompliances_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetTrustCenterCompliances_TrustCenterCompliances_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances_PageInfo{}
	}
	return t.StartCursor
}

type GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard struct {
	Description          *string  "json:\"description,omitempty\" graphql:\"description\""
	Domains              []string "json:\"domains,omitempty\" graphql:\"domains\""
	GoverningBody        *string  "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	GoverningBodyLogoURL *string  "json:\"governingBodyLogoURL,omitempty\" graphql:\"governingBodyLogoURL\""
	Link                 *string  "json:\"link,omitempty\" graphql:\"link\""
	Name                 string   "json:\"name\" graphql:\"name\""
	ShortName            *string  "json:\"shortName,omitempty\" graphql:\"shortName\""
	StandardType         *string  "json:\"standardType,omitempty\" graphql:\"standardType\""
	Version              *string  "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard) GetDescription() *string {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard{}
	}
	return t.Description
}
func (t *GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard) GetDomains() []string {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard{}
	}
	return t.Domains
}
func (t *GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard) GetGoverningBody() *string {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard{}
	}
	return t.GoverningBody
}
func (t *GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard) GetGoverningBodyLogoURL() *string {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard{}
	}
	return t.GoverningBodyLogoURL
}
func (t *GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard) GetLink() *string {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard{}
	}
	return t.Link
}
func (t *GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard) GetName() string {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard{}
	}
	return t.Name
}
func (t *GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard) GetShortName() *string {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard{}
	}
	return t.ShortName
}
func (t *GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard) GetStandardType() *string {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard{}
	}
	return t.StandardType
}
func (t *GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard) GetVersion() *string {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard{}
	}
	return t.Version
}

type GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node struct {
	CreatedAt *time.Time                                                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                                              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string                                                               "json:\"id\" graphql:\"id\""
	Standard  GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard "json:\"standard\" graphql:\"standard\""
	Tags      []string                                                             "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time                                                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                                              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node{}
	}
	return t.ID
}
func (t *GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node) GetStandard() *GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node_Standard {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node{}
	}
	return &t.Standard
}
func (t *GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node{}
	}
	return t.Tags
}
func (t *GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTrustCenterCompliances_TrustCenterCompliances_Edges struct {
	Node *GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTrustCenterCompliances_TrustCenterCompliances_Edges) GetNode() *GetTrustCenterCompliances_TrustCenterCompliances_Edges_Node {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances_Edges{}
	}
	return t.Node
}

type GetTrustCenterCompliances_TrustCenterCompliances struct {
	Edges      []*GetTrustCenterCompliances_TrustCenterCompliances_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetTrustCenterCompliances_TrustCenterCompliances_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetTrustCenterCompliances_TrustCenterCompliances) GetEdges() []*GetTrustCenterCompliances_TrustCenterCompliances_Edges {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances{}
	}
	return t.Edges
}
func (t *GetTrustCenterCompliances_TrustCenterCompliances) GetPageInfo() *GetTrustCenterCompliances_TrustCenterCompliances_PageInfo {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances{}
	}
	return &t.PageInfo
}
func (t *GetTrustCenterCompliances_TrustCenterCompliances) GetTotalCount() int64 {
	if t == nil {
		t = &GetTrustCenterCompliances_TrustCenterCompliances{}
	}
	return t.TotalCount
}

type UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance_Standard struct {
	Description          *string  "json:\"description,omitempty\" graphql:\"description\""
	Domains              []string "json:\"domains,omitempty\" graphql:\"domains\""
	GoverningBody        *string  "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	GoverningBodyLogoURL *string  "json:\"governingBodyLogoURL,omitempty\" graphql:\"governingBodyLogoURL\""
	Link                 *string  "json:\"link,omitempty\" graphql:\"link\""
	Name                 string   "json:\"name\" graphql:\"name\""
	ShortName            *string  "json:\"shortName,omitempty\" graphql:\"shortName\""
	StandardType         *string  "json:\"standardType,omitempty\" graphql:\"standardType\""
	Version              *string  "json:\"version,omitempty\" graphql:\"version\""
}

func (t *UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance_Standard) GetDescription() *string {
	if t == nil {
		t = &UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance_Standard{}
	}
	return t.Description
}
func (t *UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance_Standard) GetDomains() []string {
	if t == nil {
		t = &UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance_Standard{}
	}
	return t.Domains
}
func (t *UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance_Standard) GetGoverningBody() *string {
	if t == nil {
		t = &UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance_Standard{}
	}
	return t.GoverningBody
}
func (t *UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance_Standard) GetGoverningBodyLogoURL() *string {
	if t == nil {
		t = &UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance_Standard{}
	}
	return t.GoverningBodyLogoURL
}
func (t *UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance_Standard) GetLink() *string {
	if t == nil {
		t = &UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance_Standard{}
	}
	return t.Link
}
func (t *UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance_Standard) GetName() string {
	if t == nil {
		t = &UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance_Standard{}
	}
	return t.Name
}
func (t *UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance_Standard) GetShortName() *string {
	if t == nil {
		t = &UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance_Standard{}
	}
	return t.ShortName
}
func (t *UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance_Standard) GetStandardType() *string {
	if t == nil {
		t = &UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance_Standard{}
	}
	return t.StandardType
}
func (t *UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance_Standard) GetVersion() *string {
	if t == nil {
		t = &UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance_Standard{}
	}
	return t.Version
}

type UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance struct {
	CreatedAt *time.Time                                                                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                                                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string                                                                                 "json:\"id\" graphql:\"id\""
	Standard  UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance_Standard "json:\"standard\" graphql:\"standard\""
	Tags      []string                                                                               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time                                                                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                                                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance{}
	}
	return t.CreatedAt
}
func (t *UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance{}
	}
	return t.CreatedBy
}
func (t *UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance) GetID() string {
	if t == nil {
		t = &UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance{}
	}
	return t.ID
}
func (t *UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance) GetStandard() *UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance_Standard {
	if t == nil {
		t = &UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance{}
	}
	return &t.Standard
}
func (t *UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance) GetTags() []string {
	if t == nil {
		t = &UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance{}
	}
	return t.Tags
}
func (t *UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance{}
	}
	return t.UpdatedAt
}
func (t *UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance{}
	}
	return t.UpdatedBy
}

type UpdateTrustCenterCompliance_UpdateTrustCenterCompliance struct {
	TrustCenterCompliance UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance "json:\"trustCenterCompliance\" graphql:\"trustCenterCompliance\""
}

func (t *UpdateTrustCenterCompliance_UpdateTrustCenterCompliance) GetTrustCenterCompliance() *UpdateTrustCenterCompliance_UpdateTrustCenterCompliance_TrustCenterCompliance {
	if t == nil {
		t = &UpdateTrustCenterCompliance_UpdateTrustCenterCompliance{}
	}
	return &t.TrustCenterCompliance
}

type GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges struct {
	Node *GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges) GetNode() *GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node {
	if t == nil {
		t = &GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges{}
	}
	return t.Node
}

type GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories struct {
	Edges      []*GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                                        "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories) GetEdges() []*GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges {
	if t == nil {
		t = &GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories{}
	}
	return t.Edges
}
func (t *GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories) GetPageInfo() *GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories_PageInfo {
	if t == nil {
		t = &GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories{}
	}
	return t.TotalCount
}

type GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges struct {
	Node *GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges) GetNode() *GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges_Node {
	if t == nil {
		t = &GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges{}
	}
	return t.Node
}

type GetTrustCenterComplianceHistories_TrustCenterComplianceHistories struct {
	Edges      []*GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetTrustCenterComplianceHistories_TrustCenterComplianceHistories) GetEdges() []*GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_Edges {
	if t == nil {
		t = &GetTrustCenterComplianceHistories_TrustCenterComplianceHistories{}
	}
	return t.Edges
}
func (t *GetTrustCenterComplianceHistories_TrustCenterComplianceHistories) GetPageInfo() *GetTrustCenterComplianceHistories_TrustCenterComplianceHistories_PageInfo {
	if t == nil {
		t = &GetTrustCenterComplianceHistories_TrustCenterComplianceHistories{}
	}
	return &t.PageInfo
}
func (t *GetTrustCenterComplianceHistories_TrustCenterComplianceHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetTrustCenterComplianceHistories_TrustCenterComplianceHistories{}
	}
	return t.TotalCount
}

type CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc_File struct {
	ID           string  "json:\"id\" graphql:\"id\""
	Md5Hash      *string "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc_File) GetID() string {
	if t == nil {
		t = &CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc_File{}
	}
	return t.ID
}
func (t *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc_File) GetMd5Hash() *string {
	if t == nil {
		t = &CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc_File{}
	}
	return t.Md5Hash
}
func (t *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc_File) GetPresignedURL() *string {
	if t == nil {
		t = &CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc_File{}
	}
	return t.PresignedURL
}

type CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc_OriginalFile struct {
	ID               string  "json:\"id\" graphql:\"id\""
	Md5Hash          *string "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	PresignedURL     *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
	ProvidedFileName string  "json:\"providedFileName\" graphql:\"providedFileName\""
}

func (t *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc_OriginalFile) GetID() string {
	if t == nil {
		t = &CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc_OriginalFile{}
	}
	return t.ID
}
func (t *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc_OriginalFile) GetMd5Hash() *string {
	if t == nil {
		t = &CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc_OriginalFile{}
	}
	return t.Md5Hash
}
func (t *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc_OriginalFile) GetPresignedURL() *string {
	if t == nil {
		t = &CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc_OriginalFile{}
	}
	return t.PresignedURL
}
func (t *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc_OriginalFile) GetProvidedFileName() string {
	if t == nil {
		t = &CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc_OriginalFile{}
	}
	return t.ProvidedFileName
}

type CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc struct {
	Category       string                                                                 "json:\"category\" graphql:\"category\""
	CreatedAt      *time.Time                                                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	File           *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc_File         "json:\"file,omitempty\" graphql:\"file\""
	FileID         *string                                                                "json:\"fileID,omitempty\" graphql:\"fileID\""
	ID             string                                                                 "json:\"id\" graphql:\"id\""
	OriginalFile   *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc_OriginalFile "json:\"originalFile,omitempty\" graphql:\"originalFile\""
	OriginalFileID *string                                                                "json:\"originalFileID,omitempty\" graphql:\"originalFileID\""
	Tags           []string                                                               "json:\"tags,omitempty\" graphql:\"tags\""
	Title          string                                                                 "json:\"title\" graphql:\"title\""
	TrustCenterID  *string                                                                "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt      *time.Time                                                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility     *enums.TrustCenterDocumentVisibility                                   "json:\"visibility,omitempty\" graphql:\"visibility\""
}

func (t *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc) GetCategory() string {
	if t == nil {
		t = &CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.Category
}
func (t *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.CreatedAt
}
func (t *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc) GetCreatedBy() *string {
	if t == nil {
		t = &CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.CreatedBy
}
func (t *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc) GetFile() *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc_File {
	if t == nil {
		t = &CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.File
}
func (t *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc) GetFileID() *string {
	if t == nil {
		t = &CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.FileID
}
func (t *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc) GetID() string {
	if t == nil {
		t = &CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.ID
}
func (t *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc) GetOriginalFile() *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc_OriginalFile {
	if t == nil {
		t = &CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.OriginalFile
}
func (t *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc) GetOriginalFileID() *string {
	if t == nil {
		t = &CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.OriginalFileID
}
func (t *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc) GetTags() []string {
	if t == nil {
		t = &CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.Tags
}
func (t *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc) GetTitle() string {
	if t == nil {
		t = &CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.Title
}
func (t *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc) GetTrustCenterID() *string {
	if t == nil {
		t = &CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.TrustCenterID
}
func (t *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.UpdatedAt
}
func (t *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.UpdatedBy
}
func (t *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc) GetVisibility() *enums.TrustCenterDocumentVisibility {
	if t == nil {
		t = &CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.Visibility
}

type CreateTrustCenterDoc_CreateTrustCenterDoc struct {
	TrustCenterDoc CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc "json:\"trustCenterDoc\" graphql:\"trustCenterDoc\""
}

func (t *CreateTrustCenterDoc_CreateTrustCenterDoc) GetTrustCenterDoc() *CreateTrustCenterDoc_CreateTrustCenterDoc_TrustCenterDoc {
	if t == nil {
		t = &CreateTrustCenterDoc_CreateTrustCenterDoc{}
	}
	return &t.TrustCenterDoc
}

type DeleteTrustCenterDoc_DeleteTrustCenterDoc struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteTrustCenterDoc_DeleteTrustCenterDoc) GetDeletedID() string {
	if t == nil {
		t = &DeleteTrustCenterDoc_DeleteTrustCenterDoc{}
	}
	return t.DeletedID
}

type GetAllTrustCenterDocs_TrustCenterDocs_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllTrustCenterDocs_TrustCenterDocs_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_PageInfo{}
	}
	return t.StartCursor
}

type GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node_File struct {
	ID           string  "json:\"id\" graphql:\"id\""
	Md5Hash      *string "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node_File) GetID() string {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node_File{}
	}
	return t.ID
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node_File) GetMd5Hash() *string {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node_File{}
	}
	return t.Md5Hash
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node_File) GetPresignedURL() *string {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node_File{}
	}
	return t.PresignedURL
}

type GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node_OriginalFile struct {
	ID               string  "json:\"id\" graphql:\"id\""
	Md5Hash          *string "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	PresignedURL     *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
	ProvidedFileName string  "json:\"providedFileName\" graphql:\"providedFileName\""
}

func (t *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node_OriginalFile) GetID() string {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node_OriginalFile{}
	}
	return t.ID
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node_OriginalFile) GetMd5Hash() *string {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node_OriginalFile{}
	}
	return t.Md5Hash
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node_OriginalFile) GetPresignedURL() *string {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node_OriginalFile{}
	}
	return t.PresignedURL
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node_OriginalFile) GetProvidedFileName() string {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node_OriginalFile{}
	}
	return t.ProvidedFileName
}

type GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node struct {
	Category       string                                                         "json:\"category\" graphql:\"category\""
	CreatedAt      *time.Time                                                     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                                        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	File           *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node_File         "json:\"file,omitempty\" graphql:\"file\""
	FileID         *string                                                        "json:\"fileID,omitempty\" graphql:\"fileID\""
	ID             string                                                         "json:\"id\" graphql:\"id\""
	OriginalFile   *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node_OriginalFile "json:\"originalFile,omitempty\" graphql:\"originalFile\""
	OriginalFileID *string                                                        "json:\"originalFileID,omitempty\" graphql:\"originalFileID\""
	Tags           []string                                                       "json:\"tags,omitempty\" graphql:\"tags\""
	Title          string                                                         "json:\"title\" graphql:\"title\""
	TrustCenterID  *string                                                        "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt      *time.Time                                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                                        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility     *enums.TrustCenterDocumentVisibility                           "json:\"visibility,omitempty\" graphql:\"visibility\""
}

func (t *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node) GetCategory() string {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node) GetFile() *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node_File {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.File
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node) GetFileID() *string {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.FileID
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node) GetOriginalFile() *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node_OriginalFile {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.OriginalFile
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node) GetOriginalFileID() *string {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.OriginalFileID
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node) GetTitle() string {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.Title
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node) GetTrustCenterID() *string {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.TrustCenterID
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node) GetVisibility() *enums.TrustCenterDocumentVisibility {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.Visibility
}

type GetAllTrustCenterDocs_TrustCenterDocs_Edges struct {
	Node *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTrustCenterDocs_TrustCenterDocs_Edges) GetNode() *GetAllTrustCenterDocs_TrustCenterDocs_Edges_Node {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs_Edges{}
	}
	return t.Node
}

type GetAllTrustCenterDocs_TrustCenterDocs struct {
	Edges      []*GetAllTrustCenterDocs_TrustCenterDocs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllTrustCenterDocs_TrustCenterDocs_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                          "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllTrustCenterDocs_TrustCenterDocs) GetEdges() []*GetAllTrustCenterDocs_TrustCenterDocs_Edges {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs{}
	}
	return t.Edges
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs) GetPageInfo() *GetAllTrustCenterDocs_TrustCenterDocs_PageInfo {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs{}
	}
	return &t.PageInfo
}
func (t *GetAllTrustCenterDocs_TrustCenterDocs) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllTrustCenterDocs_TrustCenterDocs{}
	}
	return t.TotalCount
}

type GetTrustCenterDocByID_TrustCenterDoc_File struct {
	ID           string  "json:\"id\" graphql:\"id\""
	Md5Hash      *string "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetTrustCenterDocByID_TrustCenterDoc_File) GetID() string {
	if t == nil {
		t = &GetTrustCenterDocByID_TrustCenterDoc_File{}
	}
	return t.ID
}
func (t *GetTrustCenterDocByID_TrustCenterDoc_File) GetMd5Hash() *string {
	if t == nil {
		t = &GetTrustCenterDocByID_TrustCenterDoc_File{}
	}
	return t.Md5Hash
}
func (t *GetTrustCenterDocByID_TrustCenterDoc_File) GetPresignedURL() *string {
	if t == nil {
		t = &GetTrustCenterDocByID_TrustCenterDoc_File{}
	}
	return t.PresignedURL
}

type GetTrustCenterDocByID_TrustCenterDoc_OriginalFile struct {
	ID               string  "json:\"id\" graphql:\"id\""
	Md5Hash          *string "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	PresignedURL     *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
	ProvidedFileName string  "json:\"providedFileName\" graphql:\"providedFileName\""
}

func (t *GetTrustCenterDocByID_TrustCenterDoc_OriginalFile) GetID() string {
	if t == nil {
		t = &GetTrustCenterDocByID_TrustCenterDoc_OriginalFile{}
	}
	return t.ID
}
func (t *GetTrustCenterDocByID_TrustCenterDoc_OriginalFile) GetMd5Hash() *string {
	if t == nil {
		t = &GetTrustCenterDocByID_TrustCenterDoc_OriginalFile{}
	}
	return t.Md5Hash
}
func (t *GetTrustCenterDocByID_TrustCenterDoc_OriginalFile) GetPresignedURL() *string {
	if t == nil {
		t = &GetTrustCenterDocByID_TrustCenterDoc_OriginalFile{}
	}
	return t.PresignedURL
}
func (t *GetTrustCenterDocByID_TrustCenterDoc_OriginalFile) GetProvidedFileName() string {
	if t == nil {
		t = &GetTrustCenterDocByID_TrustCenterDoc_OriginalFile{}
	}
	return t.ProvidedFileName
}

type GetTrustCenterDocByID_TrustCenterDoc struct {
	Category       string                                             "json:\"category\" graphql:\"category\""
	CreatedAt      *time.Time                                         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	File           *GetTrustCenterDocByID_TrustCenterDoc_File         "json:\"file,omitempty\" graphql:\"file\""
	FileID         *string                                            "json:\"fileID,omitempty\" graphql:\"fileID\""
	ID             string                                             "json:\"id\" graphql:\"id\""
	OriginalFile   *GetTrustCenterDocByID_TrustCenterDoc_OriginalFile "json:\"originalFile,omitempty\" graphql:\"originalFile\""
	OriginalFileID *string                                            "json:\"originalFileID,omitempty\" graphql:\"originalFileID\""
	Tags           []string                                           "json:\"tags,omitempty\" graphql:\"tags\""
	Title          string                                             "json:\"title\" graphql:\"title\""
	TrustCenterID  *string                                            "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt      *time.Time                                         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility     *enums.TrustCenterDocumentVisibility               "json:\"visibility,omitempty\" graphql:\"visibility\""
}

func (t *GetTrustCenterDocByID_TrustCenterDoc) GetCategory() string {
	if t == nil {
		t = &GetTrustCenterDocByID_TrustCenterDoc{}
	}
	return t.Category
}
func (t *GetTrustCenterDocByID_TrustCenterDoc) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterDocByID_TrustCenterDoc{}
	}
	return t.CreatedAt
}
func (t *GetTrustCenterDocByID_TrustCenterDoc) GetCreatedBy() *string {
	if t == nil {
		t = &GetTrustCenterDocByID_TrustCenterDoc{}
	}
	return t.CreatedBy
}
func (t *GetTrustCenterDocByID_TrustCenterDoc) GetFile() *GetTrustCenterDocByID_TrustCenterDoc_File {
	if t == nil {
		t = &GetTrustCenterDocByID_TrustCenterDoc{}
	}
	return t.File
}
func (t *GetTrustCenterDocByID_TrustCenterDoc) GetFileID() *string {
	if t == nil {
		t = &GetTrustCenterDocByID_TrustCenterDoc{}
	}
	return t.FileID
}
func (t *GetTrustCenterDocByID_TrustCenterDoc) GetID() string {
	if t == nil {
		t = &GetTrustCenterDocByID_TrustCenterDoc{}
	}
	return t.ID
}
func (t *GetTrustCenterDocByID_TrustCenterDoc) GetOriginalFile() *GetTrustCenterDocByID_TrustCenterDoc_OriginalFile {
	if t == nil {
		t = &GetTrustCenterDocByID_TrustCenterDoc{}
	}
	return t.OriginalFile
}
func (t *GetTrustCenterDocByID_TrustCenterDoc) GetOriginalFileID() *string {
	if t == nil {
		t = &GetTrustCenterDocByID_TrustCenterDoc{}
	}
	return t.OriginalFileID
}
func (t *GetTrustCenterDocByID_TrustCenterDoc) GetTags() []string {
	if t == nil {
		t = &GetTrustCenterDocByID_TrustCenterDoc{}
	}
	return t.Tags
}
func (t *GetTrustCenterDocByID_TrustCenterDoc) GetTitle() string {
	if t == nil {
		t = &GetTrustCenterDocByID_TrustCenterDoc{}
	}
	return t.Title
}
func (t *GetTrustCenterDocByID_TrustCenterDoc) GetTrustCenterID() *string {
	if t == nil {
		t = &GetTrustCenterDocByID_TrustCenterDoc{}
	}
	return t.TrustCenterID
}
func (t *GetTrustCenterDocByID_TrustCenterDoc) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterDocByID_TrustCenterDoc{}
	}
	return t.UpdatedAt
}
func (t *GetTrustCenterDocByID_TrustCenterDoc) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTrustCenterDocByID_TrustCenterDoc{}
	}
	return t.UpdatedBy
}
func (t *GetTrustCenterDocByID_TrustCenterDoc) GetVisibility() *enums.TrustCenterDocumentVisibility {
	if t == nil {
		t = &GetTrustCenterDocByID_TrustCenterDoc{}
	}
	return t.Visibility
}

type GetTrustCenterDocs_TrustCenterDocs_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetTrustCenterDocs_TrustCenterDocs_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetTrustCenterDocs_TrustCenterDocs_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetTrustCenterDocs_TrustCenterDocs_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetTrustCenterDocs_TrustCenterDocs_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_PageInfo{}
	}
	return t.StartCursor
}

type GetTrustCenterDocs_TrustCenterDocs_Edges_Node_File struct {
	ID           string  "json:\"id\" graphql:\"id\""
	Md5Hash      *string "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetTrustCenterDocs_TrustCenterDocs_Edges_Node_File) GetID() string {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_Edges_Node_File{}
	}
	return t.ID
}
func (t *GetTrustCenterDocs_TrustCenterDocs_Edges_Node_File) GetMd5Hash() *string {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_Edges_Node_File{}
	}
	return t.Md5Hash
}
func (t *GetTrustCenterDocs_TrustCenterDocs_Edges_Node_File) GetPresignedURL() *string {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_Edges_Node_File{}
	}
	return t.PresignedURL
}

type GetTrustCenterDocs_TrustCenterDocs_Edges_Node_OriginalFile struct {
	ID               string  "json:\"id\" graphql:\"id\""
	Md5Hash          *string "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	PresignedURL     *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
	ProvidedFileName string  "json:\"providedFileName\" graphql:\"providedFileName\""
}

func (t *GetTrustCenterDocs_TrustCenterDocs_Edges_Node_OriginalFile) GetID() string {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_Edges_Node_OriginalFile{}
	}
	return t.ID
}
func (t *GetTrustCenterDocs_TrustCenterDocs_Edges_Node_OriginalFile) GetMd5Hash() *string {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_Edges_Node_OriginalFile{}
	}
	return t.Md5Hash
}
func (t *GetTrustCenterDocs_TrustCenterDocs_Edges_Node_OriginalFile) GetPresignedURL() *string {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_Edges_Node_OriginalFile{}
	}
	return t.PresignedURL
}
func (t *GetTrustCenterDocs_TrustCenterDocs_Edges_Node_OriginalFile) GetProvidedFileName() string {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_Edges_Node_OriginalFile{}
	}
	return t.ProvidedFileName
}

type GetTrustCenterDocs_TrustCenterDocs_Edges_Node struct {
	Category       string                                                      "json:\"category\" graphql:\"category\""
	CreatedAt      *time.Time                                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	File           *GetTrustCenterDocs_TrustCenterDocs_Edges_Node_File         "json:\"file,omitempty\" graphql:\"file\""
	FileID         *string                                                     "json:\"fileID,omitempty\" graphql:\"fileID\""
	ID             string                                                      "json:\"id\" graphql:\"id\""
	OriginalFile   *GetTrustCenterDocs_TrustCenterDocs_Edges_Node_OriginalFile "json:\"originalFile,omitempty\" graphql:\"originalFile\""
	OriginalFileID *string                                                     "json:\"originalFileID,omitempty\" graphql:\"originalFileID\""
	Tags           []string                                                    "json:\"tags,omitempty\" graphql:\"tags\""
	Title          string                                                      "json:\"title\" graphql:\"title\""
	TrustCenterID  *string                                                     "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt      *time.Time                                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility     *enums.TrustCenterDocumentVisibility                        "json:\"visibility,omitempty\" graphql:\"visibility\""
}

func (t *GetTrustCenterDocs_TrustCenterDocs_Edges_Node) GetCategory() string {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.Category
}
func (t *GetTrustCenterDocs_TrustCenterDocs_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTrustCenterDocs_TrustCenterDocs_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTrustCenterDocs_TrustCenterDocs_Edges_Node) GetFile() *GetTrustCenterDocs_TrustCenterDocs_Edges_Node_File {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.File
}
func (t *GetTrustCenterDocs_TrustCenterDocs_Edges_Node) GetFileID() *string {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.FileID
}
func (t *GetTrustCenterDocs_TrustCenterDocs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.ID
}
func (t *GetTrustCenterDocs_TrustCenterDocs_Edges_Node) GetOriginalFile() *GetTrustCenterDocs_TrustCenterDocs_Edges_Node_OriginalFile {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.OriginalFile
}
func (t *GetTrustCenterDocs_TrustCenterDocs_Edges_Node) GetOriginalFileID() *string {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.OriginalFileID
}
func (t *GetTrustCenterDocs_TrustCenterDocs_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.Tags
}
func (t *GetTrustCenterDocs_TrustCenterDocs_Edges_Node) GetTitle() string {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.Title
}
func (t *GetTrustCenterDocs_TrustCenterDocs_Edges_Node) GetTrustCenterID() *string {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.TrustCenterID
}
func (t *GetTrustCenterDocs_TrustCenterDocs_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTrustCenterDocs_TrustCenterDocs_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetTrustCenterDocs_TrustCenterDocs_Edges_Node) GetVisibility() *enums.TrustCenterDocumentVisibility {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_Edges_Node{}
	}
	return t.Visibility
}

type GetTrustCenterDocs_TrustCenterDocs_Edges struct {
	Node *GetTrustCenterDocs_TrustCenterDocs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTrustCenterDocs_TrustCenterDocs_Edges) GetNode() *GetTrustCenterDocs_TrustCenterDocs_Edges_Node {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs_Edges{}
	}
	return t.Node
}

type GetTrustCenterDocs_TrustCenterDocs struct {
	Edges      []*GetTrustCenterDocs_TrustCenterDocs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetTrustCenterDocs_TrustCenterDocs_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                       "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetTrustCenterDocs_TrustCenterDocs) GetEdges() []*GetTrustCenterDocs_TrustCenterDocs_Edges {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs{}
	}
	return t.Edges
}
func (t *GetTrustCenterDocs_TrustCenterDocs) GetPageInfo() *GetTrustCenterDocs_TrustCenterDocs_PageInfo {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs{}
	}
	return &t.PageInfo
}
func (t *GetTrustCenterDocs_TrustCenterDocs) GetTotalCount() int64 {
	if t == nil {
		t = &GetTrustCenterDocs_TrustCenterDocs{}
	}
	return t.TotalCount
}

type UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc_File struct {
	ID           string  "json:\"id\" graphql:\"id\""
	Md5Hash      *string "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc_File) GetID() string {
	if t == nil {
		t = &UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc_File{}
	}
	return t.ID
}
func (t *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc_File) GetMd5Hash() *string {
	if t == nil {
		t = &UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc_File{}
	}
	return t.Md5Hash
}
func (t *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc_File) GetPresignedURL() *string {
	if t == nil {
		t = &UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc_File{}
	}
	return t.PresignedURL
}

type UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc_OriginalFile struct {
	ID               string  "json:\"id\" graphql:\"id\""
	Md5Hash          *string "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	PresignedURL     *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
	ProvidedFileName string  "json:\"providedFileName\" graphql:\"providedFileName\""
}

func (t *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc_OriginalFile) GetID() string {
	if t == nil {
		t = &UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc_OriginalFile{}
	}
	return t.ID
}
func (t *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc_OriginalFile) GetMd5Hash() *string {
	if t == nil {
		t = &UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc_OriginalFile{}
	}
	return t.Md5Hash
}
func (t *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc_OriginalFile) GetPresignedURL() *string {
	if t == nil {
		t = &UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc_OriginalFile{}
	}
	return t.PresignedURL
}
func (t *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc_OriginalFile) GetProvidedFileName() string {
	if t == nil {
		t = &UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc_OriginalFile{}
	}
	return t.ProvidedFileName
}

type UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc struct {
	Category       string                                                                 "json:\"category\" graphql:\"category\""
	CreatedAt      *time.Time                                                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	File           *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc_File         "json:\"file,omitempty\" graphql:\"file\""
	FileID         *string                                                                "json:\"fileID,omitempty\" graphql:\"fileID\""
	ID             string                                                                 "json:\"id\" graphql:\"id\""
	OriginalFile   *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc_OriginalFile "json:\"originalFile,omitempty\" graphql:\"originalFile\""
	OriginalFileID *string                                                                "json:\"originalFileID,omitempty\" graphql:\"originalFileID\""
	Tags           []string                                                               "json:\"tags,omitempty\" graphql:\"tags\""
	Title          string                                                                 "json:\"title\" graphql:\"title\""
	TrustCenterID  *string                                                                "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt      *time.Time                                                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility     *enums.TrustCenterDocumentVisibility                                   "json:\"visibility,omitempty\" graphql:\"visibility\""
}

func (t *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc) GetCategory() string {
	if t == nil {
		t = &UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.Category
}
func (t *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.CreatedAt
}
func (t *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.CreatedBy
}
func (t *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc) GetFile() *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc_File {
	if t == nil {
		t = &UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.File
}
func (t *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc) GetFileID() *string {
	if t == nil {
		t = &UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.FileID
}
func (t *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc) GetID() string {
	if t == nil {
		t = &UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.ID
}
func (t *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc) GetOriginalFile() *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc_OriginalFile {
	if t == nil {
		t = &UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.OriginalFile
}
func (t *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc) GetOriginalFileID() *string {
	if t == nil {
		t = &UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.OriginalFileID
}
func (t *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc) GetTags() []string {
	if t == nil {
		t = &UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.Tags
}
func (t *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc) GetTitle() string {
	if t == nil {
		t = &UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.Title
}
func (t *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc) GetTrustCenterID() *string {
	if t == nil {
		t = &UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.TrustCenterID
}
func (t *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.UpdatedAt
}
func (t *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.UpdatedBy
}
func (t *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc) GetVisibility() *enums.TrustCenterDocumentVisibility {
	if t == nil {
		t = &UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc{}
	}
	return t.Visibility
}

type UpdateTrustCenterDoc_UpdateTrustCenterDoc struct {
	TrustCenterDoc UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc "json:\"trustCenterDoc\" graphql:\"trustCenterDoc\""
}

func (t *UpdateTrustCenterDoc_UpdateTrustCenterDoc) GetTrustCenterDoc() *UpdateTrustCenterDoc_UpdateTrustCenterDoc_TrustCenterDoc {
	if t == nil {
		t = &UpdateTrustCenterDoc_UpdateTrustCenterDoc{}
	}
	return &t.TrustCenterDoc
}

type GetAllTrustCenterDocHistories_TrustCenterDocHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllTrustCenterDocHistories_TrustCenterDocHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllTrustCenterDocHistories_TrustCenterDocHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllTrustCenterDocHistories_TrustCenterDocHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllTrustCenterDocHistories_TrustCenterDocHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllTrustCenterDocHistories_TrustCenterDocHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllTrustCenterDocHistories_TrustCenterDocHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllTrustCenterDocHistories_TrustCenterDocHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllTrustCenterDocHistories_TrustCenterDocHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges struct {
	Node *GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges) GetNode() *GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node {
	if t == nil {
		t = &GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges{}
	}
	return t.Node
}

type GetAllTrustCenterDocHistories_TrustCenterDocHistories struct {
	Edges      []*GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllTrustCenterDocHistories_TrustCenterDocHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                          "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllTrustCenterDocHistories_TrustCenterDocHistories) GetEdges() []*GetAllTrustCenterDocHistories_TrustCenterDocHistories_Edges {
	if t == nil {
		t = &GetAllTrustCenterDocHistories_TrustCenterDocHistories{}
	}
	return t.Edges
}
func (t *GetAllTrustCenterDocHistories_TrustCenterDocHistories) GetPageInfo() *GetAllTrustCenterDocHistories_TrustCenterDocHistories_PageInfo {
	if t == nil {
		t = &GetAllTrustCenterDocHistories_TrustCenterDocHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllTrustCenterDocHistories_TrustCenterDocHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllTrustCenterDocHistories_TrustCenterDocHistories{}
	}
	return t.TotalCount
}

type GetTrustCenterDocHistories_TrustCenterDocHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetTrustCenterDocHistories_TrustCenterDocHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetTrustCenterDocHistories_TrustCenterDocHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetTrustCenterDocHistories_TrustCenterDocHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetTrustCenterDocHistories_TrustCenterDocHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetTrustCenterDocHistories_TrustCenterDocHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetTrustCenterDocHistories_TrustCenterDocHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetTrustCenterDocHistories_TrustCenterDocHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetTrustCenterDocHistories_TrustCenterDocHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTrustCenterDocHistories_TrustCenterDocHistories_Edges struct {
	Node *GetTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTrustCenterDocHistories_TrustCenterDocHistories_Edges) GetNode() *GetTrustCenterDocHistories_TrustCenterDocHistories_Edges_Node {
	if t == nil {
		t = &GetTrustCenterDocHistories_TrustCenterDocHistories_Edges{}
	}
	return t.Node
}

type GetTrustCenterDocHistories_TrustCenterDocHistories struct {
	Edges      []*GetTrustCenterDocHistories_TrustCenterDocHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetTrustCenterDocHistories_TrustCenterDocHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                       "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetTrustCenterDocHistories_TrustCenterDocHistories) GetEdges() []*GetTrustCenterDocHistories_TrustCenterDocHistories_Edges {
	if t == nil {
		t = &GetTrustCenterDocHistories_TrustCenterDocHistories{}
	}
	return t.Edges
}
func (t *GetTrustCenterDocHistories_TrustCenterDocHistories) GetPageInfo() *GetTrustCenterDocHistories_TrustCenterDocHistories_PageInfo {
	if t == nil {
		t = &GetTrustCenterDocHistories_TrustCenterDocHistories{}
	}
	return &t.PageInfo
}
func (t *GetTrustCenterDocHistories_TrustCenterDocHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetTrustCenterDocHistories_TrustCenterDocHistories{}
	}
	return t.TotalCount
}

type CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain_DNSVerification struct {
	DNSTxtRecord          string                      "json:\"dnsTxtRecord\" graphql:\"dnsTxtRecord\""
	DNSTxtValue           string                      "json:\"dnsTxtValue\" graphql:\"dnsTxtValue\""
	DNSVerificationStatus enums.DNSVerificationStatus "json:\"dnsVerificationStatus\" graphql:\"dnsVerificationStatus\""
	ID                    string                      "json:\"id\" graphql:\"id\""
}

func (t *CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain_DNSVerification) GetDNSTxtRecord() string {
	if t == nil {
		t = &CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain_DNSVerification{}
	}
	return t.DNSTxtRecord
}
func (t *CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain_DNSVerification) GetDNSTxtValue() string {
	if t == nil {
		t = &CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain_DNSVerification{}
	}
	return t.DNSTxtValue
}
func (t *CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain_DNSVerification) GetDNSVerificationStatus() *enums.DNSVerificationStatus {
	if t == nil {
		t = &CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain_DNSVerification{}
	}
	return &t.DNSVerificationStatus
}
func (t *CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain_DNSVerification) GetID() string {
	if t == nil {
		t = &CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain_DNSVerification{}
	}
	return t.ID
}

type CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain struct {
	CnameRecord       string                                                                        "json:\"cnameRecord\" graphql:\"cnameRecord\""
	CreatedAt         *time.Time                                                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string                                                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DNSVerification   *CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain_DNSVerification "json:\"dnsVerification,omitempty\" graphql:\"dnsVerification\""
	DNSVerificationID *string                                                                       "json:\"dnsVerificationID,omitempty\" graphql:\"dnsVerificationID\""
	ID                string                                                                        "json:\"id\" graphql:\"id\""
	MappableDomainID  string                                                                        "json:\"mappableDomainID\" graphql:\"mappableDomainID\""
	OwnerID           *string                                                                       "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags              []string                                                                      "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time                                                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string                                                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain) GetCnameRecord() string {
	if t == nil {
		t = &CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain{}
	}
	return t.CnameRecord
}
func (t *CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain{}
	}
	return t.CreatedAt
}
func (t *CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain) GetCreatedBy() *string {
	if t == nil {
		t = &CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain{}
	}
	return t.CreatedBy
}
func (t *CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain) GetDNSVerification() *CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain_DNSVerification {
	if t == nil {
		t = &CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain{}
	}
	return t.DNSVerification
}
func (t *CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain) GetDNSVerificationID() *string {
	if t == nil {
		t = &CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain{}
	}
	return t.DNSVerificationID
}
func (t *CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain) GetID() string {
	if t == nil {
		t = &CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain{}
	}
	return t.ID
}
func (t *CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain) GetMappableDomainID() string {
	if t == nil {
		t = &CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain{}
	}
	return t.MappableDomainID
}
func (t *CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain) GetOwnerID() *string {
	if t == nil {
		t = &CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain{}
	}
	return t.OwnerID
}
func (t *CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain) GetTags() []string {
	if t == nil {
		t = &CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain{}
	}
	return t.Tags
}
func (t *CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain{}
	}
	return t.UpdatedAt
}
func (t *CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain{}
	}
	return t.UpdatedBy
}

type CreateTrustCenterDomain_CreateTrustCenterDomain struct {
	CustomDomain CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain "json:\"customDomain\" graphql:\"customDomain\""
}

func (t *CreateTrustCenterDomain_CreateTrustCenterDomain) GetCustomDomain() *CreateTrustCenterDomain_CreateTrustCenterDomain_CustomDomain {
	if t == nil {
		t = &CreateTrustCenterDomain_CreateTrustCenterDomain{}
	}
	return &t.CustomDomain
}

type GetAllTrustCenterHistories_TrustCenterHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllTrustCenterHistories_TrustCenterHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllTrustCenterHistories_TrustCenterHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllTrustCenterHistories_TrustCenterHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllTrustCenterHistories_TrustCenterHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllTrustCenterHistories_TrustCenterHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllTrustCenterHistories_TrustCenterHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllTrustCenterHistories_TrustCenterHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllTrustCenterHistories_TrustCenterHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node struct {
	CreatedAt      *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	CustomDomainID *string        "json:\"customDomainID,omitempty\" graphql:\"customDomainID\""
	HistoryTime    time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID             string         "json:\"id\" graphql:\"id\""
	Operation      history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID        *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref            *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Slug           *string        "json:\"slug,omitempty\" graphql:\"slug\""
	Tags           []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node) GetCustomDomainID() *string {
	if t == nil {
		t = &GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return t.CustomDomainID
}
func (t *GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node) GetSlug() *string {
	if t == nil {
		t = &GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return t.Slug
}
func (t *GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTrustCenterHistories_TrustCenterHistories_Edges struct {
	Node *GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTrustCenterHistories_TrustCenterHistories_Edges) GetNode() *GetAllTrustCenterHistories_TrustCenterHistories_Edges_Node {
	if t == nil {
		t = &GetAllTrustCenterHistories_TrustCenterHistories_Edges{}
	}
	return t.Node
}

type GetAllTrustCenterHistories_TrustCenterHistories struct {
	Edges      []*GetAllTrustCenterHistories_TrustCenterHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllTrustCenterHistories_TrustCenterHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllTrustCenterHistories_TrustCenterHistories) GetEdges() []*GetAllTrustCenterHistories_TrustCenterHistories_Edges {
	if t == nil {
		t = &GetAllTrustCenterHistories_TrustCenterHistories{}
	}
	return t.Edges
}
func (t *GetAllTrustCenterHistories_TrustCenterHistories) GetPageInfo() *GetAllTrustCenterHistories_TrustCenterHistories_PageInfo {
	if t == nil {
		t = &GetAllTrustCenterHistories_TrustCenterHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllTrustCenterHistories_TrustCenterHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllTrustCenterHistories_TrustCenterHistories{}
	}
	return t.TotalCount
}

type GetTrustCenterHistories_TrustCenterHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetTrustCenterHistories_TrustCenterHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetTrustCenterHistories_TrustCenterHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetTrustCenterHistories_TrustCenterHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetTrustCenterHistories_TrustCenterHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetTrustCenterHistories_TrustCenterHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetTrustCenterHistories_TrustCenterHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetTrustCenterHistories_TrustCenterHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetTrustCenterHistories_TrustCenterHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetTrustCenterHistories_TrustCenterHistories_Edges_Node struct {
	CreatedAt      *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	CustomDomainID *string        "json:\"customDomainID,omitempty\" graphql:\"customDomainID\""
	HistoryTime    time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID             string         "json:\"id\" graphql:\"id\""
	Operation      history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID        *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref            *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Slug           *string        "json:\"slug,omitempty\" graphql:\"slug\""
	Tags           []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTrustCenterHistories_TrustCenterHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTrustCenterHistories_TrustCenterHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTrustCenterHistories_TrustCenterHistories_Edges_Node) GetCustomDomainID() *string {
	if t == nil {
		t = &GetTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return t.CustomDomainID
}
func (t *GetTrustCenterHistories_TrustCenterHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetTrustCenterHistories_TrustCenterHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetTrustCenterHistories_TrustCenterHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetTrustCenterHistories_TrustCenterHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetTrustCenterHistories_TrustCenterHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetTrustCenterHistories_TrustCenterHistories_Edges_Node) GetSlug() *string {
	if t == nil {
		t = &GetTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return t.Slug
}
func (t *GetTrustCenterHistories_TrustCenterHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetTrustCenterHistories_TrustCenterHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTrustCenterHistories_TrustCenterHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTrustCenterHistories_TrustCenterHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTrustCenterHistories_TrustCenterHistories_Edges struct {
	Node *GetTrustCenterHistories_TrustCenterHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTrustCenterHistories_TrustCenterHistories_Edges) GetNode() *GetTrustCenterHistories_TrustCenterHistories_Edges_Node {
	if t == nil {
		t = &GetTrustCenterHistories_TrustCenterHistories_Edges{}
	}
	return t.Node
}

type GetTrustCenterHistories_TrustCenterHistories struct {
	Edges      []*GetTrustCenterHistories_TrustCenterHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetTrustCenterHistories_TrustCenterHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetTrustCenterHistories_TrustCenterHistories) GetEdges() []*GetTrustCenterHistories_TrustCenterHistories_Edges {
	if t == nil {
		t = &GetTrustCenterHistories_TrustCenterHistories{}
	}
	return t.Edges
}
func (t *GetTrustCenterHistories_TrustCenterHistories) GetPageInfo() *GetTrustCenterHistories_TrustCenterHistories_PageInfo {
	if t == nil {
		t = &GetTrustCenterHistories_TrustCenterHistories{}
	}
	return &t.PageInfo
}
func (t *GetTrustCenterHistories_TrustCenterHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetTrustCenterHistories_TrustCenterHistories{}
	}
	return t.TotalCount
}

type CreateTrustCenterNda_CreateTrustCenterNda_Template_Files_Edges_Node struct {
	ID           string  "json:\"id\" graphql:\"id\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *CreateTrustCenterNda_CreateTrustCenterNda_Template_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateTrustCenterNda_CreateTrustCenterNda_Template_Files_Edges_Node{}
	}
	return t.ID
}
func (t *CreateTrustCenterNda_CreateTrustCenterNda_Template_Files_Edges_Node) GetPresignedURL() *string {
	if t == nil {
		t = &CreateTrustCenterNda_CreateTrustCenterNda_Template_Files_Edges_Node{}
	}
	return t.PresignedURL
}

type CreateTrustCenterNda_CreateTrustCenterNda_Template_Files_Edges struct {
	Node *CreateTrustCenterNda_CreateTrustCenterNda_Template_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateTrustCenterNda_CreateTrustCenterNda_Template_Files_Edges) GetNode() *CreateTrustCenterNda_CreateTrustCenterNda_Template_Files_Edges_Node {
	if t == nil {
		t = &CreateTrustCenterNda_CreateTrustCenterNda_Template_Files_Edges{}
	}
	return t.Node
}

type CreateTrustCenterNda_CreateTrustCenterNda_Template_Files struct {
	Edges []*CreateTrustCenterNda_CreateTrustCenterNda_Template_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateTrustCenterNda_CreateTrustCenterNda_Template_Files) GetEdges() []*CreateTrustCenterNda_CreateTrustCenterNda_Template_Files_Edges {
	if t == nil {
		t = &CreateTrustCenterNda_CreateTrustCenterNda_Template_Files{}
	}
	return t.Edges
}

type CreateTrustCenterNda_CreateTrustCenterNda_Template struct {
	Files         CreateTrustCenterNda_CreateTrustCenterNda_Template_Files "json:\"files\" graphql:\"files\""
	ID            string                                                   "json:\"id\" graphql:\"id\""
	Jsonconfig    map[string]any                                           "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Kind          *enums.TemplateKind                                      "json:\"kind,omitempty\" graphql:\"kind\""
	Name          string                                                   "json:\"name\" graphql:\"name\""
	TrustCenterID *string                                                  "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
}

func (t *CreateTrustCenterNda_CreateTrustCenterNda_Template) GetFiles() *CreateTrustCenterNda_CreateTrustCenterNda_Template_Files {
	if t == nil {
		t = &CreateTrustCenterNda_CreateTrustCenterNda_Template{}
	}
	return &t.Files
}
func (t *CreateTrustCenterNda_CreateTrustCenterNda_Template) GetID() string {
	if t == nil {
		t = &CreateTrustCenterNda_CreateTrustCenterNda_Template{}
	}
	return t.ID
}
func (t *CreateTrustCenterNda_CreateTrustCenterNda_Template) GetJsonconfig() map[string]any {
	if t == nil {
		t = &CreateTrustCenterNda_CreateTrustCenterNda_Template{}
	}
	return t.Jsonconfig
}
func (t *CreateTrustCenterNda_CreateTrustCenterNda_Template) GetKind() *enums.TemplateKind {
	if t == nil {
		t = &CreateTrustCenterNda_CreateTrustCenterNda_Template{}
	}
	return t.Kind
}
func (t *CreateTrustCenterNda_CreateTrustCenterNda_Template) GetName() string {
	if t == nil {
		t = &CreateTrustCenterNda_CreateTrustCenterNda_Template{}
	}
	return t.Name
}
func (t *CreateTrustCenterNda_CreateTrustCenterNda_Template) GetTrustCenterID() *string {
	if t == nil {
		t = &CreateTrustCenterNda_CreateTrustCenterNda_Template{}
	}
	return t.TrustCenterID
}

type CreateTrustCenterNda_CreateTrustCenterNda struct {
	Template CreateTrustCenterNda_CreateTrustCenterNda_Template "json:\"template\" graphql:\"template\""
}

func (t *CreateTrustCenterNda_CreateTrustCenterNda) GetTemplate() *CreateTrustCenterNda_CreateTrustCenterNda_Template {
	if t == nil {
		t = &CreateTrustCenterNda_CreateTrustCenterNda{}
	}
	return &t.Template
}

type SendTrustCenterNDAEmail_SendTrustCenterNDAEmail struct {
	Success bool "json:\"success\" graphql:\"success\""
}

func (t *SendTrustCenterNDAEmail_SendTrustCenterNDAEmail) GetSuccess() bool {
	if t == nil {
		t = &SendTrustCenterNDAEmail_SendTrustCenterNDAEmail{}
	}
	return t.Success
}

type SubmitTrustCenterNDAResponse_SubmitTrustCenterNDAResponse_DocumentData struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *SubmitTrustCenterNDAResponse_SubmitTrustCenterNDAResponse_DocumentData) GetID() string {
	if t == nil {
		t = &SubmitTrustCenterNDAResponse_SubmitTrustCenterNDAResponse_DocumentData{}
	}
	return t.ID
}

type SubmitTrustCenterNDAResponse_SubmitTrustCenterNDAResponse struct {
	DocumentData SubmitTrustCenterNDAResponse_SubmitTrustCenterNDAResponse_DocumentData "json:\"documentData\" graphql:\"documentData\""
}

func (t *SubmitTrustCenterNDAResponse_SubmitTrustCenterNDAResponse) GetDocumentData() *SubmitTrustCenterNDAResponse_SubmitTrustCenterNDAResponse_DocumentData {
	if t == nil {
		t = &SubmitTrustCenterNDAResponse_SubmitTrustCenterNDAResponse{}
	}
	return &t.DocumentData
}

type UpdateTrustCenterNda_UpdateTrustCenterNda_Template_Files_Edges_Node struct {
	ID           string  "json:\"id\" graphql:\"id\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *UpdateTrustCenterNda_UpdateTrustCenterNda_Template_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateTrustCenterNda_UpdateTrustCenterNda_Template_Files_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateTrustCenterNda_UpdateTrustCenterNda_Template_Files_Edges_Node) GetPresignedURL() *string {
	if t == nil {
		t = &UpdateTrustCenterNda_UpdateTrustCenterNda_Template_Files_Edges_Node{}
	}
	return t.PresignedURL
}

type UpdateTrustCenterNda_UpdateTrustCenterNda_Template_Files_Edges struct {
	Node *UpdateTrustCenterNda_UpdateTrustCenterNda_Template_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateTrustCenterNda_UpdateTrustCenterNda_Template_Files_Edges) GetNode() *UpdateTrustCenterNda_UpdateTrustCenterNda_Template_Files_Edges_Node {
	if t == nil {
		t = &UpdateTrustCenterNda_UpdateTrustCenterNda_Template_Files_Edges{}
	}
	return t.Node
}

type UpdateTrustCenterNda_UpdateTrustCenterNda_Template_Files struct {
	Edges []*UpdateTrustCenterNda_UpdateTrustCenterNda_Template_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateTrustCenterNda_UpdateTrustCenterNda_Template_Files) GetEdges() []*UpdateTrustCenterNda_UpdateTrustCenterNda_Template_Files_Edges {
	if t == nil {
		t = &UpdateTrustCenterNda_UpdateTrustCenterNda_Template_Files{}
	}
	return t.Edges
}

type UpdateTrustCenterNda_UpdateTrustCenterNda_Template struct {
	Files         UpdateTrustCenterNda_UpdateTrustCenterNda_Template_Files "json:\"files\" graphql:\"files\""
	ID            string                                                   "json:\"id\" graphql:\"id\""
	Jsonconfig    map[string]any                                           "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Kind          *enums.TemplateKind                                      "json:\"kind,omitempty\" graphql:\"kind\""
	Name          string                                                   "json:\"name\" graphql:\"name\""
	TrustCenterID *string                                                  "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
}

func (t *UpdateTrustCenterNda_UpdateTrustCenterNda_Template) GetFiles() *UpdateTrustCenterNda_UpdateTrustCenterNda_Template_Files {
	if t == nil {
		t = &UpdateTrustCenterNda_UpdateTrustCenterNda_Template{}
	}
	return &t.Files
}
func (t *UpdateTrustCenterNda_UpdateTrustCenterNda_Template) GetID() string {
	if t == nil {
		t = &UpdateTrustCenterNda_UpdateTrustCenterNda_Template{}
	}
	return t.ID
}
func (t *UpdateTrustCenterNda_UpdateTrustCenterNda_Template) GetJsonconfig() map[string]any {
	if t == nil {
		t = &UpdateTrustCenterNda_UpdateTrustCenterNda_Template{}
	}
	return t.Jsonconfig
}
func (t *UpdateTrustCenterNda_UpdateTrustCenterNda_Template) GetKind() *enums.TemplateKind {
	if t == nil {
		t = &UpdateTrustCenterNda_UpdateTrustCenterNda_Template{}
	}
	return t.Kind
}
func (t *UpdateTrustCenterNda_UpdateTrustCenterNda_Template) GetName() string {
	if t == nil {
		t = &UpdateTrustCenterNda_UpdateTrustCenterNda_Template{}
	}
	return t.Name
}
func (t *UpdateTrustCenterNda_UpdateTrustCenterNda_Template) GetTrustCenterID() *string {
	if t == nil {
		t = &UpdateTrustCenterNda_UpdateTrustCenterNda_Template{}
	}
	return t.TrustCenterID
}

type UpdateTrustCenterNda_UpdateTrustCenterNda struct {
	Template UpdateTrustCenterNda_UpdateTrustCenterNda_Template "json:\"template\" graphql:\"template\""
}

func (t *UpdateTrustCenterNda_UpdateTrustCenterNda) GetTemplate() *UpdateTrustCenterNda_UpdateTrustCenterNda_Template {
	if t == nil {
		t = &UpdateTrustCenterNda_UpdateTrustCenterNda{}
	}
	return &t.Template
}

type CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting struct {
	AccentColor        *string                     "json:\"accentColor,omitempty\" graphql:\"accentColor\""
	BackgroundColor    *string                     "json:\"backgroundColor,omitempty\" graphql:\"backgroundColor\""
	CreatedAt          *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	FaviconLocalFileID *string                     "json:\"faviconLocalFileID,omitempty\" graphql:\"faviconLocalFileID\""
	FaviconRemoteURL   *string                     "json:\"faviconRemoteURL,omitempty\" graphql:\"faviconRemoteURL\""
	Font               *string                     "json:\"font,omitempty\" graphql:\"font\""
	ForegroundColor    *string                     "json:\"foregroundColor,omitempty\" graphql:\"foregroundColor\""
	ID                 string                      "json:\"id\" graphql:\"id\""
	LogoLocalFileID    *string                     "json:\"logoLocalFileID,omitempty\" graphql:\"logoLocalFileID\""
	LogoRemoteURL      *string                     "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Overview           *string                     "json:\"overview,omitempty\" graphql:\"overview\""
	PrimaryColor       *string                     "json:\"primaryColor,omitempty\" graphql:\"primaryColor\""
	ThemeMode          *enums.TrustCenterThemeMode "json:\"themeMode,omitempty\" graphql:\"themeMode\""
	Title              *string                     "json:\"title,omitempty\" graphql:\"title\""
	TrustCenterID      *string                     "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt          *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting) GetAccentColor() *string {
	if t == nil {
		t = &CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.AccentColor
}
func (t *CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting) GetBackgroundColor() *string {
	if t == nil {
		t = &CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.BackgroundColor
}
func (t *CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.CreatedAt
}
func (t *CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting) GetCreatedBy() *string {
	if t == nil {
		t = &CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.CreatedBy
}
func (t *CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting) GetFaviconLocalFileID() *string {
	if t == nil {
		t = &CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.FaviconLocalFileID
}
func (t *CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting) GetFaviconRemoteURL() *string {
	if t == nil {
		t = &CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.FaviconRemoteURL
}
func (t *CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting) GetFont() *string {
	if t == nil {
		t = &CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.Font
}
func (t *CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting) GetForegroundColor() *string {
	if t == nil {
		t = &CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.ForegroundColor
}
func (t *CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting) GetID() string {
	if t == nil {
		t = &CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.ID
}
func (t *CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting) GetLogoLocalFileID() *string {
	if t == nil {
		t = &CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.LogoLocalFileID
}
func (t *CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting) GetLogoRemoteURL() *string {
	if t == nil {
		t = &CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.LogoRemoteURL
}
func (t *CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting) GetOverview() *string {
	if t == nil {
		t = &CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.Overview
}
func (t *CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting) GetPrimaryColor() *string {
	if t == nil {
		t = &CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.PrimaryColor
}
func (t *CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting) GetThemeMode() *enums.TrustCenterThemeMode {
	if t == nil {
		t = &CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.ThemeMode
}
func (t *CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting) GetTitle() *string {
	if t == nil {
		t = &CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.Title
}
func (t *CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting) GetTrustCenterID() *string {
	if t == nil {
		t = &CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.TrustCenterID
}
func (t *CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.UpdatedAt
}
func (t *CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.UpdatedBy
}

type CreateTrustCenterSetting_CreateTrustCenterSetting struct {
	TrustCenterSetting CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting "json:\"trustCenterSetting\" graphql:\"trustCenterSetting\""
}

func (t *CreateTrustCenterSetting_CreateTrustCenterSetting) GetTrustCenterSetting() *CreateTrustCenterSetting_CreateTrustCenterSetting_TrustCenterSetting {
	if t == nil {
		t = &CreateTrustCenterSetting_CreateTrustCenterSetting{}
	}
	return &t.TrustCenterSetting
}

type DeleteTrustCenterSetting_DeleteTrustCenterSetting struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteTrustCenterSetting_DeleteTrustCenterSetting) GetDeletedID() string {
	if t == nil {
		t = &DeleteTrustCenterSetting_DeleteTrustCenterSetting{}
	}
	return t.DeletedID
}

type GetAllTrustCenterSettings_TrustCenterSettings_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllTrustCenterSettings_TrustCenterSettings_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllTrustCenterSettings_TrustCenterSettings_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllTrustCenterSettings_TrustCenterSettings_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllTrustCenterSettings_TrustCenterSettings_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_PageInfo{}
	}
	return t.StartCursor
}

type GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node struct {
	AccentColor        *string                     "json:\"accentColor,omitempty\" graphql:\"accentColor\""
	BackgroundColor    *string                     "json:\"backgroundColor,omitempty\" graphql:\"backgroundColor\""
	CreatedAt          *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	FaviconLocalFileID *string                     "json:\"faviconLocalFileID,omitempty\" graphql:\"faviconLocalFileID\""
	FaviconRemoteURL   *string                     "json:\"faviconRemoteURL,omitempty\" graphql:\"faviconRemoteURL\""
	Font               *string                     "json:\"font,omitempty\" graphql:\"font\""
	ForegroundColor    *string                     "json:\"foregroundColor,omitempty\" graphql:\"foregroundColor\""
	ID                 string                      "json:\"id\" graphql:\"id\""
	LogoLocalFileID    *string                     "json:\"logoLocalFileID,omitempty\" graphql:\"logoLocalFileID\""
	LogoRemoteURL      *string                     "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Overview           *string                     "json:\"overview,omitempty\" graphql:\"overview\""
	PrimaryColor       *string                     "json:\"primaryColor,omitempty\" graphql:\"primaryColor\""
	ThemeMode          *enums.TrustCenterThemeMode "json:\"themeMode,omitempty\" graphql:\"themeMode\""
	Title              *string                     "json:\"title,omitempty\" graphql:\"title\""
	TrustCenterID      *string                     "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt          *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node) GetAccentColor() *string {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.AccentColor
}
func (t *GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node) GetBackgroundColor() *string {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.BackgroundColor
}
func (t *GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node) GetFaviconLocalFileID() *string {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.FaviconLocalFileID
}
func (t *GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node) GetFaviconRemoteURL() *string {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.FaviconRemoteURL
}
func (t *GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node) GetFont() *string {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.Font
}
func (t *GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node) GetForegroundColor() *string {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.ForegroundColor
}
func (t *GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node) GetLogoLocalFileID() *string {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.LogoLocalFileID
}
func (t *GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node) GetLogoRemoteURL() *string {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.LogoRemoteURL
}
func (t *GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node) GetOverview() *string {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.Overview
}
func (t *GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node) GetPrimaryColor() *string {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.PrimaryColor
}
func (t *GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node) GetThemeMode() *enums.TrustCenterThemeMode {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.ThemeMode
}
func (t *GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node) GetTitle() *string {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.Title
}
func (t *GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node) GetTrustCenterID() *string {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.TrustCenterID
}
func (t *GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTrustCenterSettings_TrustCenterSettings_Edges struct {
	Node *GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTrustCenterSettings_TrustCenterSettings_Edges) GetNode() *GetAllTrustCenterSettings_TrustCenterSettings_Edges_Node {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings_Edges{}
	}
	return t.Node
}

type GetAllTrustCenterSettings_TrustCenterSettings struct {
	Edges      []*GetAllTrustCenterSettings_TrustCenterSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllTrustCenterSettings_TrustCenterSettings_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllTrustCenterSettings_TrustCenterSettings) GetEdges() []*GetAllTrustCenterSettings_TrustCenterSettings_Edges {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings{}
	}
	return t.Edges
}
func (t *GetAllTrustCenterSettings_TrustCenterSettings) GetPageInfo() *GetAllTrustCenterSettings_TrustCenterSettings_PageInfo {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings{}
	}
	return &t.PageInfo
}
func (t *GetAllTrustCenterSettings_TrustCenterSettings) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllTrustCenterSettings_TrustCenterSettings{}
	}
	return t.TotalCount
}

type GetTrustCenterSettingByID_TrustCenterSetting struct {
	AccentColor        *string                     "json:\"accentColor,omitempty\" graphql:\"accentColor\""
	BackgroundColor    *string                     "json:\"backgroundColor,omitempty\" graphql:\"backgroundColor\""
	CreatedAt          *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	FaviconLocalFileID *string                     "json:\"faviconLocalFileID,omitempty\" graphql:\"faviconLocalFileID\""
	FaviconRemoteURL   *string                     "json:\"faviconRemoteURL,omitempty\" graphql:\"faviconRemoteURL\""
	Font               *string                     "json:\"font,omitempty\" graphql:\"font\""
	ForegroundColor    *string                     "json:\"foregroundColor,omitempty\" graphql:\"foregroundColor\""
	ID                 string                      "json:\"id\" graphql:\"id\""
	LogoLocalFileID    *string                     "json:\"logoLocalFileID,omitempty\" graphql:\"logoLocalFileID\""
	LogoRemoteURL      *string                     "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Overview           *string                     "json:\"overview,omitempty\" graphql:\"overview\""
	PrimaryColor       *string                     "json:\"primaryColor,omitempty\" graphql:\"primaryColor\""
	ThemeMode          *enums.TrustCenterThemeMode "json:\"themeMode,omitempty\" graphql:\"themeMode\""
	Title              *string                     "json:\"title,omitempty\" graphql:\"title\""
	TrustCenterID      *string                     "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt          *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTrustCenterSettingByID_TrustCenterSetting) GetAccentColor() *string {
	if t == nil {
		t = &GetTrustCenterSettingByID_TrustCenterSetting{}
	}
	return t.AccentColor
}
func (t *GetTrustCenterSettingByID_TrustCenterSetting) GetBackgroundColor() *string {
	if t == nil {
		t = &GetTrustCenterSettingByID_TrustCenterSetting{}
	}
	return t.BackgroundColor
}
func (t *GetTrustCenterSettingByID_TrustCenterSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterSettingByID_TrustCenterSetting{}
	}
	return t.CreatedAt
}
func (t *GetTrustCenterSettingByID_TrustCenterSetting) GetCreatedBy() *string {
	if t == nil {
		t = &GetTrustCenterSettingByID_TrustCenterSetting{}
	}
	return t.CreatedBy
}
func (t *GetTrustCenterSettingByID_TrustCenterSetting) GetFaviconLocalFileID() *string {
	if t == nil {
		t = &GetTrustCenterSettingByID_TrustCenterSetting{}
	}
	return t.FaviconLocalFileID
}
func (t *GetTrustCenterSettingByID_TrustCenterSetting) GetFaviconRemoteURL() *string {
	if t == nil {
		t = &GetTrustCenterSettingByID_TrustCenterSetting{}
	}
	return t.FaviconRemoteURL
}
func (t *GetTrustCenterSettingByID_TrustCenterSetting) GetFont() *string {
	if t == nil {
		t = &GetTrustCenterSettingByID_TrustCenterSetting{}
	}
	return t.Font
}
func (t *GetTrustCenterSettingByID_TrustCenterSetting) GetForegroundColor() *string {
	if t == nil {
		t = &GetTrustCenterSettingByID_TrustCenterSetting{}
	}
	return t.ForegroundColor
}
func (t *GetTrustCenterSettingByID_TrustCenterSetting) GetID() string {
	if t == nil {
		t = &GetTrustCenterSettingByID_TrustCenterSetting{}
	}
	return t.ID
}
func (t *GetTrustCenterSettingByID_TrustCenterSetting) GetLogoLocalFileID() *string {
	if t == nil {
		t = &GetTrustCenterSettingByID_TrustCenterSetting{}
	}
	return t.LogoLocalFileID
}
func (t *GetTrustCenterSettingByID_TrustCenterSetting) GetLogoRemoteURL() *string {
	if t == nil {
		t = &GetTrustCenterSettingByID_TrustCenterSetting{}
	}
	return t.LogoRemoteURL
}
func (t *GetTrustCenterSettingByID_TrustCenterSetting) GetOverview() *string {
	if t == nil {
		t = &GetTrustCenterSettingByID_TrustCenterSetting{}
	}
	return t.Overview
}
func (t *GetTrustCenterSettingByID_TrustCenterSetting) GetPrimaryColor() *string {
	if t == nil {
		t = &GetTrustCenterSettingByID_TrustCenterSetting{}
	}
	return t.PrimaryColor
}
func (t *GetTrustCenterSettingByID_TrustCenterSetting) GetThemeMode() *enums.TrustCenterThemeMode {
	if t == nil {
		t = &GetTrustCenterSettingByID_TrustCenterSetting{}
	}
	return t.ThemeMode
}
func (t *GetTrustCenterSettingByID_TrustCenterSetting) GetTitle() *string {
	if t == nil {
		t = &GetTrustCenterSettingByID_TrustCenterSetting{}
	}
	return t.Title
}
func (t *GetTrustCenterSettingByID_TrustCenterSetting) GetTrustCenterID() *string {
	if t == nil {
		t = &GetTrustCenterSettingByID_TrustCenterSetting{}
	}
	return t.TrustCenterID
}
func (t *GetTrustCenterSettingByID_TrustCenterSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterSettingByID_TrustCenterSetting{}
	}
	return t.UpdatedAt
}
func (t *GetTrustCenterSettingByID_TrustCenterSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTrustCenterSettingByID_TrustCenterSetting{}
	}
	return t.UpdatedBy
}

type GetTrustCenterSettings_TrustCenterSettings_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetTrustCenterSettings_TrustCenterSettings_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetTrustCenterSettings_TrustCenterSettings_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetTrustCenterSettings_TrustCenterSettings_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetTrustCenterSettings_TrustCenterSettings_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_PageInfo{}
	}
	return t.StartCursor
}

type GetTrustCenterSettings_TrustCenterSettings_Edges_Node struct {
	AccentColor        *string                     "json:\"accentColor,omitempty\" graphql:\"accentColor\""
	BackgroundColor    *string                     "json:\"backgroundColor,omitempty\" graphql:\"backgroundColor\""
	CreatedAt          *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	FaviconLocalFileID *string                     "json:\"faviconLocalFileID,omitempty\" graphql:\"faviconLocalFileID\""
	FaviconRemoteURL   *string                     "json:\"faviconRemoteURL,omitempty\" graphql:\"faviconRemoteURL\""
	Font               *string                     "json:\"font,omitempty\" graphql:\"font\""
	ForegroundColor    *string                     "json:\"foregroundColor,omitempty\" graphql:\"foregroundColor\""
	ID                 string                      "json:\"id\" graphql:\"id\""
	LogoLocalFileID    *string                     "json:\"logoLocalFileID,omitempty\" graphql:\"logoLocalFileID\""
	LogoRemoteURL      *string                     "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Overview           *string                     "json:\"overview,omitempty\" graphql:\"overview\""
	PrimaryColor       *string                     "json:\"primaryColor,omitempty\" graphql:\"primaryColor\""
	ThemeMode          *enums.TrustCenterThemeMode "json:\"themeMode,omitempty\" graphql:\"themeMode\""
	Title              *string                     "json:\"title,omitempty\" graphql:\"title\""
	TrustCenterID      *string                     "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt          *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTrustCenterSettings_TrustCenterSettings_Edges_Node) GetAccentColor() *string {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.AccentColor
}
func (t *GetTrustCenterSettings_TrustCenterSettings_Edges_Node) GetBackgroundColor() *string {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.BackgroundColor
}
func (t *GetTrustCenterSettings_TrustCenterSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTrustCenterSettings_TrustCenterSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTrustCenterSettings_TrustCenterSettings_Edges_Node) GetFaviconLocalFileID() *string {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.FaviconLocalFileID
}
func (t *GetTrustCenterSettings_TrustCenterSettings_Edges_Node) GetFaviconRemoteURL() *string {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.FaviconRemoteURL
}
func (t *GetTrustCenterSettings_TrustCenterSettings_Edges_Node) GetFont() *string {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.Font
}
func (t *GetTrustCenterSettings_TrustCenterSettings_Edges_Node) GetForegroundColor() *string {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.ForegroundColor
}
func (t *GetTrustCenterSettings_TrustCenterSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetTrustCenterSettings_TrustCenterSettings_Edges_Node) GetLogoLocalFileID() *string {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.LogoLocalFileID
}
func (t *GetTrustCenterSettings_TrustCenterSettings_Edges_Node) GetLogoRemoteURL() *string {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.LogoRemoteURL
}
func (t *GetTrustCenterSettings_TrustCenterSettings_Edges_Node) GetOverview() *string {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.Overview
}
func (t *GetTrustCenterSettings_TrustCenterSettings_Edges_Node) GetPrimaryColor() *string {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.PrimaryColor
}
func (t *GetTrustCenterSettings_TrustCenterSettings_Edges_Node) GetThemeMode() *enums.TrustCenterThemeMode {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.ThemeMode
}
func (t *GetTrustCenterSettings_TrustCenterSettings_Edges_Node) GetTitle() *string {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.Title
}
func (t *GetTrustCenterSettings_TrustCenterSettings_Edges_Node) GetTrustCenterID() *string {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.TrustCenterID
}
func (t *GetTrustCenterSettings_TrustCenterSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTrustCenterSettings_TrustCenterSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTrustCenterSettings_TrustCenterSettings_Edges struct {
	Node *GetTrustCenterSettings_TrustCenterSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTrustCenterSettings_TrustCenterSettings_Edges) GetNode() *GetTrustCenterSettings_TrustCenterSettings_Edges_Node {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings_Edges{}
	}
	return t.Node
}

type GetTrustCenterSettings_TrustCenterSettings struct {
	Edges      []*GetTrustCenterSettings_TrustCenterSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetTrustCenterSettings_TrustCenterSettings_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetTrustCenterSettings_TrustCenterSettings) GetEdges() []*GetTrustCenterSettings_TrustCenterSettings_Edges {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings{}
	}
	return t.Edges
}
func (t *GetTrustCenterSettings_TrustCenterSettings) GetPageInfo() *GetTrustCenterSettings_TrustCenterSettings_PageInfo {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings{}
	}
	return &t.PageInfo
}
func (t *GetTrustCenterSettings_TrustCenterSettings) GetTotalCount() int64 {
	if t == nil {
		t = &GetTrustCenterSettings_TrustCenterSettings{}
	}
	return t.TotalCount
}

type UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting struct {
	AccentColor        *string                     "json:\"accentColor,omitempty\" graphql:\"accentColor\""
	BackgroundColor    *string                     "json:\"backgroundColor,omitempty\" graphql:\"backgroundColor\""
	CreatedAt          *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	FaviconLocalFileID *string                     "json:\"faviconLocalFileID,omitempty\" graphql:\"faviconLocalFileID\""
	FaviconRemoteURL   *string                     "json:\"faviconRemoteURL,omitempty\" graphql:\"faviconRemoteURL\""
	Font               *string                     "json:\"font,omitempty\" graphql:\"font\""
	ForegroundColor    *string                     "json:\"foregroundColor,omitempty\" graphql:\"foregroundColor\""
	ID                 string                      "json:\"id\" graphql:\"id\""
	LogoLocalFileID    *string                     "json:\"logoLocalFileID,omitempty\" graphql:\"logoLocalFileID\""
	LogoRemoteURL      *string                     "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Overview           *string                     "json:\"overview,omitempty\" graphql:\"overview\""
	PrimaryColor       *string                     "json:\"primaryColor,omitempty\" graphql:\"primaryColor\""
	ThemeMode          *enums.TrustCenterThemeMode "json:\"themeMode,omitempty\" graphql:\"themeMode\""
	Title              *string                     "json:\"title,omitempty\" graphql:\"title\""
	TrustCenterID      *string                     "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt          *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting) GetAccentColor() *string {
	if t == nil {
		t = &UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.AccentColor
}
func (t *UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting) GetBackgroundColor() *string {
	if t == nil {
		t = &UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.BackgroundColor
}
func (t *UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.CreatedAt
}
func (t *UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.CreatedBy
}
func (t *UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting) GetFaviconLocalFileID() *string {
	if t == nil {
		t = &UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.FaviconLocalFileID
}
func (t *UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting) GetFaviconRemoteURL() *string {
	if t == nil {
		t = &UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.FaviconRemoteURL
}
func (t *UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting) GetFont() *string {
	if t == nil {
		t = &UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.Font
}
func (t *UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting) GetForegroundColor() *string {
	if t == nil {
		t = &UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.ForegroundColor
}
func (t *UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting) GetID() string {
	if t == nil {
		t = &UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.ID
}
func (t *UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting) GetLogoLocalFileID() *string {
	if t == nil {
		t = &UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.LogoLocalFileID
}
func (t *UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting) GetLogoRemoteURL() *string {
	if t == nil {
		t = &UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.LogoRemoteURL
}
func (t *UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting) GetOverview() *string {
	if t == nil {
		t = &UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.Overview
}
func (t *UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting) GetPrimaryColor() *string {
	if t == nil {
		t = &UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.PrimaryColor
}
func (t *UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting) GetThemeMode() *enums.TrustCenterThemeMode {
	if t == nil {
		t = &UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.ThemeMode
}
func (t *UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting) GetTitle() *string {
	if t == nil {
		t = &UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.Title
}
func (t *UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting) GetTrustCenterID() *string {
	if t == nil {
		t = &UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.TrustCenterID
}
func (t *UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.UpdatedAt
}
func (t *UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting{}
	}
	return t.UpdatedBy
}

type UpdateTrustCenterSetting_UpdateTrustCenterSetting struct {
	TrustCenterSetting UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting "json:\"trustCenterSetting\" graphql:\"trustCenterSetting\""
}

func (t *UpdateTrustCenterSetting_UpdateTrustCenterSetting) GetTrustCenterSetting() *UpdateTrustCenterSetting_UpdateTrustCenterSetting_TrustCenterSetting {
	if t == nil {
		t = &UpdateTrustCenterSetting_UpdateTrustCenterSetting{}
	}
	return &t.TrustCenterSetting
}

type GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node struct {
	AccentColor        *string                     "json:\"accentColor,omitempty\" graphql:\"accentColor\""
	BackgroundColor    *string                     "json:\"backgroundColor,omitempty\" graphql:\"backgroundColor\""
	CreatedAt          *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	FaviconLocalFileID *string                     "json:\"faviconLocalFileID,omitempty\" graphql:\"faviconLocalFileID\""
	FaviconRemoteURL   *string                     "json:\"faviconRemoteURL,omitempty\" graphql:\"faviconRemoteURL\""
	Font               *string                     "json:\"font,omitempty\" graphql:\"font\""
	ForegroundColor    *string                     "json:\"foregroundColor,omitempty\" graphql:\"foregroundColor\""
	HistoryTime        time.Time                   "json:\"historyTime\" graphql:\"historyTime\""
	ID                 string                      "json:\"id\" graphql:\"id\""
	LogoLocalFileID    *string                     "json:\"logoLocalFileID,omitempty\" graphql:\"logoLocalFileID\""
	LogoRemoteURL      *string                     "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Operation          history.OpType              "json:\"operation\" graphql:\"operation\""
	Overview           *string                     "json:\"overview,omitempty\" graphql:\"overview\""
	PrimaryColor       *string                     "json:\"primaryColor,omitempty\" graphql:\"primaryColor\""
	Ref                *string                     "json:\"ref,omitempty\" graphql:\"ref\""
	ThemeMode          *enums.TrustCenterThemeMode "json:\"themeMode,omitempty\" graphql:\"themeMode\""
	Title              *string                     "json:\"title,omitempty\" graphql:\"title\""
	TrustCenterID      *string                     "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt          *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetAccentColor() *string {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.AccentColor
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetBackgroundColor() *string {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.BackgroundColor
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetFaviconLocalFileID() *string {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.FaviconLocalFileID
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetFaviconRemoteURL() *string {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.FaviconRemoteURL
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetFont() *string {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.Font
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetForegroundColor() *string {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.ForegroundColor
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetLogoLocalFileID() *string {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.LogoLocalFileID
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetLogoRemoteURL() *string {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.LogoRemoteURL
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetOverview() *string {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.Overview
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetPrimaryColor() *string {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.PrimaryColor
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetThemeMode() *enums.TrustCenterThemeMode {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.ThemeMode
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetTitle() *string {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.Title
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetTrustCenterID() *string {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.TrustCenterID
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges struct {
	Node *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges) GetNode() *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges{}
	}
	return t.Node
}

type GetAllTrustCenterSettingHistories_TrustCenterSettingHistories struct {
	Edges      []*GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories) GetEdges() []*GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_Edges {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories{}
	}
	return t.Edges
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories) GetPageInfo() *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories_PageInfo {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories_TrustCenterSettingHistories{}
	}
	return t.TotalCount
}

type GetTrustCenterSettingHistories_TrustCenterSettingHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node struct {
	AccentColor        *string                     "json:\"accentColor,omitempty\" graphql:\"accentColor\""
	BackgroundColor    *string                     "json:\"backgroundColor,omitempty\" graphql:\"backgroundColor\""
	CreatedAt          *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	FaviconLocalFileID *string                     "json:\"faviconLocalFileID,omitempty\" graphql:\"faviconLocalFileID\""
	FaviconRemoteURL   *string                     "json:\"faviconRemoteURL,omitempty\" graphql:\"faviconRemoteURL\""
	Font               *string                     "json:\"font,omitempty\" graphql:\"font\""
	ForegroundColor    *string                     "json:\"foregroundColor,omitempty\" graphql:\"foregroundColor\""
	HistoryTime        time.Time                   "json:\"historyTime\" graphql:\"historyTime\""
	ID                 string                      "json:\"id\" graphql:\"id\""
	LogoLocalFileID    *string                     "json:\"logoLocalFileID,omitempty\" graphql:\"logoLocalFileID\""
	LogoRemoteURL      *string                     "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Operation          history.OpType              "json:\"operation\" graphql:\"operation\""
	Overview           *string                     "json:\"overview,omitempty\" graphql:\"overview\""
	PrimaryColor       *string                     "json:\"primaryColor,omitempty\" graphql:\"primaryColor\""
	Ref                *string                     "json:\"ref,omitempty\" graphql:\"ref\""
	ThemeMode          *enums.TrustCenterThemeMode "json:\"themeMode,omitempty\" graphql:\"themeMode\""
	Title              *string                     "json:\"title,omitempty\" graphql:\"title\""
	TrustCenterID      *string                     "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt          *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetAccentColor() *string {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.AccentColor
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetBackgroundColor() *string {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.BackgroundColor
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetFaviconLocalFileID() *string {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.FaviconLocalFileID
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetFaviconRemoteURL() *string {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.FaviconRemoteURL
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetFont() *string {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.Font
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetForegroundColor() *string {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.ForegroundColor
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetLogoLocalFileID() *string {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.LogoLocalFileID
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetLogoRemoteURL() *string {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.LogoRemoteURL
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetOverview() *string {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.Overview
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetPrimaryColor() *string {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.PrimaryColor
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetThemeMode() *enums.TrustCenterThemeMode {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.ThemeMode
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetTitle() *string {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.Title
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetTrustCenterID() *string {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.TrustCenterID
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges struct {
	Node *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges) GetNode() *GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges_Node {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges{}
	}
	return t.Node
}

type GetTrustCenterSettingHistories_TrustCenterSettingHistories struct {
	Edges      []*GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetTrustCenterSettingHistories_TrustCenterSettingHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories) GetEdges() []*GetTrustCenterSettingHistories_TrustCenterSettingHistories_Edges {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories{}
	}
	return t.Edges
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories) GetPageInfo() *GetTrustCenterSettingHistories_TrustCenterSettingHistories_PageInfo {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories{}
	}
	return &t.PageInfo
}
func (t *GetTrustCenterSettingHistories_TrustCenterSettingHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetTrustCenterSettingHistories_TrustCenterSettingHistories{}
	}
	return t.TotalCount
}

type CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor_TrustCenterSubprocessors struct {
	Category       string     "json:\"category\" graphql:\"category\""
	Countries      []string   "json:\"countries,omitempty\" graphql:\"countries\""
	CreatedAt      *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID             string     "json:\"id\" graphql:\"id\""
	SubprocessorID string     "json:\"subprocessorID\" graphql:\"subprocessorID\""
	TrustCenterID  *string    "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt      *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor_TrustCenterSubprocessors) GetCategory() string {
	if t == nil {
		t = &CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor_TrustCenterSubprocessors{}
	}
	return t.Category
}
func (t *CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor_TrustCenterSubprocessors) GetCountries() []string {
	if t == nil {
		t = &CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor_TrustCenterSubprocessors{}
	}
	return t.Countries
}
func (t *CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor_TrustCenterSubprocessors) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor_TrustCenterSubprocessors{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor_TrustCenterSubprocessors) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor_TrustCenterSubprocessors{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor_TrustCenterSubprocessors) GetID() string {
	if t == nil {
		t = &CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor_TrustCenterSubprocessors{}
	}
	return t.ID
}
func (t *CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor_TrustCenterSubprocessors) GetSubprocessorID() string {
	if t == nil {
		t = &CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor_TrustCenterSubprocessors{}
	}
	return t.SubprocessorID
}
func (t *CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor_TrustCenterSubprocessors) GetTrustCenterID() *string {
	if t == nil {
		t = &CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor_TrustCenterSubprocessors{}
	}
	return t.TrustCenterID
}
func (t *CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor_TrustCenterSubprocessors) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor_TrustCenterSubprocessors{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor_TrustCenterSubprocessors) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor_TrustCenterSubprocessors{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor struct {
	TrustCenterSubprocessors []*CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor_TrustCenterSubprocessors "json:\"trustCenterSubprocessors,omitempty\" graphql:\"trustCenterSubprocessors\""
}

func (t *CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor) GetTrustCenterSubprocessors() []*CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor_TrustCenterSubprocessors {
	if t == nil {
		t = &CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor{}
	}
	return t.TrustCenterSubprocessors
}

type CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor_TrustCenterSubprocessors struct {
	Category       string     "json:\"category\" graphql:\"category\""
	Countries      []string   "json:\"countries,omitempty\" graphql:\"countries\""
	CreatedAt      *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID             string     "json:\"id\" graphql:\"id\""
	SubprocessorID string     "json:\"subprocessorID\" graphql:\"subprocessorID\""
	TrustCenterID  *string    "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt      *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor_TrustCenterSubprocessors) GetCategory() string {
	if t == nil {
		t = &CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor_TrustCenterSubprocessors{}
	}
	return t.Category
}
func (t *CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor_TrustCenterSubprocessors) GetCountries() []string {
	if t == nil {
		t = &CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor_TrustCenterSubprocessors{}
	}
	return t.Countries
}
func (t *CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor_TrustCenterSubprocessors) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor_TrustCenterSubprocessors{}
	}
	return t.CreatedAt
}
func (t *CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor_TrustCenterSubprocessors) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor_TrustCenterSubprocessors{}
	}
	return t.CreatedBy
}
func (t *CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor_TrustCenterSubprocessors) GetID() string {
	if t == nil {
		t = &CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor_TrustCenterSubprocessors{}
	}
	return t.ID
}
func (t *CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor_TrustCenterSubprocessors) GetSubprocessorID() string {
	if t == nil {
		t = &CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor_TrustCenterSubprocessors{}
	}
	return t.SubprocessorID
}
func (t *CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor_TrustCenterSubprocessors) GetTrustCenterID() *string {
	if t == nil {
		t = &CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor_TrustCenterSubprocessors{}
	}
	return t.TrustCenterID
}
func (t *CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor_TrustCenterSubprocessors) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor_TrustCenterSubprocessors{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor_TrustCenterSubprocessors) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor_TrustCenterSubprocessors{}
	}
	return t.UpdatedBy
}

type CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor struct {
	TrustCenterSubprocessors []*CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor_TrustCenterSubprocessors "json:\"trustCenterSubprocessors,omitempty\" graphql:\"trustCenterSubprocessors\""
}

func (t *CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor) GetTrustCenterSubprocessors() []*CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor_TrustCenterSubprocessors {
	if t == nil {
		t = &CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor{}
	}
	return t.TrustCenterSubprocessors
}

type CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor_TrustCenterSubprocessor struct {
	Category       string     "json:\"category\" graphql:\"category\""
	Countries      []string   "json:\"countries,omitempty\" graphql:\"countries\""
	CreatedAt      *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID             string     "json:\"id\" graphql:\"id\""
	SubprocessorID string     "json:\"subprocessorID\" graphql:\"subprocessorID\""
	TrustCenterID  *string    "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt      *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor_TrustCenterSubprocessor) GetCategory() string {
	if t == nil {
		t = &CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor_TrustCenterSubprocessor{}
	}
	return t.Category
}
func (t *CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor_TrustCenterSubprocessor) GetCountries() []string {
	if t == nil {
		t = &CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor_TrustCenterSubprocessor{}
	}
	return t.Countries
}
func (t *CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor_TrustCenterSubprocessor) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor_TrustCenterSubprocessor{}
	}
	return t.CreatedAt
}
func (t *CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor_TrustCenterSubprocessor) GetCreatedBy() *string {
	if t == nil {
		t = &CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor_TrustCenterSubprocessor{}
	}
	return t.CreatedBy
}
func (t *CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor_TrustCenterSubprocessor) GetID() string {
	if t == nil {
		t = &CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor_TrustCenterSubprocessor{}
	}
	return t.ID
}
func (t *CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor_TrustCenterSubprocessor) GetSubprocessorID() string {
	if t == nil {
		t = &CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor_TrustCenterSubprocessor{}
	}
	return t.SubprocessorID
}
func (t *CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor_TrustCenterSubprocessor) GetTrustCenterID() *string {
	if t == nil {
		t = &CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor_TrustCenterSubprocessor{}
	}
	return t.TrustCenterID
}
func (t *CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor_TrustCenterSubprocessor) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor_TrustCenterSubprocessor{}
	}
	return t.UpdatedAt
}
func (t *CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor_TrustCenterSubprocessor) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor_TrustCenterSubprocessor{}
	}
	return t.UpdatedBy
}

type CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor struct {
	TrustCenterSubprocessor CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor_TrustCenterSubprocessor "json:\"trustCenterSubprocessor\" graphql:\"trustCenterSubprocessor\""
}

func (t *CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor) GetTrustCenterSubprocessor() *CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor_TrustCenterSubprocessor {
	if t == nil {
		t = &CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor{}
	}
	return &t.TrustCenterSubprocessor
}

type DeleteTrustCenterSubprocessor_DeleteTrustCenterSubprocessor struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteTrustCenterSubprocessor_DeleteTrustCenterSubprocessor) GetDeletedID() string {
	if t == nil {
		t = &DeleteTrustCenterSubprocessor_DeleteTrustCenterSubprocessor{}
	}
	return t.DeletedID
}

type GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_PageInfo{}
	}
	return t.StartCursor
}

type GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor_LogoFile struct {
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor_LogoFile) GetPresignedURL() *string {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor_LogoFile{}
	}
	return t.PresignedURL
}

type GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor struct {
	Description   *string                                                                                   "json:\"description,omitempty\" graphql:\"description\""
	LogoFile      *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor_LogoFile "json:\"logoFile,omitempty\" graphql:\"logoFile\""
	LogoRemoteURL *string                                                                                   "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Name          string                                                                                    "json:\"name\" graphql:\"name\""
}

func (t *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor) GetDescription() *string {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor{}
	}
	return t.Description
}
func (t *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor) GetLogoFile() *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor_LogoFile {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor{}
	}
	return t.LogoFile
}
func (t *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor) GetLogoRemoteURL() *string {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor{}
	}
	return t.LogoRemoteURL
}
func (t *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor) GetName() string {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor{}
	}
	return t.Name
}

type GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node struct {
	Category      string                                                                          "json:\"category\" graphql:\"category\""
	Countries     []string                                                                        "json:\"countries,omitempty\" graphql:\"countries\""
	CreatedAt     *time.Time                                                                      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                                                         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID            string                                                                          "json:\"id\" graphql:\"id\""
	Subprocessor  GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor "json:\"subprocessor\" graphql:\"subprocessor\""
	TrustCenterID *string                                                                         "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt     *time.Time                                                                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                                         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node) GetCategory() string {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node) GetCountries() []string {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node{}
	}
	return t.Countries
}
func (t *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node) GetSubprocessor() *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node{}
	}
	return &t.Subprocessor
}
func (t *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node) GetTrustCenterID() *string {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node{}
	}
	return t.TrustCenterID
}
func (t *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges struct {
	Node *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges) GetNode() *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges{}
	}
	return t.Node
}

type GetAllTrustCenterSubprocessors_TrustCenterSubprocessors struct {
	Edges      []*GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                            "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors) GetEdges() []*GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_Edges {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors_TrustCenterSubprocessors{}
	}
	return t.Edges
}
func (t *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors) GetPageInfo() *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors_PageInfo {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors_TrustCenterSubprocessors{}
	}
	return &t.PageInfo
}
func (t *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors_TrustCenterSubprocessors{}
	}
	return t.TotalCount
}

type GetTrustCenterSubprocessorByID_TrustCenterSubprocessor_Subprocessor_LogoFile struct {
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetTrustCenterSubprocessorByID_TrustCenterSubprocessor_Subprocessor_LogoFile) GetPresignedURL() *string {
	if t == nil {
		t = &GetTrustCenterSubprocessorByID_TrustCenterSubprocessor_Subprocessor_LogoFile{}
	}
	return t.PresignedURL
}

type GetTrustCenterSubprocessorByID_TrustCenterSubprocessor_Subprocessor struct {
	Description   *string                                                                       "json:\"description,omitempty\" graphql:\"description\""
	LogoFile      *GetTrustCenterSubprocessorByID_TrustCenterSubprocessor_Subprocessor_LogoFile "json:\"logoFile,omitempty\" graphql:\"logoFile\""
	LogoRemoteURL *string                                                                       "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Name          string                                                                        "json:\"name\" graphql:\"name\""
}

func (t *GetTrustCenterSubprocessorByID_TrustCenterSubprocessor_Subprocessor) GetDescription() *string {
	if t == nil {
		t = &GetTrustCenterSubprocessorByID_TrustCenterSubprocessor_Subprocessor{}
	}
	return t.Description
}
func (t *GetTrustCenterSubprocessorByID_TrustCenterSubprocessor_Subprocessor) GetLogoFile() *GetTrustCenterSubprocessorByID_TrustCenterSubprocessor_Subprocessor_LogoFile {
	if t == nil {
		t = &GetTrustCenterSubprocessorByID_TrustCenterSubprocessor_Subprocessor{}
	}
	return t.LogoFile
}
func (t *GetTrustCenterSubprocessorByID_TrustCenterSubprocessor_Subprocessor) GetLogoRemoteURL() *string {
	if t == nil {
		t = &GetTrustCenterSubprocessorByID_TrustCenterSubprocessor_Subprocessor{}
	}
	return t.LogoRemoteURL
}
func (t *GetTrustCenterSubprocessorByID_TrustCenterSubprocessor_Subprocessor) GetName() string {
	if t == nil {
		t = &GetTrustCenterSubprocessorByID_TrustCenterSubprocessor_Subprocessor{}
	}
	return t.Name
}

type GetTrustCenterSubprocessorByID_TrustCenterSubprocessor struct {
	Category      string                                                              "json:\"category\" graphql:\"category\""
	Countries     []string                                                            "json:\"countries,omitempty\" graphql:\"countries\""
	CreatedAt     *time.Time                                                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID            string                                                              "json:\"id\" graphql:\"id\""
	Subprocessor  GetTrustCenterSubprocessorByID_TrustCenterSubprocessor_Subprocessor "json:\"subprocessor\" graphql:\"subprocessor\""
	TrustCenterID *string                                                             "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt     *time.Time                                                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTrustCenterSubprocessorByID_TrustCenterSubprocessor) GetCategory() string {
	if t == nil {
		t = &GetTrustCenterSubprocessorByID_TrustCenterSubprocessor{}
	}
	return t.Category
}
func (t *GetTrustCenterSubprocessorByID_TrustCenterSubprocessor) GetCountries() []string {
	if t == nil {
		t = &GetTrustCenterSubprocessorByID_TrustCenterSubprocessor{}
	}
	return t.Countries
}
func (t *GetTrustCenterSubprocessorByID_TrustCenterSubprocessor) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterSubprocessorByID_TrustCenterSubprocessor{}
	}
	return t.CreatedAt
}
func (t *GetTrustCenterSubprocessorByID_TrustCenterSubprocessor) GetCreatedBy() *string {
	if t == nil {
		t = &GetTrustCenterSubprocessorByID_TrustCenterSubprocessor{}
	}
	return t.CreatedBy
}
func (t *GetTrustCenterSubprocessorByID_TrustCenterSubprocessor) GetID() string {
	if t == nil {
		t = &GetTrustCenterSubprocessorByID_TrustCenterSubprocessor{}
	}
	return t.ID
}
func (t *GetTrustCenterSubprocessorByID_TrustCenterSubprocessor) GetSubprocessor() *GetTrustCenterSubprocessorByID_TrustCenterSubprocessor_Subprocessor {
	if t == nil {
		t = &GetTrustCenterSubprocessorByID_TrustCenterSubprocessor{}
	}
	return &t.Subprocessor
}
func (t *GetTrustCenterSubprocessorByID_TrustCenterSubprocessor) GetTrustCenterID() *string {
	if t == nil {
		t = &GetTrustCenterSubprocessorByID_TrustCenterSubprocessor{}
	}
	return t.TrustCenterID
}
func (t *GetTrustCenterSubprocessorByID_TrustCenterSubprocessor) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterSubprocessorByID_TrustCenterSubprocessor{}
	}
	return t.UpdatedAt
}
func (t *GetTrustCenterSubprocessorByID_TrustCenterSubprocessor) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTrustCenterSubprocessorByID_TrustCenterSubprocessor{}
	}
	return t.UpdatedBy
}

type GetTrustCenterSubprocessors_TrustCenterSubprocessors_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetTrustCenterSubprocessors_TrustCenterSubprocessors_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetTrustCenterSubprocessors_TrustCenterSubprocessors_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetTrustCenterSubprocessors_TrustCenterSubprocessors_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetTrustCenterSubprocessors_TrustCenterSubprocessors_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetTrustCenterSubprocessors_TrustCenterSubprocessors_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetTrustCenterSubprocessors_TrustCenterSubprocessors_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetTrustCenterSubprocessors_TrustCenterSubprocessors_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetTrustCenterSubprocessors_TrustCenterSubprocessors_PageInfo{}
	}
	return t.StartCursor
}

type GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor_LogoFile struct {
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor_LogoFile) GetPresignedURL() *string {
	if t == nil {
		t = &GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor_LogoFile{}
	}
	return t.PresignedURL
}

type GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor struct {
	Description   *string                                                                                "json:\"description,omitempty\" graphql:\"description\""
	LogoFile      *GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor_LogoFile "json:\"logoFile,omitempty\" graphql:\"logoFile\""
	LogoRemoteURL *string                                                                                "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Name          string                                                                                 "json:\"name\" graphql:\"name\""
}

func (t *GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor) GetDescription() *string {
	if t == nil {
		t = &GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor{}
	}
	return t.Description
}
func (t *GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor) GetLogoFile() *GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor_LogoFile {
	if t == nil {
		t = &GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor{}
	}
	return t.LogoFile
}
func (t *GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor) GetLogoRemoteURL() *string {
	if t == nil {
		t = &GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor{}
	}
	return t.LogoRemoteURL
}
func (t *GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor) GetName() string {
	if t == nil {
		t = &GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor{}
	}
	return t.Name
}

type GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node struct {
	Category      string                                                                       "json:\"category\" graphql:\"category\""
	Countries     []string                                                                     "json:\"countries,omitempty\" graphql:\"countries\""
	CreatedAt     *time.Time                                                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID            string                                                                       "json:\"id\" graphql:\"id\""
	Subprocessor  GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor "json:\"subprocessor\" graphql:\"subprocessor\""
	TrustCenterID *string                                                                      "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt     *time.Time                                                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node) GetCategory() string {
	if t == nil {
		t = &GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node{}
	}
	return t.Category
}
func (t *GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node) GetCountries() []string {
	if t == nil {
		t = &GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node{}
	}
	return t.Countries
}
func (t *GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node{}
	}
	return t.ID
}
func (t *GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node) GetSubprocessor() *GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node_Subprocessor {
	if t == nil {
		t = &GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node{}
	}
	return &t.Subprocessor
}
func (t *GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node) GetTrustCenterID() *string {
	if t == nil {
		t = &GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node{}
	}
	return t.TrustCenterID
}
func (t *GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges struct {
	Node *GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges) GetNode() *GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges_Node {
	if t == nil {
		t = &GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges{}
	}
	return t.Node
}

type GetTrustCenterSubprocessors_TrustCenterSubprocessors struct {
	Edges      []*GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetTrustCenterSubprocessors_TrustCenterSubprocessors_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetTrustCenterSubprocessors_TrustCenterSubprocessors) GetEdges() []*GetTrustCenterSubprocessors_TrustCenterSubprocessors_Edges {
	if t == nil {
		t = &GetTrustCenterSubprocessors_TrustCenterSubprocessors{}
	}
	return t.Edges
}
func (t *GetTrustCenterSubprocessors_TrustCenterSubprocessors) GetPageInfo() *GetTrustCenterSubprocessors_TrustCenterSubprocessors_PageInfo {
	if t == nil {
		t = &GetTrustCenterSubprocessors_TrustCenterSubprocessors{}
	}
	return &t.PageInfo
}
func (t *GetTrustCenterSubprocessors_TrustCenterSubprocessors) GetTotalCount() int64 {
	if t == nil {
		t = &GetTrustCenterSubprocessors_TrustCenterSubprocessors{}
	}
	return t.TotalCount
}

type UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor_Subprocessor_LogoFile struct {
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor_Subprocessor_LogoFile) GetPresignedURL() *string {
	if t == nil {
		t = &UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor_Subprocessor_LogoFile{}
	}
	return t.PresignedURL
}

type UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor_Subprocessor struct {
	Description   *string                                                                                                    "json:\"description,omitempty\" graphql:\"description\""
	LogoFile      *UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor_Subprocessor_LogoFile "json:\"logoFile,omitempty\" graphql:\"logoFile\""
	LogoRemoteURL *string                                                                                                    "json:\"logoRemoteURL,omitempty\" graphql:\"logoRemoteURL\""
	Name          string                                                                                                     "json:\"name\" graphql:\"name\""
}

func (t *UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor_Subprocessor) GetDescription() *string {
	if t == nil {
		t = &UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor_Subprocessor{}
	}
	return t.Description
}
func (t *UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor_Subprocessor) GetLogoFile() *UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor_Subprocessor_LogoFile {
	if t == nil {
		t = &UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor_Subprocessor{}
	}
	return t.LogoFile
}
func (t *UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor_Subprocessor) GetLogoRemoteURL() *string {
	if t == nil {
		t = &UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor_Subprocessor{}
	}
	return t.LogoRemoteURL
}
func (t *UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor_Subprocessor) GetName() string {
	if t == nil {
		t = &UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor_Subprocessor{}
	}
	return t.Name
}

type UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor struct {
	Category      string                                                                                           "json:\"category\" graphql:\"category\""
	Countries     []string                                                                                         "json:\"countries,omitempty\" graphql:\"countries\""
	CreatedAt     *time.Time                                                                                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                                                                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID            string                                                                                           "json:\"id\" graphql:\"id\""
	Subprocessor  UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor_Subprocessor "json:\"subprocessor\" graphql:\"subprocessor\""
	TrustCenterID *string                                                                                          "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt     *time.Time                                                                                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                                                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor) GetCategory() string {
	if t == nil {
		t = &UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor{}
	}
	return t.Category
}
func (t *UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor) GetCountries() []string {
	if t == nil {
		t = &UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor{}
	}
	return t.Countries
}
func (t *UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor{}
	}
	return t.CreatedAt
}
func (t *UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor{}
	}
	return t.CreatedBy
}
func (t *UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor) GetID() string {
	if t == nil {
		t = &UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor{}
	}
	return t.ID
}
func (t *UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor) GetSubprocessor() *UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor_Subprocessor {
	if t == nil {
		t = &UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor{}
	}
	return &t.Subprocessor
}
func (t *UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor) GetTrustCenterID() *string {
	if t == nil {
		t = &UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor{}
	}
	return t.TrustCenterID
}
func (t *UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor{}
	}
	return t.UpdatedAt
}
func (t *UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor{}
	}
	return t.UpdatedBy
}

type UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor struct {
	TrustCenterSubprocessor UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor "json:\"trustCenterSubprocessor\" graphql:\"trustCenterSubprocessor\""
}

func (t *UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor) GetTrustCenterSubprocessor() *UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor_TrustCenterSubprocessor {
	if t == nil {
		t = &UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor{}
	}
	return &t.TrustCenterSubprocessor
}

type GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node struct {
	Category       string         "json:\"category\" graphql:\"category\""
	Countries      []string       "json:\"countries,omitempty\" graphql:\"countries\""
	CreatedAt      *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime    time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID             string         "json:\"id\" graphql:\"id\""
	Operation      history.OpType "json:\"operation\" graphql:\"operation\""
	Ref            *string        "json:\"ref,omitempty\" graphql:\"ref\""
	SubprocessorID string         "json:\"subprocessorID\" graphql:\"subprocessorID\""
	TrustCenterID  *string        "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt      *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetCategory() string {
	if t == nil {
		t = &GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetCountries() []string {
	if t == nil {
		t = &GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return t.Countries
}
func (t *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetSubprocessorID() string {
	if t == nil {
		t = &GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return t.SubprocessorID
}
func (t *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetTrustCenterID() *string {
	if t == nil {
		t = &GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return t.TrustCenterID
}
func (t *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges struct {
	Node *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges) GetNode() *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node {
	if t == nil {
		t = &GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges{}
	}
	return t.Node
}

type GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories struct {
	Edges      []*GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                                            "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories) GetEdges() []*GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges {
	if t == nil {
		t = &GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories{}
	}
	return t.Edges
}
func (t *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories) GetPageInfo() *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_PageInfo {
	if t == nil {
		t = &GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories{}
	}
	return t.TotalCount
}

type GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node struct {
	Category       string         "json:\"category\" graphql:\"category\""
	Countries      []string       "json:\"countries,omitempty\" graphql:\"countries\""
	CreatedAt      *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime    time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID             string         "json:\"id\" graphql:\"id\""
	Operation      history.OpType "json:\"operation\" graphql:\"operation\""
	Ref            *string        "json:\"ref,omitempty\" graphql:\"ref\""
	SubprocessorID string         "json:\"subprocessorID\" graphql:\"subprocessorID\""
	TrustCenterID  *string        "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt      *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetCategory() string {
	if t == nil {
		t = &GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return t.Category
}
func (t *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetCountries() []string {
	if t == nil {
		t = &GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return t.Countries
}
func (t *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetSubprocessorID() string {
	if t == nil {
		t = &GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return t.SubprocessorID
}
func (t *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetTrustCenterID() *string {
	if t == nil {
		t = &GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return t.TrustCenterID
}
func (t *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges struct {
	Node *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges) GetNode() *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges_Node {
	if t == nil {
		t = &GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges{}
	}
	return t.Node
}

type GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories struct {
	Edges      []*GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories) GetEdges() []*GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_Edges {
	if t == nil {
		t = &GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories{}
	}
	return t.Edges
}
func (t *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories) GetPageInfo() *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories_PageInfo {
	if t == nil {
		t = &GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories{}
	}
	return &t.PageInfo
}
func (t *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories{}
	}
	return t.TotalCount
}

type CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig_File struct {
	ID           string  "json:\"id\" graphql:\"id\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig_File) GetID() string {
	if t == nil {
		t = &CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig_File{}
	}
	return t.ID
}
func (t *CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig_File) GetPresignedURL() *string {
	if t == nil {
		t = &CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig_File{}
	}
	return t.PresignedURL
}

type CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig struct {
	Color         *string                                                                                            "json:\"color,omitempty\" graphql:\"color\""
	CreatedAt     *time.Time                                                                                         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                                                                            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	File          *CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig_File "json:\"file,omitempty\" graphql:\"file\""
	Font          *enums.Font                                                                                        "json:\"font,omitempty\" graphql:\"font\""
	FontSize      *float64                                                                                           "json:\"fontSize,omitempty\" graphql:\"fontSize\""
	ID            string                                                                                             "json:\"id\" graphql:\"id\""
	LogoID        *string                                                                                            "json:\"logoID,omitempty\" graphql:\"logoID\""
	Opacity       *float64                                                                                           "json:\"opacity,omitempty\" graphql:\"opacity\""
	Rotation      *float64                                                                                           "json:\"rotation,omitempty\" graphql:\"rotation\""
	Text          *string                                                                                            "json:\"text,omitempty\" graphql:\"text\""
	TrustCenterID *string                                                                                            "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt     *time.Time                                                                                         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                                                            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetColor() *string {
	if t == nil {
		t = &CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.Color
}
func (t *CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.CreatedAt
}
func (t *CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetCreatedBy() *string {
	if t == nil {
		t = &CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.CreatedBy
}
func (t *CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetFile() *CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig_File {
	if t == nil {
		t = &CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.File
}
func (t *CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetFont() *enums.Font {
	if t == nil {
		t = &CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.Font
}
func (t *CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetFontSize() *float64 {
	if t == nil {
		t = &CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.FontSize
}
func (t *CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetID() string {
	if t == nil {
		t = &CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.ID
}
func (t *CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetLogoID() *string {
	if t == nil {
		t = &CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.LogoID
}
func (t *CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetOpacity() *float64 {
	if t == nil {
		t = &CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.Opacity
}
func (t *CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetRotation() *float64 {
	if t == nil {
		t = &CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.Rotation
}
func (t *CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetText() *string {
	if t == nil {
		t = &CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.Text
}
func (t *CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetTrustCenterID() *string {
	if t == nil {
		t = &CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.TrustCenterID
}
func (t *CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.UpdatedAt
}
func (t *CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.UpdatedBy
}

type CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig struct {
	TrustCenterWatermarkConfig CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig "json:\"trustCenterWatermarkConfig\" graphql:\"trustCenterWatermarkConfig\""
}

func (t *CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig) GetTrustCenterWatermarkConfig() *CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig {
	if t == nil {
		t = &CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig{}
	}
	return &t.TrustCenterWatermarkConfig
}

type DeleteTrustCenterWatermarkConfig_DeleteTrustCenterWatermarkConfig struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteTrustCenterWatermarkConfig_DeleteTrustCenterWatermarkConfig) GetDeletedID() string {
	if t == nil {
		t = &DeleteTrustCenterWatermarkConfig_DeleteTrustCenterWatermarkConfig{}
	}
	return t.DeletedID
}

type GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_PageInfo{}
	}
	return t.StartCursor
}

type GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node_File struct {
	ID           string  "json:\"id\" graphql:\"id\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node_File) GetID() string {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node_File{}
	}
	return t.ID
}
func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node_File) GetPresignedURL() *string {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node_File{}
	}
	return t.PresignedURL
}

type GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node struct {
	Color         *string                                                                        "json:\"color,omitempty\" graphql:\"color\""
	CreatedAt     *time.Time                                                                     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                                                        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	File          *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node_File "json:\"file,omitempty\" graphql:\"file\""
	Font          *enums.Font                                                                    "json:\"font,omitempty\" graphql:\"font\""
	FontSize      *float64                                                                       "json:\"fontSize,omitempty\" graphql:\"fontSize\""
	ID            string                                                                         "json:\"id\" graphql:\"id\""
	LogoID        *string                                                                        "json:\"logoID,omitempty\" graphql:\"logoID\""
	Opacity       *float64                                                                       "json:\"opacity,omitempty\" graphql:\"opacity\""
	Rotation      *float64                                                                       "json:\"rotation,omitempty\" graphql:\"rotation\""
	Text          *string                                                                        "json:\"text,omitempty\" graphql:\"text\""
	TrustCenterID *string                                                                        "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt     *time.Time                                                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                                        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetColor() *string {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.Color
}
func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetFile() *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node_File {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.File
}
func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetFont() *enums.Font {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.Font
}
func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetFontSize() *float64 {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.FontSize
}
func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetLogoID() *string {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.LogoID
}
func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetOpacity() *float64 {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.Opacity
}
func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetRotation() *float64 {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.Rotation
}
func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetText() *string {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.Text
}
func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetTrustCenterID() *string {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.TrustCenterID
}
func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges struct {
	Node *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges) GetNode() *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges{}
	}
	return t.Node
}

type GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs struct {
	Edges      []*GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs) GetEdges() []*GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs{}
	}
	return t.Edges
}
func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs) GetPageInfo() *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_PageInfo {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs{}
	}
	return &t.PageInfo
}
func (t *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs{}
	}
	return t.TotalCount
}

type GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig_File struct {
	ID           string  "json:\"id\" graphql:\"id\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig_File) GetID() string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig_File{}
	}
	return t.ID
}
func (t *GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig_File) GetPresignedURL() *string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig_File{}
	}
	return t.PresignedURL
}

type GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig struct {
	Color         *string                                                            "json:\"color,omitempty\" graphql:\"color\""
	CreatedAt     *time.Time                                                         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                                            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	File          *GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig_File "json:\"file,omitempty\" graphql:\"file\""
	Font          *enums.Font                                                        "json:\"font,omitempty\" graphql:\"font\""
	FontSize      *float64                                                           "json:\"fontSize,omitempty\" graphql:\"fontSize\""
	ID            string                                                             "json:\"id\" graphql:\"id\""
	LogoID        *string                                                            "json:\"logoID,omitempty\" graphql:\"logoID\""
	Opacity       *float64                                                           "json:\"opacity,omitempty\" graphql:\"opacity\""
	Rotation      *float64                                                           "json:\"rotation,omitempty\" graphql:\"rotation\""
	Text          *string                                                            "json:\"text,omitempty\" graphql:\"text\""
	TrustCenterID *string                                                            "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt     *time.Time                                                         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig) GetColor() *string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig{}
	}
	return t.Color
}
func (t *GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig{}
	}
	return t.CreatedAt
}
func (t *GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig) GetCreatedBy() *string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig{}
	}
	return t.CreatedBy
}
func (t *GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig) GetFile() *GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig_File {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig{}
	}
	return t.File
}
func (t *GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig) GetFont() *enums.Font {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig{}
	}
	return t.Font
}
func (t *GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig) GetFontSize() *float64 {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig{}
	}
	return t.FontSize
}
func (t *GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig) GetID() string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig{}
	}
	return t.ID
}
func (t *GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig) GetLogoID() *string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig{}
	}
	return t.LogoID
}
func (t *GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig) GetOpacity() *float64 {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig{}
	}
	return t.Opacity
}
func (t *GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig) GetRotation() *float64 {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig{}
	}
	return t.Rotation
}
func (t *GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig) GetText() *string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig{}
	}
	return t.Text
}
func (t *GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig) GetTrustCenterID() *string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig{}
	}
	return t.TrustCenterID
}
func (t *GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig{}
	}
	return t.UpdatedAt
}
func (t *GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig{}
	}
	return t.UpdatedBy
}

type GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_PageInfo{}
	}
	return t.StartCursor
}

type GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node_File struct {
	ID           string  "json:\"id\" graphql:\"id\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node_File) GetID() string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node_File{}
	}
	return t.ID
}
func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node_File) GetPresignedURL() *string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node_File{}
	}
	return t.PresignedURL
}

type GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node struct {
	Color         *string                                                                     "json:\"color,omitempty\" graphql:\"color\""
	CreatedAt     *time.Time                                                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	File          *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node_File "json:\"file,omitempty\" graphql:\"file\""
	Font          *enums.Font                                                                 "json:\"font,omitempty\" graphql:\"font\""
	FontSize      *float64                                                                    "json:\"fontSize,omitempty\" graphql:\"fontSize\""
	ID            string                                                                      "json:\"id\" graphql:\"id\""
	LogoID        *string                                                                     "json:\"logoID,omitempty\" graphql:\"logoID\""
	Opacity       *float64                                                                    "json:\"opacity,omitempty\" graphql:\"opacity\""
	Rotation      *float64                                                                    "json:\"rotation,omitempty\" graphql:\"rotation\""
	Text          *string                                                                     "json:\"text,omitempty\" graphql:\"text\""
	TrustCenterID *string                                                                     "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt     *time.Time                                                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetColor() *string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.Color
}
func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetFile() *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node_File {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.File
}
func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetFont() *enums.Font {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.Font
}
func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetFontSize() *float64 {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.FontSize
}
func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.ID
}
func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetLogoID() *string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.LogoID
}
func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetOpacity() *float64 {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.Opacity
}
func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetRotation() *float64 {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.Rotation
}
func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetText() *string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.Text
}
func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetTrustCenterID() *string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.TrustCenterID
}
func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges struct {
	Node *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges) GetNode() *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges_Node {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges{}
	}
	return t.Node
}

type GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs struct {
	Edges      []*GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs) GetEdges() []*GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_Edges {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs{}
	}
	return t.Edges
}
func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs) GetPageInfo() *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs_PageInfo {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs{}
	}
	return &t.PageInfo
}
func (t *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs) GetTotalCount() int64 {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs{}
	}
	return t.TotalCount
}

type UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig_File struct {
	ID           string  "json:\"id\" graphql:\"id\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig_File) GetID() string {
	if t == nil {
		t = &UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig_File{}
	}
	return t.ID
}
func (t *UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig_File) GetPresignedURL() *string {
	if t == nil {
		t = &UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig_File{}
	}
	return t.PresignedURL
}

type UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig struct {
	Color         *string                                                                                            "json:\"color,omitempty\" graphql:\"color\""
	CreatedAt     *time.Time                                                                                         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                                                                            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	File          *UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig_File "json:\"file,omitempty\" graphql:\"file\""
	Font          *enums.Font                                                                                        "json:\"font,omitempty\" graphql:\"font\""
	FontSize      *float64                                                                                           "json:\"fontSize,omitempty\" graphql:\"fontSize\""
	ID            string                                                                                             "json:\"id\" graphql:\"id\""
	LogoID        *string                                                                                            "json:\"logoID,omitempty\" graphql:\"logoID\""
	Opacity       *float64                                                                                           "json:\"opacity,omitempty\" graphql:\"opacity\""
	Rotation      *float64                                                                                           "json:\"rotation,omitempty\" graphql:\"rotation\""
	Text          *string                                                                                            "json:\"text,omitempty\" graphql:\"text\""
	TrustCenterID *string                                                                                            "json:\"trustCenterID,omitempty\" graphql:\"trustCenterID\""
	UpdatedAt     *time.Time                                                                                         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                                                            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetColor() *string {
	if t == nil {
		t = &UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.Color
}
func (t *UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.CreatedAt
}
func (t *UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.CreatedBy
}
func (t *UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetFile() *UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig_File {
	if t == nil {
		t = &UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.File
}
func (t *UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetFont() *enums.Font {
	if t == nil {
		t = &UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.Font
}
func (t *UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetFontSize() *float64 {
	if t == nil {
		t = &UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.FontSize
}
func (t *UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetID() string {
	if t == nil {
		t = &UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.ID
}
func (t *UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetLogoID() *string {
	if t == nil {
		t = &UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.LogoID
}
func (t *UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetOpacity() *float64 {
	if t == nil {
		t = &UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.Opacity
}
func (t *UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetRotation() *float64 {
	if t == nil {
		t = &UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.Rotation
}
func (t *UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetText() *string {
	if t == nil {
		t = &UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.Text
}
func (t *UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetTrustCenterID() *string {
	if t == nil {
		t = &UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.TrustCenterID
}
func (t *UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.UpdatedAt
}
func (t *UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig{}
	}
	return t.UpdatedBy
}

type UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig struct {
	TrustCenterWatermarkConfig UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig "json:\"trustCenterWatermarkConfig\" graphql:\"trustCenterWatermarkConfig\""
}

func (t *UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig) GetTrustCenterWatermarkConfig() *UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig_TrustCenterWatermarkConfig {
	if t == nil {
		t = &UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig{}
	}
	return &t.TrustCenterWatermarkConfig
}

type GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges struct {
	Node *GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges) GetNode() *GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges{}
	}
	return t.Node
}

type GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories struct {
	Edges      []*GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories) GetEdges() []*GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories{}
	}
	return t.Edges
}
func (t *GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories) GetPageInfo() *GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_PageInfo {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories{}
	}
	return t.TotalCount
}

type GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges struct {
	Node *GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges) GetNode() *GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges_Node {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges{}
	}
	return t.Node
}

type GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories struct {
	Edges      []*GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories) GetEdges() []*GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_Edges {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories{}
	}
	return t.Edges
}
func (t *GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories) GetPageInfo() *GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories_PageInfo {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories{}
	}
	return &t.PageInfo
}
func (t *GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories{}
	}
	return t.TotalCount
}

type CreateUser_CreateUser_User struct {
	AuthProvider      enums.AuthProvider  "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFileID *string             "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string             "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarUpdatedAt   *time.Time          "json:\"avatarUpdatedAt,omitempty\" graphql:\"avatarUpdatedAt\""
	CreatedAt         *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID         string              "json:\"displayID\" graphql:\"displayID\""
	DisplayName       string              "json:\"displayName\" graphql:\"displayName\""
	Email             string              "json:\"email\" graphql:\"email\""
	FirstName         *string             "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID                string              "json:\"id\" graphql:\"id\""
	LastLoginProvider *enums.AuthProvider "json:\"lastLoginProvider,omitempty\" graphql:\"lastLoginProvider\""
	LastName          *string             "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen          *time.Time          "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Role              *enums.Role         "json:\"role,omitempty\" graphql:\"role\""
	Sub               *string             "json:\"sub,omitempty\" graphql:\"sub\""
	Tags              []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateUser_CreateUser_User) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return &t.AuthProvider
}
func (t *CreateUser_CreateUser_User) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.AvatarLocalFileID
}
func (t *CreateUser_CreateUser_User) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.AvatarRemoteURL
}
func (t *CreateUser_CreateUser_User) GetAvatarUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.AvatarUpdatedAt
}
func (t *CreateUser_CreateUser_User) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.CreatedAt
}
func (t *CreateUser_CreateUser_User) GetCreatedBy() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.CreatedBy
}
func (t *CreateUser_CreateUser_User) GetDisplayID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.DisplayID
}
func (t *CreateUser_CreateUser_User) GetDisplayName() string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.DisplayName
}
func (t *CreateUser_CreateUser_User) GetEmail() string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.Email
}
func (t *CreateUser_CreateUser_User) GetFirstName() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.FirstName
}
func (t *CreateUser_CreateUser_User) GetID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.ID
}
func (t *CreateUser_CreateUser_User) GetLastLoginProvider() *enums.AuthProvider {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.LastLoginProvider
}
func (t *CreateUser_CreateUser_User) GetLastName() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.LastName
}
func (t *CreateUser_CreateUser_User) GetLastSeen() *time.Time {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.LastSeen
}
func (t *CreateUser_CreateUser_User) GetRole() *enums.Role {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.Role
}
func (t *CreateUser_CreateUser_User) GetSub() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.Sub
}
func (t *CreateUser_CreateUser_User) GetTags() []string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.Tags
}
func (t *CreateUser_CreateUser_User) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.UpdatedAt
}
func (t *CreateUser_CreateUser_User) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.UpdatedBy
}

type CreateUser_CreateUser struct {
	User CreateUser_CreateUser_User "json:\"user\" graphql:\"user\""
}

func (t *CreateUser_CreateUser) GetUser() *CreateUser_CreateUser_User {
	if t == nil {
		t = &CreateUser_CreateUser{}
	}
	return &t.User
}

type DeleteUser_DeleteUser struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteUser_DeleteUser) GetDeletedID() string {
	if t == nil {
		t = &DeleteUser_DeleteUser{}
	}
	return t.DeletedID
}

type GetAllUsers_Users_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllUsers_Users_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllUsers_Users_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllUsers_Users_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllUsers_Users_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllUsers_Users_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllUsers_Users_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllUsers_Users_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllUsers_Users_PageInfo{}
	}
	return t.StartCursor
}

type GetAllUsers_Users_Edges_Node struct {
	AuthProvider      enums.AuthProvider  "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFileID *string             "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string             "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarUpdatedAt   *time.Time          "json:\"avatarUpdatedAt,omitempty\" graphql:\"avatarUpdatedAt\""
	CreatedAt         *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID         string              "json:\"displayID\" graphql:\"displayID\""
	DisplayName       string              "json:\"displayName\" graphql:\"displayName\""
	Email             string              "json:\"email\" graphql:\"email\""
	FirstName         *string             "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID                string              "json:\"id\" graphql:\"id\""
	LastLoginProvider *enums.AuthProvider "json:\"lastLoginProvider,omitempty\" graphql:\"lastLoginProvider\""
	LastName          *string             "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen          *time.Time          "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Role              *enums.Role         "json:\"role,omitempty\" graphql:\"role\""
	Sub               *string             "json:\"sub,omitempty\" graphql:\"sub\""
	Tags              []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllUsers_Users_Edges_Node) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return &t.AuthProvider
}
func (t *GetAllUsers_Users_Edges_Node) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.AvatarLocalFileID
}
func (t *GetAllUsers_Users_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *GetAllUsers_Users_Edges_Node) GetAvatarUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.AvatarUpdatedAt
}
func (t *GetAllUsers_Users_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllUsers_Users_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllUsers_Users_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllUsers_Users_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllUsers_Users_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.Email
}
func (t *GetAllUsers_Users_Edges_Node) GetFirstName() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.FirstName
}
func (t *GetAllUsers_Users_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllUsers_Users_Edges_Node) GetLastLoginProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.LastLoginProvider
}
func (t *GetAllUsers_Users_Edges_Node) GetLastName() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.LastName
}
func (t *GetAllUsers_Users_Edges_Node) GetLastSeen() *time.Time {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.LastSeen
}
func (t *GetAllUsers_Users_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.Role
}
func (t *GetAllUsers_Users_Edges_Node) GetSub() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.Sub
}
func (t *GetAllUsers_Users_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllUsers_Users_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllUsers_Users_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllUsers_Users_Edges struct {
	Node *GetAllUsers_Users_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllUsers_Users_Edges) GetNode() *GetAllUsers_Users_Edges_Node {
	if t == nil {
		t = &GetAllUsers_Users_Edges{}
	}
	return t.Node
}

type GetAllUsers_Users struct {
	Edges      []*GetAllUsers_Users_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllUsers_Users_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllUsers_Users) GetEdges() []*GetAllUsers_Users_Edges {
	if t == nil {
		t = &GetAllUsers_Users{}
	}
	return t.Edges
}
func (t *GetAllUsers_Users) GetPageInfo() *GetAllUsers_Users_PageInfo {
	if t == nil {
		t = &GetAllUsers_Users{}
	}
	return &t.PageInfo
}
func (t *GetAllUsers_Users) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllUsers_Users{}
	}
	return t.TotalCount
}

type GetSelf_Self_Setting_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *GetSelf_Self_Setting_DefaultOrg) GetID() string {
	if t == nil {
		t = &GetSelf_Self_Setting_DefaultOrg{}
	}
	return t.ID
}
func (t *GetSelf_Self_Setting_DefaultOrg) GetName() string {
	if t == nil {
		t = &GetSelf_Self_Setting_DefaultOrg{}
	}
	return t.Name
}
func (t *GetSelf_Self_Setting_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetSelf_Self_Setting_DefaultOrg{}
	}
	return t.PersonalOrg
}

type GetSelf_Self_Setting struct {
	DefaultOrg     *GetSelf_Self_Setting_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	EmailConfirmed bool                             "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	Locked         bool                             "json:\"locked\" graphql:\"locked\""
	SilencedAt     *time.Time                       "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                 "json:\"status\" graphql:\"status\""
	SuspendedAt    *time.Time                       "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags           []string                         "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GetSelf_Self_Setting) GetDefaultOrg() *GetSelf_Self_Setting_DefaultOrg {
	if t == nil {
		t = &GetSelf_Self_Setting{}
	}
	return t.DefaultOrg
}
func (t *GetSelf_Self_Setting) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetSelf_Self_Setting{}
	}
	return t.EmailConfirmed
}
func (t *GetSelf_Self_Setting) GetLocked() bool {
	if t == nil {
		t = &GetSelf_Self_Setting{}
	}
	return t.Locked
}
func (t *GetSelf_Self_Setting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetSelf_Self_Setting{}
	}
	return t.SilencedAt
}
func (t *GetSelf_Self_Setting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetSelf_Self_Setting{}
	}
	return &t.Status
}
func (t *GetSelf_Self_Setting) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &GetSelf_Self_Setting{}
	}
	return t.SuspendedAt
}
func (t *GetSelf_Self_Setting) GetTags() []string {
	if t == nil {
		t = &GetSelf_Self_Setting{}
	}
	return t.Tags
}

type GetSelf_Self_TfaSettings_Edges_Node struct {
	TotpAllowed *bool "json:\"totpAllowed,omitempty\" graphql:\"totpAllowed\""
	Verified    bool  "json:\"verified\" graphql:\"verified\""
}

func (t *GetSelf_Self_TfaSettings_Edges_Node) GetTotpAllowed() *bool {
	if t == nil {
		t = &GetSelf_Self_TfaSettings_Edges_Node{}
	}
	return t.TotpAllowed
}
func (t *GetSelf_Self_TfaSettings_Edges_Node) GetVerified() bool {
	if t == nil {
		t = &GetSelf_Self_TfaSettings_Edges_Node{}
	}
	return t.Verified
}

type GetSelf_Self_TfaSettings_Edges struct {
	Node *GetSelf_Self_TfaSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetSelf_Self_TfaSettings_Edges) GetNode() *GetSelf_Self_TfaSettings_Edges_Node {
	if t == nil {
		t = &GetSelf_Self_TfaSettings_Edges{}
	}
	return t.Node
}

type GetSelf_Self_TfaSettings struct {
	Edges []*GetSelf_Self_TfaSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetSelf_Self_TfaSettings) GetEdges() []*GetSelf_Self_TfaSettings_Edges {
	if t == nil {
		t = &GetSelf_Self_TfaSettings{}
	}
	return t.Edges
}

type GetSelf_Self struct {
	AuthProvider enums.AuthProvider       "json:\"authProvider\" graphql:\"authProvider\""
	DisplayID    string                   "json:\"displayID\" graphql:\"displayID\""
	DisplayName  string                   "json:\"displayName\" graphql:\"displayName\""
	Email        string                   "json:\"email\" graphql:\"email\""
	FirstName    *string                  "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID           string                   "json:\"id\" graphql:\"id\""
	LastName     *string                  "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen     *time.Time               "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Setting      GetSelf_Self_Setting     "json:\"setting\" graphql:\"setting\""
	Sub          *string                  "json:\"sub,omitempty\" graphql:\"sub\""
	Tags         []string                 "json:\"tags,omitempty\" graphql:\"tags\""
	TfaSettings  GetSelf_Self_TfaSettings "json:\"tfaSettings\" graphql:\"tfaSettings\""
}

func (t *GetSelf_Self) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return &t.AuthProvider
}
func (t *GetSelf_Self) GetDisplayID() string {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.DisplayID
}
func (t *GetSelf_Self) GetDisplayName() string {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.DisplayName
}
func (t *GetSelf_Self) GetEmail() string {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.Email
}
func (t *GetSelf_Self) GetFirstName() *string {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.FirstName
}
func (t *GetSelf_Self) GetID() string {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.ID
}
func (t *GetSelf_Self) GetLastName() *string {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.LastName
}
func (t *GetSelf_Self) GetLastSeen() *time.Time {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.LastSeen
}
func (t *GetSelf_Self) GetSetting() *GetSelf_Self_Setting {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return &t.Setting
}
func (t *GetSelf_Self) GetSub() *string {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.Sub
}
func (t *GetSelf_Self) GetTags() []string {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.Tags
}
func (t *GetSelf_Self) GetTfaSettings() *GetSelf_Self_TfaSettings {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return &t.TfaSettings
}

type GetUserByID_User struct {
	AuthProvider      enums.AuthProvider  "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFileID *string             "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string             "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarUpdatedAt   *time.Time          "json:\"avatarUpdatedAt,omitempty\" graphql:\"avatarUpdatedAt\""
	CreatedAt         *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID         string              "json:\"displayID\" graphql:\"displayID\""
	DisplayName       string              "json:\"displayName\" graphql:\"displayName\""
	Email             string              "json:\"email\" graphql:\"email\""
	FirstName         *string             "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID                string              "json:\"id\" graphql:\"id\""
	LastLoginProvider *enums.AuthProvider "json:\"lastLoginProvider,omitempty\" graphql:\"lastLoginProvider\""
	LastName          *string             "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen          *time.Time          "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Role              *enums.Role         "json:\"role,omitempty\" graphql:\"role\""
	Sub               *string             "json:\"sub,omitempty\" graphql:\"sub\""
	Tags              []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetUserByID_User) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return &t.AuthProvider
}
func (t *GetUserByID_User) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.AvatarLocalFileID
}
func (t *GetUserByID_User) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.AvatarRemoteURL
}
func (t *GetUserByID_User) GetAvatarUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.AvatarUpdatedAt
}
func (t *GetUserByID_User) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.CreatedAt
}
func (t *GetUserByID_User) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.CreatedBy
}
func (t *GetUserByID_User) GetDisplayID() string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.DisplayID
}
func (t *GetUserByID_User) GetDisplayName() string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.DisplayName
}
func (t *GetUserByID_User) GetEmail() string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.Email
}
func (t *GetUserByID_User) GetFirstName() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.FirstName
}
func (t *GetUserByID_User) GetID() string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.ID
}
func (t *GetUserByID_User) GetLastLoginProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.LastLoginProvider
}
func (t *GetUserByID_User) GetLastName() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.LastName
}
func (t *GetUserByID_User) GetLastSeen() *time.Time {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.LastSeen
}
func (t *GetUserByID_User) GetRole() *enums.Role {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.Role
}
func (t *GetUserByID_User) GetSub() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.Sub
}
func (t *GetUserByID_User) GetTags() []string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.Tags
}
func (t *GetUserByID_User) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.UpdatedAt
}
func (t *GetUserByID_User) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.UpdatedBy
}

type GetUsers_Users_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetUsers_Users_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetUsers_Users_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetUsers_Users_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetUsers_Users_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetUsers_Users_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetUsers_Users_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetUsers_Users_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetUsers_Users_PageInfo{}
	}
	return t.StartCursor
}

type GetUsers_Users_Edges_Node struct {
	AuthProvider      enums.AuthProvider  "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFileID *string             "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string             "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarUpdatedAt   *time.Time          "json:\"avatarUpdatedAt,omitempty\" graphql:\"avatarUpdatedAt\""
	CreatedAt         *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID         string              "json:\"displayID\" graphql:\"displayID\""
	DisplayName       string              "json:\"displayName\" graphql:\"displayName\""
	Email             string              "json:\"email\" graphql:\"email\""
	FirstName         *string             "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID                string              "json:\"id\" graphql:\"id\""
	LastLoginProvider *enums.AuthProvider "json:\"lastLoginProvider,omitempty\" graphql:\"lastLoginProvider\""
	LastName          *string             "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen          *time.Time          "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Role              *enums.Role         "json:\"role,omitempty\" graphql:\"role\""
	Sub               *string             "json:\"sub,omitempty\" graphql:\"sub\""
	Tags              []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetUsers_Users_Edges_Node) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetUsers_Users_Edges_Node{}
	}
	return &t.AuthProvider
}
func (t *GetUsers_Users_Edges_Node) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &GetUsers_Users_Edges_Node{}
	}
	return t.AvatarLocalFileID
}
func (t *GetUsers_Users_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetUsers_Users_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *GetUsers_Users_Edges_Node) GetAvatarUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUsers_Users_Edges_Node{}
	}
	return t.AvatarUpdatedAt
}
func (t *GetUsers_Users_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUsers_Users_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetUsers_Users_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetUsers_Users_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetUsers_Users_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetUsers_Users_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetUsers_Users_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetUsers_Users_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetUsers_Users_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GetUsers_Users_Edges_Node{}
	}
	return t.Email
}
func (t *GetUsers_Users_Edges_Node) GetFirstName() *string {
	if t == nil {
		t = &GetUsers_Users_Edges_Node{}
	}
	return t.FirstName
}
func (t *GetUsers_Users_Edges_Node) GetID() string {
	if t == nil {
		t = &GetUsers_Users_Edges_Node{}
	}
	return t.ID
}
func (t *GetUsers_Users_Edges_Node) GetLastLoginProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetUsers_Users_Edges_Node{}
	}
	return t.LastLoginProvider
}
func (t *GetUsers_Users_Edges_Node) GetLastName() *string {
	if t == nil {
		t = &GetUsers_Users_Edges_Node{}
	}
	return t.LastName
}
func (t *GetUsers_Users_Edges_Node) GetLastSeen() *time.Time {
	if t == nil {
		t = &GetUsers_Users_Edges_Node{}
	}
	return t.LastSeen
}
func (t *GetUsers_Users_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetUsers_Users_Edges_Node{}
	}
	return t.Role
}
func (t *GetUsers_Users_Edges_Node) GetSub() *string {
	if t == nil {
		t = &GetUsers_Users_Edges_Node{}
	}
	return t.Sub
}
func (t *GetUsers_Users_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetUsers_Users_Edges_Node{}
	}
	return t.Tags
}
func (t *GetUsers_Users_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUsers_Users_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetUsers_Users_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUsers_Users_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetUsers_Users_Edges struct {
	Node *GetUsers_Users_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetUsers_Users_Edges) GetNode() *GetUsers_Users_Edges_Node {
	if t == nil {
		t = &GetUsers_Users_Edges{}
	}
	return t.Node
}

type GetUsers_Users struct {
	Edges      []*GetUsers_Users_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetUsers_Users_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetUsers_Users) GetEdges() []*GetUsers_Users_Edges {
	if t == nil {
		t = &GetUsers_Users{}
	}
	return t.Edges
}
func (t *GetUsers_Users) GetPageInfo() *GetUsers_Users_PageInfo {
	if t == nil {
		t = &GetUsers_Users{}
	}
	return &t.PageInfo
}
func (t *GetUsers_Users) GetTotalCount() int64 {
	if t == nil {
		t = &GetUsers_Users{}
	}
	return t.TotalCount
}

type UpdateUser_UpdateUser_User struct {
	AuthProvider      enums.AuthProvider  "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFileID *string             "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string             "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarUpdatedAt   *time.Time          "json:\"avatarUpdatedAt,omitempty\" graphql:\"avatarUpdatedAt\""
	CreatedAt         *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID         string              "json:\"displayID\" graphql:\"displayID\""
	DisplayName       string              "json:\"displayName\" graphql:\"displayName\""
	Email             string              "json:\"email\" graphql:\"email\""
	FirstName         *string             "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID                string              "json:\"id\" graphql:\"id\""
	LastLoginProvider *enums.AuthProvider "json:\"lastLoginProvider,omitempty\" graphql:\"lastLoginProvider\""
	LastName          *string             "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen          *time.Time          "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Role              *enums.Role         "json:\"role,omitempty\" graphql:\"role\""
	Sub               *string             "json:\"sub,omitempty\" graphql:\"sub\""
	Tags              []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateUser_UpdateUser_User) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return &t.AuthProvider
}
func (t *UpdateUser_UpdateUser_User) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.AvatarLocalFileID
}
func (t *UpdateUser_UpdateUser_User) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.AvatarRemoteURL
}
func (t *UpdateUser_UpdateUser_User) GetAvatarUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.AvatarUpdatedAt
}
func (t *UpdateUser_UpdateUser_User) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.CreatedAt
}
func (t *UpdateUser_UpdateUser_User) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.CreatedBy
}
func (t *UpdateUser_UpdateUser_User) GetDisplayID() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.DisplayID
}
func (t *UpdateUser_UpdateUser_User) GetDisplayName() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.DisplayName
}
func (t *UpdateUser_UpdateUser_User) GetEmail() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.Email
}
func (t *UpdateUser_UpdateUser_User) GetFirstName() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.FirstName
}
func (t *UpdateUser_UpdateUser_User) GetID() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.ID
}
func (t *UpdateUser_UpdateUser_User) GetLastLoginProvider() *enums.AuthProvider {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.LastLoginProvider
}
func (t *UpdateUser_UpdateUser_User) GetLastName() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.LastName
}
func (t *UpdateUser_UpdateUser_User) GetLastSeen() *time.Time {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.LastSeen
}
func (t *UpdateUser_UpdateUser_User) GetRole() *enums.Role {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.Role
}
func (t *UpdateUser_UpdateUser_User) GetSub() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.Sub
}
func (t *UpdateUser_UpdateUser_User) GetTags() []string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.Tags
}
func (t *UpdateUser_UpdateUser_User) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.UpdatedAt
}
func (t *UpdateUser_UpdateUser_User) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.UpdatedBy
}

type UpdateUser_UpdateUser struct {
	User UpdateUser_UpdateUser_User "json:\"user\" graphql:\"user\""
}

func (t *UpdateUser_UpdateUser) GetUser() *UpdateUser_UpdateUser_User {
	if t == nil {
		t = &UpdateUser_UpdateUser{}
	}
	return &t.User
}

type GetAllUserHistories_UserHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllUserHistories_UserHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllUserHistories_UserHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllUserHistories_UserHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllUserHistories_UserHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllUserHistories_UserHistories_Edges_Node struct {
	AuthProvider      enums.AuthProvider  "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFileID *string             "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string             "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarUpdatedAt   *time.Time          "json:\"avatarUpdatedAt,omitempty\" graphql:\"avatarUpdatedAt\""
	CreatedAt         *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID         string              "json:\"displayID\" graphql:\"displayID\""
	DisplayName       string              "json:\"displayName\" graphql:\"displayName\""
	Email             string              "json:\"email\" graphql:\"email\""
	FirstName         *string             "json:\"firstName,omitempty\" graphql:\"firstName\""
	HistoryTime       time.Time           "json:\"historyTime\" graphql:\"historyTime\""
	ID                string              "json:\"id\" graphql:\"id\""
	LastLoginProvider *enums.AuthProvider "json:\"lastLoginProvider,omitempty\" graphql:\"lastLoginProvider\""
	LastName          *string             "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen          *time.Time          "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Operation         history.OpType      "json:\"operation\" graphql:\"operation\""
	Ref               *string             "json:\"ref,omitempty\" graphql:\"ref\""
	Role              *enums.Role         "json:\"role,omitempty\" graphql:\"role\""
	Sub               *string             "json:\"sub,omitempty\" graphql:\"sub\""
	Tags              []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllUserHistories_UserHistories_Edges_Node) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return &t.AuthProvider
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarLocalFileID
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetAvatarUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarUpdatedAt
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.Email
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetFirstName() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.FirstName
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetLastLoginProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.LastLoginProvider
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetLastName() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.LastName
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetLastSeen() *time.Time {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.LastSeen
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.Role
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetSub() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.Sub
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllUserHistories_UserHistories_Edges struct {
	Node *GetAllUserHistories_UserHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllUserHistories_UserHistories_Edges) GetNode() *GetAllUserHistories_UserHistories_Edges_Node {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges{}
	}
	return t.Node
}

type GetAllUserHistories_UserHistories struct {
	Edges      []*GetAllUserHistories_UserHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllUserHistories_UserHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllUserHistories_UserHistories) GetEdges() []*GetAllUserHistories_UserHistories_Edges {
	if t == nil {
		t = &GetAllUserHistories_UserHistories{}
	}
	return t.Edges
}
func (t *GetAllUserHistories_UserHistories) GetPageInfo() *GetAllUserHistories_UserHistories_PageInfo {
	if t == nil {
		t = &GetAllUserHistories_UserHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllUserHistories_UserHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllUserHistories_UserHistories{}
	}
	return t.TotalCount
}

type GetUserHistories_UserHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetUserHistories_UserHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetUserHistories_UserHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetUserHistories_UserHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetUserHistories_UserHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetUserHistories_UserHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetUserHistories_UserHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetUserHistories_UserHistories_Edges_Node struct {
	AuthProvider      enums.AuthProvider  "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFileID *string             "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string             "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarUpdatedAt   *time.Time          "json:\"avatarUpdatedAt,omitempty\" graphql:\"avatarUpdatedAt\""
	CreatedAt         *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID         string              "json:\"displayID\" graphql:\"displayID\""
	DisplayName       string              "json:\"displayName\" graphql:\"displayName\""
	Email             string              "json:\"email\" graphql:\"email\""
	FirstName         *string             "json:\"firstName,omitempty\" graphql:\"firstName\""
	HistoryTime       time.Time           "json:\"historyTime\" graphql:\"historyTime\""
	ID                string              "json:\"id\" graphql:\"id\""
	LastLoginProvider *enums.AuthProvider "json:\"lastLoginProvider,omitempty\" graphql:\"lastLoginProvider\""
	LastName          *string             "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen          *time.Time          "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Operation         history.OpType      "json:\"operation\" graphql:\"operation\""
	Ref               *string             "json:\"ref,omitempty\" graphql:\"ref\""
	Role              *enums.Role         "json:\"role,omitempty\" graphql:\"role\""
	Sub               *string             "json:\"sub,omitempty\" graphql:\"sub\""
	Tags              []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetUserHistories_UserHistories_Edges_Node) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return &t.AuthProvider
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarLocalFileID
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetAvatarUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarUpdatedAt
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.Email
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetFirstName() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.FirstName
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetLastLoginProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.LastLoginProvider
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetLastName() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.LastName
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetLastSeen() *time.Time {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.LastSeen
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.Role
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetSub() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.Sub
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetUserHistories_UserHistories_Edges struct {
	Node *GetUserHistories_UserHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetUserHistories_UserHistories_Edges) GetNode() *GetUserHistories_UserHistories_Edges_Node {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges{}
	}
	return t.Node
}

type GetUserHistories_UserHistories struct {
	Edges      []*GetUserHistories_UserHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetUserHistories_UserHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetUserHistories_UserHistories) GetEdges() []*GetUserHistories_UserHistories_Edges {
	if t == nil {
		t = &GetUserHistories_UserHistories{}
	}
	return t.Edges
}
func (t *GetUserHistories_UserHistories) GetPageInfo() *GetUserHistories_UserHistories_PageInfo {
	if t == nil {
		t = &GetUserHistories_UserHistories{}
	}
	return &t.PageInfo
}
func (t *GetUserHistories_UserHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetUserHistories_UserHistories{}
	}
	return t.TotalCount
}

type CreateUserSetting_CreateUserSetting_UserSetting struct {
	CreatedAt         *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed    bool             "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	ID                string           "json:\"id\" graphql:\"id\""
	IsTfaEnabled      *bool            "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	IsWebauthnAllowed *bool            "json:\"isWebauthnAllowed,omitempty\" graphql:\"isWebauthnAllowed\""
	Locked            bool             "json:\"locked\" graphql:\"locked\""
	SilencedAt        *time.Time       "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status            enums.UserStatus "json:\"status\" graphql:\"status\""
	SuspendedAt       *time.Time       "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags              []string         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID            *string          "json:\"userID,omitempty\" graphql:\"userID\""
}

func (t *CreateUserSetting_CreateUserSetting_UserSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateUserSetting_CreateUserSetting_UserSetting{}
	}
	return t.CreatedAt
}
func (t *CreateUserSetting_CreateUserSetting_UserSetting) GetCreatedBy() *string {
	if t == nil {
		t = &CreateUserSetting_CreateUserSetting_UserSetting{}
	}
	return t.CreatedBy
}
func (t *CreateUserSetting_CreateUserSetting_UserSetting) GetEmailConfirmed() bool {
	if t == nil {
		t = &CreateUserSetting_CreateUserSetting_UserSetting{}
	}
	return t.EmailConfirmed
}
func (t *CreateUserSetting_CreateUserSetting_UserSetting) GetID() string {
	if t == nil {
		t = &CreateUserSetting_CreateUserSetting_UserSetting{}
	}
	return t.ID
}
func (t *CreateUserSetting_CreateUserSetting_UserSetting) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &CreateUserSetting_CreateUserSetting_UserSetting{}
	}
	return t.IsTfaEnabled
}
func (t *CreateUserSetting_CreateUserSetting_UserSetting) GetIsWebauthnAllowed() *bool {
	if t == nil {
		t = &CreateUserSetting_CreateUserSetting_UserSetting{}
	}
	return t.IsWebauthnAllowed
}
func (t *CreateUserSetting_CreateUserSetting_UserSetting) GetLocked() bool {
	if t == nil {
		t = &CreateUserSetting_CreateUserSetting_UserSetting{}
	}
	return t.Locked
}
func (t *CreateUserSetting_CreateUserSetting_UserSetting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &CreateUserSetting_CreateUserSetting_UserSetting{}
	}
	return t.SilencedAt
}
func (t *CreateUserSetting_CreateUserSetting_UserSetting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &CreateUserSetting_CreateUserSetting_UserSetting{}
	}
	return &t.Status
}
func (t *CreateUserSetting_CreateUserSetting_UserSetting) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &CreateUserSetting_CreateUserSetting_UserSetting{}
	}
	return t.SuspendedAt
}
func (t *CreateUserSetting_CreateUserSetting_UserSetting) GetTags() []string {
	if t == nil {
		t = &CreateUserSetting_CreateUserSetting_UserSetting{}
	}
	return t.Tags
}
func (t *CreateUserSetting_CreateUserSetting_UserSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateUserSetting_CreateUserSetting_UserSetting{}
	}
	return t.UpdatedAt
}
func (t *CreateUserSetting_CreateUserSetting_UserSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateUserSetting_CreateUserSetting_UserSetting{}
	}
	return t.UpdatedBy
}
func (t *CreateUserSetting_CreateUserSetting_UserSetting) GetUserID() *string {
	if t == nil {
		t = &CreateUserSetting_CreateUserSetting_UserSetting{}
	}
	return t.UserID
}

type CreateUserSetting_CreateUserSetting struct {
	UserSetting CreateUserSetting_CreateUserSetting_UserSetting "json:\"userSetting\" graphql:\"userSetting\""
}

func (t *CreateUserSetting_CreateUserSetting) GetUserSetting() *CreateUserSetting_CreateUserSetting_UserSetting {
	if t == nil {
		t = &CreateUserSetting_CreateUserSetting{}
	}
	return &t.UserSetting
}

type GetAllUserSettings_UserSettings_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllUserSettings_UserSettings_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllUserSettings_UserSettings_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllUserSettings_UserSettings_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllUserSettings_UserSettings_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_PageInfo{}
	}
	return t.StartCursor
}

type GetAllUserSettings_UserSettings_Edges_Node struct {
	CreatedAt         *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed    bool             "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	ID                string           "json:\"id\" graphql:\"id\""
	IsTfaEnabled      *bool            "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	IsWebauthnAllowed *bool            "json:\"isWebauthnAllowed,omitempty\" graphql:\"isWebauthnAllowed\""
	Locked            bool             "json:\"locked\" graphql:\"locked\""
	SilencedAt        *time.Time       "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status            enums.UserStatus "json:\"status\" graphql:\"status\""
	SuspendedAt       *time.Time       "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags              []string         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID            *string          "json:\"userID,omitempty\" graphql:\"userID\""
}

func (t *GetAllUserSettings_UserSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.EmailConfirmed
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.IsTfaEnabled
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetIsWebauthnAllowed() *bool {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.IsWebauthnAllowed
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetLocked() bool {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.Locked
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.SilencedAt
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.SuspendedAt
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetUserID() *string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.UserID
}

type GetAllUserSettings_UserSettings_Edges struct {
	Node *GetAllUserSettings_UserSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllUserSettings_UserSettings_Edges) GetNode() *GetAllUserSettings_UserSettings_Edges_Node {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges{}
	}
	return t.Node
}

type GetAllUserSettings_UserSettings struct {
	Edges      []*GetAllUserSettings_UserSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllUserSettings_UserSettings_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllUserSettings_UserSettings) GetEdges() []*GetAllUserSettings_UserSettings_Edges {
	if t == nil {
		t = &GetAllUserSettings_UserSettings{}
	}
	return t.Edges
}
func (t *GetAllUserSettings_UserSettings) GetPageInfo() *GetAllUserSettings_UserSettings_PageInfo {
	if t == nil {
		t = &GetAllUserSettings_UserSettings{}
	}
	return &t.PageInfo
}
func (t *GetAllUserSettings_UserSettings) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllUserSettings_UserSettings{}
	}
	return t.TotalCount
}

type GetUserSettingByID_UserSetting struct {
	CreatedAt         *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed    bool             "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	ID                string           "json:\"id\" graphql:\"id\""
	IsTfaEnabled      *bool            "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	IsWebauthnAllowed *bool            "json:\"isWebauthnAllowed,omitempty\" graphql:\"isWebauthnAllowed\""
	Locked            bool             "json:\"locked\" graphql:\"locked\""
	SilencedAt        *time.Time       "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status            enums.UserStatus "json:\"status\" graphql:\"status\""
	SuspendedAt       *time.Time       "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags              []string         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID            *string          "json:\"userID,omitempty\" graphql:\"userID\""
}

func (t *GetUserSettingByID_UserSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.CreatedAt
}
func (t *GetUserSettingByID_UserSetting) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.CreatedBy
}
func (t *GetUserSettingByID_UserSetting) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.EmailConfirmed
}
func (t *GetUserSettingByID_UserSetting) GetID() string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.ID
}
func (t *GetUserSettingByID_UserSetting) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.IsTfaEnabled
}
func (t *GetUserSettingByID_UserSetting) GetIsWebauthnAllowed() *bool {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.IsWebauthnAllowed
}
func (t *GetUserSettingByID_UserSetting) GetLocked() bool {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.Locked
}
func (t *GetUserSettingByID_UserSetting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.SilencedAt
}
func (t *GetUserSettingByID_UserSetting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return &t.Status
}
func (t *GetUserSettingByID_UserSetting) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.SuspendedAt
}
func (t *GetUserSettingByID_UserSetting) GetTags() []string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.Tags
}
func (t *GetUserSettingByID_UserSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.UpdatedAt
}
func (t *GetUserSettingByID_UserSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.UpdatedBy
}
func (t *GetUserSettingByID_UserSetting) GetUserID() *string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.UserID
}

type GetUserSettings_UserSettings_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetUserSettings_UserSettings_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetUserSettings_UserSettings_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetUserSettings_UserSettings_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetUserSettings_UserSettings_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetUserSettings_UserSettings_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetUserSettings_UserSettings_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetUserSettings_UserSettings_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetUserSettings_UserSettings_PageInfo{}
	}
	return t.StartCursor
}

type GetUserSettings_UserSettings_Edges_Node struct {
	CreatedAt         *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed    bool             "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	ID                string           "json:\"id\" graphql:\"id\""
	IsTfaEnabled      *bool            "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	IsWebauthnAllowed *bool            "json:\"isWebauthnAllowed,omitempty\" graphql:\"isWebauthnAllowed\""
	Locked            bool             "json:\"locked\" graphql:\"locked\""
	SilencedAt        *time.Time       "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status            enums.UserStatus "json:\"status\" graphql:\"status\""
	SuspendedAt       *time.Time       "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags              []string         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID            *string          "json:\"userID,omitempty\" graphql:\"userID\""
}

func (t *GetUserSettings_UserSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.EmailConfirmed
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.IsTfaEnabled
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetIsWebauthnAllowed() *bool {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.IsWebauthnAllowed
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetLocked() bool {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.Locked
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.SilencedAt
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return &t.Status
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.SuspendedAt
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.Tags
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetUserID() *string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.UserID
}

type GetUserSettings_UserSettings_Edges struct {
	Node *GetUserSettings_UserSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetUserSettings_UserSettings_Edges) GetNode() *GetUserSettings_UserSettings_Edges_Node {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges{}
	}
	return t.Node
}

type GetUserSettings_UserSettings struct {
	Edges      []*GetUserSettings_UserSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetUserSettings_UserSettings_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetUserSettings_UserSettings) GetEdges() []*GetUserSettings_UserSettings_Edges {
	if t == nil {
		t = &GetUserSettings_UserSettings{}
	}
	return t.Edges
}
func (t *GetUserSettings_UserSettings) GetPageInfo() *GetUserSettings_UserSettings_PageInfo {
	if t == nil {
		t = &GetUserSettings_UserSettings{}
	}
	return &t.PageInfo
}
func (t *GetUserSettings_UserSettings) GetTotalCount() int64 {
	if t == nil {
		t = &GetUserSettings_UserSettings{}
	}
	return t.TotalCount
}

type UpdateUserSetting_UpdateUserSetting_UserSetting struct {
	CreatedAt         *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed    bool             "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	ID                string           "json:\"id\" graphql:\"id\""
	IsTfaEnabled      *bool            "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	IsWebauthnAllowed *bool            "json:\"isWebauthnAllowed,omitempty\" graphql:\"isWebauthnAllowed\""
	Locked            bool             "json:\"locked\" graphql:\"locked\""
	SilencedAt        *time.Time       "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status            enums.UserStatus "json:\"status\" graphql:\"status\""
	SuspendedAt       *time.Time       "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags              []string         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID            *string          "json:\"userID,omitempty\" graphql:\"userID\""
}

func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.CreatedAt
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.CreatedBy
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetEmailConfirmed() bool {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.EmailConfirmed
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetID() string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.ID
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.IsTfaEnabled
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetIsWebauthnAllowed() *bool {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.IsWebauthnAllowed
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetLocked() bool {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.Locked
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.SilencedAt
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return &t.Status
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.SuspendedAt
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetTags() []string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.Tags
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.UpdatedAt
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.UpdatedBy
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetUserID() *string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.UserID
}

type UpdateUserSetting_UpdateUserSetting struct {
	UserSetting UpdateUserSetting_UpdateUserSetting_UserSetting "json:\"userSetting\" graphql:\"userSetting\""
}

func (t *UpdateUserSetting_UpdateUserSetting) GetUserSetting() *UpdateUserSetting_UpdateUserSetting_UserSetting {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting{}
	}
	return &t.UserSetting
}

type GetAllUserSettingHistories_UserSettingHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllUserSettingHistories_UserSettingHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllUserSettingHistories_UserSettingHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllUserSettingHistories_UserSettingHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllUserSettingHistories_UserSettingHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetAllUserSettingHistories_UserSettingHistories_Edges_Node struct {
	CreatedAt         *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed    bool             "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	HistoryTime       time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID                string           "json:\"id\" graphql:\"id\""
	IsTfaEnabled      *bool            "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	IsWebauthnAllowed *bool            "json:\"isWebauthnAllowed,omitempty\" graphql:\"isWebauthnAllowed\""
	Locked            bool             "json:\"locked\" graphql:\"locked\""
	Operation         history.OpType   "json:\"operation\" graphql:\"operation\""
	Ref               *string          "json:\"ref,omitempty\" graphql:\"ref\""
	SilencedAt        *time.Time       "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status            enums.UserStatus "json:\"status\" graphql:\"status\""
	SuspendedAt       *time.Time       "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags              []string         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID            *string          "json:\"userID,omitempty\" graphql:\"userID\""
}

func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.EmailConfirmed
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.IsTfaEnabled
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetIsWebauthnAllowed() *bool {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.IsWebauthnAllowed
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetLocked() bool {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Locked
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.SilencedAt
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.SuspendedAt
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetUserID() *string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UserID
}

type GetAllUserSettingHistories_UserSettingHistories_Edges struct {
	Node *GetAllUserSettingHistories_UserSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllUserSettingHistories_UserSettingHistories_Edges) GetNode() *GetAllUserSettingHistories_UserSettingHistories_Edges_Node {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges{}
	}
	return t.Node
}

type GetAllUserSettingHistories_UserSettingHistories struct {
	Edges      []*GetAllUserSettingHistories_UserSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllUserSettingHistories_UserSettingHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllUserSettingHistories_UserSettingHistories) GetEdges() []*GetAllUserSettingHistories_UserSettingHistories_Edges {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories{}
	}
	return t.Edges
}
func (t *GetAllUserSettingHistories_UserSettingHistories) GetPageInfo() *GetAllUserSettingHistories_UserSettingHistories_PageInfo {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories{}
	}
	return &t.PageInfo
}
func (t *GetAllUserSettingHistories_UserSettingHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories{}
	}
	return t.TotalCount
}

type GetUserSettingHistories_UserSettingHistories_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetUserSettingHistories_UserSettingHistories_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetUserSettingHistories_UserSettingHistories_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetUserSettingHistories_UserSettingHistories_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetUserSettingHistories_UserSettingHistories_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_PageInfo{}
	}
	return t.StartCursor
}

type GetUserSettingHistories_UserSettingHistories_Edges_Node struct {
	CreatedAt         *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed    bool             "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	HistoryTime       time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID                string           "json:\"id\" graphql:\"id\""
	IsTfaEnabled      *bool            "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	IsWebauthnAllowed *bool            "json:\"isWebauthnAllowed,omitempty\" graphql:\"isWebauthnAllowed\""
	Locked            bool             "json:\"locked\" graphql:\"locked\""
	Operation         history.OpType   "json:\"operation\" graphql:\"operation\""
	Ref               *string          "json:\"ref,omitempty\" graphql:\"ref\""
	SilencedAt        *time.Time       "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status            enums.UserStatus "json:\"status\" graphql:\"status\""
	SuspendedAt       *time.Time       "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags              []string         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID            *string          "json:\"userID,omitempty\" graphql:\"userID\""
}

func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.EmailConfirmed
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.IsTfaEnabled
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetIsWebauthnAllowed() *bool {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.IsWebauthnAllowed
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetLocked() bool {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Locked
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.SilencedAt
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.SuspendedAt
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetUserID() *string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UserID
}

type GetUserSettingHistories_UserSettingHistories_Edges struct {
	Node *GetUserSettingHistories_UserSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetUserSettingHistories_UserSettingHistories_Edges) GetNode() *GetUserSettingHistories_UserSettingHistories_Edges_Node {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges{}
	}
	return t.Node
}

type GetUserSettingHistories_UserSettingHistories struct {
	Edges      []*GetUserSettingHistories_UserSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetUserSettingHistories_UserSettingHistories_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetUserSettingHistories_UserSettingHistories) GetEdges() []*GetUserSettingHistories_UserSettingHistories_Edges {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories{}
	}
	return t.Edges
}
func (t *GetUserSettingHistories_UserSettingHistories) GetPageInfo() *GetUserSettingHistories_UserSettingHistories_PageInfo {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories{}
	}
	return &t.PageInfo
}
func (t *GetUserSettingHistories_UserSettingHistories) GetTotalCount() int64 {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories{}
	}
	return t.TotalCount
}

type DeleteWebauthn_DeleteWebauthn struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteWebauthn_DeleteWebauthn) GetDeletedID() string {
	if t == nil {
		t = &DeleteWebauthn_DeleteWebauthn{}
	}
	return t.DeletedID
}

type GetAllWebauthns_Webauthns_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllWebauthns_Webauthns_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllWebauthns_Webauthns_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllWebauthns_Webauthns_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllWebauthns_Webauthns_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllWebauthns_Webauthns_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllWebauthns_Webauthns_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllWebauthns_Webauthns_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllWebauthns_Webauthns_PageInfo{}
	}
	return t.StartCursor
}

type GetAllWebauthns_Webauthns_Edges_Node struct {
	BackupEligible bool       "json:\"backupEligible\" graphql:\"backupEligible\""
	BackupState    bool       "json:\"backupState\" graphql:\"backupState\""
	CreatedAt      *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID             string     "json:\"id\" graphql:\"id\""
	Tags           []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllWebauthns_Webauthns_Edges_Node) GetBackupEligible() bool {
	if t == nil {
		t = &GetAllWebauthns_Webauthns_Edges_Node{}
	}
	return t.BackupEligible
}
func (t *GetAllWebauthns_Webauthns_Edges_Node) GetBackupState() bool {
	if t == nil {
		t = &GetAllWebauthns_Webauthns_Edges_Node{}
	}
	return t.BackupState
}
func (t *GetAllWebauthns_Webauthns_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllWebauthns_Webauthns_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllWebauthns_Webauthns_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllWebauthns_Webauthns_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllWebauthns_Webauthns_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllWebauthns_Webauthns_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllWebauthns_Webauthns_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllWebauthns_Webauthns_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllWebauthns_Webauthns_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllWebauthns_Webauthns_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllWebauthns_Webauthns_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllWebauthns_Webauthns_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllWebauthns_Webauthns_Edges struct {
	Node *GetAllWebauthns_Webauthns_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllWebauthns_Webauthns_Edges) GetNode() *GetAllWebauthns_Webauthns_Edges_Node {
	if t == nil {
		t = &GetAllWebauthns_Webauthns_Edges{}
	}
	return t.Node
}

type GetAllWebauthns_Webauthns struct {
	Edges      []*GetAllWebauthns_Webauthns_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllWebauthns_Webauthns_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllWebauthns_Webauthns) GetEdges() []*GetAllWebauthns_Webauthns_Edges {
	if t == nil {
		t = &GetAllWebauthns_Webauthns{}
	}
	return t.Edges
}
func (t *GetAllWebauthns_Webauthns) GetPageInfo() *GetAllWebauthns_Webauthns_PageInfo {
	if t == nil {
		t = &GetAllWebauthns_Webauthns{}
	}
	return &t.PageInfo
}
func (t *GetAllWebauthns_Webauthns) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllWebauthns_Webauthns{}
	}
	return t.TotalCount
}

type CreateBulkCSVActionPlan struct {
	CreateBulkCSVActionPlan CreateBulkCSVActionPlan_CreateBulkCSVActionPlan "json:\"createBulkCSVActionPlan\" graphql:\"createBulkCSVActionPlan\""
}

func (t *CreateBulkCSVActionPlan) GetCreateBulkCSVActionPlan() *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan {
	if t == nil {
		t = &CreateBulkCSVActionPlan{}
	}
	return &t.CreateBulkCSVActionPlan
}

type CreateBulkActionPlan struct {
	CreateBulkActionPlan CreateBulkActionPlan_CreateBulkActionPlan "json:\"createBulkActionPlan\" graphql:\"createBulkActionPlan\""
}

func (t *CreateBulkActionPlan) GetCreateBulkActionPlan() *CreateBulkActionPlan_CreateBulkActionPlan {
	if t == nil {
		t = &CreateBulkActionPlan{}
	}
	return &t.CreateBulkActionPlan
}

type CreateActionPlan struct {
	CreateActionPlan CreateActionPlan_CreateActionPlan "json:\"createActionPlan\" graphql:\"createActionPlan\""
}

func (t *CreateActionPlan) GetCreateActionPlan() *CreateActionPlan_CreateActionPlan {
	if t == nil {
		t = &CreateActionPlan{}
	}
	return &t.CreateActionPlan
}

type DeleteActionPlan struct {
	DeleteActionPlan DeleteActionPlan_DeleteActionPlan "json:\"deleteActionPlan\" graphql:\"deleteActionPlan\""
}

func (t *DeleteActionPlan) GetDeleteActionPlan() *DeleteActionPlan_DeleteActionPlan {
	if t == nil {
		t = &DeleteActionPlan{}
	}
	return &t.DeleteActionPlan
}

type GetAllActionPlans struct {
	ActionPlans GetAllActionPlans_ActionPlans "json:\"actionPlans\" graphql:\"actionPlans\""
}

func (t *GetAllActionPlans) GetActionPlans() *GetAllActionPlans_ActionPlans {
	if t == nil {
		t = &GetAllActionPlans{}
	}
	return &t.ActionPlans
}

type GetActionPlanByID struct {
	ActionPlan GetActionPlanByID_ActionPlan "json:\"actionPlan\" graphql:\"actionPlan\""
}

func (t *GetActionPlanByID) GetActionPlan() *GetActionPlanByID_ActionPlan {
	if t == nil {
		t = &GetActionPlanByID{}
	}
	return &t.ActionPlan
}

type GetActionPlans struct {
	ActionPlans GetActionPlans_ActionPlans "json:\"actionPlans\" graphql:\"actionPlans\""
}

func (t *GetActionPlans) GetActionPlans() *GetActionPlans_ActionPlans {
	if t == nil {
		t = &GetActionPlans{}
	}
	return &t.ActionPlans
}

type UpdateActionPlan struct {
	UpdateActionPlan UpdateActionPlan_UpdateActionPlan "json:\"updateActionPlan\" graphql:\"updateActionPlan\""
}

func (t *UpdateActionPlan) GetUpdateActionPlan() *UpdateActionPlan_UpdateActionPlan {
	if t == nil {
		t = &UpdateActionPlan{}
	}
	return &t.UpdateActionPlan
}

type GetAllActionPlanHistories struct {
	ActionPlanHistories GetAllActionPlanHistories_ActionPlanHistories "json:\"actionPlanHistories\" graphql:\"actionPlanHistories\""
}

func (t *GetAllActionPlanHistories) GetActionPlanHistories() *GetAllActionPlanHistories_ActionPlanHistories {
	if t == nil {
		t = &GetAllActionPlanHistories{}
	}
	return &t.ActionPlanHistories
}

type GetActionPlanHistories struct {
	ActionPlanHistories GetActionPlanHistories_ActionPlanHistories "json:\"actionPlanHistories\" graphql:\"actionPlanHistories\""
}

func (t *GetActionPlanHistories) GetActionPlanHistories() *GetActionPlanHistories_ActionPlanHistories {
	if t == nil {
		t = &GetActionPlanHistories{}
	}
	return &t.ActionPlanHistories
}

type CreateAPIToken struct {
	CreateAPIToken CreateAPIToken_CreateAPIToken "json:\"createAPIToken\" graphql:\"createAPIToken\""
}

func (t *CreateAPIToken) GetCreateAPIToken() *CreateAPIToken_CreateAPIToken {
	if t == nil {
		t = &CreateAPIToken{}
	}
	return &t.CreateAPIToken
}

type CreateBulkAPIToken struct {
	CreateBulkAPIToken CreateBulkAPIToken_CreateBulkAPIToken "json:\"createBulkAPIToken\" graphql:\"createBulkAPIToken\""
}

func (t *CreateBulkAPIToken) GetCreateBulkAPIToken() *CreateBulkAPIToken_CreateBulkAPIToken {
	if t == nil {
		t = &CreateBulkAPIToken{}
	}
	return &t.CreateBulkAPIToken
}

type CreateBulkCSVAPIToken struct {
	CreateBulkCSVAPIToken CreateBulkCSVAPIToken_CreateBulkCSVAPIToken "json:\"createBulkCSVAPIToken\" graphql:\"createBulkCSVAPIToken\""
}

func (t *CreateBulkCSVAPIToken) GetCreateBulkCSVAPIToken() *CreateBulkCSVAPIToken_CreateBulkCSVAPIToken {
	if t == nil {
		t = &CreateBulkCSVAPIToken{}
	}
	return &t.CreateBulkCSVAPIToken
}

type DeleteAPIToken struct {
	DeleteAPIToken DeleteAPIToken_DeleteAPIToken "json:\"deleteAPIToken\" graphql:\"deleteAPIToken\""
}

func (t *DeleteAPIToken) GetDeleteAPIToken() *DeleteAPIToken_DeleteAPIToken {
	if t == nil {
		t = &DeleteAPIToken{}
	}
	return &t.DeleteAPIToken
}

type GetAllAPITokens struct {
	APITokens GetAllAPITokens_APITokens "json:\"apiTokens\" graphql:\"apiTokens\""
}

func (t *GetAllAPITokens) GetAPITokens() *GetAllAPITokens_APITokens {
	if t == nil {
		t = &GetAllAPITokens{}
	}
	return &t.APITokens
}

type GetAPITokenByID struct {
	APIToken GetAPITokenByID_APIToken "json:\"apiToken\" graphql:\"apiToken\""
}

func (t *GetAPITokenByID) GetAPIToken() *GetAPITokenByID_APIToken {
	if t == nil {
		t = &GetAPITokenByID{}
	}
	return &t.APIToken
}

type GetAPITokens struct {
	APITokens GetAPITokens_APITokens "json:\"apiTokens\" graphql:\"apiTokens\""
}

func (t *GetAPITokens) GetAPITokens() *GetAPITokens_APITokens {
	if t == nil {
		t = &GetAPITokens{}
	}
	return &t.APITokens
}

type UpdateAPIToken struct {
	UpdateAPIToken UpdateAPIToken_UpdateAPIToken "json:\"updateAPIToken\" graphql:\"updateAPIToken\""
}

func (t *UpdateAPIToken) GetUpdateAPIToken() *UpdateAPIToken_UpdateAPIToken {
	if t == nil {
		t = &UpdateAPIToken{}
	}
	return &t.UpdateAPIToken
}

type CreateBulkCSVAsset struct {
	CreateBulkCSVAsset CreateBulkCSVAsset_CreateBulkCSVAsset "json:\"createBulkCSVAsset\" graphql:\"createBulkCSVAsset\""
}

func (t *CreateBulkCSVAsset) GetCreateBulkCSVAsset() *CreateBulkCSVAsset_CreateBulkCSVAsset {
	if t == nil {
		t = &CreateBulkCSVAsset{}
	}
	return &t.CreateBulkCSVAsset
}

type CreateBulkAsset struct {
	CreateBulkAsset CreateBulkAsset_CreateBulkAsset "json:\"createBulkAsset\" graphql:\"createBulkAsset\""
}

func (t *CreateBulkAsset) GetCreateBulkAsset() *CreateBulkAsset_CreateBulkAsset {
	if t == nil {
		t = &CreateBulkAsset{}
	}
	return &t.CreateBulkAsset
}

type CreateAsset struct {
	CreateAsset CreateAsset_CreateAsset "json:\"createAsset\" graphql:\"createAsset\""
}

func (t *CreateAsset) GetCreateAsset() *CreateAsset_CreateAsset {
	if t == nil {
		t = &CreateAsset{}
	}
	return &t.CreateAsset
}

type DeleteAsset struct {
	DeleteAsset DeleteAsset_DeleteAsset "json:\"deleteAsset\" graphql:\"deleteAsset\""
}

func (t *DeleteAsset) GetDeleteAsset() *DeleteAsset_DeleteAsset {
	if t == nil {
		t = &DeleteAsset{}
	}
	return &t.DeleteAsset
}

type GetAllAssets struct {
	Assets GetAllAssets_Assets "json:\"assets\" graphql:\"assets\""
}

func (t *GetAllAssets) GetAssets() *GetAllAssets_Assets {
	if t == nil {
		t = &GetAllAssets{}
	}
	return &t.Assets
}

type GetAssetByID struct {
	Asset GetAssetByID_Asset "json:\"asset\" graphql:\"asset\""
}

func (t *GetAssetByID) GetAsset() *GetAssetByID_Asset {
	if t == nil {
		t = &GetAssetByID{}
	}
	return &t.Asset
}

type GetAssets struct {
	Assets GetAssets_Assets "json:\"assets\" graphql:\"assets\""
}

func (t *GetAssets) GetAssets() *GetAssets_Assets {
	if t == nil {
		t = &GetAssets{}
	}
	return &t.Assets
}

type UpdateAsset struct {
	UpdateAsset UpdateAsset_UpdateAsset "json:\"updateAsset\" graphql:\"updateAsset\""
}

func (t *UpdateAsset) GetUpdateAsset() *UpdateAsset_UpdateAsset {
	if t == nil {
		t = &UpdateAsset{}
	}
	return &t.UpdateAsset
}

type GetAllAssetHistories struct {
	AssetHistories GetAllAssetHistories_AssetHistories "json:\"assetHistories\" graphql:\"assetHistories\""
}

func (t *GetAllAssetHistories) GetAssetHistories() *GetAllAssetHistories_AssetHistories {
	if t == nil {
		t = &GetAllAssetHistories{}
	}
	return &t.AssetHistories
}

type GetAssetHistories struct {
	AssetHistories GetAssetHistories_AssetHistories "json:\"assetHistories\" graphql:\"assetHistories\""
}

func (t *GetAssetHistories) GetAssetHistories() *GetAssetHistories_AssetHistories {
	if t == nil {
		t = &GetAssetHistories{}
	}
	return &t.AssetHistories
}

type CreateBulkCSVContact struct {
	CreateBulkCSVContact CreateBulkCSVContact_CreateBulkCSVContact "json:\"createBulkCSVContact\" graphql:\"createBulkCSVContact\""
}

func (t *CreateBulkCSVContact) GetCreateBulkCSVContact() *CreateBulkCSVContact_CreateBulkCSVContact {
	if t == nil {
		t = &CreateBulkCSVContact{}
	}
	return &t.CreateBulkCSVContact
}

type CreateBulkContact struct {
	CreateBulkContact CreateBulkContact_CreateBulkContact "json:\"createBulkContact\" graphql:\"createBulkContact\""
}

func (t *CreateBulkContact) GetCreateBulkContact() *CreateBulkContact_CreateBulkContact {
	if t == nil {
		t = &CreateBulkContact{}
	}
	return &t.CreateBulkContact
}

type CreateContact struct {
	CreateContact CreateContact_CreateContact "json:\"createContact\" graphql:\"createContact\""
}

func (t *CreateContact) GetCreateContact() *CreateContact_CreateContact {
	if t == nil {
		t = &CreateContact{}
	}
	return &t.CreateContact
}

type DeleteContact struct {
	DeleteContact DeleteContact_DeleteContact "json:\"deleteContact\" graphql:\"deleteContact\""
}

func (t *DeleteContact) GetDeleteContact() *DeleteContact_DeleteContact {
	if t == nil {
		t = &DeleteContact{}
	}
	return &t.DeleteContact
}

type GetAllContacts struct {
	Contacts GetAllContacts_Contacts "json:\"contacts\" graphql:\"contacts\""
}

func (t *GetAllContacts) GetContacts() *GetAllContacts_Contacts {
	if t == nil {
		t = &GetAllContacts{}
	}
	return &t.Contacts
}

type GetContactByID struct {
	Contact GetContactByID_Contact "json:\"contact\" graphql:\"contact\""
}

func (t *GetContactByID) GetContact() *GetContactByID_Contact {
	if t == nil {
		t = &GetContactByID{}
	}
	return &t.Contact
}

type GetContacts struct {
	Contacts GetContacts_Contacts "json:\"contacts\" graphql:\"contacts\""
}

func (t *GetContacts) GetContacts() *GetContacts_Contacts {
	if t == nil {
		t = &GetContacts{}
	}
	return &t.Contacts
}

type UpdateContact struct {
	UpdateContact UpdateContact_UpdateContact "json:\"updateContact\" graphql:\"updateContact\""
}

func (t *UpdateContact) GetUpdateContact() *UpdateContact_UpdateContact {
	if t == nil {
		t = &UpdateContact{}
	}
	return &t.UpdateContact
}

type GetAllContactHistories struct {
	ContactHistories GetAllContactHistories_ContactHistories "json:\"contactHistories\" graphql:\"contactHistories\""
}

func (t *GetAllContactHistories) GetContactHistories() *GetAllContactHistories_ContactHistories {
	if t == nil {
		t = &GetAllContactHistories{}
	}
	return &t.ContactHistories
}

type GetContactHistories struct {
	ContactHistories GetContactHistories_ContactHistories "json:\"contactHistories\" graphql:\"contactHistories\""
}

func (t *GetContactHistories) GetContactHistories() *GetContactHistories_ContactHistories {
	if t == nil {
		t = &GetContactHistories{}
	}
	return &t.ContactHistories
}

type CreateBulkCSVControl struct {
	CreateBulkCSVControl CreateBulkCSVControl_CreateBulkCSVControl "json:\"createBulkCSVControl\" graphql:\"createBulkCSVControl\""
}

func (t *CreateBulkCSVControl) GetCreateBulkCSVControl() *CreateBulkCSVControl_CreateBulkCSVControl {
	if t == nil {
		t = &CreateBulkCSVControl{}
	}
	return &t.CreateBulkCSVControl
}

type CreateBulkControl struct {
	CreateBulkControl CreateBulkControl_CreateBulkControl "json:\"createBulkControl\" graphql:\"createBulkControl\""
}

func (t *CreateBulkControl) GetCreateBulkControl() *CreateBulkControl_CreateBulkControl {
	if t == nil {
		t = &CreateBulkControl{}
	}
	return &t.CreateBulkControl
}

type CreateControl struct {
	CreateControl CreateControl_CreateControl "json:\"createControl\" graphql:\"createControl\""
}

func (t *CreateControl) GetCreateControl() *CreateControl_CreateControl {
	if t == nil {
		t = &CreateControl{}
	}
	return &t.CreateControl
}

type DeleteControl struct {
	DeleteControl DeleteControl_DeleteControl "json:\"deleteControl\" graphql:\"deleteControl\""
}

func (t *DeleteControl) GetDeleteControl() *DeleteControl_DeleteControl {
	if t == nil {
		t = &DeleteControl{}
	}
	return &t.DeleteControl
}

type GetAllControls struct {
	Controls GetAllControls_Controls "json:\"controls\" graphql:\"controls\""
}

func (t *GetAllControls) GetControls() *GetAllControls_Controls {
	if t == nil {
		t = &GetAllControls{}
	}
	return &t.Controls
}

type GetControlByID struct {
	Control GetControlByID_Control "json:\"control\" graphql:\"control\""
}

func (t *GetControlByID) GetControl() *GetControlByID_Control {
	if t == nil {
		t = &GetControlByID{}
	}
	return &t.Control
}

type GetControls struct {
	Controls GetControls_Controls "json:\"controls\" graphql:\"controls\""
}

func (t *GetControls) GetControls() *GetControls_Controls {
	if t == nil {
		t = &GetControls{}
	}
	return &t.Controls
}

type UpdateControl struct {
	UpdateControl UpdateControl_UpdateControl "json:\"updateControl\" graphql:\"updateControl\""
}

func (t *UpdateControl) GetUpdateControl() *UpdateControl_UpdateControl {
	if t == nil {
		t = &UpdateControl{}
	}
	return &t.UpdateControl
}

type CreateControlsByClone struct {
	CreateControlsByClone CreateControlsByClone_CreateControlsByClone "json:\"createControlsByClone\" graphql:\"createControlsByClone\""
}

func (t *CreateControlsByClone) GetCreateControlsByClone() *CreateControlsByClone_CreateControlsByClone {
	if t == nil {
		t = &CreateControlsByClone{}
	}
	return &t.CreateControlsByClone
}

type CreateControlsByCloneReturnID struct {
	CreateControlsByClone CreateControlsByCloneReturnID_CreateControlsByClone "json:\"createControlsByClone\" graphql:\"createControlsByClone\""
}

func (t *CreateControlsByCloneReturnID) GetCreateControlsByClone() *CreateControlsByCloneReturnID_CreateControlsByClone {
	if t == nil {
		t = &CreateControlsByCloneReturnID{}
	}
	return &t.CreateControlsByClone
}

type GetControlCategories struct {
	ControlCategories []string "json:\"controlCategories,omitempty\" graphql:\"controlCategories\""
}

func (t *GetControlCategories) GetControlCategories() []string {
	if t == nil {
		t = &GetControlCategories{}
	}
	return t.ControlCategories
}

type GetControlCategoriesWithFramework struct {
	ControlCategoriesByFramework []*GetControlCategoriesWithFramework_ControlCategoriesByFramework "json:\"controlCategoriesByFramework,omitempty\" graphql:\"controlCategoriesByFramework\""
}

func (t *GetControlCategoriesWithFramework) GetControlCategoriesByFramework() []*GetControlCategoriesWithFramework_ControlCategoriesByFramework {
	if t == nil {
		t = &GetControlCategoriesWithFramework{}
	}
	return t.ControlCategoriesByFramework
}

type GetControlsGroupByCategory struct {
	ControlsGroupByCategory GetControlsGroupByCategory_ControlsGroupByCategory "json:\"controlsGroupByCategory\" graphql:\"controlsGroupByCategory\""
}

func (t *GetControlsGroupByCategory) GetControlsGroupByCategory() *GetControlsGroupByCategory_ControlsGroupByCategory {
	if t == nil {
		t = &GetControlsGroupByCategory{}
	}
	return &t.ControlsGroupByCategory
}

type GetControlSubcategories struct {
	ControlSubcategories []string "json:\"controlSubcategories,omitempty\" graphql:\"controlSubcategories\""
}

func (t *GetControlSubcategories) GetControlSubcategories() []string {
	if t == nil {
		t = &GetControlSubcategories{}
	}
	return t.ControlSubcategories
}

type GetControlSubcategoriesWithFramework struct {
	ControlSubcategoriesByFramework []*GetControlSubcategoriesWithFramework_ControlSubcategoriesByFramework "json:\"controlSubcategoriesByFramework,omitempty\" graphql:\"controlSubcategoriesByFramework\""
}

func (t *GetControlSubcategoriesWithFramework) GetControlSubcategoriesByFramework() []*GetControlSubcategoriesWithFramework_ControlSubcategoriesByFramework {
	if t == nil {
		t = &GetControlSubcategoriesWithFramework{}
	}
	return t.ControlSubcategoriesByFramework
}

type GetAllControlHistories struct {
	ControlHistories GetAllControlHistories_ControlHistories "json:\"controlHistories\" graphql:\"controlHistories\""
}

func (t *GetAllControlHistories) GetControlHistories() *GetAllControlHistories_ControlHistories {
	if t == nil {
		t = &GetAllControlHistories{}
	}
	return &t.ControlHistories
}

type GetControlHistories struct {
	ControlHistories GetControlHistories_ControlHistories "json:\"controlHistories\" graphql:\"controlHistories\""
}

func (t *GetControlHistories) GetControlHistories() *GetControlHistories_ControlHistories {
	if t == nil {
		t = &GetControlHistories{}
	}
	return &t.ControlHistories
}

type CreateBulkCSVControlImplementation struct {
	CreateBulkCSVControlImplementation CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation "json:\"createBulkCSVControlImplementation\" graphql:\"createBulkCSVControlImplementation\""
}

func (t *CreateBulkCSVControlImplementation) GetCreateBulkCSVControlImplementation() *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation {
	if t == nil {
		t = &CreateBulkCSVControlImplementation{}
	}
	return &t.CreateBulkCSVControlImplementation
}

type CreateBulkControlImplementation struct {
	CreateBulkControlImplementation CreateBulkControlImplementation_CreateBulkControlImplementation "json:\"createBulkControlImplementation\" graphql:\"createBulkControlImplementation\""
}

func (t *CreateBulkControlImplementation) GetCreateBulkControlImplementation() *CreateBulkControlImplementation_CreateBulkControlImplementation {
	if t == nil {
		t = &CreateBulkControlImplementation{}
	}
	return &t.CreateBulkControlImplementation
}

type CreateControlImplementation struct {
	CreateControlImplementation CreateControlImplementation_CreateControlImplementation "json:\"createControlImplementation\" graphql:\"createControlImplementation\""
}

func (t *CreateControlImplementation) GetCreateControlImplementation() *CreateControlImplementation_CreateControlImplementation {
	if t == nil {
		t = &CreateControlImplementation{}
	}
	return &t.CreateControlImplementation
}

type DeleteControlImplementation struct {
	DeleteControlImplementation DeleteControlImplementation_DeleteControlImplementation "json:\"deleteControlImplementation\" graphql:\"deleteControlImplementation\""
}

func (t *DeleteControlImplementation) GetDeleteControlImplementation() *DeleteControlImplementation_DeleteControlImplementation {
	if t == nil {
		t = &DeleteControlImplementation{}
	}
	return &t.DeleteControlImplementation
}

type GetAllControlImplementations struct {
	ControlImplementations GetAllControlImplementations_ControlImplementations "json:\"controlImplementations\" graphql:\"controlImplementations\""
}

func (t *GetAllControlImplementations) GetControlImplementations() *GetAllControlImplementations_ControlImplementations {
	if t == nil {
		t = &GetAllControlImplementations{}
	}
	return &t.ControlImplementations
}

type GetControlImplementationByID struct {
	ControlImplementation GetControlImplementationByID_ControlImplementation "json:\"controlImplementation\" graphql:\"controlImplementation\""
}

func (t *GetControlImplementationByID) GetControlImplementation() *GetControlImplementationByID_ControlImplementation {
	if t == nil {
		t = &GetControlImplementationByID{}
	}
	return &t.ControlImplementation
}

type GetControlImplementations struct {
	ControlImplementations GetControlImplementations_ControlImplementations "json:\"controlImplementations\" graphql:\"controlImplementations\""
}

func (t *GetControlImplementations) GetControlImplementations() *GetControlImplementations_ControlImplementations {
	if t == nil {
		t = &GetControlImplementations{}
	}
	return &t.ControlImplementations
}

type UpdateControlImplementation struct {
	UpdateControlImplementation UpdateControlImplementation_UpdateControlImplementation "json:\"updateControlImplementation\" graphql:\"updateControlImplementation\""
}

func (t *UpdateControlImplementation) GetUpdateControlImplementation() *UpdateControlImplementation_UpdateControlImplementation {
	if t == nil {
		t = &UpdateControlImplementation{}
	}
	return &t.UpdateControlImplementation
}

type GetAllControlImplementationHistories struct {
	ControlImplementationHistories GetAllControlImplementationHistories_ControlImplementationHistories "json:\"controlImplementationHistories\" graphql:\"controlImplementationHistories\""
}

func (t *GetAllControlImplementationHistories) GetControlImplementationHistories() *GetAllControlImplementationHistories_ControlImplementationHistories {
	if t == nil {
		t = &GetAllControlImplementationHistories{}
	}
	return &t.ControlImplementationHistories
}

type GetControlImplementationHistories struct {
	ControlImplementationHistories GetControlImplementationHistories_ControlImplementationHistories "json:\"controlImplementationHistories\" graphql:\"controlImplementationHistories\""
}

func (t *GetControlImplementationHistories) GetControlImplementationHistories() *GetControlImplementationHistories_ControlImplementationHistories {
	if t == nil {
		t = &GetControlImplementationHistories{}
	}
	return &t.ControlImplementationHistories
}

type CreateBulkControlObjective struct {
	CreateBulkControlObjective CreateBulkControlObjective_CreateBulkControlObjective "json:\"createBulkControlObjective\" graphql:\"createBulkControlObjective\""
}

func (t *CreateBulkControlObjective) GetCreateBulkControlObjective() *CreateBulkControlObjective_CreateBulkControlObjective {
	if t == nil {
		t = &CreateBulkControlObjective{}
	}
	return &t.CreateBulkControlObjective
}

type CreateBulkCSVControlObjective struct {
	CreateBulkCSVControlObjective CreateBulkCSVControlObjective_CreateBulkCSVControlObjective "json:\"createBulkCSVControlObjective\" graphql:\"createBulkCSVControlObjective\""
}

func (t *CreateBulkCSVControlObjective) GetCreateBulkCSVControlObjective() *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective {
	if t == nil {
		t = &CreateBulkCSVControlObjective{}
	}
	return &t.CreateBulkCSVControlObjective
}

type CreateControlObjective struct {
	CreateControlObjective CreateControlObjective_CreateControlObjective "json:\"createControlObjective\" graphql:\"createControlObjective\""
}

func (t *CreateControlObjective) GetCreateControlObjective() *CreateControlObjective_CreateControlObjective {
	if t == nil {
		t = &CreateControlObjective{}
	}
	return &t.CreateControlObjective
}

type DeleteControlObjective struct {
	DeleteControlObjective DeleteControlObjective_DeleteControlObjective "json:\"deleteControlObjective\" graphql:\"deleteControlObjective\""
}

func (t *DeleteControlObjective) GetDeleteControlObjective() *DeleteControlObjective_DeleteControlObjective {
	if t == nil {
		t = &DeleteControlObjective{}
	}
	return &t.DeleteControlObjective
}

type GetAllControlObjectives struct {
	ControlObjectives GetAllControlObjectives_ControlObjectives "json:\"controlObjectives\" graphql:\"controlObjectives\""
}

func (t *GetAllControlObjectives) GetControlObjectives() *GetAllControlObjectives_ControlObjectives {
	if t == nil {
		t = &GetAllControlObjectives{}
	}
	return &t.ControlObjectives
}

type GetControlObjectiveByID struct {
	ControlObjective GetControlObjectiveByID_ControlObjective "json:\"controlObjective\" graphql:\"controlObjective\""
}

func (t *GetControlObjectiveByID) GetControlObjective() *GetControlObjectiveByID_ControlObjective {
	if t == nil {
		t = &GetControlObjectiveByID{}
	}
	return &t.ControlObjective
}

type GetControlObjectives struct {
	ControlObjectives GetControlObjectives_ControlObjectives "json:\"controlObjectives\" graphql:\"controlObjectives\""
}

func (t *GetControlObjectives) GetControlObjectives() *GetControlObjectives_ControlObjectives {
	if t == nil {
		t = &GetControlObjectives{}
	}
	return &t.ControlObjectives
}

type UpdateControlObjective struct {
	UpdateControlObjective UpdateControlObjective_UpdateControlObjective "json:\"updateControlObjective\" graphql:\"updateControlObjective\""
}

func (t *UpdateControlObjective) GetUpdateControlObjective() *UpdateControlObjective_UpdateControlObjective {
	if t == nil {
		t = &UpdateControlObjective{}
	}
	return &t.UpdateControlObjective
}

type GetAllControlObjectiveHistories struct {
	ControlObjectiveHistories GetAllControlObjectiveHistories_ControlObjectiveHistories "json:\"controlObjectiveHistories\" graphql:\"controlObjectiveHistories\""
}

func (t *GetAllControlObjectiveHistories) GetControlObjectiveHistories() *GetAllControlObjectiveHistories_ControlObjectiveHistories {
	if t == nil {
		t = &GetAllControlObjectiveHistories{}
	}
	return &t.ControlObjectiveHistories
}

type GetControlObjectiveHistories struct {
	ControlObjectiveHistories GetControlObjectiveHistories_ControlObjectiveHistories "json:\"controlObjectiveHistories\" graphql:\"controlObjectiveHistories\""
}

func (t *GetControlObjectiveHistories) GetControlObjectiveHistories() *GetControlObjectiveHistories_ControlObjectiveHistories {
	if t == nil {
		t = &GetControlObjectiveHistories{}
	}
	return &t.ControlObjectiveHistories
}

type CreateBulkCSVCustomDomain struct {
	CreateBulkCSVCustomDomain CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain "json:\"createBulkCSVCustomDomain\" graphql:\"createBulkCSVCustomDomain\""
}

func (t *CreateBulkCSVCustomDomain) GetCreateBulkCSVCustomDomain() *CreateBulkCSVCustomDomain_CreateBulkCSVCustomDomain {
	if t == nil {
		t = &CreateBulkCSVCustomDomain{}
	}
	return &t.CreateBulkCSVCustomDomain
}

type CreateBulkCustomDomain struct {
	CreateBulkCustomDomain CreateBulkCustomDomain_CreateBulkCustomDomain "json:\"createBulkCustomDomain\" graphql:\"createBulkCustomDomain\""
}

func (t *CreateBulkCustomDomain) GetCreateBulkCustomDomain() *CreateBulkCustomDomain_CreateBulkCustomDomain {
	if t == nil {
		t = &CreateBulkCustomDomain{}
	}
	return &t.CreateBulkCustomDomain
}

type CreateCustomDomain struct {
	CreateCustomDomain CreateCustomDomain_CreateCustomDomain "json:\"createCustomDomain\" graphql:\"createCustomDomain\""
}

func (t *CreateCustomDomain) GetCreateCustomDomain() *CreateCustomDomain_CreateCustomDomain {
	if t == nil {
		t = &CreateCustomDomain{}
	}
	return &t.CreateCustomDomain
}

type DeleteCustomDomain struct {
	DeleteCustomDomain DeleteCustomDomain_DeleteCustomDomain "json:\"deleteCustomDomain\" graphql:\"deleteCustomDomain\""
}

func (t *DeleteCustomDomain) GetDeleteCustomDomain() *DeleteCustomDomain_DeleteCustomDomain {
	if t == nil {
		t = &DeleteCustomDomain{}
	}
	return &t.DeleteCustomDomain
}

type GetAllCustomDomains struct {
	CustomDomains GetAllCustomDomains_CustomDomains "json:\"customDomains\" graphql:\"customDomains\""
}

func (t *GetAllCustomDomains) GetCustomDomains() *GetAllCustomDomains_CustomDomains {
	if t == nil {
		t = &GetAllCustomDomains{}
	}
	return &t.CustomDomains
}

type GetCustomDomainByID struct {
	CustomDomain GetCustomDomainByID_CustomDomain "json:\"customDomain\" graphql:\"customDomain\""
}

func (t *GetCustomDomainByID) GetCustomDomain() *GetCustomDomainByID_CustomDomain {
	if t == nil {
		t = &GetCustomDomainByID{}
	}
	return &t.CustomDomain
}

type GetCustomDomains struct {
	CustomDomains GetCustomDomains_CustomDomains "json:\"customDomains\" graphql:\"customDomains\""
}

func (t *GetCustomDomains) GetCustomDomains() *GetCustomDomains_CustomDomains {
	if t == nil {
		t = &GetCustomDomains{}
	}
	return &t.CustomDomains
}

type UpdateCustomDomain struct {
	UpdateCustomDomain UpdateCustomDomain_UpdateCustomDomain "json:\"updateCustomDomain\" graphql:\"updateCustomDomain\""
}

func (t *UpdateCustomDomain) GetUpdateCustomDomain() *UpdateCustomDomain_UpdateCustomDomain {
	if t == nil {
		t = &UpdateCustomDomain{}
	}
	return &t.UpdateCustomDomain
}

type GetAllCustomDomainHistories struct {
	CustomDomainHistories GetAllCustomDomainHistories_CustomDomainHistories "json:\"customDomainHistories\" graphql:\"customDomainHistories\""
}

func (t *GetAllCustomDomainHistories) GetCustomDomainHistories() *GetAllCustomDomainHistories_CustomDomainHistories {
	if t == nil {
		t = &GetAllCustomDomainHistories{}
	}
	return &t.CustomDomainHistories
}

type GetCustomDomainHistories struct {
	CustomDomainHistories GetCustomDomainHistories_CustomDomainHistories "json:\"customDomainHistories\" graphql:\"customDomainHistories\""
}

func (t *GetCustomDomainHistories) GetCustomDomainHistories() *GetCustomDomainHistories_CustomDomainHistories {
	if t == nil {
		t = &GetCustomDomainHistories{}
	}
	return &t.CustomDomainHistories
}

type CreateBulkCSVDNSVerification struct {
	CreateBulkCSVDNSVerification CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification "json:\"createBulkCSVDNSVerification\" graphql:\"createBulkCSVDNSVerification\""
}

func (t *CreateBulkCSVDNSVerification) GetCreateBulkCSVDNSVerification() *CreateBulkCSVDNSVerification_CreateBulkCSVDNSVerification {
	if t == nil {
		t = &CreateBulkCSVDNSVerification{}
	}
	return &t.CreateBulkCSVDNSVerification
}

type CreateBulkDNSVerification struct {
	CreateBulkDNSVerification CreateBulkDNSVerification_CreateBulkDNSVerification "json:\"createBulkDNSVerification\" graphql:\"createBulkDNSVerification\""
}

func (t *CreateBulkDNSVerification) GetCreateBulkDNSVerification() *CreateBulkDNSVerification_CreateBulkDNSVerification {
	if t == nil {
		t = &CreateBulkDNSVerification{}
	}
	return &t.CreateBulkDNSVerification
}

type CreateDNSVerification struct {
	CreateDNSVerification CreateDNSVerification_CreateDNSVerification "json:\"createDNSVerification\" graphql:\"createDNSVerification\""
}

func (t *CreateDNSVerification) GetCreateDNSVerification() *CreateDNSVerification_CreateDNSVerification {
	if t == nil {
		t = &CreateDNSVerification{}
	}
	return &t.CreateDNSVerification
}

type DeleteDNSVerification struct {
	DeleteDNSVerification DeleteDNSVerification_DeleteDNSVerification "json:\"deleteDNSVerification\" graphql:\"deleteDNSVerification\""
}

func (t *DeleteDNSVerification) GetDeleteDNSVerification() *DeleteDNSVerification_DeleteDNSVerification {
	if t == nil {
		t = &DeleteDNSVerification{}
	}
	return &t.DeleteDNSVerification
}

type GetAllDNSVerifications struct {
	DNSVerifications GetAllDNSVerifications_DNSVerifications "json:\"dnsVerifications\" graphql:\"dnsVerifications\""
}

func (t *GetAllDNSVerifications) GetDNSVerifications() *GetAllDNSVerifications_DNSVerifications {
	if t == nil {
		t = &GetAllDNSVerifications{}
	}
	return &t.DNSVerifications
}

type GetDNSVerificationByID struct {
	DNSVerification GetDNSVerificationByID_DNSVerification "json:\"dnsVerification\" graphql:\"dnsVerification\""
}

func (t *GetDNSVerificationByID) GetDNSVerification() *GetDNSVerificationByID_DNSVerification {
	if t == nil {
		t = &GetDNSVerificationByID{}
	}
	return &t.DNSVerification
}

type GetDNSVerifications struct {
	DNSVerifications GetDNSVerifications_DNSVerifications "json:\"dnsVerifications\" graphql:\"dnsVerifications\""
}

func (t *GetDNSVerifications) GetDNSVerifications() *GetDNSVerifications_DNSVerifications {
	if t == nil {
		t = &GetDNSVerifications{}
	}
	return &t.DNSVerifications
}

type UpdateDNSVerification struct {
	UpdateDNSVerification UpdateDNSVerification_UpdateDNSVerification "json:\"updateDNSVerification\" graphql:\"updateDNSVerification\""
}

func (t *UpdateDNSVerification) GetUpdateDNSVerification() *UpdateDNSVerification_UpdateDNSVerification {
	if t == nil {
		t = &UpdateDNSVerification{}
	}
	return &t.UpdateDNSVerification
}

type GetAllDNSVerificationHistories struct {
	DNSVerificationHistories GetAllDNSVerificationHistories_DNSVerificationHistories "json:\"dnsVerificationHistories\" graphql:\"dnsVerificationHistories\""
}

func (t *GetAllDNSVerificationHistories) GetDNSVerificationHistories() *GetAllDNSVerificationHistories_DNSVerificationHistories {
	if t == nil {
		t = &GetAllDNSVerificationHistories{}
	}
	return &t.DNSVerificationHistories
}

type GetDNSVerificationHistories struct {
	DNSVerificationHistories GetDNSVerificationHistories_DNSVerificationHistories "json:\"dnsVerificationHistories\" graphql:\"dnsVerificationHistories\""
}

func (t *GetDNSVerificationHistories) GetDNSVerificationHistories() *GetDNSVerificationHistories_DNSVerificationHistories {
	if t == nil {
		t = &GetDNSVerificationHistories{}
	}
	return &t.DNSVerificationHistories
}

type CreateBulkCSVDocumentData struct {
	CreateBulkCSVDocumentData CreateBulkCSVDocumentData_CreateBulkCSVDocumentData "json:\"createBulkCSVDocumentData\" graphql:\"createBulkCSVDocumentData\""
}

func (t *CreateBulkCSVDocumentData) GetCreateBulkCSVDocumentData() *CreateBulkCSVDocumentData_CreateBulkCSVDocumentData {
	if t == nil {
		t = &CreateBulkCSVDocumentData{}
	}
	return &t.CreateBulkCSVDocumentData
}

type CreateBulkDocumentData struct {
	CreateBulkDocumentData CreateBulkDocumentData_CreateBulkDocumentData "json:\"createBulkDocumentData\" graphql:\"createBulkDocumentData\""
}

func (t *CreateBulkDocumentData) GetCreateBulkDocumentData() *CreateBulkDocumentData_CreateBulkDocumentData {
	if t == nil {
		t = &CreateBulkDocumentData{}
	}
	return &t.CreateBulkDocumentData
}

type CreateDocumentData struct {
	CreateDocumentData CreateDocumentData_CreateDocumentData "json:\"createDocumentData\" graphql:\"createDocumentData\""
}

func (t *CreateDocumentData) GetCreateDocumentData() *CreateDocumentData_CreateDocumentData {
	if t == nil {
		t = &CreateDocumentData{}
	}
	return &t.CreateDocumentData
}

type DeleteDocumentData struct {
	DeleteDocumentData DeleteDocumentData_DeleteDocumentData "json:\"deleteDocumentData\" graphql:\"deleteDocumentData\""
}

func (t *DeleteDocumentData) GetDeleteDocumentData() *DeleteDocumentData_DeleteDocumentData {
	if t == nil {
		t = &DeleteDocumentData{}
	}
	return &t.DeleteDocumentData
}

type GetDocumentDataByID struct {
	DocumentData GetDocumentDataByID_DocumentData "json:\"documentData\" graphql:\"documentData\""
}

func (t *GetDocumentDataByID) GetDocumentData() *GetDocumentDataByID_DocumentData {
	if t == nil {
		t = &GetDocumentDataByID{}
	}
	return &t.DocumentData
}

type UpdateDocumentData struct {
	UpdateDocumentData UpdateDocumentData_UpdateDocumentData "json:\"updateDocumentData\" graphql:\"updateDocumentData\""
}

func (t *UpdateDocumentData) GetUpdateDocumentData() *UpdateDocumentData_UpdateDocumentData {
	if t == nil {
		t = &UpdateDocumentData{}
	}
	return &t.UpdateDocumentData
}

type GetAllDocumentDataHistories struct {
	DocumentDataHistories GetAllDocumentDataHistories_DocumentDataHistories "json:\"documentDataHistories\" graphql:\"documentDataHistories\""
}

func (t *GetAllDocumentDataHistories) GetDocumentDataHistories() *GetAllDocumentDataHistories_DocumentDataHistories {
	if t == nil {
		t = &GetAllDocumentDataHistories{}
	}
	return &t.DocumentDataHistories
}

type GetDocumentDataHistories struct {
	DocumentDataHistories GetDocumentDataHistories_DocumentDataHistories "json:\"documentDataHistories\" graphql:\"documentDataHistories\""
}

func (t *GetDocumentDataHistories) GetDocumentDataHistories() *GetDocumentDataHistories_DocumentDataHistories {
	if t == nil {
		t = &GetDocumentDataHistories{}
	}
	return &t.DocumentDataHistories
}

type CreateBulkCSVEntity struct {
	CreateBulkCSVEntity CreateBulkCSVEntity_CreateBulkCSVEntity "json:\"createBulkCSVEntity\" graphql:\"createBulkCSVEntity\""
}

func (t *CreateBulkCSVEntity) GetCreateBulkCSVEntity() *CreateBulkCSVEntity_CreateBulkCSVEntity {
	if t == nil {
		t = &CreateBulkCSVEntity{}
	}
	return &t.CreateBulkCSVEntity
}

type CreateBulkEntity struct {
	CreateBulkEntity CreateBulkEntity_CreateBulkEntity "json:\"createBulkEntity\" graphql:\"createBulkEntity\""
}

func (t *CreateBulkEntity) GetCreateBulkEntity() *CreateBulkEntity_CreateBulkEntity {
	if t == nil {
		t = &CreateBulkEntity{}
	}
	return &t.CreateBulkEntity
}

type CreateEntity struct {
	CreateEntity CreateEntity_CreateEntity "json:\"createEntity\" graphql:\"createEntity\""
}

func (t *CreateEntity) GetCreateEntity() *CreateEntity_CreateEntity {
	if t == nil {
		t = &CreateEntity{}
	}
	return &t.CreateEntity
}

type DeleteEntity struct {
	DeleteEntity DeleteEntity_DeleteEntity "json:\"deleteEntity\" graphql:\"deleteEntity\""
}

func (t *DeleteEntity) GetDeleteEntity() *DeleteEntity_DeleteEntity {
	if t == nil {
		t = &DeleteEntity{}
	}
	return &t.DeleteEntity
}

type GetAllEntities struct {
	Entities GetAllEntities_Entities "json:\"entities\" graphql:\"entities\""
}

func (t *GetAllEntities) GetEntities() *GetAllEntities_Entities {
	if t == nil {
		t = &GetAllEntities{}
	}
	return &t.Entities
}

type GetEntities struct {
	Entities GetEntities_Entities "json:\"entities\" graphql:\"entities\""
}

func (t *GetEntities) GetEntities() *GetEntities_Entities {
	if t == nil {
		t = &GetEntities{}
	}
	return &t.Entities
}

type GetEntityByID struct {
	Entity GetEntityByID_Entity "json:\"entity\" graphql:\"entity\""
}

func (t *GetEntityByID) GetEntity() *GetEntityByID_Entity {
	if t == nil {
		t = &GetEntityByID{}
	}
	return &t.Entity
}

type UpdateEntity struct {
	UpdateEntity UpdateEntity_UpdateEntity "json:\"updateEntity\" graphql:\"updateEntity\""
}

func (t *UpdateEntity) GetUpdateEntity() *UpdateEntity_UpdateEntity {
	if t == nil {
		t = &UpdateEntity{}
	}
	return &t.UpdateEntity
}

type GetAllEntityHistories struct {
	EntityHistories GetAllEntityHistories_EntityHistories "json:\"entityHistories\" graphql:\"entityHistories\""
}

func (t *GetAllEntityHistories) GetEntityHistories() *GetAllEntityHistories_EntityHistories {
	if t == nil {
		t = &GetAllEntityHistories{}
	}
	return &t.EntityHistories
}

type GetEntityHistories struct {
	EntityHistories GetEntityHistories_EntityHistories "json:\"entityHistories\" graphql:\"entityHistories\""
}

func (t *GetEntityHistories) GetEntityHistories() *GetEntityHistories_EntityHistories {
	if t == nil {
		t = &GetEntityHistories{}
	}
	return &t.EntityHistories
}

type CreateBulkCSVEntityType struct {
	CreateBulkCSVEntityType CreateBulkCSVEntityType_CreateBulkCSVEntityType "json:\"createBulkCSVEntityType\" graphql:\"createBulkCSVEntityType\""
}

func (t *CreateBulkCSVEntityType) GetCreateBulkCSVEntityType() *CreateBulkCSVEntityType_CreateBulkCSVEntityType {
	if t == nil {
		t = &CreateBulkCSVEntityType{}
	}
	return &t.CreateBulkCSVEntityType
}

type CreateBulkEntityType struct {
	CreateBulkEntityType CreateBulkEntityType_CreateBulkEntityType "json:\"createBulkEntityType\" graphql:\"createBulkEntityType\""
}

func (t *CreateBulkEntityType) GetCreateBulkEntityType() *CreateBulkEntityType_CreateBulkEntityType {
	if t == nil {
		t = &CreateBulkEntityType{}
	}
	return &t.CreateBulkEntityType
}

type CreateEntityType struct {
	CreateEntityType CreateEntityType_CreateEntityType "json:\"createEntityType\" graphql:\"createEntityType\""
}

func (t *CreateEntityType) GetCreateEntityType() *CreateEntityType_CreateEntityType {
	if t == nil {
		t = &CreateEntityType{}
	}
	return &t.CreateEntityType
}

type DeleteEntityType struct {
	DeleteEntityType DeleteEntityType_DeleteEntityType "json:\"deleteEntityType\" graphql:\"deleteEntityType\""
}

func (t *DeleteEntityType) GetDeleteEntityType() *DeleteEntityType_DeleteEntityType {
	if t == nil {
		t = &DeleteEntityType{}
	}
	return &t.DeleteEntityType
}

type GetAllEntityTypes struct {
	EntityTypes GetAllEntityTypes_EntityTypes "json:\"entityTypes\" graphql:\"entityTypes\""
}

func (t *GetAllEntityTypes) GetEntityTypes() *GetAllEntityTypes_EntityTypes {
	if t == nil {
		t = &GetAllEntityTypes{}
	}
	return &t.EntityTypes
}

type GetEntityTypeByID struct {
	EntityType GetEntityTypeByID_EntityType "json:\"entityType\" graphql:\"entityType\""
}

func (t *GetEntityTypeByID) GetEntityType() *GetEntityTypeByID_EntityType {
	if t == nil {
		t = &GetEntityTypeByID{}
	}
	return &t.EntityType
}

type GetEntityTypes struct {
	EntityTypes GetEntityTypes_EntityTypes "json:\"entityTypes\" graphql:\"entityTypes\""
}

func (t *GetEntityTypes) GetEntityTypes() *GetEntityTypes_EntityTypes {
	if t == nil {
		t = &GetEntityTypes{}
	}
	return &t.EntityTypes
}

type UpdateEntityType struct {
	UpdateEntityType UpdateEntityType_UpdateEntityType "json:\"updateEntityType\" graphql:\"updateEntityType\""
}

func (t *UpdateEntityType) GetUpdateEntityType() *UpdateEntityType_UpdateEntityType {
	if t == nil {
		t = &UpdateEntityType{}
	}
	return &t.UpdateEntityType
}

type GetAllEntityTypeHistories struct {
	EntityTypeHistories GetAllEntityTypeHistories_EntityTypeHistories "json:\"entityTypeHistories\" graphql:\"entityTypeHistories\""
}

func (t *GetAllEntityTypeHistories) GetEntityTypeHistories() *GetAllEntityTypeHistories_EntityTypeHistories {
	if t == nil {
		t = &GetAllEntityTypeHistories{}
	}
	return &t.EntityTypeHistories
}

type GetEntityTypeHistories struct {
	EntityTypeHistories GetEntityTypeHistories_EntityTypeHistories "json:\"entityTypeHistories\" graphql:\"entityTypeHistories\""
}

func (t *GetEntityTypeHistories) GetEntityTypeHistories() *GetEntityTypeHistories_EntityTypeHistories {
	if t == nil {
		t = &GetEntityTypeHistories{}
	}
	return &t.EntityTypeHistories
}

type CreateBulkCSVEvent struct {
	CreateBulkCSVEvent CreateBulkCSVEvent_CreateBulkCSVEvent "json:\"createBulkCSVEvent\" graphql:\"createBulkCSVEvent\""
}

func (t *CreateBulkCSVEvent) GetCreateBulkCSVEvent() *CreateBulkCSVEvent_CreateBulkCSVEvent {
	if t == nil {
		t = &CreateBulkCSVEvent{}
	}
	return &t.CreateBulkCSVEvent
}

type CreateBulkEvent struct {
	CreateBulkEvent CreateBulkEvent_CreateBulkEvent "json:\"createBulkEvent\" graphql:\"createBulkEvent\""
}

func (t *CreateBulkEvent) GetCreateBulkEvent() *CreateBulkEvent_CreateBulkEvent {
	if t == nil {
		t = &CreateBulkEvent{}
	}
	return &t.CreateBulkEvent
}

type CreateEvent struct {
	CreateEvent CreateEvent_CreateEvent "json:\"createEvent\" graphql:\"createEvent\""
}

func (t *CreateEvent) GetCreateEvent() *CreateEvent_CreateEvent {
	if t == nil {
		t = &CreateEvent{}
	}
	return &t.CreateEvent
}

type DeleteEvent struct {
	DeleteEvent DeleteEvent_DeleteEvent "json:\"deleteEvent\" graphql:\"deleteEvent\""
}

func (t *DeleteEvent) GetDeleteEvent() *DeleteEvent_DeleteEvent {
	if t == nil {
		t = &DeleteEvent{}
	}
	return &t.DeleteEvent
}

type GetAllEvents struct {
	Events GetAllEvents_Events "json:\"events\" graphql:\"events\""
}

func (t *GetAllEvents) GetEvents() *GetAllEvents_Events {
	if t == nil {
		t = &GetAllEvents{}
	}
	return &t.Events
}

type GetEventByID struct {
	Event GetEventByID_Event "json:\"event\" graphql:\"event\""
}

func (t *GetEventByID) GetEvent() *GetEventByID_Event {
	if t == nil {
		t = &GetEventByID{}
	}
	return &t.Event
}

type GetEvents struct {
	Events GetEvents_Events "json:\"events\" graphql:\"events\""
}

func (t *GetEvents) GetEvents() *GetEvents_Events {
	if t == nil {
		t = &GetEvents{}
	}
	return &t.Events
}

type UpdateEvent struct {
	UpdateEvent UpdateEvent_UpdateEvent "json:\"updateEvent\" graphql:\"updateEvent\""
}

func (t *UpdateEvent) GetUpdateEvent() *UpdateEvent_UpdateEvent {
	if t == nil {
		t = &UpdateEvent{}
	}
	return &t.UpdateEvent
}

type CreateEvidence struct {
	CreateEvidence CreateEvidence_CreateEvidence "json:\"createEvidence\" graphql:\"createEvidence\""
}

func (t *CreateEvidence) GetCreateEvidence() *CreateEvidence_CreateEvidence {
	if t == nil {
		t = &CreateEvidence{}
	}
	return &t.CreateEvidence
}

type DeleteEvidence struct {
	DeleteEvidence DeleteEvidence_DeleteEvidence "json:\"deleteEvidence\" graphql:\"deleteEvidence\""
}

func (t *DeleteEvidence) GetDeleteEvidence() *DeleteEvidence_DeleteEvidence {
	if t == nil {
		t = &DeleteEvidence{}
	}
	return &t.DeleteEvidence
}

type GetAllEvidences struct {
	Evidences GetAllEvidences_Evidences "json:\"evidences\" graphql:\"evidences\""
}

func (t *GetAllEvidences) GetEvidences() *GetAllEvidences_Evidences {
	if t == nil {
		t = &GetAllEvidences{}
	}
	return &t.Evidences
}

type GetEvidenceByID struct {
	Evidence GetEvidenceByID_Evidence "json:\"evidence\" graphql:\"evidence\""
}

func (t *GetEvidenceByID) GetEvidence() *GetEvidenceByID_Evidence {
	if t == nil {
		t = &GetEvidenceByID{}
	}
	return &t.Evidence
}

type GetEvidences struct {
	Evidences GetEvidences_Evidences "json:\"evidences\" graphql:\"evidences\""
}

func (t *GetEvidences) GetEvidences() *GetEvidences_Evidences {
	if t == nil {
		t = &GetEvidences{}
	}
	return &t.Evidences
}

type UpdateEvidence struct {
	UpdateEvidence UpdateEvidence_UpdateEvidence "json:\"updateEvidence\" graphql:\"updateEvidence\""
}

func (t *UpdateEvidence) GetUpdateEvidence() *UpdateEvidence_UpdateEvidence {
	if t == nil {
		t = &UpdateEvidence{}
	}
	return &t.UpdateEvidence
}

type GetAllEvidenceHistories struct {
	EvidenceHistories GetAllEvidenceHistories_EvidenceHistories "json:\"evidenceHistories\" graphql:\"evidenceHistories\""
}

func (t *GetAllEvidenceHistories) GetEvidenceHistories() *GetAllEvidenceHistories_EvidenceHistories {
	if t == nil {
		t = &GetAllEvidenceHistories{}
	}
	return &t.EvidenceHistories
}

type GetEvidenceHistories struct {
	EvidenceHistories GetEvidenceHistories_EvidenceHistories "json:\"evidenceHistories\" graphql:\"evidenceHistories\""
}

func (t *GetEvidenceHistories) GetEvidenceHistories() *GetEvidenceHistories_EvidenceHistories {
	if t == nil {
		t = &GetEvidenceHistories{}
	}
	return &t.EvidenceHistories
}

type CreateExport struct {
	CreateExport CreateExport_CreateExport "json:\"createExport\" graphql:\"createExport\""
}

func (t *CreateExport) GetCreateExport() *CreateExport_CreateExport {
	if t == nil {
		t = &CreateExport{}
	}
	return &t.CreateExport
}

type GetAllExports struct {
	Exports GetAllExports_Exports "json:\"exports\" graphql:\"exports\""
}

func (t *GetAllExports) GetExports() *GetAllExports_Exports {
	if t == nil {
		t = &GetAllExports{}
	}
	return &t.Exports
}

type GetExportByID struct {
	Export GetExportByID_Export "json:\"export\" graphql:\"export\""
}

func (t *GetExportByID) GetExport() *GetExportByID_Export {
	if t == nil {
		t = &GetExportByID{}
	}
	return &t.Export
}

type GetExports struct {
	Exports GetExports_Exports "json:\"exports\" graphql:\"exports\""
}

func (t *GetExports) GetExports() *GetExports_Exports {
	if t == nil {
		t = &GetExports{}
	}
	return &t.Exports
}

type UpdateExport struct {
	UpdateExport UpdateExport_UpdateExport "json:\"updateExport\" graphql:\"updateExport\""
}

func (t *UpdateExport) GetUpdateExport() *UpdateExport_UpdateExport {
	if t == nil {
		t = &UpdateExport{}
	}
	return &t.UpdateExport
}

type DeleteExport struct {
	DeleteExport DeleteExport_DeleteExport "json:\"deleteExport\" graphql:\"deleteExport\""
}

func (t *DeleteExport) GetDeleteExport() *DeleteExport_DeleteExport {
	if t == nil {
		t = &DeleteExport{}
	}
	return &t.DeleteExport
}

type DeleteBulkExport struct {
	DeleteBulkExport DeleteBulkExport_DeleteBulkExport "json:\"deleteBulkExport\" graphql:\"deleteBulkExport\""
}

func (t *DeleteBulkExport) GetDeleteBulkExport() *DeleteBulkExport_DeleteBulkExport {
	if t == nil {
		t = &DeleteBulkExport{}
	}
	return &t.DeleteBulkExport
}

type DeleteFile struct {
	DeleteFile DeleteFile_DeleteFile "json:\"deleteFile\" graphql:\"deleteFile\""
}

func (t *DeleteFile) GetDeleteFile() *DeleteFile_DeleteFile {
	if t == nil {
		t = &DeleteFile{}
	}
	return &t.DeleteFile
}

type GetAllFiles struct {
	Files GetAllFiles_Files "json:\"files\" graphql:\"files\""
}

func (t *GetAllFiles) GetFiles() *GetAllFiles_Files {
	if t == nil {
		t = &GetAllFiles{}
	}
	return &t.Files
}

type GetFileByID struct {
	File GetFileByID_File "json:\"file\" graphql:\"file\""
}

func (t *GetFileByID) GetFile() *GetFileByID_File {
	if t == nil {
		t = &GetFileByID{}
	}
	return &t.File
}

type GetFiles struct {
	Files GetFiles_Files "json:\"files\" graphql:\"files\""
}

func (t *GetFiles) GetFiles() *GetFiles_Files {
	if t == nil {
		t = &GetFiles{}
	}
	return &t.Files
}

type GetAllFileHistories struct {
	FileHistories GetAllFileHistories_FileHistories "json:\"fileHistories\" graphql:\"fileHistories\""
}

func (t *GetAllFileHistories) GetFileHistories() *GetAllFileHistories_FileHistories {
	if t == nil {
		t = &GetAllFileHistories{}
	}
	return &t.FileHistories
}

type GetFileHistories struct {
	FileHistories GetFileHistories_FileHistories "json:\"fileHistories\" graphql:\"fileHistories\""
}

func (t *GetFileHistories) GetFileHistories() *GetFileHistories_FileHistories {
	if t == nil {
		t = &GetFileHistories{}
	}
	return &t.FileHistories
}

type CreateBulkCSVGroup struct {
	CreateBulkCSVGroup CreateBulkCSVGroup_CreateBulkCSVGroup "json:\"createBulkCSVGroup\" graphql:\"createBulkCSVGroup\""
}

func (t *CreateBulkCSVGroup) GetCreateBulkCSVGroup() *CreateBulkCSVGroup_CreateBulkCSVGroup {
	if t == nil {
		t = &CreateBulkCSVGroup{}
	}
	return &t.CreateBulkCSVGroup
}

type CreateBulkGroup struct {
	CreateBulkGroup CreateBulkGroup_CreateBulkGroup "json:\"createBulkGroup\" graphql:\"createBulkGroup\""
}

func (t *CreateBulkGroup) GetCreateBulkGroup() *CreateBulkGroup_CreateBulkGroup {
	if t == nil {
		t = &CreateBulkGroup{}
	}
	return &t.CreateBulkGroup
}

type CreateGroup struct {
	CreateGroup CreateGroup_CreateGroup "json:\"createGroup\" graphql:\"createGroup\""
}

func (t *CreateGroup) GetCreateGroup() *CreateGroup_CreateGroup {
	if t == nil {
		t = &CreateGroup{}
	}
	return &t.CreateGroup
}

type DeleteGroup struct {
	DeleteGroup DeleteGroup_DeleteGroup "json:\"deleteGroup\" graphql:\"deleteGroup\""
}

func (t *DeleteGroup) GetDeleteGroup() *DeleteGroup_DeleteGroup {
	if t == nil {
		t = &DeleteGroup{}
	}
	return &t.DeleteGroup
}

type GetAllGroups struct {
	Groups GetAllGroups_Groups "json:\"groups\" graphql:\"groups\""
}

func (t *GetAllGroups) GetGroups() *GetAllGroups_Groups {
	if t == nil {
		t = &GetAllGroups{}
	}
	return &t.Groups
}

type GetGroupByID struct {
	Group GetGroupByID_Group "json:\"group\" graphql:\"group\""
}

func (t *GetGroupByID) GetGroup() *GetGroupByID_Group {
	if t == nil {
		t = &GetGroupByID{}
	}
	return &t.Group
}

type GetGroups struct {
	Groups GetGroups_Groups "json:\"groups\" graphql:\"groups\""
}

func (t *GetGroups) GetGroups() *GetGroups_Groups {
	if t == nil {
		t = &GetGroups{}
	}
	return &t.Groups
}

type UpdateGroup struct {
	UpdateGroup UpdateGroup_UpdateGroup "json:\"updateGroup\" graphql:\"updateGroup\""
}

func (t *UpdateGroup) GetUpdateGroup() *UpdateGroup_UpdateGroup {
	if t == nil {
		t = &UpdateGroup{}
	}
	return &t.UpdateGroup
}

type GetAllGroupHistories struct {
	GroupHistories GetAllGroupHistories_GroupHistories "json:\"groupHistories\" graphql:\"groupHistories\""
}

func (t *GetAllGroupHistories) GetGroupHistories() *GetAllGroupHistories_GroupHistories {
	if t == nil {
		t = &GetAllGroupHistories{}
	}
	return &t.GroupHistories
}

type GetGroupHistories struct {
	GroupHistories GetGroupHistories_GroupHistories "json:\"groupHistories\" graphql:\"groupHistories\""
}

func (t *GetGroupHistories) GetGroupHistories() *GetGroupHistories_GroupHistories {
	if t == nil {
		t = &GetGroupHistories{}
	}
	return &t.GroupHistories
}

type CreateBulkCSVGroupMembership struct {
	CreateBulkCSVGroupMembership CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership "json:\"createBulkCSVGroupMembership\" graphql:\"createBulkCSVGroupMembership\""
}

func (t *CreateBulkCSVGroupMembership) GetCreateBulkCSVGroupMembership() *CreateBulkCSVGroupMembership_CreateBulkCSVGroupMembership {
	if t == nil {
		t = &CreateBulkCSVGroupMembership{}
	}
	return &t.CreateBulkCSVGroupMembership
}

type CreateBulkGroupMembership struct {
	CreateBulkGroupMembership CreateBulkGroupMembership_CreateBulkGroupMembership "json:\"createBulkGroupMembership\" graphql:\"createBulkGroupMembership\""
}

func (t *CreateBulkGroupMembership) GetCreateBulkGroupMembership() *CreateBulkGroupMembership_CreateBulkGroupMembership {
	if t == nil {
		t = &CreateBulkGroupMembership{}
	}
	return &t.CreateBulkGroupMembership
}

type CreateGroupMembership struct {
	CreateGroupMembership CreateGroupMembership_CreateGroupMembership "json:\"createGroupMembership\" graphql:\"createGroupMembership\""
}

func (t *CreateGroupMembership) GetCreateGroupMembership() *CreateGroupMembership_CreateGroupMembership {
	if t == nil {
		t = &CreateGroupMembership{}
	}
	return &t.CreateGroupMembership
}

type DeleteGroupMembership struct {
	DeleteGroupMembership DeleteGroupMembership_DeleteGroupMembership "json:\"deleteGroupMembership\" graphql:\"deleteGroupMembership\""
}

func (t *DeleteGroupMembership) GetDeleteGroupMembership() *DeleteGroupMembership_DeleteGroupMembership {
	if t == nil {
		t = &DeleteGroupMembership{}
	}
	return &t.DeleteGroupMembership
}

type GetAllGroupMemberships struct {
	GroupMemberships GetAllGroupMemberships_GroupMemberships "json:\"groupMemberships\" graphql:\"groupMemberships\""
}

func (t *GetAllGroupMemberships) GetGroupMemberships() *GetAllGroupMemberships_GroupMemberships {
	if t == nil {
		t = &GetAllGroupMemberships{}
	}
	return &t.GroupMemberships
}

type GetGroupMembershipByID struct {
	GroupMembership GetGroupMembershipByID_GroupMembership "json:\"groupMembership\" graphql:\"groupMembership\""
}

func (t *GetGroupMembershipByID) GetGroupMembership() *GetGroupMembershipByID_GroupMembership {
	if t == nil {
		t = &GetGroupMembershipByID{}
	}
	return &t.GroupMembership
}

type GetGroupMemberships struct {
	GroupMemberships GetGroupMemberships_GroupMemberships "json:\"groupMemberships\" graphql:\"groupMemberships\""
}

func (t *GetGroupMemberships) GetGroupMemberships() *GetGroupMemberships_GroupMemberships {
	if t == nil {
		t = &GetGroupMemberships{}
	}
	return &t.GroupMemberships
}

type UpdateGroupMembership struct {
	UpdateGroupMembership UpdateGroupMembership_UpdateGroupMembership "json:\"updateGroupMembership\" graphql:\"updateGroupMembership\""
}

func (t *UpdateGroupMembership) GetUpdateGroupMembership() *UpdateGroupMembership_UpdateGroupMembership {
	if t == nil {
		t = &UpdateGroupMembership{}
	}
	return &t.UpdateGroupMembership
}

type GetAllGroupMembershipHistories struct {
	GroupMembershipHistories GetAllGroupMembershipHistories_GroupMembershipHistories "json:\"groupMembershipHistories\" graphql:\"groupMembershipHistories\""
}

func (t *GetAllGroupMembershipHistories) GetGroupMembershipHistories() *GetAllGroupMembershipHistories_GroupMembershipHistories {
	if t == nil {
		t = &GetAllGroupMembershipHistories{}
	}
	return &t.GroupMembershipHistories
}

type GetGroupMembershipHistories struct {
	GroupMembershipHistories GetGroupMembershipHistories_GroupMembershipHistories "json:\"groupMembershipHistories\" graphql:\"groupMembershipHistories\""
}

func (t *GetGroupMembershipHistories) GetGroupMembershipHistories() *GetGroupMembershipHistories_GroupMembershipHistories {
	if t == nil {
		t = &GetGroupMembershipHistories{}
	}
	return &t.GroupMembershipHistories
}

type CreateBulkCSVGroupSetting struct {
	CreateBulkCSVGroupSetting CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting "json:\"createBulkCSVGroupSetting\" graphql:\"createBulkCSVGroupSetting\""
}

func (t *CreateBulkCSVGroupSetting) GetCreateBulkCSVGroupSetting() *CreateBulkCSVGroupSetting_CreateBulkCSVGroupSetting {
	if t == nil {
		t = &CreateBulkCSVGroupSetting{}
	}
	return &t.CreateBulkCSVGroupSetting
}

type CreateBulkGroupSetting struct {
	CreateBulkGroupSetting CreateBulkGroupSetting_CreateBulkGroupSetting "json:\"createBulkGroupSetting\" graphql:\"createBulkGroupSetting\""
}

func (t *CreateBulkGroupSetting) GetCreateBulkGroupSetting() *CreateBulkGroupSetting_CreateBulkGroupSetting {
	if t == nil {
		t = &CreateBulkGroupSetting{}
	}
	return &t.CreateBulkGroupSetting
}

type CreateGroupSetting struct {
	CreateGroupSetting CreateGroupSetting_CreateGroupSetting "json:\"createGroupSetting\" graphql:\"createGroupSetting\""
}

func (t *CreateGroupSetting) GetCreateGroupSetting() *CreateGroupSetting_CreateGroupSetting {
	if t == nil {
		t = &CreateGroupSetting{}
	}
	return &t.CreateGroupSetting
}

type DeleteGroupSetting struct {
	DeleteGroupSetting DeleteGroupSetting_DeleteGroupSetting "json:\"deleteGroupSetting\" graphql:\"deleteGroupSetting\""
}

func (t *DeleteGroupSetting) GetDeleteGroupSetting() *DeleteGroupSetting_DeleteGroupSetting {
	if t == nil {
		t = &DeleteGroupSetting{}
	}
	return &t.DeleteGroupSetting
}

type GetAllGroupSettings struct {
	GroupSettings GetAllGroupSettings_GroupSettings "json:\"groupSettings\" graphql:\"groupSettings\""
}

func (t *GetAllGroupSettings) GetGroupSettings() *GetAllGroupSettings_GroupSettings {
	if t == nil {
		t = &GetAllGroupSettings{}
	}
	return &t.GroupSettings
}

type GetGroupSettingByID struct {
	GroupSetting GetGroupSettingByID_GroupSetting "json:\"groupSetting\" graphql:\"groupSetting\""
}

func (t *GetGroupSettingByID) GetGroupSetting() *GetGroupSettingByID_GroupSetting {
	if t == nil {
		t = &GetGroupSettingByID{}
	}
	return &t.GroupSetting
}

type GetGroupSettings struct {
	GroupSettings GetGroupSettings_GroupSettings "json:\"groupSettings\" graphql:\"groupSettings\""
}

func (t *GetGroupSettings) GetGroupSettings() *GetGroupSettings_GroupSettings {
	if t == nil {
		t = &GetGroupSettings{}
	}
	return &t.GroupSettings
}

type UpdateGroupSetting struct {
	UpdateGroupSetting UpdateGroupSetting_UpdateGroupSetting "json:\"updateGroupSetting\" graphql:\"updateGroupSetting\""
}

func (t *UpdateGroupSetting) GetUpdateGroupSetting() *UpdateGroupSetting_UpdateGroupSetting {
	if t == nil {
		t = &UpdateGroupSetting{}
	}
	return &t.UpdateGroupSetting
}

type GetAllGroupSettingHistories struct {
	GroupSettingHistories GetAllGroupSettingHistories_GroupSettingHistories "json:\"groupSettingHistories\" graphql:\"groupSettingHistories\""
}

func (t *GetAllGroupSettingHistories) GetGroupSettingHistories() *GetAllGroupSettingHistories_GroupSettingHistories {
	if t == nil {
		t = &GetAllGroupSettingHistories{}
	}
	return &t.GroupSettingHistories
}

type GetGroupSettingHistories struct {
	GroupSettingHistories GetGroupSettingHistories_GroupSettingHistories "json:\"groupSettingHistories\" graphql:\"groupSettingHistories\""
}

func (t *GetGroupSettingHistories) GetGroupSettingHistories() *GetGroupSettingHistories_GroupSettingHistories {
	if t == nil {
		t = &GetGroupSettingHistories{}
	}
	return &t.GroupSettingHistories
}

type CreateBulkCSVHush struct {
	CreateBulkCSVHush CreateBulkCSVHush_CreateBulkCSVHush "json:\"createBulkCSVHush\" graphql:\"createBulkCSVHush\""
}

func (t *CreateBulkCSVHush) GetCreateBulkCSVHush() *CreateBulkCSVHush_CreateBulkCSVHush {
	if t == nil {
		t = &CreateBulkCSVHush{}
	}
	return &t.CreateBulkCSVHush
}

type CreateBulkHush struct {
	CreateBulkHush CreateBulkHush_CreateBulkHush "json:\"createBulkHush\" graphql:\"createBulkHush\""
}

func (t *CreateBulkHush) GetCreateBulkHush() *CreateBulkHush_CreateBulkHush {
	if t == nil {
		t = &CreateBulkHush{}
	}
	return &t.CreateBulkHush
}

type CreateHush struct {
	CreateHush CreateHush_CreateHush "json:\"createHush\" graphql:\"createHush\""
}

func (t *CreateHush) GetCreateHush() *CreateHush_CreateHush {
	if t == nil {
		t = &CreateHush{}
	}
	return &t.CreateHush
}

type DeleteHush struct {
	DeleteHush DeleteHush_DeleteHush "json:\"deleteHush\" graphql:\"deleteHush\""
}

func (t *DeleteHush) GetDeleteHush() *DeleteHush_DeleteHush {
	if t == nil {
		t = &DeleteHush{}
	}
	return &t.DeleteHush
}

type GetAllHushes struct {
	Hushes GetAllHushes_Hushes "json:\"hushes\" graphql:\"hushes\""
}

func (t *GetAllHushes) GetHushes() *GetAllHushes_Hushes {
	if t == nil {
		t = &GetAllHushes{}
	}
	return &t.Hushes
}

type GetHushByID struct {
	Hush GetHushByID_Hush "json:\"hush\" graphql:\"hush\""
}

func (t *GetHushByID) GetHush() *GetHushByID_Hush {
	if t == nil {
		t = &GetHushByID{}
	}
	return &t.Hush
}

type GetHushes struct {
	Hushes GetHushes_Hushes "json:\"hushes\" graphql:\"hushes\""
}

func (t *GetHushes) GetHushes() *GetHushes_Hushes {
	if t == nil {
		t = &GetHushes{}
	}
	return &t.Hushes
}

type UpdateHush struct {
	UpdateHush UpdateHush_UpdateHush "json:\"updateHush\" graphql:\"updateHush\""
}

func (t *UpdateHush) GetUpdateHush() *UpdateHush_UpdateHush {
	if t == nil {
		t = &UpdateHush{}
	}
	return &t.UpdateHush
}

type GetAllHushHistories struct {
	HushHistories GetAllHushHistories_HushHistories "json:\"hushHistories\" graphql:\"hushHistories\""
}

func (t *GetAllHushHistories) GetHushHistories() *GetAllHushHistories_HushHistories {
	if t == nil {
		t = &GetAllHushHistories{}
	}
	return &t.HushHistories
}

type GetHushHistories struct {
	HushHistories GetHushHistories_HushHistories "json:\"hushHistories\" graphql:\"hushHistories\""
}

func (t *GetHushHistories) GetHushHistories() *GetHushHistories_HushHistories {
	if t == nil {
		t = &GetHushHistories{}
	}
	return &t.HushHistories
}

type DeleteIntegration struct {
	DeleteIntegration DeleteIntegration_DeleteIntegration "json:\"deleteIntegration\" graphql:\"deleteIntegration\""
}

func (t *DeleteIntegration) GetDeleteIntegration() *DeleteIntegration_DeleteIntegration {
	if t == nil {
		t = &DeleteIntegration{}
	}
	return &t.DeleteIntegration
}

type GetAllIntegrations struct {
	Integrations GetAllIntegrations_Integrations "json:\"integrations\" graphql:\"integrations\""
}

func (t *GetAllIntegrations) GetIntegrations() *GetAllIntegrations_Integrations {
	if t == nil {
		t = &GetAllIntegrations{}
	}
	return &t.Integrations
}

type GetIntegrationByID struct {
	Integration GetIntegrationByID_Integration "json:\"integration\" graphql:\"integration\""
}

func (t *GetIntegrationByID) GetIntegration() *GetIntegrationByID_Integration {
	if t == nil {
		t = &GetIntegrationByID{}
	}
	return &t.Integration
}

type GetIntegrations struct {
	Integrations GetIntegrations_Integrations "json:\"integrations\" graphql:\"integrations\""
}

func (t *GetIntegrations) GetIntegrations() *GetIntegrations_Integrations {
	if t == nil {
		t = &GetIntegrations{}
	}
	return &t.Integrations
}

type GetAllIntegrationHistories struct {
	IntegrationHistories GetAllIntegrationHistories_IntegrationHistories "json:\"integrationHistories\" graphql:\"integrationHistories\""
}

func (t *GetAllIntegrationHistories) GetIntegrationHistories() *GetAllIntegrationHistories_IntegrationHistories {
	if t == nil {
		t = &GetAllIntegrationHistories{}
	}
	return &t.IntegrationHistories
}

type GetIntegrationHistories struct {
	IntegrationHistories GetIntegrationHistories_IntegrationHistories "json:\"integrationHistories\" graphql:\"integrationHistories\""
}

func (t *GetIntegrationHistories) GetIntegrationHistories() *GetIntegrationHistories_IntegrationHistories {
	if t == nil {
		t = &GetIntegrationHistories{}
	}
	return &t.IntegrationHistories
}

type CreateBulkCSVInternalPolicy struct {
	CreateBulkCSVInternalPolicy CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy "json:\"createBulkCSVInternalPolicy\" graphql:\"createBulkCSVInternalPolicy\""
}

func (t *CreateBulkCSVInternalPolicy) GetCreateBulkCSVInternalPolicy() *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy{}
	}
	return &t.CreateBulkCSVInternalPolicy
}

type CreateBulkInternalPolicy struct {
	CreateBulkInternalPolicy CreateBulkInternalPolicy_CreateBulkInternalPolicy "json:\"createBulkInternalPolicy\" graphql:\"createBulkInternalPolicy\""
}

func (t *CreateBulkInternalPolicy) GetCreateBulkInternalPolicy() *CreateBulkInternalPolicy_CreateBulkInternalPolicy {
	if t == nil {
		t = &CreateBulkInternalPolicy{}
	}
	return &t.CreateBulkInternalPolicy
}

type CreateInternalPolicy struct {
	CreateInternalPolicy CreateInternalPolicy_CreateInternalPolicy "json:\"createInternalPolicy\" graphql:\"createInternalPolicy\""
}

func (t *CreateInternalPolicy) GetCreateInternalPolicy() *CreateInternalPolicy_CreateInternalPolicy {
	if t == nil {
		t = &CreateInternalPolicy{}
	}
	return &t.CreateInternalPolicy
}

type DeleteInternalPolicy struct {
	DeleteInternalPolicy DeleteInternalPolicy_DeleteInternalPolicy "json:\"deleteInternalPolicy\" graphql:\"deleteInternalPolicy\""
}

func (t *DeleteInternalPolicy) GetDeleteInternalPolicy() *DeleteInternalPolicy_DeleteInternalPolicy {
	if t == nil {
		t = &DeleteInternalPolicy{}
	}
	return &t.DeleteInternalPolicy
}

type GetAllInternalPolicies struct {
	InternalPolicies GetAllInternalPolicies_InternalPolicies "json:\"internalPolicies\" graphql:\"internalPolicies\""
}

func (t *GetAllInternalPolicies) GetInternalPolicies() *GetAllInternalPolicies_InternalPolicies {
	if t == nil {
		t = &GetAllInternalPolicies{}
	}
	return &t.InternalPolicies
}

type GetInternalPolicyByID struct {
	InternalPolicy GetInternalPolicyByID_InternalPolicy "json:\"internalPolicy\" graphql:\"internalPolicy\""
}

func (t *GetInternalPolicyByID) GetInternalPolicy() *GetInternalPolicyByID_InternalPolicy {
	if t == nil {
		t = &GetInternalPolicyByID{}
	}
	return &t.InternalPolicy
}

type GetInternalPolicies struct {
	InternalPolicies GetInternalPolicies_InternalPolicies "json:\"internalPolicies\" graphql:\"internalPolicies\""
}

func (t *GetInternalPolicies) GetInternalPolicies() *GetInternalPolicies_InternalPolicies {
	if t == nil {
		t = &GetInternalPolicies{}
	}
	return &t.InternalPolicies
}

type UpdateInternalPolicy struct {
	UpdateInternalPolicy UpdateInternalPolicy_UpdateInternalPolicy "json:\"updateInternalPolicy\" graphql:\"updateInternalPolicy\""
}

func (t *UpdateInternalPolicy) GetUpdateInternalPolicy() *UpdateInternalPolicy_UpdateInternalPolicy {
	if t == nil {
		t = &UpdateInternalPolicy{}
	}
	return &t.UpdateInternalPolicy
}

type GetAllInternalPolicyHistories struct {
	InternalPolicyHistories GetAllInternalPolicyHistories_InternalPolicyHistories "json:\"internalPolicyHistories\" graphql:\"internalPolicyHistories\""
}

func (t *GetAllInternalPolicyHistories) GetInternalPolicyHistories() *GetAllInternalPolicyHistories_InternalPolicyHistories {
	if t == nil {
		t = &GetAllInternalPolicyHistories{}
	}
	return &t.InternalPolicyHistories
}

type GetInternalPolicyHistories struct {
	InternalPolicyHistories GetInternalPolicyHistories_InternalPolicyHistories "json:\"internalPolicyHistories\" graphql:\"internalPolicyHistories\""
}

func (t *GetInternalPolicyHistories) GetInternalPolicyHistories() *GetInternalPolicyHistories_InternalPolicyHistories {
	if t == nil {
		t = &GetInternalPolicyHistories{}
	}
	return &t.InternalPolicyHistories
}

type CreateBulkCSVInvite struct {
	CreateBulkCSVInvite CreateBulkCSVInvite_CreateBulkCSVInvite "json:\"createBulkCSVInvite\" graphql:\"createBulkCSVInvite\""
}

func (t *CreateBulkCSVInvite) GetCreateBulkCSVInvite() *CreateBulkCSVInvite_CreateBulkCSVInvite {
	if t == nil {
		t = &CreateBulkCSVInvite{}
	}
	return &t.CreateBulkCSVInvite
}

type CreateBulkInvite struct {
	CreateBulkInvite CreateBulkInvite_CreateBulkInvite "json:\"createBulkInvite\" graphql:\"createBulkInvite\""
}

func (t *CreateBulkInvite) GetCreateBulkInvite() *CreateBulkInvite_CreateBulkInvite {
	if t == nil {
		t = &CreateBulkInvite{}
	}
	return &t.CreateBulkInvite
}

type CreateInvite struct {
	CreateInvite CreateInvite_CreateInvite "json:\"createInvite\" graphql:\"createInvite\""
}

func (t *CreateInvite) GetCreateInvite() *CreateInvite_CreateInvite {
	if t == nil {
		t = &CreateInvite{}
	}
	return &t.CreateInvite
}

type DeleteInvite struct {
	DeleteInvite DeleteInvite_DeleteInvite "json:\"deleteInvite\" graphql:\"deleteInvite\""
}

func (t *DeleteInvite) GetDeleteInvite() *DeleteInvite_DeleteInvite {
	if t == nil {
		t = &DeleteInvite{}
	}
	return &t.DeleteInvite
}

type GetAllInvites struct {
	Invites GetAllInvites_Invites "json:\"invites\" graphql:\"invites\""
}

func (t *GetAllInvites) GetInvites() *GetAllInvites_Invites {
	if t == nil {
		t = &GetAllInvites{}
	}
	return &t.Invites
}

type GetInviteByID struct {
	Invite GetInviteByID_Invite "json:\"invite\" graphql:\"invite\""
}

func (t *GetInviteByID) GetInvite() *GetInviteByID_Invite {
	if t == nil {
		t = &GetInviteByID{}
	}
	return &t.Invite
}

type GetInvites struct {
	Invites GetInvites_Invites "json:\"invites\" graphql:\"invites\""
}

func (t *GetInvites) GetInvites() *GetInvites_Invites {
	if t == nil {
		t = &GetInvites{}
	}
	return &t.Invites
}

type UpdateInvite struct {
	UpdateInvite UpdateInvite_UpdateInvite "json:\"updateInvite\" graphql:\"updateInvite\""
}

func (t *UpdateInvite) GetUpdateInvite() *UpdateInvite_UpdateInvite {
	if t == nil {
		t = &UpdateInvite{}
	}
	return &t.UpdateInvite
}

type CreateJobResult struct {
	CreateJobResult CreateJobResult_CreateJobResult "json:\"createJobResult\" graphql:\"createJobResult\""
}

func (t *CreateJobResult) GetCreateJobResult() *CreateJobResult_CreateJobResult {
	if t == nil {
		t = &CreateJobResult{}
	}
	return &t.CreateJobResult
}

type DeleteJobResult struct {
	DeleteJobResult DeleteJobResult_DeleteJobResult "json:\"deleteJobResult\" graphql:\"deleteJobResult\""
}

func (t *DeleteJobResult) GetDeleteJobResult() *DeleteJobResult_DeleteJobResult {
	if t == nil {
		t = &DeleteJobResult{}
	}
	return &t.DeleteJobResult
}

type GetAllJobResults struct {
	JobResults GetAllJobResults_JobResults "json:\"jobResults\" graphql:\"jobResults\""
}

func (t *GetAllJobResults) GetJobResults() *GetAllJobResults_JobResults {
	if t == nil {
		t = &GetAllJobResults{}
	}
	return &t.JobResults
}

type GetJobResultByID struct {
	JobResult GetJobResultByID_JobResult "json:\"jobResult\" graphql:\"jobResult\""
}

func (t *GetJobResultByID) GetJobResult() *GetJobResultByID_JobResult {
	if t == nil {
		t = &GetJobResultByID{}
	}
	return &t.JobResult
}

type GetJobResults struct {
	JobResults GetJobResults_JobResults "json:\"jobResults\" graphql:\"jobResults\""
}

func (t *GetJobResults) GetJobResults() *GetJobResults_JobResults {
	if t == nil {
		t = &GetJobResults{}
	}
	return &t.JobResults
}

type UpdateJobResult struct {
	UpdateJobResult UpdateJobResult_UpdateJobResult "json:\"updateJobResult\" graphql:\"updateJobResult\""
}

func (t *UpdateJobResult) GetUpdateJobResult() *UpdateJobResult_UpdateJobResult {
	if t == nil {
		t = &UpdateJobResult{}
	}
	return &t.UpdateJobResult
}

type CreateJobRunner struct {
	CreateJobRunner CreateJobRunner_CreateJobRunner "json:\"createJobRunner\" graphql:\"createJobRunner\""
}

func (t *CreateJobRunner) GetCreateJobRunner() *CreateJobRunner_CreateJobRunner {
	if t == nil {
		t = &CreateJobRunner{}
	}
	return &t.CreateJobRunner
}

type DeleteJobRunner struct {
	DeleteJobRunner DeleteJobRunner_DeleteJobRunner "json:\"deleteJobRunner\" graphql:\"deleteJobRunner\""
}

func (t *DeleteJobRunner) GetDeleteJobRunner() *DeleteJobRunner_DeleteJobRunner {
	if t == nil {
		t = &DeleteJobRunner{}
	}
	return &t.DeleteJobRunner
}

type GetAllJobRunners struct {
	JobRunners GetAllJobRunners_JobRunners "json:\"jobRunners\" graphql:\"jobRunners\""
}

func (t *GetAllJobRunners) GetJobRunners() *GetAllJobRunners_JobRunners {
	if t == nil {
		t = &GetAllJobRunners{}
	}
	return &t.JobRunners
}

type GetJobRunnerByID struct {
	JobRunner GetJobRunnerByID_JobRunner "json:\"jobRunner\" graphql:\"jobRunner\""
}

func (t *GetJobRunnerByID) GetJobRunner() *GetJobRunnerByID_JobRunner {
	if t == nil {
		t = &GetJobRunnerByID{}
	}
	return &t.JobRunner
}

type GetJobRunners struct {
	JobRunners GetJobRunners_JobRunners "json:\"jobRunners\" graphql:\"jobRunners\""
}

func (t *GetJobRunners) GetJobRunners() *GetJobRunners_JobRunners {
	if t == nil {
		t = &GetJobRunners{}
	}
	return &t.JobRunners
}

type UpdateJobRunner struct {
	UpdateJobRunner UpdateJobRunner_UpdateJobRunner "json:\"updateJobRunner\" graphql:\"updateJobRunner\""
}

func (t *UpdateJobRunner) GetUpdateJobRunner() *UpdateJobRunner_UpdateJobRunner {
	if t == nil {
		t = &UpdateJobRunner{}
	}
	return &t.UpdateJobRunner
}

type CreateJobRunnerRegistrationToken struct {
	CreateJobRunnerRegistrationToken CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken "json:\"createJobRunnerRegistrationToken\" graphql:\"createJobRunnerRegistrationToken\""
}

func (t *CreateJobRunnerRegistrationToken) GetCreateJobRunnerRegistrationToken() *CreateJobRunnerRegistrationToken_CreateJobRunnerRegistrationToken {
	if t == nil {
		t = &CreateJobRunnerRegistrationToken{}
	}
	return &t.CreateJobRunnerRegistrationToken
}

type DeleteJobRunnerRegistrationToken struct {
	DeleteJobRunnerRegistrationToken DeleteJobRunnerRegistrationToken_DeleteJobRunnerRegistrationToken "json:\"deleteJobRunnerRegistrationToken\" graphql:\"deleteJobRunnerRegistrationToken\""
}

func (t *DeleteJobRunnerRegistrationToken) GetDeleteJobRunnerRegistrationToken() *DeleteJobRunnerRegistrationToken_DeleteJobRunnerRegistrationToken {
	if t == nil {
		t = &DeleteJobRunnerRegistrationToken{}
	}
	return &t.DeleteJobRunnerRegistrationToken
}

type GetAllJobRunnerRegistrationTokens struct {
	JobRunnerRegistrationTokens GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens "json:\"jobRunnerRegistrationTokens\" graphql:\"jobRunnerRegistrationTokens\""
}

func (t *GetAllJobRunnerRegistrationTokens) GetJobRunnerRegistrationTokens() *GetAllJobRunnerRegistrationTokens_JobRunnerRegistrationTokens {
	if t == nil {
		t = &GetAllJobRunnerRegistrationTokens{}
	}
	return &t.JobRunnerRegistrationTokens
}

type GetJobRunnerRegistrationTokenByID struct {
	JobRunnerRegistrationToken GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken "json:\"jobRunnerRegistrationToken\" graphql:\"jobRunnerRegistrationToken\""
}

func (t *GetJobRunnerRegistrationTokenByID) GetJobRunnerRegistrationToken() *GetJobRunnerRegistrationTokenByID_JobRunnerRegistrationToken {
	if t == nil {
		t = &GetJobRunnerRegistrationTokenByID{}
	}
	return &t.JobRunnerRegistrationToken
}

type GetJobRunnerRegistrationTokens struct {
	JobRunnerRegistrationTokens GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens "json:\"jobRunnerRegistrationTokens\" graphql:\"jobRunnerRegistrationTokens\""
}

func (t *GetJobRunnerRegistrationTokens) GetJobRunnerRegistrationTokens() *GetJobRunnerRegistrationTokens_JobRunnerRegistrationTokens {
	if t == nil {
		t = &GetJobRunnerRegistrationTokens{}
	}
	return &t.JobRunnerRegistrationTokens
}

type CreateJobRunnerToken struct {
	CreateJobRunnerToken CreateJobRunnerToken_CreateJobRunnerToken "json:\"createJobRunnerToken\" graphql:\"createJobRunnerToken\""
}

func (t *CreateJobRunnerToken) GetCreateJobRunnerToken() *CreateJobRunnerToken_CreateJobRunnerToken {
	if t == nil {
		t = &CreateJobRunnerToken{}
	}
	return &t.CreateJobRunnerToken
}

type DeleteJobRunnerToken struct {
	DeleteJobRunnerToken DeleteJobRunnerToken_DeleteJobRunnerToken "json:\"deleteJobRunnerToken\" graphql:\"deleteJobRunnerToken\""
}

func (t *DeleteJobRunnerToken) GetDeleteJobRunnerToken() *DeleteJobRunnerToken_DeleteJobRunnerToken {
	if t == nil {
		t = &DeleteJobRunnerToken{}
	}
	return &t.DeleteJobRunnerToken
}

type GetAllJobRunnerTokens struct {
	JobRunnerTokens GetAllJobRunnerTokens_JobRunnerTokens "json:\"jobRunnerTokens\" graphql:\"jobRunnerTokens\""
}

func (t *GetAllJobRunnerTokens) GetJobRunnerTokens() *GetAllJobRunnerTokens_JobRunnerTokens {
	if t == nil {
		t = &GetAllJobRunnerTokens{}
	}
	return &t.JobRunnerTokens
}

type GetJobRunnerTokenByID struct {
	JobRunnerToken GetJobRunnerTokenByID_JobRunnerToken "json:\"jobRunnerToken\" graphql:\"jobRunnerToken\""
}

func (t *GetJobRunnerTokenByID) GetJobRunnerToken() *GetJobRunnerTokenByID_JobRunnerToken {
	if t == nil {
		t = &GetJobRunnerTokenByID{}
	}
	return &t.JobRunnerToken
}

type GetJobRunnerTokens struct {
	JobRunnerTokens GetJobRunnerTokens_JobRunnerTokens "json:\"jobRunnerTokens\" graphql:\"jobRunnerTokens\""
}

func (t *GetJobRunnerTokens) GetJobRunnerTokens() *GetJobRunnerTokens_JobRunnerTokens {
	if t == nil {
		t = &GetJobRunnerTokens{}
	}
	return &t.JobRunnerTokens
}

type CreateBulkCSVJobTemplate struct {
	CreateBulkCSVJobTemplate CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate "json:\"createBulkCSVJobTemplate\" graphql:\"createBulkCSVJobTemplate\""
}

func (t *CreateBulkCSVJobTemplate) GetCreateBulkCSVJobTemplate() *CreateBulkCSVJobTemplate_CreateBulkCSVJobTemplate {
	if t == nil {
		t = &CreateBulkCSVJobTemplate{}
	}
	return &t.CreateBulkCSVJobTemplate
}

type CreateBulkJobTemplate struct {
	CreateBulkJobTemplate CreateBulkJobTemplate_CreateBulkJobTemplate "json:\"createBulkJobTemplate\" graphql:\"createBulkJobTemplate\""
}

func (t *CreateBulkJobTemplate) GetCreateBulkJobTemplate() *CreateBulkJobTemplate_CreateBulkJobTemplate {
	if t == nil {
		t = &CreateBulkJobTemplate{}
	}
	return &t.CreateBulkJobTemplate
}

type CreateJobTemplate struct {
	CreateJobTemplate CreateJobTemplate_CreateJobTemplate "json:\"createJobTemplate\" graphql:\"createJobTemplate\""
}

func (t *CreateJobTemplate) GetCreateJobTemplate() *CreateJobTemplate_CreateJobTemplate {
	if t == nil {
		t = &CreateJobTemplate{}
	}
	return &t.CreateJobTemplate
}

type DeleteJobTemplate struct {
	DeleteJobTemplate DeleteJobTemplate_DeleteJobTemplate "json:\"deleteJobTemplate\" graphql:\"deleteJobTemplate\""
}

func (t *DeleteJobTemplate) GetDeleteJobTemplate() *DeleteJobTemplate_DeleteJobTemplate {
	if t == nil {
		t = &DeleteJobTemplate{}
	}
	return &t.DeleteJobTemplate
}

type GetAllJobTemplates struct {
	JobTemplates GetAllJobTemplates_JobTemplates "json:\"jobTemplates\" graphql:\"jobTemplates\""
}

func (t *GetAllJobTemplates) GetJobTemplates() *GetAllJobTemplates_JobTemplates {
	if t == nil {
		t = &GetAllJobTemplates{}
	}
	return &t.JobTemplates
}

type GetJobTemplateByID struct {
	JobTemplate GetJobTemplateByID_JobTemplate "json:\"jobTemplate\" graphql:\"jobTemplate\""
}

func (t *GetJobTemplateByID) GetJobTemplate() *GetJobTemplateByID_JobTemplate {
	if t == nil {
		t = &GetJobTemplateByID{}
	}
	return &t.JobTemplate
}

type GetJobTemplates struct {
	JobTemplates GetJobTemplates_JobTemplates "json:\"jobTemplates\" graphql:\"jobTemplates\""
}

func (t *GetJobTemplates) GetJobTemplates() *GetJobTemplates_JobTemplates {
	if t == nil {
		t = &GetJobTemplates{}
	}
	return &t.JobTemplates
}

type UpdateJobTemplate struct {
	UpdateJobTemplate UpdateJobTemplate_UpdateJobTemplate "json:\"updateJobTemplate\" graphql:\"updateJobTemplate\""
}

func (t *UpdateJobTemplate) GetUpdateJobTemplate() *UpdateJobTemplate_UpdateJobTemplate {
	if t == nil {
		t = &UpdateJobTemplate{}
	}
	return &t.UpdateJobTemplate
}

type GetAllJobTemplateHistories struct {
	JobTemplateHistories GetAllJobTemplateHistories_JobTemplateHistories "json:\"jobTemplateHistories\" graphql:\"jobTemplateHistories\""
}

func (t *GetAllJobTemplateHistories) GetJobTemplateHistories() *GetAllJobTemplateHistories_JobTemplateHistories {
	if t == nil {
		t = &GetAllJobTemplateHistories{}
	}
	return &t.JobTemplateHistories
}

type GetJobTemplateHistories struct {
	JobTemplateHistories GetJobTemplateHistories_JobTemplateHistories "json:\"jobTemplateHistories\" graphql:\"jobTemplateHistories\""
}

func (t *GetJobTemplateHistories) GetJobTemplateHistories() *GetJobTemplateHistories_JobTemplateHistories {
	if t == nil {
		t = &GetJobTemplateHistories{}
	}
	return &t.JobTemplateHistories
}

type CreateBulkCSVMappableDomain struct {
	CreateBulkCSVMappableDomain CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain "json:\"createBulkCSVMappableDomain\" graphql:\"createBulkCSVMappableDomain\""
}

func (t *CreateBulkCSVMappableDomain) GetCreateBulkCSVMappableDomain() *CreateBulkCSVMappableDomain_CreateBulkCSVMappableDomain {
	if t == nil {
		t = &CreateBulkCSVMappableDomain{}
	}
	return &t.CreateBulkCSVMappableDomain
}

type CreateBulkMappableDomain struct {
	CreateBulkMappableDomain CreateBulkMappableDomain_CreateBulkMappableDomain "json:\"createBulkMappableDomain\" graphql:\"createBulkMappableDomain\""
}

func (t *CreateBulkMappableDomain) GetCreateBulkMappableDomain() *CreateBulkMappableDomain_CreateBulkMappableDomain {
	if t == nil {
		t = &CreateBulkMappableDomain{}
	}
	return &t.CreateBulkMappableDomain
}

type CreateMappableDomain struct {
	CreateMappableDomain CreateMappableDomain_CreateMappableDomain "json:\"createMappableDomain\" graphql:\"createMappableDomain\""
}

func (t *CreateMappableDomain) GetCreateMappableDomain() *CreateMappableDomain_CreateMappableDomain {
	if t == nil {
		t = &CreateMappableDomain{}
	}
	return &t.CreateMappableDomain
}

type DeleteMappableDomain struct {
	DeleteMappableDomain DeleteMappableDomain_DeleteMappableDomain "json:\"deleteMappableDomain\" graphql:\"deleteMappableDomain\""
}

func (t *DeleteMappableDomain) GetDeleteMappableDomain() *DeleteMappableDomain_DeleteMappableDomain {
	if t == nil {
		t = &DeleteMappableDomain{}
	}
	return &t.DeleteMappableDomain
}

type GetAllMappableDomains struct {
	MappableDomains GetAllMappableDomains_MappableDomains "json:\"mappableDomains\" graphql:\"mappableDomains\""
}

func (t *GetAllMappableDomains) GetMappableDomains() *GetAllMappableDomains_MappableDomains {
	if t == nil {
		t = &GetAllMappableDomains{}
	}
	return &t.MappableDomains
}

type GetMappableDomainByID struct {
	MappableDomain GetMappableDomainByID_MappableDomain "json:\"mappableDomain\" graphql:\"mappableDomain\""
}

func (t *GetMappableDomainByID) GetMappableDomain() *GetMappableDomainByID_MappableDomain {
	if t == nil {
		t = &GetMappableDomainByID{}
	}
	return &t.MappableDomain
}

type GetMappableDomains struct {
	MappableDomains GetMappableDomains_MappableDomains "json:\"mappableDomains\" graphql:\"mappableDomains\""
}

func (t *GetMappableDomains) GetMappableDomains() *GetMappableDomains_MappableDomains {
	if t == nil {
		t = &GetMappableDomains{}
	}
	return &t.MappableDomains
}

type UpdateMappableDomain struct {
	UpdateMappableDomain UpdateMappableDomain_UpdateMappableDomain "json:\"updateMappableDomain\" graphql:\"updateMappableDomain\""
}

func (t *UpdateMappableDomain) GetUpdateMappableDomain() *UpdateMappableDomain_UpdateMappableDomain {
	if t == nil {
		t = &UpdateMappableDomain{}
	}
	return &t.UpdateMappableDomain
}

type GetAllMappableDomainHistories struct {
	MappableDomainHistories GetAllMappableDomainHistories_MappableDomainHistories "json:\"mappableDomainHistories\" graphql:\"mappableDomainHistories\""
}

func (t *GetAllMappableDomainHistories) GetMappableDomainHistories() *GetAllMappableDomainHistories_MappableDomainHistories {
	if t == nil {
		t = &GetAllMappableDomainHistories{}
	}
	return &t.MappableDomainHistories
}

type GetMappableDomainHistories struct {
	MappableDomainHistories GetMappableDomainHistories_MappableDomainHistories "json:\"mappableDomainHistories\" graphql:\"mappableDomainHistories\""
}

func (t *GetMappableDomainHistories) GetMappableDomainHistories() *GetMappableDomainHistories_MappableDomainHistories {
	if t == nil {
		t = &GetMappableDomainHistories{}
	}
	return &t.MappableDomainHistories
}

type CreateBulkCSVMappedControl struct {
	CreateBulkCSVMappedControl CreateBulkCSVMappedControl_CreateBulkCSVMappedControl "json:\"createBulkCSVMappedControl\" graphql:\"createBulkCSVMappedControl\""
}

func (t *CreateBulkCSVMappedControl) GetCreateBulkCSVMappedControl() *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl {
	if t == nil {
		t = &CreateBulkCSVMappedControl{}
	}
	return &t.CreateBulkCSVMappedControl
}

type CreateBulkMappedControl struct {
	CreateBulkMappedControl CreateBulkMappedControl_CreateBulkMappedControl "json:\"createBulkMappedControl\" graphql:\"createBulkMappedControl\""
}

func (t *CreateBulkMappedControl) GetCreateBulkMappedControl() *CreateBulkMappedControl_CreateBulkMappedControl {
	if t == nil {
		t = &CreateBulkMappedControl{}
	}
	return &t.CreateBulkMappedControl
}

type CreateMappedControl struct {
	CreateMappedControl CreateMappedControl_CreateMappedControl "json:\"createMappedControl\" graphql:\"createMappedControl\""
}

func (t *CreateMappedControl) GetCreateMappedControl() *CreateMappedControl_CreateMappedControl {
	if t == nil {
		t = &CreateMappedControl{}
	}
	return &t.CreateMappedControl
}

type DeleteMappedControl struct {
	DeleteMappedControl DeleteMappedControl_DeleteMappedControl "json:\"deleteMappedControl\" graphql:\"deleteMappedControl\""
}

func (t *DeleteMappedControl) GetDeleteMappedControl() *DeleteMappedControl_DeleteMappedControl {
	if t == nil {
		t = &DeleteMappedControl{}
	}
	return &t.DeleteMappedControl
}

type GetAllMappedControls struct {
	MappedControls GetAllMappedControls_MappedControls "json:\"mappedControls\" graphql:\"mappedControls\""
}

func (t *GetAllMappedControls) GetMappedControls() *GetAllMappedControls_MappedControls {
	if t == nil {
		t = &GetAllMappedControls{}
	}
	return &t.MappedControls
}

type GetMappedControlByID struct {
	MappedControl GetMappedControlByID_MappedControl "json:\"mappedControl\" graphql:\"mappedControl\""
}

func (t *GetMappedControlByID) GetMappedControl() *GetMappedControlByID_MappedControl {
	if t == nil {
		t = &GetMappedControlByID{}
	}
	return &t.MappedControl
}

type GetMappedControls struct {
	MappedControls GetMappedControls_MappedControls "json:\"mappedControls\" graphql:\"mappedControls\""
}

func (t *GetMappedControls) GetMappedControls() *GetMappedControls_MappedControls {
	if t == nil {
		t = &GetMappedControls{}
	}
	return &t.MappedControls
}

type UpdateMappedControl struct {
	UpdateMappedControl UpdateMappedControl_UpdateMappedControl "json:\"updateMappedControl\" graphql:\"updateMappedControl\""
}

func (t *UpdateMappedControl) GetUpdateMappedControl() *UpdateMappedControl_UpdateMappedControl {
	if t == nil {
		t = &UpdateMappedControl{}
	}
	return &t.UpdateMappedControl
}

type GetAllMappedControlHistories struct {
	MappedControlHistories GetAllMappedControlHistories_MappedControlHistories "json:\"mappedControlHistories\" graphql:\"mappedControlHistories\""
}

func (t *GetAllMappedControlHistories) GetMappedControlHistories() *GetAllMappedControlHistories_MappedControlHistories {
	if t == nil {
		t = &GetAllMappedControlHistories{}
	}
	return &t.MappedControlHistories
}

type GetMappedControlHistories struct {
	MappedControlHistories GetMappedControlHistories_MappedControlHistories "json:\"mappedControlHistories\" graphql:\"mappedControlHistories\""
}

func (t *GetMappedControlHistories) GetMappedControlHistories() *GetMappedControlHistories_MappedControlHistories {
	if t == nil {
		t = &GetMappedControlHistories{}
	}
	return &t.MappedControlHistories
}

type CreateBulkCSVNarrative struct {
	CreateBulkCSVNarrative CreateBulkCSVNarrative_CreateBulkCSVNarrative "json:\"createBulkCSVNarrative\" graphql:\"createBulkCSVNarrative\""
}

func (t *CreateBulkCSVNarrative) GetCreateBulkCSVNarrative() *CreateBulkCSVNarrative_CreateBulkCSVNarrative {
	if t == nil {
		t = &CreateBulkCSVNarrative{}
	}
	return &t.CreateBulkCSVNarrative
}

type CreateBulkNarrative struct {
	CreateBulkNarrative CreateBulkNarrative_CreateBulkNarrative "json:\"createBulkNarrative\" graphql:\"createBulkNarrative\""
}

func (t *CreateBulkNarrative) GetCreateBulkNarrative() *CreateBulkNarrative_CreateBulkNarrative {
	if t == nil {
		t = &CreateBulkNarrative{}
	}
	return &t.CreateBulkNarrative
}

type CreateNarrative struct {
	CreateNarrative CreateNarrative_CreateNarrative "json:\"createNarrative\" graphql:\"createNarrative\""
}

func (t *CreateNarrative) GetCreateNarrative() *CreateNarrative_CreateNarrative {
	if t == nil {
		t = &CreateNarrative{}
	}
	return &t.CreateNarrative
}

type DeleteNarrative struct {
	DeleteNarrative DeleteNarrative_DeleteNarrative "json:\"deleteNarrative\" graphql:\"deleteNarrative\""
}

func (t *DeleteNarrative) GetDeleteNarrative() *DeleteNarrative_DeleteNarrative {
	if t == nil {
		t = &DeleteNarrative{}
	}
	return &t.DeleteNarrative
}

type GetAllNarratives struct {
	Narratives GetAllNarratives_Narratives "json:\"narratives\" graphql:\"narratives\""
}

func (t *GetAllNarratives) GetNarratives() *GetAllNarratives_Narratives {
	if t == nil {
		t = &GetAllNarratives{}
	}
	return &t.Narratives
}

type GetNarrativeByID struct {
	Narrative GetNarrativeByID_Narrative "json:\"narrative\" graphql:\"narrative\""
}

func (t *GetNarrativeByID) GetNarrative() *GetNarrativeByID_Narrative {
	if t == nil {
		t = &GetNarrativeByID{}
	}
	return &t.Narrative
}

type GetNarratives struct {
	Narratives GetNarratives_Narratives "json:\"narratives\" graphql:\"narratives\""
}

func (t *GetNarratives) GetNarratives() *GetNarratives_Narratives {
	if t == nil {
		t = &GetNarratives{}
	}
	return &t.Narratives
}

type UpdateNarrative struct {
	UpdateNarrative UpdateNarrative_UpdateNarrative "json:\"updateNarrative\" graphql:\"updateNarrative\""
}

func (t *UpdateNarrative) GetUpdateNarrative() *UpdateNarrative_UpdateNarrative {
	if t == nil {
		t = &UpdateNarrative{}
	}
	return &t.UpdateNarrative
}

type GetAllNarrativeHistories struct {
	NarrativeHistories GetAllNarrativeHistories_NarrativeHistories "json:\"narrativeHistories\" graphql:\"narrativeHistories\""
}

func (t *GetAllNarrativeHistories) GetNarrativeHistories() *GetAllNarrativeHistories_NarrativeHistories {
	if t == nil {
		t = &GetAllNarrativeHistories{}
	}
	return &t.NarrativeHistories
}

type GetNarrativeHistories struct {
	NarrativeHistories GetNarrativeHistories_NarrativeHistories "json:\"narrativeHistories\" graphql:\"narrativeHistories\""
}

func (t *GetNarrativeHistories) GetNarrativeHistories() *GetNarrativeHistories_NarrativeHistories {
	if t == nil {
		t = &GetNarrativeHistories{}
	}
	return &t.NarrativeHistories
}

type GetAllNoteHistories struct {
	NoteHistories GetAllNoteHistories_NoteHistories "json:\"noteHistories\" graphql:\"noteHistories\""
}

func (t *GetAllNoteHistories) GetNoteHistories() *GetAllNoteHistories_NoteHistories {
	if t == nil {
		t = &GetAllNoteHistories{}
	}
	return &t.NoteHistories
}

type GetNoteHistories struct {
	NoteHistories GetNoteHistories_NoteHistories "json:\"noteHistories\" graphql:\"noteHistories\""
}

func (t *GetNoteHistories) GetNoteHistories() *GetNoteHistories_NoteHistories {
	if t == nil {
		t = &GetNoteHistories{}
	}
	return &t.NoteHistories
}

type CreateOnboarding struct {
	CreateOnboarding CreateOnboarding_CreateOnboarding "json:\"createOnboarding\" graphql:\"createOnboarding\""
}

func (t *CreateOnboarding) GetCreateOnboarding() *CreateOnboarding_CreateOnboarding {
	if t == nil {
		t = &CreateOnboarding{}
	}
	return &t.CreateOnboarding
}

type CreateOrganization struct {
	CreateOrganization CreateOrganization_CreateOrganization "json:\"createOrganization\" graphql:\"createOrganization\""
}

func (t *CreateOrganization) GetCreateOrganization() *CreateOrganization_CreateOrganization {
	if t == nil {
		t = &CreateOrganization{}
	}
	return &t.CreateOrganization
}

type DeleteOrganization struct {
	DeleteOrganization DeleteOrganization_DeleteOrganization "json:\"deleteOrganization\" graphql:\"deleteOrganization\""
}

func (t *DeleteOrganization) GetDeleteOrganization() *DeleteOrganization_DeleteOrganization {
	if t == nil {
		t = &DeleteOrganization{}
	}
	return &t.DeleteOrganization
}

type GetAllOrganizations struct {
	Organizations GetAllOrganizations_Organizations "json:\"organizations\" graphql:\"organizations\""
}

func (t *GetAllOrganizations) GetOrganizations() *GetAllOrganizations_Organizations {
	if t == nil {
		t = &GetAllOrganizations{}
	}
	return &t.Organizations
}

type GetOrganizationByID struct {
	Organization GetOrganizationByID_Organization "json:\"organization\" graphql:\"organization\""
}

func (t *GetOrganizationByID) GetOrganization() *GetOrganizationByID_Organization {
	if t == nil {
		t = &GetOrganizationByID{}
	}
	return &t.Organization
}

type GetOrganizations struct {
	Organizations GetOrganizations_Organizations "json:\"organizations\" graphql:\"organizations\""
}

func (t *GetOrganizations) GetOrganizations() *GetOrganizations_Organizations {
	if t == nil {
		t = &GetOrganizations{}
	}
	return &t.Organizations
}

type UpdateOrganization struct {
	UpdateOrganization UpdateOrganization_UpdateOrganization "json:\"updateOrganization\" graphql:\"updateOrganization\""
}

func (t *UpdateOrganization) GetUpdateOrganization() *UpdateOrganization_UpdateOrganization {
	if t == nil {
		t = &UpdateOrganization{}
	}
	return &t.UpdateOrganization
}

type GetAllOrganizationHistories struct {
	OrganizationHistories GetAllOrganizationHistories_OrganizationHistories "json:\"organizationHistories\" graphql:\"organizationHistories\""
}

func (t *GetAllOrganizationHistories) GetOrganizationHistories() *GetAllOrganizationHistories_OrganizationHistories {
	if t == nil {
		t = &GetAllOrganizationHistories{}
	}
	return &t.OrganizationHistories
}

type GetOrganizationHistories struct {
	OrganizationHistories GetOrganizationHistories_OrganizationHistories "json:\"organizationHistories\" graphql:\"organizationHistories\""
}

func (t *GetOrganizationHistories) GetOrganizationHistories() *GetOrganizationHistories_OrganizationHistories {
	if t == nil {
		t = &GetOrganizationHistories{}
	}
	return &t.OrganizationHistories
}

type CreateBulkCSVOrganizationSetting struct {
	CreateBulkCSVOrganizationSetting CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting "json:\"createBulkCSVOrganizationSetting\" graphql:\"createBulkCSVOrganizationSetting\""
}

func (t *CreateBulkCSVOrganizationSetting) GetCreateBulkCSVOrganizationSetting() *CreateBulkCSVOrganizationSetting_CreateBulkCSVOrganizationSetting {
	if t == nil {
		t = &CreateBulkCSVOrganizationSetting{}
	}
	return &t.CreateBulkCSVOrganizationSetting
}

type CreateBulkOrganizationSetting struct {
	CreateBulkOrganizationSetting CreateBulkOrganizationSetting_CreateBulkOrganizationSetting "json:\"createBulkOrganizationSetting\" graphql:\"createBulkOrganizationSetting\""
}

func (t *CreateBulkOrganizationSetting) GetCreateBulkOrganizationSetting() *CreateBulkOrganizationSetting_CreateBulkOrganizationSetting {
	if t == nil {
		t = &CreateBulkOrganizationSetting{}
	}
	return &t.CreateBulkOrganizationSetting
}

type CreateOrganizationSetting struct {
	CreateOrganizationSetting CreateOrganizationSetting_CreateOrganizationSetting "json:\"createOrganizationSetting\" graphql:\"createOrganizationSetting\""
}

func (t *CreateOrganizationSetting) GetCreateOrganizationSetting() *CreateOrganizationSetting_CreateOrganizationSetting {
	if t == nil {
		t = &CreateOrganizationSetting{}
	}
	return &t.CreateOrganizationSetting
}

type DeleteOrganizationSetting struct {
	DeleteOrganizationSetting DeleteOrganizationSetting_DeleteOrganizationSetting "json:\"deleteOrganizationSetting\" graphql:\"deleteOrganizationSetting\""
}

func (t *DeleteOrganizationSetting) GetDeleteOrganizationSetting() *DeleteOrganizationSetting_DeleteOrganizationSetting {
	if t == nil {
		t = &DeleteOrganizationSetting{}
	}
	return &t.DeleteOrganizationSetting
}

type GetAllOrganizationSettings struct {
	OrganizationSettings GetAllOrganizationSettings_OrganizationSettings "json:\"organizationSettings\" graphql:\"organizationSettings\""
}

func (t *GetAllOrganizationSettings) GetOrganizationSettings() *GetAllOrganizationSettings_OrganizationSettings {
	if t == nil {
		t = &GetAllOrganizationSettings{}
	}
	return &t.OrganizationSettings
}

type GetOrganizationSettingByID struct {
	OrganizationSetting GetOrganizationSettingByID_OrganizationSetting "json:\"organizationSetting\" graphql:\"organizationSetting\""
}

func (t *GetOrganizationSettingByID) GetOrganizationSetting() *GetOrganizationSettingByID_OrganizationSetting {
	if t == nil {
		t = &GetOrganizationSettingByID{}
	}
	return &t.OrganizationSetting
}

type GetOrganizationSettings struct {
	OrganizationSettings GetOrganizationSettings_OrganizationSettings "json:\"organizationSettings\" graphql:\"organizationSettings\""
}

func (t *GetOrganizationSettings) GetOrganizationSettings() *GetOrganizationSettings_OrganizationSettings {
	if t == nil {
		t = &GetOrganizationSettings{}
	}
	return &t.OrganizationSettings
}

type UpdateOrganizationSetting struct {
	UpdateOrganizationSetting UpdateOrganizationSetting_UpdateOrganizationSetting "json:\"updateOrganizationSetting\" graphql:\"updateOrganizationSetting\""
}

func (t *UpdateOrganizationSetting) GetUpdateOrganizationSetting() *UpdateOrganizationSetting_UpdateOrganizationSetting {
	if t == nil {
		t = &UpdateOrganizationSetting{}
	}
	return &t.UpdateOrganizationSetting
}

type GetAllOrganizationSettingHistories struct {
	OrganizationSettingHistories GetAllOrganizationSettingHistories_OrganizationSettingHistories "json:\"organizationSettingHistories\" graphql:\"organizationSettingHistories\""
}

func (t *GetAllOrganizationSettingHistories) GetOrganizationSettingHistories() *GetAllOrganizationSettingHistories_OrganizationSettingHistories {
	if t == nil {
		t = &GetAllOrganizationSettingHistories{}
	}
	return &t.OrganizationSettingHistories
}

type GetOrganizationSettingHistories struct {
	OrganizationSettingHistories GetOrganizationSettingHistories_OrganizationSettingHistories "json:\"organizationSettingHistories\" graphql:\"organizationSettingHistories\""
}

func (t *GetOrganizationSettingHistories) GetOrganizationSettingHistories() *GetOrganizationSettingHistories_OrganizationSettingHistories {
	if t == nil {
		t = &GetOrganizationSettingHistories{}
	}
	return &t.OrganizationSettingHistories
}

type CreateBulkCSVOrgMembership struct {
	CreateBulkCSVOrgMembership CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership "json:\"createBulkCSVOrgMembership\" graphql:\"createBulkCSVOrgMembership\""
}

func (t *CreateBulkCSVOrgMembership) GetCreateBulkCSVOrgMembership() *CreateBulkCSVOrgMembership_CreateBulkCSVOrgMembership {
	if t == nil {
		t = &CreateBulkCSVOrgMembership{}
	}
	return &t.CreateBulkCSVOrgMembership
}

type CreateBulkOrgMembership struct {
	CreateBulkOrgMembership CreateBulkOrgMembership_CreateBulkOrgMembership "json:\"createBulkOrgMembership\" graphql:\"createBulkOrgMembership\""
}

func (t *CreateBulkOrgMembership) GetCreateBulkOrgMembership() *CreateBulkOrgMembership_CreateBulkOrgMembership {
	if t == nil {
		t = &CreateBulkOrgMembership{}
	}
	return &t.CreateBulkOrgMembership
}

type CreateOrgMembership struct {
	CreateOrgMembership CreateOrgMembership_CreateOrgMembership "json:\"createOrgMembership\" graphql:\"createOrgMembership\""
}

func (t *CreateOrgMembership) GetCreateOrgMembership() *CreateOrgMembership_CreateOrgMembership {
	if t == nil {
		t = &CreateOrgMembership{}
	}
	return &t.CreateOrgMembership
}

type DeleteOrgMembership struct {
	DeleteOrgMembership DeleteOrgMembership_DeleteOrgMembership "json:\"deleteOrgMembership\" graphql:\"deleteOrgMembership\""
}

func (t *DeleteOrgMembership) GetDeleteOrgMembership() *DeleteOrgMembership_DeleteOrgMembership {
	if t == nil {
		t = &DeleteOrgMembership{}
	}
	return &t.DeleteOrgMembership
}

type GetAllOrgMemberships struct {
	OrgMemberships GetAllOrgMemberships_OrgMemberships "json:\"orgMemberships\" graphql:\"orgMemberships\""
}

func (t *GetAllOrgMemberships) GetOrgMemberships() *GetAllOrgMemberships_OrgMemberships {
	if t == nil {
		t = &GetAllOrgMemberships{}
	}
	return &t.OrgMemberships
}

type GetOrgMembershipByID struct {
	OrgMembership GetOrgMembershipByID_OrgMembership "json:\"orgMembership\" graphql:\"orgMembership\""
}

func (t *GetOrgMembershipByID) GetOrgMembership() *GetOrgMembershipByID_OrgMembership {
	if t == nil {
		t = &GetOrgMembershipByID{}
	}
	return &t.OrgMembership
}

type GetOrgMemberships struct {
	OrgMemberships GetOrgMemberships_OrgMemberships "json:\"orgMemberships\" graphql:\"orgMemberships\""
}

func (t *GetOrgMemberships) GetOrgMemberships() *GetOrgMemberships_OrgMemberships {
	if t == nil {
		t = &GetOrgMemberships{}
	}
	return &t.OrgMemberships
}

type UpdateOrgMembership struct {
	UpdateOrgMembership UpdateOrgMembership_UpdateOrgMembership "json:\"updateOrgMembership\" graphql:\"updateOrgMembership\""
}

func (t *UpdateOrgMembership) GetUpdateOrgMembership() *UpdateOrgMembership_UpdateOrgMembership {
	if t == nil {
		t = &UpdateOrgMembership{}
	}
	return &t.UpdateOrgMembership
}

type GetAllOrgMembershipHistories struct {
	OrgMembershipHistories GetAllOrgMembershipHistories_OrgMembershipHistories "json:\"orgMembershipHistories\" graphql:\"orgMembershipHistories\""
}

func (t *GetAllOrgMembershipHistories) GetOrgMembershipHistories() *GetAllOrgMembershipHistories_OrgMembershipHistories {
	if t == nil {
		t = &GetAllOrgMembershipHistories{}
	}
	return &t.OrgMembershipHistories
}

type GetOrgMembershipHistories struct {
	OrgMembershipHistories GetOrgMembershipHistories_OrgMembershipHistories "json:\"orgMembershipHistories\" graphql:\"orgMembershipHistories\""
}

func (t *GetOrgMembershipHistories) GetOrgMembershipHistories() *GetOrgMembershipHistories_OrgMembershipHistories {
	if t == nil {
		t = &GetOrgMembershipHistories{}
	}
	return &t.OrgMembershipHistories
}

type GetAllOrgSubscriptions struct {
	OrgSubscriptions GetAllOrgSubscriptions_OrgSubscriptions "json:\"orgSubscriptions\" graphql:\"orgSubscriptions\""
}

func (t *GetAllOrgSubscriptions) GetOrgSubscriptions() *GetAllOrgSubscriptions_OrgSubscriptions {
	if t == nil {
		t = &GetAllOrgSubscriptions{}
	}
	return &t.OrgSubscriptions
}

type GetOrgSubscriptionByID struct {
	OrgSubscription GetOrgSubscriptionByID_OrgSubscription "json:\"orgSubscription\" graphql:\"orgSubscription\""
}

func (t *GetOrgSubscriptionByID) GetOrgSubscription() *GetOrgSubscriptionByID_OrgSubscription {
	if t == nil {
		t = &GetOrgSubscriptionByID{}
	}
	return &t.OrgSubscription
}

type GetOrgSubscriptions struct {
	OrgSubscriptions GetOrgSubscriptions_OrgSubscriptions "json:\"orgSubscriptions\" graphql:\"orgSubscriptions\""
}

func (t *GetOrgSubscriptions) GetOrgSubscriptions() *GetOrgSubscriptions_OrgSubscriptions {
	if t == nil {
		t = &GetOrgSubscriptions{}
	}
	return &t.OrgSubscriptions
}

type GetAllOrgSubscriptionHistories struct {
	OrgSubscriptionHistories GetAllOrgSubscriptionHistories_OrgSubscriptionHistories "json:\"orgSubscriptionHistories\" graphql:\"orgSubscriptionHistories\""
}

func (t *GetAllOrgSubscriptionHistories) GetOrgSubscriptionHistories() *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories{}
	}
	return &t.OrgSubscriptionHistories
}

type GetOrgSubscriptionHistories struct {
	OrgSubscriptionHistories GetOrgSubscriptionHistories_OrgSubscriptionHistories "json:\"orgSubscriptionHistories\" graphql:\"orgSubscriptionHistories\""
}

func (t *GetOrgSubscriptionHistories) GetOrgSubscriptionHistories() *GetOrgSubscriptionHistories_OrgSubscriptionHistories {
	if t == nil {
		t = &GetOrgSubscriptionHistories{}
	}
	return &t.OrgSubscriptionHistories
}

type CreatePersonalAccessToken struct {
	CreatePersonalAccessToken CreatePersonalAccessToken_CreatePersonalAccessToken "json:\"createPersonalAccessToken\" graphql:\"createPersonalAccessToken\""
}

func (t *CreatePersonalAccessToken) GetCreatePersonalAccessToken() *CreatePersonalAccessToken_CreatePersonalAccessToken {
	if t == nil {
		t = &CreatePersonalAccessToken{}
	}
	return &t.CreatePersonalAccessToken
}

type DeletePersonalAccessToken struct {
	DeletePersonalAccessToken DeletePersonalAccessToken_DeletePersonalAccessToken "json:\"deletePersonalAccessToken\" graphql:\"deletePersonalAccessToken\""
}

func (t *DeletePersonalAccessToken) GetDeletePersonalAccessToken() *DeletePersonalAccessToken_DeletePersonalAccessToken {
	if t == nil {
		t = &DeletePersonalAccessToken{}
	}
	return &t.DeletePersonalAccessToken
}

type GetAllPersonalAccessTokens struct {
	PersonalAccessTokens GetAllPersonalAccessTokens_PersonalAccessTokens "json:\"personalAccessTokens\" graphql:\"personalAccessTokens\""
}

func (t *GetAllPersonalAccessTokens) GetPersonalAccessTokens() *GetAllPersonalAccessTokens_PersonalAccessTokens {
	if t == nil {
		t = &GetAllPersonalAccessTokens{}
	}
	return &t.PersonalAccessTokens
}

type GetPersonalAccessTokenByID struct {
	PersonalAccessToken GetPersonalAccessTokenByID_PersonalAccessToken "json:\"personalAccessToken\" graphql:\"personalAccessToken\""
}

func (t *GetPersonalAccessTokenByID) GetPersonalAccessToken() *GetPersonalAccessTokenByID_PersonalAccessToken {
	if t == nil {
		t = &GetPersonalAccessTokenByID{}
	}
	return &t.PersonalAccessToken
}

type GetPersonalAccessTokens struct {
	PersonalAccessTokens GetPersonalAccessTokens_PersonalAccessTokens "json:\"personalAccessTokens\" graphql:\"personalAccessTokens\""
}

func (t *GetPersonalAccessTokens) GetPersonalAccessTokens() *GetPersonalAccessTokens_PersonalAccessTokens {
	if t == nil {
		t = &GetPersonalAccessTokens{}
	}
	return &t.PersonalAccessTokens
}

type UpdatePersonalAccessToken struct {
	UpdatePersonalAccessToken UpdatePersonalAccessToken_UpdatePersonalAccessToken "json:\"updatePersonalAccessToken\" graphql:\"updatePersonalAccessToken\""
}

func (t *UpdatePersonalAccessToken) GetUpdatePersonalAccessToken() *UpdatePersonalAccessToken_UpdatePersonalAccessToken {
	if t == nil {
		t = &UpdatePersonalAccessToken{}
	}
	return &t.UpdatePersonalAccessToken
}

type CreateBulkCSVProcedure struct {
	CreateBulkCSVProcedure CreateBulkCSVProcedure_CreateBulkCSVProcedure "json:\"createBulkCSVProcedure\" graphql:\"createBulkCSVProcedure\""
}

func (t *CreateBulkCSVProcedure) GetCreateBulkCSVProcedure() *CreateBulkCSVProcedure_CreateBulkCSVProcedure {
	if t == nil {
		t = &CreateBulkCSVProcedure{}
	}
	return &t.CreateBulkCSVProcedure
}

type CreateBulkProcedure struct {
	CreateBulkProcedure CreateBulkProcedure_CreateBulkProcedure "json:\"createBulkProcedure\" graphql:\"createBulkProcedure\""
}

func (t *CreateBulkProcedure) GetCreateBulkProcedure() *CreateBulkProcedure_CreateBulkProcedure {
	if t == nil {
		t = &CreateBulkProcedure{}
	}
	return &t.CreateBulkProcedure
}

type CreateProcedure struct {
	CreateProcedure CreateProcedure_CreateProcedure "json:\"createProcedure\" graphql:\"createProcedure\""
}

func (t *CreateProcedure) GetCreateProcedure() *CreateProcedure_CreateProcedure {
	if t == nil {
		t = &CreateProcedure{}
	}
	return &t.CreateProcedure
}

type CreateUploadProcedure struct {
	CreateUploadProcedure CreateUploadProcedure_CreateUploadProcedure "json:\"createUploadProcedure\" graphql:\"createUploadProcedure\""
}

func (t *CreateUploadProcedure) GetCreateUploadProcedure() *CreateUploadProcedure_CreateUploadProcedure {
	if t == nil {
		t = &CreateUploadProcedure{}
	}
	return &t.CreateUploadProcedure
}

type DeleteProcedure struct {
	DeleteProcedure DeleteProcedure_DeleteProcedure "json:\"deleteProcedure\" graphql:\"deleteProcedure\""
}

func (t *DeleteProcedure) GetDeleteProcedure() *DeleteProcedure_DeleteProcedure {
	if t == nil {
		t = &DeleteProcedure{}
	}
	return &t.DeleteProcedure
}

type GetAllProcedures struct {
	Procedures GetAllProcedures_Procedures "json:\"procedures\" graphql:\"procedures\""
}

func (t *GetAllProcedures) GetProcedures() *GetAllProcedures_Procedures {
	if t == nil {
		t = &GetAllProcedures{}
	}
	return &t.Procedures
}

type GetProcedureByID struct {
	Procedure GetProcedureByID_Procedure "json:\"procedure\" graphql:\"procedure\""
}

func (t *GetProcedureByID) GetProcedure() *GetProcedureByID_Procedure {
	if t == nil {
		t = &GetProcedureByID{}
	}
	return &t.Procedure
}

type GetProcedures struct {
	Procedures GetProcedures_Procedures "json:\"procedures\" graphql:\"procedures\""
}

func (t *GetProcedures) GetProcedures() *GetProcedures_Procedures {
	if t == nil {
		t = &GetProcedures{}
	}
	return &t.Procedures
}

type UpdateProcedure struct {
	UpdateProcedure UpdateProcedure_UpdateProcedure "json:\"updateProcedure\" graphql:\"updateProcedure\""
}

func (t *UpdateProcedure) GetUpdateProcedure() *UpdateProcedure_UpdateProcedure {
	if t == nil {
		t = &UpdateProcedure{}
	}
	return &t.UpdateProcedure
}

type GetAllProcedureHistories struct {
	ProcedureHistories GetAllProcedureHistories_ProcedureHistories "json:\"procedureHistories\" graphql:\"procedureHistories\""
}

func (t *GetAllProcedureHistories) GetProcedureHistories() *GetAllProcedureHistories_ProcedureHistories {
	if t == nil {
		t = &GetAllProcedureHistories{}
	}
	return &t.ProcedureHistories
}

type GetProcedureHistories struct {
	ProcedureHistories GetProcedureHistories_ProcedureHistories "json:\"procedureHistories\" graphql:\"procedureHistories\""
}

func (t *GetProcedureHistories) GetProcedureHistories() *GetProcedureHistories_ProcedureHistories {
	if t == nil {
		t = &GetProcedureHistories{}
	}
	return &t.ProcedureHistories
}

type CreateBulkCSVProgram struct {
	CreateBulkCSVProgram CreateBulkCSVProgram_CreateBulkCSVProgram "json:\"createBulkCSVProgram\" graphql:\"createBulkCSVProgram\""
}

func (t *CreateBulkCSVProgram) GetCreateBulkCSVProgram() *CreateBulkCSVProgram_CreateBulkCSVProgram {
	if t == nil {
		t = &CreateBulkCSVProgram{}
	}
	return &t.CreateBulkCSVProgram
}

type CreateBulkProgram struct {
	CreateBulkProgram CreateBulkProgram_CreateBulkProgram "json:\"createBulkProgram\" graphql:\"createBulkProgram\""
}

func (t *CreateBulkProgram) GetCreateBulkProgram() *CreateBulkProgram_CreateBulkProgram {
	if t == nil {
		t = &CreateBulkProgram{}
	}
	return &t.CreateBulkProgram
}

type CreateProgram struct {
	CreateProgram CreateProgram_CreateProgram "json:\"createProgram\" graphql:\"createProgram\""
}

func (t *CreateProgram) GetCreateProgram() *CreateProgram_CreateProgram {
	if t == nil {
		t = &CreateProgram{}
	}
	return &t.CreateProgram
}

type DeleteProgram struct {
	DeleteProgram DeleteProgram_DeleteProgram "json:\"deleteProgram\" graphql:\"deleteProgram\""
}

func (t *DeleteProgram) GetDeleteProgram() *DeleteProgram_DeleteProgram {
	if t == nil {
		t = &DeleteProgram{}
	}
	return &t.DeleteProgram
}

type GetAllPrograms struct {
	Programs GetAllPrograms_Programs "json:\"programs\" graphql:\"programs\""
}

func (t *GetAllPrograms) GetPrograms() *GetAllPrograms_Programs {
	if t == nil {
		t = &GetAllPrograms{}
	}
	return &t.Programs
}

type GetProgramByID struct {
	Program GetProgramByID_Program "json:\"program\" graphql:\"program\""
}

func (t *GetProgramByID) GetProgram() *GetProgramByID_Program {
	if t == nil {
		t = &GetProgramByID{}
	}
	return &t.Program
}

type GetPrograms struct {
	Programs GetPrograms_Programs "json:\"programs\" graphql:\"programs\""
}

func (t *GetPrograms) GetPrograms() *GetPrograms_Programs {
	if t == nil {
		t = &GetPrograms{}
	}
	return &t.Programs
}

type UpdateProgram struct {
	UpdateProgram UpdateProgram_UpdateProgram "json:\"updateProgram\" graphql:\"updateProgram\""
}

func (t *UpdateProgram) GetUpdateProgram() *UpdateProgram_UpdateProgram {
	if t == nil {
		t = &UpdateProgram{}
	}
	return &t.UpdateProgram
}

type GetAllProgramHistories struct {
	ProgramHistories GetAllProgramHistories_ProgramHistories "json:\"programHistories\" graphql:\"programHistories\""
}

func (t *GetAllProgramHistories) GetProgramHistories() *GetAllProgramHistories_ProgramHistories {
	if t == nil {
		t = &GetAllProgramHistories{}
	}
	return &t.ProgramHistories
}

type GetProgramHistories struct {
	ProgramHistories GetProgramHistories_ProgramHistories "json:\"programHistories\" graphql:\"programHistories\""
}

func (t *GetProgramHistories) GetProgramHistories() *GetProgramHistories_ProgramHistories {
	if t == nil {
		t = &GetProgramHistories{}
	}
	return &t.ProgramHistories
}

type CreateBulkCSVProgramMembership struct {
	CreateBulkCSVProgramMembership CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership "json:\"createBulkCSVProgramMembership\" graphql:\"createBulkCSVProgramMembership\""
}

func (t *CreateBulkCSVProgramMembership) GetCreateBulkCSVProgramMembership() *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership {
	if t == nil {
		t = &CreateBulkCSVProgramMembership{}
	}
	return &t.CreateBulkCSVProgramMembership
}

type CreateBulkProgramMembership struct {
	CreateBulkProgramMembership CreateBulkProgramMembership_CreateBulkProgramMembership "json:\"createBulkProgramMembership\" graphql:\"createBulkProgramMembership\""
}

func (t *CreateBulkProgramMembership) GetCreateBulkProgramMembership() *CreateBulkProgramMembership_CreateBulkProgramMembership {
	if t == nil {
		t = &CreateBulkProgramMembership{}
	}
	return &t.CreateBulkProgramMembership
}

type CreateProgramMembership struct {
	CreateProgramMembership CreateProgramMembership_CreateProgramMembership "json:\"createProgramMembership\" graphql:\"createProgramMembership\""
}

func (t *CreateProgramMembership) GetCreateProgramMembership() *CreateProgramMembership_CreateProgramMembership {
	if t == nil {
		t = &CreateProgramMembership{}
	}
	return &t.CreateProgramMembership
}

type DeleteProgramMembership struct {
	DeleteProgramMembership DeleteProgramMembership_DeleteProgramMembership "json:\"deleteProgramMembership\" graphql:\"deleteProgramMembership\""
}

func (t *DeleteProgramMembership) GetDeleteProgramMembership() *DeleteProgramMembership_DeleteProgramMembership {
	if t == nil {
		t = &DeleteProgramMembership{}
	}
	return &t.DeleteProgramMembership
}

type GetAllProgramMemberships struct {
	ProgramMemberships GetAllProgramMemberships_ProgramMemberships "json:\"programMemberships\" graphql:\"programMemberships\""
}

func (t *GetAllProgramMemberships) GetProgramMemberships() *GetAllProgramMemberships_ProgramMemberships {
	if t == nil {
		t = &GetAllProgramMemberships{}
	}
	return &t.ProgramMemberships
}

type GetProgramMembershipByID struct {
	ProgramMembership GetProgramMembershipByID_ProgramMembership "json:\"programMembership\" graphql:\"programMembership\""
}

func (t *GetProgramMembershipByID) GetProgramMembership() *GetProgramMembershipByID_ProgramMembership {
	if t == nil {
		t = &GetProgramMembershipByID{}
	}
	return &t.ProgramMembership
}

type GetProgramMemberships struct {
	ProgramMemberships GetProgramMemberships_ProgramMemberships "json:\"programMemberships\" graphql:\"programMemberships\""
}

func (t *GetProgramMemberships) GetProgramMemberships() *GetProgramMemberships_ProgramMemberships {
	if t == nil {
		t = &GetProgramMemberships{}
	}
	return &t.ProgramMemberships
}

type UpdateProgramMembership struct {
	UpdateProgramMembership UpdateProgramMembership_UpdateProgramMembership "json:\"updateProgramMembership\" graphql:\"updateProgramMembership\""
}

func (t *UpdateProgramMembership) GetUpdateProgramMembership() *UpdateProgramMembership_UpdateProgramMembership {
	if t == nil {
		t = &UpdateProgramMembership{}
	}
	return &t.UpdateProgramMembership
}

type GetAllProgramMembershipHistories struct {
	ProgramMembershipHistories GetAllProgramMembershipHistories_ProgramMembershipHistories "json:\"programMembershipHistories\" graphql:\"programMembershipHistories\""
}

func (t *GetAllProgramMembershipHistories) GetProgramMembershipHistories() *GetAllProgramMembershipHistories_ProgramMembershipHistories {
	if t == nil {
		t = &GetAllProgramMembershipHistories{}
	}
	return &t.ProgramMembershipHistories
}

type GetProgramMembershipHistories struct {
	ProgramMembershipHistories GetProgramMembershipHistories_ProgramMembershipHistories "json:\"programMembershipHistories\" graphql:\"programMembershipHistories\""
}

func (t *GetProgramMembershipHistories) GetProgramMembershipHistories() *GetProgramMembershipHistories_ProgramMembershipHistories {
	if t == nil {
		t = &GetProgramMembershipHistories{}
	}
	return &t.ProgramMembershipHistories
}

type CreateBulkCSVRisk struct {
	CreateBulkCSVRisk CreateBulkCSVRisk_CreateBulkCSVRisk "json:\"createBulkCSVRisk\" graphql:\"createBulkCSVRisk\""
}

func (t *CreateBulkCSVRisk) GetCreateBulkCSVRisk() *CreateBulkCSVRisk_CreateBulkCSVRisk {
	if t == nil {
		t = &CreateBulkCSVRisk{}
	}
	return &t.CreateBulkCSVRisk
}

type CreateBulkRisk struct {
	CreateBulkRisk CreateBulkRisk_CreateBulkRisk "json:\"createBulkRisk\" graphql:\"createBulkRisk\""
}

func (t *CreateBulkRisk) GetCreateBulkRisk() *CreateBulkRisk_CreateBulkRisk {
	if t == nil {
		t = &CreateBulkRisk{}
	}
	return &t.CreateBulkRisk
}

type CreateRisk struct {
	CreateRisk CreateRisk_CreateRisk "json:\"createRisk\" graphql:\"createRisk\""
}

func (t *CreateRisk) GetCreateRisk() *CreateRisk_CreateRisk {
	if t == nil {
		t = &CreateRisk{}
	}
	return &t.CreateRisk
}

type DeleteRisk struct {
	DeleteRisk DeleteRisk_DeleteRisk "json:\"deleteRisk\" graphql:\"deleteRisk\""
}

func (t *DeleteRisk) GetDeleteRisk() *DeleteRisk_DeleteRisk {
	if t == nil {
		t = &DeleteRisk{}
	}
	return &t.DeleteRisk
}

type GetAllRisks struct {
	Risks GetAllRisks_Risks "json:\"risks\" graphql:\"risks\""
}

func (t *GetAllRisks) GetRisks() *GetAllRisks_Risks {
	if t == nil {
		t = &GetAllRisks{}
	}
	return &t.Risks
}

type GetRiskByID struct {
	Risk GetRiskByID_Risk "json:\"risk\" graphql:\"risk\""
}

func (t *GetRiskByID) GetRisk() *GetRiskByID_Risk {
	if t == nil {
		t = &GetRiskByID{}
	}
	return &t.Risk
}

type GetRisks struct {
	Risks GetRisks_Risks "json:\"risks\" graphql:\"risks\""
}

func (t *GetRisks) GetRisks() *GetRisks_Risks {
	if t == nil {
		t = &GetRisks{}
	}
	return &t.Risks
}

type UpdateRisk struct {
	UpdateRisk UpdateRisk_UpdateRisk "json:\"updateRisk\" graphql:\"updateRisk\""
}

func (t *UpdateRisk) GetUpdateRisk() *UpdateRisk_UpdateRisk {
	if t == nil {
		t = &UpdateRisk{}
	}
	return &t.UpdateRisk
}

type GetAllRiskHistories struct {
	RiskHistories GetAllRiskHistories_RiskHistories "json:\"riskHistories\" graphql:\"riskHistories\""
}

func (t *GetAllRiskHistories) GetRiskHistories() *GetAllRiskHistories_RiskHistories {
	if t == nil {
		t = &GetAllRiskHistories{}
	}
	return &t.RiskHistories
}

type GetRiskHistories struct {
	RiskHistories GetRiskHistories_RiskHistories "json:\"riskHistories\" graphql:\"riskHistories\""
}

func (t *GetRiskHistories) GetRiskHistories() *GetRiskHistories_RiskHistories {
	if t == nil {
		t = &GetRiskHistories{}
	}
	return &t.RiskHistories
}

type CreateBulkCSVScan struct {
	CreateBulkCSVScan CreateBulkCSVScan_CreateBulkCSVScan "json:\"createBulkCSVScan\" graphql:\"createBulkCSVScan\""
}

func (t *CreateBulkCSVScan) GetCreateBulkCSVScan() *CreateBulkCSVScan_CreateBulkCSVScan {
	if t == nil {
		t = &CreateBulkCSVScan{}
	}
	return &t.CreateBulkCSVScan
}

type CreateBulkScan struct {
	CreateBulkScan CreateBulkScan_CreateBulkScan "json:\"createBulkScan\" graphql:\"createBulkScan\""
}

func (t *CreateBulkScan) GetCreateBulkScan() *CreateBulkScan_CreateBulkScan {
	if t == nil {
		t = &CreateBulkScan{}
	}
	return &t.CreateBulkScan
}

type CreateScan struct {
	CreateScan CreateScan_CreateScan "json:\"createScan\" graphql:\"createScan\""
}

func (t *CreateScan) GetCreateScan() *CreateScan_CreateScan {
	if t == nil {
		t = &CreateScan{}
	}
	return &t.CreateScan
}

type DeleteScan struct {
	DeleteScan DeleteScan_DeleteScan "json:\"deleteScan\" graphql:\"deleteScan\""
}

func (t *DeleteScan) GetDeleteScan() *DeleteScan_DeleteScan {
	if t == nil {
		t = &DeleteScan{}
	}
	return &t.DeleteScan
}

type GetAllScans struct {
	Scans GetAllScans_Scans "json:\"scans\" graphql:\"scans\""
}

func (t *GetAllScans) GetScans() *GetAllScans_Scans {
	if t == nil {
		t = &GetAllScans{}
	}
	return &t.Scans
}

type GetScanByID struct {
	Scan GetScanByID_Scan "json:\"scan\" graphql:\"scan\""
}

func (t *GetScanByID) GetScan() *GetScanByID_Scan {
	if t == nil {
		t = &GetScanByID{}
	}
	return &t.Scan
}

type GetScans struct {
	Scans GetScans_Scans "json:\"scans\" graphql:\"scans\""
}

func (t *GetScans) GetScans() *GetScans_Scans {
	if t == nil {
		t = &GetScans{}
	}
	return &t.Scans
}

type UpdateScan struct {
	UpdateScan UpdateScan_UpdateScan "json:\"updateScan\" graphql:\"updateScan\""
}

func (t *UpdateScan) GetUpdateScan() *UpdateScan_UpdateScan {
	if t == nil {
		t = &UpdateScan{}
	}
	return &t.UpdateScan
}

type GetAllScanHistories struct {
	ScanHistories GetAllScanHistories_ScanHistories "json:\"scanHistories\" graphql:\"scanHistories\""
}

func (t *GetAllScanHistories) GetScanHistories() *GetAllScanHistories_ScanHistories {
	if t == nil {
		t = &GetAllScanHistories{}
	}
	return &t.ScanHistories
}

type GetScanHistories struct {
	ScanHistories GetScanHistories_ScanHistories "json:\"scanHistories\" graphql:\"scanHistories\""
}

func (t *GetScanHistories) GetScanHistories() *GetScanHistories_ScanHistories {
	if t == nil {
		t = &GetScanHistories{}
	}
	return &t.ScanHistories
}

type CreateBulkCSVScheduledJob struct {
	CreateBulkCSVScheduledJob CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob "json:\"createBulkCSVScheduledJob\" graphql:\"createBulkCSVScheduledJob\""
}

func (t *CreateBulkCSVScheduledJob) GetCreateBulkCSVScheduledJob() *CreateBulkCSVScheduledJob_CreateBulkCSVScheduledJob {
	if t == nil {
		t = &CreateBulkCSVScheduledJob{}
	}
	return &t.CreateBulkCSVScheduledJob
}

type CreateBulkScheduledJob struct {
	CreateBulkScheduledJob CreateBulkScheduledJob_CreateBulkScheduledJob "json:\"createBulkScheduledJob\" graphql:\"createBulkScheduledJob\""
}

func (t *CreateBulkScheduledJob) GetCreateBulkScheduledJob() *CreateBulkScheduledJob_CreateBulkScheduledJob {
	if t == nil {
		t = &CreateBulkScheduledJob{}
	}
	return &t.CreateBulkScheduledJob
}

type CreateScheduledJob struct {
	CreateScheduledJob CreateScheduledJob_CreateScheduledJob "json:\"createScheduledJob\" graphql:\"createScheduledJob\""
}

func (t *CreateScheduledJob) GetCreateScheduledJob() *CreateScheduledJob_CreateScheduledJob {
	if t == nil {
		t = &CreateScheduledJob{}
	}
	return &t.CreateScheduledJob
}

type DeleteScheduledJob struct {
	DeleteScheduledJob DeleteScheduledJob_DeleteScheduledJob "json:\"deleteScheduledJob\" graphql:\"deleteScheduledJob\""
}

func (t *DeleteScheduledJob) GetDeleteScheduledJob() *DeleteScheduledJob_DeleteScheduledJob {
	if t == nil {
		t = &DeleteScheduledJob{}
	}
	return &t.DeleteScheduledJob
}

type GetAllScheduledJobs struct {
	ScheduledJobs GetAllScheduledJobs_ScheduledJobs "json:\"scheduledJobs\" graphql:\"scheduledJobs\""
}

func (t *GetAllScheduledJobs) GetScheduledJobs() *GetAllScheduledJobs_ScheduledJobs {
	if t == nil {
		t = &GetAllScheduledJobs{}
	}
	return &t.ScheduledJobs
}

type GetScheduledJobByID struct {
	ScheduledJob GetScheduledJobByID_ScheduledJob "json:\"scheduledJob\" graphql:\"scheduledJob\""
}

func (t *GetScheduledJobByID) GetScheduledJob() *GetScheduledJobByID_ScheduledJob {
	if t == nil {
		t = &GetScheduledJobByID{}
	}
	return &t.ScheduledJob
}

type GetScheduledJobs struct {
	ScheduledJobs GetScheduledJobs_ScheduledJobs "json:\"scheduledJobs\" graphql:\"scheduledJobs\""
}

func (t *GetScheduledJobs) GetScheduledJobs() *GetScheduledJobs_ScheduledJobs {
	if t == nil {
		t = &GetScheduledJobs{}
	}
	return &t.ScheduledJobs
}

type UpdateScheduledJob struct {
	UpdateScheduledJob UpdateScheduledJob_UpdateScheduledJob "json:\"updateScheduledJob\" graphql:\"updateScheduledJob\""
}

func (t *UpdateScheduledJob) GetUpdateScheduledJob() *UpdateScheduledJob_UpdateScheduledJob {
	if t == nil {
		t = &UpdateScheduledJob{}
	}
	return &t.UpdateScheduledJob
}

type GetAllScheduledJobHistories struct {
	ScheduledJobHistories GetAllScheduledJobHistories_ScheduledJobHistories "json:\"scheduledJobHistories\" graphql:\"scheduledJobHistories\""
}

func (t *GetAllScheduledJobHistories) GetScheduledJobHistories() *GetAllScheduledJobHistories_ScheduledJobHistories {
	if t == nil {
		t = &GetAllScheduledJobHistories{}
	}
	return &t.ScheduledJobHistories
}

type GetScheduledJobHistories struct {
	ScheduledJobHistories GetScheduledJobHistories_ScheduledJobHistories "json:\"scheduledJobHistories\" graphql:\"scheduledJobHistories\""
}

func (t *GetScheduledJobHistories) GetScheduledJobHistories() *GetScheduledJobHistories_ScheduledJobHistories {
	if t == nil {
		t = &GetScheduledJobHistories{}
	}
	return &t.ScheduledJobHistories
}

type CreateScheduledJobRun struct {
	CreateScheduledJobRun CreateScheduledJobRun_CreateScheduledJobRun "json:\"createScheduledJobRun\" graphql:\"createScheduledJobRun\""
}

func (t *CreateScheduledJobRun) GetCreateScheduledJobRun() *CreateScheduledJobRun_CreateScheduledJobRun {
	if t == nil {
		t = &CreateScheduledJobRun{}
	}
	return &t.CreateScheduledJobRun
}

type DeleteScheduledJobRun struct {
	DeleteScheduledJobRun DeleteScheduledJobRun_DeleteScheduledJobRun "json:\"deleteScheduledJobRun\" graphql:\"deleteScheduledJobRun\""
}

func (t *DeleteScheduledJobRun) GetDeleteScheduledJobRun() *DeleteScheduledJobRun_DeleteScheduledJobRun {
	if t == nil {
		t = &DeleteScheduledJobRun{}
	}
	return &t.DeleteScheduledJobRun
}

type GetAllScheduledJobRuns struct {
	ScheduledJobRuns GetAllScheduledJobRuns_ScheduledJobRuns "json:\"scheduledJobRuns\" graphql:\"scheduledJobRuns\""
}

func (t *GetAllScheduledJobRuns) GetScheduledJobRuns() *GetAllScheduledJobRuns_ScheduledJobRuns {
	if t == nil {
		t = &GetAllScheduledJobRuns{}
	}
	return &t.ScheduledJobRuns
}

type GetScheduledJobRunByID struct {
	ScheduledJobRun GetScheduledJobRunByID_ScheduledJobRun "json:\"scheduledJobRun\" graphql:\"scheduledJobRun\""
}

func (t *GetScheduledJobRunByID) GetScheduledJobRun() *GetScheduledJobRunByID_ScheduledJobRun {
	if t == nil {
		t = &GetScheduledJobRunByID{}
	}
	return &t.ScheduledJobRun
}

type GetScheduledJobRuns struct {
	ScheduledJobRuns GetScheduledJobRuns_ScheduledJobRuns "json:\"scheduledJobRuns\" graphql:\"scheduledJobRuns\""
}

func (t *GetScheduledJobRuns) GetScheduledJobRuns() *GetScheduledJobRuns_ScheduledJobRuns {
	if t == nil {
		t = &GetScheduledJobRuns{}
	}
	return &t.ScheduledJobRuns
}

type UpdateScheduledJobRun struct {
	UpdateScheduledJobRun UpdateScheduledJobRun_UpdateScheduledJobRun "json:\"updateScheduledJobRun\" graphql:\"updateScheduledJobRun\""
}

func (t *UpdateScheduledJobRun) GetUpdateScheduledJobRun() *UpdateScheduledJobRun_UpdateScheduledJobRun {
	if t == nil {
		t = &UpdateScheduledJobRun{}
	}
	return &t.UpdateScheduledJobRun
}

type GlobalSearch struct {
	Search *GlobalSearch_Search "json:\"search,omitempty\" graphql:\"search\""
}

func (t *GlobalSearch) GetSearch() *GlobalSearch_Search {
	if t == nil {
		t = &GlobalSearch{}
	}
	return t.Search
}

type CreateStandard struct {
	CreateStandard CreateStandard_CreateStandard "json:\"createStandard\" graphql:\"createStandard\""
}

func (t *CreateStandard) GetCreateStandard() *CreateStandard_CreateStandard {
	if t == nil {
		t = &CreateStandard{}
	}
	return &t.CreateStandard
}

type DeleteStandard struct {
	DeleteStandard DeleteStandard_DeleteStandard "json:\"deleteStandard\" graphql:\"deleteStandard\""
}

func (t *DeleteStandard) GetDeleteStandard() *DeleteStandard_DeleteStandard {
	if t == nil {
		t = &DeleteStandard{}
	}
	return &t.DeleteStandard
}

type GetAllStandards struct {
	Standards GetAllStandards_Standards "json:\"standards\" graphql:\"standards\""
}

func (t *GetAllStandards) GetStandards() *GetAllStandards_Standards {
	if t == nil {
		t = &GetAllStandards{}
	}
	return &t.Standards
}

type GetStandardByID struct {
	Standard GetStandardByID_Standard "json:\"standard\" graphql:\"standard\""
}

func (t *GetStandardByID) GetStandard() *GetStandardByID_Standard {
	if t == nil {
		t = &GetStandardByID{}
	}
	return &t.Standard
}

type GetStandards struct {
	Standards GetStandards_Standards "json:\"standards\" graphql:\"standards\""
}

func (t *GetStandards) GetStandards() *GetStandards_Standards {
	if t == nil {
		t = &GetStandards{}
	}
	return &t.Standards
}

type UpdateStandard struct {
	UpdateStandard UpdateStandard_UpdateStandard "json:\"updateStandard\" graphql:\"updateStandard\""
}

func (t *UpdateStandard) GetUpdateStandard() *UpdateStandard_UpdateStandard {
	if t == nil {
		t = &UpdateStandard{}
	}
	return &t.UpdateStandard
}

type GetAllStandardHistories struct {
	StandardHistories GetAllStandardHistories_StandardHistories "json:\"standardHistories\" graphql:\"standardHistories\""
}

func (t *GetAllStandardHistories) GetStandardHistories() *GetAllStandardHistories_StandardHistories {
	if t == nil {
		t = &GetAllStandardHistories{}
	}
	return &t.StandardHistories
}

type GetStandardHistories struct {
	StandardHistories GetStandardHistories_StandardHistories "json:\"standardHistories\" graphql:\"standardHistories\""
}

func (t *GetStandardHistories) GetStandardHistories() *GetStandardHistories_StandardHistories {
	if t == nil {
		t = &GetStandardHistories{}
	}
	return &t.StandardHistories
}

type CreateBulkCSVSubcontrol struct {
	CreateBulkCSVSubcontrol CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol "json:\"createBulkCSVSubcontrol\" graphql:\"createBulkCSVSubcontrol\""
}

func (t *CreateBulkCSVSubcontrol) GetCreateBulkCSVSubcontrol() *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol {
	if t == nil {
		t = &CreateBulkCSVSubcontrol{}
	}
	return &t.CreateBulkCSVSubcontrol
}

type CreateBulkSubcontrol struct {
	CreateBulkSubcontrol CreateBulkSubcontrol_CreateBulkSubcontrol "json:\"createBulkSubcontrol\" graphql:\"createBulkSubcontrol\""
}

func (t *CreateBulkSubcontrol) GetCreateBulkSubcontrol() *CreateBulkSubcontrol_CreateBulkSubcontrol {
	if t == nil {
		t = &CreateBulkSubcontrol{}
	}
	return &t.CreateBulkSubcontrol
}

type CreateSubcontrol struct {
	CreateSubcontrol CreateSubcontrol_CreateSubcontrol "json:\"createSubcontrol\" graphql:\"createSubcontrol\""
}

func (t *CreateSubcontrol) GetCreateSubcontrol() *CreateSubcontrol_CreateSubcontrol {
	if t == nil {
		t = &CreateSubcontrol{}
	}
	return &t.CreateSubcontrol
}

type DeleteSubcontrol struct {
	DeleteSubcontrol DeleteSubcontrol_DeleteSubcontrol "json:\"deleteSubcontrol\" graphql:\"deleteSubcontrol\""
}

func (t *DeleteSubcontrol) GetDeleteSubcontrol() *DeleteSubcontrol_DeleteSubcontrol {
	if t == nil {
		t = &DeleteSubcontrol{}
	}
	return &t.DeleteSubcontrol
}

type GetAllSubcontrols struct {
	Subcontrols GetAllSubcontrols_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
}

func (t *GetAllSubcontrols) GetSubcontrols() *GetAllSubcontrols_Subcontrols {
	if t == nil {
		t = &GetAllSubcontrols{}
	}
	return &t.Subcontrols
}

type GetSubcontrolByID struct {
	Subcontrol GetSubcontrolByID_Subcontrol "json:\"subcontrol\" graphql:\"subcontrol\""
}

func (t *GetSubcontrolByID) GetSubcontrol() *GetSubcontrolByID_Subcontrol {
	if t == nil {
		t = &GetSubcontrolByID{}
	}
	return &t.Subcontrol
}

type GetSubcontrols struct {
	Subcontrols GetSubcontrols_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
}

func (t *GetSubcontrols) GetSubcontrols() *GetSubcontrols_Subcontrols {
	if t == nil {
		t = &GetSubcontrols{}
	}
	return &t.Subcontrols
}

type UpdateSubcontrol struct {
	UpdateSubcontrol UpdateSubcontrol_UpdateSubcontrol "json:\"updateSubcontrol\" graphql:\"updateSubcontrol\""
}

func (t *UpdateSubcontrol) GetUpdateSubcontrol() *UpdateSubcontrol_UpdateSubcontrol {
	if t == nil {
		t = &UpdateSubcontrol{}
	}
	return &t.UpdateSubcontrol
}

type GetAllSubcontrolHistories struct {
	SubcontrolHistories GetAllSubcontrolHistories_SubcontrolHistories "json:\"subcontrolHistories\" graphql:\"subcontrolHistories\""
}

func (t *GetAllSubcontrolHistories) GetSubcontrolHistories() *GetAllSubcontrolHistories_SubcontrolHistories {
	if t == nil {
		t = &GetAllSubcontrolHistories{}
	}
	return &t.SubcontrolHistories
}

type GetSubcontrolHistories struct {
	SubcontrolHistories GetSubcontrolHistories_SubcontrolHistories "json:\"subcontrolHistories\" graphql:\"subcontrolHistories\""
}

func (t *GetSubcontrolHistories) GetSubcontrolHistories() *GetSubcontrolHistories_SubcontrolHistories {
	if t == nil {
		t = &GetSubcontrolHistories{}
	}
	return &t.SubcontrolHistories
}

type CreateSubprocessor struct {
	CreateSubprocessor CreateSubprocessor_CreateSubprocessor "json:\"createSubprocessor\" graphql:\"createSubprocessor\""
}

func (t *CreateSubprocessor) GetCreateSubprocessor() *CreateSubprocessor_CreateSubprocessor {
	if t == nil {
		t = &CreateSubprocessor{}
	}
	return &t.CreateSubprocessor
}

type DeleteSubprocessor struct {
	DeleteSubprocessor DeleteSubprocessor_DeleteSubprocessor "json:\"deleteSubprocessor\" graphql:\"deleteSubprocessor\""
}

func (t *DeleteSubprocessor) GetDeleteSubprocessor() *DeleteSubprocessor_DeleteSubprocessor {
	if t == nil {
		t = &DeleteSubprocessor{}
	}
	return &t.DeleteSubprocessor
}

type GetAllSubprocessors struct {
	Subprocessors GetAllSubprocessors_Subprocessors "json:\"subprocessors\" graphql:\"subprocessors\""
}

func (t *GetAllSubprocessors) GetSubprocessors() *GetAllSubprocessors_Subprocessors {
	if t == nil {
		t = &GetAllSubprocessors{}
	}
	return &t.Subprocessors
}

type GetSubprocessorByID struct {
	Subprocessor GetSubprocessorByID_Subprocessor "json:\"subprocessor\" graphql:\"subprocessor\""
}

func (t *GetSubprocessorByID) GetSubprocessor() *GetSubprocessorByID_Subprocessor {
	if t == nil {
		t = &GetSubprocessorByID{}
	}
	return &t.Subprocessor
}

type GetSubprocessors struct {
	Subprocessors GetSubprocessors_Subprocessors "json:\"subprocessors\" graphql:\"subprocessors\""
}

func (t *GetSubprocessors) GetSubprocessors() *GetSubprocessors_Subprocessors {
	if t == nil {
		t = &GetSubprocessors{}
	}
	return &t.Subprocessors
}

type UpdateSubprocessor struct {
	UpdateSubprocessor UpdateSubprocessor_UpdateSubprocessor "json:\"updateSubprocessor\" graphql:\"updateSubprocessor\""
}

func (t *UpdateSubprocessor) GetUpdateSubprocessor() *UpdateSubprocessor_UpdateSubprocessor {
	if t == nil {
		t = &UpdateSubprocessor{}
	}
	return &t.UpdateSubprocessor
}

type GetAllSubprocessorHistories struct {
	SubprocessorHistories GetAllSubprocessorHistories_SubprocessorHistories "json:\"subprocessorHistories\" graphql:\"subprocessorHistories\""
}

func (t *GetAllSubprocessorHistories) GetSubprocessorHistories() *GetAllSubprocessorHistories_SubprocessorHistories {
	if t == nil {
		t = &GetAllSubprocessorHistories{}
	}
	return &t.SubprocessorHistories
}

type GetSubprocessorHistories struct {
	SubprocessorHistories GetSubprocessorHistories_SubprocessorHistories "json:\"subprocessorHistories\" graphql:\"subprocessorHistories\""
}

func (t *GetSubprocessorHistories) GetSubprocessorHistories() *GetSubprocessorHistories_SubprocessorHistories {
	if t == nil {
		t = &GetSubprocessorHistories{}
	}
	return &t.SubprocessorHistories
}

type CreateBulkCSVSubscriber struct {
	CreateBulkCSVSubscriber CreateBulkCSVSubscriber_CreateBulkCSVSubscriber "json:\"createBulkCSVSubscriber\" graphql:\"createBulkCSVSubscriber\""
}

func (t *CreateBulkCSVSubscriber) GetCreateBulkCSVSubscriber() *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber {
	if t == nil {
		t = &CreateBulkCSVSubscriber{}
	}
	return &t.CreateBulkCSVSubscriber
}

type CreateBulkSubscriber struct {
	CreateBulkSubscriber CreateBulkSubscriber_CreateBulkSubscriber "json:\"createBulkSubscriber\" graphql:\"createBulkSubscriber\""
}

func (t *CreateBulkSubscriber) GetCreateBulkSubscriber() *CreateBulkSubscriber_CreateBulkSubscriber {
	if t == nil {
		t = &CreateBulkSubscriber{}
	}
	return &t.CreateBulkSubscriber
}

type CreateSubscriber struct {
	CreateSubscriber CreateSubscriber_CreateSubscriber "json:\"createSubscriber\" graphql:\"createSubscriber\""
}

func (t *CreateSubscriber) GetCreateSubscriber() *CreateSubscriber_CreateSubscriber {
	if t == nil {
		t = &CreateSubscriber{}
	}
	return &t.CreateSubscriber
}

type DeleteSubscriber struct {
	DeleteSubscriber DeleteSubscriber_DeleteSubscriber "json:\"deleteSubscriber\" graphql:\"deleteSubscriber\""
}

func (t *DeleteSubscriber) GetDeleteSubscriber() *DeleteSubscriber_DeleteSubscriber {
	if t == nil {
		t = &DeleteSubscriber{}
	}
	return &t.DeleteSubscriber
}

type GetAllSubscribers struct {
	Subscribers GetAllSubscribers_Subscribers "json:\"subscribers\" graphql:\"subscribers\""
}

func (t *GetAllSubscribers) GetSubscribers() *GetAllSubscribers_Subscribers {
	if t == nil {
		t = &GetAllSubscribers{}
	}
	return &t.Subscribers
}

type GetSubscriberByEmail struct {
	Subscriber GetSubscriberByEmail_Subscriber "json:\"subscriber\" graphql:\"subscriber\""
}

func (t *GetSubscriberByEmail) GetSubscriber() *GetSubscriberByEmail_Subscriber {
	if t == nil {
		t = &GetSubscriberByEmail{}
	}
	return &t.Subscriber
}

type GetSubscribers struct {
	Subscribers GetSubscribers_Subscribers "json:\"subscribers\" graphql:\"subscribers\""
}

func (t *GetSubscribers) GetSubscribers() *GetSubscribers_Subscribers {
	if t == nil {
		t = &GetSubscribers{}
	}
	return &t.Subscribers
}

type UpdateSubscriber struct {
	UpdateSubscriber UpdateSubscriber_UpdateSubscriber "json:\"updateSubscriber\" graphql:\"updateSubscriber\""
}

func (t *UpdateSubscriber) GetUpdateSubscriber() *UpdateSubscriber_UpdateSubscriber {
	if t == nil {
		t = &UpdateSubscriber{}
	}
	return &t.UpdateSubscriber
}

type CreateBulkCSVTask struct {
	CreateBulkCSVTask CreateBulkCSVTask_CreateBulkCSVTask "json:\"createBulkCSVTask\" graphql:\"createBulkCSVTask\""
}

func (t *CreateBulkCSVTask) GetCreateBulkCSVTask() *CreateBulkCSVTask_CreateBulkCSVTask {
	if t == nil {
		t = &CreateBulkCSVTask{}
	}
	return &t.CreateBulkCSVTask
}

type CreateBulkTask struct {
	CreateBulkTask CreateBulkTask_CreateBulkTask "json:\"createBulkTask\" graphql:\"createBulkTask\""
}

func (t *CreateBulkTask) GetCreateBulkTask() *CreateBulkTask_CreateBulkTask {
	if t == nil {
		t = &CreateBulkTask{}
	}
	return &t.CreateBulkTask
}

type CreateTask struct {
	CreateTask CreateTask_CreateTask "json:\"createTask\" graphql:\"createTask\""
}

func (t *CreateTask) GetCreateTask() *CreateTask_CreateTask {
	if t == nil {
		t = &CreateTask{}
	}
	return &t.CreateTask
}

type DeleteTask struct {
	DeleteTask DeleteTask_DeleteTask "json:\"deleteTask\" graphql:\"deleteTask\""
}

func (t *DeleteTask) GetDeleteTask() *DeleteTask_DeleteTask {
	if t == nil {
		t = &DeleteTask{}
	}
	return &t.DeleteTask
}

type GetAllTasks struct {
	Tasks GetAllTasks_Tasks "json:\"tasks\" graphql:\"tasks\""
}

func (t *GetAllTasks) GetTasks() *GetAllTasks_Tasks {
	if t == nil {
		t = &GetAllTasks{}
	}
	return &t.Tasks
}

type GetTaskByID struct {
	Task GetTaskByID_Task "json:\"task\" graphql:\"task\""
}

func (t *GetTaskByID) GetTask() *GetTaskByID_Task {
	if t == nil {
		t = &GetTaskByID{}
	}
	return &t.Task
}

type GetTasks struct {
	Tasks GetTasks_Tasks "json:\"tasks\" graphql:\"tasks\""
}

func (t *GetTasks) GetTasks() *GetTasks_Tasks {
	if t == nil {
		t = &GetTasks{}
	}
	return &t.Tasks
}

type UpdateTask struct {
	UpdateTask UpdateTask_UpdateTask "json:\"updateTask\" graphql:\"updateTask\""
}

func (t *UpdateTask) GetUpdateTask() *UpdateTask_UpdateTask {
	if t == nil {
		t = &UpdateTask{}
	}
	return &t.UpdateTask
}

type GetAllTaskHistories struct {
	TaskHistories GetAllTaskHistories_TaskHistories "json:\"taskHistories\" graphql:\"taskHistories\""
}

func (t *GetAllTaskHistories) GetTaskHistories() *GetAllTaskHistories_TaskHistories {
	if t == nil {
		t = &GetAllTaskHistories{}
	}
	return &t.TaskHistories
}

type GetTaskHistories struct {
	TaskHistories GetTaskHistories_TaskHistories "json:\"taskHistories\" graphql:\"taskHistories\""
}

func (t *GetTaskHistories) GetTaskHistories() *GetTaskHistories_TaskHistories {
	if t == nil {
		t = &GetTaskHistories{}
	}
	return &t.TaskHistories
}

type CreateBulkCSVTemplate struct {
	CreateBulkCSVTemplate CreateBulkCSVTemplate_CreateBulkCSVTemplate "json:\"createBulkCSVTemplate\" graphql:\"createBulkCSVTemplate\""
}

func (t *CreateBulkCSVTemplate) GetCreateBulkCSVTemplate() *CreateBulkCSVTemplate_CreateBulkCSVTemplate {
	if t == nil {
		t = &CreateBulkCSVTemplate{}
	}
	return &t.CreateBulkCSVTemplate
}

type CreateBulkTemplate struct {
	CreateBulkTemplate CreateBulkTemplate_CreateBulkTemplate "json:\"createBulkTemplate\" graphql:\"createBulkTemplate\""
}

func (t *CreateBulkTemplate) GetCreateBulkTemplate() *CreateBulkTemplate_CreateBulkTemplate {
	if t == nil {
		t = &CreateBulkTemplate{}
	}
	return &t.CreateBulkTemplate
}

type CreateTemplate struct {
	CreateTemplate CreateTemplate_CreateTemplate "json:\"createTemplate\" graphql:\"createTemplate\""
}

func (t *CreateTemplate) GetCreateTemplate() *CreateTemplate_CreateTemplate {
	if t == nil {
		t = &CreateTemplate{}
	}
	return &t.CreateTemplate
}

type DeleteTemplate struct {
	DeleteTemplate DeleteTemplate_DeleteTemplate "json:\"deleteTemplate\" graphql:\"deleteTemplate\""
}

func (t *DeleteTemplate) GetDeleteTemplate() *DeleteTemplate_DeleteTemplate {
	if t == nil {
		t = &DeleteTemplate{}
	}
	return &t.DeleteTemplate
}

type GetAllTemplates struct {
	Templates GetAllTemplates_Templates "json:\"templates\" graphql:\"templates\""
}

func (t *GetAllTemplates) GetTemplates() *GetAllTemplates_Templates {
	if t == nil {
		t = &GetAllTemplates{}
	}
	return &t.Templates
}

type GetTemplateByID struct {
	Template GetTemplateByID_Template "json:\"template\" graphql:\"template\""
}

func (t *GetTemplateByID) GetTemplate() *GetTemplateByID_Template {
	if t == nil {
		t = &GetTemplateByID{}
	}
	return &t.Template
}

type GetTemplates struct {
	Templates GetTemplates_Templates "json:\"templates\" graphql:\"templates\""
}

func (t *GetTemplates) GetTemplates() *GetTemplates_Templates {
	if t == nil {
		t = &GetTemplates{}
	}
	return &t.Templates
}

type UpdateTemplate struct {
	UpdateTemplate UpdateTemplate_UpdateTemplate "json:\"updateTemplate\" graphql:\"updateTemplate\""
}

func (t *UpdateTemplate) GetUpdateTemplate() *UpdateTemplate_UpdateTemplate {
	if t == nil {
		t = &UpdateTemplate{}
	}
	return &t.UpdateTemplate
}

type GetAllTemplateHistories struct {
	TemplateHistories GetAllTemplateHistories_TemplateHistories "json:\"templateHistories\" graphql:\"templateHistories\""
}

func (t *GetAllTemplateHistories) GetTemplateHistories() *GetAllTemplateHistories_TemplateHistories {
	if t == nil {
		t = &GetAllTemplateHistories{}
	}
	return &t.TemplateHistories
}

type GetTemplateHistories struct {
	TemplateHistories GetTemplateHistories_TemplateHistories "json:\"templateHistories\" graphql:\"templateHistories\""
}

func (t *GetTemplateHistories) GetTemplateHistories() *GetTemplateHistories_TemplateHistories {
	if t == nil {
		t = &GetTemplateHistories{}
	}
	return &t.TemplateHistories
}

type CreateTFASetting struct {
	CreateTFASetting CreateTFASetting_CreateTFASetting "json:\"createTFASetting\" graphql:\"createTFASetting\""
}

func (t *CreateTFASetting) GetCreateTFASetting() *CreateTFASetting_CreateTFASetting {
	if t == nil {
		t = &CreateTFASetting{}
	}
	return &t.CreateTFASetting
}

type GetAllTFASettings struct {
	TfaSettings GetAllTFASettings_TfaSettings "json:\"tfaSettings\" graphql:\"tfaSettings\""
}

func (t *GetAllTFASettings) GetTfaSettings() *GetAllTFASettings_TfaSettings {
	if t == nil {
		t = &GetAllTFASettings{}
	}
	return &t.TfaSettings
}

type GetTFASettingByID struct {
	TfaSetting GetTFASettingByID_TfaSetting "json:\"tfaSetting\" graphql:\"tfaSetting\""
}

func (t *GetTFASettingByID) GetTfaSetting() *GetTFASettingByID_TfaSetting {
	if t == nil {
		t = &GetTFASettingByID{}
	}
	return &t.TfaSetting
}

type GetTFASettings struct {
	TfaSettings GetTFASettings_TfaSettings "json:\"tfaSettings\" graphql:\"tfaSettings\""
}

func (t *GetTFASettings) GetTfaSettings() *GetTFASettings_TfaSettings {
	if t == nil {
		t = &GetTFASettings{}
	}
	return &t.TfaSettings
}

type UpdateTFASetting struct {
	UpdateTFASetting UpdateTFASetting_UpdateTFASetting "json:\"updateTFASetting\" graphql:\"updateTFASetting\""
}

func (t *UpdateTFASetting) GetUpdateTFASetting() *UpdateTFASetting_UpdateTFASetting {
	if t == nil {
		t = &UpdateTFASetting{}
	}
	return &t.UpdateTFASetting
}

type CreateTrustCenter struct {
	CreateTrustCenter CreateTrustCenter_CreateTrustCenter "json:\"createTrustCenter\" graphql:\"createTrustCenter\""
}

func (t *CreateTrustCenter) GetCreateTrustCenter() *CreateTrustCenter_CreateTrustCenter {
	if t == nil {
		t = &CreateTrustCenter{}
	}
	return &t.CreateTrustCenter
}

type DeleteTrustCenter struct {
	DeleteTrustCenter DeleteTrustCenter_DeleteTrustCenter "json:\"deleteTrustCenter\" graphql:\"deleteTrustCenter\""
}

func (t *DeleteTrustCenter) GetDeleteTrustCenter() *DeleteTrustCenter_DeleteTrustCenter {
	if t == nil {
		t = &DeleteTrustCenter{}
	}
	return &t.DeleteTrustCenter
}

type GetAllTrustCenters struct {
	TrustCenters GetAllTrustCenters_TrustCenters "json:\"trustCenters\" graphql:\"trustCenters\""
}

func (t *GetAllTrustCenters) GetTrustCenters() *GetAllTrustCenters_TrustCenters {
	if t == nil {
		t = &GetAllTrustCenters{}
	}
	return &t.TrustCenters
}

type GetTrustCenterByID struct {
	TrustCenter GetTrustCenterByID_TrustCenter "json:\"trustCenter\" graphql:\"trustCenter\""
}

func (t *GetTrustCenterByID) GetTrustCenter() *GetTrustCenterByID_TrustCenter {
	if t == nil {
		t = &GetTrustCenterByID{}
	}
	return &t.TrustCenter
}

type GetTrustCenters struct {
	TrustCenters GetTrustCenters_TrustCenters "json:\"trustCenters\" graphql:\"trustCenters\""
}

func (t *GetTrustCenters) GetTrustCenters() *GetTrustCenters_TrustCenters {
	if t == nil {
		t = &GetTrustCenters{}
	}
	return &t.TrustCenters
}

type UpdateTrustCenter struct {
	UpdateTrustCenter UpdateTrustCenter_UpdateTrustCenter "json:\"updateTrustCenter\" graphql:\"updateTrustCenter\""
}

func (t *UpdateTrustCenter) GetUpdateTrustCenter() *UpdateTrustCenter_UpdateTrustCenter {
	if t == nil {
		t = &UpdateTrustCenter{}
	}
	return &t.UpdateTrustCenter
}

type CreateBulkCSVTrustCenterCompliance struct {
	CreateBulkCSVTrustCenterCompliance CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance "json:\"createBulkCSVTrustCenterCompliance\" graphql:\"createBulkCSVTrustCenterCompliance\""
}

func (t *CreateBulkCSVTrustCenterCompliance) GetCreateBulkCSVTrustCenterCompliance() *CreateBulkCSVTrustCenterCompliance_CreateBulkCSVTrustCenterCompliance {
	if t == nil {
		t = &CreateBulkCSVTrustCenterCompliance{}
	}
	return &t.CreateBulkCSVTrustCenterCompliance
}

type CreateBulkTrustCenterCompliance struct {
	CreateBulkTrustCenterCompliance CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance "json:\"createBulkTrustCenterCompliance\" graphql:\"createBulkTrustCenterCompliance\""
}

func (t *CreateBulkTrustCenterCompliance) GetCreateBulkTrustCenterCompliance() *CreateBulkTrustCenterCompliance_CreateBulkTrustCenterCompliance {
	if t == nil {
		t = &CreateBulkTrustCenterCompliance{}
	}
	return &t.CreateBulkTrustCenterCompliance
}

type CreateTrustCenterCompliance struct {
	CreateTrustCenterCompliance CreateTrustCenterCompliance_CreateTrustCenterCompliance "json:\"createTrustCenterCompliance\" graphql:\"createTrustCenterCompliance\""
}

func (t *CreateTrustCenterCompliance) GetCreateTrustCenterCompliance() *CreateTrustCenterCompliance_CreateTrustCenterCompliance {
	if t == nil {
		t = &CreateTrustCenterCompliance{}
	}
	return &t.CreateTrustCenterCompliance
}

type DeleteTrustCenterCompliance struct {
	DeleteTrustCenterCompliance DeleteTrustCenterCompliance_DeleteTrustCenterCompliance "json:\"deleteTrustCenterCompliance\" graphql:\"deleteTrustCenterCompliance\""
}

func (t *DeleteTrustCenterCompliance) GetDeleteTrustCenterCompliance() *DeleteTrustCenterCompliance_DeleteTrustCenterCompliance {
	if t == nil {
		t = &DeleteTrustCenterCompliance{}
	}
	return &t.DeleteTrustCenterCompliance
}

type GetAllTrustCenterCompliances struct {
	TrustCenterCompliances GetAllTrustCenterCompliances_TrustCenterCompliances "json:\"trustCenterCompliances\" graphql:\"trustCenterCompliances\""
}

func (t *GetAllTrustCenterCompliances) GetTrustCenterCompliances() *GetAllTrustCenterCompliances_TrustCenterCompliances {
	if t == nil {
		t = &GetAllTrustCenterCompliances{}
	}
	return &t.TrustCenterCompliances
}

type GetTrustCenterComplianceByID struct {
	TrustCenterCompliance GetTrustCenterComplianceByID_TrustCenterCompliance "json:\"trustCenterCompliance\" graphql:\"trustCenterCompliance\""
}

func (t *GetTrustCenterComplianceByID) GetTrustCenterCompliance() *GetTrustCenterComplianceByID_TrustCenterCompliance {
	if t == nil {
		t = &GetTrustCenterComplianceByID{}
	}
	return &t.TrustCenterCompliance
}

type GetTrustCenterCompliances struct {
	TrustCenterCompliances GetTrustCenterCompliances_TrustCenterCompliances "json:\"trustCenterCompliances\" graphql:\"trustCenterCompliances\""
}

func (t *GetTrustCenterCompliances) GetTrustCenterCompliances() *GetTrustCenterCompliances_TrustCenterCompliances {
	if t == nil {
		t = &GetTrustCenterCompliances{}
	}
	return &t.TrustCenterCompliances
}

type UpdateTrustCenterCompliance struct {
	UpdateTrustCenterCompliance UpdateTrustCenterCompliance_UpdateTrustCenterCompliance "json:\"updateTrustCenterCompliance\" graphql:\"updateTrustCenterCompliance\""
}

func (t *UpdateTrustCenterCompliance) GetUpdateTrustCenterCompliance() *UpdateTrustCenterCompliance_UpdateTrustCenterCompliance {
	if t == nil {
		t = &UpdateTrustCenterCompliance{}
	}
	return &t.UpdateTrustCenterCompliance
}

type GetAllTrustCenterComplianceHistories struct {
	TrustCenterComplianceHistories GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories "json:\"trustCenterComplianceHistories\" graphql:\"trustCenterComplianceHistories\""
}

func (t *GetAllTrustCenterComplianceHistories) GetTrustCenterComplianceHistories() *GetAllTrustCenterComplianceHistories_TrustCenterComplianceHistories {
	if t == nil {
		t = &GetAllTrustCenterComplianceHistories{}
	}
	return &t.TrustCenterComplianceHistories
}

type GetTrustCenterComplianceHistories struct {
	TrustCenterComplianceHistories GetTrustCenterComplianceHistories_TrustCenterComplianceHistories "json:\"trustCenterComplianceHistories\" graphql:\"trustCenterComplianceHistories\""
}

func (t *GetTrustCenterComplianceHistories) GetTrustCenterComplianceHistories() *GetTrustCenterComplianceHistories_TrustCenterComplianceHistories {
	if t == nil {
		t = &GetTrustCenterComplianceHistories{}
	}
	return &t.TrustCenterComplianceHistories
}

type CreateTrustCenterDoc struct {
	CreateTrustCenterDoc CreateTrustCenterDoc_CreateTrustCenterDoc "json:\"createTrustCenterDoc\" graphql:\"createTrustCenterDoc\""
}

func (t *CreateTrustCenterDoc) GetCreateTrustCenterDoc() *CreateTrustCenterDoc_CreateTrustCenterDoc {
	if t == nil {
		t = &CreateTrustCenterDoc{}
	}
	return &t.CreateTrustCenterDoc
}

type DeleteTrustCenterDoc struct {
	DeleteTrustCenterDoc DeleteTrustCenterDoc_DeleteTrustCenterDoc "json:\"deleteTrustCenterDoc\" graphql:\"deleteTrustCenterDoc\""
}

func (t *DeleteTrustCenterDoc) GetDeleteTrustCenterDoc() *DeleteTrustCenterDoc_DeleteTrustCenterDoc {
	if t == nil {
		t = &DeleteTrustCenterDoc{}
	}
	return &t.DeleteTrustCenterDoc
}

type GetAllTrustCenterDocs struct {
	TrustCenterDocs GetAllTrustCenterDocs_TrustCenterDocs "json:\"trustCenterDocs\" graphql:\"trustCenterDocs\""
}

func (t *GetAllTrustCenterDocs) GetTrustCenterDocs() *GetAllTrustCenterDocs_TrustCenterDocs {
	if t == nil {
		t = &GetAllTrustCenterDocs{}
	}
	return &t.TrustCenterDocs
}

type GetTrustCenterDocByID struct {
	TrustCenterDoc GetTrustCenterDocByID_TrustCenterDoc "json:\"trustCenterDoc\" graphql:\"trustCenterDoc\""
}

func (t *GetTrustCenterDocByID) GetTrustCenterDoc() *GetTrustCenterDocByID_TrustCenterDoc {
	if t == nil {
		t = &GetTrustCenterDocByID{}
	}
	return &t.TrustCenterDoc
}

type GetTrustCenterDocs struct {
	TrustCenterDocs GetTrustCenterDocs_TrustCenterDocs "json:\"trustCenterDocs\" graphql:\"trustCenterDocs\""
}

func (t *GetTrustCenterDocs) GetTrustCenterDocs() *GetTrustCenterDocs_TrustCenterDocs {
	if t == nil {
		t = &GetTrustCenterDocs{}
	}
	return &t.TrustCenterDocs
}

type UpdateTrustCenterDoc struct {
	UpdateTrustCenterDoc UpdateTrustCenterDoc_UpdateTrustCenterDoc "json:\"updateTrustCenterDoc\" graphql:\"updateTrustCenterDoc\""
}

func (t *UpdateTrustCenterDoc) GetUpdateTrustCenterDoc() *UpdateTrustCenterDoc_UpdateTrustCenterDoc {
	if t == nil {
		t = &UpdateTrustCenterDoc{}
	}
	return &t.UpdateTrustCenterDoc
}

type GetAllTrustCenterDocHistories struct {
	TrustCenterDocHistories GetAllTrustCenterDocHistories_TrustCenterDocHistories "json:\"trustCenterDocHistories\" graphql:\"trustCenterDocHistories\""
}

func (t *GetAllTrustCenterDocHistories) GetTrustCenterDocHistories() *GetAllTrustCenterDocHistories_TrustCenterDocHistories {
	if t == nil {
		t = &GetAllTrustCenterDocHistories{}
	}
	return &t.TrustCenterDocHistories
}

type GetTrustCenterDocHistories struct {
	TrustCenterDocHistories GetTrustCenterDocHistories_TrustCenterDocHistories "json:\"trustCenterDocHistories\" graphql:\"trustCenterDocHistories\""
}

func (t *GetTrustCenterDocHistories) GetTrustCenterDocHistories() *GetTrustCenterDocHistories_TrustCenterDocHistories {
	if t == nil {
		t = &GetTrustCenterDocHistories{}
	}
	return &t.TrustCenterDocHistories
}

type CreateTrustCenterDomain struct {
	CreateTrustCenterDomain CreateTrustCenterDomain_CreateTrustCenterDomain "json:\"createTrustCenterDomain\" graphql:\"createTrustCenterDomain\""
}

func (t *CreateTrustCenterDomain) GetCreateTrustCenterDomain() *CreateTrustCenterDomain_CreateTrustCenterDomain {
	if t == nil {
		t = &CreateTrustCenterDomain{}
	}
	return &t.CreateTrustCenterDomain
}

type GetAllTrustCenterHistories struct {
	TrustCenterHistories GetAllTrustCenterHistories_TrustCenterHistories "json:\"trustCenterHistories\" graphql:\"trustCenterHistories\""
}

func (t *GetAllTrustCenterHistories) GetTrustCenterHistories() *GetAllTrustCenterHistories_TrustCenterHistories {
	if t == nil {
		t = &GetAllTrustCenterHistories{}
	}
	return &t.TrustCenterHistories
}

type GetTrustCenterHistories struct {
	TrustCenterHistories GetTrustCenterHistories_TrustCenterHistories "json:\"trustCenterHistories\" graphql:\"trustCenterHistories\""
}

func (t *GetTrustCenterHistories) GetTrustCenterHistories() *GetTrustCenterHistories_TrustCenterHistories {
	if t == nil {
		t = &GetTrustCenterHistories{}
	}
	return &t.TrustCenterHistories
}

type CreateTrustCenterNda struct {
	CreateTrustCenterNda CreateTrustCenterNda_CreateTrustCenterNda "json:\"createTrustCenterNDA\" graphql:\"createTrustCenterNDA\""
}

func (t *CreateTrustCenterNda) GetCreateTrustCenterNda() *CreateTrustCenterNda_CreateTrustCenterNda {
	if t == nil {
		t = &CreateTrustCenterNda{}
	}
	return &t.CreateTrustCenterNda
}

type SendTrustCenterNDAEmail struct {
	SendTrustCenterNDAEmail SendTrustCenterNDAEmail_SendTrustCenterNDAEmail "json:\"sendTrustCenterNDAEmail\" graphql:\"sendTrustCenterNDAEmail\""
}

func (t *SendTrustCenterNDAEmail) GetSendTrustCenterNDAEmail() *SendTrustCenterNDAEmail_SendTrustCenterNDAEmail {
	if t == nil {
		t = &SendTrustCenterNDAEmail{}
	}
	return &t.SendTrustCenterNDAEmail
}

type SubmitTrustCenterNDAResponse struct {
	SubmitTrustCenterNDAResponse SubmitTrustCenterNDAResponse_SubmitTrustCenterNDAResponse "json:\"submitTrustCenterNDAResponse\" graphql:\"submitTrustCenterNDAResponse\""
}

func (t *SubmitTrustCenterNDAResponse) GetSubmitTrustCenterNDAResponse() *SubmitTrustCenterNDAResponse_SubmitTrustCenterNDAResponse {
	if t == nil {
		t = &SubmitTrustCenterNDAResponse{}
	}
	return &t.SubmitTrustCenterNDAResponse
}

type UpdateTrustCenterNda struct {
	UpdateTrustCenterNda UpdateTrustCenterNda_UpdateTrustCenterNda "json:\"updateTrustCenterNDA\" graphql:\"updateTrustCenterNDA\""
}

func (t *UpdateTrustCenterNda) GetUpdateTrustCenterNda() *UpdateTrustCenterNda_UpdateTrustCenterNda {
	if t == nil {
		t = &UpdateTrustCenterNda{}
	}
	return &t.UpdateTrustCenterNda
}

type CreateTrustCenterSetting struct {
	CreateTrustCenterSetting CreateTrustCenterSetting_CreateTrustCenterSetting "json:\"createTrustCenterSetting\" graphql:\"createTrustCenterSetting\""
}

func (t *CreateTrustCenterSetting) GetCreateTrustCenterSetting() *CreateTrustCenterSetting_CreateTrustCenterSetting {
	if t == nil {
		t = &CreateTrustCenterSetting{}
	}
	return &t.CreateTrustCenterSetting
}

type DeleteTrustCenterSetting struct {
	DeleteTrustCenterSetting DeleteTrustCenterSetting_DeleteTrustCenterSetting "json:\"deleteTrustCenterSetting\" graphql:\"deleteTrustCenterSetting\""
}

func (t *DeleteTrustCenterSetting) GetDeleteTrustCenterSetting() *DeleteTrustCenterSetting_DeleteTrustCenterSetting {
	if t == nil {
		t = &DeleteTrustCenterSetting{}
	}
	return &t.DeleteTrustCenterSetting
}

type GetAllTrustCenterSettings struct {
	TrustCenterSettings GetAllTrustCenterSettings_TrustCenterSettings "json:\"trustCenterSettings\" graphql:\"trustCenterSettings\""
}

func (t *GetAllTrustCenterSettings) GetTrustCenterSettings() *GetAllTrustCenterSettings_TrustCenterSettings {
	if t == nil {
		t = &GetAllTrustCenterSettings{}
	}
	return &t.TrustCenterSettings
}

type GetTrustCenterSettingByID struct {
	TrustCenterSetting GetTrustCenterSettingByID_TrustCenterSetting "json:\"trustCenterSetting\" graphql:\"trustCenterSetting\""
}

func (t *GetTrustCenterSettingByID) GetTrustCenterSetting() *GetTrustCenterSettingByID_TrustCenterSetting {
	if t == nil {
		t = &GetTrustCenterSettingByID{}
	}
	return &t.TrustCenterSetting
}

type GetTrustCenterSettings struct {
	TrustCenterSettings GetTrustCenterSettings_TrustCenterSettings "json:\"trustCenterSettings\" graphql:\"trustCenterSettings\""
}

func (t *GetTrustCenterSettings) GetTrustCenterSettings() *GetTrustCenterSettings_TrustCenterSettings {
	if t == nil {
		t = &GetTrustCenterSettings{}
	}
	return &t.TrustCenterSettings
}

type UpdateTrustCenterSetting struct {
	UpdateTrustCenterSetting UpdateTrustCenterSetting_UpdateTrustCenterSetting "json:\"updateTrustCenterSetting\" graphql:\"updateTrustCenterSetting\""
}

func (t *UpdateTrustCenterSetting) GetUpdateTrustCenterSetting() *UpdateTrustCenterSetting_UpdateTrustCenterSetting {
	if t == nil {
		t = &UpdateTrustCenterSetting{}
	}
	return &t.UpdateTrustCenterSetting
}

type GetAllTrustCenterSettingHistories struct {
	TrustCenterSettingHistories GetAllTrustCenterSettingHistories_TrustCenterSettingHistories "json:\"trustCenterSettingHistories\" graphql:\"trustCenterSettingHistories\""
}

func (t *GetAllTrustCenterSettingHistories) GetTrustCenterSettingHistories() *GetAllTrustCenterSettingHistories_TrustCenterSettingHistories {
	if t == nil {
		t = &GetAllTrustCenterSettingHistories{}
	}
	return &t.TrustCenterSettingHistories
}

type GetTrustCenterSettingHistories struct {
	TrustCenterSettingHistories GetTrustCenterSettingHistories_TrustCenterSettingHistories "json:\"trustCenterSettingHistories\" graphql:\"trustCenterSettingHistories\""
}

func (t *GetTrustCenterSettingHistories) GetTrustCenterSettingHistories() *GetTrustCenterSettingHistories_TrustCenterSettingHistories {
	if t == nil {
		t = &GetTrustCenterSettingHistories{}
	}
	return &t.TrustCenterSettingHistories
}

type CreateBulkCSVTrustCenterSubprocessor struct {
	CreateBulkCSVTrustCenterSubprocessor CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor "json:\"createBulkCSVTrustCenterSubprocessor\" graphql:\"createBulkCSVTrustCenterSubprocessor\""
}

func (t *CreateBulkCSVTrustCenterSubprocessor) GetCreateBulkCSVTrustCenterSubprocessor() *CreateBulkCSVTrustCenterSubprocessor_CreateBulkCSVTrustCenterSubprocessor {
	if t == nil {
		t = &CreateBulkCSVTrustCenterSubprocessor{}
	}
	return &t.CreateBulkCSVTrustCenterSubprocessor
}

type CreateBulkTrustCenterSubprocessor struct {
	CreateBulkTrustCenterSubprocessor CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor "json:\"createBulkTrustCenterSubprocessor\" graphql:\"createBulkTrustCenterSubprocessor\""
}

func (t *CreateBulkTrustCenterSubprocessor) GetCreateBulkTrustCenterSubprocessor() *CreateBulkTrustCenterSubprocessor_CreateBulkTrustCenterSubprocessor {
	if t == nil {
		t = &CreateBulkTrustCenterSubprocessor{}
	}
	return &t.CreateBulkTrustCenterSubprocessor
}

type CreateTrustCenterSubprocessor struct {
	CreateTrustCenterSubprocessor CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor "json:\"createTrustCenterSubprocessor\" graphql:\"createTrustCenterSubprocessor\""
}

func (t *CreateTrustCenterSubprocessor) GetCreateTrustCenterSubprocessor() *CreateTrustCenterSubprocessor_CreateTrustCenterSubprocessor {
	if t == nil {
		t = &CreateTrustCenterSubprocessor{}
	}
	return &t.CreateTrustCenterSubprocessor
}

type DeleteTrustCenterSubprocessor struct {
	DeleteTrustCenterSubprocessor DeleteTrustCenterSubprocessor_DeleteTrustCenterSubprocessor "json:\"deleteTrustCenterSubprocessor\" graphql:\"deleteTrustCenterSubprocessor\""
}

func (t *DeleteTrustCenterSubprocessor) GetDeleteTrustCenterSubprocessor() *DeleteTrustCenterSubprocessor_DeleteTrustCenterSubprocessor {
	if t == nil {
		t = &DeleteTrustCenterSubprocessor{}
	}
	return &t.DeleteTrustCenterSubprocessor
}

type GetAllTrustCenterSubprocessors struct {
	TrustCenterSubprocessors GetAllTrustCenterSubprocessors_TrustCenterSubprocessors "json:\"trustCenterSubprocessors\" graphql:\"trustCenterSubprocessors\""
}

func (t *GetAllTrustCenterSubprocessors) GetTrustCenterSubprocessors() *GetAllTrustCenterSubprocessors_TrustCenterSubprocessors {
	if t == nil {
		t = &GetAllTrustCenterSubprocessors{}
	}
	return &t.TrustCenterSubprocessors
}

type GetTrustCenterSubprocessorByID struct {
	TrustCenterSubprocessor GetTrustCenterSubprocessorByID_TrustCenterSubprocessor "json:\"trustCenterSubprocessor\" graphql:\"trustCenterSubprocessor\""
}

func (t *GetTrustCenterSubprocessorByID) GetTrustCenterSubprocessor() *GetTrustCenterSubprocessorByID_TrustCenterSubprocessor {
	if t == nil {
		t = &GetTrustCenterSubprocessorByID{}
	}
	return &t.TrustCenterSubprocessor
}

type GetTrustCenterSubprocessors struct {
	TrustCenterSubprocessors GetTrustCenterSubprocessors_TrustCenterSubprocessors "json:\"trustCenterSubprocessors\" graphql:\"trustCenterSubprocessors\""
}

func (t *GetTrustCenterSubprocessors) GetTrustCenterSubprocessors() *GetTrustCenterSubprocessors_TrustCenterSubprocessors {
	if t == nil {
		t = &GetTrustCenterSubprocessors{}
	}
	return &t.TrustCenterSubprocessors
}

type UpdateTrustCenterSubprocessor struct {
	UpdateTrustCenterSubprocessor UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor "json:\"updateTrustCenterSubprocessor\" graphql:\"updateTrustCenterSubprocessor\""
}

func (t *UpdateTrustCenterSubprocessor) GetUpdateTrustCenterSubprocessor() *UpdateTrustCenterSubprocessor_UpdateTrustCenterSubprocessor {
	if t == nil {
		t = &UpdateTrustCenterSubprocessor{}
	}
	return &t.UpdateTrustCenterSubprocessor
}

type GetAllTrustCenterSubprocessorHistories struct {
	TrustCenterSubprocessorHistories GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories "json:\"trustCenterSubprocessorHistories\" graphql:\"trustCenterSubprocessorHistories\""
}

func (t *GetAllTrustCenterSubprocessorHistories) GetTrustCenterSubprocessorHistories() *GetAllTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories {
	if t == nil {
		t = &GetAllTrustCenterSubprocessorHistories{}
	}
	return &t.TrustCenterSubprocessorHistories
}

type GetTrustCenterSubprocessorHistories struct {
	TrustCenterSubprocessorHistories GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories "json:\"trustCenterSubprocessorHistories\" graphql:\"trustCenterSubprocessorHistories\""
}

func (t *GetTrustCenterSubprocessorHistories) GetTrustCenterSubprocessorHistories() *GetTrustCenterSubprocessorHistories_TrustCenterSubprocessorHistories {
	if t == nil {
		t = &GetTrustCenterSubprocessorHistories{}
	}
	return &t.TrustCenterSubprocessorHistories
}

type CreateTrustCenterWatermarkConfig struct {
	CreateTrustCenterWatermarkConfig CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig "json:\"createTrustCenterWatermarkConfig\" graphql:\"createTrustCenterWatermarkConfig\""
}

func (t *CreateTrustCenterWatermarkConfig) GetCreateTrustCenterWatermarkConfig() *CreateTrustCenterWatermarkConfig_CreateTrustCenterWatermarkConfig {
	if t == nil {
		t = &CreateTrustCenterWatermarkConfig{}
	}
	return &t.CreateTrustCenterWatermarkConfig
}

type DeleteTrustCenterWatermarkConfig struct {
	DeleteTrustCenterWatermarkConfig DeleteTrustCenterWatermarkConfig_DeleteTrustCenterWatermarkConfig "json:\"deleteTrustCenterWatermarkConfig\" graphql:\"deleteTrustCenterWatermarkConfig\""
}

func (t *DeleteTrustCenterWatermarkConfig) GetDeleteTrustCenterWatermarkConfig() *DeleteTrustCenterWatermarkConfig_DeleteTrustCenterWatermarkConfig {
	if t == nil {
		t = &DeleteTrustCenterWatermarkConfig{}
	}
	return &t.DeleteTrustCenterWatermarkConfig
}

type GetAllTrustCenterWatermarkConfigs struct {
	TrustCenterWatermarkConfigs GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs "json:\"trustCenterWatermarkConfigs\" graphql:\"trustCenterWatermarkConfigs\""
}

func (t *GetAllTrustCenterWatermarkConfigs) GetTrustCenterWatermarkConfigs() *GetAllTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigs{}
	}
	return &t.TrustCenterWatermarkConfigs
}

type GetTrustCenterWatermarkConfigByID struct {
	TrustCenterWatermarkConfig GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig "json:\"trustCenterWatermarkConfig\" graphql:\"trustCenterWatermarkConfig\""
}

func (t *GetTrustCenterWatermarkConfigByID) GetTrustCenterWatermarkConfig() *GetTrustCenterWatermarkConfigByID_TrustCenterWatermarkConfig {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigByID{}
	}
	return &t.TrustCenterWatermarkConfig
}

type GetTrustCenterWatermarkConfigs struct {
	TrustCenterWatermarkConfigs GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs "json:\"trustCenterWatermarkConfigs\" graphql:\"trustCenterWatermarkConfigs\""
}

func (t *GetTrustCenterWatermarkConfigs) GetTrustCenterWatermarkConfigs() *GetTrustCenterWatermarkConfigs_TrustCenterWatermarkConfigs {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigs{}
	}
	return &t.TrustCenterWatermarkConfigs
}

type UpdateTrustCenterWatermarkConfig struct {
	UpdateTrustCenterWatermarkConfig UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig "json:\"updateTrustCenterWatermarkConfig\" graphql:\"updateTrustCenterWatermarkConfig\""
}

func (t *UpdateTrustCenterWatermarkConfig) GetUpdateTrustCenterWatermarkConfig() *UpdateTrustCenterWatermarkConfig_UpdateTrustCenterWatermarkConfig {
	if t == nil {
		t = &UpdateTrustCenterWatermarkConfig{}
	}
	return &t.UpdateTrustCenterWatermarkConfig
}

type GetAllTrustCenterWatermarkConfigHistories struct {
	TrustCenterWatermarkConfigHistories GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories "json:\"trustCenterWatermarkConfigHistories\" graphql:\"trustCenterWatermarkConfigHistories\""
}

func (t *GetAllTrustCenterWatermarkConfigHistories) GetTrustCenterWatermarkConfigHistories() *GetAllTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories {
	if t == nil {
		t = &GetAllTrustCenterWatermarkConfigHistories{}
	}
	return &t.TrustCenterWatermarkConfigHistories
}

type GetTrustCenterWatermarkConfigHistories struct {
	TrustCenterWatermarkConfigHistories GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories "json:\"trustCenterWatermarkConfigHistories\" graphql:\"trustCenterWatermarkConfigHistories\""
}

func (t *GetTrustCenterWatermarkConfigHistories) GetTrustCenterWatermarkConfigHistories() *GetTrustCenterWatermarkConfigHistories_TrustCenterWatermarkConfigHistories {
	if t == nil {
		t = &GetTrustCenterWatermarkConfigHistories{}
	}
	return &t.TrustCenterWatermarkConfigHistories
}

type CreateUser struct {
	CreateUser CreateUser_CreateUser "json:\"createUser\" graphql:\"createUser\""
}

func (t *CreateUser) GetCreateUser() *CreateUser_CreateUser {
	if t == nil {
		t = &CreateUser{}
	}
	return &t.CreateUser
}

type DeleteUser struct {
	DeleteUser DeleteUser_DeleteUser "json:\"deleteUser\" graphql:\"deleteUser\""
}

func (t *DeleteUser) GetDeleteUser() *DeleteUser_DeleteUser {
	if t == nil {
		t = &DeleteUser{}
	}
	return &t.DeleteUser
}

type GetAllUsers struct {
	Users GetAllUsers_Users "json:\"users\" graphql:\"users\""
}

func (t *GetAllUsers) GetUsers() *GetAllUsers_Users {
	if t == nil {
		t = &GetAllUsers{}
	}
	return &t.Users
}

type GetSelf struct {
	Self GetSelf_Self "json:\"self\" graphql:\"self\""
}

func (t *GetSelf) GetSelf() *GetSelf_Self {
	if t == nil {
		t = &GetSelf{}
	}
	return &t.Self
}

type GetUserByID struct {
	User GetUserByID_User "json:\"user\" graphql:\"user\""
}

func (t *GetUserByID) GetUser() *GetUserByID_User {
	if t == nil {
		t = &GetUserByID{}
	}
	return &t.User
}

type GetUsers struct {
	Users GetUsers_Users "json:\"users\" graphql:\"users\""
}

func (t *GetUsers) GetUsers() *GetUsers_Users {
	if t == nil {
		t = &GetUsers{}
	}
	return &t.Users
}

type UpdateUser struct {
	UpdateUser UpdateUser_UpdateUser "json:\"updateUser\" graphql:\"updateUser\""
}

func (t *UpdateUser) GetUpdateUser() *UpdateUser_UpdateUser {
	if t == nil {
		t = &UpdateUser{}
	}
	return &t.UpdateUser
}

type GetAllUserHistories struct {
	UserHistories GetAllUserHistories_UserHistories "json:\"userHistories\" graphql:\"userHistories\""
}

func (t *GetAllUserHistories) GetUserHistories() *GetAllUserHistories_UserHistories {
	if t == nil {
		t = &GetAllUserHistories{}
	}
	return &t.UserHistories
}

type GetUserHistories struct {
	UserHistories GetUserHistories_UserHistories "json:\"userHistories\" graphql:\"userHistories\""
}

func (t *GetUserHistories) GetUserHistories() *GetUserHistories_UserHistories {
	if t == nil {
		t = &GetUserHistories{}
	}
	return &t.UserHistories
}

type CreateUserSetting struct {
	CreateUserSetting CreateUserSetting_CreateUserSetting "json:\"createUserSetting\" graphql:\"createUserSetting\""
}

func (t *CreateUserSetting) GetCreateUserSetting() *CreateUserSetting_CreateUserSetting {
	if t == nil {
		t = &CreateUserSetting{}
	}
	return &t.CreateUserSetting
}

type GetAllUserSettings struct {
	UserSettings GetAllUserSettings_UserSettings "json:\"userSettings\" graphql:\"userSettings\""
}

func (t *GetAllUserSettings) GetUserSettings() *GetAllUserSettings_UserSettings {
	if t == nil {
		t = &GetAllUserSettings{}
	}
	return &t.UserSettings
}

type GetUserSettingByID struct {
	UserSetting GetUserSettingByID_UserSetting "json:\"userSetting\" graphql:\"userSetting\""
}

func (t *GetUserSettingByID) GetUserSetting() *GetUserSettingByID_UserSetting {
	if t == nil {
		t = &GetUserSettingByID{}
	}
	return &t.UserSetting
}

type GetUserSettings struct {
	UserSettings GetUserSettings_UserSettings "json:\"userSettings\" graphql:\"userSettings\""
}

func (t *GetUserSettings) GetUserSettings() *GetUserSettings_UserSettings {
	if t == nil {
		t = &GetUserSettings{}
	}
	return &t.UserSettings
}

type UpdateUserSetting struct {
	UpdateUserSetting UpdateUserSetting_UpdateUserSetting "json:\"updateUserSetting\" graphql:\"updateUserSetting\""
}

func (t *UpdateUserSetting) GetUpdateUserSetting() *UpdateUserSetting_UpdateUserSetting {
	if t == nil {
		t = &UpdateUserSetting{}
	}
	return &t.UpdateUserSetting
}

type GetAllUserSettingHistories struct {
	UserSettingHistories GetAllUserSettingHistories_UserSettingHistories "json:\"userSettingHistories\" graphql:\"userSettingHistories\""
}

func (t *GetAllUserSettingHistories) GetUserSettingHistories() *GetAllUserSettingHistories_UserSettingHistories {
	if t == nil {
		t = &GetAllUserSettingHistories{}
	}
	return &t.UserSettingHistories
}

type GetUserSettingHistories struct {
	UserSettingHistories GetUserSettingHistories_UserSettingHistories "json:\"userSettingHistories\" graphql:\"userSettingHistories\""
}

func (t *GetUserSettingHistories) GetUserSettingHistories() *GetUserSettingHistories_UserSettingHistories {
	if t == nil {
		t = &GetUserSettingHistories{}
	}
	return &t.UserSettingHistories
}

type DeleteWebauthn struct {
	DeleteWebauthn DeleteWebauthn_DeleteWebauthn "json:\"deleteWebauthn\" graphql:\"deleteWebauthn\""
}

func (t *DeleteWebauthn) GetDeleteWebauthn() *DeleteWebauthn_DeleteWebauthn {
	if t == nil {
		t = &DeleteWebauthn{}
	}
	return &t.DeleteWebauthn
}

type GetAllWebauthns struct {
	Webauthns GetAllWebauthns_Webauthns "json:\"webauthns\" graphql:\"webauthns\""
}

func (t *GetAllWebauthns) GetWebauthns() *GetAllWebauthns_Webauthns {
	if t == nil {
		t = &GetAllWebauthns{}
	}
	return &t.Webauthns
}

const CreateBulkCSVActionPlanDocument = `mutation CreateBulkCSVActionPlan ($input: Upload!) {
	createBulkCSVActionPlan(input: $input) {
		actionPlans {
			actionPlanType
			approvalRequired
			approverID
			controlSuggestions
			createdAt
			createdBy
			delegateID
			details
			dismissedControlSuggestions
			dismissedImprovementSuggestions
			dismissedTagSuggestions
			dueDate
			id
			improvementSuggestions
			name
			ownerID
			priority
			reviewDue
			reviewFrequency
			revision
			source
			status
			summary
			tagSuggestions
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVActionPlan(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVActionPlan, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVActionPlan
	if err := c.Client.Post(ctx, "CreateBulkCSVActionPlan", CreateBulkCSVActionPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkActionPlanDocument = `mutation CreateBulkActionPlan ($input: [CreateActionPlanInput!]) {
	createBulkActionPlan(input: $input) {
		actionPlans {
			actionPlanType
			approvalRequired
			approverID
			controlSuggestions
			createdAt
			createdBy
			delegateID
			details
			dismissedControlSuggestions
			dismissedImprovementSuggestions
			dismissedTagSuggestions
			dueDate
			id
			improvementSuggestions
			name
			ownerID
			priority
			reviewDue
			reviewFrequency
			revision
			source
			status
			summary
			tagSuggestions
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkActionPlan(ctx context.Context, input []*CreateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkActionPlan, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkActionPlan
	if err := c.Client.Post(ctx, "CreateBulkActionPlan", CreateBulkActionPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateActionPlanDocument = `mutation CreateActionPlan ($input: CreateActionPlanInput!) {
	createActionPlan(input: $input) {
		actionPlan {
			actionPlanType
			approvalRequired
			approverID
			controlSuggestions
			createdAt
			createdBy
			delegateID
			details
			dismissedControlSuggestions
			dismissedImprovementSuggestions
			dismissedTagSuggestions
			dueDate
			id
			improvementSuggestions
			name
			ownerID
			priority
			reviewDue
			reviewFrequency
			revision
			source
			status
			summary
			tagSuggestions
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateActionPlan(ctx context.Context, input CreateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*CreateActionPlan, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateActionPlan
	if err := c.Client.Post(ctx, "CreateActionPlan", CreateActionPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteActionPlanDocument = `mutation DeleteActionPlan ($deleteActionPlanId: ID!) {
	deleteActionPlan(id: $deleteActionPlanId) {
		deletedID
	}
}
`

func (c *Client) DeleteActionPlan(ctx context.Context, deleteActionPlanID string, interceptors ...clientv2.RequestInterceptor) (*DeleteActionPlan, error) {
	vars := map[string]any{
		"deleteActionPlanId": deleteActionPlanID,
	}

	var res DeleteActionPlan
	if err := c.Client.Post(ctx, "DeleteActionPlan", DeleteActionPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllActionPlansDocument = `query GetAllActionPlans {
	actionPlans {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				actionPlanType
				approvalRequired
				approverID
				controlSuggestions
				createdAt
				createdBy
				delegateID
				details
				dismissedControlSuggestions
				dismissedImprovementSuggestions
				dismissedTagSuggestions
				dueDate
				id
				improvementSuggestions
				name
				ownerID
				priority
				reviewDue
				reviewFrequency
				revision
				source
				status
				summary
				tagSuggestions
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllActionPlans(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllActionPlans, error) {
	vars := map[string]any{}

	var res GetAllActionPlans
	if err := c.Client.Post(ctx, "GetAllActionPlans", GetAllActionPlansDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetActionPlanByIDDocument = `query GetActionPlanByID ($actionPlanId: ID!) {
	actionPlan(id: $actionPlanId) {
		actionPlanType
		approvalRequired
		approverID
		controlSuggestions
		createdAt
		createdBy
		delegateID
		details
		dismissedControlSuggestions
		dismissedImprovementSuggestions
		dismissedTagSuggestions
		dueDate
		id
		improvementSuggestions
		name
		ownerID
		priority
		reviewDue
		reviewFrequency
		revision
		source
		status
		summary
		tagSuggestions
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetActionPlanByID(ctx context.Context, actionPlanID string, interceptors ...clientv2.RequestInterceptor) (*GetActionPlanByID, error) {
	vars := map[string]any{
		"actionPlanId": actionPlanID,
	}

	var res GetActionPlanByID
	if err := c.Client.Post(ctx, "GetActionPlanByID", GetActionPlanByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetActionPlansDocument = `query GetActionPlans ($first: Int, $last: Int, $where: ActionPlanWhereInput) {
	actionPlans(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				actionPlanType
				approvalRequired
				approverID
				controlSuggestions
				createdAt
				createdBy
				delegateID
				details
				dismissedControlSuggestions
				dismissedImprovementSuggestions
				dismissedTagSuggestions
				dueDate
				id
				improvementSuggestions
				name
				ownerID
				priority
				reviewDue
				reviewFrequency
				revision
				source
				status
				summary
				tagSuggestions
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetActionPlans(ctx context.Context, first *int64, last *int64, where *ActionPlanWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetActionPlans, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetActionPlans
	if err := c.Client.Post(ctx, "GetActionPlans", GetActionPlansDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateActionPlanDocument = `mutation UpdateActionPlan ($updateActionPlanId: ID!, $input: UpdateActionPlanInput!) {
	updateActionPlan(id: $updateActionPlanId, input: $input) {
		actionPlan {
			actionPlanType
			approvalRequired
			approverID
			controlSuggestions
			createdAt
			createdBy
			delegateID
			details
			dismissedControlSuggestions
			dismissedImprovementSuggestions
			dismissedTagSuggestions
			dueDate
			id
			improvementSuggestions
			name
			ownerID
			priority
			reviewDue
			reviewFrequency
			revision
			source
			status
			summary
			tagSuggestions
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateActionPlan(ctx context.Context, updateActionPlanID string, input UpdateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*UpdateActionPlan, error) {
	vars := map[string]any{
		"updateActionPlanId": updateActionPlanID,
		"input":              input,
	}

	var res UpdateActionPlan
	if err := c.Client.Post(ctx, "UpdateActionPlan", UpdateActionPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllActionPlanHistoriesDocument = `query GetAllActionPlanHistories {
	actionPlanHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				actionPlanType
				approvalRequired
				approverID
				controlSuggestions
				createdAt
				createdBy
				delegateID
				details
				dismissedControlSuggestions
				dismissedImprovementSuggestions
				dismissedTagSuggestions
				dueDate
				historyTime
				id
				improvementSuggestions
				name
				operation
				ownerID
				priority
				ref
				reviewDue
				reviewFrequency
				revision
				source
				status
				summary
				tagSuggestions
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllActionPlanHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllActionPlanHistories, error) {
	vars := map[string]any{}

	var res GetAllActionPlanHistories
	if err := c.Client.Post(ctx, "GetAllActionPlanHistories", GetAllActionPlanHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetActionPlanHistoriesDocument = `query GetActionPlanHistories ($first: Int, $last: Int, $where: ActionPlanHistoryWhereInput) {
	actionPlanHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				actionPlanType
				approvalRequired
				approverID
				controlSuggestions
				createdAt
				createdBy
				delegateID
				details
				dismissedControlSuggestions
				dismissedImprovementSuggestions
				dismissedTagSuggestions
				dueDate
				historyTime
				id
				improvementSuggestions
				name
				operation
				ownerID
				priority
				ref
				reviewDue
				reviewFrequency
				revision
				source
				status
				summary
				tagSuggestions
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetActionPlanHistories(ctx context.Context, first *int64, last *int64, where *ActionPlanHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetActionPlanHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetActionPlanHistories
	if err := c.Client.Post(ctx, "GetActionPlanHistories", GetActionPlanHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateAPITokenDocument = `mutation CreateAPIToken ($input: CreateAPITokenInput!) {
	createAPIToken(input: $input) {
		apiToken {
			createdAt
			createdBy
			description
			expiresAt
			id
			isActive
			lastUsedAt
			name
			ownerID
			revokedAt
			revokedBy
			revokedReason
			ssoAuthorizations
			scopes
			tags
			token
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateAPIToken(ctx context.Context, input CreateAPITokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateAPIToken, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateAPIToken
	if err := c.Client.Post(ctx, "CreateAPIToken", CreateAPITokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkAPITokenDocument = `mutation CreateBulkAPIToken ($input: [CreateAPITokenInput!]) {
	createBulkAPIToken(input: $input) {
		apiTokens {
			createdAt
			createdBy
			description
			expiresAt
			id
			isActive
			lastUsedAt
			name
			ownerID
			revokedAt
			revokedBy
			revokedReason
			ssoAuthorizations
			scopes
			tags
			token
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkAPIToken(ctx context.Context, input []*CreateAPITokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkAPIToken, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkAPIToken
	if err := c.Client.Post(ctx, "CreateBulkAPIToken", CreateBulkAPITokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVAPITokenDocument = `mutation CreateBulkCSVAPIToken ($input: Upload!) {
	createBulkCSVAPIToken(input: $input) {
		apiTokens {
			createdAt
			createdBy
			description
			expiresAt
			id
			isActive
			lastUsedAt
			name
			ownerID
			revokedAt
			revokedBy
			revokedReason
			ssoAuthorizations
			scopes
			tags
			token
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVAPIToken(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVAPIToken, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVAPIToken
	if err := c.Client.Post(ctx, "CreateBulkCSVAPIToken", CreateBulkCSVAPITokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteAPITokenDocument = `mutation DeleteAPIToken ($deleteAPITokenId: ID!) {
	deleteAPIToken(id: $deleteAPITokenId) {
		deletedID
	}
}
`

func (c *Client) DeleteAPIToken(ctx context.Context, deleteAPITokenID string, interceptors ...clientv2.RequestInterceptor) (*DeleteAPIToken, error) {
	vars := map[string]any{
		"deleteAPITokenId": deleteAPITokenID,
	}

	var res DeleteAPIToken
	if err := c.Client.Post(ctx, "DeleteAPIToken", DeleteAPITokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllAPITokensDocument = `query GetAllAPITokens {
	apiTokens {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				expiresAt
				id
				isActive
				lastUsedAt
				name
				ownerID
				revokedAt
				revokedBy
				revokedReason
				ssoAuthorizations
				scopes
				tags
				token
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllAPITokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllAPITokens, error) {
	vars := map[string]any{}

	var res GetAllAPITokens
	if err := c.Client.Post(ctx, "GetAllAPITokens", GetAllAPITokensDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAPITokenByIDDocument = `query GetAPITokenByID ($apiTokenId: ID!) {
	apiToken(id: $apiTokenId) {
		createdAt
		createdBy
		description
		expiresAt
		id
		isActive
		lastUsedAt
		name
		ownerID
		revokedAt
		revokedBy
		revokedReason
		ssoAuthorizations
		scopes
		tags
		token
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetAPITokenByID(ctx context.Context, apiTokenID string, interceptors ...clientv2.RequestInterceptor) (*GetAPITokenByID, error) {
	vars := map[string]any{
		"apiTokenId": apiTokenID,
	}

	var res GetAPITokenByID
	if err := c.Client.Post(ctx, "GetAPITokenByID", GetAPITokenByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAPITokensDocument = `query GetAPITokens ($first: Int, $last: Int, $where: APITokenWhereInput) {
	apiTokens(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				expiresAt
				id
				isActive
				lastUsedAt
				name
				ownerID
				revokedAt
				revokedBy
				revokedReason
				ssoAuthorizations
				scopes
				tags
				token
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAPITokens(ctx context.Context, first *int64, last *int64, where *APITokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetAPITokens, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetAPITokens
	if err := c.Client.Post(ctx, "GetAPITokens", GetAPITokensDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateAPITokenDocument = `mutation UpdateAPIToken ($updateAPITokenId: ID!, $input: UpdateAPITokenInput!) {
	updateAPIToken(id: $updateAPITokenId, input: $input) {
		apiToken {
			createdAt
			createdBy
			description
			expiresAt
			id
			isActive
			lastUsedAt
			name
			ownerID
			revokedAt
			revokedBy
			revokedReason
			ssoAuthorizations
			scopes
			tags
			token
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateAPIToken(ctx context.Context, updateAPITokenID string, input UpdateAPITokenInput, interceptors ...clientv2.RequestInterceptor) (*UpdateAPIToken, error) {
	vars := map[string]any{
		"updateAPITokenId": updateAPITokenID,
		"input":            input,
	}

	var res UpdateAPIToken
	if err := c.Client.Post(ctx, "UpdateAPIToken", UpdateAPITokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVAssetDocument = `mutation CreateBulkCSVAsset ($input: Upload!) {
	createBulkCSVAsset(input: $input) {
		assets {
			assetType
			categories
			cpe
			createdAt
			createdBy
			description
			id
			identifier
			name
			ownerID
			tags
			updatedAt
			updatedBy
			website
		}
	}
}
`

func (c *Client) CreateBulkCSVAsset(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVAsset, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVAsset
	if err := c.Client.Post(ctx, "CreateBulkCSVAsset", CreateBulkCSVAssetDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkAssetDocument = `mutation CreateBulkAsset ($input: [CreateAssetInput!]) {
	createBulkAsset(input: $input) {
		assets {
			assetType
			categories
			cpe
			createdAt
			createdBy
			description
			id
			identifier
			name
			ownerID
			tags
			updatedAt
			updatedBy
			website
		}
	}
}
`

func (c *Client) CreateBulkAsset(ctx context.Context, input []*CreateAssetInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkAsset, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkAsset
	if err := c.Client.Post(ctx, "CreateBulkAsset", CreateBulkAssetDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateAssetDocument = `mutation CreateAsset ($input: CreateAssetInput!) {
	createAsset(input: $input) {
		asset {
			assetType
			categories
			cpe
			createdAt
			createdBy
			description
			id
			identifier
			name
			ownerID
			tags
			updatedAt
			updatedBy
			website
		}
	}
}
`

func (c *Client) CreateAsset(ctx context.Context, input CreateAssetInput, interceptors ...clientv2.RequestInterceptor) (*CreateAsset, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateAsset
	if err := c.Client.Post(ctx, "CreateAsset", CreateAssetDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteAssetDocument = `mutation DeleteAsset ($deleteAssetId: ID!) {
	deleteAsset(id: $deleteAssetId) {
		deletedID
	}
}
`

func (c *Client) DeleteAsset(ctx context.Context, deleteAssetID string, interceptors ...clientv2.RequestInterceptor) (*DeleteAsset, error) {
	vars := map[string]any{
		"deleteAssetId": deleteAssetID,
	}

	var res DeleteAsset
	if err := c.Client.Post(ctx, "DeleteAsset", DeleteAssetDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllAssetsDocument = `query GetAllAssets {
	assets {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				assetType
				categories
				cpe
				createdAt
				createdBy
				description
				id
				identifier
				name
				ownerID
				tags
				updatedAt
				updatedBy
				website
			}
		}
	}
}
`

func (c *Client) GetAllAssets(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllAssets, error) {
	vars := map[string]any{}

	var res GetAllAssets
	if err := c.Client.Post(ctx, "GetAllAssets", GetAllAssetsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAssetByIDDocument = `query GetAssetByID ($assetId: ID!) {
	asset(id: $assetId) {
		assetType
		categories
		cpe
		createdAt
		createdBy
		description
		id
		identifier
		name
		ownerID
		tags
		updatedAt
		updatedBy
		website
	}
}
`

func (c *Client) GetAssetByID(ctx context.Context, assetID string, interceptors ...clientv2.RequestInterceptor) (*GetAssetByID, error) {
	vars := map[string]any{
		"assetId": assetID,
	}

	var res GetAssetByID
	if err := c.Client.Post(ctx, "GetAssetByID", GetAssetByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAssetsDocument = `query GetAssets ($first: Int, $last: Int, $where: AssetWhereInput) {
	assets(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				assetType
				categories
				cpe
				createdAt
				createdBy
				description
				id
				identifier
				name
				ownerID
				tags
				updatedAt
				updatedBy
				website
			}
		}
	}
}
`

func (c *Client) GetAssets(ctx context.Context, first *int64, last *int64, where *AssetWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetAssets, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetAssets
	if err := c.Client.Post(ctx, "GetAssets", GetAssetsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateAssetDocument = `mutation UpdateAsset ($updateAssetId: ID!, $input: UpdateAssetInput!) {
	updateAsset(id: $updateAssetId, input: $input) {
		asset {
			assetType
			categories
			cpe
			createdAt
			createdBy
			description
			id
			identifier
			name
			ownerID
			tags
			updatedAt
			updatedBy
			website
		}
	}
}
`

func (c *Client) UpdateAsset(ctx context.Context, updateAssetID string, input UpdateAssetInput, interceptors ...clientv2.RequestInterceptor) (*UpdateAsset, error) {
	vars := map[string]any{
		"updateAssetId": updateAssetID,
		"input":         input,
	}

	var res UpdateAsset
	if err := c.Client.Post(ctx, "UpdateAsset", UpdateAssetDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllAssetHistoriesDocument = `query GetAllAssetHistories {
	assetHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				assetType
				categories
				cpe
				createdAt
				createdBy
				description
				historyTime
				id
				identifier
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
				website
			}
		}
	}
}
`

func (c *Client) GetAllAssetHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllAssetHistories, error) {
	vars := map[string]any{}

	var res GetAllAssetHistories
	if err := c.Client.Post(ctx, "GetAllAssetHistories", GetAllAssetHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAssetHistoriesDocument = `query GetAssetHistories ($first: Int, $last: Int, $where: AssetHistoryWhereInput) {
	assetHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				assetType
				categories
				cpe
				createdAt
				createdBy
				description
				historyTime
				id
				identifier
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
				website
			}
		}
	}
}
`

func (c *Client) GetAssetHistories(ctx context.Context, first *int64, last *int64, where *AssetHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetAssetHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetAssetHistories
	if err := c.Client.Post(ctx, "GetAssetHistories", GetAssetHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVContactDocument = `mutation CreateBulkCSVContact ($input: Upload!) {
	createBulkCSVContact(input: $input) {
		contacts {
			address
			company
			createdAt
			createdBy
			email
			fullName
			id
			ownerID
			phoneNumber
			status
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVContact(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVContact, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVContact
	if err := c.Client.Post(ctx, "CreateBulkCSVContact", CreateBulkCSVContactDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkContactDocument = `mutation CreateBulkContact ($input: [CreateContactInput!]) {
	createBulkContact(input: $input) {
		contacts {
			address
			company
			createdAt
			createdBy
			email
			fullName
			id
			ownerID
			phoneNumber
			status
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkContact(ctx context.Context, input []*CreateContactInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkContact, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkContact
	if err := c.Client.Post(ctx, "CreateBulkContact", CreateBulkContactDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateContactDocument = `mutation CreateContact ($input: CreateContactInput!) {
	createContact(input: $input) {
		contact {
			address
			company
			createdAt
			createdBy
			email
			fullName
			id
			ownerID
			phoneNumber
			status
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateContact(ctx context.Context, input CreateContactInput, interceptors ...clientv2.RequestInterceptor) (*CreateContact, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateContact
	if err := c.Client.Post(ctx, "CreateContact", CreateContactDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteContactDocument = `mutation DeleteContact ($deleteContactId: ID!) {
	deleteContact(id: $deleteContactId) {
		deletedID
	}
}
`

func (c *Client) DeleteContact(ctx context.Context, deleteContactID string, interceptors ...clientv2.RequestInterceptor) (*DeleteContact, error) {
	vars := map[string]any{
		"deleteContactId": deleteContactID,
	}

	var res DeleteContact
	if err := c.Client.Post(ctx, "DeleteContact", DeleteContactDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllContactsDocument = `query GetAllContacts {
	contacts {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				address
				company
				createdAt
				createdBy
				email
				fullName
				id
				ownerID
				phoneNumber
				status
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllContacts(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllContacts, error) {
	vars := map[string]any{}

	var res GetAllContacts
	if err := c.Client.Post(ctx, "GetAllContacts", GetAllContactsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetContactByIDDocument = `query GetContactByID ($contactId: ID!) {
	contact(id: $contactId) {
		address
		company
		createdAt
		createdBy
		email
		fullName
		id
		ownerID
		phoneNumber
		status
		tags
		title
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetContactByID(ctx context.Context, contactID string, interceptors ...clientv2.RequestInterceptor) (*GetContactByID, error) {
	vars := map[string]any{
		"contactId": contactID,
	}

	var res GetContactByID
	if err := c.Client.Post(ctx, "GetContactByID", GetContactByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetContactsDocument = `query GetContacts ($first: Int, $last: Int, $where: ContactWhereInput) {
	contacts(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				address
				company
				createdAt
				createdBy
				email
				fullName
				id
				ownerID
				phoneNumber
				status
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetContacts(ctx context.Context, first *int64, last *int64, where *ContactWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetContacts, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetContacts
	if err := c.Client.Post(ctx, "GetContacts", GetContactsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateContactDocument = `mutation UpdateContact ($updateContactId: ID!, $input: UpdateContactInput!) {
	updateContact(id: $updateContactId, input: $input) {
		contact {
			address
			company
			createdAt
			createdBy
			email
			fullName
			id
			ownerID
			phoneNumber
			status
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateContact(ctx context.Context, updateContactID string, input UpdateContactInput, interceptors ...clientv2.RequestInterceptor) (*UpdateContact, error) {
	vars := map[string]any{
		"updateContactId": updateContactID,
		"input":           input,
	}

	var res UpdateContact
	if err := c.Client.Post(ctx, "UpdateContact", UpdateContactDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllContactHistoriesDocument = `query GetAllContactHistories {
	contactHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				address
				company
				createdAt
				createdBy
				email
				fullName
				historyTime
				id
				operation
				ownerID
				phoneNumber
				ref
				status
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllContactHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllContactHistories, error) {
	vars := map[string]any{}

	var res GetAllContactHistories
	if err := c.Client.Post(ctx, "GetAllContactHistories", GetAllContactHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetContactHistoriesDocument = `query GetContactHistories ($first: Int, $last: Int, $where: ContactHistoryWhereInput) {
	contactHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				address
				company
				createdAt
				createdBy
				email
				fullName
				historyTime
				id
				operation
				ownerID
				phoneNumber
				ref
				status
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetContactHistories(ctx context.Context, first *int64, last *int64, where *ContactHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetContactHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetContactHistories
	if err := c.Client.Post(ctx, "GetContactHistories", GetContactHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVControlDocument = `mutation CreateBulkCSVControl ($input: Upload!) {
	createBulkCSVControl(input: $input) {
		controls {
			assessmentMethods
			assessmentObjectives
			auditorReferenceID
			category
			categoryID
			controlOwnerID
			controlQuestions
			controlType
			createdAt
			createdBy
			delegateID
			description
			displayID
			exampleEvidence
			id
			implementationGuidance
			mappedCategories
			ownerID
			refCode
			referenceFramework
			referenceID
			references
			source
			standardID
			status
			subcategory
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVControl(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVControl, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVControl
	if err := c.Client.Post(ctx, "CreateBulkCSVControl", CreateBulkCSVControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkControlDocument = `mutation CreateBulkControl ($input: [CreateControlInput!]) {
	createBulkControl(input: $input) {
		controls {
			assessmentMethods
			assessmentObjectives
			auditorReferenceID
			category
			categoryID
			controlOwnerID
			controlQuestions
			controlType
			createdAt
			createdBy
			delegateID
			description
			displayID
			exampleEvidence
			id
			implementationGuidance
			mappedCategories
			ownerID
			refCode
			referenceFramework
			referenceID
			references
			source
			standardID
			status
			subcategory
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkControl(ctx context.Context, input []*CreateControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkControl, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkControl
	if err := c.Client.Post(ctx, "CreateBulkControl", CreateBulkControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateControlDocument = `mutation CreateControl ($input: CreateControlInput!) {
	createControl(input: $input) {
		control {
			assessmentMethods
			assessmentObjectives
			auditorReferenceID
			category
			categoryID
			controlOwnerID
			controlQuestions
			controlType
			createdAt
			createdBy
			delegateID
			description
			displayID
			exampleEvidence
			id
			implementationGuidance
			mappedCategories
			ownerID
			refCode
			referenceFramework
			referenceID
			references
			source
			standardID
			status
			subcategory
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateControl(ctx context.Context, input CreateControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateControl, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateControl
	if err := c.Client.Post(ctx, "CreateControl", CreateControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteControlDocument = `mutation DeleteControl ($deleteControlId: ID!) {
	deleteControl(id: $deleteControlId) {
		deletedID
	}
}
`

func (c *Client) DeleteControl(ctx context.Context, deleteControlID string, interceptors ...clientv2.RequestInterceptor) (*DeleteControl, error) {
	vars := map[string]any{
		"deleteControlId": deleteControlID,
	}

	var res DeleteControl
	if err := c.Client.Post(ctx, "DeleteControl", DeleteControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllControlsDocument = `query GetAllControls {
	controls {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				assessmentMethods
				assessmentObjectives
				auditorReferenceID
				category
				categoryID
				controlOwnerID
				controlQuestions
				controlType
				createdAt
				createdBy
				delegateID
				description
				displayID
				exampleEvidence
				id
				implementationGuidance
				mappedCategories
				ownerID
				refCode
				referenceFramework
				referenceID
				references
				source
				standardID
				status
				subcategory
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllControls(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControls, error) {
	vars := map[string]any{}

	var res GetAllControls
	if err := c.Client.Post(ctx, "GetAllControls", GetAllControlsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlByIDDocument = `query GetControlByID ($controlId: ID!) {
	control(id: $controlId) {
		assessmentMethods
		assessmentObjectives
		auditorReferenceID
		category
		categoryID
		controlOwnerID
		controlQuestions
		controlType
		createdAt
		createdBy
		delegateID
		description
		displayID
		exampleEvidence
		id
		implementationGuidance
		mappedCategories
		ownerID
		refCode
		referenceFramework
		referenceID
		references
		source
		standardID
		status
		subcategory
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetControlByID(ctx context.Context, controlID string, interceptors ...clientv2.RequestInterceptor) (*GetControlByID, error) {
	vars := map[string]any{
		"controlId": controlID,
	}

	var res GetControlByID
	if err := c.Client.Post(ctx, "GetControlByID", GetControlByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlsDocument = `query GetControls ($first: Int, $last: Int, $where: ControlWhereInput) {
	controls(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				assessmentMethods
				assessmentObjectives
				auditorReferenceID
				category
				categoryID
				controlOwnerID
				controlQuestions
				controlType
				createdAt
				createdBy
				delegateID
				description
				displayID
				exampleEvidence
				id
				implementationGuidance
				mappedCategories
				ownerID
				refCode
				referenceFramework
				referenceID
				references
				source
				standardID
				status
				subcategory
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetControls(ctx context.Context, first *int64, last *int64, where *ControlWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControls, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetControls
	if err := c.Client.Post(ctx, "GetControls", GetControlsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateControlDocument = `mutation UpdateControl ($updateControlId: ID!, $input: UpdateControlInput!) {
	updateControl(id: $updateControlId, input: $input) {
		control {
			assessmentMethods
			assessmentObjectives
			auditorReferenceID
			category
			categoryID
			controlOwnerID
			controlQuestions
			controlType
			createdAt
			createdBy
			delegateID
			description
			displayID
			exampleEvidence
			id
			implementationGuidance
			mappedCategories
			ownerID
			refCode
			referenceFramework
			referenceID
			references
			source
			standardID
			status
			subcategory
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateControl(ctx context.Context, updateControlID string, input UpdateControlInput, interceptors ...clientv2.RequestInterceptor) (*UpdateControl, error) {
	vars := map[string]any{
		"updateControlId": updateControlID,
		"input":           input,
	}

	var res UpdateControl
	if err := c.Client.Post(ctx, "UpdateControl", UpdateControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateControlsByCloneDocument = `mutation CreateControlsByClone ($input: CloneControlInput!) {
	createControlsByClone(input: $input) {
		controls {
			assessmentMethods
			assessmentObjectives
			category
			categoryID
			controlQuestions
			controlType
			createdAt
			createdBy
			description
			displayID
			exampleEvidence
			id
			implementationGuidance
			mappedCategories
			ownerID
			refCode
			references
			referenceFramework
			source
			standardID
			status
			subcategory
			tags
			updatedAt
			updatedBy
			subcontrols {
				edges {
					node {
						id
						refCode
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateControlsByClone(ctx context.Context, input CloneControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateControlsByClone, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateControlsByClone
	if err := c.Client.Post(ctx, "CreateControlsByClone", CreateControlsByCloneDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateControlsByCloneReturnIDDocument = `mutation CreateControlsByCloneReturnID ($input: CloneControlInput!) {
	createControlsByClone(input: $input) {
		controls {
			id
		}
	}
}
`

func (c *Client) CreateControlsByCloneReturnID(ctx context.Context, input CloneControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateControlsByCloneReturnID, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateControlsByCloneReturnID
	if err := c.Client.Post(ctx, "CreateControlsByCloneReturnID", CreateControlsByCloneReturnIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlCategoriesDocument = `query GetControlCategories {
	controlCategories
}
`

func (c *Client) GetControlCategories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetControlCategories, error) {
	vars := map[string]any{}

	var res GetControlCategories
	if err := c.Client.Post(ctx, "GetControlCategories", GetControlCategoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlCategoriesWithFrameworkDocument = `query GetControlCategoriesWithFramework ($where: ControlWhereInput) {
	controlCategoriesByFramework(where: $where) {
		node {
			name
			referenceFramework
		}
	}
}
`

func (c *Client) GetControlCategoriesWithFramework(ctx context.Context, where *ControlWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlCategoriesWithFramework, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetControlCategoriesWithFramework
	if err := c.Client.Post(ctx, "GetControlCategoriesWithFramework", GetControlCategoriesWithFrameworkDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlsGroupByCategoryDocument = `query GetControlsGroupByCategory ($first: Int, $last: Int, $after: Cursor, $before: Cursor, $where: ControlWhereInput, $orderBy: [ControlOrder!], $category: String) {
	controlsGroupByCategory(first: $first, last: $last, after: $after, before: $before, where: $where, orderBy: $orderBy, category: $category) {
		edges {
			node {
				category
				controls {
					edges {
						node {
							id
							refCode
							referenceFramework
							ownerID
						}
					}
					totalCount
					pageInfo {
						endCursor
						hasNextPage
						hasPreviousPage
						startCursor
					}
				}
			}
		}
	}
}
`

func (c *Client) GetControlsGroupByCategory(ctx context.Context, first *int64, last *int64, after *string, before *string, where *ControlWhereInput, orderBy []*ControlOrder, category *string, interceptors ...clientv2.RequestInterceptor) (*GetControlsGroupByCategory, error) {
	vars := map[string]any{
		"first":    first,
		"last":     last,
		"after":    after,
		"before":   before,
		"where":    where,
		"orderBy":  orderBy,
		"category": category,
	}

	var res GetControlsGroupByCategory
	if err := c.Client.Post(ctx, "GetControlsGroupByCategory", GetControlsGroupByCategoryDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlSubcategoriesDocument = `query GetControlSubcategories {
	controlSubcategories
}
`

func (c *Client) GetControlSubcategories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetControlSubcategories, error) {
	vars := map[string]any{}

	var res GetControlSubcategories
	if err := c.Client.Post(ctx, "GetControlSubcategories", GetControlSubcategoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlSubcategoriesWithFrameworkDocument = `query GetControlSubcategoriesWithFramework ($where: ControlWhereInput) {
	controlSubcategoriesByFramework(where: $where) {
		node {
			name
			referenceFramework
		}
	}
}
`

func (c *Client) GetControlSubcategoriesWithFramework(ctx context.Context, where *ControlWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlSubcategoriesWithFramework, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetControlSubcategoriesWithFramework
	if err := c.Client.Post(ctx, "GetControlSubcategoriesWithFramework", GetControlSubcategoriesWithFrameworkDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllControlHistoriesDocument = `query GetAllControlHistories {
	controlHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				assessmentMethods
				assessmentObjectives
				auditorReferenceID
				category
				categoryID
				controlOwnerID
				controlQuestions
				controlType
				createdAt
				createdBy
				delegateID
				description
				displayID
				exampleEvidence
				historyTime
				id
				implementationGuidance
				mappedCategories
				operation
				ownerID
				ref
				refCode
				referenceFramework
				referenceID
				references
				source
				standardID
				status
				subcategory
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllControlHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlHistories, error) {
	vars := map[string]any{}

	var res GetAllControlHistories
	if err := c.Client.Post(ctx, "GetAllControlHistories", GetAllControlHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlHistoriesDocument = `query GetControlHistories ($first: Int, $last: Int, $where: ControlHistoryWhereInput) {
	controlHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				assessmentMethods
				assessmentObjectives
				auditorReferenceID
				category
				categoryID
				controlOwnerID
				controlQuestions
				controlType
				createdAt
				createdBy
				delegateID
				description
				displayID
				exampleEvidence
				historyTime
				id
				implementationGuidance
				mappedCategories
				operation
				ownerID
				ref
				refCode
				referenceFramework
				referenceID
				references
				source
				standardID
				status
				subcategory
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetControlHistories(ctx context.Context, first *int64, last *int64, where *ControlHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetControlHistories
	if err := c.Client.Post(ctx, "GetControlHistories", GetControlHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVControlImplementationDocument = `mutation CreateBulkCSVControlImplementation ($input: Upload!) {
	createBulkCSVControlImplementation(input: $input) {
		controlImplementations {
			createdAt
			createdBy
			details
			id
			implementationDate
			ownerID
			status
			tags
			updatedAt
			updatedBy
			verificationDate
			verified
			controls {
				edges {
					node {
						refCode
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVControlImplementation(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVControlImplementation, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVControlImplementation
	if err := c.Client.Post(ctx, "CreateBulkCSVControlImplementation", CreateBulkCSVControlImplementationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkControlImplementationDocument = `mutation CreateBulkControlImplementation ($input: [CreateControlImplementationInput!]) {
	createBulkControlImplementation(input: $input) {
		controlImplementations {
			createdAt
			createdBy
			details
			id
			implementationDate
			ownerID
			status
			tags
			updatedAt
			updatedBy
			verificationDate
			verified
			controls {
				edges {
					node {
						refCode
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateBulkControlImplementation(ctx context.Context, input []*CreateControlImplementationInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkControlImplementation, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkControlImplementation
	if err := c.Client.Post(ctx, "CreateBulkControlImplementation", CreateBulkControlImplementationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateControlImplementationDocument = `mutation CreateControlImplementation ($input: CreateControlImplementationInput!) {
	createControlImplementation(input: $input) {
		controlImplementation {
			createdAt
			createdBy
			details
			id
			implementationDate
			ownerID
			status
			tags
			updatedAt
			updatedBy
			verificationDate
			verified
			controls {
				edges {
					node {
						refCode
					}
				}
			}
			subcontrols {
				edges {
					node {
						refCode
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateControlImplementation(ctx context.Context, input CreateControlImplementationInput, interceptors ...clientv2.RequestInterceptor) (*CreateControlImplementation, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateControlImplementation
	if err := c.Client.Post(ctx, "CreateControlImplementation", CreateControlImplementationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteControlImplementationDocument = `mutation DeleteControlImplementation ($deleteControlImplementationId: ID!) {
	deleteControlImplementation(id: $deleteControlImplementationId) {
		deletedID
	}
}
`

func (c *Client) DeleteControlImplementation(ctx context.Context, deleteControlImplementationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteControlImplementation, error) {
	vars := map[string]any{
		"deleteControlImplementationId": deleteControlImplementationID,
	}

	var res DeleteControlImplementation
	if err := c.Client.Post(ctx, "DeleteControlImplementation", DeleteControlImplementationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllControlImplementationsDocument = `query GetAllControlImplementations {
	controlImplementations {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				details
				id
				implementationDate
				ownerID
				status
				tags
				updatedAt
				updatedBy
				verificationDate
				verified
				controls {
					edges {
						node {
							refCode
						}
					}
				}
				subcontrols {
					edges {
						node {
							refCode
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetAllControlImplementations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlImplementations, error) {
	vars := map[string]any{}

	var res GetAllControlImplementations
	if err := c.Client.Post(ctx, "GetAllControlImplementations", GetAllControlImplementationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlImplementationByIDDocument = `query GetControlImplementationByID ($controlImplementationId: ID!) {
	controlImplementation(id: $controlImplementationId) {
		createdAt
		createdBy
		details
		id
		implementationDate
		ownerID
		status
		tags
		updatedAt
		updatedBy
		verificationDate
		verified
		controls {
			edges {
				node {
					refCode
				}
			}
		}
		subcontrols {
			edges {
				node {
					refCode
				}
			}
		}
	}
}
`

func (c *Client) GetControlImplementationByID(ctx context.Context, controlImplementationID string, interceptors ...clientv2.RequestInterceptor) (*GetControlImplementationByID, error) {
	vars := map[string]any{
		"controlImplementationId": controlImplementationID,
	}

	var res GetControlImplementationByID
	if err := c.Client.Post(ctx, "GetControlImplementationByID", GetControlImplementationByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlImplementationsDocument = `query GetControlImplementations ($first: Int, $last: Int, $where: ControlImplementationWhereInput) {
	controlImplementations(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				details
				id
				implementationDate
				ownerID
				status
				tags
				updatedAt
				updatedBy
				verificationDate
				verified
				controls {
					edges {
						node {
							refCode
						}
					}
				}
				subcontrols {
					edges {
						node {
							refCode
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetControlImplementations(ctx context.Context, first *int64, last *int64, where *ControlImplementationWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlImplementations, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetControlImplementations
	if err := c.Client.Post(ctx, "GetControlImplementations", GetControlImplementationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateControlImplementationDocument = `mutation UpdateControlImplementation ($updateControlImplementationId: ID!, $input: UpdateControlImplementationInput!) {
	updateControlImplementation(id: $updateControlImplementationId, input: $input) {
		controlImplementation {
			createdAt
			createdBy
			details
			id
			implementationDate
			ownerID
			status
			tags
			updatedAt
			updatedBy
			verificationDate
			verified
			controls {
				edges {
					node {
						refCode
					}
				}
			}
			subcontrols {
				edges {
					node {
						refCode
					}
				}
			}
		}
	}
}
`

func (c *Client) UpdateControlImplementation(ctx context.Context, updateControlImplementationID string, input UpdateControlImplementationInput, interceptors ...clientv2.RequestInterceptor) (*UpdateControlImplementation, error) {
	vars := map[string]any{
		"updateControlImplementationId": updateControlImplementationID,
		"input":                         input,
	}

	var res UpdateControlImplementation
	if err := c.Client.Post(ctx, "UpdateControlImplementation", UpdateControlImplementationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllControlImplementationHistoriesDocument = `query GetAllControlImplementationHistories {
	controlImplementationHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				details
				historyTime
				id
				implementationDate
				operation
				ownerID
				ref
				status
				tags
				updatedAt
				updatedBy
				verificationDate
				verified
			}
		}
	}
}
`

func (c *Client) GetAllControlImplementationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlImplementationHistories, error) {
	vars := map[string]any{}

	var res GetAllControlImplementationHistories
	if err := c.Client.Post(ctx, "GetAllControlImplementationHistories", GetAllControlImplementationHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlImplementationHistoriesDocument = `query GetControlImplementationHistories ($first: Int, $last: Int, $where: ControlImplementationHistoryWhereInput) {
	controlImplementationHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				details
				historyTime
				id
				implementationDate
				operation
				ownerID
				ref
				status
				tags
				updatedAt
				updatedBy
				verificationDate
				verified
			}
		}
	}
}
`

func (c *Client) GetControlImplementationHistories(ctx context.Context, first *int64, last *int64, where *ControlImplementationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlImplementationHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetControlImplementationHistories
	if err := c.Client.Post(ctx, "GetControlImplementationHistories", GetControlImplementationHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkControlObjectiveDocument = `mutation CreateBulkControlObjective ($input: [CreateControlObjectiveInput!]) {
	createBulkControlObjective(input: $input) {
		controlObjectives {
			category
			controlObjectiveType
			createdAt
			createdBy
			desiredOutcome
			displayID
			id
			name
			ownerID
			revision
			source
			status
			subcategory
			tags
			updatedAt
			updatedBy
			controls {
				edges {
					node {
						refCode
					}
				}
			}
			subcontrols {
				edges {
					node {
						refCode
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateBulkControlObjective(ctx context.Context, input []*CreateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkControlObjective, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkControlObjective
	if err := c.Client.Post(ctx, "CreateBulkControlObjective", CreateBulkControlObjectiveDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVControlObjectiveDocument = `mutation CreateBulkCSVControlObjective ($input: Upload!) {
	createBulkCSVControlObjective(input: $input) {
		controlObjectives {
			category
			controlObjectiveType
			createdAt
			createdBy
			desiredOutcome
			displayID
			id
			name
			ownerID
			revision
			source
			status
			subcategory
			tags
			updatedAt
			updatedBy
			controls {
				edges {
					node {
						refCode
					}
				}
			}
			subcontrols {
				edges {
					node {
						refCode
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVControlObjective(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVControlObjective, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVControlObjective
	if err := c.Client.Post(ctx, "CreateBulkCSVControlObjective", CreateBulkCSVControlObjectiveDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateControlObjectiveDocument = `mutation CreateControlObjective ($input: CreateControlObjectiveInput!) {
	createControlObjective(input: $input) {
		controlObjective {
			category
			controlObjectiveType
			createdAt
			createdBy
			desiredOutcome
			displayID
			id
			name
			ownerID
			revision
			source
			status
			subcategory
			tags
			updatedAt
			updatedBy
			controls {
				edges {
					node {
						refCode
					}
				}
			}
			subcontrols {
				edges {
					node {
						refCode
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateControlObjective(ctx context.Context, input CreateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*CreateControlObjective, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateControlObjective
	if err := c.Client.Post(ctx, "CreateControlObjective", CreateControlObjectiveDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteControlObjectiveDocument = `mutation DeleteControlObjective ($deleteControlObjectiveId: ID!) {
	deleteControlObjective(id: $deleteControlObjectiveId) {
		deletedID
	}
}
`

func (c *Client) DeleteControlObjective(ctx context.Context, deleteControlObjectiveID string, interceptors ...clientv2.RequestInterceptor) (*DeleteControlObjective, error) {
	vars := map[string]any{
		"deleteControlObjectiveId": deleteControlObjectiveID,
	}

	var res DeleteControlObjective
	if err := c.Client.Post(ctx, "DeleteControlObjective", DeleteControlObjectiveDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllControlObjectivesDocument = `query GetAllControlObjectives {
	controlObjectives {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				category
				controlObjectiveType
				createdAt
				createdBy
				desiredOutcome
				displayID
				id
				name
				ownerID
				revision
				source
				status
				subcategory
				tags
				updatedAt
				updatedBy
				controls {
					edges {
						node {
							refCode
						}
					}
				}
				subcontrols {
					edges {
						node {
							refCode
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetAllControlObjectives(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlObjectives, error) {
	vars := map[string]any{}

	var res GetAllControlObjectives
	if err := c.Client.Post(ctx, "GetAllControlObjectives", GetAllControlObjectivesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlObjectiveByIDDocument = `query GetControlObjectiveByID ($controlObjectiveId: ID!) {
	controlObjective(id: $controlObjectiveId) {
		category
		controlObjectiveType
		createdAt
		createdBy
		desiredOutcome
		displayID
		id
		name
		ownerID
		revision
		source
		status
		subcategory
		tags
		updatedAt
		updatedBy
		controls {
			edges {
				node {
					refCode
				}
			}
		}
		subcontrols {
			edges {
				node {
					refCode
				}
			}
		}
	}
}
`

func (c *Client) GetControlObjectiveByID(ctx context.Context, controlObjectiveID string, interceptors ...clientv2.RequestInterceptor) (*GetControlObjectiveByID, error) {
	vars := map[string]any{
		"controlObjectiveId": controlObjectiveID,
	}

	var res GetControlObjectiveByID
	if err := c.Client.Post(ctx, "GetControlObjectiveByID", GetControlObjectiveByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlObjectivesDocument = `query GetControlObjectives ($first: Int, $last: Int, $where: ControlObjectiveWhereInput) {
	controlObjectives(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				category
				controlObjectiveType
				createdAt
				createdBy
				desiredOutcome
				displayID
				id
				name
				ownerID
				revision
				source
				status
				subcategory
				tags
				updatedAt
				updatedBy
				controls {
					edges {
						node {
							refCode
						}
					}
				}
				subcontrols {
					edges {
						node {
							refCode
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetControlObjectives(ctx context.Context, first *int64, last *int64, where *ControlObjectiveWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlObjectives, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetControlObjectives
	if err := c.Client.Post(ctx, "GetControlObjectives", GetControlObjectivesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateControlObjectiveDocument = `mutation UpdateControlObjective ($updateControlObjectiveId: ID!, $input: UpdateControlObjectiveInput!) {
	updateControlObjective(id: $updateControlObjectiveId, input: $input) {
		controlObjective {
			category
			controlObjectiveType
			createdAt
			createdBy
			desiredOutcome
			displayID
			id
			name
			ownerID
			revision
			source
			status
			subcategory
			tags
			updatedAt
			updatedBy
			controls {
				edges {
					node {
						refCode
					}
				}
			}
			subcontrols {
				edges {
					node {
						refCode
					}
				}
			}
		}
	}
}
`

func (c *Client) UpdateControlObjective(ctx context.Context, updateControlObjectiveID string, input UpdateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*UpdateControlObjective, error) {
	vars := map[string]any{
		"updateControlObjectiveId": updateControlObjectiveID,
		"input":                    input,
	}

	var res UpdateControlObjective
	if err := c.Client.Post(ctx, "UpdateControlObjective", UpdateControlObjectiveDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllControlObjectiveHistoriesDocument = `query GetAllControlObjectiveHistories {
	controlObjectiveHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				category
				controlObjectiveType
				createdAt
				createdBy
				desiredOutcome
				displayID
				historyTime
				id
				name
				operation
				ownerID
				ref
				revision
				source
				status
				subcategory
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllControlObjectiveHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlObjectiveHistories, error) {
	vars := map[string]any{}

	var res GetAllControlObjectiveHistories
	if err := c.Client.Post(ctx, "GetAllControlObjectiveHistories", GetAllControlObjectiveHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlObjectiveHistoriesDocument = `query GetControlObjectiveHistories ($first: Int, $last: Int, $where: ControlObjectiveHistoryWhereInput) {
	controlObjectiveHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				category
				controlObjectiveType
				createdAt
				createdBy
				desiredOutcome
				displayID
				historyTime
				id
				name
				operation
				ownerID
				ref
				revision
				source
				status
				subcategory
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetControlObjectiveHistories(ctx context.Context, first *int64, last *int64, where *ControlObjectiveHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlObjectiveHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetControlObjectiveHistories
	if err := c.Client.Post(ctx, "GetControlObjectiveHistories", GetControlObjectiveHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVCustomDomainDocument = `mutation CreateBulkCSVCustomDomain ($input: Upload!) {
	createBulkCSVCustomDomain(input: $input) {
		customDomains {
			cnameRecord
			createdAt
			createdBy
			dnsVerificationID
			id
			mappableDomainID
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVCustomDomain(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVCustomDomain, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVCustomDomain
	if err := c.Client.Post(ctx, "CreateBulkCSVCustomDomain", CreateBulkCSVCustomDomainDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCustomDomainDocument = `mutation CreateBulkCustomDomain ($input: [CreateCustomDomainInput!]) {
	createBulkCustomDomain(input: $input) {
		customDomains {
			cnameRecord
			createdAt
			createdBy
			dnsVerificationID
			id
			mappableDomainID
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCustomDomain(ctx context.Context, input []*CreateCustomDomainInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCustomDomain, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCustomDomain
	if err := c.Client.Post(ctx, "CreateBulkCustomDomain", CreateBulkCustomDomainDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateCustomDomainDocument = `mutation CreateCustomDomain ($input: CreateCustomDomainInput!) {
	createCustomDomain(input: $input) {
		customDomain {
			cnameRecord
			createdAt
			createdBy
			dnsVerificationID
			dnsVerification {
				id
				dnsTxtRecord
				dnsTxtValue
				dnsVerificationStatus
			}
			id
			mappableDomainID
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateCustomDomain(ctx context.Context, input CreateCustomDomainInput, interceptors ...clientv2.RequestInterceptor) (*CreateCustomDomain, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateCustomDomain
	if err := c.Client.Post(ctx, "CreateCustomDomain", CreateCustomDomainDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteCustomDomainDocument = `mutation DeleteCustomDomain ($deleteCustomDomainId: ID!) {
	deleteCustomDomain(id: $deleteCustomDomainId) {
		deletedID
	}
}
`

func (c *Client) DeleteCustomDomain(ctx context.Context, deleteCustomDomainID string, interceptors ...clientv2.RequestInterceptor) (*DeleteCustomDomain, error) {
	vars := map[string]any{
		"deleteCustomDomainId": deleteCustomDomainID,
	}

	var res DeleteCustomDomain
	if err := c.Client.Post(ctx, "DeleteCustomDomain", DeleteCustomDomainDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllCustomDomainsDocument = `query GetAllCustomDomains {
	customDomains {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				cnameRecord
				createdAt
				createdBy
				dnsVerificationID
				dnsVerification {
					id
					dnsTxtRecord
					dnsTxtValue
					dnsVerificationStatus
					dnsVerificationStatusReason
					acmeChallengePath
					expectedAcmeChallengeValue
					acmeChallengeStatus
					acmeChallengeStatusReason
					cloudflareHostnameID
				}
				id
				mappableDomain {
					id
					name
					zoneID
				}
				ownerID
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllCustomDomains(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllCustomDomains, error) {
	vars := map[string]any{}

	var res GetAllCustomDomains
	if err := c.Client.Post(ctx, "GetAllCustomDomains", GetAllCustomDomainsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetCustomDomainByIDDocument = `query GetCustomDomainByID ($customDomainId: ID!) {
	customDomain(id: $customDomainId) {
		cnameRecord
		createdAt
		createdBy
		dnsVerificationID
		dnsVerification {
			id
			dnsTxtRecord
			dnsTxtValue
			dnsVerificationStatus
			dnsVerificationStatusReason
			acmeChallengePath
			expectedAcmeChallengeValue
			acmeChallengeStatus
			acmeChallengeStatusReason
			cloudflareHostnameID
		}
		mappableDomain {
			id
			name
			zoneID
		}
		id
		mappableDomainID
		ownerID
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetCustomDomainByID(ctx context.Context, customDomainID string, interceptors ...clientv2.RequestInterceptor) (*GetCustomDomainByID, error) {
	vars := map[string]any{
		"customDomainId": customDomainID,
	}

	var res GetCustomDomainByID
	if err := c.Client.Post(ctx, "GetCustomDomainByID", GetCustomDomainByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetCustomDomainsDocument = `query GetCustomDomains ($first: Int, $last: Int, $where: CustomDomainWhereInput) {
	customDomains(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				cnameRecord
				createdAt
				createdBy
				dnsVerificationID
				dnsVerification {
					id
					dnsTxtRecord
					dnsTxtValue
					dnsVerificationStatus
				}
				id
				mappableDomainID
				ownerID
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetCustomDomains(ctx context.Context, first *int64, last *int64, where *CustomDomainWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetCustomDomains, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetCustomDomains
	if err := c.Client.Post(ctx, "GetCustomDomains", GetCustomDomainsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateCustomDomainDocument = `mutation UpdateCustomDomain ($updateCustomDomainId: ID!, $input: UpdateCustomDomainInput!) {
	updateCustomDomain(id: $updateCustomDomainId, input: $input) {
		customDomain {
			cnameRecord
			createdAt
			createdBy
			dnsVerificationID
			dnsVerification {
				id
				dnsTxtRecord
				dnsTxtValue
				dnsVerificationStatus
			}
			id
			mappableDomainID
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateCustomDomain(ctx context.Context, updateCustomDomainID string, input UpdateCustomDomainInput, interceptors ...clientv2.RequestInterceptor) (*UpdateCustomDomain, error) {
	vars := map[string]any{
		"updateCustomDomainId": updateCustomDomainID,
		"input":                input,
	}

	var res UpdateCustomDomain
	if err := c.Client.Post(ctx, "UpdateCustomDomain", UpdateCustomDomainDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllCustomDomainHistoriesDocument = `query GetAllCustomDomainHistories {
	customDomainHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				cnameRecord
				createdAt
				createdBy
				dnsVerificationID
				historyTime
				id
				mappableDomainID
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllCustomDomainHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllCustomDomainHistories, error) {
	vars := map[string]any{}

	var res GetAllCustomDomainHistories
	if err := c.Client.Post(ctx, "GetAllCustomDomainHistories", GetAllCustomDomainHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetCustomDomainHistoriesDocument = `query GetCustomDomainHistories ($first: Int, $last: Int, $where: CustomDomainHistoryWhereInput) {
	customDomainHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				cnameRecord
				createdAt
				createdBy
				dnsVerificationID
				historyTime
				id
				mappableDomainID
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetCustomDomainHistories(ctx context.Context, first *int64, last *int64, where *CustomDomainHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetCustomDomainHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetCustomDomainHistories
	if err := c.Client.Post(ctx, "GetCustomDomainHistories", GetCustomDomainHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVDNSVerificationDocument = `mutation CreateBulkCSVDNSVerification ($input: Upload!) {
	createBulkCSVDNSVerification(input: $input) {
		dnsVerifications {
			acmeChallengePath
			acmeChallengeStatus
			acmeChallengeStatusReason
			cloudflareHostnameID
			createdAt
			createdBy
			dnsTxtRecord
			dnsTxtValue
			dnsVerificationStatus
			dnsVerificationStatusReason
			expectedAcmeChallengeValue
			id
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVDNSVerification(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVDNSVerification, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVDNSVerification
	if err := c.Client.Post(ctx, "CreateBulkCSVDNSVerification", CreateBulkCSVDNSVerificationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkDNSVerificationDocument = `mutation CreateBulkDNSVerification ($input: [CreateDNSVerificationInput!]) {
	createBulkDNSVerification(input: $input) {
		dnsVerifications {
			acmeChallengePath
			acmeChallengeStatus
			acmeChallengeStatusReason
			cloudflareHostnameID
			createdAt
			createdBy
			dnsTxtRecord
			dnsTxtValue
			dnsVerificationStatus
			dnsVerificationStatusReason
			expectedAcmeChallengeValue
			id
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkDNSVerification(ctx context.Context, input []*CreateDNSVerificationInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkDNSVerification, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkDNSVerification
	if err := c.Client.Post(ctx, "CreateBulkDNSVerification", CreateBulkDNSVerificationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateDNSVerificationDocument = `mutation CreateDNSVerification ($input: CreateDNSVerificationInput!) {
	createDNSVerification(input: $input) {
		dnsVerification {
			acmeChallengePath
			acmeChallengeStatus
			acmeChallengeStatusReason
			cloudflareHostnameID
			createdAt
			createdBy
			dnsTxtRecord
			dnsTxtValue
			dnsVerificationStatus
			dnsVerificationStatusReason
			expectedAcmeChallengeValue
			id
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateDNSVerification(ctx context.Context, input CreateDNSVerificationInput, interceptors ...clientv2.RequestInterceptor) (*CreateDNSVerification, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateDNSVerification
	if err := c.Client.Post(ctx, "CreateDNSVerification", CreateDNSVerificationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteDNSVerificationDocument = `mutation DeleteDNSVerification ($deleteDNSVerificationId: ID!) {
	deleteDNSVerification(id: $deleteDNSVerificationId) {
		deletedID
	}
}
`

func (c *Client) DeleteDNSVerification(ctx context.Context, deleteDNSVerificationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteDNSVerification, error) {
	vars := map[string]any{
		"deleteDNSVerificationId": deleteDNSVerificationID,
	}

	var res DeleteDNSVerification
	if err := c.Client.Post(ctx, "DeleteDNSVerification", DeleteDNSVerificationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllDNSVerificationsDocument = `query GetAllDNSVerifications {
	dnsVerifications {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				acmeChallengePath
				acmeChallengeStatus
				acmeChallengeStatusReason
				cloudflareHostnameID
				createdAt
				createdBy
				dnsTxtRecord
				dnsTxtValue
				dnsVerificationStatus
				dnsVerificationStatusReason
				expectedAcmeChallengeValue
				id
				ownerID
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllDNSVerifications(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllDNSVerifications, error) {
	vars := map[string]any{}

	var res GetAllDNSVerifications
	if err := c.Client.Post(ctx, "GetAllDNSVerifications", GetAllDNSVerificationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetDNSVerificationByIDDocument = `query GetDNSVerificationByID ($dnsVerificationId: ID!) {
	dnsVerification(id: $dnsVerificationId) {
		acmeChallengePath
		acmeChallengeStatus
		acmeChallengeStatusReason
		cloudflareHostnameID
		createdAt
		createdBy
		dnsTxtRecord
		dnsTxtValue
		dnsVerificationStatus
		dnsVerificationStatusReason
		expectedAcmeChallengeValue
		id
		ownerID
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetDNSVerificationByID(ctx context.Context, dnsVerificationID string, interceptors ...clientv2.RequestInterceptor) (*GetDNSVerificationByID, error) {
	vars := map[string]any{
		"dnsVerificationId": dnsVerificationID,
	}

	var res GetDNSVerificationByID
	if err := c.Client.Post(ctx, "GetDNSVerificationByID", GetDNSVerificationByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetDNSVerificationsDocument = `query GetDNSVerifications ($first: Int, $last: Int, $where: DNSVerificationWhereInput) {
	dnsVerifications(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				acmeChallengePath
				acmeChallengeStatus
				acmeChallengeStatusReason
				cloudflareHostnameID
				createdAt
				createdBy
				dnsTxtRecord
				dnsTxtValue
				dnsVerificationStatus
				dnsVerificationStatusReason
				expectedAcmeChallengeValue
				id
				ownerID
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetDNSVerifications(ctx context.Context, first *int64, last *int64, where *DNSVerificationWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetDNSVerifications, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetDNSVerifications
	if err := c.Client.Post(ctx, "GetDNSVerifications", GetDNSVerificationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateDNSVerificationDocument = `mutation UpdateDNSVerification ($updateDNSVerificationId: ID!, $input: UpdateDNSVerificationInput!) {
	updateDNSVerification(id: $updateDNSVerificationId, input: $input) {
		dnsVerification {
			acmeChallengePath
			acmeChallengeStatus
			acmeChallengeStatusReason
			cloudflareHostnameID
			createdAt
			createdBy
			dnsTxtRecord
			dnsTxtValue
			dnsVerificationStatus
			dnsVerificationStatusReason
			expectedAcmeChallengeValue
			id
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateDNSVerification(ctx context.Context, updateDNSVerificationID string, input UpdateDNSVerificationInput, interceptors ...clientv2.RequestInterceptor) (*UpdateDNSVerification, error) {
	vars := map[string]any{
		"updateDNSVerificationId": updateDNSVerificationID,
		"input":                   input,
	}

	var res UpdateDNSVerification
	if err := c.Client.Post(ctx, "UpdateDNSVerification", UpdateDNSVerificationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllDNSVerificationHistoriesDocument = `query GetAllDNSVerificationHistories {
	dnsVerificationHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				acmeChallengePath
				acmeChallengeStatus
				acmeChallengeStatusReason
				cloudflareHostnameID
				createdAt
				createdBy
				dnsTxtRecord
				dnsTxtValue
				dnsVerificationStatus
				dnsVerificationStatusReason
				expectedAcmeChallengeValue
				historyTime
				id
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllDNSVerificationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllDNSVerificationHistories, error) {
	vars := map[string]any{}

	var res GetAllDNSVerificationHistories
	if err := c.Client.Post(ctx, "GetAllDNSVerificationHistories", GetAllDNSVerificationHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetDNSVerificationHistoriesDocument = `query GetDNSVerificationHistories ($first: Int, $last: Int, $where: DNSVerificationHistoryWhereInput) {
	dnsVerificationHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				acmeChallengePath
				acmeChallengeStatus
				acmeChallengeStatusReason
				cloudflareHostnameID
				createdAt
				createdBy
				dnsTxtRecord
				dnsTxtValue
				dnsVerificationStatus
				dnsVerificationStatusReason
				expectedAcmeChallengeValue
				historyTime
				id
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetDNSVerificationHistories(ctx context.Context, first *int64, last *int64, where *DNSVerificationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetDNSVerificationHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetDNSVerificationHistories
	if err := c.Client.Post(ctx, "GetDNSVerificationHistories", GetDNSVerificationHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVDocumentDataDocument = `mutation CreateBulkCSVDocumentData ($input: Upload!) {
	createBulkCSVDocumentData(input: $input) {
		documentData {
			createdAt
			createdBy
			data
			id
			ownerID
			tags
			templateID
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVDocumentData(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVDocumentData, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVDocumentData
	if err := c.Client.Post(ctx, "CreateBulkCSVDocumentData", CreateBulkCSVDocumentDataDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkDocumentDataDocument = `mutation CreateBulkDocumentData ($input: [CreateDocumentDataInput!]) {
	createBulkDocumentData(input: $input) {
		documentData {
			createdAt
			createdBy
			data
			id
			ownerID
			tags
			templateID
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkDocumentData(ctx context.Context, input []*CreateDocumentDataInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkDocumentData, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkDocumentData
	if err := c.Client.Post(ctx, "CreateBulkDocumentData", CreateBulkDocumentDataDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateDocumentDataDocument = `mutation CreateDocumentData ($input: CreateDocumentDataInput!) {
	createDocumentData(input: $input) {
		documentData {
			createdAt
			createdBy
			data
			id
			ownerID
			tags
			templateID
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateDocumentData(ctx context.Context, input CreateDocumentDataInput, interceptors ...clientv2.RequestInterceptor) (*CreateDocumentData, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateDocumentData
	if err := c.Client.Post(ctx, "CreateDocumentData", CreateDocumentDataDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteDocumentDataDocument = `mutation DeleteDocumentData ($deleteDocumentDataId: ID!) {
	deleteDocumentData(id: $deleteDocumentDataId) {
		deletedID
	}
}
`

func (c *Client) DeleteDocumentData(ctx context.Context, deleteDocumentDataID string, interceptors ...clientv2.RequestInterceptor) (*DeleteDocumentData, error) {
	vars := map[string]any{
		"deleteDocumentDataId": deleteDocumentDataID,
	}

	var res DeleteDocumentData
	if err := c.Client.Post(ctx, "DeleteDocumentData", DeleteDocumentDataDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetDocumentDataByIDDocument = `query GetDocumentDataByID ($documentDataId: ID!) {
	documentData(id: $documentDataId) {
		createdAt
		createdBy
		data
		id
		ownerID
		tags
		templateID
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetDocumentDataByID(ctx context.Context, documentDataID string, interceptors ...clientv2.RequestInterceptor) (*GetDocumentDataByID, error) {
	vars := map[string]any{
		"documentDataId": documentDataID,
	}

	var res GetDocumentDataByID
	if err := c.Client.Post(ctx, "GetDocumentDataByID", GetDocumentDataByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateDocumentDataDocument = `mutation UpdateDocumentData ($updateDocumentDataId: ID!, $input: UpdateDocumentDataInput!) {
	updateDocumentData(id: $updateDocumentDataId, input: $input) {
		documentData {
			createdAt
			createdBy
			data
			id
			ownerID
			tags
			templateID
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateDocumentData(ctx context.Context, updateDocumentDataID string, input UpdateDocumentDataInput, interceptors ...clientv2.RequestInterceptor) (*UpdateDocumentData, error) {
	vars := map[string]any{
		"updateDocumentDataId": updateDocumentDataID,
		"input":                input,
	}

	var res UpdateDocumentData
	if err := c.Client.Post(ctx, "UpdateDocumentData", UpdateDocumentDataDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllDocumentDataHistoriesDocument = `query GetAllDocumentDataHistories {
	documentDataHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				data
				historyTime
				id
				operation
				ownerID
				ref
				tags
				templateID
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllDocumentDataHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllDocumentDataHistories, error) {
	vars := map[string]any{}

	var res GetAllDocumentDataHistories
	if err := c.Client.Post(ctx, "GetAllDocumentDataHistories", GetAllDocumentDataHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetDocumentDataHistoriesDocument = `query GetDocumentDataHistories ($first: Int, $last: Int, $where: DocumentDataHistoryWhereInput) {
	documentDataHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				data
				historyTime
				id
				operation
				ownerID
				ref
				tags
				templateID
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetDocumentDataHistories(ctx context.Context, first *int64, last *int64, where *DocumentDataHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetDocumentDataHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetDocumentDataHistories
	if err := c.Client.Post(ctx, "GetDocumentDataHistories", GetDocumentDataHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVEntityDocument = `mutation CreateBulkCSVEntity ($input: Upload!) {
	createBulkCSVEntity(input: $input) {
		entities {
			createdAt
			createdBy
			description
			displayName
			domains
			entityTypeID
			id
			name
			ownerID
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVEntity(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntity, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVEntity
	if err := c.Client.Post(ctx, "CreateBulkCSVEntity", CreateBulkCSVEntityDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkEntityDocument = `mutation CreateBulkEntity ($input: [CreateEntityInput!]) {
	createBulkEntity(input: $input) {
		entities {
			createdAt
			createdBy
			description
			displayName
			domains
			entityTypeID
			id
			name
			ownerID
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkEntity(ctx context.Context, input []*CreateEntityInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntity, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkEntity
	if err := c.Client.Post(ctx, "CreateBulkEntity", CreateBulkEntityDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateEntityDocument = `mutation CreateEntity ($input: CreateEntityInput!) {
	createEntity(input: $input) {
		entity {
			createdAt
			createdBy
			description
			displayName
			domains
			entityTypeID
			id
			name
			ownerID
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateEntity(ctx context.Context, input CreateEntityInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntity, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateEntity
	if err := c.Client.Post(ctx, "CreateEntity", CreateEntityDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteEntityDocument = `mutation DeleteEntity ($deleteEntityId: ID!) {
	deleteEntity(id: $deleteEntityId) {
		deletedID
	}
}
`

func (c *Client) DeleteEntity(ctx context.Context, deleteEntityID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntity, error) {
	vars := map[string]any{
		"deleteEntityId": deleteEntityID,
	}

	var res DeleteEntity
	if err := c.Client.Post(ctx, "DeleteEntity", DeleteEntityDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEntitiesDocument = `query GetAllEntities {
	entities {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				domains
				entityTypeID
				id
				name
				ownerID
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllEntities(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntities, error) {
	vars := map[string]any{}

	var res GetAllEntities
	if err := c.Client.Post(ctx, "GetAllEntities", GetAllEntitiesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntitiesDocument = `query GetEntities ($first: Int, $last: Int, $where: EntityWhereInput) {
	entities(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				domains
				entityTypeID
				id
				name
				ownerID
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetEntities(ctx context.Context, first *int64, last *int64, where *EntityWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntities, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetEntities
	if err := c.Client.Post(ctx, "GetEntities", GetEntitiesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntityByIDDocument = `query GetEntityByID ($entityId: ID!) {
	entity(id: $entityId) {
		createdAt
		createdBy
		description
		displayName
		domains
		entityTypeID
		id
		name
		ownerID
		status
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetEntityByID(ctx context.Context, entityID string, interceptors ...clientv2.RequestInterceptor) (*GetEntityByID, error) {
	vars := map[string]any{
		"entityId": entityID,
	}

	var res GetEntityByID
	if err := c.Client.Post(ctx, "GetEntityByID", GetEntityByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateEntityDocument = `mutation UpdateEntity ($updateEntityId: ID!, $input: UpdateEntityInput!) {
	updateEntity(id: $updateEntityId, input: $input) {
		entity {
			createdAt
			createdBy
			description
			displayName
			domains
			entityTypeID
			id
			name
			ownerID
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateEntity(ctx context.Context, updateEntityID string, input UpdateEntityInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntity, error) {
	vars := map[string]any{
		"updateEntityId": updateEntityID,
		"input":          input,
	}

	var res UpdateEntity
	if err := c.Client.Post(ctx, "UpdateEntity", UpdateEntityDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEntityHistoriesDocument = `query GetAllEntityHistories {
	entityHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				domains
				entityTypeID
				historyTime
				id
				name
				operation
				ownerID
				ref
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllEntityHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntityHistories, error) {
	vars := map[string]any{}

	var res GetAllEntityHistories
	if err := c.Client.Post(ctx, "GetAllEntityHistories", GetAllEntityHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntityHistoriesDocument = `query GetEntityHistories ($first: Int, $last: Int, $where: EntityHistoryWhereInput) {
	entityHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				domains
				entityTypeID
				historyTime
				id
				name
				operation
				ownerID
				ref
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetEntityHistories(ctx context.Context, first *int64, last *int64, where *EntityHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntityHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetEntityHistories
	if err := c.Client.Post(ctx, "GetEntityHistories", GetEntityHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVEntityTypeDocument = `mutation CreateBulkCSVEntityType ($input: Upload!) {
	createBulkCSVEntityType(input: $input) {
		entityTypes {
			createdAt
			createdBy
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVEntityType(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntityType, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVEntityType
	if err := c.Client.Post(ctx, "CreateBulkCSVEntityType", CreateBulkCSVEntityTypeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkEntityTypeDocument = `mutation CreateBulkEntityType ($input: [CreateEntityTypeInput!]) {
	createBulkEntityType(input: $input) {
		entityTypes {
			createdAt
			createdBy
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkEntityType(ctx context.Context, input []*CreateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntityType, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkEntityType
	if err := c.Client.Post(ctx, "CreateBulkEntityType", CreateBulkEntityTypeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateEntityTypeDocument = `mutation CreateEntityType ($input: CreateEntityTypeInput!) {
	createEntityType(input: $input) {
		entityType {
			createdAt
			createdBy
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateEntityType(ctx context.Context, input CreateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntityType, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateEntityType
	if err := c.Client.Post(ctx, "CreateEntityType", CreateEntityTypeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteEntityTypeDocument = `mutation DeleteEntityType ($deleteEntityTypeId: ID!) {
	deleteEntityType(id: $deleteEntityTypeId) {
		deletedID
	}
}
`

func (c *Client) DeleteEntityType(ctx context.Context, deleteEntityTypeID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntityType, error) {
	vars := map[string]any{
		"deleteEntityTypeId": deleteEntityTypeID,
	}

	var res DeleteEntityType
	if err := c.Client.Post(ctx, "DeleteEntityType", DeleteEntityTypeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEntityTypesDocument = `query GetAllEntityTypes {
	entityTypes {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				id
				name
				ownerID
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllEntityTypes(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntityTypes, error) {
	vars := map[string]any{}

	var res GetAllEntityTypes
	if err := c.Client.Post(ctx, "GetAllEntityTypes", GetAllEntityTypesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntityTypeByIDDocument = `query GetEntityTypeByID ($entityTypeId: ID!) {
	entityType(id: $entityTypeId) {
		createdAt
		createdBy
		id
		name
		ownerID
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetEntityTypeByID(ctx context.Context, entityTypeID string, interceptors ...clientv2.RequestInterceptor) (*GetEntityTypeByID, error) {
	vars := map[string]any{
		"entityTypeId": entityTypeID,
	}

	var res GetEntityTypeByID
	if err := c.Client.Post(ctx, "GetEntityTypeByID", GetEntityTypeByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntityTypesDocument = `query GetEntityTypes ($first: Int, $last: Int, $where: EntityTypeWhereInput) {
	entityTypes(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				id
				name
				ownerID
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetEntityTypes(ctx context.Context, first *int64, last *int64, where *EntityTypeWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntityTypes, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetEntityTypes
	if err := c.Client.Post(ctx, "GetEntityTypes", GetEntityTypesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateEntityTypeDocument = `mutation UpdateEntityType ($updateEntityTypeId: ID!, $input: UpdateEntityTypeInput!) {
	updateEntityType(id: $updateEntityTypeId, input: $input) {
		entityType {
			createdAt
			createdBy
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateEntityType(ctx context.Context, updateEntityTypeID string, input UpdateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntityType, error) {
	vars := map[string]any{
		"updateEntityTypeId": updateEntityTypeID,
		"input":              input,
	}

	var res UpdateEntityType
	if err := c.Client.Post(ctx, "UpdateEntityType", UpdateEntityTypeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEntityTypeHistoriesDocument = `query GetAllEntityTypeHistories {
	entityTypeHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllEntityTypeHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntityTypeHistories, error) {
	vars := map[string]any{}

	var res GetAllEntityTypeHistories
	if err := c.Client.Post(ctx, "GetAllEntityTypeHistories", GetAllEntityTypeHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntityTypeHistoriesDocument = `query GetEntityTypeHistories ($first: Int, $last: Int, $where: EntityTypeHistoryWhereInput) {
	entityTypeHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetEntityTypeHistories(ctx context.Context, first *int64, last *int64, where *EntityTypeHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntityTypeHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetEntityTypeHistories
	if err := c.Client.Post(ctx, "GetEntityTypeHistories", GetEntityTypeHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVEventDocument = `mutation CreateBulkCSVEvent ($input: Upload!) {
	createBulkCSVEvent(input: $input) {
		events {
			correlationID
			createdAt
			createdBy
			eventID
			eventType
			id
			metadata
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVEvent(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEvent, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVEvent
	if err := c.Client.Post(ctx, "CreateBulkCSVEvent", CreateBulkCSVEventDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkEventDocument = `mutation CreateBulkEvent ($input: [CreateEventInput!]) {
	createBulkEvent(input: $input) {
		events {
			correlationID
			createdAt
			createdBy
			eventID
			eventType
			id
			metadata
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkEvent(ctx context.Context, input []*CreateEventInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEvent, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkEvent
	if err := c.Client.Post(ctx, "CreateBulkEvent", CreateBulkEventDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateEventDocument = `mutation CreateEvent ($input: CreateEventInput!) {
	createEvent(input: $input) {
		event {
			correlationID
			createdAt
			createdBy
			eventID
			eventType
			id
			metadata
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateEvent(ctx context.Context, input CreateEventInput, interceptors ...clientv2.RequestInterceptor) (*CreateEvent, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateEvent
	if err := c.Client.Post(ctx, "CreateEvent", CreateEventDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteEventDocument = `mutation DeleteEvent ($deleteEventId: ID!) {
	deleteEvent(id: $deleteEventId) {
		deletedID
	}
}
`

func (c *Client) DeleteEvent(ctx context.Context, deleteEventID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEvent, error) {
	vars := map[string]any{
		"deleteEventId": deleteEventID,
	}

	var res DeleteEvent
	if err := c.Client.Post(ctx, "DeleteEvent", DeleteEventDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEventsDocument = `query GetAllEvents {
	events {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				correlationID
				createdAt
				createdBy
				eventID
				eventType
				id
				metadata
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllEvents(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEvents, error) {
	vars := map[string]any{}

	var res GetAllEvents
	if err := c.Client.Post(ctx, "GetAllEvents", GetAllEventsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEventByIDDocument = `query GetEventByID ($eventId: ID!) {
	event(id: $eventId) {
		correlationID
		createdAt
		createdBy
		eventID
		eventType
		id
		metadata
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetEventByID(ctx context.Context, eventID string, interceptors ...clientv2.RequestInterceptor) (*GetEventByID, error) {
	vars := map[string]any{
		"eventId": eventID,
	}

	var res GetEventByID
	if err := c.Client.Post(ctx, "GetEventByID", GetEventByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEventsDocument = `query GetEvents ($first: Int, $last: Int, $where: EventWhereInput) {
	events(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				correlationID
				createdAt
				createdBy
				eventID
				eventType
				id
				metadata
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetEvents(ctx context.Context, first *int64, last *int64, where *EventWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEvents, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetEvents
	if err := c.Client.Post(ctx, "GetEvents", GetEventsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateEventDocument = `mutation UpdateEvent ($updateEventId: ID!, $input: UpdateEventInput!) {
	updateEvent(id: $updateEventId, input: $input) {
		event {
			correlationID
			createdAt
			createdBy
			eventID
			eventType
			id
			metadata
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateEvent(ctx context.Context, updateEventID string, input UpdateEventInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEvent, error) {
	vars := map[string]any{
		"updateEventId": updateEventID,
		"input":         input,
	}

	var res UpdateEvent
	if err := c.Client.Post(ctx, "UpdateEvent", UpdateEventDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateEvidenceDocument = `mutation CreateEvidence ($input: CreateEvidenceInput!, $evidenceFiles: [Upload!]) {
	createEvidence(input: $input, evidenceFiles: $evidenceFiles) {
		evidence {
			collectionProcedure
			createdAt
			createdBy
			creationDate
			description
			displayID
			id
			isAutomated
			name
			ownerID
			renewalDate
			source
			status
			tags
			updatedAt
			updatedBy
			url
			files {
				totalCount
				edges {
					node {
						id
						presignedURL
					}
				}
			}
			controls {
				edges {
					node {
						id
						refCode
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateEvidence(ctx context.Context, input CreateEvidenceInput, evidenceFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateEvidence, error) {
	vars := map[string]any{
		"input":         input,
		"evidenceFiles": evidenceFiles,
	}

	var res CreateEvidence
	if err := c.Client.Post(ctx, "CreateEvidence", CreateEvidenceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteEvidenceDocument = `mutation DeleteEvidence ($deleteEvidenceId: ID!) {
	deleteEvidence(id: $deleteEvidenceId) {
		deletedID
	}
}
`

func (c *Client) DeleteEvidence(ctx context.Context, deleteEvidenceID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEvidence, error) {
	vars := map[string]any{
		"deleteEvidenceId": deleteEvidenceID,
	}

	var res DeleteEvidence
	if err := c.Client.Post(ctx, "DeleteEvidence", DeleteEvidenceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEvidencesDocument = `query GetAllEvidences {
	evidences {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				collectionProcedure
				createdAt
				createdBy
				creationDate
				description
				displayID
				id
				isAutomated
				name
				ownerID
				renewalDate
				source
				status
				tags
				updatedAt
				updatedBy
				url
				files {
					totalCount
					edges {
						node {
							id
							presignedURL
						}
					}
				}
				controls {
					edges {
						node {
							id
							refCode
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetAllEvidences(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEvidences, error) {
	vars := map[string]any{}

	var res GetAllEvidences
	if err := c.Client.Post(ctx, "GetAllEvidences", GetAllEvidencesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEvidenceByIDDocument = `query GetEvidenceByID ($evidenceId: ID!) {
	evidence(id: $evidenceId) {
		collectionProcedure
		createdAt
		createdBy
		creationDate
		description
		displayID
		id
		isAutomated
		name
		ownerID
		renewalDate
		source
		status
		tags
		updatedAt
		updatedBy
		url
		files {
			totalCount
			edges {
				node {
					id
					presignedURL
				}
			}
		}
		controls {
			edges {
				node {
					id
					refCode
				}
			}
		}
	}
}
`

func (c *Client) GetEvidenceByID(ctx context.Context, evidenceID string, interceptors ...clientv2.RequestInterceptor) (*GetEvidenceByID, error) {
	vars := map[string]any{
		"evidenceId": evidenceID,
	}

	var res GetEvidenceByID
	if err := c.Client.Post(ctx, "GetEvidenceByID", GetEvidenceByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEvidencesDocument = `query GetEvidences ($first: Int, $last: Int, $where: EvidenceWhereInput) {
	evidences(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				collectionProcedure
				createdAt
				createdBy
				creationDate
				description
				displayID
				id
				isAutomated
				name
				ownerID
				renewalDate
				source
				status
				tags
				updatedAt
				updatedBy
				url
				files {
					totalCount
					edges {
						node {
							id
							presignedURL
						}
					}
				}
				controls {
					edges {
						node {
							id
							refCode
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetEvidences(ctx context.Context, first *int64, last *int64, where *EvidenceWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEvidences, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetEvidences
	if err := c.Client.Post(ctx, "GetEvidences", GetEvidencesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateEvidenceDocument = `mutation UpdateEvidence ($updateEvidenceId: ID!, $input: UpdateEvidenceInput!, $evidenceFiles: [Upload!]) {
	updateEvidence(id: $updateEvidenceId, input: $input, evidenceFiles: $evidenceFiles) {
		evidence {
			collectionProcedure
			createdAt
			createdBy
			creationDate
			description
			displayID
			id
			isAutomated
			name
			ownerID
			renewalDate
			source
			status
			tags
			updatedAt
			updatedBy
			url
			files {
				totalCount
				edges {
					node {
						id
						presignedURL
					}
				}
			}
			controls {
				edges {
					node {
						id
						refCode
					}
				}
			}
		}
	}
}
`

func (c *Client) UpdateEvidence(ctx context.Context, updateEvidenceID string, input UpdateEvidenceInput, evidenceFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateEvidence, error) {
	vars := map[string]any{
		"updateEvidenceId": updateEvidenceID,
		"input":            input,
		"evidenceFiles":    evidenceFiles,
	}

	var res UpdateEvidence
	if err := c.Client.Post(ctx, "UpdateEvidence", UpdateEvidenceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEvidenceHistoriesDocument = `query GetAllEvidenceHistories {
	evidenceHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				collectionProcedure
				createdAt
				createdBy
				creationDate
				description
				displayID
				historyTime
				id
				isAutomated
				name
				operation
				ownerID
				ref
				renewalDate
				source
				status
				tags
				updatedAt
				updatedBy
				url
			}
		}
	}
}
`

func (c *Client) GetAllEvidenceHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEvidenceHistories, error) {
	vars := map[string]any{}

	var res GetAllEvidenceHistories
	if err := c.Client.Post(ctx, "GetAllEvidenceHistories", GetAllEvidenceHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEvidenceHistoriesDocument = `query GetEvidenceHistories ($first: Int, $last: Int, $where: EvidenceHistoryWhereInput) {
	evidenceHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				collectionProcedure
				createdAt
				createdBy
				creationDate
				description
				displayID
				historyTime
				id
				isAutomated
				name
				operation
				ownerID
				ref
				renewalDate
				source
				status
				tags
				updatedAt
				updatedBy
				url
			}
		}
	}
}
`

func (c *Client) GetEvidenceHistories(ctx context.Context, first *int64, last *int64, where *EvidenceHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEvidenceHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetEvidenceHistories
	if err := c.Client.Post(ctx, "GetEvidenceHistories", GetEvidenceHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateExportDocument = `mutation CreateExport ($input: CreateExportInput!) {
	createExport(input: $input) {
		export {
			createdAt
			createdBy
			errorMessage
			exportType
			fields
			filters
			format
			id
			ownerID
			requestorID
			status
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateExport(ctx context.Context, input CreateExportInput, interceptors ...clientv2.RequestInterceptor) (*CreateExport, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateExport
	if err := c.Client.Post(ctx, "CreateExport", CreateExportDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllExportsDocument = `query GetAllExports {
	exports {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				errorMessage
				exportType
				fields
				filters
				format
				id
				ownerID
				requestorID
				status
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllExports(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllExports, error) {
	vars := map[string]any{}

	var res GetAllExports
	if err := c.Client.Post(ctx, "GetAllExports", GetAllExportsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetExportByIDDocument = `query GetExportByID ($exportId: ID!) {
	export(id: $exportId) {
		createdAt
		createdBy
		errorMessage
		exportType
		fields
		filters
		format
		id
		ownerID
		requestorID
		status
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetExportByID(ctx context.Context, exportID string, interceptors ...clientv2.RequestInterceptor) (*GetExportByID, error) {
	vars := map[string]any{
		"exportId": exportID,
	}

	var res GetExportByID
	if err := c.Client.Post(ctx, "GetExportByID", GetExportByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetExportsDocument = `query GetExports ($first: Int, $last: Int, $where: ExportWhereInput) {
	exports(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				errorMessage
				exportType
				fields
				filters
				format
				id
				ownerID
				requestorID
				status
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetExports(ctx context.Context, first *int64, last *int64, where *ExportWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetExports, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetExports
	if err := c.Client.Post(ctx, "GetExports", GetExportsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateExportDocument = `mutation UpdateExport ($id: ID!, $input: UpdateExportInput!, $exportFiles: [Upload!]) {
	updateExport(id: $id, input: $input, exportFiles: $exportFiles) {
		export {
			createdAt
			createdBy
			errorMessage
			exportType
			fields
			filters
			format
			id
			ownerID
			requestorID
			status
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateExport(ctx context.Context, id string, input UpdateExportInput, exportFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateExport, error) {
	vars := map[string]any{
		"id":          id,
		"input":       input,
		"exportFiles": exportFiles,
	}

	var res UpdateExport
	if err := c.Client.Post(ctx, "UpdateExport", UpdateExportDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteExportDocument = `mutation DeleteExport ($deleteExportId: ID!) {
	deleteExport(id: $deleteExportId) {
		deletedID
	}
}
`

func (c *Client) DeleteExport(ctx context.Context, deleteExportID string, interceptors ...clientv2.RequestInterceptor) (*DeleteExport, error) {
	vars := map[string]any{
		"deleteExportId": deleteExportID,
	}

	var res DeleteExport
	if err := c.Client.Post(ctx, "DeleteExport", DeleteExportDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteBulkExportDocument = `mutation DeleteBulkExport ($ids: [ID!]!) {
	deleteBulkExport(ids: $ids) {
		deletedIDs
	}
}
`

func (c *Client) DeleteBulkExport(ctx context.Context, ids []string, interceptors ...clientv2.RequestInterceptor) (*DeleteBulkExport, error) {
	vars := map[string]any{
		"ids": ids,
	}

	var res DeleteBulkExport
	if err := c.Client.Post(ctx, "DeleteBulkExport", DeleteBulkExportDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteFileDocument = `mutation DeleteFile ($deleteFileId: ID!) {
	deleteFile(id: $deleteFileId) {
		deletedID
	}
}
`

func (c *Client) DeleteFile(ctx context.Context, deleteFileID string, interceptors ...clientv2.RequestInterceptor) (*DeleteFile, error) {
	vars := map[string]any{
		"deleteFileId": deleteFileID,
	}

	var res DeleteFile
	if err := c.Client.Post(ctx, "DeleteFile", DeleteFileDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllFilesDocument = `query GetAllFiles {
	files {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				categoryType
				createdAt
				createdBy
				detectedContentType
				detectedMimeType
				id
				md5Hash
				persistedFileSize
				providedFileExtension
				providedFileName
				providedFileSize
				storagePath
				storageScheme
				storageVolume
				storeKey
				tags
				updatedAt
				updatedBy
				uri
			}
		}
	}
}
`

func (c *Client) GetAllFiles(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllFiles, error) {
	vars := map[string]any{}

	var res GetAllFiles
	if err := c.Client.Post(ctx, "GetAllFiles", GetAllFilesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetFileByIDDocument = `query GetFileByID ($fileId: ID!) {
	file(id: $fileId) {
		categoryType
		createdAt
		createdBy
		detectedContentType
		detectedMimeType
		id
		md5Hash
		persistedFileSize
		providedFileExtension
		providedFileName
		providedFileSize
		storagePath
		storageScheme
		storageVolume
		storeKey
		tags
		updatedAt
		updatedBy
		uri
	}
}
`

func (c *Client) GetFileByID(ctx context.Context, fileID string, interceptors ...clientv2.RequestInterceptor) (*GetFileByID, error) {
	vars := map[string]any{
		"fileId": fileID,
	}

	var res GetFileByID
	if err := c.Client.Post(ctx, "GetFileByID", GetFileByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetFilesDocument = `query GetFiles ($first: Int, $last: Int, $where: FileWhereInput) {
	files(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				categoryType
				createdAt
				createdBy
				detectedContentType
				detectedMimeType
				id
				md5Hash
				persistedFileSize
				providedFileExtension
				providedFileName
				providedFileSize
				storagePath
				storageScheme
				storageVolume
				storeKey
				tags
				updatedAt
				updatedBy
				uri
			}
		}
	}
}
`

func (c *Client) GetFiles(ctx context.Context, first *int64, last *int64, where *FileWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetFiles, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetFiles
	if err := c.Client.Post(ctx, "GetFiles", GetFilesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllFileHistoriesDocument = `query GetAllFileHistories {
	fileHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				categoryType
				createdAt
				createdBy
				detectedContentType
				detectedMimeType
				historyTime
				id
				md5Hash
				operation
				persistedFileSize
				providedFileExtension
				providedFileName
				providedFileSize
				ref
				storagePath
				storageScheme
				storageVolume
				storeKey
				tags
				updatedAt
				updatedBy
				uri
			}
		}
	}
}
`

func (c *Client) GetAllFileHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllFileHistories, error) {
	vars := map[string]any{}

	var res GetAllFileHistories
	if err := c.Client.Post(ctx, "GetAllFileHistories", GetAllFileHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetFileHistoriesDocument = `query GetFileHistories ($first: Int, $last: Int, $where: FileHistoryWhereInput) {
	fileHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				categoryType
				createdAt
				createdBy
				detectedContentType
				detectedMimeType
				historyTime
				id
				md5Hash
				operation
				persistedFileSize
				providedFileExtension
				providedFileName
				providedFileSize
				ref
				storagePath
				storageScheme
				storageVolume
				storeKey
				tags
				updatedAt
				updatedBy
				uri
			}
		}
	}
}
`

func (c *Client) GetFileHistories(ctx context.Context, first *int64, last *int64, where *FileHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetFileHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetFileHistories
	if err := c.Client.Post(ctx, "GetFileHistories", GetFileHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVGroupDocument = `mutation CreateBulkCSVGroup ($input: Upload!) {
	createBulkCSVGroup(input: $input) {
		groups {
			createdAt
			createdBy
			description
			displayID
			displayName
			gravatarLogoURL
			id
			isManaged
			logoURL
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVGroup(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVGroup, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVGroup
	if err := c.Client.Post(ctx, "CreateBulkCSVGroup", CreateBulkCSVGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkGroupDocument = `mutation CreateBulkGroup ($input: [CreateGroupInput!]) {
	createBulkGroup(input: $input) {
		groups {
			createdAt
			createdBy
			description
			displayID
			displayName
			gravatarLogoURL
			id
			isManaged
			logoURL
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkGroup(ctx context.Context, input []*CreateGroupInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkGroup, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkGroup
	if err := c.Client.Post(ctx, "CreateBulkGroup", CreateBulkGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateGroupDocument = `mutation CreateGroup ($input: CreateGroupInput!) {
	createGroup(input: $input) {
		group {
			createdAt
			createdBy
			description
			displayID
			displayName
			gravatarLogoURL
			id
			isManaged
			logoURL
			name
			ownerID
			tags
			updatedAt
			updatedBy
			setting {
				id
				joinPolicy
				syncToGithub
				syncToSlack
				visibility
			}
			members {
				totalCount
			}
		}
	}
}
`

func (c *Client) CreateGroup(ctx context.Context, input CreateGroupInput, interceptors ...clientv2.RequestInterceptor) (*CreateGroup, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateGroup
	if err := c.Client.Post(ctx, "CreateGroup", CreateGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteGroupDocument = `mutation DeleteGroup ($deleteGroupId: ID!) {
	deleteGroup(id: $deleteGroupId) {
		deletedID
	}
}
`

func (c *Client) DeleteGroup(ctx context.Context, deleteGroupID string, interceptors ...clientv2.RequestInterceptor) (*DeleteGroup, error) {
	vars := map[string]any{
		"deleteGroupId": deleteGroupID,
	}

	var res DeleteGroup
	if err := c.Client.Post(ctx, "DeleteGroup", DeleteGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllGroupsDocument = `query GetAllGroups {
	groups {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				displayID
				displayName
				gravatarLogoURL
				id
				isManaged
				logoURL
				name
				ownerID
				tags
				updatedAt
				updatedBy
				setting {
					id
					joinPolicy
					syncToGithub
					syncToSlack
					visibility
				}
				members {
					totalCount
				}
			}
		}
	}
}
`

func (c *Client) GetAllGroups(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroups, error) {
	vars := map[string]any{}

	var res GetAllGroups
	if err := c.Client.Post(ctx, "GetAllGroups", GetAllGroupsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupByIDDocument = `query GetGroupByID ($groupId: ID!) {
	group(id: $groupId) {
		createdAt
		createdBy
		description
		displayID
		displayName
		gravatarLogoURL
		id
		isManaged
		logoURL
		name
		ownerID
		tags
		updatedAt
		updatedBy
		setting {
			id
			joinPolicy
			syncToGithub
			syncToSlack
			visibility
		}
		members {
			totalCount
		}
	}
}
`

func (c *Client) GetGroupByID(ctx context.Context, groupID string, interceptors ...clientv2.RequestInterceptor) (*GetGroupByID, error) {
	vars := map[string]any{
		"groupId": groupID,
	}

	var res GetGroupByID
	if err := c.Client.Post(ctx, "GetGroupByID", GetGroupByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupsDocument = `query GetGroups ($first: Int, $last: Int, $where: GroupWhereInput) {
	groups(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				displayID
				displayName
				gravatarLogoURL
				id
				isManaged
				logoURL
				name
				ownerID
				tags
				updatedAt
				updatedBy
				setting {
					id
					joinPolicy
					syncToGithub
					syncToSlack
					visibility
				}
				members {
					totalCount
				}
			}
		}
	}
}
`

func (c *Client) GetGroups(ctx context.Context, first *int64, last *int64, where *GroupWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroups, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetGroups
	if err := c.Client.Post(ctx, "GetGroups", GetGroupsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateGroupDocument = `mutation UpdateGroup ($updateGroupId: ID!, $input: UpdateGroupInput!) {
	updateGroup(id: $updateGroupId, input: $input) {
		group {
			createdAt
			createdBy
			description
			displayID
			displayName
			gravatarLogoURL
			id
			isManaged
			logoURL
			name
			ownerID
			tags
			updatedAt
			updatedBy
			setting {
				id
				joinPolicy
				syncToGithub
				syncToSlack
				visibility
			}
			members {
				totalCount
			}
		}
	}
}
`

func (c *Client) UpdateGroup(ctx context.Context, updateGroupID string, input UpdateGroupInput, interceptors ...clientv2.RequestInterceptor) (*UpdateGroup, error) {
	vars := map[string]any{
		"updateGroupId": updateGroupID,
		"input":         input,
	}

	var res UpdateGroup
	if err := c.Client.Post(ctx, "UpdateGroup", UpdateGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllGroupHistoriesDocument = `query GetAllGroupHistories {
	groupHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				displayID
				displayName
				gravatarLogoURL
				historyTime
				id
				isManaged
				logoURL
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllGroupHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupHistories, error) {
	vars := map[string]any{}

	var res GetAllGroupHistories
	if err := c.Client.Post(ctx, "GetAllGroupHistories", GetAllGroupHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupHistoriesDocument = `query GetGroupHistories ($first: Int, $last: Int, $where: GroupHistoryWhereInput) {
	groupHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				displayID
				displayName
				gravatarLogoURL
				historyTime
				id
				isManaged
				logoURL
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetGroupHistories(ctx context.Context, first *int64, last *int64, where *GroupHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetGroupHistories
	if err := c.Client.Post(ctx, "GetGroupHistories", GetGroupHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVGroupMembershipDocument = `mutation CreateBulkCSVGroupMembership ($input: Upload!) {
	createBulkCSVGroupMembership(input: $input) {
		groupMemberships {
			createdAt
			createdBy
			groupID
			id
			role
			updatedAt
			updatedBy
			userID
		}
	}
}
`

func (c *Client) CreateBulkCSVGroupMembership(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVGroupMembership, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVGroupMembership
	if err := c.Client.Post(ctx, "CreateBulkCSVGroupMembership", CreateBulkCSVGroupMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkGroupMembershipDocument = `mutation CreateBulkGroupMembership ($input: [CreateGroupMembershipInput!]) {
	createBulkGroupMembership(input: $input) {
		groupMemberships {
			createdAt
			createdBy
			groupID
			id
			role
			updatedAt
			updatedBy
			userID
		}
	}
}
`

func (c *Client) CreateBulkGroupMembership(ctx context.Context, input []*CreateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkGroupMembership, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkGroupMembership
	if err := c.Client.Post(ctx, "CreateBulkGroupMembership", CreateBulkGroupMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateGroupMembershipDocument = `mutation CreateGroupMembership ($input: CreateGroupMembershipInput!) {
	createGroupMembership(input: $input) {
		groupMembership {
			createdAt
			createdBy
			groupID
			id
			role
			updatedAt
			updatedBy
			user {
				displayName
				email
				firstName
				id
				lastName
			}
		}
	}
}
`

func (c *Client) CreateGroupMembership(ctx context.Context, input CreateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateGroupMembership, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateGroupMembership
	if err := c.Client.Post(ctx, "CreateGroupMembership", CreateGroupMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteGroupMembershipDocument = `mutation DeleteGroupMembership ($deleteGroupMembershipId: ID!) {
	deleteGroupMembership(id: $deleteGroupMembershipId) {
		deletedID
	}
}
`

func (c *Client) DeleteGroupMembership(ctx context.Context, deleteGroupMembershipID string, interceptors ...clientv2.RequestInterceptor) (*DeleteGroupMembership, error) {
	vars := map[string]any{
		"deleteGroupMembershipId": deleteGroupMembershipID,
	}

	var res DeleteGroupMembership
	if err := c.Client.Post(ctx, "DeleteGroupMembership", DeleteGroupMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllGroupMembershipsDocument = `query GetAllGroupMemberships {
	groupMemberships {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				groupID
				id
				role
				updatedAt
				updatedBy
				user {
					displayName
					email
					firstName
					id
					lastName
				}
			}
		}
	}
}
`

func (c *Client) GetAllGroupMemberships(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupMemberships, error) {
	vars := map[string]any{}

	var res GetAllGroupMemberships
	if err := c.Client.Post(ctx, "GetAllGroupMemberships", GetAllGroupMembershipsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupMembershipByIDDocument = `query GetGroupMembershipByID ($groupMembershipId: ID!) {
	groupMembership(id: $groupMembershipId) {
		createdAt
		createdBy
		groupID
		id
		role
		updatedAt
		updatedBy
		user {
			displayName
			email
			firstName
			id
			lastName
		}
	}
}
`

func (c *Client) GetGroupMembershipByID(ctx context.Context, groupMembershipID string, interceptors ...clientv2.RequestInterceptor) (*GetGroupMembershipByID, error) {
	vars := map[string]any{
		"groupMembershipId": groupMembershipID,
	}

	var res GetGroupMembershipByID
	if err := c.Client.Post(ctx, "GetGroupMembershipByID", GetGroupMembershipByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupMembershipsDocument = `query GetGroupMemberships ($first: Int, $last: Int, $where: GroupMembershipWhereInput) {
	groupMemberships(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				groupID
				id
				role
				updatedAt
				updatedBy
				user {
					displayName
					email
					firstName
					id
					lastName
				}
			}
		}
	}
}
`

func (c *Client) GetGroupMemberships(ctx context.Context, first *int64, last *int64, where *GroupMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupMemberships, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetGroupMemberships
	if err := c.Client.Post(ctx, "GetGroupMemberships", GetGroupMembershipsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateGroupMembershipDocument = `mutation UpdateGroupMembership ($updateGroupMembershipId: ID!, $input: UpdateGroupMembershipInput!) {
	updateGroupMembership(id: $updateGroupMembershipId, input: $input) {
		groupMembership {
			createdAt
			createdBy
			groupID
			id
			role
			updatedAt
			updatedBy
			user {
				displayName
				email
				firstName
				id
				lastName
			}
		}
	}
}
`

func (c *Client) UpdateGroupMembership(ctx context.Context, updateGroupMembershipID string, input UpdateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateGroupMembership, error) {
	vars := map[string]any{
		"updateGroupMembershipId": updateGroupMembershipID,
		"input":                   input,
	}

	var res UpdateGroupMembership
	if err := c.Client.Post(ctx, "UpdateGroupMembership", UpdateGroupMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllGroupMembershipHistoriesDocument = `query GetAllGroupMembershipHistories {
	groupMembershipHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				groupID
				historyTime
				id
				operation
				ref
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetAllGroupMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupMembershipHistories, error) {
	vars := map[string]any{}

	var res GetAllGroupMembershipHistories
	if err := c.Client.Post(ctx, "GetAllGroupMembershipHistories", GetAllGroupMembershipHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupMembershipHistoriesDocument = `query GetGroupMembershipHistories ($first: Int, $last: Int, $where: GroupMembershipHistoryWhereInput) {
	groupMembershipHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				groupID
				historyTime
				id
				operation
				ref
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetGroupMembershipHistories(ctx context.Context, first *int64, last *int64, where *GroupMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupMembershipHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetGroupMembershipHistories
	if err := c.Client.Post(ctx, "GetGroupMembershipHistories", GetGroupMembershipHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVGroupSettingDocument = `mutation CreateBulkCSVGroupSetting ($input: Upload!) {
	createBulkCSVGroupSetting(input: $input) {
		groupSettings {
			createdAt
			createdBy
			groupID
			id
			joinPolicy
			syncToGithub
			syncToSlack
			updatedAt
			updatedBy
			visibility
		}
	}
}
`

func (c *Client) CreateBulkCSVGroupSetting(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVGroupSetting, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVGroupSetting
	if err := c.Client.Post(ctx, "CreateBulkCSVGroupSetting", CreateBulkCSVGroupSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkGroupSettingDocument = `mutation CreateBulkGroupSetting ($input: [CreateGroupSettingInput!]) {
	createBulkGroupSetting(input: $input) {
		groupSettings {
			createdAt
			createdBy
			groupID
			id
			joinPolicy
			syncToGithub
			syncToSlack
			updatedAt
			updatedBy
			visibility
		}
	}
}
`

func (c *Client) CreateBulkGroupSetting(ctx context.Context, input []*CreateGroupSettingInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkGroupSetting, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkGroupSetting
	if err := c.Client.Post(ctx, "CreateBulkGroupSetting", CreateBulkGroupSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateGroupSettingDocument = `mutation CreateGroupSetting ($input: CreateGroupSettingInput!) {
	createGroupSetting(input: $input) {
		groupSetting {
			createdAt
			createdBy
			groupID
			id
			joinPolicy
			syncToGithub
			syncToSlack
			updatedAt
			updatedBy
			visibility
		}
	}
}
`

func (c *Client) CreateGroupSetting(ctx context.Context, input CreateGroupSettingInput, interceptors ...clientv2.RequestInterceptor) (*CreateGroupSetting, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateGroupSetting
	if err := c.Client.Post(ctx, "CreateGroupSetting", CreateGroupSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteGroupSettingDocument = `mutation DeleteGroupSetting ($deleteGroupSettingId: ID!) {
	deleteGroupSetting(id: $deleteGroupSettingId) {
		deletedID
	}
}
`

func (c *Client) DeleteGroupSetting(ctx context.Context, deleteGroupSettingID string, interceptors ...clientv2.RequestInterceptor) (*DeleteGroupSetting, error) {
	vars := map[string]any{
		"deleteGroupSettingId": deleteGroupSettingID,
	}

	var res DeleteGroupSetting
	if err := c.Client.Post(ctx, "DeleteGroupSetting", DeleteGroupSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllGroupSettingsDocument = `query GetAllGroupSettings {
	groupSettings {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				groupID
				id
				joinPolicy
				syncToGithub
				syncToSlack
				updatedAt
				updatedBy
				visibility
			}
		}
	}
}
`

func (c *Client) GetAllGroupSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupSettings, error) {
	vars := map[string]any{}

	var res GetAllGroupSettings
	if err := c.Client.Post(ctx, "GetAllGroupSettings", GetAllGroupSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupSettingByIDDocument = `query GetGroupSettingByID ($groupSettingId: ID!) {
	groupSetting(id: $groupSettingId) {
		createdAt
		createdBy
		groupID
		id
		joinPolicy
		syncToGithub
		syncToSlack
		updatedAt
		updatedBy
		visibility
	}
}
`

func (c *Client) GetGroupSettingByID(ctx context.Context, groupSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetGroupSettingByID, error) {
	vars := map[string]any{
		"groupSettingId": groupSettingID,
	}

	var res GetGroupSettingByID
	if err := c.Client.Post(ctx, "GetGroupSettingByID", GetGroupSettingByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupSettingsDocument = `query GetGroupSettings ($first: Int, $last: Int, $where: GroupSettingWhereInput) {
	groupSettings(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				groupID
				id
				joinPolicy
				syncToGithub
				syncToSlack
				updatedAt
				updatedBy
				visibility
			}
		}
	}
}
`

func (c *Client) GetGroupSettings(ctx context.Context, first *int64, last *int64, where *GroupSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupSettings, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetGroupSettings
	if err := c.Client.Post(ctx, "GetGroupSettings", GetGroupSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateGroupSettingDocument = `mutation UpdateGroupSetting ($updateGroupSettingId: ID!, $input: UpdateGroupSettingInput!) {
	updateGroupSetting(id: $updateGroupSettingId, input: $input) {
		groupSetting {
			createdAt
			createdBy
			groupID
			id
			joinPolicy
			syncToGithub
			syncToSlack
			updatedAt
			updatedBy
			visibility
		}
	}
}
`

func (c *Client) UpdateGroupSetting(ctx context.Context, updateGroupSettingID string, input UpdateGroupSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateGroupSetting, error) {
	vars := map[string]any{
		"updateGroupSettingId": updateGroupSettingID,
		"input":                input,
	}

	var res UpdateGroupSetting
	if err := c.Client.Post(ctx, "UpdateGroupSetting", UpdateGroupSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllGroupSettingHistoriesDocument = `query GetAllGroupSettingHistories {
	groupSettingHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				groupID
				historyTime
				id
				joinPolicy
				operation
				ref
				syncToGithub
				syncToSlack
				updatedAt
				updatedBy
				visibility
			}
		}
	}
}
`

func (c *Client) GetAllGroupSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupSettingHistories, error) {
	vars := map[string]any{}

	var res GetAllGroupSettingHistories
	if err := c.Client.Post(ctx, "GetAllGroupSettingHistories", GetAllGroupSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupSettingHistoriesDocument = `query GetGroupSettingHistories ($first: Int, $last: Int, $where: GroupSettingHistoryWhereInput) {
	groupSettingHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				groupID
				historyTime
				id
				joinPolicy
				operation
				ref
				syncToGithub
				syncToSlack
				updatedAt
				updatedBy
				visibility
			}
		}
	}
}
`

func (c *Client) GetGroupSettingHistories(ctx context.Context, first *int64, last *int64, where *GroupSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupSettingHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetGroupSettingHistories
	if err := c.Client.Post(ctx, "GetGroupSettingHistories", GetGroupSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVHushDocument = `mutation CreateBulkCSVHush ($input: Upload!) {
	createBulkCSVHush(input: $input) {
		hushes {
			createdAt
			createdBy
			description
			id
			kind
			name
			ownerID
			secretName
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVHush(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVHush, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVHush
	if err := c.Client.Post(ctx, "CreateBulkCSVHush", CreateBulkCSVHushDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkHushDocument = `mutation CreateBulkHush ($input: [CreateHushInput!]) {
	createBulkHush(input: $input) {
		hushes {
			createdAt
			createdBy
			description
			id
			kind
			name
			ownerID
			secretName
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkHush(ctx context.Context, input []*CreateHushInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkHush, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkHush
	if err := c.Client.Post(ctx, "CreateBulkHush", CreateBulkHushDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateHushDocument = `mutation CreateHush ($input: CreateHushInput!) {
	createHush(input: $input) {
		hush {
			createdAt
			createdBy
			description
			id
			kind
			name
			ownerID
			secretName
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateHush(ctx context.Context, input CreateHushInput, interceptors ...clientv2.RequestInterceptor) (*CreateHush, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateHush
	if err := c.Client.Post(ctx, "CreateHush", CreateHushDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteHushDocument = `mutation DeleteHush ($deleteHushId: ID!) {
	deleteHush(id: $deleteHushId) {
		deletedID
	}
}
`

func (c *Client) DeleteHush(ctx context.Context, deleteHushID string, interceptors ...clientv2.RequestInterceptor) (*DeleteHush, error) {
	vars := map[string]any{
		"deleteHushId": deleteHushID,
	}

	var res DeleteHush
	if err := c.Client.Post(ctx, "DeleteHush", DeleteHushDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllHushesDocument = `query GetAllHushes {
	hushes {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				id
				kind
				name
				ownerID
				secretName
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllHushes(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllHushes, error) {
	vars := map[string]any{}

	var res GetAllHushes
	if err := c.Client.Post(ctx, "GetAllHushes", GetAllHushesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetHushByIDDocument = `query GetHushByID ($hushId: ID!) {
	hush(id: $hushId) {
		createdAt
		createdBy
		description
		id
		kind
		name
		ownerID
		secretName
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetHushByID(ctx context.Context, hushID string, interceptors ...clientv2.RequestInterceptor) (*GetHushByID, error) {
	vars := map[string]any{
		"hushId": hushID,
	}

	var res GetHushByID
	if err := c.Client.Post(ctx, "GetHushByID", GetHushByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetHushesDocument = `query GetHushes ($first: Int, $last: Int, $where: HushWhereInput) {
	hushes(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				id
				kind
				name
				ownerID
				secretName
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetHushes(ctx context.Context, first *int64, last *int64, where *HushWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetHushes, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetHushes
	if err := c.Client.Post(ctx, "GetHushes", GetHushesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateHushDocument = `mutation UpdateHush ($updateHushId: ID!, $input: UpdateHushInput!) {
	updateHush(id: $updateHushId, input: $input) {
		hush {
			createdAt
			createdBy
			description
			id
			kind
			name
			ownerID
			secretName
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateHush(ctx context.Context, updateHushID string, input UpdateHushInput, interceptors ...clientv2.RequestInterceptor) (*UpdateHush, error) {
	vars := map[string]any{
		"updateHushId": updateHushID,
		"input":        input,
	}

	var res UpdateHush
	if err := c.Client.Post(ctx, "UpdateHush", UpdateHushDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllHushHistoriesDocument = `query GetAllHushHistories {
	hushHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				kind
				name
				operation
				ownerID
				ref
				secretName
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllHushHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllHushHistories, error) {
	vars := map[string]any{}

	var res GetAllHushHistories
	if err := c.Client.Post(ctx, "GetAllHushHistories", GetAllHushHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetHushHistoriesDocument = `query GetHushHistories ($first: Int, $last: Int, $where: HushHistoryWhereInput) {
	hushHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				kind
				name
				operation
				ownerID
				ref
				secretName
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetHushHistories(ctx context.Context, first *int64, last *int64, where *HushHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetHushHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetHushHistories
	if err := c.Client.Post(ctx, "GetHushHistories", GetHushHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteIntegrationDocument = `mutation DeleteIntegration ($deleteIntegrationId: ID!) {
	deleteIntegration(id: $deleteIntegrationId) {
		deletedID
	}
}
`

func (c *Client) DeleteIntegration(ctx context.Context, deleteIntegrationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteIntegration, error) {
	vars := map[string]any{
		"deleteIntegrationId": deleteIntegrationID,
	}

	var res DeleteIntegration
	if err := c.Client.Post(ctx, "DeleteIntegration", DeleteIntegrationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllIntegrationsDocument = `query GetAllIntegrations {
	integrations {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				id
				kind
				name
				ownerID
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllIntegrations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllIntegrations, error) {
	vars := map[string]any{}

	var res GetAllIntegrations
	if err := c.Client.Post(ctx, "GetAllIntegrations", GetAllIntegrationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetIntegrationByIDDocument = `query GetIntegrationByID ($integrationId: ID!) {
	integration(id: $integrationId) {
		createdAt
		createdBy
		description
		id
		kind
		name
		ownerID
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetIntegrationByID(ctx context.Context, integrationID string, interceptors ...clientv2.RequestInterceptor) (*GetIntegrationByID, error) {
	vars := map[string]any{
		"integrationId": integrationID,
	}

	var res GetIntegrationByID
	if err := c.Client.Post(ctx, "GetIntegrationByID", GetIntegrationByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetIntegrationsDocument = `query GetIntegrations ($first: Int, $last: Int, $where: IntegrationWhereInput) {
	integrations(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				id
				kind
				name
				ownerID
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetIntegrations(ctx context.Context, first *int64, last *int64, where *IntegrationWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetIntegrations, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetIntegrations
	if err := c.Client.Post(ctx, "GetIntegrations", GetIntegrationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllIntegrationHistoriesDocument = `query GetAllIntegrationHistories {
	integrationHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				kind
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllIntegrationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllIntegrationHistories, error) {
	vars := map[string]any{}

	var res GetAllIntegrationHistories
	if err := c.Client.Post(ctx, "GetAllIntegrationHistories", GetAllIntegrationHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetIntegrationHistoriesDocument = `query GetIntegrationHistories ($first: Int, $last: Int, $where: IntegrationHistoryWhereInput) {
	integrationHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				kind
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetIntegrationHistories(ctx context.Context, first *int64, last *int64, where *IntegrationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetIntegrationHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetIntegrationHistories
	if err := c.Client.Post(ctx, "GetIntegrationHistories", GetIntegrationHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVInternalPolicyDocument = `mutation CreateBulkCSVInternalPolicy ($input: Upload!) {
	createBulkCSVInternalPolicy(input: $input) {
		internalPolicies {
			approvalRequired
			approverID
			controlSuggestions
			createdAt
			createdBy
			delegateID
			details
			dismissedControlSuggestions
			dismissedImprovementSuggestions
			dismissedTagSuggestions
			displayID
			id
			improvementSuggestions
			name
			ownerID
			policyType
			reviewDue
			reviewFrequency
			revision
			status
			summary
			tagSuggestions
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVInternalPolicy(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVInternalPolicy, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVInternalPolicy
	if err := c.Client.Post(ctx, "CreateBulkCSVInternalPolicy", CreateBulkCSVInternalPolicyDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkInternalPolicyDocument = `mutation CreateBulkInternalPolicy ($input: [CreateInternalPolicyInput!]) {
	createBulkInternalPolicy(input: $input) {
		internalPolicies {
			approvalRequired
			approverID
			controlSuggestions
			createdAt
			createdBy
			delegateID
			details
			dismissedControlSuggestions
			dismissedImprovementSuggestions
			dismissedTagSuggestions
			displayID
			id
			improvementSuggestions
			name
			ownerID
			policyType
			reviewDue
			reviewFrequency
			revision
			status
			summary
			tagSuggestions
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkInternalPolicy(ctx context.Context, input []*CreateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkInternalPolicy, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkInternalPolicy
	if err := c.Client.Post(ctx, "CreateBulkInternalPolicy", CreateBulkInternalPolicyDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateInternalPolicyDocument = `mutation CreateInternalPolicy ($input: CreateInternalPolicyInput!) {
	createInternalPolicy(input: $input) {
		internalPolicy {
			approvalRequired
			approverID
			controlSuggestions
			createdAt
			createdBy
			delegateID
			details
			dismissedControlSuggestions
			dismissedImprovementSuggestions
			dismissedTagSuggestions
			displayID
			id
			improvementSuggestions
			name
			ownerID
			policyType
			reviewDue
			reviewFrequency
			revision
			status
			summary
			tagSuggestions
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateInternalPolicy(ctx context.Context, input CreateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*CreateInternalPolicy, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateInternalPolicy
	if err := c.Client.Post(ctx, "CreateInternalPolicy", CreateInternalPolicyDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteInternalPolicyDocument = `mutation DeleteInternalPolicy ($deleteInternalPolicyId: ID!) {
	deleteInternalPolicy(id: $deleteInternalPolicyId) {
		deletedID
	}
}
`

func (c *Client) DeleteInternalPolicy(ctx context.Context, deleteInternalPolicyID string, interceptors ...clientv2.RequestInterceptor) (*DeleteInternalPolicy, error) {
	vars := map[string]any{
		"deleteInternalPolicyId": deleteInternalPolicyID,
	}

	var res DeleteInternalPolicy
	if err := c.Client.Post(ctx, "DeleteInternalPolicy", DeleteInternalPolicyDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllInternalPoliciesDocument = `query GetAllInternalPolicies {
	internalPolicies {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				approvalRequired
				approverID
				controlSuggestions
				createdAt
				createdBy
				delegateID
				details
				dismissedControlSuggestions
				dismissedImprovementSuggestions
				dismissedTagSuggestions
				displayID
				id
				improvementSuggestions
				name
				ownerID
				policyType
				reviewDue
				reviewFrequency
				revision
				status
				summary
				tagSuggestions
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllInternalPolicies(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllInternalPolicies, error) {
	vars := map[string]any{}

	var res GetAllInternalPolicies
	if err := c.Client.Post(ctx, "GetAllInternalPolicies", GetAllInternalPoliciesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetInternalPolicyByIDDocument = `query GetInternalPolicyByID ($internalPolicyId: ID!) {
	internalPolicy(id: $internalPolicyId) {
		approvalRequired
		approverID
		controlSuggestions
		createdAt
		createdBy
		delegateID
		details
		dismissedControlSuggestions
		dismissedImprovementSuggestions
		dismissedTagSuggestions
		displayID
		id
		improvementSuggestions
		name
		ownerID
		policyType
		reviewDue
		reviewFrequency
		revision
		status
		summary
		tagSuggestions
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetInternalPolicyByID(ctx context.Context, internalPolicyID string, interceptors ...clientv2.RequestInterceptor) (*GetInternalPolicyByID, error) {
	vars := map[string]any{
		"internalPolicyId": internalPolicyID,
	}

	var res GetInternalPolicyByID
	if err := c.Client.Post(ctx, "GetInternalPolicyByID", GetInternalPolicyByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetInternalPoliciesDocument = `query GetInternalPolicies ($first: Int, $last: Int, $where: InternalPolicyWhereInput) {
	internalPolicies(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				approvalRequired
				approverID
				controlSuggestions
				createdAt
				createdBy
				delegateID
				details
				dismissedControlSuggestions
				dismissedImprovementSuggestions
				dismissedTagSuggestions
				displayID
				id
				improvementSuggestions
				name
				ownerID
				policyType
				reviewDue
				reviewFrequency
				revision
				status
				summary
				tagSuggestions
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetInternalPolicies(ctx context.Context, first *int64, last *int64, where *InternalPolicyWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetInternalPolicies, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetInternalPolicies
	if err := c.Client.Post(ctx, "GetInternalPolicies", GetInternalPoliciesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateInternalPolicyDocument = `mutation UpdateInternalPolicy ($updateInternalPolicyId: ID!, $input: UpdateInternalPolicyInput!) {
	updateInternalPolicy(id: $updateInternalPolicyId, input: $input) {
		internalPolicy {
			approvalRequired
			approverID
			controlSuggestions
			createdAt
			createdBy
			delegateID
			details
			dismissedControlSuggestions
			dismissedImprovementSuggestions
			dismissedTagSuggestions
			displayID
			id
			improvementSuggestions
			name
			ownerID
			policyType
			reviewDue
			reviewFrequency
			revision
			status
			summary
			tagSuggestions
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateInternalPolicy(ctx context.Context, updateInternalPolicyID string, input UpdateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*UpdateInternalPolicy, error) {
	vars := map[string]any{
		"updateInternalPolicyId": updateInternalPolicyID,
		"input":                  input,
	}

	var res UpdateInternalPolicy
	if err := c.Client.Post(ctx, "UpdateInternalPolicy", UpdateInternalPolicyDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllInternalPolicyHistoriesDocument = `query GetAllInternalPolicyHistories {
	internalPolicyHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				approvalRequired
				approverID
				controlSuggestions
				createdAt
				createdBy
				delegateID
				details
				dismissedControlSuggestions
				dismissedImprovementSuggestions
				dismissedTagSuggestions
				displayID
				historyTime
				id
				improvementSuggestions
				name
				operation
				ownerID
				policyType
				ref
				reviewDue
				reviewFrequency
				revision
				status
				summary
				tagSuggestions
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllInternalPolicyHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllInternalPolicyHistories, error) {
	vars := map[string]any{}

	var res GetAllInternalPolicyHistories
	if err := c.Client.Post(ctx, "GetAllInternalPolicyHistories", GetAllInternalPolicyHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetInternalPolicyHistoriesDocument = `query GetInternalPolicyHistories ($first: Int, $last: Int, $where: InternalPolicyHistoryWhereInput) {
	internalPolicyHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				approvalRequired
				approverID
				controlSuggestions
				createdAt
				createdBy
				delegateID
				details
				dismissedControlSuggestions
				dismissedImprovementSuggestions
				dismissedTagSuggestions
				displayID
				historyTime
				id
				improvementSuggestions
				name
				operation
				ownerID
				policyType
				ref
				reviewDue
				reviewFrequency
				revision
				status
				summary
				tagSuggestions
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetInternalPolicyHistories(ctx context.Context, first *int64, last *int64, where *InternalPolicyHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetInternalPolicyHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetInternalPolicyHistories
	if err := c.Client.Post(ctx, "GetInternalPolicyHistories", GetInternalPolicyHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVInviteDocument = `mutation CreateBulkCSVInvite ($input: Upload!) {
	createBulkCSVInvite(input: $input) {
		invites {
			createdAt
			createdBy
			expires
			id
			ownerID
			recipient
			requestorID
			role
			sendAttempts
			status
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVInvite(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVInvite, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVInvite
	if err := c.Client.Post(ctx, "CreateBulkCSVInvite", CreateBulkCSVInviteDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkInviteDocument = `mutation CreateBulkInvite ($input: [CreateInviteInput!]) {
	createBulkInvite(input: $input) {
		invites {
			createdAt
			createdBy
			expires
			id
			ownerID
			recipient
			requestorID
			role
			sendAttempts
			status
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkInvite(ctx context.Context, input []*CreateInviteInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkInvite, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkInvite
	if err := c.Client.Post(ctx, "CreateBulkInvite", CreateBulkInviteDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateInviteDocument = `mutation CreateInvite ($input: CreateInviteInput!) {
	createInvite(input: $input) {
		invite {
			createdAt
			createdBy
			expires
			id
			ownerID
			recipient
			requestorID
			role
			sendAttempts
			status
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateInvite(ctx context.Context, input CreateInviteInput, interceptors ...clientv2.RequestInterceptor) (*CreateInvite, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateInvite
	if err := c.Client.Post(ctx, "CreateInvite", CreateInviteDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteInviteDocument = `mutation DeleteInvite ($deleteInviteId: ID!) {
	deleteInvite(id: $deleteInviteId) {
		deletedID
	}
}
`

func (c *Client) DeleteInvite(ctx context.Context, deleteInviteID string, interceptors ...clientv2.RequestInterceptor) (*DeleteInvite, error) {
	vars := map[string]any{
		"deleteInviteId": deleteInviteID,
	}

	var res DeleteInvite
	if err := c.Client.Post(ctx, "DeleteInvite", DeleteInviteDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllInvitesDocument = `query GetAllInvites {
	invites {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				expires
				id
				ownerID
				recipient
				requestorID
				role
				sendAttempts
				status
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllInvites(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllInvites, error) {
	vars := map[string]any{}

	var res GetAllInvites
	if err := c.Client.Post(ctx, "GetAllInvites", GetAllInvitesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetInviteByIDDocument = `query GetInviteByID ($inviteId: ID!) {
	invite(id: $inviteId) {
		createdAt
		createdBy
		expires
		id
		ownerID
		recipient
		requestorID
		role
		sendAttempts
		status
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetInviteByID(ctx context.Context, inviteID string, interceptors ...clientv2.RequestInterceptor) (*GetInviteByID, error) {
	vars := map[string]any{
		"inviteId": inviteID,
	}

	var res GetInviteByID
	if err := c.Client.Post(ctx, "GetInviteByID", GetInviteByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetInvitesDocument = `query GetInvites ($first: Int, $last: Int, $where: InviteWhereInput) {
	invites(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				expires
				id
				ownerID
				recipient
				requestorID
				role
				sendAttempts
				status
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetInvites(ctx context.Context, first *int64, last *int64, where *InviteWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetInvites, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetInvites
	if err := c.Client.Post(ctx, "GetInvites", GetInvitesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateInviteDocument = `mutation UpdateInvite ($updateInviteId: ID!, $input: UpdateInviteInput!) {
	updateInvite(id: $updateInviteId, input: $input) {
		invite {
			createdAt
			createdBy
			expires
			id
			ownerID
			recipient
			requestorID
			role
			sendAttempts
			status
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateInvite(ctx context.Context, updateInviteID string, input UpdateInviteInput, interceptors ...clientv2.RequestInterceptor) (*UpdateInvite, error) {
	vars := map[string]any{
		"updateInviteId": updateInviteID,
		"input":          input,
	}

	var res UpdateInvite
	if err := c.Client.Post(ctx, "UpdateInvite", UpdateInviteDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateJobResultDocument = `mutation CreateJobResult ($input: CreateJobResultInput!, $jobResultFiles: [Upload!]) {
	createJobResult(input: $input, jobResultFiles: $jobResultFiles) {
		jobResult {
			createdAt
			createdBy
			exitCode
			fileID
			finishedAt
			id
			ownerID
			scheduledJobID
			startedAt
			status
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateJobResult(ctx context.Context, input CreateJobResultInput, jobResultFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateJobResult, error) {
	vars := map[string]any{
		"input":          input,
		"jobResultFiles": jobResultFiles,
	}

	var res CreateJobResult
	if err := c.Client.Post(ctx, "CreateJobResult", CreateJobResultDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteJobResultDocument = `mutation DeleteJobResult ($deleteJobResultId: ID!) {
	deleteJobResult(id: $deleteJobResultId) {
		deletedID
	}
}
`

func (c *Client) DeleteJobResult(ctx context.Context, deleteJobResultID string, interceptors ...clientv2.RequestInterceptor) (*DeleteJobResult, error) {
	vars := map[string]any{
		"deleteJobResultId": deleteJobResultID,
	}

	var res DeleteJobResult
	if err := c.Client.Post(ctx, "DeleteJobResult", DeleteJobResultDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllJobResultsDocument = `query GetAllJobResults {
	jobResults {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				exitCode
				fileID
				finishedAt
				id
				ownerID
				scheduledJobID
				startedAt
				status
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllJobResults(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllJobResults, error) {
	vars := map[string]any{}

	var res GetAllJobResults
	if err := c.Client.Post(ctx, "GetAllJobResults", GetAllJobResultsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetJobResultByIDDocument = `query GetJobResultByID ($jobResultId: ID!) {
	jobResult(id: $jobResultId) {
		createdAt
		createdBy
		exitCode
		fileID
		finishedAt
		id
		ownerID
		scheduledJobID
		startedAt
		status
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetJobResultByID(ctx context.Context, jobResultID string, interceptors ...clientv2.RequestInterceptor) (*GetJobResultByID, error) {
	vars := map[string]any{
		"jobResultId": jobResultID,
	}

	var res GetJobResultByID
	if err := c.Client.Post(ctx, "GetJobResultByID", GetJobResultByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetJobResultsDocument = `query GetJobResults ($first: Int, $last: Int, $where: JobResultWhereInput) {
	jobResults(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				exitCode
				fileID
				finishedAt
				id
				ownerID
				scheduledJobID
				startedAt
				status
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetJobResults(ctx context.Context, first *int64, last *int64, where *JobResultWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetJobResults, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetJobResults
	if err := c.Client.Post(ctx, "GetJobResults", GetJobResultsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateJobResultDocument = `mutation UpdateJobResult ($updateJobResultId: ID!, $input: UpdateJobResultInput!, $jobResultFiles: [Upload!]) {
	updateJobResult(id: $updateJobResultId, input: $input, jobResultFiles: $jobResultFiles) {
		jobResult {
			createdAt
			createdBy
			exitCode
			fileID
			finishedAt
			id
			ownerID
			scheduledJobID
			startedAt
			status
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateJobResult(ctx context.Context, updateJobResultID string, input UpdateJobResultInput, jobResultFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateJobResult, error) {
	vars := map[string]any{
		"updateJobResultId": updateJobResultID,
		"input":             input,
		"jobResultFiles":    jobResultFiles,
	}

	var res UpdateJobResult
	if err := c.Client.Post(ctx, "UpdateJobResult", UpdateJobResultDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateJobRunnerDocument = `mutation CreateJobRunner ($input: CreateJobRunnerInput!) {
	createJobRunner(input: $input) {
		jobRunner {
			createdAt
			createdBy
			displayID
			id
			ipAddress
			name
			ownerID
			status
			systemOwned
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateJobRunner(ctx context.Context, input CreateJobRunnerInput, interceptors ...clientv2.RequestInterceptor) (*CreateJobRunner, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateJobRunner
	if err := c.Client.Post(ctx, "CreateJobRunner", CreateJobRunnerDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteJobRunnerDocument = `mutation DeleteJobRunner ($deleteJobRunnerId: ID!) {
	deleteJobRunner(id: $deleteJobRunnerId) {
		deletedID
	}
}
`

func (c *Client) DeleteJobRunner(ctx context.Context, deleteJobRunnerID string, interceptors ...clientv2.RequestInterceptor) (*DeleteJobRunner, error) {
	vars := map[string]any{
		"deleteJobRunnerId": deleteJobRunnerID,
	}

	var res DeleteJobRunner
	if err := c.Client.Post(ctx, "DeleteJobRunner", DeleteJobRunnerDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllJobRunnersDocument = `query GetAllJobRunners {
	jobRunners {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				displayID
				id
				ipAddress
				name
				ownerID
				status
				systemOwned
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllJobRunners(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllJobRunners, error) {
	vars := map[string]any{}

	var res GetAllJobRunners
	if err := c.Client.Post(ctx, "GetAllJobRunners", GetAllJobRunnersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetJobRunnerByIDDocument = `query GetJobRunnerByID ($jobRunnerId: ID!) {
	jobRunner(id: $jobRunnerId) {
		createdAt
		createdBy
		displayID
		id
		ipAddress
		name
		ownerID
		status
		systemOwned
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetJobRunnerByID(ctx context.Context, jobRunnerID string, interceptors ...clientv2.RequestInterceptor) (*GetJobRunnerByID, error) {
	vars := map[string]any{
		"jobRunnerId": jobRunnerID,
	}

	var res GetJobRunnerByID
	if err := c.Client.Post(ctx, "GetJobRunnerByID", GetJobRunnerByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetJobRunnersDocument = `query GetJobRunners ($first: Int, $last: Int, $where: JobRunnerWhereInput) {
	jobRunners(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				displayID
				id
				ipAddress
				name
				ownerID
				status
				systemOwned
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetJobRunners(ctx context.Context, first *int64, last *int64, where *JobRunnerWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetJobRunners, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetJobRunners
	if err := c.Client.Post(ctx, "GetJobRunners", GetJobRunnersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateJobRunnerDocument = `mutation UpdateJobRunner ($updateJobRunnerId: ID!, $input: UpdateJobRunnerInput!) {
	updateJobRunner(id: $updateJobRunnerId, input: $input) {
		jobRunner {
			createdAt
			createdBy
			displayID
			id
			ipAddress
			name
			ownerID
			status
			systemOwned
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateJobRunner(ctx context.Context, updateJobRunnerID string, input UpdateJobRunnerInput, interceptors ...clientv2.RequestInterceptor) (*UpdateJobRunner, error) {
	vars := map[string]any{
		"updateJobRunnerId": updateJobRunnerID,
		"input":             input,
	}

	var res UpdateJobRunner
	if err := c.Client.Post(ctx, "UpdateJobRunner", UpdateJobRunnerDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateJobRunnerRegistrationTokenDocument = `mutation CreateJobRunnerRegistrationToken ($input: CreateJobRunnerRegistrationTokenInput!) {
	createJobRunnerRegistrationToken(input: $input) {
		jobRunnerRegistrationToken {
			createdAt
			createdBy
			expiresAt
			id
			jobRunnerID
			lastUsedAt
			ownerID
			tags
			token
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateJobRunnerRegistrationToken(ctx context.Context, input CreateJobRunnerRegistrationTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateJobRunnerRegistrationToken, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateJobRunnerRegistrationToken
	if err := c.Client.Post(ctx, "CreateJobRunnerRegistrationToken", CreateJobRunnerRegistrationTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteJobRunnerRegistrationTokenDocument = `mutation DeleteJobRunnerRegistrationToken ($deleteJobRunnerRegistrationTokenId: ID!) {
	deleteJobRunnerRegistrationToken(id: $deleteJobRunnerRegistrationTokenId) {
		deletedID
	}
}
`

func (c *Client) DeleteJobRunnerRegistrationToken(ctx context.Context, deleteJobRunnerRegistrationTokenID string, interceptors ...clientv2.RequestInterceptor) (*DeleteJobRunnerRegistrationToken, error) {
	vars := map[string]any{
		"deleteJobRunnerRegistrationTokenId": deleteJobRunnerRegistrationTokenID,
	}

	var res DeleteJobRunnerRegistrationToken
	if err := c.Client.Post(ctx, "DeleteJobRunnerRegistrationToken", DeleteJobRunnerRegistrationTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllJobRunnerRegistrationTokensDocument = `query GetAllJobRunnerRegistrationTokens {
	jobRunnerRegistrationTokens {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				expiresAt
				id
				jobRunnerID
				lastUsedAt
				ownerID
				tags
				token
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllJobRunnerRegistrationTokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllJobRunnerRegistrationTokens, error) {
	vars := map[string]any{}

	var res GetAllJobRunnerRegistrationTokens
	if err := c.Client.Post(ctx, "GetAllJobRunnerRegistrationTokens", GetAllJobRunnerRegistrationTokensDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetJobRunnerRegistrationTokenByIDDocument = `query GetJobRunnerRegistrationTokenByID ($jobRunnerRegistrationTokenId: ID!) {
	jobRunnerRegistrationToken(id: $jobRunnerRegistrationTokenId) {
		createdAt
		createdBy
		expiresAt
		id
		jobRunnerID
		lastUsedAt
		ownerID
		tags
		token
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetJobRunnerRegistrationTokenByID(ctx context.Context, jobRunnerRegistrationTokenID string, interceptors ...clientv2.RequestInterceptor) (*GetJobRunnerRegistrationTokenByID, error) {
	vars := map[string]any{
		"jobRunnerRegistrationTokenId": jobRunnerRegistrationTokenID,
	}

	var res GetJobRunnerRegistrationTokenByID
	if err := c.Client.Post(ctx, "GetJobRunnerRegistrationTokenByID", GetJobRunnerRegistrationTokenByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetJobRunnerRegistrationTokensDocument = `query GetJobRunnerRegistrationTokens ($first: Int, $last: Int, $where: JobRunnerRegistrationTokenWhereInput) {
	jobRunnerRegistrationTokens(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				expiresAt
				id
				jobRunnerID
				lastUsedAt
				ownerID
				tags
				token
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetJobRunnerRegistrationTokens(ctx context.Context, first *int64, last *int64, where *JobRunnerRegistrationTokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetJobRunnerRegistrationTokens, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetJobRunnerRegistrationTokens
	if err := c.Client.Post(ctx, "GetJobRunnerRegistrationTokens", GetJobRunnerRegistrationTokensDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateJobRunnerTokenDocument = `mutation CreateJobRunnerToken ($input: CreateJobRunnerTokenInput!) {
	createJobRunnerToken(input: $input) {
		jobRunnerToken {
			createdAt
			createdBy
			expiresAt
			id
			isActive
			lastUsedAt
			ownerID
			revokedAt
			revokedBy
			revokedReason
			tags
			token
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateJobRunnerToken(ctx context.Context, input CreateJobRunnerTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateJobRunnerToken, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateJobRunnerToken
	if err := c.Client.Post(ctx, "CreateJobRunnerToken", CreateJobRunnerTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteJobRunnerTokenDocument = `mutation DeleteJobRunnerToken ($deleteJobRunnerTokenId: ID!) {
	deleteJobRunnerToken(id: $deleteJobRunnerTokenId) {
		deletedID
	}
}
`

func (c *Client) DeleteJobRunnerToken(ctx context.Context, deleteJobRunnerTokenID string, interceptors ...clientv2.RequestInterceptor) (*DeleteJobRunnerToken, error) {
	vars := map[string]any{
		"deleteJobRunnerTokenId": deleteJobRunnerTokenID,
	}

	var res DeleteJobRunnerToken
	if err := c.Client.Post(ctx, "DeleteJobRunnerToken", DeleteJobRunnerTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllJobRunnerTokensDocument = `query GetAllJobRunnerTokens {
	jobRunnerTokens {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				expiresAt
				id
				isActive
				lastUsedAt
				ownerID
				revokedAt
				revokedBy
				revokedReason
				tags
				token
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllJobRunnerTokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllJobRunnerTokens, error) {
	vars := map[string]any{}

	var res GetAllJobRunnerTokens
	if err := c.Client.Post(ctx, "GetAllJobRunnerTokens", GetAllJobRunnerTokensDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetJobRunnerTokenByIDDocument = `query GetJobRunnerTokenByID ($jobRunnerTokenId: ID!) {
	jobRunnerToken(id: $jobRunnerTokenId) {
		createdAt
		createdBy
		expiresAt
		id
		isActive
		lastUsedAt
		ownerID
		revokedAt
		revokedBy
		revokedReason
		tags
		token
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetJobRunnerTokenByID(ctx context.Context, jobRunnerTokenID string, interceptors ...clientv2.RequestInterceptor) (*GetJobRunnerTokenByID, error) {
	vars := map[string]any{
		"jobRunnerTokenId": jobRunnerTokenID,
	}

	var res GetJobRunnerTokenByID
	if err := c.Client.Post(ctx, "GetJobRunnerTokenByID", GetJobRunnerTokenByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetJobRunnerTokensDocument = `query GetJobRunnerTokens ($first: Int, $last: Int, $where: JobRunnerTokenWhereInput) {
	jobRunnerTokens(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				expiresAt
				id
				isActive
				lastUsedAt
				ownerID
				revokedAt
				revokedBy
				revokedReason
				tags
				token
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetJobRunnerTokens(ctx context.Context, first *int64, last *int64, where *JobRunnerTokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetJobRunnerTokens, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetJobRunnerTokens
	if err := c.Client.Post(ctx, "GetJobRunnerTokens", GetJobRunnerTokensDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVJobTemplateDocument = `mutation CreateBulkCSVJobTemplate ($input: Upload!) {
	createBulkCSVJobTemplate(input: $input) {
		jobTemplates {
			configuration
			createdAt
			createdBy
			cron
			description
			displayID
			downloadURL
			id
			ownerID
			platform
			systemOwned
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVJobTemplate(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVJobTemplate, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVJobTemplate
	if err := c.Client.Post(ctx, "CreateBulkCSVJobTemplate", CreateBulkCSVJobTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkJobTemplateDocument = `mutation CreateBulkJobTemplate ($input: [CreateJobTemplateInput!]) {
	createBulkJobTemplate(input: $input) {
		jobTemplates {
			configuration
			createdAt
			createdBy
			cron
			description
			displayID
			downloadURL
			id
			ownerID
			platform
			systemOwned
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkJobTemplate(ctx context.Context, input []*CreateJobTemplateInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkJobTemplate, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkJobTemplate
	if err := c.Client.Post(ctx, "CreateBulkJobTemplate", CreateBulkJobTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateJobTemplateDocument = `mutation CreateJobTemplate ($input: CreateJobTemplateInput!) {
	createJobTemplate(input: $input) {
		jobTemplate {
			configuration
			createdAt
			createdBy
			cron
			description
			displayID
			downloadURL
			id
			ownerID
			platform
			systemOwned
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateJobTemplate(ctx context.Context, input CreateJobTemplateInput, interceptors ...clientv2.RequestInterceptor) (*CreateJobTemplate, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateJobTemplate
	if err := c.Client.Post(ctx, "CreateJobTemplate", CreateJobTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteJobTemplateDocument = `mutation DeleteJobTemplate ($deleteJobTemplateId: ID!) {
	deleteJobTemplate(id: $deleteJobTemplateId) {
		deletedID
	}
}
`

func (c *Client) DeleteJobTemplate(ctx context.Context, deleteJobTemplateID string, interceptors ...clientv2.RequestInterceptor) (*DeleteJobTemplate, error) {
	vars := map[string]any{
		"deleteJobTemplateId": deleteJobTemplateID,
	}

	var res DeleteJobTemplate
	if err := c.Client.Post(ctx, "DeleteJobTemplate", DeleteJobTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllJobTemplatesDocument = `query GetAllJobTemplates {
	jobTemplates {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				configuration
				createdAt
				createdBy
				cron
				description
				displayID
				downloadURL
				id
				ownerID
				platform
				systemOwned
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllJobTemplates(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllJobTemplates, error) {
	vars := map[string]any{}

	var res GetAllJobTemplates
	if err := c.Client.Post(ctx, "GetAllJobTemplates", GetAllJobTemplatesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetJobTemplateByIDDocument = `query GetJobTemplateByID ($jobTemplateId: ID!) {
	jobTemplate(id: $jobTemplateId) {
		configuration
		createdAt
		createdBy
		cron
		description
		displayID
		downloadURL
		id
		ownerID
		platform
		systemOwned
		tags
		title
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetJobTemplateByID(ctx context.Context, jobTemplateID string, interceptors ...clientv2.RequestInterceptor) (*GetJobTemplateByID, error) {
	vars := map[string]any{
		"jobTemplateId": jobTemplateID,
	}

	var res GetJobTemplateByID
	if err := c.Client.Post(ctx, "GetJobTemplateByID", GetJobTemplateByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetJobTemplatesDocument = `query GetJobTemplates ($first: Int, $last: Int, $where: JobTemplateWhereInput) {
	jobTemplates(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				configuration
				createdAt
				createdBy
				cron
				description
				displayID
				downloadURL
				id
				ownerID
				platform
				systemOwned
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetJobTemplates(ctx context.Context, first *int64, last *int64, where *JobTemplateWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetJobTemplates, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetJobTemplates
	if err := c.Client.Post(ctx, "GetJobTemplates", GetJobTemplatesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateJobTemplateDocument = `mutation UpdateJobTemplate ($updateJobTemplateId: ID!, $input: UpdateJobTemplateInput!) {
	updateJobTemplate(id: $updateJobTemplateId, input: $input) {
		jobTemplate {
			configuration
			createdAt
			createdBy
			cron
			description
			displayID
			downloadURL
			id
			ownerID
			platform
			systemOwned
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateJobTemplate(ctx context.Context, updateJobTemplateID string, input UpdateJobTemplateInput, interceptors ...clientv2.RequestInterceptor) (*UpdateJobTemplate, error) {
	vars := map[string]any{
		"updateJobTemplateId": updateJobTemplateID,
		"input":               input,
	}

	var res UpdateJobTemplate
	if err := c.Client.Post(ctx, "UpdateJobTemplate", UpdateJobTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllJobTemplateHistoriesDocument = `query GetAllJobTemplateHistories {
	jobTemplateHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				configuration
				createdAt
				createdBy
				cron
				description
				displayID
				downloadURL
				historyTime
				id
				operation
				ownerID
				platform
				ref
				systemOwned
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllJobTemplateHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllJobTemplateHistories, error) {
	vars := map[string]any{}

	var res GetAllJobTemplateHistories
	if err := c.Client.Post(ctx, "GetAllJobTemplateHistories", GetAllJobTemplateHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetJobTemplateHistoriesDocument = `query GetJobTemplateHistories ($first: Int, $last: Int, $where: JobTemplateHistoryWhereInput) {
	jobTemplateHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				configuration
				createdAt
				createdBy
				cron
				description
				displayID
				downloadURL
				historyTime
				id
				operation
				ownerID
				platform
				ref
				systemOwned
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetJobTemplateHistories(ctx context.Context, first *int64, last *int64, where *JobTemplateHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetJobTemplateHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetJobTemplateHistories
	if err := c.Client.Post(ctx, "GetJobTemplateHistories", GetJobTemplateHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVMappableDomainDocument = `mutation CreateBulkCSVMappableDomain ($input: Upload!) {
	createBulkCSVMappableDomain(input: $input) {
		mappableDomains {
			createdAt
			createdBy
			id
			name
			tags
			updatedAt
			updatedBy
			zoneID
		}
	}
}
`

func (c *Client) CreateBulkCSVMappableDomain(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVMappableDomain, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVMappableDomain
	if err := c.Client.Post(ctx, "CreateBulkCSVMappableDomain", CreateBulkCSVMappableDomainDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkMappableDomainDocument = `mutation CreateBulkMappableDomain ($input: [CreateMappableDomainInput!]) {
	createBulkMappableDomain(input: $input) {
		mappableDomains {
			createdAt
			createdBy
			id
			name
			tags
			updatedAt
			updatedBy
			zoneID
		}
	}
}
`

func (c *Client) CreateBulkMappableDomain(ctx context.Context, input []*CreateMappableDomainInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkMappableDomain, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkMappableDomain
	if err := c.Client.Post(ctx, "CreateBulkMappableDomain", CreateBulkMappableDomainDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateMappableDomainDocument = `mutation CreateMappableDomain ($input: CreateMappableDomainInput!) {
	createMappableDomain(input: $input) {
		mappableDomain {
			createdAt
			createdBy
			id
			name
			tags
			updatedAt
			updatedBy
			zoneID
		}
	}
}
`

func (c *Client) CreateMappableDomain(ctx context.Context, input CreateMappableDomainInput, interceptors ...clientv2.RequestInterceptor) (*CreateMappableDomain, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateMappableDomain
	if err := c.Client.Post(ctx, "CreateMappableDomain", CreateMappableDomainDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteMappableDomainDocument = `mutation DeleteMappableDomain ($deleteMappableDomainId: ID!) {
	deleteMappableDomain(id: $deleteMappableDomainId) {
		deletedID
	}
}
`

func (c *Client) DeleteMappableDomain(ctx context.Context, deleteMappableDomainID string, interceptors ...clientv2.RequestInterceptor) (*DeleteMappableDomain, error) {
	vars := map[string]any{
		"deleteMappableDomainId": deleteMappableDomainID,
	}

	var res DeleteMappableDomain
	if err := c.Client.Post(ctx, "DeleteMappableDomain", DeleteMappableDomainDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllMappableDomainsDocument = `query GetAllMappableDomains {
	mappableDomains {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				id
				name
				tags
				updatedAt
				updatedBy
				zoneID
			}
		}
	}
}
`

func (c *Client) GetAllMappableDomains(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllMappableDomains, error) {
	vars := map[string]any{}

	var res GetAllMappableDomains
	if err := c.Client.Post(ctx, "GetAllMappableDomains", GetAllMappableDomainsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetMappableDomainByIDDocument = `query GetMappableDomainByID ($mappableDomainId: ID!) {
	mappableDomain(id: $mappableDomainId) {
		createdAt
		createdBy
		id
		name
		tags
		updatedAt
		updatedBy
		zoneID
	}
}
`

func (c *Client) GetMappableDomainByID(ctx context.Context, mappableDomainID string, interceptors ...clientv2.RequestInterceptor) (*GetMappableDomainByID, error) {
	vars := map[string]any{
		"mappableDomainId": mappableDomainID,
	}

	var res GetMappableDomainByID
	if err := c.Client.Post(ctx, "GetMappableDomainByID", GetMappableDomainByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetMappableDomainsDocument = `query GetMappableDomains ($first: Int, $last: Int, $where: MappableDomainWhereInput) {
	mappableDomains(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				id
				name
				tags
				updatedAt
				updatedBy
				zoneID
			}
		}
	}
}
`

func (c *Client) GetMappableDomains(ctx context.Context, first *int64, last *int64, where *MappableDomainWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetMappableDomains, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetMappableDomains
	if err := c.Client.Post(ctx, "GetMappableDomains", GetMappableDomainsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateMappableDomainDocument = `mutation UpdateMappableDomain ($updateMappableDomainId: ID!, $input: UpdateMappableDomainInput!) {
	updateMappableDomain(id: $updateMappableDomainId, input: $input) {
		mappableDomain {
			createdAt
			createdBy
			id
			name
			tags
			updatedAt
			updatedBy
			zoneID
		}
	}
}
`

func (c *Client) UpdateMappableDomain(ctx context.Context, updateMappableDomainID string, input UpdateMappableDomainInput, interceptors ...clientv2.RequestInterceptor) (*UpdateMappableDomain, error) {
	vars := map[string]any{
		"updateMappableDomainId": updateMappableDomainID,
		"input":                  input,
	}

	var res UpdateMappableDomain
	if err := c.Client.Post(ctx, "UpdateMappableDomain", UpdateMappableDomainDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllMappableDomainHistoriesDocument = `query GetAllMappableDomainHistories {
	mappableDomainHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				name
				operation
				ref
				tags
				updatedAt
				updatedBy
				zoneID
			}
		}
	}
}
`

func (c *Client) GetAllMappableDomainHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllMappableDomainHistories, error) {
	vars := map[string]any{}

	var res GetAllMappableDomainHistories
	if err := c.Client.Post(ctx, "GetAllMappableDomainHistories", GetAllMappableDomainHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetMappableDomainHistoriesDocument = `query GetMappableDomainHistories ($first: Int, $last: Int, $where: MappableDomainHistoryWhereInput) {
	mappableDomainHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				name
				operation
				ref
				tags
				updatedAt
				updatedBy
				zoneID
			}
		}
	}
}
`

func (c *Client) GetMappableDomainHistories(ctx context.Context, first *int64, last *int64, where *MappableDomainHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetMappableDomainHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetMappableDomainHistories
	if err := c.Client.Post(ctx, "GetMappableDomainHistories", GetMappableDomainHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVMappedControlDocument = `mutation CreateBulkCSVMappedControl ($input: Upload!) {
	createBulkCSVMappedControl(input: $input) {
		mappedControls {
			confidence
			createdAt
			createdBy
			id
			mappingType
			relation
			source
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVMappedControl(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVMappedControl, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVMappedControl
	if err := c.Client.Post(ctx, "CreateBulkCSVMappedControl", CreateBulkCSVMappedControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkMappedControlDocument = `mutation CreateBulkMappedControl ($input: [CreateMappedControlInput!]) {
	createBulkMappedControl(input: $input) {
		mappedControls {
			confidence
			createdAt
			createdBy
			id
			mappingType
			relation
			source
			tags
			updatedAt
			updatedBy
			fromControls {
				edges {
					node {
						id
						refCode
					}
				}
			}
			toControls {
				edges {
					node {
						id
						refCode
					}
				}
			}
			fromSubcontrols {
				edges {
					node {
						id
						refCode
					}
				}
			}
			toSubcontrols {
				edges {
					node {
						id
						refCode
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateBulkMappedControl(ctx context.Context, input []*CreateMappedControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkMappedControl, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkMappedControl
	if err := c.Client.Post(ctx, "CreateBulkMappedControl", CreateBulkMappedControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateMappedControlDocument = `mutation CreateMappedControl ($input: CreateMappedControlInput!) {
	createMappedControl(input: $input) {
		mappedControl {
			confidence
			createdAt
			createdBy
			id
			mappingType
			relation
			source
			tags
			updatedAt
			updatedBy
			fromControls {
				edges {
					node {
						id
						refCode
					}
				}
			}
			toControls {
				edges {
					node {
						id
						refCode
					}
				}
			}
			fromSubcontrols {
				edges {
					node {
						id
						refCode
					}
				}
			}
			toSubcontrols {
				edges {
					node {
						id
						refCode
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateMappedControl(ctx context.Context, input CreateMappedControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateMappedControl, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateMappedControl
	if err := c.Client.Post(ctx, "CreateMappedControl", CreateMappedControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteMappedControlDocument = `mutation DeleteMappedControl ($deleteMappedControlId: ID!) {
	deleteMappedControl(id: $deleteMappedControlId) {
		deletedID
	}
}
`

func (c *Client) DeleteMappedControl(ctx context.Context, deleteMappedControlID string, interceptors ...clientv2.RequestInterceptor) (*DeleteMappedControl, error) {
	vars := map[string]any{
		"deleteMappedControlId": deleteMappedControlID,
	}

	var res DeleteMappedControl
	if err := c.Client.Post(ctx, "DeleteMappedControl", DeleteMappedControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllMappedControlsDocument = `query GetAllMappedControls {
	mappedControls {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				confidence
				createdAt
				createdBy
				id
				mappingType
				relation
				source
				tags
				updatedAt
				updatedBy
				fromControls {
					edges {
						node {
							id
							refCode
						}
					}
				}
				toControls {
					edges {
						node {
							id
							refCode
						}
					}
				}
				fromSubcontrols {
					edges {
						node {
							id
							refCode
						}
					}
				}
				toSubcontrols {
					edges {
						node {
							id
							refCode
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetAllMappedControls(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllMappedControls, error) {
	vars := map[string]any{}

	var res GetAllMappedControls
	if err := c.Client.Post(ctx, "GetAllMappedControls", GetAllMappedControlsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetMappedControlByIDDocument = `query GetMappedControlByID ($mappedControlId: ID!) {
	mappedControl(id: $mappedControlId) {
		confidence
		createdAt
		createdBy
		id
		mappingType
		relation
		source
		tags
		updatedAt
		updatedBy
		fromControls {
			edges {
				node {
					id
					refCode
				}
			}
		}
		toControls {
			edges {
				node {
					id
					refCode
				}
			}
		}
		fromSubcontrols {
			edges {
				node {
					id
					refCode
				}
			}
		}
		toSubcontrols {
			edges {
				node {
					id
					refCode
				}
			}
		}
	}
}
`

func (c *Client) GetMappedControlByID(ctx context.Context, mappedControlID string, interceptors ...clientv2.RequestInterceptor) (*GetMappedControlByID, error) {
	vars := map[string]any{
		"mappedControlId": mappedControlID,
	}

	var res GetMappedControlByID
	if err := c.Client.Post(ctx, "GetMappedControlByID", GetMappedControlByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetMappedControlsDocument = `query GetMappedControls ($first: Int, $last: Int, $where: MappedControlWhereInput) {
	mappedControls(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				confidence
				createdAt
				createdBy
				id
				mappingType
				relation
				source
				tags
				updatedAt
				updatedBy
				fromControls {
					edges {
						node {
							id
							refCode
						}
					}
				}
				toControls {
					edges {
						node {
							id
							refCode
						}
					}
				}
				fromSubcontrols {
					edges {
						node {
							id
							refCode
						}
					}
				}
				toSubcontrols {
					edges {
						node {
							id
							refCode
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetMappedControls(ctx context.Context, first *int64, last *int64, where *MappedControlWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetMappedControls, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetMappedControls
	if err := c.Client.Post(ctx, "GetMappedControls", GetMappedControlsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateMappedControlDocument = `mutation UpdateMappedControl ($updateMappedControlId: ID!, $input: UpdateMappedControlInput!) {
	updateMappedControl(id: $updateMappedControlId, input: $input) {
		mappedControl {
			confidence
			createdAt
			createdBy
			id
			mappingType
			relation
			source
			tags
			updatedAt
			updatedBy
			fromControls {
				edges {
					node {
						id
						refCode
					}
				}
			}
			toControls {
				edges {
					node {
						id
						refCode
					}
				}
			}
			fromSubcontrols {
				edges {
					node {
						id
						refCode
					}
				}
			}
			toSubcontrols {
				edges {
					node {
						id
						refCode
					}
				}
			}
		}
	}
}
`

func (c *Client) UpdateMappedControl(ctx context.Context, updateMappedControlID string, input UpdateMappedControlInput, interceptors ...clientv2.RequestInterceptor) (*UpdateMappedControl, error) {
	vars := map[string]any{
		"updateMappedControlId": updateMappedControlID,
		"input":                 input,
	}

	var res UpdateMappedControl
	if err := c.Client.Post(ctx, "UpdateMappedControl", UpdateMappedControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllMappedControlHistoriesDocument = `query GetAllMappedControlHistories {
	mappedControlHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				confidence
				createdAt
				createdBy
				historyTime
				id
				mappingType
				operation
				ownerID
				ref
				relation
				source
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllMappedControlHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllMappedControlHistories, error) {
	vars := map[string]any{}

	var res GetAllMappedControlHistories
	if err := c.Client.Post(ctx, "GetAllMappedControlHistories", GetAllMappedControlHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetMappedControlHistoriesDocument = `query GetMappedControlHistories ($first: Int, $last: Int, $where: MappedControlHistoryWhereInput) {
	mappedControlHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				confidence
				createdAt
				createdBy
				historyTime
				id
				mappingType
				operation
				ownerID
				ref
				relation
				source
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetMappedControlHistories(ctx context.Context, first *int64, last *int64, where *MappedControlHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetMappedControlHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetMappedControlHistories
	if err := c.Client.Post(ctx, "GetMappedControlHistories", GetMappedControlHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVNarrativeDocument = `mutation CreateBulkCSVNarrative ($input: Upload!) {
	createBulkCSVNarrative(input: $input) {
		narratives {
			createdAt
			createdBy
			description
			details
			displayID
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVNarrative(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVNarrative, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVNarrative
	if err := c.Client.Post(ctx, "CreateBulkCSVNarrative", CreateBulkCSVNarrativeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkNarrativeDocument = `mutation CreateBulkNarrative ($input: [CreateNarrativeInput!]) {
	createBulkNarrative(input: $input) {
		narratives {
			createdAt
			createdBy
			description
			details
			displayID
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkNarrative(ctx context.Context, input []*CreateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkNarrative, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkNarrative
	if err := c.Client.Post(ctx, "CreateBulkNarrative", CreateBulkNarrativeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateNarrativeDocument = `mutation CreateNarrative ($input: CreateNarrativeInput!) {
	createNarrative(input: $input) {
		narrative {
			createdAt
			createdBy
			description
			details
			displayID
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateNarrative(ctx context.Context, input CreateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*CreateNarrative, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateNarrative
	if err := c.Client.Post(ctx, "CreateNarrative", CreateNarrativeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteNarrativeDocument = `mutation DeleteNarrative ($deleteNarrativeId: ID!) {
	deleteNarrative(id: $deleteNarrativeId) {
		deletedID
	}
}
`

func (c *Client) DeleteNarrative(ctx context.Context, deleteNarrativeID string, interceptors ...clientv2.RequestInterceptor) (*DeleteNarrative, error) {
	vars := map[string]any{
		"deleteNarrativeId": deleteNarrativeID,
	}

	var res DeleteNarrative
	if err := c.Client.Post(ctx, "DeleteNarrative", DeleteNarrativeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllNarrativesDocument = `query GetAllNarratives {
	narratives {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				details
				displayID
				id
				name
				ownerID
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllNarratives(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllNarratives, error) {
	vars := map[string]any{}

	var res GetAllNarratives
	if err := c.Client.Post(ctx, "GetAllNarratives", GetAllNarrativesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetNarrativeByIDDocument = `query GetNarrativeByID ($narrativeId: ID!) {
	narrative(id: $narrativeId) {
		createdAt
		createdBy
		description
		details
		displayID
		id
		name
		ownerID
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetNarrativeByID(ctx context.Context, narrativeID string, interceptors ...clientv2.RequestInterceptor) (*GetNarrativeByID, error) {
	vars := map[string]any{
		"narrativeId": narrativeID,
	}

	var res GetNarrativeByID
	if err := c.Client.Post(ctx, "GetNarrativeByID", GetNarrativeByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetNarrativesDocument = `query GetNarratives ($first: Int, $last: Int, $where: NarrativeWhereInput) {
	narratives(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				details
				displayID
				id
				name
				ownerID
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetNarratives(ctx context.Context, first *int64, last *int64, where *NarrativeWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetNarratives, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetNarratives
	if err := c.Client.Post(ctx, "GetNarratives", GetNarrativesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateNarrativeDocument = `mutation UpdateNarrative ($updateNarrativeId: ID!, $input: UpdateNarrativeInput!) {
	updateNarrative(id: $updateNarrativeId, input: $input) {
		narrative {
			createdAt
			createdBy
			description
			details
			displayID
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateNarrative(ctx context.Context, updateNarrativeID string, input UpdateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*UpdateNarrative, error) {
	vars := map[string]any{
		"updateNarrativeId": updateNarrativeID,
		"input":             input,
	}

	var res UpdateNarrative
	if err := c.Client.Post(ctx, "UpdateNarrative", UpdateNarrativeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllNarrativeHistoriesDocument = `query GetAllNarrativeHistories {
	narrativeHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				details
				displayID
				historyTime
				id
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllNarrativeHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllNarrativeHistories, error) {
	vars := map[string]any{}

	var res GetAllNarrativeHistories
	if err := c.Client.Post(ctx, "GetAllNarrativeHistories", GetAllNarrativeHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetNarrativeHistoriesDocument = `query GetNarrativeHistories ($first: Int, $last: Int, $where: NarrativeHistoryWhereInput) {
	narrativeHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				details
				displayID
				historyTime
				id
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetNarrativeHistories(ctx context.Context, first *int64, last *int64, where *NarrativeHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetNarrativeHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetNarrativeHistories
	if err := c.Client.Post(ctx, "GetNarrativeHistories", GetNarrativeHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllNoteHistoriesDocument = `query GetAllNoteHistories {
	noteHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				displayID
				historyTime
				id
				operation
				ownerID
				ref
				text
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllNoteHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllNoteHistories, error) {
	vars := map[string]any{}

	var res GetAllNoteHistories
	if err := c.Client.Post(ctx, "GetAllNoteHistories", GetAllNoteHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetNoteHistoriesDocument = `query GetNoteHistories ($first: Int, $last: Int, $where: NoteHistoryWhereInput) {
	noteHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				displayID
				historyTime
				id
				operation
				ownerID
				ref
				text
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetNoteHistories(ctx context.Context, first *int64, last *int64, where *NoteHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetNoteHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetNoteHistories
	if err := c.Client.Post(ctx, "GetNoteHistories", GetNoteHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateOnboardingDocument = `mutation CreateOnboarding ($input: CreateOnboardingInput!) {
	createOnboarding(input: $input) {
		onboarding {
			companyDetails
			companyName
			compliance
			domains
			id
			organizationID
			userDetails
		}
	}
}
`

func (c *Client) CreateOnboarding(ctx context.Context, input CreateOnboardingInput, interceptors ...clientv2.RequestInterceptor) (*CreateOnboarding, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateOnboarding
	if err := c.Client.Post(ctx, "CreateOnboarding", CreateOnboardingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateOrganizationDocument = `mutation CreateOrganization ($input: CreateOrganizationInput!, $avatarFile: Upload) {
	createOrganization(input: $input, avatarFile: $avatarFile) {
		organization {
			avatarLocalFileID
			avatarRemoteURL
			avatarUpdatedAt
			createdAt
			createdBy
			dedicatedDb
			description
			displayName
			id
			name
			personalOrg
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateOrganization(ctx context.Context, input CreateOrganizationInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateOrganization, error) {
	vars := map[string]any{
		"input":      input,
		"avatarFile": avatarFile,
	}

	var res CreateOrganization
	if err := c.Client.Post(ctx, "CreateOrganization", CreateOrganizationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteOrganizationDocument = `mutation DeleteOrganization ($deleteOrganizationId: ID!) {
	deleteOrganization(id: $deleteOrganizationId) {
		deletedID
	}
}
`

func (c *Client) DeleteOrganization(ctx context.Context, deleteOrganizationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteOrganization, error) {
	vars := map[string]any{
		"deleteOrganizationId": deleteOrganizationID,
	}

	var res DeleteOrganization
	if err := c.Client.Post(ctx, "DeleteOrganization", DeleteOrganizationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrganizationsDocument = `query GetAllOrganizations {
	organizations {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				avatarLocalFileID
				avatarRemoteURL
				avatarUpdatedAt
				createdAt
				createdBy
				dedicatedDb
				description
				displayName
				id
				name
				personalOrg
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllOrganizations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizations, error) {
	vars := map[string]any{}

	var res GetAllOrganizations
	if err := c.Client.Post(ctx, "GetAllOrganizations", GetAllOrganizationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationByIDDocument = `query GetOrganizationByID ($organizationId: ID!) {
	organization(id: $organizationId) {
		avatarLocalFileID
		avatarRemoteURL
		avatarUpdatedAt
		createdAt
		createdBy
		dedicatedDb
		description
		displayName
		id
		name
		personalOrg
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetOrganizationByID(ctx context.Context, organizationID string, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationByID, error) {
	vars := map[string]any{
		"organizationId": organizationID,
	}

	var res GetOrganizationByID
	if err := c.Client.Post(ctx, "GetOrganizationByID", GetOrganizationByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationsDocument = `query GetOrganizations ($first: Int, $last: Int, $where: OrganizationWhereInput) {
	organizations(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				avatarLocalFileID
				avatarRemoteURL
				avatarUpdatedAt
				createdAt
				createdBy
				dedicatedDb
				description
				displayName
				id
				name
				personalOrg
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetOrganizations(ctx context.Context, first *int64, last *int64, where *OrganizationWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizations, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetOrganizations
	if err := c.Client.Post(ctx, "GetOrganizations", GetOrganizationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateOrganizationDocument = `mutation UpdateOrganization ($updateOrganizationId: ID!, $input: UpdateOrganizationInput!, $avatarFile: Upload) {
	updateOrganization(id: $updateOrganizationId, input: $input, avatarFile: $avatarFile) {
		organization {
			avatarLocalFileID
			avatarRemoteURL
			avatarUpdatedAt
			createdAt
			createdBy
			dedicatedDb
			description
			displayName
			id
			name
			personalOrg
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateOrganization(ctx context.Context, updateOrganizationID string, input UpdateOrganizationInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateOrganization, error) {
	vars := map[string]any{
		"updateOrganizationId": updateOrganizationID,
		"input":                input,
		"avatarFile":           avatarFile,
	}

	var res UpdateOrganization
	if err := c.Client.Post(ctx, "UpdateOrganization", UpdateOrganizationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrganizationHistoriesDocument = `query GetAllOrganizationHistories {
	organizationHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				avatarLocalFileID
				avatarRemoteURL
				avatarUpdatedAt
				createdAt
				createdBy
				dedicatedDb
				description
				displayName
				historyTime
				id
				name
				operation
				personalOrg
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllOrganizationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizationHistories, error) {
	vars := map[string]any{}

	var res GetAllOrganizationHistories
	if err := c.Client.Post(ctx, "GetAllOrganizationHistories", GetAllOrganizationHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationHistoriesDocument = `query GetOrganizationHistories ($first: Int, $last: Int, $where: OrganizationHistoryWhereInput) {
	organizationHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				avatarLocalFileID
				avatarRemoteURL
				avatarUpdatedAt
				createdAt
				createdBy
				dedicatedDb
				description
				displayName
				historyTime
				id
				name
				operation
				personalOrg
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetOrganizationHistories(ctx context.Context, first *int64, last *int64, where *OrganizationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetOrganizationHistories
	if err := c.Client.Post(ctx, "GetOrganizationHistories", GetOrganizationHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVOrganizationSettingDocument = `mutation CreateBulkCSVOrganizationSetting ($input: Upload!) {
	createBulkCSVOrganizationSetting(input: $input) {
		organizationSettings {
			allowedEmailDomains
			billingAddress
			billingContact
			billingEmail
			billingNotificationsEnabled
			billingPhone
			complianceWebhookToken
			createdAt
			createdBy
			domains
			geoLocation
			id
			identityProvider
			identityProviderClientID
			identityProviderClientSecret
			identityProviderEntityID
			identityProviderLoginEnforced
			identityProviderMetadataEndpoint
			identityProviderAuthTested
			oidcDiscoveryEndpoint
			organizationID
			tags
			taxIdentifier
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVOrganizationSetting(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVOrganizationSetting, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVOrganizationSetting
	if err := c.Client.Post(ctx, "CreateBulkCSVOrganizationSetting", CreateBulkCSVOrganizationSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkOrganizationSettingDocument = `mutation CreateBulkOrganizationSetting ($input: [CreateOrganizationSettingInput!]) {
	createBulkOrganizationSetting(input: $input) {
		organizationSettings {
			allowedEmailDomains
			billingAddress
			billingContact
			billingEmail
			billingNotificationsEnabled
			billingPhone
			complianceWebhookToken
			createdAt
			createdBy
			domains
			geoLocation
			id
			identityProvider
			identityProviderClientID
			identityProviderClientSecret
			identityProviderEntityID
			identityProviderLoginEnforced
			identityProviderMetadataEndpoint
			identityProviderAuthTested
			oidcDiscoveryEndpoint
			organizationID
			tags
			taxIdentifier
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkOrganizationSetting(ctx context.Context, input []*CreateOrganizationSettingInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkOrganizationSetting, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkOrganizationSetting
	if err := c.Client.Post(ctx, "CreateBulkOrganizationSetting", CreateBulkOrganizationSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateOrganizationSettingDocument = `mutation CreateOrganizationSetting ($input: CreateOrganizationSettingInput!) {
	createOrganizationSetting(input: $input) {
		organizationSetting {
			allowedEmailDomains
			billingAddress
			billingContact
			billingEmail
			billingNotificationsEnabled
			billingPhone
			complianceWebhookToken
			createdAt
			createdBy
			domains
			geoLocation
			id
			identityProvider
			identityProviderClientID
			identityProviderClientSecret
			identityProviderEntityID
			identityProviderLoginEnforced
			identityProviderMetadataEndpoint
			identityProviderAuthTested
			oidcDiscoveryEndpoint
			organizationID
			tags
			taxIdentifier
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateOrganizationSetting(ctx context.Context, input CreateOrganizationSettingInput, interceptors ...clientv2.RequestInterceptor) (*CreateOrganizationSetting, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateOrganizationSetting
	if err := c.Client.Post(ctx, "CreateOrganizationSetting", CreateOrganizationSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteOrganizationSettingDocument = `mutation DeleteOrganizationSetting ($deleteOrganizationSettingId: ID!) {
	deleteOrganizationSetting(id: $deleteOrganizationSettingId) {
		deletedID
	}
}
`

func (c *Client) DeleteOrganizationSetting(ctx context.Context, deleteOrganizationSettingID string, interceptors ...clientv2.RequestInterceptor) (*DeleteOrganizationSetting, error) {
	vars := map[string]any{
		"deleteOrganizationSettingId": deleteOrganizationSettingID,
	}

	var res DeleteOrganizationSetting
	if err := c.Client.Post(ctx, "DeleteOrganizationSetting", DeleteOrganizationSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrganizationSettingsDocument = `query GetAllOrganizationSettings {
	organizationSettings {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				allowedEmailDomains
				billingAddress
				billingContact
				billingEmail
				billingNotificationsEnabled
				billingPhone
				complianceWebhookToken
				createdAt
				createdBy
				domains
				geoLocation
				id
				identityProvider
				identityProviderClientID
				identityProviderClientSecret
				identityProviderEntityID
				identityProviderLoginEnforced
				identityProviderMetadataEndpoint
				identityProviderAuthTested
				oidcDiscoveryEndpoint
				organizationID
				tags
				taxIdentifier
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllOrganizationSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizationSettings, error) {
	vars := map[string]any{}

	var res GetAllOrganizationSettings
	if err := c.Client.Post(ctx, "GetAllOrganizationSettings", GetAllOrganizationSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationSettingByIDDocument = `query GetOrganizationSettingByID ($organizationSettingId: ID!) {
	organizationSetting(id: $organizationSettingId) {
		allowedEmailDomains
		billingAddress
		billingContact
		billingEmail
		billingNotificationsEnabled
		billingPhone
		complianceWebhookToken
		createdAt
		createdBy
		domains
		geoLocation
		id
		identityProvider
		identityProviderAuthTested
		identityProviderClientID
		identityProviderClientSecret
		identityProviderEntityID
		identityProviderLoginEnforced
		identityProviderMetadataEndpoint
		oidcDiscoveryEndpoint
		organizationID
		tags
		taxIdentifier
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetOrganizationSettingByID(ctx context.Context, organizationSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettingByID, error) {
	vars := map[string]any{
		"organizationSettingId": organizationSettingID,
	}

	var res GetOrganizationSettingByID
	if err := c.Client.Post(ctx, "GetOrganizationSettingByID", GetOrganizationSettingByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationSettingsDocument = `query GetOrganizationSettings ($first: Int, $last: Int, $where: OrganizationSettingWhereInput) {
	organizationSettings(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				allowedEmailDomains
				billingAddress
				billingContact
				billingEmail
				billingNotificationsEnabled
				billingPhone
				complianceWebhookToken
				createdAt
				createdBy
				domains
				geoLocation
				id
				identityProvider
				identityProviderAuthTested
				identityProviderClientID
				identityProviderClientSecret
				identityProviderEntityID
				identityProviderLoginEnforced
				identityProviderMetadataEndpoint
				oidcDiscoveryEndpoint
				organizationID
				tags
				taxIdentifier
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetOrganizationSettings(ctx context.Context, first *int64, last *int64, where *OrganizationSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettings, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetOrganizationSettings
	if err := c.Client.Post(ctx, "GetOrganizationSettings", GetOrganizationSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateOrganizationSettingDocument = `mutation UpdateOrganizationSetting ($updateOrganizationSettingId: ID!, $input: UpdateOrganizationSettingInput!) {
	updateOrganizationSetting(id: $updateOrganizationSettingId, input: $input) {
		organizationSetting {
			allowedEmailDomains
			billingAddress
			billingContact
			billingEmail
			billingNotificationsEnabled
			billingPhone
			complianceWebhookToken
			createdAt
			createdBy
			domains
			geoLocation
			id
			identityProvider
			identityProviderClientID
			identityProviderClientSecret
			identityProviderEntityID
			identityProviderLoginEnforced
			identityProviderMetadataEndpoint
			identityProviderAuthTested
			oidcDiscoveryEndpoint
			organizationID
			tags
			taxIdentifier
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateOrganizationSetting(ctx context.Context, updateOrganizationSettingID string, input UpdateOrganizationSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateOrganizationSetting, error) {
	vars := map[string]any{
		"updateOrganizationSettingId": updateOrganizationSettingID,
		"input":                       input,
	}

	var res UpdateOrganizationSetting
	if err := c.Client.Post(ctx, "UpdateOrganizationSetting", UpdateOrganizationSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrganizationSettingHistoriesDocument = `query GetAllOrganizationSettingHistories {
	organizationSettingHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				allowedEmailDomains
				billingAddress
				billingContact
				billingEmail
				billingNotificationsEnabled
				billingPhone
				complianceWebhookToken
				createdAt
				createdBy
				domains
				geoLocation
				historyTime
				id
				identityProvider
				identityProviderClientID
				identityProviderClientSecret
				identityProviderEntityID
				identityProviderLoginEnforced
				identityProviderMetadataEndpoint
				oidcDiscoveryEndpoint
				operation
				organizationID
				ref
				tags
				taxIdentifier
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllOrganizationSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizationSettingHistories, error) {
	vars := map[string]any{}

	var res GetAllOrganizationSettingHistories
	if err := c.Client.Post(ctx, "GetAllOrganizationSettingHistories", GetAllOrganizationSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationSettingHistoriesDocument = `query GetOrganizationSettingHistories ($first: Int, $last: Int, $where: OrganizationSettingHistoryWhereInput) {
	organizationSettingHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				allowedEmailDomains
				billingAddress
				billingContact
				billingEmail
				billingNotificationsEnabled
				billingPhone
				complianceWebhookToken
				createdAt
				createdBy
				domains
				geoLocation
				historyTime
				id
				identityProvider
				identityProviderClientID
				identityProviderClientSecret
				identityProviderEntityID
				identityProviderLoginEnforced
				identityProviderMetadataEndpoint
				oidcDiscoveryEndpoint
				operation
				organizationID
				ref
				tags
				taxIdentifier
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetOrganizationSettingHistories(ctx context.Context, first *int64, last *int64, where *OrganizationSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettingHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetOrganizationSettingHistories
	if err := c.Client.Post(ctx, "GetOrganizationSettingHistories", GetOrganizationSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVOrgMembershipDocument = `mutation CreateBulkCSVOrgMembership ($input: Upload!) {
	createBulkCSVOrgMembership(input: $input) {
		orgMemberships {
			createdAt
			createdBy
			id
			organizationID
			role
			updatedAt
			updatedBy
			userID
		}
	}
}
`

func (c *Client) CreateBulkCSVOrgMembership(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVOrgMembership, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVOrgMembership
	if err := c.Client.Post(ctx, "CreateBulkCSVOrgMembership", CreateBulkCSVOrgMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkOrgMembershipDocument = `mutation CreateBulkOrgMembership ($input: [CreateOrgMembershipInput!]) {
	createBulkOrgMembership(input: $input) {
		orgMemberships {
			createdAt
			createdBy
			id
			organizationID
			role
			updatedAt
			updatedBy
			userID
		}
	}
}
`

func (c *Client) CreateBulkOrgMembership(ctx context.Context, input []*CreateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkOrgMembership, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkOrgMembership
	if err := c.Client.Post(ctx, "CreateBulkOrgMembership", CreateBulkOrgMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateOrgMembershipDocument = `mutation CreateOrgMembership ($input: CreateOrgMembershipInput!) {
	createOrgMembership(input: $input) {
		orgMembership {
			createdAt
			createdBy
			id
			organizationID
			role
			updatedAt
			updatedBy
			userID
		}
	}
}
`

func (c *Client) CreateOrgMembership(ctx context.Context, input CreateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateOrgMembership, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateOrgMembership
	if err := c.Client.Post(ctx, "CreateOrgMembership", CreateOrgMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteOrgMembershipDocument = `mutation DeleteOrgMembership ($deleteOrgMembershipId: ID!) {
	deleteOrgMembership(id: $deleteOrgMembershipId) {
		deletedID
	}
}
`

func (c *Client) DeleteOrgMembership(ctx context.Context, deleteOrgMembershipID string, interceptors ...clientv2.RequestInterceptor) (*DeleteOrgMembership, error) {
	vars := map[string]any{
		"deleteOrgMembershipId": deleteOrgMembershipID,
	}

	var res DeleteOrgMembership
	if err := c.Client.Post(ctx, "DeleteOrgMembership", DeleteOrgMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrgMembershipsDocument = `query GetAllOrgMemberships {
	orgMemberships {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				id
				organizationID
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetAllOrgMemberships(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrgMemberships, error) {
	vars := map[string]any{}

	var res GetAllOrgMemberships
	if err := c.Client.Post(ctx, "GetAllOrgMemberships", GetAllOrgMembershipsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrgMembershipByIDDocument = `query GetOrgMembershipByID ($orgMembershipId: ID!) {
	orgMembership(id: $orgMembershipId) {
		createdAt
		createdBy
		id
		organizationID
		role
		updatedAt
		updatedBy
		userID
	}
}
`

func (c *Client) GetOrgMembershipByID(ctx context.Context, orgMembershipID string, interceptors ...clientv2.RequestInterceptor) (*GetOrgMembershipByID, error) {
	vars := map[string]any{
		"orgMembershipId": orgMembershipID,
	}

	var res GetOrgMembershipByID
	if err := c.Client.Post(ctx, "GetOrgMembershipByID", GetOrgMembershipByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrgMembershipsDocument = `query GetOrgMemberships ($first: Int, $last: Int, $where: OrgMembershipWhereInput) {
	orgMemberships(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				id
				organizationID
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetOrgMemberships(ctx context.Context, first *int64, last *int64, where *OrgMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgMemberships, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetOrgMemberships
	if err := c.Client.Post(ctx, "GetOrgMemberships", GetOrgMembershipsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateOrgMembershipDocument = `mutation UpdateOrgMembership ($updateOrgMembershipId: ID!, $input: UpdateOrgMembershipInput!) {
	updateOrgMembership(id: $updateOrgMembershipId, input: $input) {
		orgMembership {
			createdAt
			createdBy
			id
			organizationID
			role
			updatedAt
			updatedBy
			userID
		}
	}
}
`

func (c *Client) UpdateOrgMembership(ctx context.Context, updateOrgMembershipID string, input UpdateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateOrgMembership, error) {
	vars := map[string]any{
		"updateOrgMembershipId": updateOrgMembershipID,
		"input":                 input,
	}

	var res UpdateOrgMembership
	if err := c.Client.Post(ctx, "UpdateOrgMembership", UpdateOrgMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrgMembershipHistoriesDocument = `query GetAllOrgMembershipHistories {
	orgMembershipHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				organizationID
				ref
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetAllOrgMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrgMembershipHistories, error) {
	vars := map[string]any{}

	var res GetAllOrgMembershipHistories
	if err := c.Client.Post(ctx, "GetAllOrgMembershipHistories", GetAllOrgMembershipHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrgMembershipHistoriesDocument = `query GetOrgMembershipHistories ($first: Int, $last: Int, $where: OrgMembershipHistoryWhereInput) {
	orgMembershipHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				organizationID
				ref
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetOrgMembershipHistories(ctx context.Context, first *int64, last *int64, where *OrgMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgMembershipHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetOrgMembershipHistories
	if err := c.Client.Post(ctx, "GetOrgMembershipHistories", GetOrgMembershipHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrgSubscriptionsDocument = `query GetAllOrgSubscriptions {
	orgSubscriptions {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				active
				createdAt
				createdBy
				daysUntilDue
				expiresAt
				id
				ownerID
				stripeSubscriptionID
				stripeSubscriptionStatus
				tags
				trialExpiresAt
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllOrgSubscriptions(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrgSubscriptions, error) {
	vars := map[string]any{}

	var res GetAllOrgSubscriptions
	if err := c.Client.Post(ctx, "GetAllOrgSubscriptions", GetAllOrgSubscriptionsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrgSubscriptionByIDDocument = `query GetOrgSubscriptionByID ($orgSubscriptionId: ID!) {
	orgSubscription(id: $orgSubscriptionId) {
		active
		createdAt
		createdBy
		daysUntilDue
		expiresAt
		id
		ownerID
		stripeSubscriptionID
		stripeSubscriptionStatus
		tags
		trialExpiresAt
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetOrgSubscriptionByID(ctx context.Context, orgSubscriptionID string, interceptors ...clientv2.RequestInterceptor) (*GetOrgSubscriptionByID, error) {
	vars := map[string]any{
		"orgSubscriptionId": orgSubscriptionID,
	}

	var res GetOrgSubscriptionByID
	if err := c.Client.Post(ctx, "GetOrgSubscriptionByID", GetOrgSubscriptionByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrgSubscriptionsDocument = `query GetOrgSubscriptions ($first: Int, $last: Int, $where: OrgSubscriptionWhereInput) {
	orgSubscriptions(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				active
				createdAt
				createdBy
				daysUntilDue
				expiresAt
				id
				ownerID
				stripeSubscriptionID
				stripeSubscriptionStatus
				tags
				trialExpiresAt
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetOrgSubscriptions(ctx context.Context, first *int64, last *int64, where *OrgSubscriptionWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgSubscriptions, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetOrgSubscriptions
	if err := c.Client.Post(ctx, "GetOrgSubscriptions", GetOrgSubscriptionsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrgSubscriptionHistoriesDocument = `query GetAllOrgSubscriptionHistories {
	orgSubscriptionHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				active
				createdAt
				createdBy
				daysUntilDue
				expiresAt
				historyTime
				id
				operation
				ownerID
				ref
				stripeSubscriptionID
				stripeSubscriptionStatus
				tags
				trialExpiresAt
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllOrgSubscriptionHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrgSubscriptionHistories, error) {
	vars := map[string]any{}

	var res GetAllOrgSubscriptionHistories
	if err := c.Client.Post(ctx, "GetAllOrgSubscriptionHistories", GetAllOrgSubscriptionHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrgSubscriptionHistoriesDocument = `query GetOrgSubscriptionHistories ($first: Int, $last: Int, $where: OrgSubscriptionHistoryWhereInput) {
	orgSubscriptionHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				active
				createdAt
				createdBy
				daysUntilDue
				expiresAt
				historyTime
				id
				operation
				ownerID
				ref
				stripeSubscriptionID
				stripeSubscriptionStatus
				tags
				trialExpiresAt
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetOrgSubscriptionHistories(ctx context.Context, first *int64, last *int64, where *OrgSubscriptionHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgSubscriptionHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetOrgSubscriptionHistories
	if err := c.Client.Post(ctx, "GetOrgSubscriptionHistories", GetOrgSubscriptionHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreatePersonalAccessTokenDocument = `mutation CreatePersonalAccessToken ($input: CreatePersonalAccessTokenInput!) {
	createPersonalAccessToken(input: $input) {
		personalAccessToken {
			createdAt
			createdBy
			description
			expiresAt
			id
			isActive
			lastUsedAt
			name
			revokedAt
			revokedBy
			revokedReason
			ssoAuthorizations
			scopes
			tags
			token
			updatedAt
			updatedBy
			organizations {
				edges {
					node {
						id
						name
						displayName
					}
				}
			}
		}
	}
}
`

func (c *Client) CreatePersonalAccessToken(ctx context.Context, input CreatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreatePersonalAccessToken, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreatePersonalAccessToken
	if err := c.Client.Post(ctx, "CreatePersonalAccessToken", CreatePersonalAccessTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeletePersonalAccessTokenDocument = `mutation DeletePersonalAccessToken ($deletePersonalAccessTokenId: ID!) {
	deletePersonalAccessToken(id: $deletePersonalAccessTokenId) {
		deletedID
	}
}
`

func (c *Client) DeletePersonalAccessToken(ctx context.Context, deletePersonalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*DeletePersonalAccessToken, error) {
	vars := map[string]any{
		"deletePersonalAccessTokenId": deletePersonalAccessTokenID,
	}

	var res DeletePersonalAccessToken
	if err := c.Client.Post(ctx, "DeletePersonalAccessToken", DeletePersonalAccessTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllPersonalAccessTokensDocument = `query GetAllPersonalAccessTokens {
	personalAccessTokens {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				expiresAt
				id
				isActive
				lastUsedAt
				name
				revokedAt
				revokedBy
				revokedReason
				ssoAuthorizations
				scopes
				tags
				token
				updatedAt
				updatedBy
				organizations {
					edges {
						node {
							id
							name
							displayName
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetAllPersonalAccessTokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllPersonalAccessTokens, error) {
	vars := map[string]any{}

	var res GetAllPersonalAccessTokens
	if err := c.Client.Post(ctx, "GetAllPersonalAccessTokens", GetAllPersonalAccessTokensDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetPersonalAccessTokenByIDDocument = `query GetPersonalAccessTokenByID ($personalAccessTokenId: ID!) {
	personalAccessToken(id: $personalAccessTokenId) {
		createdAt
		createdBy
		description
		expiresAt
		id
		isActive
		lastUsedAt
		name
		revokedAt
		revokedBy
		revokedReason
		ssoAuthorizations
		scopes
		tags
		token
		updatedAt
		updatedBy
		organizations {
			edges {
				node {
					id
					name
					displayName
				}
			}
		}
	}
}
`

func (c *Client) GetPersonalAccessTokenByID(ctx context.Context, personalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*GetPersonalAccessTokenByID, error) {
	vars := map[string]any{
		"personalAccessTokenId": personalAccessTokenID,
	}

	var res GetPersonalAccessTokenByID
	if err := c.Client.Post(ctx, "GetPersonalAccessTokenByID", GetPersonalAccessTokenByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetPersonalAccessTokensDocument = `query GetPersonalAccessTokens ($first: Int, $last: Int, $where: PersonalAccessTokenWhereInput) {
	personalAccessTokens(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				expiresAt
				id
				isActive
				lastUsedAt
				name
				revokedAt
				revokedBy
				revokedReason
				ssoAuthorizations
				scopes
				tags
				token
				updatedAt
				updatedBy
				organizations {
					edges {
						node {
							id
							name
							displayName
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetPersonalAccessTokens(ctx context.Context, first *int64, last *int64, where *PersonalAccessTokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetPersonalAccessTokens, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetPersonalAccessTokens
	if err := c.Client.Post(ctx, "GetPersonalAccessTokens", GetPersonalAccessTokensDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdatePersonalAccessTokenDocument = `mutation UpdatePersonalAccessToken ($updatePersonalAccessTokenId: ID!, $input: UpdatePersonalAccessTokenInput!) {
	updatePersonalAccessToken(id: $updatePersonalAccessTokenId, input: $input) {
		personalAccessToken {
			createdAt
			createdBy
			description
			expiresAt
			id
			isActive
			lastUsedAt
			name
			revokedAt
			revokedBy
			revokedReason
			ssoAuthorizations
			scopes
			tags
			token
			updatedAt
			updatedBy
			organizations {
				edges {
					node {
						id
						name
						displayName
					}
				}
			}
		}
	}
}
`

func (c *Client) UpdatePersonalAccessToken(ctx context.Context, updatePersonalAccessTokenID string, input UpdatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*UpdatePersonalAccessToken, error) {
	vars := map[string]any{
		"updatePersonalAccessTokenId": updatePersonalAccessTokenID,
		"input":                       input,
	}

	var res UpdatePersonalAccessToken
	if err := c.Client.Post(ctx, "UpdatePersonalAccessToken", UpdatePersonalAccessTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVProcedureDocument = `mutation CreateBulkCSVProcedure ($input: Upload!) {
	createBulkCSVProcedure(input: $input) {
		procedures {
			approvalRequired
			approverID
			controlSuggestions
			createdAt
			createdBy
			delegateID
			details
			dismissedControlSuggestions
			dismissedImprovementSuggestions
			dismissedTagSuggestions
			displayID
			id
			improvementSuggestions
			name
			ownerID
			procedureType
			reviewDue
			reviewFrequency
			revision
			status
			summary
			tagSuggestions
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVProcedure(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVProcedure, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVProcedure
	if err := c.Client.Post(ctx, "CreateBulkCSVProcedure", CreateBulkCSVProcedureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkProcedureDocument = `mutation CreateBulkProcedure ($input: [CreateProcedureInput!]) {
	createBulkProcedure(input: $input) {
		procedures {
			approvalRequired
			approverID
			controlSuggestions
			createdAt
			createdBy
			delegateID
			details
			dismissedControlSuggestions
			dismissedImprovementSuggestions
			dismissedTagSuggestions
			displayID
			id
			improvementSuggestions
			name
			ownerID
			procedureType
			reviewDue
			reviewFrequency
			revision
			status
			summary
			tagSuggestions
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkProcedure(ctx context.Context, input []*CreateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkProcedure, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkProcedure
	if err := c.Client.Post(ctx, "CreateBulkProcedure", CreateBulkProcedureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateProcedureDocument = `mutation CreateProcedure ($input: CreateProcedureInput!) {
	createProcedure(input: $input) {
		procedure {
			approvalRequired
			approverID
			controlSuggestions
			createdAt
			createdBy
			delegateID
			details
			dismissedControlSuggestions
			dismissedImprovementSuggestions
			dismissedTagSuggestions
			displayID
			id
			improvementSuggestions
			name
			ownerID
			procedureType
			reviewDue
			reviewFrequency
			revision
			status
			summary
			tagSuggestions
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateProcedure(ctx context.Context, input CreateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*CreateProcedure, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateProcedure
	if err := c.Client.Post(ctx, "CreateProcedure", CreateProcedureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateUploadProcedureDocument = `mutation CreateUploadProcedure ($procedureFile: Upload!, $ownerID: ID) {
	createUploadProcedure(procedureFile: $procedureFile, ownerID: $ownerID) {
		procedure {
			approvalRequired
			approverID
			controlSuggestions
			createdAt
			createdBy
			delegateID
			details
			dismissedControlSuggestions
			dismissedImprovementSuggestions
			dismissedTagSuggestions
			displayID
			id
			improvementSuggestions
			name
			ownerID
			procedureType
			reviewDue
			reviewFrequency
			revision
			status
			summary
			tagSuggestions
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateUploadProcedure(ctx context.Context, procedureFile graphql.Upload, ownerID *string, interceptors ...clientv2.RequestInterceptor) (*CreateUploadProcedure, error) {
	vars := map[string]any{
		"procedureFile": procedureFile,
		"ownerID":       ownerID,
	}

	var res CreateUploadProcedure
	if err := c.Client.Post(ctx, "CreateUploadProcedure", CreateUploadProcedureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteProcedureDocument = `mutation DeleteProcedure ($deleteProcedureId: ID!) {
	deleteProcedure(id: $deleteProcedureId) {
		deletedID
	}
}
`

func (c *Client) DeleteProcedure(ctx context.Context, deleteProcedureID string, interceptors ...clientv2.RequestInterceptor) (*DeleteProcedure, error) {
	vars := map[string]any{
		"deleteProcedureId": deleteProcedureID,
	}

	var res DeleteProcedure
	if err := c.Client.Post(ctx, "DeleteProcedure", DeleteProcedureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllProceduresDocument = `query GetAllProcedures {
	procedures {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				approvalRequired
				approverID
				controlSuggestions
				createdAt
				createdBy
				delegateID
				details
				dismissedControlSuggestions
				dismissedImprovementSuggestions
				dismissedTagSuggestions
				displayID
				id
				improvementSuggestions
				name
				ownerID
				procedureType
				reviewDue
				reviewFrequency
				revision
				status
				summary
				tagSuggestions
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllProcedures(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProcedures, error) {
	vars := map[string]any{}

	var res GetAllProcedures
	if err := c.Client.Post(ctx, "GetAllProcedures", GetAllProceduresDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProcedureByIDDocument = `query GetProcedureByID ($procedureId: ID!) {
	procedure(id: $procedureId) {
		approvalRequired
		approverID
		controlSuggestions
		createdAt
		createdBy
		delegateID
		details
		dismissedControlSuggestions
		dismissedImprovementSuggestions
		dismissedTagSuggestions
		displayID
		id
		improvementSuggestions
		name
		ownerID
		procedureType
		reviewDue
		reviewFrequency
		revision
		status
		summary
		tagSuggestions
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetProcedureByID(ctx context.Context, procedureID string, interceptors ...clientv2.RequestInterceptor) (*GetProcedureByID, error) {
	vars := map[string]any{
		"procedureId": procedureID,
	}

	var res GetProcedureByID
	if err := c.Client.Post(ctx, "GetProcedureByID", GetProcedureByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProceduresDocument = `query GetProcedures ($first: Int, $last: Int, $where: ProcedureWhereInput) {
	procedures(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				approvalRequired
				approverID
				controlSuggestions
				createdAt
				createdBy
				delegateID
				details
				dismissedControlSuggestions
				dismissedImprovementSuggestions
				dismissedTagSuggestions
				displayID
				id
				improvementSuggestions
				name
				ownerID
				procedureType
				reviewDue
				reviewFrequency
				revision
				status
				summary
				tagSuggestions
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetProcedures(ctx context.Context, first *int64, last *int64, where *ProcedureWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProcedures, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetProcedures
	if err := c.Client.Post(ctx, "GetProcedures", GetProceduresDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateProcedureDocument = `mutation UpdateProcedure ($updateProcedureId: ID!, $input: UpdateProcedureInput!) {
	updateProcedure(id: $updateProcedureId, input: $input) {
		procedure {
			approvalRequired
			approverID
			controlSuggestions
			createdAt
			createdBy
			delegateID
			details
			dismissedControlSuggestions
			dismissedImprovementSuggestions
			dismissedTagSuggestions
			displayID
			id
			improvementSuggestions
			name
			ownerID
			procedureType
			reviewDue
			reviewFrequency
			revision
			status
			summary
			tagSuggestions
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateProcedure(ctx context.Context, updateProcedureID string, input UpdateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*UpdateProcedure, error) {
	vars := map[string]any{
		"updateProcedureId": updateProcedureID,
		"input":             input,
	}

	var res UpdateProcedure
	if err := c.Client.Post(ctx, "UpdateProcedure", UpdateProcedureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllProcedureHistoriesDocument = `query GetAllProcedureHistories {
	procedureHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				approvalRequired
				approverID
				controlSuggestions
				createdAt
				createdBy
				delegateID
				details
				dismissedControlSuggestions
				dismissedImprovementSuggestions
				dismissedTagSuggestions
				displayID
				historyTime
				id
				improvementSuggestions
				name
				operation
				ownerID
				procedureType
				ref
				reviewDue
				reviewFrequency
				revision
				status
				summary
				tagSuggestions
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllProcedureHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProcedureHistories, error) {
	vars := map[string]any{}

	var res GetAllProcedureHistories
	if err := c.Client.Post(ctx, "GetAllProcedureHistories", GetAllProcedureHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProcedureHistoriesDocument = `query GetProcedureHistories ($first: Int, $last: Int, $where: ProcedureHistoryWhereInput) {
	procedureHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				approvalRequired
				approverID
				controlSuggestions
				createdAt
				createdBy
				delegateID
				details
				dismissedControlSuggestions
				dismissedImprovementSuggestions
				dismissedTagSuggestions
				displayID
				historyTime
				id
				improvementSuggestions
				name
				operation
				ownerID
				procedureType
				ref
				reviewDue
				reviewFrequency
				revision
				status
				summary
				tagSuggestions
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetProcedureHistories(ctx context.Context, first *int64, last *int64, where *ProcedureHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProcedureHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetProcedureHistories
	if err := c.Client.Post(ctx, "GetProcedureHistories", GetProcedureHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVProgramDocument = `mutation CreateBulkCSVProgram ($input: Upload!) {
	createBulkCSVProgram(input: $input) {
		programs {
			auditFirm
			auditor
			auditorEmail
			auditorReadComments
			auditorReady
			auditorWriteComments
			createdAt
			createdBy
			description
			displayID
			endDate
			frameworkName
			id
			name
			ownerID
			programType
			startDate
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVProgram(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVProgram, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVProgram
	if err := c.Client.Post(ctx, "CreateBulkCSVProgram", CreateBulkCSVProgramDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkProgramDocument = `mutation CreateBulkProgram ($input: [CreateProgramInput!]) {
	createBulkProgram(input: $input) {
		programs {
			auditFirm
			auditor
			auditorEmail
			auditorReadComments
			auditorReady
			auditorWriteComments
			createdAt
			createdBy
			description
			displayID
			endDate
			frameworkName
			id
			name
			ownerID
			programType
			startDate
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkProgram(ctx context.Context, input []*CreateProgramInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkProgram, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkProgram
	if err := c.Client.Post(ctx, "CreateBulkProgram", CreateBulkProgramDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateProgramDocument = `mutation CreateProgram ($input: CreateProgramInput!) {
	createProgram(input: $input) {
		program {
			auditFirm
			auditor
			auditorEmail
			auditorReadComments
			auditorReady
			auditorWriteComments
			createdAt
			createdBy
			description
			displayID
			endDate
			frameworkName
			id
			name
			ownerID
			programType
			startDate
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateProgram(ctx context.Context, input CreateProgramInput, interceptors ...clientv2.RequestInterceptor) (*CreateProgram, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateProgram
	if err := c.Client.Post(ctx, "CreateProgram", CreateProgramDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteProgramDocument = `mutation DeleteProgram ($deleteProgramId: ID!) {
	deleteProgram(id: $deleteProgramId) {
		deletedID
	}
}
`

func (c *Client) DeleteProgram(ctx context.Context, deleteProgramID string, interceptors ...clientv2.RequestInterceptor) (*DeleteProgram, error) {
	vars := map[string]any{
		"deleteProgramId": deleteProgramID,
	}

	var res DeleteProgram
	if err := c.Client.Post(ctx, "DeleteProgram", DeleteProgramDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllProgramsDocument = `query GetAllPrograms {
	programs {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				auditFirm
				auditor
				auditorEmail
				auditorReadComments
				auditorReady
				auditorWriteComments
				createdAt
				createdBy
				description
				displayID
				endDate
				frameworkName
				id
				name
				ownerID
				programType
				startDate
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllPrograms(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllPrograms, error) {
	vars := map[string]any{}

	var res GetAllPrograms
	if err := c.Client.Post(ctx, "GetAllPrograms", GetAllProgramsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProgramByIDDocument = `query GetProgramByID ($programId: ID!) {
	program(id: $programId) {
		auditFirm
		auditor
		auditorEmail
		auditorReadComments
		auditorReady
		auditorWriteComments
		createdAt
		createdBy
		description
		displayID
		endDate
		frameworkName
		id
		name
		ownerID
		programType
		startDate
		status
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetProgramByID(ctx context.Context, programID string, interceptors ...clientv2.RequestInterceptor) (*GetProgramByID, error) {
	vars := map[string]any{
		"programId": programID,
	}

	var res GetProgramByID
	if err := c.Client.Post(ctx, "GetProgramByID", GetProgramByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProgramsDocument = `query GetPrograms ($first: Int, $last: Int, $where: ProgramWhereInput) {
	programs(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				auditFirm
				auditor
				auditorEmail
				auditorReadComments
				auditorReady
				auditorWriteComments
				createdAt
				createdBy
				description
				displayID
				endDate
				frameworkName
				id
				name
				ownerID
				programType
				startDate
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetPrograms(ctx context.Context, first *int64, last *int64, where *ProgramWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetPrograms, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetPrograms
	if err := c.Client.Post(ctx, "GetPrograms", GetProgramsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateProgramDocument = `mutation UpdateProgram ($updateProgramId: ID!, $input: UpdateProgramInput!) {
	updateProgram(id: $updateProgramId, input: $input) {
		program {
			auditFirm
			auditor
			auditorEmail
			auditorReadComments
			auditorReady
			auditorWriteComments
			createdAt
			createdBy
			description
			displayID
			endDate
			frameworkName
			id
			name
			ownerID
			programType
			startDate
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateProgram(ctx context.Context, updateProgramID string, input UpdateProgramInput, interceptors ...clientv2.RequestInterceptor) (*UpdateProgram, error) {
	vars := map[string]any{
		"updateProgramId": updateProgramID,
		"input":           input,
	}

	var res UpdateProgram
	if err := c.Client.Post(ctx, "UpdateProgram", UpdateProgramDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllProgramHistoriesDocument = `query GetAllProgramHistories {
	programHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				auditFirm
				auditor
				auditorEmail
				auditorReadComments
				auditorReady
				auditorWriteComments
				createdAt
				createdBy
				description
				displayID
				endDate
				frameworkName
				historyTime
				id
				name
				operation
				ownerID
				programType
				ref
				startDate
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllProgramHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProgramHistories, error) {
	vars := map[string]any{}

	var res GetAllProgramHistories
	if err := c.Client.Post(ctx, "GetAllProgramHistories", GetAllProgramHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProgramHistoriesDocument = `query GetProgramHistories ($first: Int, $last: Int, $where: ProgramHistoryWhereInput) {
	programHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				auditFirm
				auditor
				auditorEmail
				auditorReadComments
				auditorReady
				auditorWriteComments
				createdAt
				createdBy
				description
				displayID
				endDate
				frameworkName
				historyTime
				id
				name
				operation
				ownerID
				programType
				ref
				startDate
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetProgramHistories(ctx context.Context, first *int64, last *int64, where *ProgramHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProgramHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetProgramHistories
	if err := c.Client.Post(ctx, "GetProgramHistories", GetProgramHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVProgramMembershipDocument = `mutation CreateBulkCSVProgramMembership ($input: Upload!) {
	createBulkCSVProgramMembership(input: $input) {
		programMemberships {
			createdAt
			createdBy
			id
			programID
			role
			updatedAt
			updatedBy
			user {
				displayName
				email
				firstName
				id
				lastName
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVProgramMembership(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVProgramMembership, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVProgramMembership
	if err := c.Client.Post(ctx, "CreateBulkCSVProgramMembership", CreateBulkCSVProgramMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkProgramMembershipDocument = `mutation CreateBulkProgramMembership ($input: [CreateProgramMembershipInput!]) {
	createBulkProgramMembership(input: $input) {
		programMemberships {
			createdAt
			createdBy
			id
			programID
			role
			updatedAt
			updatedBy
			user {
				displayName
				email
				firstName
				id
				lastName
			}
		}
	}
}
`

func (c *Client) CreateBulkProgramMembership(ctx context.Context, input []*CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkProgramMembership, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkProgramMembership
	if err := c.Client.Post(ctx, "CreateBulkProgramMembership", CreateBulkProgramMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateProgramMembershipDocument = `mutation CreateProgramMembership ($input: CreateProgramMembershipInput!) {
	createProgramMembership(input: $input) {
		programMembership {
			createdAt
			createdBy
			id
			programID
			role
			updatedAt
			updatedBy
			user {
				displayName
				email
				firstName
				id
				lastName
			}
		}
	}
}
`

func (c *Client) CreateProgramMembership(ctx context.Context, input CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateProgramMembership, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateProgramMembership
	if err := c.Client.Post(ctx, "CreateProgramMembership", CreateProgramMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteProgramMembershipDocument = `mutation DeleteProgramMembership ($deleteProgramMembershipId: ID!) {
	deleteProgramMembership(id: $deleteProgramMembershipId) {
		deletedID
	}
}
`

func (c *Client) DeleteProgramMembership(ctx context.Context, deleteProgramMembershipID string, interceptors ...clientv2.RequestInterceptor) (*DeleteProgramMembership, error) {
	vars := map[string]any{
		"deleteProgramMembershipId": deleteProgramMembershipID,
	}

	var res DeleteProgramMembership
	if err := c.Client.Post(ctx, "DeleteProgramMembership", DeleteProgramMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllProgramMembershipsDocument = `query GetAllProgramMemberships {
	programMemberships {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				id
				programID
				role
				updatedAt
				updatedBy
				user {
					displayName
					email
					firstName
					id
					lastName
				}
			}
		}
	}
}
`

func (c *Client) GetAllProgramMemberships(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProgramMemberships, error) {
	vars := map[string]any{}

	var res GetAllProgramMemberships
	if err := c.Client.Post(ctx, "GetAllProgramMemberships", GetAllProgramMembershipsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProgramMembershipByIDDocument = `query GetProgramMembershipByID ($programMembershipId: ID!) {
	programMembership(id: $programMembershipId) {
		createdAt
		createdBy
		id
		programID
		role
		updatedAt
		updatedBy
		user {
			displayName
			email
			firstName
			id
			lastName
		}
	}
}
`

func (c *Client) GetProgramMembershipByID(ctx context.Context, programMembershipID string, interceptors ...clientv2.RequestInterceptor) (*GetProgramMembershipByID, error) {
	vars := map[string]any{
		"programMembershipId": programMembershipID,
	}

	var res GetProgramMembershipByID
	if err := c.Client.Post(ctx, "GetProgramMembershipByID", GetProgramMembershipByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProgramMembershipsDocument = `query GetProgramMemberships ($first: Int, $last: Int, $where: ProgramMembershipWhereInput) {
	programMemberships(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				id
				programID
				role
				updatedAt
				updatedBy
				user {
					displayName
					email
					firstName
					id
					lastName
				}
			}
		}
	}
}
`

func (c *Client) GetProgramMemberships(ctx context.Context, first *int64, last *int64, where *ProgramMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProgramMemberships, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetProgramMemberships
	if err := c.Client.Post(ctx, "GetProgramMemberships", GetProgramMembershipsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateProgramMembershipDocument = `mutation UpdateProgramMembership ($updateProgramMembershipId: ID!, $input: UpdateProgramMembershipInput!) {
	updateProgramMembership(id: $updateProgramMembershipId, input: $input) {
		programMembership {
			createdAt
			createdBy
			id
			programID
			role
			updatedAt
			updatedBy
			user {
				displayName
				email
				firstName
				id
				lastName
			}
		}
	}
}
`

func (c *Client) UpdateProgramMembership(ctx context.Context, updateProgramMembershipID string, input UpdateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateProgramMembership, error) {
	vars := map[string]any{
		"updateProgramMembershipId": updateProgramMembershipID,
		"input":                     input,
	}

	var res UpdateProgramMembership
	if err := c.Client.Post(ctx, "UpdateProgramMembership", UpdateProgramMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllProgramMembershipHistoriesDocument = `query GetAllProgramMembershipHistories {
	programMembershipHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				programID
				ref
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetAllProgramMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProgramMembershipHistories, error) {
	vars := map[string]any{}

	var res GetAllProgramMembershipHistories
	if err := c.Client.Post(ctx, "GetAllProgramMembershipHistories", GetAllProgramMembershipHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProgramMembershipHistoriesDocument = `query GetProgramMembershipHistories ($first: Int, $last: Int, $where: ProgramMembershipHistoryWhereInput) {
	programMembershipHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				programID
				ref
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetProgramMembershipHistories(ctx context.Context, first *int64, last *int64, where *ProgramMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProgramMembershipHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetProgramMembershipHistories
	if err := c.Client.Post(ctx, "GetProgramMembershipHistories", GetProgramMembershipHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVRiskDocument = `mutation CreateBulkCSVRisk ($input: Upload!) {
	createBulkCSVRisk(input: $input) {
		risks {
			businessCosts
			category
			createdAt
			createdBy
			delegateID
			details
			displayID
			id
			impact
			likelihood
			mitigation
			name
			ownerID
			riskType
			score
			stakeholderID
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVRisk(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVRisk, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVRisk
	if err := c.Client.Post(ctx, "CreateBulkCSVRisk", CreateBulkCSVRiskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkRiskDocument = `mutation CreateBulkRisk ($input: [CreateRiskInput!]) {
	createBulkRisk(input: $input) {
		risks {
			businessCosts
			category
			createdAt
			createdBy
			delegateID
			details
			displayID
			id
			impact
			likelihood
			mitigation
			name
			ownerID
			riskType
			score
			stakeholderID
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkRisk(ctx context.Context, input []*CreateRiskInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkRisk, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkRisk
	if err := c.Client.Post(ctx, "CreateBulkRisk", CreateBulkRiskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateRiskDocument = `mutation CreateRisk ($input: CreateRiskInput!) {
	createRisk(input: $input) {
		risk {
			businessCosts
			category
			createdAt
			createdBy
			delegateID
			details
			displayID
			id
			impact
			likelihood
			mitigation
			name
			ownerID
			riskType
			score
			stakeholderID
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateRisk(ctx context.Context, input CreateRiskInput, interceptors ...clientv2.RequestInterceptor) (*CreateRisk, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateRisk
	if err := c.Client.Post(ctx, "CreateRisk", CreateRiskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteRiskDocument = `mutation DeleteRisk ($deleteRiskId: ID!) {
	deleteRisk(id: $deleteRiskId) {
		deletedID
	}
}
`

func (c *Client) DeleteRisk(ctx context.Context, deleteRiskID string, interceptors ...clientv2.RequestInterceptor) (*DeleteRisk, error) {
	vars := map[string]any{
		"deleteRiskId": deleteRiskID,
	}

	var res DeleteRisk
	if err := c.Client.Post(ctx, "DeleteRisk", DeleteRiskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllRisksDocument = `query GetAllRisks {
	risks {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				businessCosts
				category
				createdAt
				createdBy
				delegateID
				details
				displayID
				id
				impact
				likelihood
				mitigation
				name
				ownerID
				riskType
				score
				stakeholderID
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllRisks(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllRisks, error) {
	vars := map[string]any{}

	var res GetAllRisks
	if err := c.Client.Post(ctx, "GetAllRisks", GetAllRisksDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetRiskByIDDocument = `query GetRiskByID ($riskId: ID!) {
	risk(id: $riskId) {
		businessCosts
		category
		createdAt
		createdBy
		delegateID
		details
		displayID
		id
		impact
		likelihood
		mitigation
		name
		ownerID
		riskType
		score
		stakeholderID
		status
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetRiskByID(ctx context.Context, riskID string, interceptors ...clientv2.RequestInterceptor) (*GetRiskByID, error) {
	vars := map[string]any{
		"riskId": riskID,
	}

	var res GetRiskByID
	if err := c.Client.Post(ctx, "GetRiskByID", GetRiskByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetRisksDocument = `query GetRisks ($first: Int, $last: Int, $where: RiskWhereInput) {
	risks(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				businessCosts
				category
				createdAt
				createdBy
				delegateID
				details
				displayID
				id
				impact
				likelihood
				mitigation
				name
				ownerID
				riskType
				score
				stakeholderID
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetRisks(ctx context.Context, first *int64, last *int64, where *RiskWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetRisks, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetRisks
	if err := c.Client.Post(ctx, "GetRisks", GetRisksDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateRiskDocument = `mutation UpdateRisk ($updateRiskId: ID!, $input: UpdateRiskInput!) {
	updateRisk(id: $updateRiskId, input: $input) {
		risk {
			businessCosts
			category
			createdAt
			createdBy
			delegateID
			details
			displayID
			id
			impact
			likelihood
			mitigation
			name
			ownerID
			riskType
			score
			stakeholderID
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateRisk(ctx context.Context, updateRiskID string, input UpdateRiskInput, interceptors ...clientv2.RequestInterceptor) (*UpdateRisk, error) {
	vars := map[string]any{
		"updateRiskId": updateRiskID,
		"input":        input,
	}

	var res UpdateRisk
	if err := c.Client.Post(ctx, "UpdateRisk", UpdateRiskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllRiskHistoriesDocument = `query GetAllRiskHistories {
	riskHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				businessCosts
				category
				createdAt
				createdBy
				delegateID
				details
				displayID
				historyTime
				id
				impact
				likelihood
				mitigation
				name
				operation
				ownerID
				ref
				riskType
				score
				stakeholderID
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllRiskHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllRiskHistories, error) {
	vars := map[string]any{}

	var res GetAllRiskHistories
	if err := c.Client.Post(ctx, "GetAllRiskHistories", GetAllRiskHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetRiskHistoriesDocument = `query GetRiskHistories ($first: Int, $last: Int, $where: RiskHistoryWhereInput) {
	riskHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				businessCosts
				category
				createdAt
				createdBy
				delegateID
				details
				displayID
				historyTime
				id
				impact
				likelihood
				mitigation
				name
				operation
				ownerID
				ref
				riskType
				score
				stakeholderID
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetRiskHistories(ctx context.Context, first *int64, last *int64, where *RiskHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetRiskHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetRiskHistories
	if err := c.Client.Post(ctx, "GetRiskHistories", GetRiskHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVScanDocument = `mutation CreateBulkCSVScan ($input: Upload!) {
	createBulkCSVScan(input: $input) {
		scans {
			createdAt
			createdBy
			id
			metadata
			ownerID
			scanType
			status
			tags
			target
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVScan(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVScan, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVScan
	if err := c.Client.Post(ctx, "CreateBulkCSVScan", CreateBulkCSVScanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkScanDocument = `mutation CreateBulkScan ($input: [CreateScanInput!]) {
	createBulkScan(input: $input) {
		scans {
			createdAt
			createdBy
			id
			metadata
			ownerID
			scanType
			status
			tags
			target
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkScan(ctx context.Context, input []*CreateScanInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkScan, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkScan
	if err := c.Client.Post(ctx, "CreateBulkScan", CreateBulkScanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateScanDocument = `mutation CreateScan ($input: CreateScanInput!) {
	createScan(input: $input) {
		scan {
			createdAt
			createdBy
			id
			metadata
			ownerID
			scanType
			status
			tags
			target
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateScan(ctx context.Context, input CreateScanInput, interceptors ...clientv2.RequestInterceptor) (*CreateScan, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateScan
	if err := c.Client.Post(ctx, "CreateScan", CreateScanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteScanDocument = `mutation DeleteScan ($deleteScanId: ID!) {
	deleteScan(id: $deleteScanId) {
		deletedID
	}
}
`

func (c *Client) DeleteScan(ctx context.Context, deleteScanID string, interceptors ...clientv2.RequestInterceptor) (*DeleteScan, error) {
	vars := map[string]any{
		"deleteScanId": deleteScanID,
	}

	var res DeleteScan
	if err := c.Client.Post(ctx, "DeleteScan", DeleteScanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllScansDocument = `query GetAllScans {
	scans {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				id
				metadata
				ownerID
				scanType
				status
				tags
				target
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllScans(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllScans, error) {
	vars := map[string]any{}

	var res GetAllScans
	if err := c.Client.Post(ctx, "GetAllScans", GetAllScansDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetScanByIDDocument = `query GetScanByID ($scanId: ID!) {
	scan(id: $scanId) {
		createdAt
		createdBy
		id
		metadata
		ownerID
		scanType
		status
		tags
		target
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetScanByID(ctx context.Context, scanID string, interceptors ...clientv2.RequestInterceptor) (*GetScanByID, error) {
	vars := map[string]any{
		"scanId": scanID,
	}

	var res GetScanByID
	if err := c.Client.Post(ctx, "GetScanByID", GetScanByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetScansDocument = `query GetScans ($first: Int, $last: Int, $where: ScanWhereInput) {
	scans(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				id
				metadata
				ownerID
				scanType
				status
				tags
				target
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetScans(ctx context.Context, first *int64, last *int64, where *ScanWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetScans, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetScans
	if err := c.Client.Post(ctx, "GetScans", GetScansDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateScanDocument = `mutation UpdateScan ($updateScanId: ID!, $input: UpdateScanInput!) {
	updateScan(id: $updateScanId, input: $input) {
		scan {
			createdAt
			createdBy
			id
			metadata
			ownerID
			scanType
			status
			tags
			target
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateScan(ctx context.Context, updateScanID string, input UpdateScanInput, interceptors ...clientv2.RequestInterceptor) (*UpdateScan, error) {
	vars := map[string]any{
		"updateScanId": updateScanID,
		"input":        input,
	}

	var res UpdateScan
	if err := c.Client.Post(ctx, "UpdateScan", UpdateScanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllScanHistoriesDocument = `query GetAllScanHistories {
	scanHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				metadata
				operation
				ownerID
				ref
				scanType
				status
				tags
				target
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllScanHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllScanHistories, error) {
	vars := map[string]any{}

	var res GetAllScanHistories
	if err := c.Client.Post(ctx, "GetAllScanHistories", GetAllScanHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetScanHistoriesDocument = `query GetScanHistories ($first: Int, $last: Int, $where: ScanHistoryWhereInput) {
	scanHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				metadata
				operation
				ownerID
				ref
				scanType
				status
				tags
				target
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetScanHistories(ctx context.Context, first *int64, last *int64, where *ScanHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetScanHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetScanHistories
	if err := c.Client.Post(ctx, "GetScanHistories", GetScanHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVScheduledJobDocument = `mutation CreateBulkCSVScheduledJob ($input: Upload!) {
	createBulkCSVScheduledJob(input: $input) {
		scheduledJobs {
			active
			configuration
			createdAt
			createdBy
			cron
			displayID
			id
			jobID
			jobRunnerID
			ownerID
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVScheduledJob(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVScheduledJob, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVScheduledJob
	if err := c.Client.Post(ctx, "CreateBulkCSVScheduledJob", CreateBulkCSVScheduledJobDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkScheduledJobDocument = `mutation CreateBulkScheduledJob ($input: [CreateScheduledJobInput!]) {
	createBulkScheduledJob(input: $input) {
		scheduledJobs {
			active
			configuration
			createdAt
			createdBy
			cron
			displayID
			id
			jobID
			jobRunnerID
			ownerID
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkScheduledJob(ctx context.Context, input []*CreateScheduledJobInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkScheduledJob, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkScheduledJob
	if err := c.Client.Post(ctx, "CreateBulkScheduledJob", CreateBulkScheduledJobDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateScheduledJobDocument = `mutation CreateScheduledJob ($input: CreateScheduledJobInput!) {
	createScheduledJob(input: $input) {
		scheduledJob {
			active
			configuration
			createdAt
			createdBy
			cron
			displayID
			id
			jobID
			jobRunnerID
			ownerID
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateScheduledJob(ctx context.Context, input CreateScheduledJobInput, interceptors ...clientv2.RequestInterceptor) (*CreateScheduledJob, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateScheduledJob
	if err := c.Client.Post(ctx, "CreateScheduledJob", CreateScheduledJobDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteScheduledJobDocument = `mutation DeleteScheduledJob ($deleteScheduledJobId: ID!) {
	deleteScheduledJob(id: $deleteScheduledJobId) {
		deletedID
	}
}
`

func (c *Client) DeleteScheduledJob(ctx context.Context, deleteScheduledJobID string, interceptors ...clientv2.RequestInterceptor) (*DeleteScheduledJob, error) {
	vars := map[string]any{
		"deleteScheduledJobId": deleteScheduledJobID,
	}

	var res DeleteScheduledJob
	if err := c.Client.Post(ctx, "DeleteScheduledJob", DeleteScheduledJobDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllScheduledJobsDocument = `query GetAllScheduledJobs {
	scheduledJobs {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				active
				configuration
				createdAt
				createdBy
				cron
				displayID
				id
				jobID
				jobRunnerID
				ownerID
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllScheduledJobs(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllScheduledJobs, error) {
	vars := map[string]any{}

	var res GetAllScheduledJobs
	if err := c.Client.Post(ctx, "GetAllScheduledJobs", GetAllScheduledJobsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetScheduledJobByIDDocument = `query GetScheduledJobByID ($scheduledJobId: ID!) {
	scheduledJob(id: $scheduledJobId) {
		active
		configuration
		createdAt
		createdBy
		cron
		displayID
		id
		jobID
		jobRunnerID
		ownerID
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetScheduledJobByID(ctx context.Context, scheduledJobID string, interceptors ...clientv2.RequestInterceptor) (*GetScheduledJobByID, error) {
	vars := map[string]any{
		"scheduledJobId": scheduledJobID,
	}

	var res GetScheduledJobByID
	if err := c.Client.Post(ctx, "GetScheduledJobByID", GetScheduledJobByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetScheduledJobsDocument = `query GetScheduledJobs ($first: Int, $last: Int, $where: ScheduledJobWhereInput) {
	scheduledJobs(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				active
				configuration
				createdAt
				createdBy
				cron
				displayID
				id
				jobID
				jobRunnerID
				ownerID
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetScheduledJobs(ctx context.Context, first *int64, last *int64, where *ScheduledJobWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetScheduledJobs, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetScheduledJobs
	if err := c.Client.Post(ctx, "GetScheduledJobs", GetScheduledJobsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateScheduledJobDocument = `mutation UpdateScheduledJob ($updateScheduledJobId: ID!, $input: UpdateScheduledJobInput!) {
	updateScheduledJob(id: $updateScheduledJobId, input: $input) {
		scheduledJob {
			active
			configuration
			createdAt
			createdBy
			cron
			displayID
			id
			jobID
			jobRunnerID
			ownerID
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateScheduledJob(ctx context.Context, updateScheduledJobID string, input UpdateScheduledJobInput, interceptors ...clientv2.RequestInterceptor) (*UpdateScheduledJob, error) {
	vars := map[string]any{
		"updateScheduledJobId": updateScheduledJobID,
		"input":                input,
	}

	var res UpdateScheduledJob
	if err := c.Client.Post(ctx, "UpdateScheduledJob", UpdateScheduledJobDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllScheduledJobHistoriesDocument = `query GetAllScheduledJobHistories {
	scheduledJobHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				active
				configuration
				createdAt
				createdBy
				cron
				displayID
				historyTime
				id
				jobID
				jobRunnerID
				operation
				ownerID
				ref
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllScheduledJobHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllScheduledJobHistories, error) {
	vars := map[string]any{}

	var res GetAllScheduledJobHistories
	if err := c.Client.Post(ctx, "GetAllScheduledJobHistories", GetAllScheduledJobHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetScheduledJobHistoriesDocument = `query GetScheduledJobHistories ($first: Int, $last: Int, $where: ScheduledJobHistoryWhereInput) {
	scheduledJobHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				active
				configuration
				createdAt
				createdBy
				cron
				displayID
				historyTime
				id
				jobID
				jobRunnerID
				operation
				ownerID
				ref
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetScheduledJobHistories(ctx context.Context, first *int64, last *int64, where *ScheduledJobHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetScheduledJobHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetScheduledJobHistories
	if err := c.Client.Post(ctx, "GetScheduledJobHistories", GetScheduledJobHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateScheduledJobRunDocument = `mutation CreateScheduledJobRun ($input: CreateScheduledJobRunInput!) {
	createScheduledJobRun(input: $input) {
		scheduledJobRun {
			createdAt
			createdBy
			expectedExecutionTime
			id
			jobRunnerID
			ownerID
			scheduledJobID
			script
			status
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateScheduledJobRun(ctx context.Context, input CreateScheduledJobRunInput, interceptors ...clientv2.RequestInterceptor) (*CreateScheduledJobRun, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateScheduledJobRun
	if err := c.Client.Post(ctx, "CreateScheduledJobRun", CreateScheduledJobRunDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteScheduledJobRunDocument = `mutation DeleteScheduledJobRun ($deleteScheduledJobRunId: ID!) {
	deleteScheduledJobRun(id: $deleteScheduledJobRunId) {
		deletedID
	}
}
`

func (c *Client) DeleteScheduledJobRun(ctx context.Context, deleteScheduledJobRunID string, interceptors ...clientv2.RequestInterceptor) (*DeleteScheduledJobRun, error) {
	vars := map[string]any{
		"deleteScheduledJobRunId": deleteScheduledJobRunID,
	}

	var res DeleteScheduledJobRun
	if err := c.Client.Post(ctx, "DeleteScheduledJobRun", DeleteScheduledJobRunDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllScheduledJobRunsDocument = `query GetAllScheduledJobRuns {
	scheduledJobRuns {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				expectedExecutionTime
				id
				jobRunnerID
				ownerID
				scheduledJobID
				script
				status
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllScheduledJobRuns(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllScheduledJobRuns, error) {
	vars := map[string]any{}

	var res GetAllScheduledJobRuns
	if err := c.Client.Post(ctx, "GetAllScheduledJobRuns", GetAllScheduledJobRunsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetScheduledJobRunByIDDocument = `query GetScheduledJobRunByID ($scheduledJobRunId: ID!) {
	scheduledJobRun(id: $scheduledJobRunId) {
		createdAt
		createdBy
		expectedExecutionTime
		id
		jobRunnerID
		ownerID
		scheduledJobID
		script
		status
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetScheduledJobRunByID(ctx context.Context, scheduledJobRunID string, interceptors ...clientv2.RequestInterceptor) (*GetScheduledJobRunByID, error) {
	vars := map[string]any{
		"scheduledJobRunId": scheduledJobRunID,
	}

	var res GetScheduledJobRunByID
	if err := c.Client.Post(ctx, "GetScheduledJobRunByID", GetScheduledJobRunByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetScheduledJobRunsDocument = `query GetScheduledJobRuns ($first: Int, $last: Int, $where: ScheduledJobRunWhereInput) {
	scheduledJobRuns(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				expectedExecutionTime
				id
				jobRunnerID
				ownerID
				scheduledJobID
				script
				status
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetScheduledJobRuns(ctx context.Context, first *int64, last *int64, where *ScheduledJobRunWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetScheduledJobRuns, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetScheduledJobRuns
	if err := c.Client.Post(ctx, "GetScheduledJobRuns", GetScheduledJobRunsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateScheduledJobRunDocument = `mutation UpdateScheduledJobRun ($updateScheduledJobRunId: ID!, $input: UpdateScheduledJobRunInput!) {
	updateScheduledJobRun(id: $updateScheduledJobRunId, input: $input) {
		scheduledJobRun {
			createdAt
			createdBy
			expectedExecutionTime
			id
			jobRunnerID
			ownerID
			scheduledJobID
			script
			status
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateScheduledJobRun(ctx context.Context, updateScheduledJobRunID string, input UpdateScheduledJobRunInput, interceptors ...clientv2.RequestInterceptor) (*UpdateScheduledJobRun, error) {
	vars := map[string]any{
		"updateScheduledJobRunId": updateScheduledJobRunID,
		"input":                   input,
	}

	var res UpdateScheduledJobRun
	if err := c.Client.Post(ctx, "UpdateScheduledJobRun", UpdateScheduledJobRunDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GlobalSearchDocument = `query GlobalSearch ($query: String!) {
	search(query: $query) {
		totalCount
		apiTokens {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		actionPlans {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					details
					id
					name
					tags
				}
			}
		}
		assets {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					name
					tags
				}
			}
		}
		contacts {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					email
					fullName
					id
					tags
				}
			}
		}
		controls {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					category
					description
					displayID
					id
					mappedCategories
					refCode
					subcategory
					tags
				}
			}
		}
		controlImplementations {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		controlObjectives {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					category
					displayID
					id
					name
					subcategory
					tags
				}
			}
		}
		customDomains {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		dnsVerifications {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		documentData {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		entities {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					description
					displayName
					id
					name
					tags
				}
			}
		}
		entityTypes {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		events {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		evidences {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					displayID
					id
					name
					tags
				}
			}
		}
		files {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		groups {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					displayID
					displayName
					id
					name
					tags
				}
			}
		}
		integrations {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		internalPolicies {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					details
					displayID
					id
					name
					tags
				}
			}
		}
		invites {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					recipient
				}
			}
		}
		jobRunners {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					displayID
					id
					name
					tags
				}
			}
		}
		jobRunnerRegistrationTokens {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		jobRunnerTokens {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		jobTemplates {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					description
					displayID
					id
					tags
					title
				}
			}
		}
		mappableDomains {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		mappedControls {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		narratives {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					description
					displayID
					id
					name
					tags
				}
			}
		}
		orgSubscriptions {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		organizations {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					displayName
					id
					name
					tags
				}
			}
		}
		organizationSettings {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		personalAccessTokens {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		procedures {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					details
					displayID
					id
					name
					tags
				}
			}
		}
		programs {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					description
					displayID
					id
					name
					tags
				}
			}
		}
		risks {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					displayID
					id
					name
					tags
				}
			}
		}
		scans {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
					target
				}
			}
		}
		standards {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					domains
					framework
					governingBody
					id
					name
					shortName
					tags
				}
			}
		}
		subcontrols {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					category
					description
					displayID
					id
					mappedCategories
					refCode
					subcategory
					tags
				}
			}
		}
		subprocessors {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					name
					tags
				}
			}
		}
		subscribers {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					email
					id
					tags
				}
			}
		}
		tasks {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					displayID
					id
					tags
					title
				}
			}
		}
		templates {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					jsonconfig
					name
					tags
				}
			}
		}
		trustCenters {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		trustCenterCompliances {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		users {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					displayID
					id
					tags
				}
			}
		}
		userSettings {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		webauthns {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
	}
}
`

func (c *Client) GlobalSearch(ctx context.Context, query string, interceptors ...clientv2.RequestInterceptor) (*GlobalSearch, error) {
	vars := map[string]any{
		"query": query,
	}

	var res GlobalSearch
	if err := c.Client.Post(ctx, "GlobalSearch", GlobalSearchDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateStandardDocument = `mutation CreateStandard ($input: CreateStandardInput!) {
	createStandard(input: $input) {
		standard {
			createdAt
			createdBy
			description
			domains
			framework
			freeToUse
			governingBody
			governingBodyLogoURL
			id
			isPublic
			link
			name
			ownerID
			revision
			shortName
			standardType
			status
			systemOwned
			tags
			updatedAt
			updatedBy
			version
			controls {
				totalCount
			}
		}
	}
}
`

func (c *Client) CreateStandard(ctx context.Context, input CreateStandardInput, interceptors ...clientv2.RequestInterceptor) (*CreateStandard, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateStandard
	if err := c.Client.Post(ctx, "CreateStandard", CreateStandardDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteStandardDocument = `mutation DeleteStandard ($deleteStandardId: ID!) {
	deleteStandard(id: $deleteStandardId) {
		deletedID
	}
}
`

func (c *Client) DeleteStandard(ctx context.Context, deleteStandardID string, interceptors ...clientv2.RequestInterceptor) (*DeleteStandard, error) {
	vars := map[string]any{
		"deleteStandardId": deleteStandardID,
	}

	var res DeleteStandard
	if err := c.Client.Post(ctx, "DeleteStandard", DeleteStandardDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllStandardsDocument = `query GetAllStandards {
	standards {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				domains
				framework
				freeToUse
				governingBody
				governingBodyLogoURL
				id
				isPublic
				link
				name
				ownerID
				revision
				shortName
				standardType
				status
				systemOwned
				tags
				updatedAt
				updatedBy
				version
				controls {
					totalCount
				}
			}
		}
	}
}
`

func (c *Client) GetAllStandards(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllStandards, error) {
	vars := map[string]any{}

	var res GetAllStandards
	if err := c.Client.Post(ctx, "GetAllStandards", GetAllStandardsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetStandardByIDDocument = `query GetStandardByID ($standardId: ID!) {
	standard(id: $standardId) {
		createdAt
		createdBy
		description
		domains
		framework
		freeToUse
		governingBody
		governingBodyLogoURL
		id
		isPublic
		link
		name
		ownerID
		revision
		shortName
		standardType
		status
		systemOwned
		tags
		updatedAt
		updatedBy
		version
		controls {
			totalCount
		}
	}
}
`

func (c *Client) GetStandardByID(ctx context.Context, standardID string, interceptors ...clientv2.RequestInterceptor) (*GetStandardByID, error) {
	vars := map[string]any{
		"standardId": standardID,
	}

	var res GetStandardByID
	if err := c.Client.Post(ctx, "GetStandardByID", GetStandardByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetStandardsDocument = `query GetStandards ($first: Int, $last: Int, $where: StandardWhereInput) {
	standards(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				domains
				framework
				freeToUse
				governingBody
				governingBodyLogoURL
				id
				isPublic
				link
				name
				ownerID
				revision
				shortName
				standardType
				status
				systemOwned
				tags
				updatedAt
				updatedBy
				version
				controls {
					totalCount
				}
			}
		}
	}
}
`

func (c *Client) GetStandards(ctx context.Context, first *int64, last *int64, where *StandardWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetStandards, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetStandards
	if err := c.Client.Post(ctx, "GetStandards", GetStandardsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateStandardDocument = `mutation UpdateStandard ($updateStandardId: ID!, $input: UpdateStandardInput!) {
	updateStandard(id: $updateStandardId, input: $input) {
		standard {
			createdAt
			createdBy
			description
			domains
			framework
			freeToUse
			governingBody
			governingBodyLogoURL
			id
			isPublic
			link
			name
			ownerID
			revision
			shortName
			standardType
			status
			systemOwned
			tags
			updatedAt
			updatedBy
			version
			controls {
				totalCount
			}
		}
	}
}
`

func (c *Client) UpdateStandard(ctx context.Context, updateStandardID string, input UpdateStandardInput, interceptors ...clientv2.RequestInterceptor) (*UpdateStandard, error) {
	vars := map[string]any{
		"updateStandardId": updateStandardID,
		"input":            input,
	}

	var res UpdateStandard
	if err := c.Client.Post(ctx, "UpdateStandard", UpdateStandardDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllStandardHistoriesDocument = `query GetAllStandardHistories {
	standardHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				domains
				framework
				freeToUse
				governingBody
				governingBodyLogoURL
				historyTime
				id
				isPublic
				link
				name
				operation
				ownerID
				ref
				revision
				shortName
				standardType
				status
				systemOwned
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetAllStandardHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllStandardHistories, error) {
	vars := map[string]any{}

	var res GetAllStandardHistories
	if err := c.Client.Post(ctx, "GetAllStandardHistories", GetAllStandardHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetStandardHistoriesDocument = `query GetStandardHistories ($first: Int, $last: Int, $where: StandardHistoryWhereInput) {
	standardHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				domains
				framework
				freeToUse
				governingBody
				governingBodyLogoURL
				historyTime
				id
				isPublic
				link
				name
				operation
				ownerID
				ref
				revision
				shortName
				standardType
				status
				systemOwned
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetStandardHistories(ctx context.Context, first *int64, last *int64, where *StandardHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetStandardHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetStandardHistories
	if err := c.Client.Post(ctx, "GetStandardHistories", GetStandardHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVSubcontrolDocument = `mutation CreateBulkCSVSubcontrol ($input: Upload!) {
	createBulkCSVSubcontrol(input: $input) {
		subcontrols {
			assessmentMethods
			assessmentObjectives
			auditorReferenceID
			category
			categoryID
			controlID
			controlOwnerID
			controlQuestions
			controlType
			createdAt
			createdBy
			delegateID
			description
			displayID
			exampleEvidence
			id
			implementationGuidance
			mappedCategories
			ownerID
			refCode
			referenceFramework
			referenceID
			references
			source
			status
			subcategory
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVSubcontrol(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVSubcontrol, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVSubcontrol
	if err := c.Client.Post(ctx, "CreateBulkCSVSubcontrol", CreateBulkCSVSubcontrolDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkSubcontrolDocument = `mutation CreateBulkSubcontrol ($input: [CreateSubcontrolInput!]) {
	createBulkSubcontrol(input: $input) {
		subcontrols {
			assessmentMethods
			assessmentObjectives
			auditorReferenceID
			category
			categoryID
			controlID
			controlOwnerID
			controlQuestions
			controlType
			createdAt
			createdBy
			delegateID
			description
			displayID
			exampleEvidence
			id
			implementationGuidance
			mappedCategories
			ownerID
			refCode
			referenceFramework
			referenceID
			references
			source
			status
			subcategory
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkSubcontrol(ctx context.Context, input []*CreateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkSubcontrol, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkSubcontrol
	if err := c.Client.Post(ctx, "CreateBulkSubcontrol", CreateBulkSubcontrolDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateSubcontrolDocument = `mutation CreateSubcontrol ($input: CreateSubcontrolInput!) {
	createSubcontrol(input: $input) {
		subcontrol {
			assessmentMethods
			assessmentObjectives
			auditorReferenceID
			category
			categoryID
			controlID
			controlOwnerID
			controlQuestions
			controlType
			createdAt
			createdBy
			delegateID
			description
			displayID
			exampleEvidence
			id
			implementationGuidance
			mappedCategories
			ownerID
			refCode
			referenceFramework
			referenceID
			references
			source
			status
			subcategory
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateSubcontrol(ctx context.Context, input CreateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*CreateSubcontrol, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateSubcontrol
	if err := c.Client.Post(ctx, "CreateSubcontrol", CreateSubcontrolDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteSubcontrolDocument = `mutation DeleteSubcontrol ($deleteSubcontrolId: ID!) {
	deleteSubcontrol(id: $deleteSubcontrolId) {
		deletedID
	}
}
`

func (c *Client) DeleteSubcontrol(ctx context.Context, deleteSubcontrolID string, interceptors ...clientv2.RequestInterceptor) (*DeleteSubcontrol, error) {
	vars := map[string]any{
		"deleteSubcontrolId": deleteSubcontrolID,
	}

	var res DeleteSubcontrol
	if err := c.Client.Post(ctx, "DeleteSubcontrol", DeleteSubcontrolDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllSubcontrolsDocument = `query GetAllSubcontrols {
	subcontrols {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				assessmentMethods
				assessmentObjectives
				auditorReferenceID
				category
				categoryID
				controlID
				controlOwnerID
				controlQuestions
				controlType
				createdAt
				createdBy
				delegateID
				description
				displayID
				exampleEvidence
				id
				implementationGuidance
				mappedCategories
				ownerID
				refCode
				referenceFramework
				referenceID
				references
				source
				status
				subcategory
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllSubcontrols(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllSubcontrols, error) {
	vars := map[string]any{}

	var res GetAllSubcontrols
	if err := c.Client.Post(ctx, "GetAllSubcontrols", GetAllSubcontrolsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSubcontrolByIDDocument = `query GetSubcontrolByID ($subcontrolId: ID!) {
	subcontrol(id: $subcontrolId) {
		assessmentMethods
		assessmentObjectives
		auditorReferenceID
		category
		categoryID
		controlID
		controlOwnerID
		controlQuestions
		controlType
		createdAt
		createdBy
		delegateID
		description
		displayID
		exampleEvidence
		id
		implementationGuidance
		mappedCategories
		ownerID
		refCode
		referenceFramework
		referenceID
		references
		source
		status
		subcategory
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetSubcontrolByID(ctx context.Context, subcontrolID string, interceptors ...clientv2.RequestInterceptor) (*GetSubcontrolByID, error) {
	vars := map[string]any{
		"subcontrolId": subcontrolID,
	}

	var res GetSubcontrolByID
	if err := c.Client.Post(ctx, "GetSubcontrolByID", GetSubcontrolByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSubcontrolsDocument = `query GetSubcontrols ($first: Int, $last: Int, $where: SubcontrolWhereInput) {
	subcontrols(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				assessmentMethods
				assessmentObjectives
				auditorReferenceID
				category
				categoryID
				controlID
				controlOwnerID
				controlQuestions
				controlType
				createdAt
				createdBy
				delegateID
				description
				displayID
				exampleEvidence
				id
				implementationGuidance
				mappedCategories
				ownerID
				refCode
				referenceFramework
				referenceID
				references
				source
				status
				subcategory
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetSubcontrols(ctx context.Context, first *int64, last *int64, where *SubcontrolWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetSubcontrols, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetSubcontrols
	if err := c.Client.Post(ctx, "GetSubcontrols", GetSubcontrolsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateSubcontrolDocument = `mutation UpdateSubcontrol ($updateSubcontrolId: ID!, $input: UpdateSubcontrolInput!) {
	updateSubcontrol(id: $updateSubcontrolId, input: $input) {
		subcontrol {
			assessmentMethods
			assessmentObjectives
			auditorReferenceID
			category
			categoryID
			controlID
			controlOwnerID
			controlQuestions
			controlType
			createdAt
			createdBy
			delegateID
			description
			displayID
			exampleEvidence
			id
			implementationGuidance
			mappedCategories
			ownerID
			refCode
			referenceFramework
			referenceID
			references
			source
			status
			subcategory
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateSubcontrol(ctx context.Context, updateSubcontrolID string, input UpdateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*UpdateSubcontrol, error) {
	vars := map[string]any{
		"updateSubcontrolId": updateSubcontrolID,
		"input":              input,
	}

	var res UpdateSubcontrol
	if err := c.Client.Post(ctx, "UpdateSubcontrol", UpdateSubcontrolDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllSubcontrolHistoriesDocument = `query GetAllSubcontrolHistories {
	subcontrolHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				assessmentMethods
				assessmentObjectives
				auditorReferenceID
				category
				categoryID
				controlID
				controlOwnerID
				controlQuestions
				controlType
				createdAt
				createdBy
				delegateID
				description
				displayID
				exampleEvidence
				historyTime
				id
				implementationGuidance
				mappedCategories
				operation
				ownerID
				ref
				refCode
				referenceFramework
				referenceID
				references
				source
				status
				subcategory
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllSubcontrolHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllSubcontrolHistories, error) {
	vars := map[string]any{}

	var res GetAllSubcontrolHistories
	if err := c.Client.Post(ctx, "GetAllSubcontrolHistories", GetAllSubcontrolHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSubcontrolHistoriesDocument = `query GetSubcontrolHistories ($first: Int, $last: Int, $where: SubcontrolHistoryWhereInput) {
	subcontrolHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				assessmentMethods
				assessmentObjectives
				auditorReferenceID
				category
				categoryID
				controlID
				controlOwnerID
				controlQuestions
				controlType
				createdAt
				createdBy
				delegateID
				description
				displayID
				exampleEvidence
				historyTime
				id
				implementationGuidance
				mappedCategories
				operation
				ownerID
				ref
				refCode
				referenceFramework
				referenceID
				references
				source
				status
				subcategory
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetSubcontrolHistories(ctx context.Context, first *int64, last *int64, where *SubcontrolHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetSubcontrolHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetSubcontrolHistories
	if err := c.Client.Post(ctx, "GetSubcontrolHistories", GetSubcontrolHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateSubprocessorDocument = `mutation CreateSubprocessor ($input: CreateSubprocessorInput!, $logoFile: Upload) {
	createSubprocessor(input: $input, logoFile: $logoFile) {
		subprocessor {
			createdAt
			createdBy
			description
			id
			logoLocalFileID
			logoRemoteURL
			name
			ownerID
			systemOwned
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateSubprocessor(ctx context.Context, input CreateSubprocessorInput, logoFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateSubprocessor, error) {
	vars := map[string]any{
		"input":    input,
		"logoFile": logoFile,
	}

	var res CreateSubprocessor
	if err := c.Client.Post(ctx, "CreateSubprocessor", CreateSubprocessorDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteSubprocessorDocument = `mutation DeleteSubprocessor ($deleteSubprocessorId: ID!) {
	deleteSubprocessor(id: $deleteSubprocessorId) {
		deletedID
	}
}
`

func (c *Client) DeleteSubprocessor(ctx context.Context, deleteSubprocessorID string, interceptors ...clientv2.RequestInterceptor) (*DeleteSubprocessor, error) {
	vars := map[string]any{
		"deleteSubprocessorId": deleteSubprocessorID,
	}

	var res DeleteSubprocessor
	if err := c.Client.Post(ctx, "DeleteSubprocessor", DeleteSubprocessorDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllSubprocessorsDocument = `query GetAllSubprocessors {
	subprocessors {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				id
				logoLocalFileID
				logoRemoteURL
				name
				ownerID
				systemOwned
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllSubprocessors(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllSubprocessors, error) {
	vars := map[string]any{}

	var res GetAllSubprocessors
	if err := c.Client.Post(ctx, "GetAllSubprocessors", GetAllSubprocessorsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSubprocessorByIDDocument = `query GetSubprocessorByID ($subprocessorId: ID!) {
	subprocessor(id: $subprocessorId) {
		createdAt
		createdBy
		description
		id
		logoLocalFileID
		logoRemoteURL
		name
		ownerID
		systemOwned
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetSubprocessorByID(ctx context.Context, subprocessorID string, interceptors ...clientv2.RequestInterceptor) (*GetSubprocessorByID, error) {
	vars := map[string]any{
		"subprocessorId": subprocessorID,
	}

	var res GetSubprocessorByID
	if err := c.Client.Post(ctx, "GetSubprocessorByID", GetSubprocessorByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSubprocessorsDocument = `query GetSubprocessors ($first: Int, $last: Int, $where: SubprocessorWhereInput) {
	subprocessors(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				id
				logoLocalFileID
				logoRemoteURL
				name
				ownerID
				systemOwned
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetSubprocessors(ctx context.Context, first *int64, last *int64, where *SubprocessorWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetSubprocessors, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetSubprocessors
	if err := c.Client.Post(ctx, "GetSubprocessors", GetSubprocessorsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateSubprocessorDocument = `mutation UpdateSubprocessor ($updateSubprocessorId: ID!, $input: UpdateSubprocessorInput!, $logoFile: Upload) {
	updateSubprocessor(id: $updateSubprocessorId, input: $input, logoFile: $logoFile) {
		subprocessor {
			createdAt
			createdBy
			description
			id
			logoLocalFileID
			logoRemoteURL
			name
			ownerID
			systemOwned
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateSubprocessor(ctx context.Context, updateSubprocessorID string, input UpdateSubprocessorInput, logoFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateSubprocessor, error) {
	vars := map[string]any{
		"updateSubprocessorId": updateSubprocessorID,
		"input":                input,
		"logoFile":             logoFile,
	}

	var res UpdateSubprocessor
	if err := c.Client.Post(ctx, "UpdateSubprocessor", UpdateSubprocessorDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllSubprocessorHistoriesDocument = `query GetAllSubprocessorHistories {
	subprocessorHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				logoLocalFileID
				logoRemoteURL
				name
				operation
				ownerID
				ref
				systemOwned
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllSubprocessorHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllSubprocessorHistories, error) {
	vars := map[string]any{}

	var res GetAllSubprocessorHistories
	if err := c.Client.Post(ctx, "GetAllSubprocessorHistories", GetAllSubprocessorHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSubprocessorHistoriesDocument = `query GetSubprocessorHistories ($first: Int, $last: Int, $where: SubprocessorHistoryWhereInput) {
	subprocessorHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				logoLocalFileID
				logoRemoteURL
				name
				operation
				ownerID
				ref
				systemOwned
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetSubprocessorHistories(ctx context.Context, first *int64, last *int64, where *SubprocessorHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetSubprocessorHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetSubprocessorHistories
	if err := c.Client.Post(ctx, "GetSubprocessorHistories", GetSubprocessorHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVSubscriberDocument = `mutation CreateBulkCSVSubscriber ($input: Upload!) {
	createBulkCSVSubscriber(input: $input) {
		subscribers {
			active
			email
			id
			verifiedEmail
			unsubscribed
		}
	}
}
`

func (c *Client) CreateBulkCSVSubscriber(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVSubscriber, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVSubscriber
	if err := c.Client.Post(ctx, "CreateBulkCSVSubscriber", CreateBulkCSVSubscriberDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkSubscriberDocument = `mutation CreateBulkSubscriber ($input: [CreateSubscriberInput!]) {
	createBulkSubscriber(input: $input) {
		subscribers {
			active
			email
			id
			verifiedEmail
			unsubscribed
		}
	}
}
`

func (c *Client) CreateBulkSubscriber(ctx context.Context, input []*CreateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkSubscriber, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkSubscriber
	if err := c.Client.Post(ctx, "CreateBulkSubscriber", CreateBulkSubscriberDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateSubscriberDocument = `mutation CreateSubscriber ($input: CreateSubscriberInput!) {
	createSubscriber(input: $input) {
		subscriber {
			active
			createdAt
			createdBy
			email
			id
			updatedAt
			updatedBy
			verifiedEmail
			unsubscribed
		}
	}
}
`

func (c *Client) CreateSubscriber(ctx context.Context, input CreateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*CreateSubscriber, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateSubscriber
	if err := c.Client.Post(ctx, "CreateSubscriber", CreateSubscriberDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteSubscriberDocument = `mutation DeleteSubscriber ($deleteSubscriberEmail: String!, $subscriberOrganization: ID) {
	deleteSubscriber(email: $deleteSubscriberEmail, ownerID: $subscriberOrganization) {
		email
	}
}
`

func (c *Client) DeleteSubscriber(ctx context.Context, deleteSubscriberEmail string, subscriberOrganization *string, interceptors ...clientv2.RequestInterceptor) (*DeleteSubscriber, error) {
	vars := map[string]any{
		"deleteSubscriberEmail":  deleteSubscriberEmail,
		"subscriberOrganization": subscriberOrganization,
	}

	var res DeleteSubscriber
	if err := c.Client.Post(ctx, "DeleteSubscriber", DeleteSubscriberDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllSubscribersDocument = `query GetAllSubscribers ($first: Int, $last: Int, $after: Cursor, $before: Cursor, $orderBy: [SubscriberOrder!]) {
	subscribers(first: $first, last: $last, after: $after, before: $before, orderBy: $orderBy) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				active
				email
				id
				ownerID
				verifiedEmail
				unsubscribed
				sendAttempts
			}
		}
	}
}
`

func (c *Client) GetAllSubscribers(ctx context.Context, first *int64, last *int64, after *string, before *string, orderBy []*SubscriberOrder, interceptors ...clientv2.RequestInterceptor) (*GetAllSubscribers, error) {
	vars := map[string]any{
		"first":   first,
		"last":    last,
		"after":   after,
		"before":  before,
		"orderBy": orderBy,
	}

	var res GetAllSubscribers
	if err := c.Client.Post(ctx, "GetAllSubscribers", GetAllSubscribersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSubscriberByEmailDocument = `query GetSubscriberByEmail ($email: String!) {
	subscriber(email: $email) {
		active
		email
		id
		ownerID
		verifiedEmail
		unsubscribed
		sendAttempts
	}
}
`

func (c *Client) GetSubscriberByEmail(ctx context.Context, email string, interceptors ...clientv2.RequestInterceptor) (*GetSubscriberByEmail, error) {
	vars := map[string]any{
		"email": email,
	}

	var res GetSubscriberByEmail
	if err := c.Client.Post(ctx, "GetSubscriberByEmail", GetSubscriberByEmailDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSubscribersDocument = `query GetSubscribers ($first: Int, $last: Int, $after: Cursor, $before: Cursor, $where: SubscriberWhereInput, $orderBy: [SubscriberOrder!]) {
	subscribers(first: $first, last: $last, after: $after, before: $before, where: $where, orderBy: $orderBy) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				active
				email
				id
				ownerID
				verifiedEmail
				unsubscribed
				sendAttempts
			}
		}
	}
}
`

func (c *Client) GetSubscribers(ctx context.Context, first *int64, last *int64, after *string, before *string, where *SubscriberWhereInput, orderBy []*SubscriberOrder, interceptors ...clientv2.RequestInterceptor) (*GetSubscribers, error) {
	vars := map[string]any{
		"first":   first,
		"last":    last,
		"after":   after,
		"before":  before,
		"where":   where,
		"orderBy": orderBy,
	}

	var res GetSubscribers
	if err := c.Client.Post(ctx, "GetSubscribers", GetSubscribersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateSubscriberDocument = `mutation UpdateSubscriber ($email: String!, $input: UpdateSubscriberInput!) {
	updateSubscriber(email: $email, input: $input) {
		subscriber {
			active
			createdAt
			createdBy
			email
			id
			phoneNumber
			updatedAt
			updatedBy
			verifiedEmail
			verifiedPhone
			unsubscribed
		}
	}
}
`

func (c *Client) UpdateSubscriber(ctx context.Context, email string, input UpdateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*UpdateSubscriber, error) {
	vars := map[string]any{
		"email": email,
		"input": input,
	}

	var res UpdateSubscriber
	if err := c.Client.Post(ctx, "UpdateSubscriber", UpdateSubscriberDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVTaskDocument = `mutation CreateBulkCSVTask ($input: Upload!) {
	createBulkCSVTask(input: $input) {
		tasks {
			assigneeID
			assignerID
			category
			completed
			createdAt
			createdBy
			details
			displayID
			due
			id
			ownerID
			status
			tags
			title
			updatedAt
			updatedBy
			assignee {
				id
				displayName
			}
			assigner {
				id
				displayName
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVTask(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVTask, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVTask
	if err := c.Client.Post(ctx, "CreateBulkCSVTask", CreateBulkCSVTaskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkTaskDocument = `mutation CreateBulkTask ($input: [CreateTaskInput!]) {
	createBulkTask(input: $input) {
		tasks {
			assigneeID
			assignerID
			category
			completed
			createdAt
			createdBy
			details
			displayID
			due
			id
			ownerID
			status
			tags
			title
			updatedAt
			updatedBy
			assignee {
				id
				displayName
			}
			assigner {
				id
				displayName
			}
		}
	}
}
`

func (c *Client) CreateBulkTask(ctx context.Context, input []*CreateTaskInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkTask, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkTask
	if err := c.Client.Post(ctx, "CreateBulkTask", CreateBulkTaskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateTaskDocument = `mutation CreateTask ($input: CreateTaskInput!) {
	createTask(input: $input) {
		task {
			assigneeID
			assignerID
			category
			completed
			createdAt
			createdBy
			details
			displayID
			due
			id
			ownerID
			status
			tags
			title
			updatedAt
			updatedBy
			assignee {
				id
				displayName
			}
			assigner {
				id
				displayName
			}
		}
	}
}
`

func (c *Client) CreateTask(ctx context.Context, input CreateTaskInput, interceptors ...clientv2.RequestInterceptor) (*CreateTask, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateTask
	if err := c.Client.Post(ctx, "CreateTask", CreateTaskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteTaskDocument = `mutation DeleteTask ($deleteTaskId: ID!) {
	deleteTask(id: $deleteTaskId) {
		deletedID
	}
}
`

func (c *Client) DeleteTask(ctx context.Context, deleteTaskID string, interceptors ...clientv2.RequestInterceptor) (*DeleteTask, error) {
	vars := map[string]any{
		"deleteTaskId": deleteTaskID,
	}

	var res DeleteTask
	if err := c.Client.Post(ctx, "DeleteTask", DeleteTaskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTasksDocument = `query GetAllTasks {
	tasks {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				assigneeID
				assignerID
				category
				completed
				createdAt
				createdBy
				details
				displayID
				due
				id
				ownerID
				status
				tags
				title
				updatedAt
				updatedBy
				assignee {
					id
					displayName
				}
				assigner {
					id
					displayName
				}
			}
		}
	}
}
`

func (c *Client) GetAllTasks(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTasks, error) {
	vars := map[string]any{}

	var res GetAllTasks
	if err := c.Client.Post(ctx, "GetAllTasks", GetAllTasksDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTaskByIDDocument = `query GetTaskByID ($taskId: ID!) {
	task(id: $taskId) {
		assigneeID
		assignerID
		category
		completed
		createdAt
		createdBy
		details
		displayID
		due
		id
		ownerID
		status
		tags
		title
		updatedAt
		updatedBy
		assignee {
			id
			displayName
		}
		assigner {
			id
			displayName
		}
	}
}
`

func (c *Client) GetTaskByID(ctx context.Context, taskID string, interceptors ...clientv2.RequestInterceptor) (*GetTaskByID, error) {
	vars := map[string]any{
		"taskId": taskID,
	}

	var res GetTaskByID
	if err := c.Client.Post(ctx, "GetTaskByID", GetTaskByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTasksDocument = `query GetTasks ($first: Int, $last: Int, $after: Cursor, $before: Cursor, $where: TaskWhereInput, $orderBy: [TaskOrder!]) {
	tasks(first: $first, last: $last, after: $after, before: $before, where: $where, orderBy: $orderBy) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				assigneeID
				assignerID
				category
				completed
				createdAt
				createdBy
				details
				displayID
				due
				id
				ownerID
				status
				tags
				title
				updatedAt
				updatedBy
				assignee {
					id
					displayName
				}
				assigner {
					id
					displayName
				}
			}
		}
	}
}
`

func (c *Client) GetTasks(ctx context.Context, first *int64, last *int64, after *string, before *string, where *TaskWhereInput, orderBy []*TaskOrder, interceptors ...clientv2.RequestInterceptor) (*GetTasks, error) {
	vars := map[string]any{
		"first":   first,
		"last":    last,
		"after":   after,
		"before":  before,
		"where":   where,
		"orderBy": orderBy,
	}

	var res GetTasks
	if err := c.Client.Post(ctx, "GetTasks", GetTasksDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateTaskDocument = `mutation UpdateTask ($updateTaskId: ID!, $input: UpdateTaskInput!) {
	updateTask(id: $updateTaskId, input: $input) {
		task {
			assigneeID
			assignerID
			category
			completed
			createdAt
			createdBy
			details
			displayID
			due
			id
			ownerID
			status
			tags
			title
			updatedAt
			updatedBy
			assignee {
				id
				displayName
			}
			assigner {
				id
				displayName
			}
		}
	}
}
`

func (c *Client) UpdateTask(ctx context.Context, updateTaskID string, input UpdateTaskInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTask, error) {
	vars := map[string]any{
		"updateTaskId": updateTaskID,
		"input":        input,
	}

	var res UpdateTask
	if err := c.Client.Post(ctx, "UpdateTask", UpdateTaskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTaskHistoriesDocument = `query GetAllTaskHistories {
	taskHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				assigneeID
				assignerID
				category
				completed
				createdAt
				createdBy
				details
				displayID
				due
				historyTime
				id
				operation
				ownerID
				ref
				status
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllTaskHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTaskHistories, error) {
	vars := map[string]any{}

	var res GetAllTaskHistories
	if err := c.Client.Post(ctx, "GetAllTaskHistories", GetAllTaskHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTaskHistoriesDocument = `query GetTaskHistories ($first: Int, $last: Int, $where: TaskHistoryWhereInput) {
	taskHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				assigneeID
				assignerID
				category
				completed
				createdAt
				createdBy
				details
				displayID
				due
				historyTime
				id
				operation
				ownerID
				ref
				status
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetTaskHistories(ctx context.Context, first *int64, last *int64, where *TaskHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTaskHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetTaskHistories
	if err := c.Client.Post(ctx, "GetTaskHistories", GetTaskHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVTemplateDocument = `mutation CreateBulkCSVTemplate ($input: Upload!) {
	createBulkCSVTemplate(input: $input) {
		templates {
			createdAt
			createdBy
			description
			id
			jsonconfig
			name
			ownerID
			tags
			templateType
			uischema
			updatedAt
			updatedBy
			kind
		}
	}
}
`

func (c *Client) CreateBulkCSVTemplate(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVTemplate, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVTemplate
	if err := c.Client.Post(ctx, "CreateBulkCSVTemplate", CreateBulkCSVTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkTemplateDocument = `mutation CreateBulkTemplate ($input: [CreateTemplateInput!]) {
	createBulkTemplate(input: $input) {
		templates {
			createdAt
			createdBy
			description
			id
			jsonconfig
			name
			ownerID
			tags
			templateType
			uischema
			updatedAt
			updatedBy
			kind
		}
	}
}
`

func (c *Client) CreateBulkTemplate(ctx context.Context, input []*CreateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkTemplate, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkTemplate
	if err := c.Client.Post(ctx, "CreateBulkTemplate", CreateBulkTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateTemplateDocument = `mutation CreateTemplate ($input: CreateTemplateInput!, $templateFiles: [Upload!]) {
	createTemplate(input: $input, templateFiles: $templateFiles) {
		template {
			createdAt
			createdBy
			description
			id
			jsonconfig
			name
			ownerID
			tags
			templateType
			uischema
			updatedAt
			updatedBy
			kind
			files {
				edges {
					node {
						id
						presignedURL
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateTemplate(ctx context.Context, input CreateTemplateInput, templateFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateTemplate, error) {
	vars := map[string]any{
		"input":         input,
		"templateFiles": templateFiles,
	}

	var res CreateTemplate
	if err := c.Client.Post(ctx, "CreateTemplate", CreateTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteTemplateDocument = `mutation DeleteTemplate ($deleteTemplateId: ID!) {
	deleteTemplate(id: $deleteTemplateId) {
		deletedID
	}
}
`

func (c *Client) DeleteTemplate(ctx context.Context, deleteTemplateID string, interceptors ...clientv2.RequestInterceptor) (*DeleteTemplate, error) {
	vars := map[string]any{
		"deleteTemplateId": deleteTemplateID,
	}

	var res DeleteTemplate
	if err := c.Client.Post(ctx, "DeleteTemplate", DeleteTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTemplatesDocument = `query GetAllTemplates {
	templates {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				id
				jsonconfig
				name
				ownerID
				tags
				templateType
				uischema
				updatedAt
				updatedBy
				kind
				files {
					edges {
						node {
							id
							presignedURL
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetAllTemplates(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTemplates, error) {
	vars := map[string]any{}

	var res GetAllTemplates
	if err := c.Client.Post(ctx, "GetAllTemplates", GetAllTemplatesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTemplateByIDDocument = `query GetTemplateByID ($templateId: ID!) {
	template(id: $templateId) {
		createdAt
		createdBy
		description
		id
		jsonconfig
		name
		ownerID
		tags
		templateType
		uischema
		updatedAt
		updatedBy
		kind
		files {
			edges {
				node {
					id
					presignedURL
				}
			}
		}
	}
}
`

func (c *Client) GetTemplateByID(ctx context.Context, templateID string, interceptors ...clientv2.RequestInterceptor) (*GetTemplateByID, error) {
	vars := map[string]any{
		"templateId": templateID,
	}

	var res GetTemplateByID
	if err := c.Client.Post(ctx, "GetTemplateByID", GetTemplateByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTemplatesDocument = `query GetTemplates ($first: Int, $last: Int, $where: TemplateWhereInput) {
	templates(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				id
				jsonconfig
				name
				ownerID
				tags
				templateType
				uischema
				updatedAt
				updatedBy
				kind
				files {
					edges {
						node {
							id
							presignedURL
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetTemplates(ctx context.Context, first *int64, last *int64, where *TemplateWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTemplates, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetTemplates
	if err := c.Client.Post(ctx, "GetTemplates", GetTemplatesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateTemplateDocument = `mutation UpdateTemplate ($updateTemplateId: ID!, $input: UpdateTemplateInput!, $templateFiles: [Upload!]) {
	updateTemplate(id: $updateTemplateId, input: $input, templateFiles: $templateFiles) {
		template {
			createdAt
			createdBy
			description
			id
			jsonconfig
			name
			ownerID
			tags
			templateType
			uischema
			updatedAt
			updatedBy
			kind
			files {
				edges {
					node {
						id
						presignedURL
					}
				}
			}
		}
	}
}
`

func (c *Client) UpdateTemplate(ctx context.Context, updateTemplateID string, input UpdateTemplateInput, templateFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateTemplate, error) {
	vars := map[string]any{
		"updateTemplateId": updateTemplateID,
		"input":            input,
		"templateFiles":    templateFiles,
	}

	var res UpdateTemplate
	if err := c.Client.Post(ctx, "UpdateTemplate", UpdateTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTemplateHistoriesDocument = `query GetAllTemplateHistories {
	templateHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				jsonconfig
				name
				operation
				ownerID
				ref
				tags
				templateType
				uischema
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllTemplateHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTemplateHistories, error) {
	vars := map[string]any{}

	var res GetAllTemplateHistories
	if err := c.Client.Post(ctx, "GetAllTemplateHistories", GetAllTemplateHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTemplateHistoriesDocument = `query GetTemplateHistories ($first: Int, $last: Int, $where: TemplateHistoryWhereInput) {
	templateHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				jsonconfig
				name
				operation
				ownerID
				ref
				tags
				templateType
				uischema
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetTemplateHistories(ctx context.Context, first *int64, last *int64, where *TemplateHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTemplateHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetTemplateHistories
	if err := c.Client.Post(ctx, "GetTemplateHistories", GetTemplateHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateTFASettingDocument = `mutation CreateTFASetting ($input: CreateTFASettingInput!) {
	createTFASetting(input: $input) {
		tfaSetting {
			totpAllowed
			verified
		}
		qrCode
		tfaSecret
	}
}
`

func (c *Client) CreateTFASetting(ctx context.Context, input CreateTFASettingInput, interceptors ...clientv2.RequestInterceptor) (*CreateTFASetting, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateTFASetting
	if err := c.Client.Post(ctx, "CreateTFASetting", CreateTFASettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTFASettingsDocument = `query GetAllTFASettings {
	tfaSettings {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				id
				totpAllowed
				updatedAt
				updatedBy
				verified
			}
		}
	}
}
`

func (c *Client) GetAllTFASettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTFASettings, error) {
	vars := map[string]any{}

	var res GetAllTFASettings
	if err := c.Client.Post(ctx, "GetAllTFASettings", GetAllTFASettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTFASettingByIDDocument = `query GetTFASettingByID ($tFASettingId: ID!) {
	tfaSetting(id: $tFASettingId) {
		createdAt
		createdBy
		id
		totpAllowed
		updatedAt
		updatedBy
		verified
	}
}
`

func (c *Client) GetTFASettingByID(ctx context.Context, tFASettingID string, interceptors ...clientv2.RequestInterceptor) (*GetTFASettingByID, error) {
	vars := map[string]any{
		"tFASettingId": tFASettingID,
	}

	var res GetTFASettingByID
	if err := c.Client.Post(ctx, "GetTFASettingByID", GetTFASettingByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTFASettingsDocument = `query GetTFASettings ($first: Int, $last: Int, $where: TFASettingWhereInput) {
	tfaSettings(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				id
				totpAllowed
				updatedAt
				updatedBy
				verified
			}
		}
	}
}
`

func (c *Client) GetTFASettings(ctx context.Context, first *int64, last *int64, where *TFASettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTFASettings, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetTFASettings
	if err := c.Client.Post(ctx, "GetTFASettings", GetTFASettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateTFASettingDocument = `mutation UpdateTFASetting ($input: UpdateTFASettingInput!) {
	updateTFASetting(input: $input) {
		tfaSetting {
			totpAllowed
			verified
		}
		qrCode
		tfaSecret
		recoveryCodes
	}
}
`

func (c *Client) UpdateTFASetting(ctx context.Context, input UpdateTFASettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTFASetting, error) {
	vars := map[string]any{
		"input": input,
	}

	var res UpdateTFASetting
	if err := c.Client.Post(ctx, "UpdateTFASetting", UpdateTFASettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateTrustCenterDocument = `mutation CreateTrustCenter ($input: CreateTrustCenterInput!) {
	createTrustCenter(input: $input) {
		trustCenter {
			createdAt
			createdBy
			customDomainID
			id
			ownerID
			slug
			tags
			updatedAt
			updatedBy
			customDomain {
				cnameRecord
				dnsVerificationID
			}
			setting {
				id
				overview
				title
				primaryColor
				logoRemoteURL
				logoLocalFileID
				logoFile {
					presignedURL
				}
				faviconRemoteURL
				faviconLocalFileID
				faviconFile {
					presignedURL
				}
				themeMode
				font
				foregroundColor
				backgroundColor
				accentColor
			}
		}
	}
}
`

func (c *Client) CreateTrustCenter(ctx context.Context, input CreateTrustCenterInput, interceptors ...clientv2.RequestInterceptor) (*CreateTrustCenter, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateTrustCenter
	if err := c.Client.Post(ctx, "CreateTrustCenter", CreateTrustCenterDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteTrustCenterDocument = `mutation DeleteTrustCenter ($deleteTrustCenterId: ID!) {
	deleteTrustCenter(id: $deleteTrustCenterId) {
		deletedID
	}
}
`

func (c *Client) DeleteTrustCenter(ctx context.Context, deleteTrustCenterID string, interceptors ...clientv2.RequestInterceptor) (*DeleteTrustCenter, error) {
	vars := map[string]any{
		"deleteTrustCenterId": deleteTrustCenterID,
	}

	var res DeleteTrustCenter
	if err := c.Client.Post(ctx, "DeleteTrustCenter", DeleteTrustCenterDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTrustCentersDocument = `query GetAllTrustCenters {
	trustCenters {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				customDomain {
					cnameRecord
					dnsVerificationID
				}
				customDomainID
				id
				ownerID
				slug
				tags
				updatedAt
				updatedBy
				setting {
					id
					overview
					title
					primaryColor
					logoRemoteURL
					logoLocalFileID
					logoFile {
						presignedURL
					}
					faviconRemoteURL
					faviconLocalFileID
					faviconFile {
						presignedURL
					}
					themeMode
					font
					foregroundColor
					backgroundColor
					accentColor
				}
			}
		}
	}
}
`

func (c *Client) GetAllTrustCenters(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenters, error) {
	vars := map[string]any{}

	var res GetAllTrustCenters
	if err := c.Client.Post(ctx, "GetAllTrustCenters", GetAllTrustCentersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTrustCenterByIDDocument = `query GetTrustCenterByID ($trustCenterId: ID!) {
	trustCenter(id: $trustCenterId) {
		createdAt
		createdBy
		customDomainID
		id
		ownerID
		slug
		tags
		updatedAt
		updatedBy
		customDomain {
			cnameRecord
			dnsVerificationID
		}
		setting {
			id
			overview
			title
			primaryColor
			logoRemoteURL
			logoLocalFileID
			logoFile {
				presignedURL
			}
			faviconRemoteURL
			faviconLocalFileID
			faviconFile {
				presignedURL
			}
			themeMode
			font
			foregroundColor
			backgroundColor
			accentColor
		}
	}
}
`

func (c *Client) GetTrustCenterByID(ctx context.Context, trustCenterID string, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterByID, error) {
	vars := map[string]any{
		"trustCenterId": trustCenterID,
	}

	var res GetTrustCenterByID
	if err := c.Client.Post(ctx, "GetTrustCenterByID", GetTrustCenterByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTrustCentersDocument = `query GetTrustCenters ($first: Int, $last: Int, $where: TrustCenterWhereInput) {
	trustCenters(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				customDomainID
				id
				ownerID
				slug
				tags
				updatedAt
				updatedBy
				customDomain {
					cnameRecord
					dnsVerificationID
				}
				setting {
					id
					overview
					title
					primaryColor
					logoRemoteURL
					logoLocalFileID
					logoFile {
						presignedURL
					}
					faviconRemoteURL
					faviconLocalFileID
					faviconFile {
						presignedURL
					}
					themeMode
					font
					foregroundColor
					backgroundColor
					accentColor
				}
			}
		}
	}
}
`

func (c *Client) GetTrustCenters(ctx context.Context, first *int64, last *int64, where *TrustCenterWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenters, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetTrustCenters
	if err := c.Client.Post(ctx, "GetTrustCenters", GetTrustCentersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateTrustCenterDocument = `mutation UpdateTrustCenter ($updateTrustCenterId: ID!, $input: UpdateTrustCenterInput!) {
	updateTrustCenter(id: $updateTrustCenterId, input: $input) {
		trustCenter {
			createdAt
			createdBy
			customDomainID
			id
			ownerID
			slug
			tags
			updatedAt
			updatedBy
			customDomain {
				cnameRecord
				dnsVerificationID
			}
			setting {
				id
				overview
				title
				primaryColor
				logoRemoteURL
				logoLocalFileID
				logoFile {
					presignedURL
				}
				faviconRemoteURL
				faviconLocalFileID
				faviconFile {
					presignedURL
				}
				themeMode
				font
				foregroundColor
				backgroundColor
				accentColor
			}
		}
	}
}
`

func (c *Client) UpdateTrustCenter(ctx context.Context, updateTrustCenterID string, input UpdateTrustCenterInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTrustCenter, error) {
	vars := map[string]any{
		"updateTrustCenterId": updateTrustCenterID,
		"input":               input,
	}

	var res UpdateTrustCenter
	if err := c.Client.Post(ctx, "UpdateTrustCenter", UpdateTrustCenterDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVTrustCenterComplianceDocument = `mutation CreateBulkCSVTrustCenterCompliance ($input: Upload!) {
	createBulkCSVTrustCenterCompliance(input: $input) {
		trustCenterCompliances {
			createdAt
			createdBy
			id
			tags
			updatedAt
			updatedBy
			standard {
				governingBody
				governingBodyLogoURL
				link
				name
				shortName
				standardType
				version
				description
				domains
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVTrustCenterCompliance(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVTrustCenterCompliance, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVTrustCenterCompliance
	if err := c.Client.Post(ctx, "CreateBulkCSVTrustCenterCompliance", CreateBulkCSVTrustCenterComplianceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkTrustCenterComplianceDocument = `mutation CreateBulkTrustCenterCompliance ($input: [CreateTrustCenterComplianceInput!]) {
	createBulkTrustCenterCompliance(input: $input) {
		trustCenterCompliances {
			createdAt
			createdBy
			id
			tags
			updatedAt
			updatedBy
			standard {
				governingBody
				governingBodyLogoURL
				link
				name
				shortName
				standardType
				version
				description
				domains
			}
		}
	}
}
`

func (c *Client) CreateBulkTrustCenterCompliance(ctx context.Context, input []*CreateTrustCenterComplianceInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkTrustCenterCompliance, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkTrustCenterCompliance
	if err := c.Client.Post(ctx, "CreateBulkTrustCenterCompliance", CreateBulkTrustCenterComplianceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateTrustCenterComplianceDocument = `mutation CreateTrustCenterCompliance ($input: CreateTrustCenterComplianceInput!) {
	createTrustCenterCompliance(input: $input) {
		trustCenterCompliance {
			createdAt
			createdBy
			id
			tags
			updatedAt
			updatedBy
			standard {
				governingBody
				governingBodyLogoURL
				link
				name
				shortName
				standardType
				version
				description
				domains
			}
		}
	}
}
`

func (c *Client) CreateTrustCenterCompliance(ctx context.Context, input CreateTrustCenterComplianceInput, interceptors ...clientv2.RequestInterceptor) (*CreateTrustCenterCompliance, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateTrustCenterCompliance
	if err := c.Client.Post(ctx, "CreateTrustCenterCompliance", CreateTrustCenterComplianceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteTrustCenterComplianceDocument = `mutation DeleteTrustCenterCompliance ($deleteTrustCenterComplianceId: ID!) {
	deleteTrustCenterCompliance(id: $deleteTrustCenterComplianceId) {
		deletedID
	}
}
`

func (c *Client) DeleteTrustCenterCompliance(ctx context.Context, deleteTrustCenterComplianceID string, interceptors ...clientv2.RequestInterceptor) (*DeleteTrustCenterCompliance, error) {
	vars := map[string]any{
		"deleteTrustCenterComplianceId": deleteTrustCenterComplianceID,
	}

	var res DeleteTrustCenterCompliance
	if err := c.Client.Post(ctx, "DeleteTrustCenterCompliance", DeleteTrustCenterComplianceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTrustCenterCompliancesDocument = `query GetAllTrustCenterCompliances {
	trustCenterCompliances {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				id
				tags
				updatedAt
				updatedBy
				standard {
					governingBody
					governingBodyLogoURL
					link
					name
					shortName
					standardType
					version
					description
					domains
				}
			}
		}
	}
}
`

func (c *Client) GetAllTrustCenterCompliances(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenterCompliances, error) {
	vars := map[string]any{}

	var res GetAllTrustCenterCompliances
	if err := c.Client.Post(ctx, "GetAllTrustCenterCompliances", GetAllTrustCenterCompliancesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTrustCenterComplianceByIDDocument = `query GetTrustCenterComplianceByID ($trustCenterComplianceId: ID!) {
	trustCenterCompliance(id: $trustCenterComplianceId) {
		createdAt
		createdBy
		id
		tags
		updatedAt
		updatedBy
		standard {
			governingBody
			governingBodyLogoURL
			link
			name
			shortName
			standardType
			version
			description
			domains
		}
	}
}
`

func (c *Client) GetTrustCenterComplianceByID(ctx context.Context, trustCenterComplianceID string, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterComplianceByID, error) {
	vars := map[string]any{
		"trustCenterComplianceId": trustCenterComplianceID,
	}

	var res GetTrustCenterComplianceByID
	if err := c.Client.Post(ctx, "GetTrustCenterComplianceByID", GetTrustCenterComplianceByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTrustCenterCompliancesDocument = `query GetTrustCenterCompliances ($first: Int, $last: Int, $where: TrustCenterComplianceWhereInput) {
	trustCenterCompliances(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				id
				tags
				updatedAt
				updatedBy
				standard {
					governingBody
					governingBodyLogoURL
					link
					name
					shortName
					standardType
					version
					description
					domains
				}
			}
		}
	}
}
`

func (c *Client) GetTrustCenterCompliances(ctx context.Context, first *int64, last *int64, where *TrustCenterComplianceWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterCompliances, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetTrustCenterCompliances
	if err := c.Client.Post(ctx, "GetTrustCenterCompliances", GetTrustCenterCompliancesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateTrustCenterComplianceDocument = `mutation UpdateTrustCenterCompliance ($updateTrustCenterComplianceId: ID!, $input: UpdateTrustCenterComplianceInput!) {
	updateTrustCenterCompliance(id: $updateTrustCenterComplianceId, input: $input) {
		trustCenterCompliance {
			createdAt
			createdBy
			id
			tags
			updatedAt
			updatedBy
			standard {
				governingBody
				governingBodyLogoURL
				link
				name
				shortName
				standardType
				version
				description
				domains
			}
		}
	}
}
`

func (c *Client) UpdateTrustCenterCompliance(ctx context.Context, updateTrustCenterComplianceID string, input UpdateTrustCenterComplianceInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTrustCenterCompliance, error) {
	vars := map[string]any{
		"updateTrustCenterComplianceId": updateTrustCenterComplianceID,
		"input":                         input,
	}

	var res UpdateTrustCenterCompliance
	if err := c.Client.Post(ctx, "UpdateTrustCenterCompliance", UpdateTrustCenterComplianceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTrustCenterComplianceHistoriesDocument = `query GetAllTrustCenterComplianceHistories {
	trustCenterComplianceHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllTrustCenterComplianceHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenterComplianceHistories, error) {
	vars := map[string]any{}

	var res GetAllTrustCenterComplianceHistories
	if err := c.Client.Post(ctx, "GetAllTrustCenterComplianceHistories", GetAllTrustCenterComplianceHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTrustCenterComplianceHistoriesDocument = `query GetTrustCenterComplianceHistories ($first: Int, $last: Int, $where: TrustCenterComplianceHistoryWhereInput) {
	trustCenterComplianceHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetTrustCenterComplianceHistories(ctx context.Context, first *int64, last *int64, where *TrustCenterComplianceHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterComplianceHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetTrustCenterComplianceHistories
	if err := c.Client.Post(ctx, "GetTrustCenterComplianceHistories", GetTrustCenterComplianceHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateTrustCenterDocDocument = `mutation CreateTrustCenterDoc ($input: CreateTrustCenterDocInput!, $trustCenterDocFile: Upload!) {
	createTrustCenterDoc(input: $input, trustCenterDocFile: $trustCenterDocFile) {
		trustCenterDoc {
			id
			createdAt
			updatedAt
			createdBy
			updatedBy
			tags
			trustCenterID
			title
			category
			fileID
			visibility
			file {
				id
				md5Hash
				presignedURL
			}
			originalFileID
			originalFile {
				id
				md5Hash
				presignedURL
				providedFileName
			}
		}
	}
}
`

func (c *Client) CreateTrustCenterDoc(ctx context.Context, input CreateTrustCenterDocInput, trustCenterDocFile graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateTrustCenterDoc, error) {
	vars := map[string]any{
		"input":              input,
		"trustCenterDocFile": trustCenterDocFile,
	}

	var res CreateTrustCenterDoc
	if err := c.Client.Post(ctx, "CreateTrustCenterDoc", CreateTrustCenterDocDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteTrustCenterDocDocument = `mutation DeleteTrustCenterDoc ($deleteTrustCenterDocId: ID!) {
	deleteTrustCenterDoc(id: $deleteTrustCenterDocId) {
		deletedID
	}
}
`

func (c *Client) DeleteTrustCenterDoc(ctx context.Context, deleteTrustCenterDocID string, interceptors ...clientv2.RequestInterceptor) (*DeleteTrustCenterDoc, error) {
	vars := map[string]any{
		"deleteTrustCenterDocId": deleteTrustCenterDocID,
	}

	var res DeleteTrustCenterDoc
	if err := c.Client.Post(ctx, "DeleteTrustCenterDoc", DeleteTrustCenterDocDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTrustCenterDocsDocument = `query GetAllTrustCenterDocs {
	trustCenterDocs {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				id
				createdAt
				updatedAt
				createdBy
				updatedBy
				tags
				trustCenterID
				title
				category
				fileID
				visibility
				file {
					id
					md5Hash
					presignedURL
				}
				originalFileID
				originalFile {
					id
					md5Hash
					presignedURL
					providedFileName
				}
			}
		}
	}
}
`

func (c *Client) GetAllTrustCenterDocs(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenterDocs, error) {
	vars := map[string]any{}

	var res GetAllTrustCenterDocs
	if err := c.Client.Post(ctx, "GetAllTrustCenterDocs", GetAllTrustCenterDocsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTrustCenterDocByIDDocument = `query GetTrustCenterDocByID ($trustCenterDocId: ID!) {
	trustCenterDoc(id: $trustCenterDocId) {
		id
		createdAt
		updatedAt
		createdBy
		updatedBy
		tags
		trustCenterID
		title
		category
		fileID
		visibility
		file {
			id
			md5Hash
			presignedURL
		}
		originalFileID
		originalFile {
			id
			md5Hash
			presignedURL
			providedFileName
		}
	}
}
`

func (c *Client) GetTrustCenterDocByID(ctx context.Context, trustCenterDocID string, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterDocByID, error) {
	vars := map[string]any{
		"trustCenterDocId": trustCenterDocID,
	}

	var res GetTrustCenterDocByID
	if err := c.Client.Post(ctx, "GetTrustCenterDocByID", GetTrustCenterDocByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTrustCenterDocsDocument = `query GetTrustCenterDocs ($first: Int, $last: Int, $where: TrustCenterDocWhereInput) {
	trustCenterDocs(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				id
				createdAt
				updatedAt
				createdBy
				updatedBy
				tags
				trustCenterID
				title
				category
				fileID
				visibility
				file {
					id
					md5Hash
					presignedURL
				}
				originalFileID
				originalFile {
					id
					md5Hash
					presignedURL
					providedFileName
				}
			}
		}
	}
}
`

func (c *Client) GetTrustCenterDocs(ctx context.Context, first *int64, last *int64, where *TrustCenterDocWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterDocs, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetTrustCenterDocs
	if err := c.Client.Post(ctx, "GetTrustCenterDocs", GetTrustCenterDocsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateTrustCenterDocDocument = `mutation UpdateTrustCenterDoc ($updateTrustCenterDocId: ID!, $input: UpdateTrustCenterDocInput!, $trustCenterDocFile: Upload, $watermarkedTrustCenterDocFile: Upload) {
	updateTrustCenterDoc(id: $updateTrustCenterDocId, input: $input, trustCenterDocFile: $trustCenterDocFile, watermarkedTrustCenterDocFile: $watermarkedTrustCenterDocFile) {
		trustCenterDoc {
			id
			createdAt
			updatedAt
			createdBy
			updatedBy
			tags
			trustCenterID
			title
			category
			fileID
			visibility
			file {
				id
				md5Hash
				presignedURL
			}
			originalFileID
			originalFile {
				id
				md5Hash
				presignedURL
				providedFileName
			}
		}
	}
}
`

func (c *Client) UpdateTrustCenterDoc(ctx context.Context, updateTrustCenterDocID string, input UpdateTrustCenterDocInput, trustCenterDocFile *graphql.Upload, watermarkedTrustCenterDocFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateTrustCenterDoc, error) {
	vars := map[string]any{
		"updateTrustCenterDocId":        updateTrustCenterDocID,
		"input":                         input,
		"trustCenterDocFile":            trustCenterDocFile,
		"watermarkedTrustCenterDocFile": watermarkedTrustCenterDocFile,
	}

	var res UpdateTrustCenterDoc
	if err := c.Client.Post(ctx, "UpdateTrustCenterDoc", UpdateTrustCenterDocDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTrustCenterDocHistoriesDocument = `query GetAllTrustCenterDocHistories {
	trustCenterDocHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllTrustCenterDocHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenterDocHistories, error) {
	vars := map[string]any{}

	var res GetAllTrustCenterDocHistories
	if err := c.Client.Post(ctx, "GetAllTrustCenterDocHistories", GetAllTrustCenterDocHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTrustCenterDocHistoriesDocument = `query GetTrustCenterDocHistories ($first: Int, $last: Int, $where: TrustCenterDocHistoryWhereInput) {
	trustCenterDocHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetTrustCenterDocHistories(ctx context.Context, first *int64, last *int64, where *TrustCenterDocHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterDocHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetTrustCenterDocHistories
	if err := c.Client.Post(ctx, "GetTrustCenterDocHistories", GetTrustCenterDocHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateTrustCenterDomainDocument = `mutation CreateTrustCenterDomain ($input: CreateTrustCenterDomainInput!) {
	createTrustCenterDomain(input: $input) {
		customDomain {
			cnameRecord
			createdAt
			createdBy
			dnsVerificationID
			dnsVerification {
				id
				dnsTxtRecord
				dnsTxtValue
				dnsVerificationStatus
			}
			id
			mappableDomainID
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateTrustCenterDomain(ctx context.Context, input CreateTrustCenterDomainInput, interceptors ...clientv2.RequestInterceptor) (*CreateTrustCenterDomain, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateTrustCenterDomain
	if err := c.Client.Post(ctx, "CreateTrustCenterDomain", CreateTrustCenterDomainDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTrustCenterHistoriesDocument = `query GetAllTrustCenterHistories {
	trustCenterHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				customDomainID
				historyTime
				id
				operation
				ownerID
				ref
				slug
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllTrustCenterHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenterHistories, error) {
	vars := map[string]any{}

	var res GetAllTrustCenterHistories
	if err := c.Client.Post(ctx, "GetAllTrustCenterHistories", GetAllTrustCenterHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTrustCenterHistoriesDocument = `query GetTrustCenterHistories ($first: Int, $last: Int, $where: TrustCenterHistoryWhereInput) {
	trustCenterHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				customDomainID
				historyTime
				id
				operation
				ownerID
				ref
				slug
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetTrustCenterHistories(ctx context.Context, first *int64, last *int64, where *TrustCenterHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetTrustCenterHistories
	if err := c.Client.Post(ctx, "GetTrustCenterHistories", GetTrustCenterHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateTrustCenterNdaDocument = `mutation CreateTrustCenterNda ($input: CreateTrustCenterNDAInput!, $templateFiles: [Upload!]) {
	createTrustCenterNDA(input: $input, templateFiles: $templateFiles) {
		template {
			id
			name
			kind
			jsonconfig
			trustCenterID
			files {
				edges {
					node {
						id
						presignedURL
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateTrustCenterNda(ctx context.Context, input CreateTrustCenterNDAInput, templateFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateTrustCenterNda, error) {
	vars := map[string]any{
		"input":         input,
		"templateFiles": templateFiles,
	}

	var res CreateTrustCenterNda
	if err := c.Client.Post(ctx, "CreateTrustCenterNda", CreateTrustCenterNdaDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const SendTrustCenterNDAEmailDocument = `mutation SendTrustCenterNDAEmail ($input: SendTrustCenterNDAInput!) {
	sendTrustCenterNDAEmail(input: $input) {
		success
	}
}
`

func (c *Client) SendTrustCenterNDAEmail(ctx context.Context, input SendTrustCenterNDAInput, interceptors ...clientv2.RequestInterceptor) (*SendTrustCenterNDAEmail, error) {
	vars := map[string]any{
		"input": input,
	}

	var res SendTrustCenterNDAEmail
	if err := c.Client.Post(ctx, "SendTrustCenterNDAEmail", SendTrustCenterNDAEmailDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const SubmitTrustCenterNDAResponseDocument = `mutation SubmitTrustCenterNDAResponse ($input: SubmitTrustCenterNDAResponseInput!) {
	submitTrustCenterNDAResponse(input: $input) {
		documentData {
			id
		}
	}
}
`

func (c *Client) SubmitTrustCenterNDAResponse(ctx context.Context, input SubmitTrustCenterNDAResponseInput, interceptors ...clientv2.RequestInterceptor) (*SubmitTrustCenterNDAResponse, error) {
	vars := map[string]any{
		"input": input,
	}

	var res SubmitTrustCenterNDAResponse
	if err := c.Client.Post(ctx, "SubmitTrustCenterNDAResponse", SubmitTrustCenterNDAResponseDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateTrustCenterNdaDocument = `mutation UpdateTrustCenterNda ($id: ID!, $templateFiles: [Upload!]) {
	updateTrustCenterNDA(id: $id, templateFiles: $templateFiles) {
		template {
			id
			name
			kind
			jsonconfig
			trustCenterID
			files {
				edges {
					node {
						id
						presignedURL
					}
				}
			}
		}
	}
}
`

func (c *Client) UpdateTrustCenterNda(ctx context.Context, id string, templateFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateTrustCenterNda, error) {
	vars := map[string]any{
		"id":            id,
		"templateFiles": templateFiles,
	}

	var res UpdateTrustCenterNda
	if err := c.Client.Post(ctx, "UpdateTrustCenterNda", UpdateTrustCenterNdaDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateTrustCenterSettingDocument = `mutation CreateTrustCenterSetting ($input: CreateTrustCenterSettingInput!) {
	createTrustCenterSetting(input: $input) {
		trustCenterSetting {
			accentColor
			backgroundColor
			createdAt
			createdBy
			faviconLocalFileID
			faviconRemoteURL
			font
			foregroundColor
			id
			logoLocalFileID
			logoRemoteURL
			overview
			primaryColor
			themeMode
			title
			trustCenterID
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateTrustCenterSetting(ctx context.Context, input CreateTrustCenterSettingInput, interceptors ...clientv2.RequestInterceptor) (*CreateTrustCenterSetting, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateTrustCenterSetting
	if err := c.Client.Post(ctx, "CreateTrustCenterSetting", CreateTrustCenterSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteTrustCenterSettingDocument = `mutation DeleteTrustCenterSetting ($deleteTrustCenterSettingId: ID!) {
	deleteTrustCenterSetting(id: $deleteTrustCenterSettingId) {
		deletedID
	}
}
`

func (c *Client) DeleteTrustCenterSetting(ctx context.Context, deleteTrustCenterSettingID string, interceptors ...clientv2.RequestInterceptor) (*DeleteTrustCenterSetting, error) {
	vars := map[string]any{
		"deleteTrustCenterSettingId": deleteTrustCenterSettingID,
	}

	var res DeleteTrustCenterSetting
	if err := c.Client.Post(ctx, "DeleteTrustCenterSetting", DeleteTrustCenterSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTrustCenterSettingsDocument = `query GetAllTrustCenterSettings {
	trustCenterSettings {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				accentColor
				backgroundColor
				createdAt
				createdBy
				faviconLocalFileID
				faviconRemoteURL
				font
				foregroundColor
				id
				logoLocalFileID
				logoRemoteURL
				overview
				primaryColor
				themeMode
				title
				trustCenterID
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllTrustCenterSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenterSettings, error) {
	vars := map[string]any{}

	var res GetAllTrustCenterSettings
	if err := c.Client.Post(ctx, "GetAllTrustCenterSettings", GetAllTrustCenterSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTrustCenterSettingByIDDocument = `query GetTrustCenterSettingByID ($trustCenterSettingId: ID!) {
	trustCenterSetting(id: $trustCenterSettingId) {
		accentColor
		backgroundColor
		createdAt
		createdBy
		faviconLocalFileID
		faviconRemoteURL
		font
		foregroundColor
		id
		logoLocalFileID
		logoRemoteURL
		overview
		primaryColor
		themeMode
		title
		trustCenterID
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetTrustCenterSettingByID(ctx context.Context, trustCenterSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterSettingByID, error) {
	vars := map[string]any{
		"trustCenterSettingId": trustCenterSettingID,
	}

	var res GetTrustCenterSettingByID
	if err := c.Client.Post(ctx, "GetTrustCenterSettingByID", GetTrustCenterSettingByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTrustCenterSettingsDocument = `query GetTrustCenterSettings ($first: Int, $last: Int, $where: TrustCenterSettingWhereInput) {
	trustCenterSettings(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				accentColor
				backgroundColor
				createdAt
				createdBy
				faviconLocalFileID
				faviconRemoteURL
				font
				foregroundColor
				id
				logoLocalFileID
				logoRemoteURL
				overview
				primaryColor
				themeMode
				title
				trustCenterID
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetTrustCenterSettings(ctx context.Context, first *int64, last *int64, where *TrustCenterSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterSettings, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetTrustCenterSettings
	if err := c.Client.Post(ctx, "GetTrustCenterSettings", GetTrustCenterSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateTrustCenterSettingDocument = `mutation UpdateTrustCenterSetting ($updateTrustCenterSettingId: ID!, $input: UpdateTrustCenterSettingInput!, $logoFile: Upload, $faviconFile: Upload) {
	updateTrustCenterSetting(id: $updateTrustCenterSettingId, input: $input, logoFile: $logoFile, faviconFile: $faviconFile) {
		trustCenterSetting {
			accentColor
			backgroundColor
			createdAt
			createdBy
			faviconLocalFileID
			faviconRemoteURL
			font
			foregroundColor
			id
			logoLocalFileID
			logoRemoteURL
			overview
			primaryColor
			themeMode
			title
			trustCenterID
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateTrustCenterSetting(ctx context.Context, updateTrustCenterSettingID string, input UpdateTrustCenterSettingInput, logoFile *graphql.Upload, faviconFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateTrustCenterSetting, error) {
	vars := map[string]any{
		"updateTrustCenterSettingId": updateTrustCenterSettingID,
		"input":                      input,
		"logoFile":                   logoFile,
		"faviconFile":                faviconFile,
	}

	var res UpdateTrustCenterSetting
	if err := c.Client.Post(ctx, "UpdateTrustCenterSetting", UpdateTrustCenterSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTrustCenterSettingHistoriesDocument = `query GetAllTrustCenterSettingHistories {
	trustCenterSettingHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				accentColor
				backgroundColor
				createdAt
				createdBy
				faviconLocalFileID
				faviconRemoteURL
				font
				foregroundColor
				historyTime
				id
				logoLocalFileID
				logoRemoteURL
				operation
				overview
				primaryColor
				ref
				themeMode
				title
				trustCenterID
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllTrustCenterSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenterSettingHistories, error) {
	vars := map[string]any{}

	var res GetAllTrustCenterSettingHistories
	if err := c.Client.Post(ctx, "GetAllTrustCenterSettingHistories", GetAllTrustCenterSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTrustCenterSettingHistoriesDocument = `query GetTrustCenterSettingHistories ($first: Int, $last: Int, $where: TrustCenterSettingHistoryWhereInput) {
	trustCenterSettingHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				accentColor
				backgroundColor
				createdAt
				createdBy
				faviconLocalFileID
				faviconRemoteURL
				font
				foregroundColor
				historyTime
				id
				logoLocalFileID
				logoRemoteURL
				operation
				overview
				primaryColor
				ref
				themeMode
				title
				trustCenterID
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetTrustCenterSettingHistories(ctx context.Context, first *int64, last *int64, where *TrustCenterSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterSettingHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetTrustCenterSettingHistories
	if err := c.Client.Post(ctx, "GetTrustCenterSettingHistories", GetTrustCenterSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVTrustCenterSubprocessorDocument = `mutation CreateBulkCSVTrustCenterSubprocessor ($input: Upload!) {
	createBulkCSVTrustCenterSubprocessor(input: $input) {
		trustCenterSubprocessors {
			category
			countries
			createdAt
			createdBy
			id
			subprocessorID
			trustCenterID
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVTrustCenterSubprocessor(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVTrustCenterSubprocessor, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVTrustCenterSubprocessor
	if err := c.Client.Post(ctx, "CreateBulkCSVTrustCenterSubprocessor", CreateBulkCSVTrustCenterSubprocessorDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkTrustCenterSubprocessorDocument = `mutation CreateBulkTrustCenterSubprocessor ($input: [CreateTrustCenterSubprocessorInput!]) {
	createBulkTrustCenterSubprocessor(input: $input) {
		trustCenterSubprocessors {
			category
			countries
			createdAt
			createdBy
			id
			subprocessorID
			trustCenterID
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkTrustCenterSubprocessor(ctx context.Context, input []*CreateTrustCenterSubprocessorInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkTrustCenterSubprocessor, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkTrustCenterSubprocessor
	if err := c.Client.Post(ctx, "CreateBulkTrustCenterSubprocessor", CreateBulkTrustCenterSubprocessorDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateTrustCenterSubprocessorDocument = `mutation CreateTrustCenterSubprocessor ($input: CreateTrustCenterSubprocessorInput!) {
	createTrustCenterSubprocessor(input: $input) {
		trustCenterSubprocessor {
			category
			countries
			createdAt
			createdBy
			id
			subprocessorID
			trustCenterID
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateTrustCenterSubprocessor(ctx context.Context, input CreateTrustCenterSubprocessorInput, interceptors ...clientv2.RequestInterceptor) (*CreateTrustCenterSubprocessor, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateTrustCenterSubprocessor
	if err := c.Client.Post(ctx, "CreateTrustCenterSubprocessor", CreateTrustCenterSubprocessorDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteTrustCenterSubprocessorDocument = `mutation DeleteTrustCenterSubprocessor ($deleteTrustCenterSubprocessorId: ID!) {
	deleteTrustCenterSubprocessor(id: $deleteTrustCenterSubprocessorId) {
		deletedID
	}
}
`

func (c *Client) DeleteTrustCenterSubprocessor(ctx context.Context, deleteTrustCenterSubprocessorID string, interceptors ...clientv2.RequestInterceptor) (*DeleteTrustCenterSubprocessor, error) {
	vars := map[string]any{
		"deleteTrustCenterSubprocessorId": deleteTrustCenterSubprocessorID,
	}

	var res DeleteTrustCenterSubprocessor
	if err := c.Client.Post(ctx, "DeleteTrustCenterSubprocessor", DeleteTrustCenterSubprocessorDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTrustCenterSubprocessorsDocument = `query GetAllTrustCenterSubprocessors {
	trustCenterSubprocessors {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				category
				countries
				createdAt
				createdBy
				id
				trustCenterID
				updatedAt
				updatedBy
				subprocessor {
					name
					description
					logoFile {
						presignedURL
					}
					logoRemoteURL
				}
			}
		}
	}
}
`

func (c *Client) GetAllTrustCenterSubprocessors(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenterSubprocessors, error) {
	vars := map[string]any{}

	var res GetAllTrustCenterSubprocessors
	if err := c.Client.Post(ctx, "GetAllTrustCenterSubprocessors", GetAllTrustCenterSubprocessorsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTrustCenterSubprocessorByIDDocument = `query GetTrustCenterSubprocessorByID ($trustCenterSubprocessorId: ID!) {
	trustCenterSubprocessor(id: $trustCenterSubprocessorId) {
		category
		countries
		createdAt
		createdBy
		id
		trustCenterID
		updatedAt
		updatedBy
		subprocessor {
			name
			description
			logoFile {
				presignedURL
			}
			logoRemoteURL
		}
	}
}
`

func (c *Client) GetTrustCenterSubprocessorByID(ctx context.Context, trustCenterSubprocessorID string, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterSubprocessorByID, error) {
	vars := map[string]any{
		"trustCenterSubprocessorId": trustCenterSubprocessorID,
	}

	var res GetTrustCenterSubprocessorByID
	if err := c.Client.Post(ctx, "GetTrustCenterSubprocessorByID", GetTrustCenterSubprocessorByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTrustCenterSubprocessorsDocument = `query GetTrustCenterSubprocessors ($first: Int, $last: Int, $where: TrustCenterSubprocessorWhereInput) {
	trustCenterSubprocessors(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				category
				countries
				createdAt
				createdBy
				id
				trustCenterID
				updatedAt
				updatedBy
				subprocessor {
					name
					description
					logoFile {
						presignedURL
					}
					logoRemoteURL
				}
			}
		}
	}
}
`

func (c *Client) GetTrustCenterSubprocessors(ctx context.Context, first *int64, last *int64, where *TrustCenterSubprocessorWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterSubprocessors, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetTrustCenterSubprocessors
	if err := c.Client.Post(ctx, "GetTrustCenterSubprocessors", GetTrustCenterSubprocessorsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateTrustCenterSubprocessorDocument = `mutation UpdateTrustCenterSubprocessor ($updateTrustCenterSubprocessorId: ID!, $input: UpdateTrustCenterSubprocessorInput!) {
	updateTrustCenterSubprocessor(id: $updateTrustCenterSubprocessorId, input: $input) {
		trustCenterSubprocessor {
			category
			countries
			createdAt
			createdBy
			id
			trustCenterID
			updatedAt
			updatedBy
			subprocessor {
				name
				description
				logoFile {
					presignedURL
				}
				logoRemoteURL
			}
		}
	}
}
`

func (c *Client) UpdateTrustCenterSubprocessor(ctx context.Context, updateTrustCenterSubprocessorID string, input UpdateTrustCenterSubprocessorInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTrustCenterSubprocessor, error) {
	vars := map[string]any{
		"updateTrustCenterSubprocessorId": updateTrustCenterSubprocessorID,
		"input":                           input,
	}

	var res UpdateTrustCenterSubprocessor
	if err := c.Client.Post(ctx, "UpdateTrustCenterSubprocessor", UpdateTrustCenterSubprocessorDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTrustCenterSubprocessorHistoriesDocument = `query GetAllTrustCenterSubprocessorHistories {
	trustCenterSubprocessorHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				category
				countries
				createdAt
				createdBy
				historyTime
				id
				operation
				ref
				subprocessorID
				trustCenterID
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllTrustCenterSubprocessorHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenterSubprocessorHistories, error) {
	vars := map[string]any{}

	var res GetAllTrustCenterSubprocessorHistories
	if err := c.Client.Post(ctx, "GetAllTrustCenterSubprocessorHistories", GetAllTrustCenterSubprocessorHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTrustCenterSubprocessorHistoriesDocument = `query GetTrustCenterSubprocessorHistories ($first: Int, $last: Int, $where: TrustCenterSubprocessorHistoryWhereInput) {
	trustCenterSubprocessorHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				category
				countries
				createdAt
				createdBy
				historyTime
				id
				operation
				ref
				subprocessorID
				trustCenterID
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetTrustCenterSubprocessorHistories(ctx context.Context, first *int64, last *int64, where *TrustCenterSubprocessorHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterSubprocessorHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetTrustCenterSubprocessorHistories
	if err := c.Client.Post(ctx, "GetTrustCenterSubprocessorHistories", GetTrustCenterSubprocessorHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateTrustCenterWatermarkConfigDocument = `mutation CreateTrustCenterWatermarkConfig ($input: CreateTrustCenterWatermarkConfigInput!, $logoFile: Upload) {
	createTrustCenterWatermarkConfig(input: $input, logoFile: $logoFile) {
		trustCenterWatermarkConfig {
			createdAt
			createdBy
			id
			updatedAt
			updatedBy
			trustCenterID
			file {
				id
				presignedURL
			}
			logoID
			text
			fontSize
			opacity
			rotation
			color
			font
		}
	}
}
`

func (c *Client) CreateTrustCenterWatermarkConfig(ctx context.Context, input CreateTrustCenterWatermarkConfigInput, logoFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateTrustCenterWatermarkConfig, error) {
	vars := map[string]any{
		"input":    input,
		"logoFile": logoFile,
	}

	var res CreateTrustCenterWatermarkConfig
	if err := c.Client.Post(ctx, "CreateTrustCenterWatermarkConfig", CreateTrustCenterWatermarkConfigDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteTrustCenterWatermarkConfigDocument = `mutation DeleteTrustCenterWatermarkConfig ($deleteTrustCenterWatermarkConfigId: ID!) {
	deleteTrustCenterWatermarkConfig(id: $deleteTrustCenterWatermarkConfigId) {
		deletedID
	}
}
`

func (c *Client) DeleteTrustCenterWatermarkConfig(ctx context.Context, deleteTrustCenterWatermarkConfigID string, interceptors ...clientv2.RequestInterceptor) (*DeleteTrustCenterWatermarkConfig, error) {
	vars := map[string]any{
		"deleteTrustCenterWatermarkConfigId": deleteTrustCenterWatermarkConfigID,
	}

	var res DeleteTrustCenterWatermarkConfig
	if err := c.Client.Post(ctx, "DeleteTrustCenterWatermarkConfig", DeleteTrustCenterWatermarkConfigDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTrustCenterWatermarkConfigsDocument = `query GetAllTrustCenterWatermarkConfigs {
	trustCenterWatermarkConfigs {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				id
				updatedAt
				updatedBy
				trustCenterID
				file {
					id
					presignedURL
				}
				logoID
				text
				fontSize
				opacity
				rotation
				color
				font
			}
		}
	}
}
`

func (c *Client) GetAllTrustCenterWatermarkConfigs(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenterWatermarkConfigs, error) {
	vars := map[string]any{}

	var res GetAllTrustCenterWatermarkConfigs
	if err := c.Client.Post(ctx, "GetAllTrustCenterWatermarkConfigs", GetAllTrustCenterWatermarkConfigsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTrustCenterWatermarkConfigByIDDocument = `query GetTrustCenterWatermarkConfigByID ($trustCenterWatermarkConfigId: ID!) {
	trustCenterWatermarkConfig(id: $trustCenterWatermarkConfigId) {
		createdAt
		createdBy
		id
		updatedAt
		updatedBy
		trustCenterID
		file {
			id
			presignedURL
		}
		logoID
		text
		fontSize
		opacity
		rotation
		color
		font
	}
}
`

func (c *Client) GetTrustCenterWatermarkConfigByID(ctx context.Context, trustCenterWatermarkConfigID string, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterWatermarkConfigByID, error) {
	vars := map[string]any{
		"trustCenterWatermarkConfigId": trustCenterWatermarkConfigID,
	}

	var res GetTrustCenterWatermarkConfigByID
	if err := c.Client.Post(ctx, "GetTrustCenterWatermarkConfigByID", GetTrustCenterWatermarkConfigByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTrustCenterWatermarkConfigsDocument = `query GetTrustCenterWatermarkConfigs ($first: Int, $last: Int, $where: TrustCenterWatermarkConfigWhereInput) {
	trustCenterWatermarkConfigs(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				id
				updatedAt
				updatedBy
				trustCenterID
				file {
					id
					presignedURL
				}
				logoID
				text
				fontSize
				opacity
				rotation
				color
				font
			}
		}
	}
}
`

func (c *Client) GetTrustCenterWatermarkConfigs(ctx context.Context, first *int64, last *int64, where *TrustCenterWatermarkConfigWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterWatermarkConfigs, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetTrustCenterWatermarkConfigs
	if err := c.Client.Post(ctx, "GetTrustCenterWatermarkConfigs", GetTrustCenterWatermarkConfigsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateTrustCenterWatermarkConfigDocument = `mutation UpdateTrustCenterWatermarkConfig ($updateTrustCenterWatermarkConfigId: ID!, $input: UpdateTrustCenterWatermarkConfigInput!, $logoFile: Upload) {
	updateTrustCenterWatermarkConfig(id: $updateTrustCenterWatermarkConfigId, input: $input, logoFile: $logoFile) {
		trustCenterWatermarkConfig {
			createdAt
			createdBy
			id
			updatedAt
			updatedBy
			trustCenterID
			file {
				id
				presignedURL
			}
			logoID
			text
			fontSize
			opacity
			rotation
			color
			font
		}
	}
}
`

func (c *Client) UpdateTrustCenterWatermarkConfig(ctx context.Context, updateTrustCenterWatermarkConfigID string, input UpdateTrustCenterWatermarkConfigInput, logoFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateTrustCenterWatermarkConfig, error) {
	vars := map[string]any{
		"updateTrustCenterWatermarkConfigId": updateTrustCenterWatermarkConfigID,
		"input":                              input,
		"logoFile":                           logoFile,
	}

	var res UpdateTrustCenterWatermarkConfig
	if err := c.Client.Post(ctx, "UpdateTrustCenterWatermarkConfig", UpdateTrustCenterWatermarkConfigDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTrustCenterWatermarkConfigHistoriesDocument = `query GetAllTrustCenterWatermarkConfigHistories {
	trustCenterWatermarkConfigHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				ref
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllTrustCenterWatermarkConfigHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTrustCenterWatermarkConfigHistories, error) {
	vars := map[string]any{}

	var res GetAllTrustCenterWatermarkConfigHistories
	if err := c.Client.Post(ctx, "GetAllTrustCenterWatermarkConfigHistories", GetAllTrustCenterWatermarkConfigHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTrustCenterWatermarkConfigHistoriesDocument = `query GetTrustCenterWatermarkConfigHistories ($first: Int, $last: Int, $where: TrustCenterWatermarkConfigHistoryWhereInput) {
	trustCenterWatermarkConfigHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				ref
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetTrustCenterWatermarkConfigHistories(ctx context.Context, first *int64, last *int64, where *TrustCenterWatermarkConfigHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTrustCenterWatermarkConfigHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetTrustCenterWatermarkConfigHistories
	if err := c.Client.Post(ctx, "GetTrustCenterWatermarkConfigHistories", GetTrustCenterWatermarkConfigHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateUserDocument = `mutation CreateUser ($input: CreateUserInput!) {
	createUser(input: $input) {
		user {
			authProvider
			avatarLocalFileID
			avatarRemoteURL
			avatarUpdatedAt
			createdAt
			createdBy
			displayID
			displayName
			email
			firstName
			id
			lastLoginProvider
			lastName
			lastSeen
			role
			sub
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateUser(ctx context.Context, input CreateUserInput, interceptors ...clientv2.RequestInterceptor) (*CreateUser, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateUser
	if err := c.Client.Post(ctx, "CreateUser", CreateUserDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteUserDocument = `mutation DeleteUser ($deleteUserId: ID!) {
	deleteUser(id: $deleteUserId) {
		deletedID
	}
}
`

func (c *Client) DeleteUser(ctx context.Context, deleteUserID string, interceptors ...clientv2.RequestInterceptor) (*DeleteUser, error) {
	vars := map[string]any{
		"deleteUserId": deleteUserID,
	}

	var res DeleteUser
	if err := c.Client.Post(ctx, "DeleteUser", DeleteUserDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllUsersDocument = `query GetAllUsers {
	users {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				authProvider
				avatarLocalFileID
				avatarRemoteURL
				avatarUpdatedAt
				createdAt
				createdBy
				displayID
				displayName
				email
				firstName
				id
				lastLoginProvider
				lastName
				lastSeen
				role
				sub
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllUsers(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUsers, error) {
	vars := map[string]any{}

	var res GetAllUsers
	if err := c.Client.Post(ctx, "GetAllUsers", GetAllUsersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSelfDocument = `query GetSelf {
	self {
		authProvider
		displayID
		displayName
		email
		firstName
		id
		lastName
		lastSeen
		sub
		tags
		setting {
			defaultOrg {
				id
				name
				personalOrg
			}
			emailConfirmed
			locked
			silencedAt
			status
			suspendedAt
			tags
		}
		tfaSettings {
			edges {
				node {
					totpAllowed
					verified
				}
			}
		}
	}
}
`

func (c *Client) GetSelf(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetSelf, error) {
	vars := map[string]any{}

	var res GetSelf
	if err := c.Client.Post(ctx, "GetSelf", GetSelfDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserByIDDocument = `query GetUserByID ($userId: ID!) {
	user(id: $userId) {
		authProvider
		avatarLocalFileID
		avatarRemoteURL
		avatarUpdatedAt
		createdAt
		createdBy
		displayID
		displayName
		email
		firstName
		id
		lastLoginProvider
		lastName
		lastSeen
		role
		sub
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetUserByID(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor) (*GetUserByID, error) {
	vars := map[string]any{
		"userId": userID,
	}

	var res GetUserByID
	if err := c.Client.Post(ctx, "GetUserByID", GetUserByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUsersDocument = `query GetUsers ($first: Int, $last: Int, $where: UserWhereInput) {
	users(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				authProvider
				avatarLocalFileID
				avatarRemoteURL
				avatarUpdatedAt
				createdAt
				createdBy
				displayID
				displayName
				email
				firstName
				id
				lastLoginProvider
				lastName
				lastSeen
				role
				sub
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetUsers(ctx context.Context, first *int64, last *int64, where *UserWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUsers, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetUsers
	if err := c.Client.Post(ctx, "GetUsers", GetUsersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateUserDocument = `mutation UpdateUser ($updateUserId: ID!, $input: UpdateUserInput!, $avatarFile: Upload) {
	updateUser(id: $updateUserId, input: $input, avatarFile: $avatarFile) {
		user {
			authProvider
			avatarLocalFileID
			avatarRemoteURL
			avatarUpdatedAt
			createdAt
			createdBy
			displayID
			displayName
			email
			firstName
			id
			lastLoginProvider
			lastName
			lastSeen
			role
			sub
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateUser(ctx context.Context, updateUserID string, input UpdateUserInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateUser, error) {
	vars := map[string]any{
		"updateUserId": updateUserID,
		"input":        input,
		"avatarFile":   avatarFile,
	}

	var res UpdateUser
	if err := c.Client.Post(ctx, "UpdateUser", UpdateUserDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllUserHistoriesDocument = `query GetAllUserHistories {
	userHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				authProvider
				avatarLocalFileID
				avatarRemoteURL
				avatarUpdatedAt
				createdAt
				createdBy
				displayID
				displayName
				email
				firstName
				historyTime
				id
				lastLoginProvider
				lastName
				lastSeen
				operation
				ref
				role
				sub
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllUserHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserHistories, error) {
	vars := map[string]any{}

	var res GetAllUserHistories
	if err := c.Client.Post(ctx, "GetAllUserHistories", GetAllUserHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserHistoriesDocument = `query GetUserHistories ($first: Int, $last: Int, $where: UserHistoryWhereInput) {
	userHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				authProvider
				avatarLocalFileID
				avatarRemoteURL
				avatarUpdatedAt
				createdAt
				createdBy
				displayID
				displayName
				email
				firstName
				historyTime
				id
				lastLoginProvider
				lastName
				lastSeen
				operation
				ref
				role
				sub
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetUserHistories(ctx context.Context, first *int64, last *int64, where *UserHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetUserHistories
	if err := c.Client.Post(ctx, "GetUserHistories", GetUserHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateUserSettingDocument = `mutation CreateUserSetting ($input: CreateUserSettingInput!) {
	createUserSetting(input: $input) {
		userSetting {
			createdAt
			createdBy
			emailConfirmed
			id
			isTfaEnabled
			isWebauthnAllowed
			locked
			silencedAt
			status
			suspendedAt
			tags
			updatedAt
			updatedBy
			userID
		}
	}
}
`

func (c *Client) CreateUserSetting(ctx context.Context, input CreateUserSettingInput, interceptors ...clientv2.RequestInterceptor) (*CreateUserSetting, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateUserSetting
	if err := c.Client.Post(ctx, "CreateUserSetting", CreateUserSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllUserSettingsDocument = `query GetAllUserSettings {
	userSettings {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				emailConfirmed
				id
				isTfaEnabled
				isWebauthnAllowed
				locked
				silencedAt
				status
				suspendedAt
				tags
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetAllUserSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserSettings, error) {
	vars := map[string]any{}

	var res GetAllUserSettings
	if err := c.Client.Post(ctx, "GetAllUserSettings", GetAllUserSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserSettingByIDDocument = `query GetUserSettingByID ($userSettingId: ID!) {
	userSetting(id: $userSettingId) {
		createdAt
		createdBy
		emailConfirmed
		id
		isTfaEnabled
		isWebauthnAllowed
		locked
		silencedAt
		status
		suspendedAt
		tags
		updatedAt
		updatedBy
		userID
	}
}
`

func (c *Client) GetUserSettingByID(ctx context.Context, userSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetUserSettingByID, error) {
	vars := map[string]any{
		"userSettingId": userSettingID,
	}

	var res GetUserSettingByID
	if err := c.Client.Post(ctx, "GetUserSettingByID", GetUserSettingByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserSettingsDocument = `query GetUserSettings ($first: Int, $last: Int, $where: UserSettingWhereInput) {
	userSettings(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				emailConfirmed
				id
				isTfaEnabled
				isWebauthnAllowed
				locked
				silencedAt
				status
				suspendedAt
				tags
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetUserSettings(ctx context.Context, first *int64, last *int64, where *UserSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserSettings, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetUserSettings
	if err := c.Client.Post(ctx, "GetUserSettings", GetUserSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateUserSettingDocument = `mutation UpdateUserSetting ($updateUserSettingId: ID!, $input: UpdateUserSettingInput!) {
	updateUserSetting(id: $updateUserSettingId, input: $input) {
		userSetting {
			createdAt
			createdBy
			emailConfirmed
			id
			isTfaEnabled
			isWebauthnAllowed
			locked
			silencedAt
			status
			suspendedAt
			tags
			updatedAt
			updatedBy
			userID
		}
	}
}
`

func (c *Client) UpdateUserSetting(ctx context.Context, updateUserSettingID string, input UpdateUserSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUserSetting, error) {
	vars := map[string]any{
		"updateUserSettingId": updateUserSettingID,
		"input":               input,
	}

	var res UpdateUserSetting
	if err := c.Client.Post(ctx, "UpdateUserSetting", UpdateUserSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllUserSettingHistoriesDocument = `query GetAllUserSettingHistories {
	userSettingHistories {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				emailConfirmed
				historyTime
				id
				isTfaEnabled
				isWebauthnAllowed
				locked
				operation
				ref
				silencedAt
				status
				suspendedAt
				tags
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetAllUserSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserSettingHistories, error) {
	vars := map[string]any{}

	var res GetAllUserSettingHistories
	if err := c.Client.Post(ctx, "GetAllUserSettingHistories", GetAllUserSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserSettingHistoriesDocument = `query GetUserSettingHistories ($first: Int, $last: Int, $where: UserSettingHistoryWhereInput) {
	userSettingHistories(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				emailConfirmed
				historyTime
				id
				isTfaEnabled
				isWebauthnAllowed
				locked
				operation
				ref
				silencedAt
				status
				suspendedAt
				tags
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetUserSettingHistories(ctx context.Context, first *int64, last *int64, where *UserSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserSettingHistories, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetUserSettingHistories
	if err := c.Client.Post(ctx, "GetUserSettingHistories", GetUserSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteWebauthnDocument = `mutation DeleteWebauthn ($deleteWebauthnId: ID!) {
	deleteWebauthn(id: $deleteWebauthnId) {
		deletedID
	}
}
`

func (c *Client) DeleteWebauthn(ctx context.Context, deleteWebauthnID string, interceptors ...clientv2.RequestInterceptor) (*DeleteWebauthn, error) {
	vars := map[string]any{
		"deleteWebauthnId": deleteWebauthnID,
	}

	var res DeleteWebauthn
	if err := c.Client.Post(ctx, "DeleteWebauthn", DeleteWebauthnDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllWebauthnsDocument = `query GetAllWebauthns {
	webauthns {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				backupEligible
				backupState
				createdAt
				createdBy
				id
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllWebauthns(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllWebauthns, error) {
	vars := map[string]any{}

	var res GetAllWebauthns
	if err := c.Client.Post(ctx, "GetAllWebauthns", GetAllWebauthnsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	CreateBulkCSVActionPlanDocument:                   "CreateBulkCSVActionPlan",
	CreateBulkActionPlanDocument:                      "CreateBulkActionPlan",
	CreateActionPlanDocument:                          "CreateActionPlan",
	DeleteActionPlanDocument:                          "DeleteActionPlan",
	GetAllActionPlansDocument:                         "GetAllActionPlans",
	GetActionPlanByIDDocument:                         "GetActionPlanByID",
	GetActionPlansDocument:                            "GetActionPlans",
	UpdateActionPlanDocument:                          "UpdateActionPlan",
	GetAllActionPlanHistoriesDocument:                 "GetAllActionPlanHistories",
	GetActionPlanHistoriesDocument:                    "GetActionPlanHistories",
	CreateAPITokenDocument:                            "CreateAPIToken",
	CreateBulkAPITokenDocument:                        "CreateBulkAPIToken",
	CreateBulkCSVAPITokenDocument:                     "CreateBulkCSVAPIToken",
	DeleteAPITokenDocument:                            "DeleteAPIToken",
	GetAllAPITokensDocument:                           "GetAllAPITokens",
	GetAPITokenByIDDocument:                           "GetAPITokenByID",
	GetAPITokensDocument:                              "GetAPITokens",
	UpdateAPITokenDocument:                            "UpdateAPIToken",
	CreateBulkCSVAssetDocument:                        "CreateBulkCSVAsset",
	CreateBulkAssetDocument:                           "CreateBulkAsset",
	CreateAssetDocument:                               "CreateAsset",
	DeleteAssetDocument:                               "DeleteAsset",
	GetAllAssetsDocument:                              "GetAllAssets",
	GetAssetByIDDocument:                              "GetAssetByID",
	GetAssetsDocument:                                 "GetAssets",
	UpdateAssetDocument:                               "UpdateAsset",
	GetAllAssetHistoriesDocument:                      "GetAllAssetHistories",
	GetAssetHistoriesDocument:                         "GetAssetHistories",
	CreateBulkCSVContactDocument:                      "CreateBulkCSVContact",
	CreateBulkContactDocument:                         "CreateBulkContact",
	CreateContactDocument:                             "CreateContact",
	DeleteContactDocument:                             "DeleteContact",
	GetAllContactsDocument:                            "GetAllContacts",
	GetContactByIDDocument:                            "GetContactByID",
	GetContactsDocument:                               "GetContacts",
	UpdateContactDocument:                             "UpdateContact",
	GetAllContactHistoriesDocument:                    "GetAllContactHistories",
	GetContactHistoriesDocument:                       "GetContactHistories",
	CreateBulkCSVControlDocument:                      "CreateBulkCSVControl",
	CreateBulkControlDocument:                         "CreateBulkControl",
	CreateControlDocument:                             "CreateControl",
	DeleteControlDocument:                             "DeleteControl",
	GetAllControlsDocument:                            "GetAllControls",
	GetControlByIDDocument:                            "GetControlByID",
	GetControlsDocument:                               "GetControls",
	UpdateControlDocument:                             "UpdateControl",
	CreateControlsByCloneDocument:                     "CreateControlsByClone",
	CreateControlsByCloneReturnIDDocument:             "CreateControlsByCloneReturnID",
	GetControlCategoriesDocument:                      "GetControlCategories",
	GetControlCategoriesWithFrameworkDocument:         "GetControlCategoriesWithFramework",
	GetControlsGroupByCategoryDocument:                "GetControlsGroupByCategory",
	GetControlSubcategoriesDocument:                   "GetControlSubcategories",
	GetControlSubcategoriesWithFrameworkDocument:      "GetControlSubcategoriesWithFramework",
	GetAllControlHistoriesDocument:                    "GetAllControlHistories",
	GetControlHistoriesDocument:                       "GetControlHistories",
	CreateBulkCSVControlImplementationDocument:        "CreateBulkCSVControlImplementation",
	CreateBulkControlImplementationDocument:           "CreateBulkControlImplementation",
	CreateControlImplementationDocument:               "CreateControlImplementation",
	DeleteControlImplementationDocument:               "DeleteControlImplementation",
	GetAllControlImplementationsDocument:              "GetAllControlImplementations",
	GetControlImplementationByIDDocument:              "GetControlImplementationByID",
	GetControlImplementationsDocument:                 "GetControlImplementations",
	UpdateControlImplementationDocument:               "UpdateControlImplementation",
	GetAllControlImplementationHistoriesDocument:      "GetAllControlImplementationHistories",
	GetControlImplementationHistoriesDocument:         "GetControlImplementationHistories",
	CreateBulkControlObjectiveDocument:                "CreateBulkControlObjective",
	CreateBulkCSVControlObjectiveDocument:             "CreateBulkCSVControlObjective",
	CreateControlObjectiveDocument:                    "CreateControlObjective",
	DeleteControlObjectiveDocument:                    "DeleteControlObjective",
	GetAllControlObjectivesDocument:                   "GetAllControlObjectives",
	GetControlObjectiveByIDDocument:                   "GetControlObjectiveByID",
	GetControlObjectivesDocument:                      "GetControlObjectives",
	UpdateControlObjectiveDocument:                    "UpdateControlObjective",
	GetAllControlObjectiveHistoriesDocument:           "GetAllControlObjectiveHistories",
	GetControlObjectiveHistoriesDocument:              "GetControlObjectiveHistories",
	CreateBulkCSVCustomDomainDocument:                 "CreateBulkCSVCustomDomain",
	CreateBulkCustomDomainDocument:                    "CreateBulkCustomDomain",
	CreateCustomDomainDocument:                        "CreateCustomDomain",
	DeleteCustomDomainDocument:                        "DeleteCustomDomain",
	GetAllCustomDomainsDocument:                       "GetAllCustomDomains",
	GetCustomDomainByIDDocument:                       "GetCustomDomainByID",
	GetCustomDomainsDocument:                          "GetCustomDomains",
	UpdateCustomDomainDocument:                        "UpdateCustomDomain",
	GetAllCustomDomainHistoriesDocument:               "GetAllCustomDomainHistories",
	GetCustomDomainHistoriesDocument:                  "GetCustomDomainHistories",
	CreateBulkCSVDNSVerificationDocument:              "CreateBulkCSVDNSVerification",
	CreateBulkDNSVerificationDocument:                 "CreateBulkDNSVerification",
	CreateDNSVerificationDocument:                     "CreateDNSVerification",
	DeleteDNSVerificationDocument:                     "DeleteDNSVerification",
	GetAllDNSVerificationsDocument:                    "GetAllDNSVerifications",
	GetDNSVerificationByIDDocument:                    "GetDNSVerificationByID",
	GetDNSVerificationsDocument:                       "GetDNSVerifications",
	UpdateDNSVerificationDocument:                     "UpdateDNSVerification",
	GetAllDNSVerificationHistoriesDocument:            "GetAllDNSVerificationHistories",
	GetDNSVerificationHistoriesDocument:               "GetDNSVerificationHistories",
	CreateBulkCSVDocumentDataDocument:                 "CreateBulkCSVDocumentData",
	CreateBulkDocumentDataDocument:                    "CreateBulkDocumentData",
	CreateDocumentDataDocument:                        "CreateDocumentData",
	DeleteDocumentDataDocument:                        "DeleteDocumentData",
	GetDocumentDataByIDDocument:                       "GetDocumentDataByID",
	UpdateDocumentDataDocument:                        "UpdateDocumentData",
	GetAllDocumentDataHistoriesDocument:               "GetAllDocumentDataHistories",
	GetDocumentDataHistoriesDocument:                  "GetDocumentDataHistories",
	CreateBulkCSVEntityDocument:                       "CreateBulkCSVEntity",
	CreateBulkEntityDocument:                          "CreateBulkEntity",
	CreateEntityDocument:                              "CreateEntity",
	DeleteEntityDocument:                              "DeleteEntity",
	GetAllEntitiesDocument:                            "GetAllEntities",
	GetEntitiesDocument:                               "GetEntities",
	GetEntityByIDDocument:                             "GetEntityByID",
	UpdateEntityDocument:                              "UpdateEntity",
	GetAllEntityHistoriesDocument:                     "GetAllEntityHistories",
	GetEntityHistoriesDocument:                        "GetEntityHistories",
	CreateBulkCSVEntityTypeDocument:                   "CreateBulkCSVEntityType",
	CreateBulkEntityTypeDocument:                      "CreateBulkEntityType",
	CreateEntityTypeDocument:                          "CreateEntityType",
	DeleteEntityTypeDocument:                          "DeleteEntityType",
	GetAllEntityTypesDocument:                         "GetAllEntityTypes",
	GetEntityTypeByIDDocument:                         "GetEntityTypeByID",
	GetEntityTypesDocument:                            "GetEntityTypes",
	UpdateEntityTypeDocument:                          "UpdateEntityType",
	GetAllEntityTypeHistoriesDocument:                 "GetAllEntityTypeHistories",
	GetEntityTypeHistoriesDocument:                    "GetEntityTypeHistories",
	CreateBulkCSVEventDocument:                        "CreateBulkCSVEvent",
	CreateBulkEventDocument:                           "CreateBulkEvent",
	CreateEventDocument:                               "CreateEvent",
	DeleteEventDocument:                               "DeleteEvent",
	GetAllEventsDocument:                              "GetAllEvents",
	GetEventByIDDocument:                              "GetEventByID",
	GetEventsDocument:                                 "GetEvents",
	UpdateEventDocument:                               "UpdateEvent",
	CreateEvidenceDocument:                            "CreateEvidence",
	DeleteEvidenceDocument:                            "DeleteEvidence",
	GetAllEvidencesDocument:                           "GetAllEvidences",
	GetEvidenceByIDDocument:                           "GetEvidenceByID",
	GetEvidencesDocument:                              "GetEvidences",
	UpdateEvidenceDocument:                            "UpdateEvidence",
	GetAllEvidenceHistoriesDocument:                   "GetAllEvidenceHistories",
	GetEvidenceHistoriesDocument:                      "GetEvidenceHistories",
	CreateExportDocument:                              "CreateExport",
	GetAllExportsDocument:                             "GetAllExports",
	GetExportByIDDocument:                             "GetExportByID",
	GetExportsDocument:                                "GetExports",
	UpdateExportDocument:                              "UpdateExport",
	DeleteExportDocument:                              "DeleteExport",
	DeleteBulkExportDocument:                          "DeleteBulkExport",
	DeleteFileDocument:                                "DeleteFile",
	GetAllFilesDocument:                               "GetAllFiles",
	GetFileByIDDocument:                               "GetFileByID",
	GetFilesDocument:                                  "GetFiles",
	GetAllFileHistoriesDocument:                       "GetAllFileHistories",
	GetFileHistoriesDocument:                          "GetFileHistories",
	CreateBulkCSVGroupDocument:                        "CreateBulkCSVGroup",
	CreateBulkGroupDocument:                           "CreateBulkGroup",
	CreateGroupDocument:                               "CreateGroup",
	DeleteGroupDocument:                               "DeleteGroup",
	GetAllGroupsDocument:                              "GetAllGroups",
	GetGroupByIDDocument:                              "GetGroupByID",
	GetGroupsDocument:                                 "GetGroups",
	UpdateGroupDocument:                               "UpdateGroup",
	GetAllGroupHistoriesDocument:                      "GetAllGroupHistories",
	GetGroupHistoriesDocument:                         "GetGroupHistories",
	CreateBulkCSVGroupMembershipDocument:              "CreateBulkCSVGroupMembership",
	CreateBulkGroupMembershipDocument:                 "CreateBulkGroupMembership",
	CreateGroupMembershipDocument:                     "CreateGroupMembership",
	DeleteGroupMembershipDocument:                     "DeleteGroupMembership",
	GetAllGroupMembershipsDocument:                    "GetAllGroupMemberships",
	GetGroupMembershipByIDDocument:                    "GetGroupMembershipByID",
	GetGroupMembershipsDocument:                       "GetGroupMemberships",
	UpdateGroupMembershipDocument:                     "UpdateGroupMembership",
	GetAllGroupMembershipHistoriesDocument:            "GetAllGroupMembershipHistories",
	GetGroupMembershipHistoriesDocument:               "GetGroupMembershipHistories",
	CreateBulkCSVGroupSettingDocument:                 "CreateBulkCSVGroupSetting",
	CreateBulkGroupSettingDocument:                    "CreateBulkGroupSetting",
	CreateGroupSettingDocument:                        "CreateGroupSetting",
	DeleteGroupSettingDocument:                        "DeleteGroupSetting",
	GetAllGroupSettingsDocument:                       "GetAllGroupSettings",
	GetGroupSettingByIDDocument:                       "GetGroupSettingByID",
	GetGroupSettingsDocument:                          "GetGroupSettings",
	UpdateGroupSettingDocument:                        "UpdateGroupSetting",
	GetAllGroupSettingHistoriesDocument:               "GetAllGroupSettingHistories",
	GetGroupSettingHistoriesDocument:                  "GetGroupSettingHistories",
	CreateBulkCSVHushDocument:                         "CreateBulkCSVHush",
	CreateBulkHushDocument:                            "CreateBulkHush",
	CreateHushDocument:                                "CreateHush",
	DeleteHushDocument:                                "DeleteHush",
	GetAllHushesDocument:                              "GetAllHushes",
	GetHushByIDDocument:                               "GetHushByID",
	GetHushesDocument:                                 "GetHushes",
	UpdateHushDocument:                                "UpdateHush",
	GetAllHushHistoriesDocument:                       "GetAllHushHistories",
	GetHushHistoriesDocument:                          "GetHushHistories",
	DeleteIntegrationDocument:                         "DeleteIntegration",
	GetAllIntegrationsDocument:                        "GetAllIntegrations",
	GetIntegrationByIDDocument:                        "GetIntegrationByID",
	GetIntegrationsDocument:                           "GetIntegrations",
	GetAllIntegrationHistoriesDocument:                "GetAllIntegrationHistories",
	GetIntegrationHistoriesDocument:                   "GetIntegrationHistories",
	CreateBulkCSVInternalPolicyDocument:               "CreateBulkCSVInternalPolicy",
	CreateBulkInternalPolicyDocument:                  "CreateBulkInternalPolicy",
	CreateInternalPolicyDocument:                      "CreateInternalPolicy",
	DeleteInternalPolicyDocument:                      "DeleteInternalPolicy",
	GetAllInternalPoliciesDocument:                    "GetAllInternalPolicies",
	GetInternalPolicyByIDDocument:                     "GetInternalPolicyByID",
	GetInternalPoliciesDocument:                       "GetInternalPolicies",
	UpdateInternalPolicyDocument:                      "UpdateInternalPolicy",
	GetAllInternalPolicyHistoriesDocument:             "GetAllInternalPolicyHistories",
	GetInternalPolicyHistoriesDocument:                "GetInternalPolicyHistories",
	CreateBulkCSVInviteDocument:                       "CreateBulkCSVInvite",
	CreateBulkInviteDocument:                          "CreateBulkInvite",
	CreateInviteDocument:                              "CreateInvite",
	DeleteInviteDocument:                              "DeleteInvite",
	GetAllInvitesDocument:                             "GetAllInvites",
	GetInviteByIDDocument:                             "GetInviteByID",
	GetInvitesDocument:                                "GetInvites",
	UpdateInviteDocument:                              "UpdateInvite",
	CreateJobResultDocument:                           "CreateJobResult",
	DeleteJobResultDocument:                           "DeleteJobResult",
	GetAllJobResultsDocument:                          "GetAllJobResults",
	GetJobResultByIDDocument:                          "GetJobResultByID",
	GetJobResultsDocument:                             "GetJobResults",
	UpdateJobResultDocument:                           "UpdateJobResult",
	CreateJobRunnerDocument:                           "CreateJobRunner",
	DeleteJobRunnerDocument:                           "DeleteJobRunner",
	GetAllJobRunnersDocument:                          "GetAllJobRunners",
	GetJobRunnerByIDDocument:                          "GetJobRunnerByID",
	GetJobRunnersDocument:                             "GetJobRunners",
	UpdateJobRunnerDocument:                           "UpdateJobRunner",
	CreateJobRunnerRegistrationTokenDocument:          "CreateJobRunnerRegistrationToken",
	DeleteJobRunnerRegistrationTokenDocument:          "DeleteJobRunnerRegistrationToken",
	GetAllJobRunnerRegistrationTokensDocument:         "GetAllJobRunnerRegistrationTokens",
	GetJobRunnerRegistrationTokenByIDDocument:         "GetJobRunnerRegistrationTokenByID",
	GetJobRunnerRegistrationTokensDocument:            "GetJobRunnerRegistrationTokens",
	CreateJobRunnerTokenDocument:                      "CreateJobRunnerToken",
	DeleteJobRunnerTokenDocument:                      "DeleteJobRunnerToken",
	GetAllJobRunnerTokensDocument:                     "GetAllJobRunnerTokens",
	GetJobRunnerTokenByIDDocument:                     "GetJobRunnerTokenByID",
	GetJobRunnerTokensDocument:                        "GetJobRunnerTokens",
	CreateBulkCSVJobTemplateDocument:                  "CreateBulkCSVJobTemplate",
	CreateBulkJobTemplateDocument:                     "CreateBulkJobTemplate",
	CreateJobTemplateDocument:                         "CreateJobTemplate",
	DeleteJobTemplateDocument:                         "DeleteJobTemplate",
	GetAllJobTemplatesDocument:                        "GetAllJobTemplates",
	GetJobTemplateByIDDocument:                        "GetJobTemplateByID",
	GetJobTemplatesDocument:                           "GetJobTemplates",
	UpdateJobTemplateDocument:                         "UpdateJobTemplate",
	GetAllJobTemplateHistoriesDocument:                "GetAllJobTemplateHistories",
	GetJobTemplateHistoriesDocument:                   "GetJobTemplateHistories",
	CreateBulkCSVMappableDomainDocument:               "CreateBulkCSVMappableDomain",
	CreateBulkMappableDomainDocument:                  "CreateBulkMappableDomain",
	CreateMappableDomainDocument:                      "CreateMappableDomain",
	DeleteMappableDomainDocument:                      "DeleteMappableDomain",
	GetAllMappableDomainsDocument:                     "GetAllMappableDomains",
	GetMappableDomainByIDDocument:                     "GetMappableDomainByID",
	GetMappableDomainsDocument:                        "GetMappableDomains",
	UpdateMappableDomainDocument:                      "UpdateMappableDomain",
	GetAllMappableDomainHistoriesDocument:             "GetAllMappableDomainHistories",
	GetMappableDomainHistoriesDocument:                "GetMappableDomainHistories",
	CreateBulkCSVMappedControlDocument:                "CreateBulkCSVMappedControl",
	CreateBulkMappedControlDocument:                   "CreateBulkMappedControl",
	CreateMappedControlDocument:                       "CreateMappedControl",
	DeleteMappedControlDocument:                       "DeleteMappedControl",
	GetAllMappedControlsDocument:                      "GetAllMappedControls",
	GetMappedControlByIDDocument:                      "GetMappedControlByID",
	GetMappedControlsDocument:                         "GetMappedControls",
	UpdateMappedControlDocument:                       "UpdateMappedControl",
	GetAllMappedControlHistoriesDocument:              "GetAllMappedControlHistories",
	GetMappedControlHistoriesDocument:                 "GetMappedControlHistories",
	CreateBulkCSVNarrativeDocument:                    "CreateBulkCSVNarrative",
	CreateBulkNarrativeDocument:                       "CreateBulkNarrative",
	CreateNarrativeDocument:                           "CreateNarrative",
	DeleteNarrativeDocument:                           "DeleteNarrative",
	GetAllNarrativesDocument:                          "GetAllNarratives",
	GetNarrativeByIDDocument:                          "GetNarrativeByID",
	GetNarrativesDocument:                             "GetNarratives",
	UpdateNarrativeDocument:                           "UpdateNarrative",
	GetAllNarrativeHistoriesDocument:                  "GetAllNarrativeHistories",
	GetNarrativeHistoriesDocument:                     "GetNarrativeHistories",
	GetAllNoteHistoriesDocument:                       "GetAllNoteHistories",
	GetNoteHistoriesDocument:                          "GetNoteHistories",
	CreateOnboardingDocument:                          "CreateOnboarding",
	CreateOrganizationDocument:                        "CreateOrganization",
	DeleteOrganizationDocument:                        "DeleteOrganization",
	GetAllOrganizationsDocument:                       "GetAllOrganizations",
	GetOrganizationByIDDocument:                       "GetOrganizationByID",
	GetOrganizationsDocument:                          "GetOrganizations",
	UpdateOrganizationDocument:                        "UpdateOrganization",
	GetAllOrganizationHistoriesDocument:               "GetAllOrganizationHistories",
	GetOrganizationHistoriesDocument:                  "GetOrganizationHistories",
	CreateBulkCSVOrganizationSettingDocument:          "CreateBulkCSVOrganizationSetting",
	CreateBulkOrganizationSettingDocument:             "CreateBulkOrganizationSetting",
	CreateOrganizationSettingDocument:                 "CreateOrganizationSetting",
	DeleteOrganizationSettingDocument:                 "DeleteOrganizationSetting",
	GetAllOrganizationSettingsDocument:                "GetAllOrganizationSettings",
	GetOrganizationSettingByIDDocument:                "GetOrganizationSettingByID",
	GetOrganizationSettingsDocument:                   "GetOrganizationSettings",
	UpdateOrganizationSettingDocument:                 "UpdateOrganizationSetting",
	GetAllOrganizationSettingHistoriesDocument:        "GetAllOrganizationSettingHistories",
	GetOrganizationSettingHistoriesDocument:           "GetOrganizationSettingHistories",
	CreateBulkCSVOrgMembershipDocument:                "CreateBulkCSVOrgMembership",
	CreateBulkOrgMembershipDocument:                   "CreateBulkOrgMembership",
	CreateOrgMembershipDocument:                       "CreateOrgMembership",
	DeleteOrgMembershipDocument:                       "DeleteOrgMembership",
	GetAllOrgMembershipsDocument:                      "GetAllOrgMemberships",
	GetOrgMembershipByIDDocument:                      "GetOrgMembershipByID",
	GetOrgMembershipsDocument:                         "GetOrgMemberships",
	UpdateOrgMembershipDocument:                       "UpdateOrgMembership",
	GetAllOrgMembershipHistoriesDocument:              "GetAllOrgMembershipHistories",
	GetOrgMembershipHistoriesDocument:                 "GetOrgMembershipHistories",
	GetAllOrgSubscriptionsDocument:                    "GetAllOrgSubscriptions",
	GetOrgSubscriptionByIDDocument:                    "GetOrgSubscriptionByID",
	GetOrgSubscriptionsDocument:                       "GetOrgSubscriptions",
	GetAllOrgSubscriptionHistoriesDocument:            "GetAllOrgSubscriptionHistories",
	GetOrgSubscriptionHistoriesDocument:               "GetOrgSubscriptionHistories",
	CreatePersonalAccessTokenDocument:                 "CreatePersonalAccessToken",
	DeletePersonalAccessTokenDocument:                 "DeletePersonalAccessToken",
	GetAllPersonalAccessTokensDocument:                "GetAllPersonalAccessTokens",
	GetPersonalAccessTokenByIDDocument:                "GetPersonalAccessTokenByID",
	GetPersonalAccessTokensDocument:                   "GetPersonalAccessTokens",
	UpdatePersonalAccessTokenDocument:                 "UpdatePersonalAccessToken",
	CreateBulkCSVProcedureDocument:                    "CreateBulkCSVProcedure",
	CreateBulkProcedureDocument:                       "CreateBulkProcedure",
	CreateProcedureDocument:                           "CreateProcedure",
	CreateUploadProcedureDocument:                     "CreateUploadProcedure",
	DeleteProcedureDocument:                           "DeleteProcedure",
	GetAllProceduresDocument:                          "GetAllProcedures",
	GetProcedureByIDDocument:                          "GetProcedureByID",
	GetProceduresDocument:                             "GetProcedures",
	UpdateProcedureDocument:                           "UpdateProcedure",
	GetAllProcedureHistoriesDocument:                  "GetAllProcedureHistories",
	GetProcedureHistoriesDocument:                     "GetProcedureHistories",
	CreateBulkCSVProgramDocument:                      "CreateBulkCSVProgram",
	CreateBulkProgramDocument:                         "CreateBulkProgram",
	CreateProgramDocument:                             "CreateProgram",
	DeleteProgramDocument:                             "DeleteProgram",
	GetAllProgramsDocument:                            "GetAllPrograms",
	GetProgramByIDDocument:                            "GetProgramByID",
	GetProgramsDocument:                               "GetPrograms",
	UpdateProgramDocument:                             "UpdateProgram",
	GetAllProgramHistoriesDocument:                    "GetAllProgramHistories",
	GetProgramHistoriesDocument:                       "GetProgramHistories",
	CreateBulkCSVProgramMembershipDocument:            "CreateBulkCSVProgramMembership",
	CreateBulkProgramMembershipDocument:               "CreateBulkProgramMembership",
	CreateProgramMembershipDocument:                   "CreateProgramMembership",
	DeleteProgramMembershipDocument:                   "DeleteProgramMembership",
	GetAllProgramMembershipsDocument:                  "GetAllProgramMemberships",
	GetProgramMembershipByIDDocument:                  "GetProgramMembershipByID",
	GetProgramMembershipsDocument:                     "GetProgramMemberships",
	UpdateProgramMembershipDocument:                   "UpdateProgramMembership",
	GetAllProgramMembershipHistoriesDocument:          "GetAllProgramMembershipHistories",
	GetProgramMembershipHistoriesDocument:             "GetProgramMembershipHistories",
	CreateBulkCSVRiskDocument:                         "CreateBulkCSVRisk",
	CreateBulkRiskDocument:                            "CreateBulkRisk",
	CreateRiskDocument:                                "CreateRisk",
	DeleteRiskDocument:                                "DeleteRisk",
	GetAllRisksDocument:                               "GetAllRisks",
	GetRiskByIDDocument:                               "GetRiskByID",
	GetRisksDocument:                                  "GetRisks",
	UpdateRiskDocument:                                "UpdateRisk",
	GetAllRiskHistoriesDocument:                       "GetAllRiskHistories",
	GetRiskHistoriesDocument:                          "GetRiskHistories",
	CreateBulkCSVScanDocument:                         "CreateBulkCSVScan",
	CreateBulkScanDocument:                            "CreateBulkScan",
	CreateScanDocument:                                "CreateScan",
	DeleteScanDocument:                                "DeleteScan",
	GetAllScansDocument:                               "GetAllScans",
	GetScanByIDDocument:                               "GetScanByID",
	GetScansDocument:                                  "GetScans",
	UpdateScanDocument:                                "UpdateScan",
	GetAllScanHistoriesDocument:                       "GetAllScanHistories",
	GetScanHistoriesDocument:                          "GetScanHistories",
	CreateBulkCSVScheduledJobDocument:                 "CreateBulkCSVScheduledJob",
	CreateBulkScheduledJobDocument:                    "CreateBulkScheduledJob",
	CreateScheduledJobDocument:                        "CreateScheduledJob",
	DeleteScheduledJobDocument:                        "DeleteScheduledJob",
	GetAllScheduledJobsDocument:                       "GetAllScheduledJobs",
	GetScheduledJobByIDDocument:                       "GetScheduledJobByID",
	GetScheduledJobsDocument:                          "GetScheduledJobs",
	UpdateScheduledJobDocument:                        "UpdateScheduledJob",
	GetAllScheduledJobHistoriesDocument:               "GetAllScheduledJobHistories",
	GetScheduledJobHistoriesDocument:                  "GetScheduledJobHistories",
	CreateScheduledJobRunDocument:                     "CreateScheduledJobRun",
	DeleteScheduledJobRunDocument:                     "DeleteScheduledJobRun",
	GetAllScheduledJobRunsDocument:                    "GetAllScheduledJobRuns",
	GetScheduledJobRunByIDDocument:                    "GetScheduledJobRunByID",
	GetScheduledJobRunsDocument:                       "GetScheduledJobRuns",
	UpdateScheduledJobRunDocument:                     "UpdateScheduledJobRun",
	GlobalSearchDocument:                              "GlobalSearch",
	CreateStandardDocument:                            "CreateStandard",
	DeleteStandardDocument:                            "DeleteStandard",
	GetAllStandardsDocument:                           "GetAllStandards",
	GetStandardByIDDocument:                           "GetStandardByID",
	GetStandardsDocument:                              "GetStandards",
	UpdateStandardDocument:                            "UpdateStandard",
	GetAllStandardHistoriesDocument:                   "GetAllStandardHistories",
	GetStandardHistoriesDocument:                      "GetStandardHistories",
	CreateBulkCSVSubcontrolDocument:                   "CreateBulkCSVSubcontrol",
	CreateBulkSubcontrolDocument:                      "CreateBulkSubcontrol",
	CreateSubcontrolDocument:                          "CreateSubcontrol",
	DeleteSubcontrolDocument:                          "DeleteSubcontrol",
	GetAllSubcontrolsDocument:                         "GetAllSubcontrols",
	GetSubcontrolByIDDocument:                         "GetSubcontrolByID",
	GetSubcontrolsDocument:                            "GetSubcontrols",
	UpdateSubcontrolDocument:                          "UpdateSubcontrol",
	GetAllSubcontrolHistoriesDocument:                 "GetAllSubcontrolHistories",
	GetSubcontrolHistoriesDocument:                    "GetSubcontrolHistories",
	CreateSubprocessorDocument:                        "CreateSubprocessor",
	DeleteSubprocessorDocument:                        "DeleteSubprocessor",
	GetAllSubprocessorsDocument:                       "GetAllSubprocessors",
	GetSubprocessorByIDDocument:                       "GetSubprocessorByID",
	GetSubprocessorsDocument:                          "GetSubprocessors",
	UpdateSubprocessorDocument:                        "UpdateSubprocessor",
	GetAllSubprocessorHistoriesDocument:               "GetAllSubprocessorHistories",
	GetSubprocessorHistoriesDocument:                  "GetSubprocessorHistories",
	CreateBulkCSVSubscriberDocument:                   "CreateBulkCSVSubscriber",
	CreateBulkSubscriberDocument:                      "CreateBulkSubscriber",
	CreateSubscriberDocument:                          "CreateSubscriber",
	DeleteSubscriberDocument:                          "DeleteSubscriber",
	GetAllSubscribersDocument:                         "GetAllSubscribers",
	GetSubscriberByEmailDocument:                      "GetSubscriberByEmail",
	GetSubscribersDocument:                            "GetSubscribers",
	UpdateSubscriberDocument:                          "UpdateSubscriber",
	CreateBulkCSVTaskDocument:                         "CreateBulkCSVTask",
	CreateBulkTaskDocument:                            "CreateBulkTask",
	CreateTaskDocument:                                "CreateTask",
	DeleteTaskDocument:                                "DeleteTask",
	GetAllTasksDocument:                               "GetAllTasks",
	GetTaskByIDDocument:                               "GetTaskByID",
	GetTasksDocument:                                  "GetTasks",
	UpdateTaskDocument:                                "UpdateTask",
	GetAllTaskHistoriesDocument:                       "GetAllTaskHistories",
	GetTaskHistoriesDocument:                          "GetTaskHistories",
	CreateBulkCSVTemplateDocument:                     "CreateBulkCSVTemplate",
	CreateBulkTemplateDocument:                        "CreateBulkTemplate",
	CreateTemplateDocument:                            "CreateTemplate",
	DeleteTemplateDocument:                            "DeleteTemplate",
	GetAllTemplatesDocument:                           "GetAllTemplates",
	GetTemplateByIDDocument:                           "GetTemplateByID",
	GetTemplatesDocument:                              "GetTemplates",
	UpdateTemplateDocument:                            "UpdateTemplate",
	GetAllTemplateHistoriesDocument:                   "GetAllTemplateHistories",
	GetTemplateHistoriesDocument:                      "GetTemplateHistories",
	CreateTFASettingDocument:                          "CreateTFASetting",
	GetAllTFASettingsDocument:                         "GetAllTFASettings",
	GetTFASettingByIDDocument:                         "GetTFASettingByID",
	GetTFASettingsDocument:                            "GetTFASettings",
	UpdateTFASettingDocument:                          "UpdateTFASetting",
	CreateTrustCenterDocument:                         "CreateTrustCenter",
	DeleteTrustCenterDocument:                         "DeleteTrustCenter",
	GetAllTrustCentersDocument:                        "GetAllTrustCenters",
	GetTrustCenterByIDDocument:                        "GetTrustCenterByID",
	GetTrustCentersDocument:                           "GetTrustCenters",
	UpdateTrustCenterDocument:                         "UpdateTrustCenter",
	CreateBulkCSVTrustCenterComplianceDocument:        "CreateBulkCSVTrustCenterCompliance",
	CreateBulkTrustCenterComplianceDocument:           "CreateBulkTrustCenterCompliance",
	CreateTrustCenterComplianceDocument:               "CreateTrustCenterCompliance",
	DeleteTrustCenterComplianceDocument:               "DeleteTrustCenterCompliance",
	GetAllTrustCenterCompliancesDocument:              "GetAllTrustCenterCompliances",
	GetTrustCenterComplianceByIDDocument:              "GetTrustCenterComplianceByID",
	GetTrustCenterCompliancesDocument:                 "GetTrustCenterCompliances",
	UpdateTrustCenterComplianceDocument:               "UpdateTrustCenterCompliance",
	GetAllTrustCenterComplianceHistoriesDocument:      "GetAllTrustCenterComplianceHistories",
	GetTrustCenterComplianceHistoriesDocument:         "GetTrustCenterComplianceHistories",
	CreateTrustCenterDocDocument:                      "CreateTrustCenterDoc",
	DeleteTrustCenterDocDocument:                      "DeleteTrustCenterDoc",
	GetAllTrustCenterDocsDocument:                     "GetAllTrustCenterDocs",
	GetTrustCenterDocByIDDocument:                     "GetTrustCenterDocByID",
	GetTrustCenterDocsDocument:                        "GetTrustCenterDocs",
	UpdateTrustCenterDocDocument:                      "UpdateTrustCenterDoc",
	GetAllTrustCenterDocHistoriesDocument:             "GetAllTrustCenterDocHistories",
	GetTrustCenterDocHistoriesDocument:                "GetTrustCenterDocHistories",
	CreateTrustCenterDomainDocument:                   "CreateTrustCenterDomain",
	GetAllTrustCenterHistoriesDocument:                "GetAllTrustCenterHistories",
	GetTrustCenterHistoriesDocument:                   "GetTrustCenterHistories",
	CreateTrustCenterNdaDocument:                      "CreateTrustCenterNda",
	SendTrustCenterNDAEmailDocument:                   "SendTrustCenterNDAEmail",
	SubmitTrustCenterNDAResponseDocument:              "SubmitTrustCenterNDAResponse",
	UpdateTrustCenterNdaDocument:                      "UpdateTrustCenterNda",
	CreateTrustCenterSettingDocument:                  "CreateTrustCenterSetting",
	DeleteTrustCenterSettingDocument:                  "DeleteTrustCenterSetting",
	GetAllTrustCenterSettingsDocument:                 "GetAllTrustCenterSettings",
	GetTrustCenterSettingByIDDocument:                 "GetTrustCenterSettingByID",
	GetTrustCenterSettingsDocument:                    "GetTrustCenterSettings",
	UpdateTrustCenterSettingDocument:                  "UpdateTrustCenterSetting",
	GetAllTrustCenterSettingHistoriesDocument:         "GetAllTrustCenterSettingHistories",
	GetTrustCenterSettingHistoriesDocument:            "GetTrustCenterSettingHistories",
	CreateBulkCSVTrustCenterSubprocessorDocument:      "CreateBulkCSVTrustCenterSubprocessor",
	CreateBulkTrustCenterSubprocessorDocument:         "CreateBulkTrustCenterSubprocessor",
	CreateTrustCenterSubprocessorDocument:             "CreateTrustCenterSubprocessor",
	DeleteTrustCenterSubprocessorDocument:             "DeleteTrustCenterSubprocessor",
	GetAllTrustCenterSubprocessorsDocument:            "GetAllTrustCenterSubprocessors",
	GetTrustCenterSubprocessorByIDDocument:            "GetTrustCenterSubprocessorByID",
	GetTrustCenterSubprocessorsDocument:               "GetTrustCenterSubprocessors",
	UpdateTrustCenterSubprocessorDocument:             "UpdateTrustCenterSubprocessor",
	GetAllTrustCenterSubprocessorHistoriesDocument:    "GetAllTrustCenterSubprocessorHistories",
	GetTrustCenterSubprocessorHistoriesDocument:       "GetTrustCenterSubprocessorHistories",
	CreateTrustCenterWatermarkConfigDocument:          "CreateTrustCenterWatermarkConfig",
	DeleteTrustCenterWatermarkConfigDocument:          "DeleteTrustCenterWatermarkConfig",
	GetAllTrustCenterWatermarkConfigsDocument:         "GetAllTrustCenterWatermarkConfigs",
	GetTrustCenterWatermarkConfigByIDDocument:         "GetTrustCenterWatermarkConfigByID",
	GetTrustCenterWatermarkConfigsDocument:            "GetTrustCenterWatermarkConfigs",
	UpdateTrustCenterWatermarkConfigDocument:          "UpdateTrustCenterWatermarkConfig",
	GetAllTrustCenterWatermarkConfigHistoriesDocument: "GetAllTrustCenterWatermarkConfigHistories",
	GetTrustCenterWatermarkConfigHistoriesDocument:    "GetTrustCenterWatermarkConfigHistories",
	CreateUserDocument:                                "CreateUser",
	DeleteUserDocument:                                "DeleteUser",
	GetAllUsersDocument:                               "GetAllUsers",
	GetSelfDocument:                                   "GetSelf",
	GetUserByIDDocument:                               "GetUserByID",
	GetUsersDocument:                                  "GetUsers",
	UpdateUserDocument:                                "UpdateUser",
	GetAllUserHistoriesDocument:                       "GetAllUserHistories",
	GetUserHistoriesDocument:                          "GetUserHistories",
	CreateUserSettingDocument:                         "CreateUserSetting",
	GetAllUserSettingsDocument:                        "GetAllUserSettings",
	GetUserSettingByIDDocument:                        "GetUserSettingByID",
	GetUserSettingsDocument:                           "GetUserSettings",
	UpdateUserSettingDocument:                         "UpdateUserSetting",
	GetAllUserSettingHistoriesDocument:                "GetAllUserSettingHistories",
	GetUserSettingHistoriesDocument:                   "GetUserSettingHistories",
	DeleteWebauthnDocument:                            "DeleteWebauthn",
	GetAllWebauthnsDocument:                           "GetAllWebauthns",
}
