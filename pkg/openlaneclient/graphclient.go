// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package openlaneclient

import (
	"context"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/Yamashou/gqlgenc/clientv2"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"
	"github.com/theopenlane/entx/history"
)

type OpenlaneGraphClient interface {
	CreateBulkCSVActionPlan(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVActionPlan, error)
	CreateBulkActionPlan(ctx context.Context, input []*CreateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkActionPlan, error)
	CreateActionPlan(ctx context.Context, input CreateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*CreateActionPlan, error)
	DeleteActionPlan(ctx context.Context, deleteActionPlanID string, interceptors ...clientv2.RequestInterceptor) (*DeleteActionPlan, error)
	GetAllActionPlans(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllActionPlans, error)
	GetActionPlanByID(ctx context.Context, actionPlanID string, interceptors ...clientv2.RequestInterceptor) (*GetActionPlanByID, error)
	GetActionPlans(ctx context.Context, where *ActionPlanWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetActionPlans, error)
	UpdateActionPlan(ctx context.Context, updateActionPlanID string, input UpdateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*UpdateActionPlan, error)
	GetAllActionPlanHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllActionPlanHistories, error)
	GetActionPlanHistories(ctx context.Context, where *ActionPlanHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetActionPlanHistories, error)
	AdminSearch(ctx context.Context, query string, interceptors ...clientv2.RequestInterceptor) (*AdminSearch, error)
	CreateAPIToken(ctx context.Context, input CreateAPITokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateAPIToken, error)
	DeleteAPIToken(ctx context.Context, deleteAPITokenID string, interceptors ...clientv2.RequestInterceptor) (*DeleteAPIToken, error)
	GetAllAPITokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllAPITokens, error)
	GetAPITokenByID(ctx context.Context, apiTokenID string, interceptors ...clientv2.RequestInterceptor) (*GetAPITokenByID, error)
	GetAPITokens(ctx context.Context, where *APITokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetAPITokens, error)
	UpdateAPIToken(ctx context.Context, updateAPITokenID string, input UpdateAPITokenInput, interceptors ...clientv2.RequestInterceptor) (*UpdateAPIToken, error)
	CreateBulkContact(ctx context.Context, input []*CreateContactInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkContact, error)
	CreateBulkCSVContact(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVContact, error)
	CreateContact(ctx context.Context, input CreateContactInput, interceptors ...clientv2.RequestInterceptor) (*CreateContact, error)
	DeleteContact(ctx context.Context, deleteContactID string, interceptors ...clientv2.RequestInterceptor) (*DeleteContact, error)
	GetAllContacts(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllContacts, error)
	GetContactByID(ctx context.Context, contactID string, interceptors ...clientv2.RequestInterceptor) (*GetContactByID, error)
	GetContacts(ctx context.Context, where *ContactWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetContacts, error)
	UpdateContact(ctx context.Context, updateContactID string, input UpdateContactInput, interceptors ...clientv2.RequestInterceptor) (*UpdateContact, error)
	GetAllContactHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllContactHistories, error)
	GetContactHistories(ctx context.Context, where *ContactHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetContactHistories, error)
	CreateBulkControl(ctx context.Context, input []*CreateControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkControl, error)
	CreateBulkCSVControl(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVControl, error)
	CreateControl(ctx context.Context, input CreateControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateControl, error)
	DeleteControl(ctx context.Context, deleteControlID string, interceptors ...clientv2.RequestInterceptor) (*DeleteControl, error)
	GetAllControls(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControls, error)
	GetControlByID(ctx context.Context, controlID string, interceptors ...clientv2.RequestInterceptor) (*GetControlByID, error)
	GetControls(ctx context.Context, first *int64, last *int64, where *ControlWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControls, error)
	UpdateControl(ctx context.Context, updateControlID string, input UpdateControlInput, interceptors ...clientv2.RequestInterceptor) (*UpdateControl, error)
	CreateControlsByClone(ctx context.Context, input CloneControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateControlsByClone, error)
	GetAllControlHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlHistories, error)
	GetControlHistories(ctx context.Context, where *ControlHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlHistories, error)
	CreateBulkControlImplementation(ctx context.Context, input []*CreateControlImplementationInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkControlImplementation, error)
	CreateBulkCSVControlImplementation(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVControlImplementation, error)
	CreateControlImplementation(ctx context.Context, input CreateControlImplementationInput, interceptors ...clientv2.RequestInterceptor) (*CreateControlImplementation, error)
	DeleteControlImplementation(ctx context.Context, deleteControlImplementationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteControlImplementation, error)
	GetAllControlImplementations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlImplementations, error)
	GetControlImplementationByID(ctx context.Context, controlImplementationID string, interceptors ...clientv2.RequestInterceptor) (*GetControlImplementationByID, error)
	GetControlImplementations(ctx context.Context, where *ControlImplementationWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlImplementations, error)
	UpdateControlImplementation(ctx context.Context, updateControlImplementationID string, input UpdateControlImplementationInput, interceptors ...clientv2.RequestInterceptor) (*UpdateControlImplementation, error)
	GetAllControlImplementationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlImplementationHistories, error)
	GetControlImplementationHistories(ctx context.Context, where *ControlImplementationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlImplementationHistories, error)
	CreateBulkCSVControlObjective(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVControlObjective, error)
	CreateBulkControlObjective(ctx context.Context, input []*CreateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkControlObjective, error)
	CreateControlObjective(ctx context.Context, input CreateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*CreateControlObjective, error)
	DeleteControlObjective(ctx context.Context, deleteControlObjectiveID string, interceptors ...clientv2.RequestInterceptor) (*DeleteControlObjective, error)
	GetAllControlObjectives(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlObjectives, error)
	GetControlObjectiveByID(ctx context.Context, controlObjectiveID string, interceptors ...clientv2.RequestInterceptor) (*GetControlObjectiveByID, error)
	GetControlObjectives(ctx context.Context, where *ControlObjectiveWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlObjectives, error)
	UpdateControlObjective(ctx context.Context, updateControlObjectiveID string, input UpdateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*UpdateControlObjective, error)
	GetAllControlObjectiveHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlObjectiveHistories, error)
	GetControlObjectiveHistories(ctx context.Context, where *ControlObjectiveHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlObjectiveHistories, error)
	CreateDocumentData(ctx context.Context, input CreateDocumentDataInput, interceptors ...clientv2.RequestInterceptor) (*CreateDocumentData, error)
	DeleteDocumentData(ctx context.Context, deleteDocumentDataID string, interceptors ...clientv2.RequestInterceptor) (*DeleteDocumentData, error)
	GetDocumentDataByID(ctx context.Context, documentDataID string, interceptors ...clientv2.RequestInterceptor) (*GetDocumentDataByID, error)
	UpdateDocumentData(ctx context.Context, updateDocumentDataID string, input UpdateDocumentDataInput, interceptors ...clientv2.RequestInterceptor) (*UpdateDocumentData, error)
	GetAllDocumentDataHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllDocumentDataHistories, error)
	GetDocumentDataHistories(ctx context.Context, where *DocumentDataHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetDocumentDataHistories, error)
	CreateBulkCSVEntity(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntity, error)
	CreateBulkEntity(ctx context.Context, input []*CreateEntityInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntity, error)
	CreateEntity(ctx context.Context, input CreateEntityInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntity, error)
	DeleteEntity(ctx context.Context, deleteEntityID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntity, error)
	GetAllEntities(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntities, error)
	GetEntities(ctx context.Context, where *EntityWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntities, error)
	GetEntityByID(ctx context.Context, entityID string, interceptors ...clientv2.RequestInterceptor) (*GetEntityByID, error)
	UpdateEntity(ctx context.Context, updateEntityID string, input UpdateEntityInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntity, error)
	GetAllEntityHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntityHistories, error)
	GetEntityHistories(ctx context.Context, where *EntityHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntityHistories, error)
	CreateBulkCSVEntityType(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntityType, error)
	CreateBulkEntityType(ctx context.Context, input []*CreateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntityType, error)
	CreateEntityType(ctx context.Context, input CreateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntityType, error)
	DeleteEntityType(ctx context.Context, deleteEntityTypeID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntityType, error)
	GetAllEntityTypes(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntityTypes, error)
	GetEntityTypeByID(ctx context.Context, entityTypeID string, interceptors ...clientv2.RequestInterceptor) (*GetEntityTypeByID, error)
	GetEntityTypes(ctx context.Context, where *EntityTypeWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntityTypes, error)
	UpdateEntityType(ctx context.Context, updateEntityTypeID string, input UpdateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntityType, error)
	GetAllEntityTypeHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntityTypeHistories, error)
	GetEntityTypeHistories(ctx context.Context, where *EntityTypeHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntityTypeHistories, error)
	CreateBulkCSVEvent(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEvent, error)
	CreateBulkEvent(ctx context.Context, input []*CreateEventInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEvent, error)
	CreateEvent(ctx context.Context, input CreateEventInput, interceptors ...clientv2.RequestInterceptor) (*CreateEvent, error)
	DeleteEvent(ctx context.Context, deleteEventID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEvent, error)
	GetAllEvents(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEvents, error)
	GetEventByID(ctx context.Context, eventID string, interceptors ...clientv2.RequestInterceptor) (*GetEventByID, error)
	GetEvents(ctx context.Context, where *EventWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEvents, error)
	UpdateEvent(ctx context.Context, updateEventID string, input UpdateEventInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEvent, error)
	GetAllEventHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEventHistories, error)
	GetEventHistories(ctx context.Context, where *EventHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEventHistories, error)
	CreateEvidence(ctx context.Context, input CreateEvidenceInput, evidenceFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateEvidence, error)
	DeleteEvidence(ctx context.Context, deleteEvidenceID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEvidence, error)
	GetAllEvidences(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEvidences, error)
	GetEvidenceByID(ctx context.Context, evidenceID string, interceptors ...clientv2.RequestInterceptor) (*GetEvidenceByID, error)
	GetEvidences(ctx context.Context, where *EvidenceWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEvidences, error)
	UpdateEvidence(ctx context.Context, updateEvidenceID string, input UpdateEvidenceInput, evidenceFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateEvidence, error)
	GetAllEvidenceHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEvidenceHistories, error)
	GetEvidenceHistories(ctx context.Context, where *EvidenceHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEvidenceHistories, error)
	DeleteFile(ctx context.Context, deleteFileID string, interceptors ...clientv2.RequestInterceptor) (*DeleteFile, error)
	GetAllFiles(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllFiles, error)
	GetFileByID(ctx context.Context, fileID string, interceptors ...clientv2.RequestInterceptor) (*GetFileByID, error)
	GetFiles(ctx context.Context, where *FileWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetFiles, error)
	GetAllFileHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllFileHistories, error)
	GetFileHistories(ctx context.Context, where *FileHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetFileHistories, error)
	CreateBulkCSVGroup(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVGroup, error)
	CreateBulkGroup(ctx context.Context, input []*CreateGroupInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkGroup, error)
	CreateGroup(ctx context.Context, input CreateGroupInput, interceptors ...clientv2.RequestInterceptor) (*CreateGroup, error)
	CreateGroupByClone(ctx context.Context, groupInput CreateGroupInput, inheritGroupPermissions *string, cloneGroupMembers *string, interceptors ...clientv2.RequestInterceptor) (*CreateGroupByClone, error)
	CreateGroupWithMembers(ctx context.Context, groupInput CreateGroupInput, members []*GroupMembersInput, interceptors ...clientv2.RequestInterceptor) (*CreateGroupWithMembers, error)
	DeleteGroup(ctx context.Context, deleteGroupID string, interceptors ...clientv2.RequestInterceptor) (*DeleteGroup, error)
	GetAllGroups(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroups, error)
	GetGroupByID(ctx context.Context, groupID string, interceptors ...clientv2.RequestInterceptor) (*GetGroupByID, error)
	GetGroups(ctx context.Context, where *GroupWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroups, error)
	UpdateGroup(ctx context.Context, updateGroupID string, input UpdateGroupInput, interceptors ...clientv2.RequestInterceptor) (*UpdateGroup, error)
	GetAllGroupHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupHistories, error)
	GetGroupHistories(ctx context.Context, where *GroupHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupHistories, error)
	AddUserToGroupWithRole(ctx context.Context, input CreateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*AddUserToGroupWithRole, error)
	CreateBulkCSVGroupMembers(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVGroupMembers, error)
	CreateBulkGroupMembers(ctx context.Context, input []*CreateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkGroupMembers, error)
	GetGroupMembersByGroupID(ctx context.Context, where *GroupMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupMembersByGroupID, error)
	RemoveUserFromGroup(ctx context.Context, deleteGroupMembershipID string, interceptors ...clientv2.RequestInterceptor) (*RemoveUserFromGroup, error)
	UpdateUserRoleInGroup(ctx context.Context, updateGroupMemberID string, input UpdateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUserRoleInGroup, error)
	GetAllGroupMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupMembershipHistories, error)
	GetGroupMembershipHistories(ctx context.Context, where *GroupMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupMembershipHistories, error)
	GetAllGroupSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupSettings, error)
	GetGroupSettingByID(ctx context.Context, groupSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetGroupSettingByID, error)
	GetGroupSettings(ctx context.Context, where GroupSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupSettings, error)
	UpdateGroupSetting(ctx context.Context, updateGroupSettingID string, input UpdateGroupSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateGroupSetting, error)
	GetAllGroupSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupSettingHistories, error)
	GetGroupSettingHistories(ctx context.Context, where *GroupSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupSettingHistories, error)
	CreateBulkCSVHush(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVHush, error)
	CreateBulkHush(ctx context.Context, input []*CreateHushInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkHush, error)
	CreateHush(ctx context.Context, input CreateHushInput, interceptors ...clientv2.RequestInterceptor) (*CreateHush, error)
	GetAllHushes(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllHushes, error)
	GetHushByID(ctx context.Context, hushID string, interceptors ...clientv2.RequestInterceptor) (*GetHushByID, error)
	GetHushes(ctx context.Context, where *HushWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetHushes, error)
	UpdateHush(ctx context.Context, updateHushID string, input UpdateHushInput, interceptors ...clientv2.RequestInterceptor) (*UpdateHush, error)
	GetAllHushHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllHushHistories, error)
	GetHushHistories(ctx context.Context, where *HushHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetHushHistories, error)
	CreateBulkCSVIntegration(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVIntegration, error)
	CreateBulkIntegration(ctx context.Context, input []*CreateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkIntegration, error)
	CreateIntegration(ctx context.Context, input CreateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*CreateIntegration, error)
	DeleteIntegration(ctx context.Context, deleteIntegrationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteIntegration, error)
	GetAllIntegrations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllIntegrations, error)
	GetIntegrationByID(ctx context.Context, integrationID string, interceptors ...clientv2.RequestInterceptor) (*GetIntegrationByID, error)
	GetIntegrations(ctx context.Context, where *IntegrationWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetIntegrations, error)
	UpdateIntegration(ctx context.Context, updateIntegrationID string, input UpdateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*UpdateIntegration, error)
	GetAllIntegrationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllIntegrationHistories, error)
	GetIntegrationHistories(ctx context.Context, where *IntegrationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetIntegrationHistories, error)
	CreateBulkCSVInternalPolicy(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVInternalPolicy, error)
	CreateBulkInternalPolicy(ctx context.Context, input []*CreateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkInternalPolicy, error)
	CreateInternalPolicy(ctx context.Context, input CreateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*CreateInternalPolicy, error)
	DeleteInternalPolicy(ctx context.Context, deleteInternalPolicyID string, interceptors ...clientv2.RequestInterceptor) (*DeleteInternalPolicy, error)
	GetAllInternalPolicies(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllInternalPolicies, error)
	GetInternalPolicies(ctx context.Context, where *InternalPolicyWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetInternalPolicies, error)
	GetInternalPolicyByID(ctx context.Context, internalPolicyID string, interceptors ...clientv2.RequestInterceptor) (*GetInternalPolicyByID, error)
	UpdateInternalPolicy(ctx context.Context, updateInternalPolicyID string, input UpdateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*UpdateInternalPolicy, error)
	GetAllInternalPolicyHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllInternalPolicyHistories, error)
	GetInternalPolicyHistories(ctx context.Context, where *InternalPolicyHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetInternalPolicyHistories, error)
	CreateBulkCSVInvite(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVInvite, error)
	CreateBulkInvite(ctx context.Context, input []*CreateInviteInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkInvite, error)
	CreateInvite(ctx context.Context, input CreateInviteInput, interceptors ...clientv2.RequestInterceptor) (*CreateInvite, error)
	DeleteInvite(ctx context.Context, deleteInviteID string, interceptors ...clientv2.RequestInterceptor) (*DeleteInvite, error)
	GetAllInvites(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllInvites, error)
	GetInviteByID(ctx context.Context, inviteID string, interceptors ...clientv2.RequestInterceptor) (*GetInviteByID, error)
	InvitesByOrgID(ctx context.Context, where *InviteWhereInput, interceptors ...clientv2.RequestInterceptor) (*InvitesByOrgID, error)
	CreateBulkCSVMappedControl(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVMappedControl, error)
	CreateBulkMappedControl(ctx context.Context, input []*CreateMappedControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkMappedControl, error)
	CreateMappedControl(ctx context.Context, input CreateMappedControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateMappedControl, error)
	DeleteMappedControl(ctx context.Context, deleteMappedControlID string, interceptors ...clientv2.RequestInterceptor) (*DeleteMappedControl, error)
	GetAllMappedControls(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllMappedControls, error)
	GetMappedControlByID(ctx context.Context, mappedControlID string, interceptors ...clientv2.RequestInterceptor) (*GetMappedControlByID, error)
	GetMappedControls(ctx context.Context, where *MappedControlWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetMappedControls, error)
	UpdateMappedControl(ctx context.Context, updateMappedControlID string, input UpdateMappedControlInput, interceptors ...clientv2.RequestInterceptor) (*UpdateMappedControl, error)
	GetAllMappedControlHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllMappedControlHistories, error)
	GetMappedControlHistories(ctx context.Context, where *MappedControlHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetMappedControlHistories, error)
	CreateBulkCSVNarrative(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVNarrative, error)
	CreateBulkNarrative(ctx context.Context, input []*CreateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkNarrative, error)
	CreateNarrative(ctx context.Context, input CreateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*CreateNarrative, error)
	DeleteNarrative(ctx context.Context, deleteNarrativeID string, interceptors ...clientv2.RequestInterceptor) (*DeleteNarrative, error)
	GetAllNarratives(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllNarratives, error)
	GetNarrativeByID(ctx context.Context, narrativeID string, interceptors ...clientv2.RequestInterceptor) (*GetNarrativeByID, error)
	GetNarratives(ctx context.Context, where *NarrativeWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetNarratives, error)
	UpdateNarrative(ctx context.Context, updateNarrativeID string, input UpdateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*UpdateNarrative, error)
	GetAllNarrativeHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllNarrativeHistories, error)
	GetNarrativeHistories(ctx context.Context, where *NarrativeHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetNarrativeHistories, error)
	GetNoteByID(ctx context.Context, noteID string, interceptors ...clientv2.RequestInterceptor) (*GetNoteByID, error)
	GetAllNoteHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllNoteHistories, error)
	GetNoteHistories(ctx context.Context, where *NoteHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetNoteHistories, error)
	CreateOnboarding(ctx context.Context, input CreateOnboardingInput, interceptors ...clientv2.RequestInterceptor) (*CreateOnboarding, error)
	CreateOrganization(ctx context.Context, input CreateOrganizationInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateOrganization, error)
	CreateOrganizationWithMembers(ctx context.Context, organizationInput CreateOrganizationInput, members []*OrgMembersInput, interceptors ...clientv2.RequestInterceptor) (*CreateOrganizationWithMembers, error)
	DeleteOrganization(ctx context.Context, deleteOrganizationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteOrganization, error)
	GetAllOrganizations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizations, error)
	GetOrganizationByID(ctx context.Context, organizationID string, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationByID, error)
	GetOrganizations(ctx context.Context, where *OrganizationWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizations, error)
	UpdateOrganization(ctx context.Context, updateOrganizationID string, input UpdateOrganizationInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateOrganization, error)
	GetAllOrganizationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizationHistories, error)
	GetOrganizationHistories(ctx context.Context, where *OrganizationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationHistories, error)
	GetAllOrganizationSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizationSettings, error)
	GetOrganizationSettingByID(ctx context.Context, organizationSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettingByID, error)
	GetOrganizationSettings(ctx context.Context, where OrganizationSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettings, error)
	UpdateOrganizationSetting(ctx context.Context, updateOrganizationSettingID string, input UpdateOrganizationSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateOrganizationSetting, error)
	GetAllOrganizationSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizationSettingHistories, error)
	GetOrganizationSettingHistories(ctx context.Context, where *OrganizationSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettingHistories, error)
	AddUserToOrgWithRole(ctx context.Context, input CreateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*AddUserToOrgWithRole, error)
	CreateBulkCSVOrgMembers(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVOrgMembers, error)
	CreateBulkOrgMembers(ctx context.Context, input []*CreateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkOrgMembers, error)
	GetOrgMembersByOrgID(ctx context.Context, where *OrgMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgMembersByOrgID, error)
	RemoveUserFromOrg(ctx context.Context, deleteOrgMembershipID string, interceptors ...clientv2.RequestInterceptor) (*RemoveUserFromOrg, error)
	UpdateUserRoleInOrg(ctx context.Context, updateOrgMemberID string, input UpdateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUserRoleInOrg, error)
	GetAllOrgMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrgMembershipHistories, error)
	GetOrgMembershipHistories(ctx context.Context, where *OrgMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgMembershipHistories, error)
	GetAllOrgSubscriptions(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrgSubscriptions, error)
	GetOrgSubscriptionByID(ctx context.Context, orgSubscriptionID string, interceptors ...clientv2.RequestInterceptor) (*GetOrgSubscriptionByID, error)
	GetOrgSubscriptions(ctx context.Context, where *OrgSubscriptionWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgSubscriptions, error)
	GetAllOrgSubscriptionHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrgSubscriptionHistories, error)
	GetOrgSubscriptionHistories(ctx context.Context, where *OrgSubscriptionHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgSubscriptionHistories, error)
	CreatePersonalAccessToken(ctx context.Context, input CreatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreatePersonalAccessToken, error)
	DeletePersonalAccessToken(ctx context.Context, deletePersonalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*DeletePersonalAccessToken, error)
	GetAllPersonalAccessTokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllPersonalAccessTokens, error)
	GetPersonalAccessTokenByID(ctx context.Context, personalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*GetPersonalAccessTokenByID, error)
	GetPersonalAccessTokens(ctx context.Context, where *PersonalAccessTokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetPersonalAccessTokens, error)
	UpdatePersonalAccessToken(ctx context.Context, updatePersonalAccessTokenID string, input UpdatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*UpdatePersonalAccessToken, error)
	CreateBulkCSVProcedure(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVProcedure, error)
	CreateBulkProcedure(ctx context.Context, input []*CreateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkProcedure, error)
	CreateProcedure(ctx context.Context, input CreateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*CreateProcedure, error)
	DeleteProcedure(ctx context.Context, deleteProcedureID string, interceptors ...clientv2.RequestInterceptor) (*DeleteProcedure, error)
	GetAllProcedures(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProcedures, error)
	GetProcedureByID(ctx context.Context, procedureID string, interceptors ...clientv2.RequestInterceptor) (*GetProcedureByID, error)
	GetProcedures(ctx context.Context, where *ProcedureWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProcedures, error)
	UpdateProcedure(ctx context.Context, updateProcedureID string, input UpdateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*UpdateProcedure, error)
	GetAllProcedureHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProcedureHistories, error)
	GetProcedureHistories(ctx context.Context, where *ProcedureHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProcedureHistories, error)
	CreateBulkCSVProgram(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVProgram, error)
	CreateBulkProgram(ctx context.Context, input []*CreateProgramInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkProgram, error)
	CreateControlWithSubcontrols(ctx context.Context, input CreateControlWithSubcontrolsInput, interceptors ...clientv2.RequestInterceptor) (*CreateControlWithSubcontrols, error)
	CreateFullProgram(ctx context.Context, input CreateFullProgramInput, interceptors ...clientv2.RequestInterceptor) (*CreateFullProgram, error)
	CreateProgram(ctx context.Context, input CreateProgramInput, interceptors ...clientv2.RequestInterceptor) (*CreateProgram, error)
	CreateProgramWithMembers(ctx context.Context, input CreateProgramWithMembersInput, interceptors ...clientv2.RequestInterceptor) (*CreateProgramWithMembers, error)
	DeleteProgram(ctx context.Context, deleteProgramID string, interceptors ...clientv2.RequestInterceptor) (*DeleteProgram, error)
	GetAllPrograms(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllPrograms, error)
	GetProgramByID(ctx context.Context, programID string, interceptors ...clientv2.RequestInterceptor) (*GetProgramByID, error)
	GetPrograms(ctx context.Context, where *ProgramWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetPrograms, error)
	UpdateProgram(ctx context.Context, updateProgramID string, input UpdateProgramInput, interceptors ...clientv2.RequestInterceptor) (*UpdateProgram, error)
	AddUserToProgramWithRole(ctx context.Context, input CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*AddUserToProgramWithRole, error)
	CreateBulkCSVProgramMembers(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVProgramMembers, error)
	CreateBulkProgramMembers(ctx context.Context, input []*CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkProgramMembers, error)
	GetProgramMembersByProgramID(ctx context.Context, where *ProgramMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProgramMembersByProgramID, error)
	RemoveUserFromProgram(ctx context.Context, deleteProgramMembershipID string, interceptors ...clientv2.RequestInterceptor) (*RemoveUserFromProgram, error)
	UpdateUserRoleInProgram(ctx context.Context, updateProgramMemberID string, input UpdateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUserRoleInProgram, error)
	GetAllProgramHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProgramHistories, error)
	GetProgramHistories(ctx context.Context, where *ProgramHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProgramHistories, error)
	CreateBulkCSVProgramMembership(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVProgramMembership, error)
	CreateBulkProgramMembership(ctx context.Context, input []*CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkProgramMembership, error)
	CreateProgramMembership(ctx context.Context, input CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateProgramMembership, error)
	DeleteProgramMembership(ctx context.Context, deleteProgramMembershipID string, interceptors ...clientv2.RequestInterceptor) (*DeleteProgramMembership, error)
	GetAllProgramMemberships(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProgramMemberships, error)
	GetProgramMembershipByID(ctx context.Context, programMembershipID string, interceptors ...clientv2.RequestInterceptor) (*GetProgramMembershipByID, error)
	GetProgramMemberships(ctx context.Context, where *ProgramMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProgramMemberships, error)
	UpdateProgramMembership(ctx context.Context, updateProgramMembershipID string, input UpdateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateProgramMembership, error)
	GetAllProgramMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProgramMembershipHistories, error)
	GetProgramMembershipHistories(ctx context.Context, where *ProgramMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProgramMembershipHistories, error)
	CreateBulkCSVRisk(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVRisk, error)
	CreateBulkRisk(ctx context.Context, input []*CreateRiskInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkRisk, error)
	CreateRisk(ctx context.Context, input CreateRiskInput, interceptors ...clientv2.RequestInterceptor) (*CreateRisk, error)
	DeleteRisk(ctx context.Context, deleteRiskID string, interceptors ...clientv2.RequestInterceptor) (*DeleteRisk, error)
	GetAllRisks(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllRisks, error)
	GetRiskByID(ctx context.Context, riskID string, interceptors ...clientv2.RequestInterceptor) (*GetRiskByID, error)
	GetRisks(ctx context.Context, where *RiskWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetRisks, error)
	UpdateRisk(ctx context.Context, updateRiskID string, input UpdateRiskInput, interceptors ...clientv2.RequestInterceptor) (*UpdateRisk, error)
	GetAllRiskHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllRiskHistories, error)
	GetRiskHistories(ctx context.Context, where *RiskHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetRiskHistories, error)
	GlobalSearch(ctx context.Context, query string, interceptors ...clientv2.RequestInterceptor) (*GlobalSearch, error)
	CreateStandard(ctx context.Context, input CreateStandardInput, interceptors ...clientv2.RequestInterceptor) (*CreateStandard, error)
	DeleteStandard(ctx context.Context, deleteStandardID string, interceptors ...clientv2.RequestInterceptor) (*DeleteStandard, error)
	GetAllStandards(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllStandards, error)
	GetStandardByID(ctx context.Context, standardID string, interceptors ...clientv2.RequestInterceptor) (*GetStandardByID, error)
	GetStandards(ctx context.Context, first *int64, last *int64, where *StandardWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetStandards, error)
	UpdateStandard(ctx context.Context, updateStandardID string, input UpdateStandardInput, interceptors ...clientv2.RequestInterceptor) (*UpdateStandard, error)
	GetAllStandardHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllStandardHistories, error)
	GetStandardHistories(ctx context.Context, where *StandardHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetStandardHistories, error)
	CreateBulkCSVSubcontrol(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVSubcontrol, error)
	CreateBulkSubcontrol(ctx context.Context, input []*CreateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkSubcontrol, error)
	CreateSubcontrol(ctx context.Context, input CreateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*CreateSubcontrol, error)
	DeleteSubcontrol(ctx context.Context, deleteSubcontrolID string, interceptors ...clientv2.RequestInterceptor) (*DeleteSubcontrol, error)
	GetAllSubcontrols(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllSubcontrols, error)
	GetSubcontrolByID(ctx context.Context, subcontrolID string, interceptors ...clientv2.RequestInterceptor) (*GetSubcontrolByID, error)
	GetSubcontrols(ctx context.Context, where *SubcontrolWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetSubcontrols, error)
	UpdateSubcontrol(ctx context.Context, updateSubcontrolID string, input UpdateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*UpdateSubcontrol, error)
	GetAllSubcontrolHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllSubcontrolHistories, error)
	GetSubcontrolHistories(ctx context.Context, where *SubcontrolHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetSubcontrolHistories, error)
	CreateBulkCSVSubscriber(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVSubscriber, error)
	CreateBulkSubscriber(ctx context.Context, input []*CreateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkSubscriber, error)
	CreateSubscriber(ctx context.Context, input CreateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*CreateSubscriber, error)
	DeleteSubscriber(ctx context.Context, deleteSubscriberEmail string, subscriberOrganization *string, interceptors ...clientv2.RequestInterceptor) (*DeleteSubscriber, error)
	GetAllSubscribers(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllSubscribers, error)
	GetSubscriberByEmail(ctx context.Context, email string, interceptors ...clientv2.RequestInterceptor) (*GetSubscriberByEmail, error)
	GetSubscribers(ctx context.Context, where *SubscriberWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetSubscribers, error)
	UpdateSubscriber(ctx context.Context, email string, input UpdateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*UpdateSubscriber, error)
	CreateBulkCSVTask(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVTask, error)
	CreateBulkTask(ctx context.Context, input []*CreateTaskInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkTask, error)
	CreateTask(ctx context.Context, input CreateTaskInput, interceptors ...clientv2.RequestInterceptor) (*CreateTask, error)
	DeleteTask(ctx context.Context, deleteTaskID string, interceptors ...clientv2.RequestInterceptor) (*DeleteTask, error)
	GetAllTasks(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTasks, error)
	GetTaskByID(ctx context.Context, taskID string, interceptors ...clientv2.RequestInterceptor) (*GetTaskByID, error)
	GetTasks(ctx context.Context, where *TaskWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTasks, error)
	UpdateTask(ctx context.Context, updateTaskID string, input UpdateTaskInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTask, error)
	UpdateTaskComment(ctx context.Context, updateTaskCommentID string, input UpdateNoteInput, noteFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateTaskComment, error)
	GetAllTaskHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTaskHistories, error)
	GetTaskHistories(ctx context.Context, where *TaskHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTaskHistories, error)
	CreateBulkCSVTemplate(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVTemplate, error)
	CreateBulkTemplate(ctx context.Context, input []*CreateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkTemplate, error)
	CreateTemplate(ctx context.Context, input CreateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*CreateTemplate, error)
	GetAllTemplates(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTemplates, error)
	GetTemplateByID(ctx context.Context, getTemplateID string, interceptors ...clientv2.RequestInterceptor) (*GetTemplateByID, error)
	UpdateTemplate(ctx context.Context, updateTemplateID string, input UpdateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTemplate, error)
	GetAllTemplateHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTemplateHistories, error)
	GetTemplateHistories(ctx context.Context, where *TemplateHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTemplateHistories, error)
	CreateTFASetting(ctx context.Context, input CreateTFASettingInput, interceptors ...clientv2.RequestInterceptor) (*CreateTFASetting, error)
	GetAllTFASettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTFASettings, error)
	GetTFASetting(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetTFASetting, error)
	UpdateTFASetting(ctx context.Context, input UpdateTFASettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTFASetting, error)
	CreateUser(ctx context.Context, input CreateUserInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateUser, error)
	DeleteUser(ctx context.Context, deleteUserID string, interceptors ...clientv2.RequestInterceptor) (*DeleteUser, error)
	GetAllUsers(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUsers, error)
	GetSelf(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetSelf, error)
	GetUserByID(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor) (*GetUserByID, error)
	GetUserByIDWithOrgs(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor) (*GetUserByIDWithOrgs, error)
	UpdateUser(ctx context.Context, updateUserID string, input UpdateUserInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateUser, error)
	GetAllUserHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserHistories, error)
	GetUserHistories(ctx context.Context, where *UserHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserHistories, error)
	GetAllUserSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserSettings, error)
	GetUserSettingByID(ctx context.Context, userSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetUserSettingByID, error)
	GetUserSettings(ctx context.Context, where UserSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserSettings, error)
	UpdateUserSetting(ctx context.Context, updateUserSettingID string, input UpdateUserSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUserSetting, error)
	GetAllUserSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserSettingHistories, error)
	GetUserSettingHistories(ctx context.Context, where *UserSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserSettingHistories, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli clientv2.HttpClient, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) OpenlaneGraphClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans struct {
	ActionPlanType   *string               "json:\"actionPlanType,omitempty\" graphql:\"actionPlanType\""
	ApprovalRequired *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	CreatedAt        *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details          *string               "json:\"details,omitempty\" graphql:\"details\""
	DueDate          *time.Time            "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	ID               string                "json:\"id\" graphql:\"id\""
	Name             string                "json:\"name\" graphql:\"name\""
	Priority         *enums.Priority       "json:\"priority,omitempty\" graphql:\"priority\""
	ReviewDue        *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Source           *string               "json:\"source,omitempty\" graphql:\"source\""
	Status           *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetActionPlanType() *string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.ActionPlanType
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetApprovalRequired() *bool {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.ApprovalRequired
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetDetails() *string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.Details
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetDueDate() *time.Time {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.DueDate
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetID() string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.ID
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetName() string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.Name
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetPriority() *enums.Priority {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.Priority
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetReviewDue() *time.Time {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.ReviewDue
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.ReviewFrequency
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetRevision() *string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.Revision
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetSource() *string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.Source
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.Status
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.Tags
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVActionPlan_CreateBulkCSVActionPlan struct {
	ActionPlans []*CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans "json:\"actionPlans,omitempty\" graphql:\"actionPlans\""
}

func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan) GetActionPlans() []*CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan{}
	}
	return t.ActionPlans
}

type CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans struct {
	ActionPlanType   *string               "json:\"actionPlanType,omitempty\" graphql:\"actionPlanType\""
	ApprovalRequired *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	CreatedAt        *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details          *string               "json:\"details,omitempty\" graphql:\"details\""
	DueDate          *time.Time            "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	ID               string                "json:\"id\" graphql:\"id\""
	Name             string                "json:\"name\" graphql:\"name\""
	Priority         *enums.Priority       "json:\"priority,omitempty\" graphql:\"priority\""
	ReviewDue        *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Source           *string               "json:\"source,omitempty\" graphql:\"source\""
	Status           *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetActionPlanType() *string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.ActionPlanType
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetApprovalRequired() *bool {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.ApprovalRequired
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.CreatedAt
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.CreatedBy
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetDetails() *string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.Details
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetDueDate() *time.Time {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.DueDate
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetID() string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.ID
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetName() string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.Name
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetPriority() *enums.Priority {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.Priority
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetReviewDue() *time.Time {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.ReviewDue
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.ReviewFrequency
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetRevision() *string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.Revision
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetSource() *string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.Source
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.Status
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetTags() []string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.Tags
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.UpdatedBy
}

type CreateBulkActionPlan_CreateBulkActionPlan struct {
	ActionPlans []*CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans "json:\"actionPlans,omitempty\" graphql:\"actionPlans\""
}

func (t *CreateBulkActionPlan_CreateBulkActionPlan) GetActionPlans() []*CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan{}
	}
	return t.ActionPlans
}

type CreateActionPlan_CreateActionPlan_ActionPlan struct {
	ActionPlanType   *string               "json:\"actionPlanType,omitempty\" graphql:\"actionPlanType\""
	ApprovalRequired *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	CreatedAt        *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details          *string               "json:\"details,omitempty\" graphql:\"details\""
	DueDate          *time.Time            "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	ID               string                "json:\"id\" graphql:\"id\""
	Name             string                "json:\"name\" graphql:\"name\""
	Priority         *enums.Priority       "json:\"priority,omitempty\" graphql:\"priority\""
	ReviewDue        *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Source           *string               "json:\"source,omitempty\" graphql:\"source\""
	Status           *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetActionPlanType() *string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.ActionPlanType
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetApprovalRequired() *bool {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.ApprovalRequired
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.CreatedAt
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetCreatedBy() *string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.CreatedBy
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetDetails() *string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.Details
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetDueDate() *time.Time {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.DueDate
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetID() string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.ID
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetName() string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.Name
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetPriority() *enums.Priority {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.Priority
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetReviewDue() *time.Time {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.ReviewDue
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.ReviewFrequency
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetRevision() *string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.Revision
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetSource() *string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.Source
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.Status
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetTags() []string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.Tags
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.UpdatedAt
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.UpdatedBy
}

type CreateActionPlan_CreateActionPlan struct {
	ActionPlan CreateActionPlan_CreateActionPlan_ActionPlan "json:\"actionPlan\" graphql:\"actionPlan\""
}

func (t *CreateActionPlan_CreateActionPlan) GetActionPlan() *CreateActionPlan_CreateActionPlan_ActionPlan {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan{}
	}
	return &t.ActionPlan
}

type DeleteActionPlan_DeleteActionPlan struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteActionPlan_DeleteActionPlan) GetDeletedID() string {
	if t == nil {
		t = &DeleteActionPlan_DeleteActionPlan{}
	}
	return t.DeletedID
}

type GetAllActionPlans_ActionPlans_Edges_Node struct {
	ActionPlanType   *string               "json:\"actionPlanType,omitempty\" graphql:\"actionPlanType\""
	ApprovalRequired *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	CreatedAt        *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details          *string               "json:\"details,omitempty\" graphql:\"details\""
	DueDate          *time.Time            "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	ID               string                "json:\"id\" graphql:\"id\""
	Name             string                "json:\"name\" graphql:\"name\""
	Priority         *enums.Priority       "json:\"priority,omitempty\" graphql:\"priority\""
	ReviewDue        *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Source           *string               "json:\"source,omitempty\" graphql:\"source\""
	Status           *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetActionPlanType() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ActionPlanType
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetDueDate() *time.Time {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.DueDate
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetPriority() *enums.Priority {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Priority
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Revision
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllActionPlans_ActionPlans_Edges struct {
	Node *GetAllActionPlans_ActionPlans_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllActionPlans_ActionPlans_Edges) GetNode() *GetAllActionPlans_ActionPlans_Edges_Node {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges{}
	}
	return t.Node
}

type GetAllActionPlans_ActionPlans struct {
	Edges []*GetAllActionPlans_ActionPlans_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllActionPlans_ActionPlans) GetEdges() []*GetAllActionPlans_ActionPlans_Edges {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans{}
	}
	return t.Edges
}

type GetActionPlanByID_ActionPlan struct {
	ActionPlanType   *string               "json:\"actionPlanType,omitempty\" graphql:\"actionPlanType\""
	ApprovalRequired *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	CreatedAt        *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details          *string               "json:\"details,omitempty\" graphql:\"details\""
	DueDate          *time.Time            "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	ID               string                "json:\"id\" graphql:\"id\""
	Name             string                "json:\"name\" graphql:\"name\""
	Priority         *enums.Priority       "json:\"priority,omitempty\" graphql:\"priority\""
	ReviewDue        *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Source           *string               "json:\"source,omitempty\" graphql:\"source\""
	Status           *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetActionPlanByID_ActionPlan) GetActionPlanType() *string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.ActionPlanType
}
func (t *GetActionPlanByID_ActionPlan) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.ApprovalRequired
}
func (t *GetActionPlanByID_ActionPlan) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.CreatedAt
}
func (t *GetActionPlanByID_ActionPlan) GetCreatedBy() *string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.CreatedBy
}
func (t *GetActionPlanByID_ActionPlan) GetDetails() *string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.Details
}
func (t *GetActionPlanByID_ActionPlan) GetDueDate() *time.Time {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.DueDate
}
func (t *GetActionPlanByID_ActionPlan) GetID() string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.ID
}
func (t *GetActionPlanByID_ActionPlan) GetName() string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.Name
}
func (t *GetActionPlanByID_ActionPlan) GetPriority() *enums.Priority {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.Priority
}
func (t *GetActionPlanByID_ActionPlan) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.ReviewDue
}
func (t *GetActionPlanByID_ActionPlan) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.ReviewFrequency
}
func (t *GetActionPlanByID_ActionPlan) GetRevision() *string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.Revision
}
func (t *GetActionPlanByID_ActionPlan) GetSource() *string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.Source
}
func (t *GetActionPlanByID_ActionPlan) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.Status
}
func (t *GetActionPlanByID_ActionPlan) GetTags() []string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.Tags
}
func (t *GetActionPlanByID_ActionPlan) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.UpdatedAt
}
func (t *GetActionPlanByID_ActionPlan) GetUpdatedBy() *string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.UpdatedBy
}

type GetActionPlans_ActionPlans_Edges_Node struct {
	ActionPlanType   *string               "json:\"actionPlanType,omitempty\" graphql:\"actionPlanType\""
	ApprovalRequired *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	CreatedAt        *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details          *string               "json:\"details,omitempty\" graphql:\"details\""
	DueDate          *time.Time            "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	ID               string                "json:\"id\" graphql:\"id\""
	Name             string                "json:\"name\" graphql:\"name\""
	Priority         *enums.Priority       "json:\"priority,omitempty\" graphql:\"priority\""
	ReviewDue        *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Source           *string               "json:\"source,omitempty\" graphql:\"source\""
	Status           *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetActionPlans_ActionPlans_Edges_Node) GetActionPlanType() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ActionPlanType
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Details
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetDueDate() *time.Time {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.DueDate
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetID() string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ID
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetName() string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Name
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetPriority() *enums.Priority {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Priority
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Revision
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Source
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Status
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Tags
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetActionPlans_ActionPlans_Edges struct {
	Node *GetActionPlans_ActionPlans_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetActionPlans_ActionPlans_Edges) GetNode() *GetActionPlans_ActionPlans_Edges_Node {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges{}
	}
	return t.Node
}

type GetActionPlans_ActionPlans struct {
	Edges []*GetActionPlans_ActionPlans_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetActionPlans_ActionPlans) GetEdges() []*GetActionPlans_ActionPlans_Edges {
	if t == nil {
		t = &GetActionPlans_ActionPlans{}
	}
	return t.Edges
}

type UpdateActionPlan_UpdateActionPlan_ActionPlan struct {
	ActionPlanType   *string               "json:\"actionPlanType,omitempty\" graphql:\"actionPlanType\""
	ApprovalRequired *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	CreatedAt        *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details          *string               "json:\"details,omitempty\" graphql:\"details\""
	DueDate          *time.Time            "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	ID               string                "json:\"id\" graphql:\"id\""
	Name             string                "json:\"name\" graphql:\"name\""
	Priority         *enums.Priority       "json:\"priority,omitempty\" graphql:\"priority\""
	ReviewDue        *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Source           *string               "json:\"source,omitempty\" graphql:\"source\""
	Status           *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetActionPlanType() *string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.ActionPlanType
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetApprovalRequired() *bool {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.ApprovalRequired
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.CreatedAt
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.CreatedBy
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetDetails() *string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.Details
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetDueDate() *time.Time {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.DueDate
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetID() string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.ID
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetName() string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.Name
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetPriority() *enums.Priority {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.Priority
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetReviewDue() *time.Time {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.ReviewDue
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.ReviewFrequency
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetRevision() *string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.Revision
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetSource() *string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.Source
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.Status
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetTags() []string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.Tags
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.UpdatedAt
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.UpdatedBy
}

type UpdateActionPlan_UpdateActionPlan struct {
	ActionPlan UpdateActionPlan_UpdateActionPlan_ActionPlan "json:\"actionPlan\" graphql:\"actionPlan\""
}

func (t *UpdateActionPlan_UpdateActionPlan) GetActionPlan() *UpdateActionPlan_UpdateActionPlan_ActionPlan {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan{}
	}
	return &t.ActionPlan
}

type GetAllActionPlanHistories_ActionPlanHistories_Edges_Node struct {
	ActionPlanType   *string               "json:\"actionPlanType,omitempty\" graphql:\"actionPlanType\""
	ApprovalRequired *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	CreatedAt        *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details          *string               "json:\"details,omitempty\" graphql:\"details\""
	DueDate          *time.Time            "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	HistoryTime      time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID               string                "json:\"id\" graphql:\"id\""
	Name             string                "json:\"name\" graphql:\"name\""
	Operation        history.OpType        "json:\"operation\" graphql:\"operation\""
	Priority         *enums.Priority       "json:\"priority,omitempty\" graphql:\"priority\""
	Ref              *string               "json:\"ref,omitempty\" graphql:\"ref\""
	ReviewDue        *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Source           *string               "json:\"source,omitempty\" graphql:\"source\""
	Status           *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetActionPlanType() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ActionPlanType
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetDueDate() *time.Time {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.DueDate
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetPriority() *enums.Priority {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Priority
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Revision
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllActionPlanHistories_ActionPlanHistories_Edges struct {
	Node *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges) GetNode() *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges{}
	}
	return t.Node
}

type GetAllActionPlanHistories_ActionPlanHistories struct {
	Edges []*GetAllActionPlanHistories_ActionPlanHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllActionPlanHistories_ActionPlanHistories) GetEdges() []*GetAllActionPlanHistories_ActionPlanHistories_Edges {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories{}
	}
	return t.Edges
}

type GetActionPlanHistories_ActionPlanHistories_Edges_Node struct {
	ActionPlanType   *string               "json:\"actionPlanType,omitempty\" graphql:\"actionPlanType\""
	ApprovalRequired *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	CreatedAt        *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details          *string               "json:\"details,omitempty\" graphql:\"details\""
	DueDate          *time.Time            "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	HistoryTime      time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID               string                "json:\"id\" graphql:\"id\""
	Name             string                "json:\"name\" graphql:\"name\""
	Operation        history.OpType        "json:\"operation\" graphql:\"operation\""
	Priority         *enums.Priority       "json:\"priority,omitempty\" graphql:\"priority\""
	Ref              *string               "json:\"ref,omitempty\" graphql:\"ref\""
	ReviewDue        *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Source           *string               "json:\"source,omitempty\" graphql:\"source\""
	Status           *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetActionPlanType() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ActionPlanType
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetDueDate() *time.Time {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.DueDate
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetPriority() *enums.Priority {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Priority
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Revision
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetActionPlanHistories_ActionPlanHistories_Edges struct {
	Node *GetActionPlanHistories_ActionPlanHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetActionPlanHistories_ActionPlanHistories_Edges) GetNode() *GetActionPlanHistories_ActionPlanHistories_Edges_Node {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges{}
	}
	return t.Node
}

type GetActionPlanHistories_ActionPlanHistories struct {
	Edges []*GetActionPlanHistories_ActionPlanHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetActionPlanHistories_ActionPlanHistories) GetEdges() []*GetActionPlanHistories_ActionPlanHistories_Edges {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories{}
	}
	return t.Edges
}

type AdminSearch_AdminSearch_APITokens_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_APITokens_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_APITokens_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_APITokens_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_APITokens_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_APITokens_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_APITokens_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_APITokens_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_APITokens_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_APITokens_Edges_Node struct {
	DeletedBy     *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID            string   "json:\"id\" graphql:\"id\""
	Name          string   "json:\"name\" graphql:\"name\""
	OwnerID       *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RevokedBy     *string  "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason *string  "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes        []string "json:\"scopes,omitempty\" graphql:\"scopes\""
	Tags          []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *AdminSearch_AdminSearch_APITokens_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_APITokens_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_APITokens_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_APITokens_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_APITokens_Edges_Node) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_APITokens_Edges_Node{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_APITokens_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_APITokens_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_APITokens_Edges_Node) GetRevokedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_APITokens_Edges_Node{}
	}
	return t.RevokedBy
}
func (t *AdminSearch_AdminSearch_APITokens_Edges_Node) GetRevokedReason() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_APITokens_Edges_Node{}
	}
	return t.RevokedReason
}
func (t *AdminSearch_AdminSearch_APITokens_Edges_Node) GetScopes() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_APITokens_Edges_Node{}
	}
	return t.Scopes
}
func (t *AdminSearch_AdminSearch_APITokens_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_APITokens_Edges_Node{}
	}
	return t.Tags
}

type AdminSearch_AdminSearch_APITokens_Edges struct {
	Node *AdminSearch_AdminSearch_APITokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_APITokens_Edges) GetNode() *AdminSearch_AdminSearch_APITokens_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_APITokens_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_APITokens struct {
	Edges      []*AdminSearch_AdminSearch_APITokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_APITokens_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_APITokens) GetEdges() []*AdminSearch_AdminSearch_APITokens_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_APITokens{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_APITokens) GetPageInfo() *AdminSearch_AdminSearch_APITokens_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_APITokens{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_APITokens) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_APITokens{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_ActionPlans_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_ActionPlans_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ActionPlans_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_ActionPlans_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_ActionPlans_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_ActionPlans_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_ActionPlans_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_ActionPlans_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ActionPlans_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_ActionPlans_Edges_Node struct {
	ActionPlanType *string  "json:\"actionPlanType,omitempty\" graphql:\"actionPlanType\""
	ApproverID     *string  "json:\"approverID,omitempty\" graphql:\"approverID\""
	DelegateID     *string  "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	DeletedBy      *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Details        *string  "json:\"details,omitempty\" graphql:\"details\""
	ID             string   "json:\"id\" graphql:\"id\""
	Name           string   "json:\"name\" graphql:\"name\""
	OwnerID        *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Revision       *string  "json:\"revision,omitempty\" graphql:\"revision\""
	Source         *string  "json:\"source,omitempty\" graphql:\"source\""
	Tags           []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *AdminSearch_AdminSearch_ActionPlans_Edges_Node) GetActionPlanType() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ActionPlans_Edges_Node{}
	}
	return t.ActionPlanType
}
func (t *AdminSearch_AdminSearch_ActionPlans_Edges_Node) GetApproverID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ActionPlans_Edges_Node{}
	}
	return t.ApproverID
}
func (t *AdminSearch_AdminSearch_ActionPlans_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ActionPlans_Edges_Node{}
	}
	return t.DelegateID
}
func (t *AdminSearch_AdminSearch_ActionPlans_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ActionPlans_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_ActionPlans_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ActionPlans_Edges_Node{}
	}
	return t.Details
}
func (t *AdminSearch_AdminSearch_ActionPlans_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ActionPlans_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_ActionPlans_Edges_Node) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ActionPlans_Edges_Node{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_ActionPlans_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ActionPlans_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_ActionPlans_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ActionPlans_Edges_Node{}
	}
	return t.Revision
}
func (t *AdminSearch_AdminSearch_ActionPlans_Edges_Node) GetSource() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ActionPlans_Edges_Node{}
	}
	return t.Source
}
func (t *AdminSearch_AdminSearch_ActionPlans_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ActionPlans_Edges_Node{}
	}
	return t.Tags
}

type AdminSearch_AdminSearch_ActionPlans_Edges struct {
	Node *AdminSearch_AdminSearch_ActionPlans_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_ActionPlans_Edges) GetNode() *AdminSearch_AdminSearch_ActionPlans_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_ActionPlans_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_ActionPlans struct {
	Edges      []*AdminSearch_AdminSearch_ActionPlans_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_ActionPlans_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                        "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_ActionPlans) GetEdges() []*AdminSearch_AdminSearch_ActionPlans_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_ActionPlans{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_ActionPlans) GetPageInfo() *AdminSearch_AdminSearch_ActionPlans_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_ActionPlans{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_ActionPlans) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_ActionPlans{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_Contacts_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_Contacts_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Contacts_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_Contacts_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Contacts_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_Contacts_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Contacts_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_Contacts_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Contacts_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_Contacts_Edges_Node struct {
	Address     *string  "json:\"address,omitempty\" graphql:\"address\""
	Company     *string  "json:\"company,omitempty\" graphql:\"company\""
	DeletedBy   *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Email       *string  "json:\"email,omitempty\" graphql:\"email\""
	FullName    string   "json:\"fullName\" graphql:\"fullName\""
	ID          string   "json:\"id\" graphql:\"id\""
	OwnerID     *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string  "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string  "json:\"title,omitempty\" graphql:\"title\""
}

func (t *AdminSearch_AdminSearch_Contacts_Edges_Node) GetAddress() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Contacts_Edges_Node{}
	}
	return t.Address
}
func (t *AdminSearch_AdminSearch_Contacts_Edges_Node) GetCompany() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Contacts_Edges_Node{}
	}
	return t.Company
}
func (t *AdminSearch_AdminSearch_Contacts_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Contacts_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Contacts_Edges_Node) GetEmail() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Contacts_Edges_Node{}
	}
	return t.Email
}
func (t *AdminSearch_AdminSearch_Contacts_Edges_Node) GetFullName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Contacts_Edges_Node{}
	}
	return t.FullName
}
func (t *AdminSearch_AdminSearch_Contacts_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Contacts_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Contacts_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Contacts_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Contacts_Edges_Node) GetPhoneNumber() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Contacts_Edges_Node{}
	}
	return t.PhoneNumber
}
func (t *AdminSearch_AdminSearch_Contacts_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Contacts_Edges_Node{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Contacts_Edges_Node) GetTitle() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Contacts_Edges_Node{}
	}
	return t.Title
}

type AdminSearch_AdminSearch_Contacts_Edges struct {
	Node *AdminSearch_AdminSearch_Contacts_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_Contacts_Edges) GetNode() *AdminSearch_AdminSearch_Contacts_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_Contacts_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_Contacts struct {
	Edges      []*AdminSearch_AdminSearch_Contacts_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_Contacts_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_Contacts) GetEdges() []*AdminSearch_AdminSearch_Contacts_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_Contacts{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_Contacts) GetPageInfo() *AdminSearch_AdminSearch_Contacts_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_Contacts{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_Contacts) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_Contacts{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_Controls_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_Controls_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_Controls_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_Controls_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_Controls_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_Controls_Edges_Node struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	AuditorReferenceID     *string                          "json:\"auditorReferenceID,omitempty\" graphql:\"auditorReferenceID\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlOwnerID         *string                          "json:\"controlOwnerID,omitempty\" graphql:\"controlOwnerID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	DelegateID             *string                          "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	DeletedBy              *string                          "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	ReferenceID            *string                          "json:\"referenceID,omitempty\" graphql:\"referenceID\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	StandardID             *string                          "json:\"standardID,omitempty\" graphql:\"standardID\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *AdminSearch_AdminSearch_Controls_Edges_Node) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges_Node{}
	}
	return t.AssessmentMethods
}
func (t *AdminSearch_AdminSearch_Controls_Edges_Node) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges_Node{}
	}
	return t.AssessmentObjectives
}
func (t *AdminSearch_AdminSearch_Controls_Edges_Node) GetAuditorReferenceID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges_Node{}
	}
	return t.AuditorReferenceID
}
func (t *AdminSearch_AdminSearch_Controls_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges_Node{}
	}
	return t.Category
}
func (t *AdminSearch_AdminSearch_Controls_Edges_Node) GetCategoryID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges_Node{}
	}
	return t.CategoryID
}
func (t *AdminSearch_AdminSearch_Controls_Edges_Node) GetControlOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges_Node{}
	}
	return t.ControlOwnerID
}
func (t *AdminSearch_AdminSearch_Controls_Edges_Node) GetControlQuestions() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges_Node{}
	}
	return t.ControlQuestions
}
func (t *AdminSearch_AdminSearch_Controls_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges_Node{}
	}
	return t.DelegateID
}
func (t *AdminSearch_AdminSearch_Controls_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Controls_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges_Node{}
	}
	return t.DisplayID
}
func (t *AdminSearch_AdminSearch_Controls_Edges_Node) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges_Node{}
	}
	return t.ExampleEvidence
}
func (t *AdminSearch_AdminSearch_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Controls_Edges_Node) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges_Node{}
	}
	return t.ImplementationGuidance
}
func (t *AdminSearch_AdminSearch_Controls_Edges_Node) GetMappedCategories() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges_Node{}
	}
	return t.MappedCategories
}
func (t *AdminSearch_AdminSearch_Controls_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges_Node{}
	}
	return t.RefCode
}
func (t *AdminSearch_AdminSearch_Controls_Edges_Node) GetReferenceID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges_Node{}
	}
	return t.ReferenceID
}
func (t *AdminSearch_AdminSearch_Controls_Edges_Node) GetReferences() []*models.Reference {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges_Node{}
	}
	return t.References
}
func (t *AdminSearch_AdminSearch_Controls_Edges_Node) GetStandardID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges_Node{}
	}
	return t.StandardID
}
func (t *AdminSearch_AdminSearch_Controls_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges_Node{}
	}
	return t.Subcategory
}
func (t *AdminSearch_AdminSearch_Controls_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges_Node{}
	}
	return t.Tags
}

type AdminSearch_AdminSearch_Controls_Edges struct {
	Node *AdminSearch_AdminSearch_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_Controls_Edges) GetNode() *AdminSearch_AdminSearch_Controls_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_Controls struct {
	Edges      []*AdminSearch_AdminSearch_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_Controls_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_Controls) GetEdges() []*AdminSearch_AdminSearch_Controls_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_Controls) GetPageInfo() *AdminSearch_AdminSearch_Controls_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_Controls{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_ControlImplementations_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_ControlImplementations_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlImplementations_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_ControlImplementations_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlImplementations_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_ControlImplementations_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlImplementations_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_ControlImplementations_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlImplementations_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_ControlImplementations_Edges_Node struct {
	DeletedBy *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Details   *string  "json:\"details,omitempty\" graphql:\"details\""
	ID        string   "json:\"id\" graphql:\"id\""
	OwnerID   *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *AdminSearch_AdminSearch_ControlImplementations_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlImplementations_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_ControlImplementations_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlImplementations_Edges_Node{}
	}
	return t.Details
}
func (t *AdminSearch_AdminSearch_ControlImplementations_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlImplementations_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_ControlImplementations_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlImplementations_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_ControlImplementations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlImplementations_Edges_Node{}
	}
	return t.Tags
}

type AdminSearch_AdminSearch_ControlImplementations_Edges struct {
	Node *AdminSearch_AdminSearch_ControlImplementations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_ControlImplementations_Edges) GetNode() *AdminSearch_AdminSearch_ControlImplementations_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlImplementations_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_ControlImplementations struct {
	Edges      []*AdminSearch_AdminSearch_ControlImplementations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_ControlImplementations_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_ControlImplementations) GetEdges() []*AdminSearch_AdminSearch_ControlImplementations_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlImplementations{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_ControlImplementations) GetPageInfo() *AdminSearch_AdminSearch_ControlImplementations_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlImplementations{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_ControlImplementations) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlImplementations{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_ControlObjectives_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_ControlObjectives_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlObjectives_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_ControlObjectives_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlObjectives_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_ControlObjectives_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlObjectives_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_ControlObjectives_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlObjectives_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_ControlObjectives_Edges_Node struct {
	Category             *string  "json:\"category,omitempty\" graphql:\"category\""
	ControlObjectiveType *string  "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	DeletedBy            *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	DesiredOutcome       *string  "json:\"desiredOutcome,omitempty\" graphql:\"desiredOutcome\""
	DisplayID            string   "json:\"displayID\" graphql:\"displayID\""
	ID                   string   "json:\"id\" graphql:\"id\""
	Name                 string   "json:\"name\" graphql:\"name\""
	OwnerID              *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Revision             *string  "json:\"revision,omitempty\" graphql:\"revision\""
	Status               *string  "json:\"status,omitempty\" graphql:\"status\""
	Subcategory          *string  "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                 []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *AdminSearch_AdminSearch_ControlObjectives_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlObjectives_Edges_Node{}
	}
	return t.Category
}
func (t *AdminSearch_AdminSearch_ControlObjectives_Edges_Node) GetControlObjectiveType() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlObjectives_Edges_Node{}
	}
	return t.ControlObjectiveType
}
func (t *AdminSearch_AdminSearch_ControlObjectives_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlObjectives_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_ControlObjectives_Edges_Node) GetDesiredOutcome() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlObjectives_Edges_Node{}
	}
	return t.DesiredOutcome
}
func (t *AdminSearch_AdminSearch_ControlObjectives_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlObjectives_Edges_Node{}
	}
	return t.DisplayID
}
func (t *AdminSearch_AdminSearch_ControlObjectives_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlObjectives_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_ControlObjectives_Edges_Node) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlObjectives_Edges_Node{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_ControlObjectives_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlObjectives_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_ControlObjectives_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlObjectives_Edges_Node{}
	}
	return t.Revision
}
func (t *AdminSearch_AdminSearch_ControlObjectives_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlObjectives_Edges_Node{}
	}
	return t.Status
}
func (t *AdminSearch_AdminSearch_ControlObjectives_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlObjectives_Edges_Node{}
	}
	return t.Subcategory
}
func (t *AdminSearch_AdminSearch_ControlObjectives_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlObjectives_Edges_Node{}
	}
	return t.Tags
}

type AdminSearch_AdminSearch_ControlObjectives_Edges struct {
	Node *AdminSearch_AdminSearch_ControlObjectives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_ControlObjectives_Edges) GetNode() *AdminSearch_AdminSearch_ControlObjectives_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlObjectives_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_ControlObjectives struct {
	Edges      []*AdminSearch_AdminSearch_ControlObjectives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_ControlObjectives_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_ControlObjectives) GetEdges() []*AdminSearch_AdminSearch_ControlObjectives_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlObjectives{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_ControlObjectives) GetPageInfo() *AdminSearch_AdminSearch_ControlObjectives_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlObjectives{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_ControlObjectives) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_ControlObjectives{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_DocumentData_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_DocumentData_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_DocumentData_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_DocumentData_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_DocumentData_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_DocumentData_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_DocumentData_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_DocumentData_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_DocumentData_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_DocumentData_Edges_Node struct {
	Data       map[string]any "json:\"data\" graphql:\"data\""
	DeletedBy  *string        "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID         string         "json:\"id\" graphql:\"id\""
	OwnerID    *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags       []string       "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateID string         "json:\"templateID\" graphql:\"templateID\""
}

func (t *AdminSearch_AdminSearch_DocumentData_Edges_Node) GetData() map[string]any {
	if t == nil {
		t = &AdminSearch_AdminSearch_DocumentData_Edges_Node{}
	}
	return t.Data
}
func (t *AdminSearch_AdminSearch_DocumentData_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_DocumentData_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_DocumentData_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_DocumentData_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_DocumentData_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_DocumentData_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_DocumentData_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_DocumentData_Edges_Node{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_DocumentData_Edges_Node) GetTemplateID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_DocumentData_Edges_Node{}
	}
	return t.TemplateID
}

type AdminSearch_AdminSearch_DocumentData_Edges struct {
	Node *AdminSearch_AdminSearch_DocumentData_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_DocumentData_Edges) GetNode() *AdminSearch_AdminSearch_DocumentData_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_DocumentData_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_DocumentData struct {
	Edges      []*AdminSearch_AdminSearch_DocumentData_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_DocumentData_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_DocumentData) GetEdges() []*AdminSearch_AdminSearch_DocumentData_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_DocumentData{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_DocumentData) GetPageInfo() *AdminSearch_AdminSearch_DocumentData_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_DocumentData{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_DocumentData) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_DocumentData{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_Entities_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_Entities_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Entities_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_Entities_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Entities_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_Entities_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Entities_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_Entities_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Entities_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_Entities_Edges_Node struct {
	DeletedBy    *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Description  *string  "json:\"description,omitempty\" graphql:\"description\""
	DisplayName  *string  "json:\"displayName,omitempty\" graphql:\"displayName\""
	Domains      []string "json:\"domains,omitempty\" graphql:\"domains\""
	EntityTypeID *string  "json:\"entityTypeID,omitempty\" graphql:\"entityTypeID\""
	ID           string   "json:\"id\" graphql:\"id\""
	Name         *string  "json:\"name,omitempty\" graphql:\"name\""
	OwnerID      *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status       *string  "json:\"status,omitempty\" graphql:\"status\""
	Tags         []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *AdminSearch_AdminSearch_Entities_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Entities_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Entities_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Entities_Edges_Node{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Entities_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Entities_Edges_Node{}
	}
	return t.DisplayName
}
func (t *AdminSearch_AdminSearch_Entities_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Entities_Edges_Node{}
	}
	return t.Domains
}
func (t *AdminSearch_AdminSearch_Entities_Edges_Node) GetEntityTypeID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Entities_Edges_Node{}
	}
	return t.EntityTypeID
}
func (t *AdminSearch_AdminSearch_Entities_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Entities_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Entities_Edges_Node) GetName() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Entities_Edges_Node{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Entities_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Entities_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Entities_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Entities_Edges_Node{}
	}
	return t.Status
}
func (t *AdminSearch_AdminSearch_Entities_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Entities_Edges_Node{}
	}
	return t.Tags
}

type AdminSearch_AdminSearch_Entities_Edges struct {
	Node *AdminSearch_AdminSearch_Entities_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_Entities_Edges) GetNode() *AdminSearch_AdminSearch_Entities_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_Entities_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_Entities struct {
	Edges      []*AdminSearch_AdminSearch_Entities_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_Entities_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_Entities) GetEdges() []*AdminSearch_AdminSearch_Entities_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_Entities{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_Entities) GetPageInfo() *AdminSearch_AdminSearch_Entities_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_Entities{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_Entities) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_Entities{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_EntityTypes_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_EntityTypes_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_EntityTypes_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_EntityTypes_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_EntityTypes_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_EntityTypes_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_EntityTypes_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_EntityTypes_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_EntityTypes_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_EntityTypes_Edges_Node struct {
	DeletedBy *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID        string   "json:\"id\" graphql:\"id\""
	Name      string   "json:\"name\" graphql:\"name\""
	OwnerID   *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *AdminSearch_AdminSearch_EntityTypes_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_EntityTypes_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_EntityTypes_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_EntityTypes_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_EntityTypes_Edges_Node) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_EntityTypes_Edges_Node{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_EntityTypes_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_EntityTypes_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_EntityTypes_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_EntityTypes_Edges_Node{}
	}
	return t.Tags
}

type AdminSearch_AdminSearch_EntityTypes_Edges struct {
	Node *AdminSearch_AdminSearch_EntityTypes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_EntityTypes_Edges) GetNode() *AdminSearch_AdminSearch_EntityTypes_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_EntityTypes_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_EntityTypes struct {
	Edges      []*AdminSearch_AdminSearch_EntityTypes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_EntityTypes_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                        "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_EntityTypes) GetEdges() []*AdminSearch_AdminSearch_EntityTypes_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_EntityTypes{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_EntityTypes) GetPageInfo() *AdminSearch_AdminSearch_EntityTypes_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_EntityTypes{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_EntityTypes) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_EntityTypes{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_Events_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_Events_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Events_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_Events_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Events_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_Events_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Events_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_Events_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Events_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_Events_Edges_Node struct {
	CorrelationID *string        "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	EventID       *string        "json:\"eventID,omitempty\" graphql:\"eventID\""
	EventType     string         "json:\"eventType\" graphql:\"eventType\""
	ID            string         "json:\"id\" graphql:\"id\""
	Metadata      map[string]any "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags          []string       "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *AdminSearch_AdminSearch_Events_Edges_Node) GetCorrelationID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Events_Edges_Node{}
	}
	return t.CorrelationID
}
func (t *AdminSearch_AdminSearch_Events_Edges_Node) GetEventID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Events_Edges_Node{}
	}
	return t.EventID
}
func (t *AdminSearch_AdminSearch_Events_Edges_Node) GetEventType() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Events_Edges_Node{}
	}
	return t.EventType
}
func (t *AdminSearch_AdminSearch_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Events_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Events_Edges_Node) GetMetadata() map[string]any {
	if t == nil {
		t = &AdminSearch_AdminSearch_Events_Edges_Node{}
	}
	return t.Metadata
}
func (t *AdminSearch_AdminSearch_Events_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Events_Edges_Node{}
	}
	return t.Tags
}

type AdminSearch_AdminSearch_Events_Edges struct {
	Node *AdminSearch_AdminSearch_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_Events_Edges) GetNode() *AdminSearch_AdminSearch_Events_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_Events_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_Events struct {
	Edges      []*AdminSearch_AdminSearch_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_Events_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_Events) GetEdges() []*AdminSearch_AdminSearch_Events_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_Events{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_Events) GetPageInfo() *AdminSearch_AdminSearch_Events_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_Events{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_Events) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_Events{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_Evidences_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_Evidences_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Evidences_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_Evidences_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Evidences_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_Evidences_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Evidences_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_Evidences_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Evidences_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_Evidences_Edges_Node struct {
	CollectionProcedure *string  "json:\"collectionProcedure,omitempty\" graphql:\"collectionProcedure\""
	DeletedBy           *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Description         *string  "json:\"description,omitempty\" graphql:\"description\""
	DisplayID           string   "json:\"displayID\" graphql:\"displayID\""
	ID                  string   "json:\"id\" graphql:\"id\""
	Name                string   "json:\"name\" graphql:\"name\""
	OwnerID             *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Source              *string  "json:\"source,omitempty\" graphql:\"source\""
	Tags                []string "json:\"tags,omitempty\" graphql:\"tags\""
	URL                 *string  "json:\"url,omitempty\" graphql:\"url\""
}

func (t *AdminSearch_AdminSearch_Evidences_Edges_Node) GetCollectionProcedure() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Evidences_Edges_Node{}
	}
	return t.CollectionProcedure
}
func (t *AdminSearch_AdminSearch_Evidences_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Evidences_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Evidences_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Evidences_Edges_Node{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Evidences_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Evidences_Edges_Node{}
	}
	return t.DisplayID
}
func (t *AdminSearch_AdminSearch_Evidences_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Evidences_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Evidences_Edges_Node) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Evidences_Edges_Node{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Evidences_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Evidences_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Evidences_Edges_Node) GetSource() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Evidences_Edges_Node{}
	}
	return t.Source
}
func (t *AdminSearch_AdminSearch_Evidences_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Evidences_Edges_Node{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Evidences_Edges_Node) GetURL() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Evidences_Edges_Node{}
	}
	return t.URL
}

type AdminSearch_AdminSearch_Evidences_Edges struct {
	Node *AdminSearch_AdminSearch_Evidences_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_Evidences_Edges) GetNode() *AdminSearch_AdminSearch_Evidences_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_Evidences_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_Evidences struct {
	Edges      []*AdminSearch_AdminSearch_Evidences_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_Evidences_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_Evidences) GetEdges() []*AdminSearch_AdminSearch_Evidences_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_Evidences{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_Evidences) GetPageInfo() *AdminSearch_AdminSearch_Evidences_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_Evidences{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_Evidences) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_Evidences{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_Files_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_Files_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Files_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_Files_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Files_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_Files_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Files_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_Files_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Files_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_Files_Edges_Node struct {
	CategoryType          *string  "json:\"categoryType,omitempty\" graphql:\"categoryType\""
	DeletedBy             *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	DetectedContentType   string   "json:\"detectedContentType\" graphql:\"detectedContentType\""
	DetectedMimeType      *string  "json:\"detectedMimeType,omitempty\" graphql:\"detectedMimeType\""
	ID                    string   "json:\"id\" graphql:\"id\""
	Md5Hash               *string  "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	ProvidedFileExtension string   "json:\"providedFileExtension\" graphql:\"providedFileExtension\""
	ProvidedFileName      string   "json:\"providedFileName\" graphql:\"providedFileName\""
	StoragePath           *string  "json:\"storagePath,omitempty\" graphql:\"storagePath\""
	StorageScheme         *string  "json:\"storageScheme,omitempty\" graphql:\"storageScheme\""
	StorageVolume         *string  "json:\"storageVolume,omitempty\" graphql:\"storageVolume\""
	StoreKey              *string  "json:\"storeKey,omitempty\" graphql:\"storeKey\""
	Tags                  []string "json:\"tags,omitempty\" graphql:\"tags\""
	URI                   *string  "json:\"uri,omitempty\" graphql:\"uri\""
}

func (t *AdminSearch_AdminSearch_Files_Edges_Node) GetCategoryType() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Files_Edges_Node{}
	}
	return t.CategoryType
}
func (t *AdminSearch_AdminSearch_Files_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Files_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Files_Edges_Node) GetDetectedContentType() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Files_Edges_Node{}
	}
	return t.DetectedContentType
}
func (t *AdminSearch_AdminSearch_Files_Edges_Node) GetDetectedMimeType() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Files_Edges_Node{}
	}
	return t.DetectedMimeType
}
func (t *AdminSearch_AdminSearch_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Files_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Files_Edges_Node) GetMd5Hash() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Files_Edges_Node{}
	}
	return t.Md5Hash
}
func (t *AdminSearch_AdminSearch_Files_Edges_Node) GetProvidedFileExtension() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Files_Edges_Node{}
	}
	return t.ProvidedFileExtension
}
func (t *AdminSearch_AdminSearch_Files_Edges_Node) GetProvidedFileName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Files_Edges_Node{}
	}
	return t.ProvidedFileName
}
func (t *AdminSearch_AdminSearch_Files_Edges_Node) GetStoragePath() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Files_Edges_Node{}
	}
	return t.StoragePath
}
func (t *AdminSearch_AdminSearch_Files_Edges_Node) GetStorageScheme() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Files_Edges_Node{}
	}
	return t.StorageScheme
}
func (t *AdminSearch_AdminSearch_Files_Edges_Node) GetStorageVolume() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Files_Edges_Node{}
	}
	return t.StorageVolume
}
func (t *AdminSearch_AdminSearch_Files_Edges_Node) GetStoreKey() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Files_Edges_Node{}
	}
	return t.StoreKey
}
func (t *AdminSearch_AdminSearch_Files_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Files_Edges_Node{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Files_Edges_Node) GetURI() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Files_Edges_Node{}
	}
	return t.URI
}

type AdminSearch_AdminSearch_Files_Edges struct {
	Node *AdminSearch_AdminSearch_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_Files_Edges) GetNode() *AdminSearch_AdminSearch_Files_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_Files_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_Files struct {
	Edges      []*AdminSearch_AdminSearch_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_Files_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_Files) GetEdges() []*AdminSearch_AdminSearch_Files_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_Files{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_Files) GetPageInfo() *AdminSearch_AdminSearch_Files_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_Files{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_Files) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_Files{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_Groups_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_Groups_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Groups_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_Groups_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Groups_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_Groups_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Groups_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_Groups_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Groups_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_Groups_Edges_Node struct {
	DeletedBy   *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	DisplayID   string   "json:\"displayID\" graphql:\"displayID\""
	DisplayName string   "json:\"displayName\" graphql:\"displayName\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	OwnerID     *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *AdminSearch_AdminSearch_Groups_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Groups_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Groups_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Groups_Edges_Node{}
	}
	return t.DisplayID
}
func (t *AdminSearch_AdminSearch_Groups_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Groups_Edges_Node{}
	}
	return t.DisplayName
}
func (t *AdminSearch_AdminSearch_Groups_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Groups_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Groups_Edges_Node) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Groups_Edges_Node{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Groups_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Groups_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Groups_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Groups_Edges_Node{}
	}
	return t.Tags
}

type AdminSearch_AdminSearch_Groups_Edges struct {
	Node *AdminSearch_AdminSearch_Groups_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_Groups_Edges) GetNode() *AdminSearch_AdminSearch_Groups_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_Groups_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_Groups struct {
	Edges      []*AdminSearch_AdminSearch_Groups_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_Groups_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_Groups) GetEdges() []*AdminSearch_AdminSearch_Groups_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_Groups{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_Groups) GetPageInfo() *AdminSearch_AdminSearch_Groups_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_Groups{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_Groups) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_Groups{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_Integrations_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_Integrations_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Integrations_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_Integrations_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Integrations_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_Integrations_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Integrations_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_Integrations_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Integrations_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_Integrations_Edges_Node struct {
	DeletedBy *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID        string   "json:\"id\" graphql:\"id\""
	Kind      *string  "json:\"kind,omitempty\" graphql:\"kind\""
	Name      string   "json:\"name\" graphql:\"name\""
	OwnerID   *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *AdminSearch_AdminSearch_Integrations_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Integrations_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Integrations_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Integrations_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Integrations_Edges_Node) GetKind() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Integrations_Edges_Node{}
	}
	return t.Kind
}
func (t *AdminSearch_AdminSearch_Integrations_Edges_Node) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Integrations_Edges_Node{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Integrations_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Integrations_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Integrations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Integrations_Edges_Node{}
	}
	return t.Tags
}

type AdminSearch_AdminSearch_Integrations_Edges struct {
	Node *AdminSearch_AdminSearch_Integrations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_Integrations_Edges) GetNode() *AdminSearch_AdminSearch_Integrations_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_Integrations_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_Integrations struct {
	Edges      []*AdminSearch_AdminSearch_Integrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_Integrations_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_Integrations) GetEdges() []*AdminSearch_AdminSearch_Integrations_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_Integrations{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_Integrations) GetPageInfo() *AdminSearch_AdminSearch_Integrations_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_Integrations{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_Integrations) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_Integrations{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_InternalPolicies_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_InternalPolicies_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_InternalPolicies_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_InternalPolicies_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_InternalPolicies_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_InternalPolicies_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_InternalPolicies_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_InternalPolicies_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_InternalPolicies_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_InternalPolicies_Edges_Node struct {
	ApproverID *string  "json:\"approverID,omitempty\" graphql:\"approverID\""
	DelegateID *string  "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	DeletedBy  *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Details    *string  "json:\"details,omitempty\" graphql:\"details\""
	DisplayID  string   "json:\"displayID\" graphql:\"displayID\""
	ID         string   "json:\"id\" graphql:\"id\""
	Name       string   "json:\"name\" graphql:\"name\""
	OwnerID    *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PolicyType *string  "json:\"policyType,omitempty\" graphql:\"policyType\""
	Revision   *string  "json:\"revision,omitempty\" graphql:\"revision\""
	Tags       []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *AdminSearch_AdminSearch_InternalPolicies_Edges_Node) GetApproverID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_InternalPolicies_Edges_Node{}
	}
	return t.ApproverID
}
func (t *AdminSearch_AdminSearch_InternalPolicies_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_InternalPolicies_Edges_Node{}
	}
	return t.DelegateID
}
func (t *AdminSearch_AdminSearch_InternalPolicies_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_InternalPolicies_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_InternalPolicies_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_InternalPolicies_Edges_Node{}
	}
	return t.Details
}
func (t *AdminSearch_AdminSearch_InternalPolicies_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_InternalPolicies_Edges_Node{}
	}
	return t.DisplayID
}
func (t *AdminSearch_AdminSearch_InternalPolicies_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_InternalPolicies_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_InternalPolicies_Edges_Node) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_InternalPolicies_Edges_Node{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_InternalPolicies_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_InternalPolicies_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_InternalPolicies_Edges_Node) GetPolicyType() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_InternalPolicies_Edges_Node{}
	}
	return t.PolicyType
}
func (t *AdminSearch_AdminSearch_InternalPolicies_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_InternalPolicies_Edges_Node{}
	}
	return t.Revision
}
func (t *AdminSearch_AdminSearch_InternalPolicies_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_InternalPolicies_Edges_Node{}
	}
	return t.Tags
}

type AdminSearch_AdminSearch_InternalPolicies_Edges struct {
	Node *AdminSearch_AdminSearch_InternalPolicies_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_InternalPolicies_Edges) GetNode() *AdminSearch_AdminSearch_InternalPolicies_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_InternalPolicies_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_InternalPolicies struct {
	Edges      []*AdminSearch_AdminSearch_InternalPolicies_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_InternalPolicies_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                             "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_InternalPolicies) GetEdges() []*AdminSearch_AdminSearch_InternalPolicies_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_InternalPolicies{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_InternalPolicies) GetPageInfo() *AdminSearch_AdminSearch_InternalPolicies_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_InternalPolicies{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_InternalPolicies) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_InternalPolicies{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_Invites_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_Invites_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Invites_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_Invites_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Invites_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_Invites_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Invites_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_Invites_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Invites_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_Invites_Edges_Node struct {
	DeletedBy   *string "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID          string  "json:\"id\" graphql:\"id\""
	OwnerID     *string "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Recipient   string  "json:\"recipient\" graphql:\"recipient\""
	RequestorID *string "json:\"requestorID,omitempty\" graphql:\"requestorID\""
}

func (t *AdminSearch_AdminSearch_Invites_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Invites_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Invites_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Invites_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Invites_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Invites_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Invites_Edges_Node) GetRecipient() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Invites_Edges_Node{}
	}
	return t.Recipient
}
func (t *AdminSearch_AdminSearch_Invites_Edges_Node) GetRequestorID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Invites_Edges_Node{}
	}
	return t.RequestorID
}

type AdminSearch_AdminSearch_Invites_Edges struct {
	Node *AdminSearch_AdminSearch_Invites_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_Invites_Edges) GetNode() *AdminSearch_AdminSearch_Invites_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_Invites_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_Invites struct {
	Edges      []*AdminSearch_AdminSearch_Invites_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_Invites_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_Invites) GetEdges() []*AdminSearch_AdminSearch_Invites_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_Invites{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_Invites) GetPageInfo() *AdminSearch_AdminSearch_Invites_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_Invites{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_Invites) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_Invites{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_MappedControls_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_MappedControls_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_MappedControls_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_MappedControls_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_MappedControls_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_MappedControls_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_MappedControls_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_MappedControls_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_MappedControls_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_MappedControls_Edges_Node struct {
	DeletedBy   *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID          string   "json:\"id\" graphql:\"id\""
	MappingType *string  "json:\"mappingType,omitempty\" graphql:\"mappingType\""
	Relation    *string  "json:\"relation,omitempty\" graphql:\"relation\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *AdminSearch_AdminSearch_MappedControls_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_MappedControls_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_MappedControls_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_MappedControls_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_MappedControls_Edges_Node) GetMappingType() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_MappedControls_Edges_Node{}
	}
	return t.MappingType
}
func (t *AdminSearch_AdminSearch_MappedControls_Edges_Node) GetRelation() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_MappedControls_Edges_Node{}
	}
	return t.Relation
}
func (t *AdminSearch_AdminSearch_MappedControls_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_MappedControls_Edges_Node{}
	}
	return t.Tags
}

type AdminSearch_AdminSearch_MappedControls_Edges struct {
	Node *AdminSearch_AdminSearch_MappedControls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_MappedControls_Edges) GetNode() *AdminSearch_AdminSearch_MappedControls_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_MappedControls_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_MappedControls struct {
	Edges      []*AdminSearch_AdminSearch_MappedControls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_MappedControls_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                           "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_MappedControls) GetEdges() []*AdminSearch_AdminSearch_MappedControls_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_MappedControls{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_MappedControls) GetPageInfo() *AdminSearch_AdminSearch_MappedControls_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_MappedControls{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_MappedControls) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_MappedControls{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_Narratives_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_Narratives_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Narratives_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_Narratives_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Narratives_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_Narratives_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Narratives_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_Narratives_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Narratives_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_Narratives_Edges_Node struct {
	DeletedBy   *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	Details     *string  "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string   "json:\"displayID\" graphql:\"displayID\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	OwnerID     *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *AdminSearch_AdminSearch_Narratives_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Narratives_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Narratives_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Narratives_Edges_Node{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Narratives_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Narratives_Edges_Node{}
	}
	return t.Details
}
func (t *AdminSearch_AdminSearch_Narratives_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Narratives_Edges_Node{}
	}
	return t.DisplayID
}
func (t *AdminSearch_AdminSearch_Narratives_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Narratives_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Narratives_Edges_Node) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Narratives_Edges_Node{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Narratives_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Narratives_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Narratives_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Narratives_Edges_Node{}
	}
	return t.Tags
}

type AdminSearch_AdminSearch_Narratives_Edges struct {
	Node *AdminSearch_AdminSearch_Narratives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_Narratives_Edges) GetNode() *AdminSearch_AdminSearch_Narratives_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_Narratives_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_Narratives struct {
	Edges      []*AdminSearch_AdminSearch_Narratives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_Narratives_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                       "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_Narratives) GetEdges() []*AdminSearch_AdminSearch_Narratives_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_Narratives{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_Narratives) GetPageInfo() *AdminSearch_AdminSearch_Narratives_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_Narratives{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_Narratives) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_Narratives{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_OrgSubscriptions_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_OrgSubscriptions_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrgSubscriptions_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_OrgSubscriptions_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrgSubscriptions_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_OrgSubscriptions_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrgSubscriptions_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_OrgSubscriptions_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrgSubscriptions_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node struct {
	DaysUntilDue             *string       "json:\"daysUntilDue,omitempty\" graphql:\"daysUntilDue\""
	DeletedBy                *string       "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	FeatureLookupKeys        []string      "json:\"featureLookupKeys,omitempty\" graphql:\"featureLookupKeys\""
	Features                 []string      "json:\"features,omitempty\" graphql:\"features\""
	ID                       string        "json:\"id\" graphql:\"id\""
	OwnerID                  *string       "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProductPrice             *models.Price "json:\"productPrice,omitempty\" graphql:\"productPrice\""
	ProductTier              *string       "json:\"productTier,omitempty\" graphql:\"productTier\""
	StripeCustomerID         *string       "json:\"stripeCustomerID,omitempty\" graphql:\"stripeCustomerID\""
	StripeProductTierID      *string       "json:\"stripeProductTierID,omitempty\" graphql:\"stripeProductTierID\""
	StripeSubscriptionID     *string       "json:\"stripeSubscriptionID,omitempty\" graphql:\"stripeSubscriptionID\""
	StripeSubscriptionStatus *string       "json:\"stripeSubscriptionStatus,omitempty\" graphql:\"stripeSubscriptionStatus\""
	Tags                     []string      "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node) GetDaysUntilDue() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node{}
	}
	return t.DaysUntilDue
}
func (t *AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node) GetFeatureLookupKeys() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node{}
	}
	return t.FeatureLookupKeys
}
func (t *AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node) GetFeatures() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node{}
	}
	return t.Features
}
func (t *AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node) GetProductPrice() *models.Price {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node{}
	}
	return t.ProductPrice
}
func (t *AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node) GetProductTier() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node{}
	}
	return t.ProductTier
}
func (t *AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node) GetStripeCustomerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node{}
	}
	return t.StripeCustomerID
}
func (t *AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node) GetStripeProductTierID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node{}
	}
	return t.StripeProductTierID
}
func (t *AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node) GetStripeSubscriptionID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node{}
	}
	return t.StripeSubscriptionID
}
func (t *AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node) GetStripeSubscriptionStatus() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node{}
	}
	return t.StripeSubscriptionStatus
}
func (t *AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node{}
	}
	return t.Tags
}

type AdminSearch_AdminSearch_OrgSubscriptions_Edges struct {
	Node *AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_OrgSubscriptions_Edges) GetNode() *AdminSearch_AdminSearch_OrgSubscriptions_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrgSubscriptions_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_OrgSubscriptions struct {
	Edges      []*AdminSearch_AdminSearch_OrgSubscriptions_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_OrgSubscriptions_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                             "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_OrgSubscriptions) GetEdges() []*AdminSearch_AdminSearch_OrgSubscriptions_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrgSubscriptions{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_OrgSubscriptions) GetPageInfo() *AdminSearch_AdminSearch_OrgSubscriptions_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrgSubscriptions{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_OrgSubscriptions) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrgSubscriptions{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_Organizations_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_Organizations_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Organizations_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_Organizations_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Organizations_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_Organizations_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Organizations_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_Organizations_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Organizations_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_Organizations_Edges_Node struct {
	AvatarLocalFileID *string  "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string  "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	DeletedBy         *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	DisplayName       string   "json:\"displayName\" graphql:\"displayName\""
	ID                string   "json:\"id\" graphql:\"id\""
	Name              string   "json:\"name\" graphql:\"name\""
	Tags              []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *AdminSearch_AdminSearch_Organizations_Edges_Node) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Organizations_Edges_Node{}
	}
	return t.AvatarLocalFileID
}
func (t *AdminSearch_AdminSearch_Organizations_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Organizations_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *AdminSearch_AdminSearch_Organizations_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Organizations_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Organizations_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Organizations_Edges_Node{}
	}
	return t.DisplayName
}
func (t *AdminSearch_AdminSearch_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Organizations_Edges_Node{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Organizations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Organizations_Edges_Node{}
	}
	return t.Tags
}

type AdminSearch_AdminSearch_Organizations_Edges struct {
	Node *AdminSearch_AdminSearch_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_Organizations_Edges) GetNode() *AdminSearch_AdminSearch_Organizations_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_Organizations_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_Organizations struct {
	Edges      []*AdminSearch_AdminSearch_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_Organizations_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                          "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_Organizations) GetEdges() []*AdminSearch_AdminSearch_Organizations_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_Organizations{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_Organizations) GetPageInfo() *AdminSearch_AdminSearch_Organizations_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_Organizations{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_Organizations) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_Organizations{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_OrganizationSettings_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_OrganizationSettings_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrganizationSettings_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_OrganizationSettings_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrganizationSettings_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_OrganizationSettings_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrganizationSettings_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_OrganizationSettings_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrganizationSettings_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_OrganizationSettings_Edges_Node struct {
	AllowedEmailDomains []string        "json:\"allowedEmailDomains,omitempty\" graphql:\"allowedEmailDomains\""
	BillingAddress      *models.Address "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact      *string         "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail        *string         "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone        *string         "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	DeletedBy           *string         "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Domains             []string        "json:\"domains,omitempty\" graphql:\"domains\""
	ID                  string          "json:\"id\" graphql:\"id\""
	OrganizationID      *string         "json:\"organizationID,omitempty\" graphql:\"organizationID\""
	Tags                []string        "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier       *string         "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
}

func (t *AdminSearch_AdminSearch_OrganizationSettings_Edges_Node) GetAllowedEmailDomains() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrganizationSettings_Edges_Node{}
	}
	return t.AllowedEmailDomains
}
func (t *AdminSearch_AdminSearch_OrganizationSettings_Edges_Node) GetBillingAddress() *models.Address {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrganizationSettings_Edges_Node{}
	}
	return t.BillingAddress
}
func (t *AdminSearch_AdminSearch_OrganizationSettings_Edges_Node) GetBillingContact() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrganizationSettings_Edges_Node{}
	}
	return t.BillingContact
}
func (t *AdminSearch_AdminSearch_OrganizationSettings_Edges_Node) GetBillingEmail() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrganizationSettings_Edges_Node{}
	}
	return t.BillingEmail
}
func (t *AdminSearch_AdminSearch_OrganizationSettings_Edges_Node) GetBillingPhone() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrganizationSettings_Edges_Node{}
	}
	return t.BillingPhone
}
func (t *AdminSearch_AdminSearch_OrganizationSettings_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrganizationSettings_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_OrganizationSettings_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrganizationSettings_Edges_Node{}
	}
	return t.Domains
}
func (t *AdminSearch_AdminSearch_OrganizationSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrganizationSettings_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_OrganizationSettings_Edges_Node) GetOrganizationID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrganizationSettings_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *AdminSearch_AdminSearch_OrganizationSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrganizationSettings_Edges_Node{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_OrganizationSettings_Edges_Node) GetTaxIdentifier() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrganizationSettings_Edges_Node{}
	}
	return t.TaxIdentifier
}

type AdminSearch_AdminSearch_OrganizationSettings_Edges struct {
	Node *AdminSearch_AdminSearch_OrganizationSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_OrganizationSettings_Edges) GetNode() *AdminSearch_AdminSearch_OrganizationSettings_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrganizationSettings_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_OrganizationSettings struct {
	Edges      []*AdminSearch_AdminSearch_OrganizationSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_OrganizationSettings_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_OrganizationSettings) GetEdges() []*AdminSearch_AdminSearch_OrganizationSettings_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrganizationSettings{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_OrganizationSettings) GetPageInfo() *AdminSearch_AdminSearch_OrganizationSettings_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrganizationSettings{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_OrganizationSettings) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_OrganizationSettings{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_PersonalAccessTokens_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_PersonalAccessTokens_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_PersonalAccessTokens_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_PersonalAccessTokens_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_PersonalAccessTokens_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_PersonalAccessTokens_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_PersonalAccessTokens_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_PersonalAccessTokens_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_PersonalAccessTokens_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_PersonalAccessTokens_Edges_Node struct {
	DeletedBy     *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID            string   "json:\"id\" graphql:\"id\""
	Name          string   "json:\"name\" graphql:\"name\""
	RevokedBy     *string  "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason *string  "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes        []string "json:\"scopes,omitempty\" graphql:\"scopes\""
	Tags          []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *AdminSearch_AdminSearch_PersonalAccessTokens_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_PersonalAccessTokens_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_PersonalAccessTokens_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_PersonalAccessTokens_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_PersonalAccessTokens_Edges_Node) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_PersonalAccessTokens_Edges_Node{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_PersonalAccessTokens_Edges_Node) GetRevokedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_PersonalAccessTokens_Edges_Node{}
	}
	return t.RevokedBy
}
func (t *AdminSearch_AdminSearch_PersonalAccessTokens_Edges_Node) GetRevokedReason() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_PersonalAccessTokens_Edges_Node{}
	}
	return t.RevokedReason
}
func (t *AdminSearch_AdminSearch_PersonalAccessTokens_Edges_Node) GetScopes() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_PersonalAccessTokens_Edges_Node{}
	}
	return t.Scopes
}
func (t *AdminSearch_AdminSearch_PersonalAccessTokens_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_PersonalAccessTokens_Edges_Node{}
	}
	return t.Tags
}

type AdminSearch_AdminSearch_PersonalAccessTokens_Edges struct {
	Node *AdminSearch_AdminSearch_PersonalAccessTokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_PersonalAccessTokens_Edges) GetNode() *AdminSearch_AdminSearch_PersonalAccessTokens_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_PersonalAccessTokens_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_PersonalAccessTokens struct {
	Edges      []*AdminSearch_AdminSearch_PersonalAccessTokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_PersonalAccessTokens_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_PersonalAccessTokens) GetEdges() []*AdminSearch_AdminSearch_PersonalAccessTokens_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_PersonalAccessTokens{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_PersonalAccessTokens) GetPageInfo() *AdminSearch_AdminSearch_PersonalAccessTokens_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_PersonalAccessTokens{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_PersonalAccessTokens) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_PersonalAccessTokens{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_Procedures_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_Procedures_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Procedures_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_Procedures_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Procedures_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_Procedures_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Procedures_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_Procedures_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Procedures_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_Procedures_Edges_Node struct {
	ApproverID    *string  "json:\"approverID,omitempty\" graphql:\"approverID\""
	DelegateID    *string  "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	DeletedBy     *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Details       *string  "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string   "json:\"displayID\" graphql:\"displayID\""
	ID            string   "json:\"id\" graphql:\"id\""
	Name          string   "json:\"name\" graphql:\"name\""
	OwnerID       *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProcedureType *string  "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	Revision      *string  "json:\"revision,omitempty\" graphql:\"revision\""
	Tags          []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *AdminSearch_AdminSearch_Procedures_Edges_Node) GetApproverID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Procedures_Edges_Node{}
	}
	return t.ApproverID
}
func (t *AdminSearch_AdminSearch_Procedures_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Procedures_Edges_Node{}
	}
	return t.DelegateID
}
func (t *AdminSearch_AdminSearch_Procedures_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Procedures_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Procedures_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Procedures_Edges_Node{}
	}
	return t.Details
}
func (t *AdminSearch_AdminSearch_Procedures_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Procedures_Edges_Node{}
	}
	return t.DisplayID
}
func (t *AdminSearch_AdminSearch_Procedures_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Procedures_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Procedures_Edges_Node) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Procedures_Edges_Node{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Procedures_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Procedures_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Procedures_Edges_Node) GetProcedureType() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Procedures_Edges_Node{}
	}
	return t.ProcedureType
}
func (t *AdminSearch_AdminSearch_Procedures_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Procedures_Edges_Node{}
	}
	return t.Revision
}
func (t *AdminSearch_AdminSearch_Procedures_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Procedures_Edges_Node{}
	}
	return t.Tags
}

type AdminSearch_AdminSearch_Procedures_Edges struct {
	Node *AdminSearch_AdminSearch_Procedures_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_Procedures_Edges) GetNode() *AdminSearch_AdminSearch_Procedures_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_Procedures_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_Procedures struct {
	Edges      []*AdminSearch_AdminSearch_Procedures_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_Procedures_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                       "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_Procedures) GetEdges() []*AdminSearch_AdminSearch_Procedures_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_Procedures{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_Procedures) GetPageInfo() *AdminSearch_AdminSearch_Procedures_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_Procedures{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_Procedures) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_Procedures{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_Programs_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_Programs_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Programs_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_Programs_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Programs_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_Programs_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Programs_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_Programs_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Programs_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_Programs_Edges_Node struct {
	DeletedBy   *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	DisplayID   string   "json:\"displayID\" graphql:\"displayID\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	OwnerID     *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *AdminSearch_AdminSearch_Programs_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Programs_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Programs_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Programs_Edges_Node{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *AdminSearch_AdminSearch_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Programs_Edges_Node{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Programs_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Programs_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Programs_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Programs_Edges_Node{}
	}
	return t.Tags
}

type AdminSearch_AdminSearch_Programs_Edges struct {
	Node *AdminSearch_AdminSearch_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_Programs_Edges) GetNode() *AdminSearch_AdminSearch_Programs_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_Programs_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_Programs struct {
	Edges      []*AdminSearch_AdminSearch_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_Programs_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_Programs) GetEdges() []*AdminSearch_AdminSearch_Programs_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_Programs{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_Programs) GetPageInfo() *AdminSearch_AdminSearch_Programs_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_Programs{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_Programs) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_Programs{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_Risks_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_Risks_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Risks_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_Risks_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Risks_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_Risks_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Risks_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_Risks_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Risks_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_Risks_Edges_Node struct {
	BusinessCosts *string  "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	Category      *string  "json:\"category,omitempty\" graphql:\"category\""
	DelegateID    *string  "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	DeletedBy     *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Details       *string  "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string   "json:\"displayID\" graphql:\"displayID\""
	ID            string   "json:\"id\" graphql:\"id\""
	Mitigation    *string  "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string   "json:\"name\" graphql:\"name\""
	OwnerID       *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RiskType      *string  "json:\"riskType,omitempty\" graphql:\"riskType\""
	StakeholderID *string  "json:\"stakeholderID,omitempty\" graphql:\"stakeholderID\""
	Tags          []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *AdminSearch_AdminSearch_Risks_Edges_Node) GetBusinessCosts() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Risks_Edges_Node{}
	}
	return t.BusinessCosts
}
func (t *AdminSearch_AdminSearch_Risks_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Risks_Edges_Node{}
	}
	return t.Category
}
func (t *AdminSearch_AdminSearch_Risks_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Risks_Edges_Node{}
	}
	return t.DelegateID
}
func (t *AdminSearch_AdminSearch_Risks_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Risks_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Risks_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Risks_Edges_Node{}
	}
	return t.Details
}
func (t *AdminSearch_AdminSearch_Risks_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Risks_Edges_Node{}
	}
	return t.DisplayID
}
func (t *AdminSearch_AdminSearch_Risks_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Risks_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Risks_Edges_Node) GetMitigation() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Risks_Edges_Node{}
	}
	return t.Mitigation
}
func (t *AdminSearch_AdminSearch_Risks_Edges_Node) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Risks_Edges_Node{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Risks_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Risks_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Risks_Edges_Node) GetRiskType() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Risks_Edges_Node{}
	}
	return t.RiskType
}
func (t *AdminSearch_AdminSearch_Risks_Edges_Node) GetStakeholderID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Risks_Edges_Node{}
	}
	return t.StakeholderID
}
func (t *AdminSearch_AdminSearch_Risks_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Risks_Edges_Node{}
	}
	return t.Tags
}

type AdminSearch_AdminSearch_Risks_Edges struct {
	Node *AdminSearch_AdminSearch_Risks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_Risks_Edges) GetNode() *AdminSearch_AdminSearch_Risks_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_Risks_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_Risks struct {
	Edges      []*AdminSearch_AdminSearch_Risks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_Risks_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_Risks) GetEdges() []*AdminSearch_AdminSearch_Risks_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_Risks{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_Risks) GetPageInfo() *AdminSearch_AdminSearch_Risks_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_Risks{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_Risks) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_Risks{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_Standards_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_Standards_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_Standards_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_Standards_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_Standards_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_Standards_Edges_Node struct {
	DeletedBy            *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Description          *string  "json:\"description,omitempty\" graphql:\"description\""
	Domains              []string "json:\"domains,omitempty\" graphql:\"domains\""
	Framework            *string  "json:\"framework,omitempty\" graphql:\"framework\""
	GoverningBody        *string  "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	GoverningBodyLogoURL *string  "json:\"governingBodyLogoURL,omitempty\" graphql:\"governingBodyLogoURL\""
	ID                   string   "json:\"id\" graphql:\"id\""
	Link                 *string  "json:\"link,omitempty\" graphql:\"link\""
	Name                 string   "json:\"name\" graphql:\"name\""
	OwnerID              *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Revision             *string  "json:\"revision,omitempty\" graphql:\"revision\""
	ShortName            *string  "json:\"shortName,omitempty\" graphql:\"shortName\""
	StandardType         *string  "json:\"standardType,omitempty\" graphql:\"standardType\""
	Tags                 []string "json:\"tags,omitempty\" graphql:\"tags\""
	Version              *string  "json:\"version,omitempty\" graphql:\"version\""
}

func (t *AdminSearch_AdminSearch_Standards_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Standards_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards_Edges_Node{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Standards_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards_Edges_Node{}
	}
	return t.Domains
}
func (t *AdminSearch_AdminSearch_Standards_Edges_Node) GetFramework() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards_Edges_Node{}
	}
	return t.Framework
}
func (t *AdminSearch_AdminSearch_Standards_Edges_Node) GetGoverningBody() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards_Edges_Node{}
	}
	return t.GoverningBody
}
func (t *AdminSearch_AdminSearch_Standards_Edges_Node) GetGoverningBodyLogoURL() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards_Edges_Node{}
	}
	return t.GoverningBodyLogoURL
}
func (t *AdminSearch_AdminSearch_Standards_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Standards_Edges_Node) GetLink() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards_Edges_Node{}
	}
	return t.Link
}
func (t *AdminSearch_AdminSearch_Standards_Edges_Node) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards_Edges_Node{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Standards_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Standards_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards_Edges_Node{}
	}
	return t.Revision
}
func (t *AdminSearch_AdminSearch_Standards_Edges_Node) GetShortName() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards_Edges_Node{}
	}
	return t.ShortName
}
func (t *AdminSearch_AdminSearch_Standards_Edges_Node) GetStandardType() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards_Edges_Node{}
	}
	return t.StandardType
}
func (t *AdminSearch_AdminSearch_Standards_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards_Edges_Node{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Standards_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards_Edges_Node{}
	}
	return t.Version
}

type AdminSearch_AdminSearch_Standards_Edges struct {
	Node *AdminSearch_AdminSearch_Standards_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_Standards_Edges) GetNode() *AdminSearch_AdminSearch_Standards_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_Standards struct {
	Edges      []*AdminSearch_AdminSearch_Standards_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_Standards_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_Standards) GetEdges() []*AdminSearch_AdminSearch_Standards_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_Standards) GetPageInfo() *AdminSearch_AdminSearch_Standards_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_Standards) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_Standards{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_Subcontrols_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_Subcontrols_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_Subcontrols_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_Subcontrols_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_Subcontrols_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_Subcontrols_Edges_Node struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	AuditorReferenceID     *string                          "json:\"auditorReferenceID,omitempty\" graphql:\"auditorReferenceID\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlID              string                           "json:\"controlID\" graphql:\"controlID\""
	ControlOwnerID         *string                          "json:\"controlOwnerID,omitempty\" graphql:\"controlOwnerID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	DelegateID             *string                          "json:\"delegateID,omitempty\" graphql:\"delegateID\""
	DeletedBy              *string                          "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	ReferenceID            *string                          "json:\"referenceID,omitempty\" graphql:\"referenceID\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *AdminSearch_AdminSearch_Subcontrols_Edges_Node) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges_Node{}
	}
	return t.AssessmentMethods
}
func (t *AdminSearch_AdminSearch_Subcontrols_Edges_Node) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges_Node{}
	}
	return t.AssessmentObjectives
}
func (t *AdminSearch_AdminSearch_Subcontrols_Edges_Node) GetAuditorReferenceID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges_Node{}
	}
	return t.AuditorReferenceID
}
func (t *AdminSearch_AdminSearch_Subcontrols_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges_Node{}
	}
	return t.Category
}
func (t *AdminSearch_AdminSearch_Subcontrols_Edges_Node) GetCategoryID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges_Node{}
	}
	return t.CategoryID
}
func (t *AdminSearch_AdminSearch_Subcontrols_Edges_Node) GetControlID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges_Node{}
	}
	return t.ControlID
}
func (t *AdminSearch_AdminSearch_Subcontrols_Edges_Node) GetControlOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges_Node{}
	}
	return t.ControlOwnerID
}
func (t *AdminSearch_AdminSearch_Subcontrols_Edges_Node) GetControlQuestions() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges_Node{}
	}
	return t.ControlQuestions
}
func (t *AdminSearch_AdminSearch_Subcontrols_Edges_Node) GetDelegateID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges_Node{}
	}
	return t.DelegateID
}
func (t *AdminSearch_AdminSearch_Subcontrols_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Subcontrols_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges_Node{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Subcontrols_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges_Node{}
	}
	return t.DisplayID
}
func (t *AdminSearch_AdminSearch_Subcontrols_Edges_Node) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges_Node{}
	}
	return t.ExampleEvidence
}
func (t *AdminSearch_AdminSearch_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Subcontrols_Edges_Node) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges_Node{}
	}
	return t.ImplementationGuidance
}
func (t *AdminSearch_AdminSearch_Subcontrols_Edges_Node) GetMappedCategories() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges_Node{}
	}
	return t.MappedCategories
}
func (t *AdminSearch_AdminSearch_Subcontrols_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}
func (t *AdminSearch_AdminSearch_Subcontrols_Edges_Node) GetReferenceID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges_Node{}
	}
	return t.ReferenceID
}
func (t *AdminSearch_AdminSearch_Subcontrols_Edges_Node) GetReferences() []*models.Reference {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges_Node{}
	}
	return t.References
}
func (t *AdminSearch_AdminSearch_Subcontrols_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges_Node{}
	}
	return t.Subcategory
}
func (t *AdminSearch_AdminSearch_Subcontrols_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges_Node{}
	}
	return t.Tags
}

type AdminSearch_AdminSearch_Subcontrols_Edges struct {
	Node *AdminSearch_AdminSearch_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_Subcontrols_Edges) GetNode() *AdminSearch_AdminSearch_Subcontrols_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_Subcontrols struct {
	Edges      []*AdminSearch_AdminSearch_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_Subcontrols_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                        "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_Subcontrols) GetEdges() []*AdminSearch_AdminSearch_Subcontrols_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_Subcontrols) GetPageInfo() *AdminSearch_AdminSearch_Subcontrols_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_Subcontrols) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subcontrols{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_Subscribers_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_Subscribers_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subscribers_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_Subscribers_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subscribers_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_Subscribers_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subscribers_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_Subscribers_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subscribers_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_Subscribers_Edges_Node struct {
	DeletedBy   *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Email       string   "json:\"email\" graphql:\"email\""
	ID          string   "json:\"id\" graphql:\"id\""
	OwnerID     *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string  "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *AdminSearch_AdminSearch_Subscribers_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subscribers_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Subscribers_Edges_Node) GetEmail() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subscribers_Edges_Node{}
	}
	return t.Email
}
func (t *AdminSearch_AdminSearch_Subscribers_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subscribers_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Subscribers_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subscribers_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Subscribers_Edges_Node) GetPhoneNumber() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subscribers_Edges_Node{}
	}
	return t.PhoneNumber
}
func (t *AdminSearch_AdminSearch_Subscribers_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subscribers_Edges_Node{}
	}
	return t.Tags
}

type AdminSearch_AdminSearch_Subscribers_Edges struct {
	Node *AdminSearch_AdminSearch_Subscribers_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_Subscribers_Edges) GetNode() *AdminSearch_AdminSearch_Subscribers_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subscribers_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_Subscribers struct {
	Edges      []*AdminSearch_AdminSearch_Subscribers_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_Subscribers_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                        "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_Subscribers) GetEdges() []*AdminSearch_AdminSearch_Subscribers_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subscribers{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_Subscribers) GetPageInfo() *AdminSearch_AdminSearch_Subscribers_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subscribers{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_Subscribers) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_Subscribers{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_Tasks_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_Tasks_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Tasks_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_Tasks_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Tasks_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_Tasks_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Tasks_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_Tasks_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Tasks_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_Tasks_Edges_Node struct {
	AssigneeID  *string  "json:\"assigneeID,omitempty\" graphql:\"assigneeID\""
	AssignerID  *string  "json:\"assignerID,omitempty\" graphql:\"assignerID\""
	Category    *string  "json:\"category,omitempty\" graphql:\"category\""
	DeletedBy   *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	Details     *string  "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string   "json:\"displayID\" graphql:\"displayID\""
	ID          string   "json:\"id\" graphql:\"id\""
	OwnerID     *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string   "json:\"title\" graphql:\"title\""
}

func (t *AdminSearch_AdminSearch_Tasks_Edges_Node) GetAssigneeID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Tasks_Edges_Node{}
	}
	return t.AssigneeID
}
func (t *AdminSearch_AdminSearch_Tasks_Edges_Node) GetAssignerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Tasks_Edges_Node{}
	}
	return t.AssignerID
}
func (t *AdminSearch_AdminSearch_Tasks_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Tasks_Edges_Node{}
	}
	return t.Category
}
func (t *AdminSearch_AdminSearch_Tasks_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Tasks_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Tasks_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Tasks_Edges_Node{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Tasks_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Tasks_Edges_Node{}
	}
	return t.Details
}
func (t *AdminSearch_AdminSearch_Tasks_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Tasks_Edges_Node{}
	}
	return t.DisplayID
}
func (t *AdminSearch_AdminSearch_Tasks_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Tasks_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Tasks_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Tasks_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Tasks_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Tasks_Edges_Node{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Tasks_Edges_Node) GetTitle() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Tasks_Edges_Node{}
	}
	return t.Title
}

type AdminSearch_AdminSearch_Tasks_Edges struct {
	Node *AdminSearch_AdminSearch_Tasks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_Tasks_Edges) GetNode() *AdminSearch_AdminSearch_Tasks_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_Tasks_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_Tasks struct {
	Edges      []*AdminSearch_AdminSearch_Tasks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_Tasks_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_Tasks) GetEdges() []*AdminSearch_AdminSearch_Tasks_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_Tasks{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_Tasks) GetPageInfo() *AdminSearch_AdminSearch_Tasks_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_Tasks{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_Tasks) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_Tasks{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_Templates_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_Templates_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Templates_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_Templates_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Templates_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_Templates_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Templates_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_Templates_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Templates_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_Templates_Edges_Node struct {
	DeletedBy   *string        "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Description *string        "json:\"description,omitempty\" graphql:\"description\""
	ID          string         "json:\"id\" graphql:\"id\""
	Jsonconfig  map[string]any "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name        string         "json:\"name\" graphql:\"name\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	Uischema    map[string]any "json:\"uischema,omitempty\" graphql:\"uischema\""
}

func (t *AdminSearch_AdminSearch_Templates_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Templates_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Templates_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Templates_Edges_Node{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Templates_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Templates_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Templates_Edges_Node) GetJsonconfig() map[string]any {
	if t == nil {
		t = &AdminSearch_AdminSearch_Templates_Edges_Node{}
	}
	return t.Jsonconfig
}
func (t *AdminSearch_AdminSearch_Templates_Edges_Node) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Templates_Edges_Node{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Templates_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Templates_Edges_Node{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Templates_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Templates_Edges_Node{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Templates_Edges_Node) GetUischema() map[string]any {
	if t == nil {
		t = &AdminSearch_AdminSearch_Templates_Edges_Node{}
	}
	return t.Uischema
}

type AdminSearch_AdminSearch_Templates_Edges struct {
	Node *AdminSearch_AdminSearch_Templates_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_Templates_Edges) GetNode() *AdminSearch_AdminSearch_Templates_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_Templates_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_Templates struct {
	Edges      []*AdminSearch_AdminSearch_Templates_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_Templates_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_Templates) GetEdges() []*AdminSearch_AdminSearch_Templates_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_Templates{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_Templates) GetPageInfo() *AdminSearch_AdminSearch_Templates_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_Templates{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_Templates) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_Templates{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_Users_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_Users_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Users_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_Users_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Users_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_Users_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_Users_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_Users_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Users_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_Users_Edges_Node struct {
	AvatarLocalFileID *string  "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string  "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	DeletedBy         *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	DisplayID         string   "json:\"displayID\" graphql:\"displayID\""
	DisplayName       string   "json:\"displayName\" graphql:\"displayName\""
	Email             string   "json:\"email\" graphql:\"email\""
	FirstName         *string  "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID                string   "json:\"id\" graphql:\"id\""
	LastName          *string  "json:\"lastName,omitempty\" graphql:\"lastName\""
	Sub               *string  "json:\"sub,omitempty\" graphql:\"sub\""
	Tags              []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *AdminSearch_AdminSearch_Users_Edges_Node) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Users_Edges_Node{}
	}
	return t.AvatarLocalFileID
}
func (t *AdminSearch_AdminSearch_Users_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Users_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *AdminSearch_AdminSearch_Users_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Users_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Users_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Users_Edges_Node{}
	}
	return t.DisplayID
}
func (t *AdminSearch_AdminSearch_Users_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Users_Edges_Node{}
	}
	return t.DisplayName
}
func (t *AdminSearch_AdminSearch_Users_Edges_Node) GetEmail() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Users_Edges_Node{}
	}
	return t.Email
}
func (t *AdminSearch_AdminSearch_Users_Edges_Node) GetFirstName() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Users_Edges_Node{}
	}
	return t.FirstName
}
func (t *AdminSearch_AdminSearch_Users_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Users_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Users_Edges_Node) GetLastName() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Users_Edges_Node{}
	}
	return t.LastName
}
func (t *AdminSearch_AdminSearch_Users_Edges_Node) GetSub() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Users_Edges_Node{}
	}
	return t.Sub
}
func (t *AdminSearch_AdminSearch_Users_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Users_Edges_Node{}
	}
	return t.Tags
}

type AdminSearch_AdminSearch_Users_Edges struct {
	Node *AdminSearch_AdminSearch_Users_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_Users_Edges) GetNode() *AdminSearch_AdminSearch_Users_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_Users_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_Users struct {
	Edges      []*AdminSearch_AdminSearch_Users_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_Users_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_Users) GetEdges() []*AdminSearch_AdminSearch_Users_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_Users{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_Users) GetPageInfo() *AdminSearch_AdminSearch_Users_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_Users{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_Users) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_Users{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch_UserSettings_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *AdminSearch_AdminSearch_UserSettings_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_UserSettings_PageInfo{}
	}
	return t.EndCursor
}
func (t *AdminSearch_AdminSearch_UserSettings_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_UserSettings_PageInfo{}
	}
	return t.HasNextPage
}
func (t *AdminSearch_AdminSearch_UserSettings_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &AdminSearch_AdminSearch_UserSettings_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *AdminSearch_AdminSearch_UserSettings_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_UserSettings_PageInfo{}
	}
	return t.StartCursor
}

type AdminSearch_AdminSearch_UserSettings_Edges_Node struct {
	DeletedBy *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID        string   "json:\"id\" graphql:\"id\""
	Tags      []string "json:\"tags,omitempty\" graphql:\"tags\""
	UserID    *string  "json:\"userID,omitempty\" graphql:\"userID\""
}

func (t *AdminSearch_AdminSearch_UserSettings_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_UserSettings_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_UserSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_UserSettings_Edges_Node{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_UserSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_UserSettings_Edges_Node{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_UserSettings_Edges_Node) GetUserID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_UserSettings_Edges_Node{}
	}
	return t.UserID
}

type AdminSearch_AdminSearch_UserSettings_Edges struct {
	Node *AdminSearch_AdminSearch_UserSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *AdminSearch_AdminSearch_UserSettings_Edges) GetNode() *AdminSearch_AdminSearch_UserSettings_Edges_Node {
	if t == nil {
		t = &AdminSearch_AdminSearch_UserSettings_Edges{}
	}
	return t.Node
}

type AdminSearch_AdminSearch_UserSettings struct {
	Edges      []*AdminSearch_AdminSearch_UserSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   AdminSearch_AdminSearch_UserSettings_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *AdminSearch_AdminSearch_UserSettings) GetEdges() []*AdminSearch_AdminSearch_UserSettings_Edges {
	if t == nil {
		t = &AdminSearch_AdminSearch_UserSettings{}
	}
	return t.Edges
}
func (t *AdminSearch_AdminSearch_UserSettings) GetPageInfo() *AdminSearch_AdminSearch_UserSettings_PageInfo {
	if t == nil {
		t = &AdminSearch_AdminSearch_UserSettings{}
	}
	return &t.PageInfo
}
func (t *AdminSearch_AdminSearch_UserSettings) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch_UserSettings{}
	}
	return t.TotalCount
}

type AdminSearch_AdminSearch struct {
	ActionPlans            *AdminSearch_AdminSearch_ActionPlans            "json:\"actionPlans,omitempty\" graphql:\"actionPlans\""
	APITokens              *AdminSearch_AdminSearch_APITokens              "json:\"apiTokens,omitempty\" graphql:\"apiTokens\""
	Contacts               *AdminSearch_AdminSearch_Contacts               "json:\"contacts,omitempty\" graphql:\"contacts\""
	ControlImplementations *AdminSearch_AdminSearch_ControlImplementations "json:\"controlImplementations,omitempty\" graphql:\"controlImplementations\""
	ControlObjectives      *AdminSearch_AdminSearch_ControlObjectives      "json:\"controlObjectives,omitempty\" graphql:\"controlObjectives\""
	Controls               *AdminSearch_AdminSearch_Controls               "json:\"controls,omitempty\" graphql:\"controls\""
	DocumentData           *AdminSearch_AdminSearch_DocumentData           "json:\"documentData,omitempty\" graphql:\"documentData\""
	Entities               *AdminSearch_AdminSearch_Entities               "json:\"entities,omitempty\" graphql:\"entities\""
	EntityTypes            *AdminSearch_AdminSearch_EntityTypes            "json:\"entityTypes,omitempty\" graphql:\"entityTypes\""
	Events                 *AdminSearch_AdminSearch_Events                 "json:\"events,omitempty\" graphql:\"events\""
	Evidences              *AdminSearch_AdminSearch_Evidences              "json:\"evidences,omitempty\" graphql:\"evidences\""
	Files                  *AdminSearch_AdminSearch_Files                  "json:\"files,omitempty\" graphql:\"files\""
	Groups                 *AdminSearch_AdminSearch_Groups                 "json:\"groups,omitempty\" graphql:\"groups\""
	Integrations           *AdminSearch_AdminSearch_Integrations           "json:\"integrations,omitempty\" graphql:\"integrations\""
	InternalPolicies       *AdminSearch_AdminSearch_InternalPolicies       "json:\"internalPolicies,omitempty\" graphql:\"internalPolicies\""
	Invites                *AdminSearch_AdminSearch_Invites                "json:\"invites,omitempty\" graphql:\"invites\""
	MappedControls         *AdminSearch_AdminSearch_MappedControls         "json:\"mappedControls,omitempty\" graphql:\"mappedControls\""
	Narratives             *AdminSearch_AdminSearch_Narratives             "json:\"narratives,omitempty\" graphql:\"narratives\""
	OrgSubscriptions       *AdminSearch_AdminSearch_OrgSubscriptions       "json:\"orgSubscriptions,omitempty\" graphql:\"orgSubscriptions\""
	OrganizationSettings   *AdminSearch_AdminSearch_OrganizationSettings   "json:\"organizationSettings,omitempty\" graphql:\"organizationSettings\""
	Organizations          *AdminSearch_AdminSearch_Organizations          "json:\"organizations,omitempty\" graphql:\"organizations\""
	PersonalAccessTokens   *AdminSearch_AdminSearch_PersonalAccessTokens   "json:\"personalAccessTokens,omitempty\" graphql:\"personalAccessTokens\""
	Procedures             *AdminSearch_AdminSearch_Procedures             "json:\"procedures,omitempty\" graphql:\"procedures\""
	Programs               *AdminSearch_AdminSearch_Programs               "json:\"programs,omitempty\" graphql:\"programs\""
	Risks                  *AdminSearch_AdminSearch_Risks                  "json:\"risks,omitempty\" graphql:\"risks\""
	Standards              *AdminSearch_AdminSearch_Standards              "json:\"standards,omitempty\" graphql:\"standards\""
	Subcontrols            *AdminSearch_AdminSearch_Subcontrols            "json:\"subcontrols,omitempty\" graphql:\"subcontrols\""
	Subscribers            *AdminSearch_AdminSearch_Subscribers            "json:\"subscribers,omitempty\" graphql:\"subscribers\""
	Tasks                  *AdminSearch_AdminSearch_Tasks                  "json:\"tasks,omitempty\" graphql:\"tasks\""
	Templates              *AdminSearch_AdminSearch_Templates              "json:\"templates,omitempty\" graphql:\"templates\""
	TotalCount             int64                                           "json:\"totalCount\" graphql:\"totalCount\""
	UserSettings           *AdminSearch_AdminSearch_UserSettings           "json:\"userSettings,omitempty\" graphql:\"userSettings\""
	Users                  *AdminSearch_AdminSearch_Users                  "json:\"users,omitempty\" graphql:\"users\""
}

func (t *AdminSearch_AdminSearch) GetActionPlans() *AdminSearch_AdminSearch_ActionPlans {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.ActionPlans
}
func (t *AdminSearch_AdminSearch) GetAPITokens() *AdminSearch_AdminSearch_APITokens {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.APITokens
}
func (t *AdminSearch_AdminSearch) GetContacts() *AdminSearch_AdminSearch_Contacts {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.Contacts
}
func (t *AdminSearch_AdminSearch) GetControlImplementations() *AdminSearch_AdminSearch_ControlImplementations {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.ControlImplementations
}
func (t *AdminSearch_AdminSearch) GetControlObjectives() *AdminSearch_AdminSearch_ControlObjectives {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.ControlObjectives
}
func (t *AdminSearch_AdminSearch) GetControls() *AdminSearch_AdminSearch_Controls {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.Controls
}
func (t *AdminSearch_AdminSearch) GetDocumentData() *AdminSearch_AdminSearch_DocumentData {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.DocumentData
}
func (t *AdminSearch_AdminSearch) GetEntities() *AdminSearch_AdminSearch_Entities {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.Entities
}
func (t *AdminSearch_AdminSearch) GetEntityTypes() *AdminSearch_AdminSearch_EntityTypes {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.EntityTypes
}
func (t *AdminSearch_AdminSearch) GetEvents() *AdminSearch_AdminSearch_Events {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.Events
}
func (t *AdminSearch_AdminSearch) GetEvidences() *AdminSearch_AdminSearch_Evidences {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.Evidences
}
func (t *AdminSearch_AdminSearch) GetFiles() *AdminSearch_AdminSearch_Files {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.Files
}
func (t *AdminSearch_AdminSearch) GetGroups() *AdminSearch_AdminSearch_Groups {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.Groups
}
func (t *AdminSearch_AdminSearch) GetIntegrations() *AdminSearch_AdminSearch_Integrations {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.Integrations
}
func (t *AdminSearch_AdminSearch) GetInternalPolicies() *AdminSearch_AdminSearch_InternalPolicies {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.InternalPolicies
}
func (t *AdminSearch_AdminSearch) GetInvites() *AdminSearch_AdminSearch_Invites {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.Invites
}
func (t *AdminSearch_AdminSearch) GetMappedControls() *AdminSearch_AdminSearch_MappedControls {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.MappedControls
}
func (t *AdminSearch_AdminSearch) GetNarratives() *AdminSearch_AdminSearch_Narratives {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.Narratives
}
func (t *AdminSearch_AdminSearch) GetOrgSubscriptions() *AdminSearch_AdminSearch_OrgSubscriptions {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.OrgSubscriptions
}
func (t *AdminSearch_AdminSearch) GetOrganizationSettings() *AdminSearch_AdminSearch_OrganizationSettings {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.OrganizationSettings
}
func (t *AdminSearch_AdminSearch) GetOrganizations() *AdminSearch_AdminSearch_Organizations {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.Organizations
}
func (t *AdminSearch_AdminSearch) GetPersonalAccessTokens() *AdminSearch_AdminSearch_PersonalAccessTokens {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.PersonalAccessTokens
}
func (t *AdminSearch_AdminSearch) GetProcedures() *AdminSearch_AdminSearch_Procedures {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.Procedures
}
func (t *AdminSearch_AdminSearch) GetPrograms() *AdminSearch_AdminSearch_Programs {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.Programs
}
func (t *AdminSearch_AdminSearch) GetRisks() *AdminSearch_AdminSearch_Risks {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.Risks
}
func (t *AdminSearch_AdminSearch) GetStandards() *AdminSearch_AdminSearch_Standards {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.Standards
}
func (t *AdminSearch_AdminSearch) GetSubcontrols() *AdminSearch_AdminSearch_Subcontrols {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.Subcontrols
}
func (t *AdminSearch_AdminSearch) GetSubscribers() *AdminSearch_AdminSearch_Subscribers {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.Subscribers
}
func (t *AdminSearch_AdminSearch) GetTasks() *AdminSearch_AdminSearch_Tasks {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.Tasks
}
func (t *AdminSearch_AdminSearch) GetTemplates() *AdminSearch_AdminSearch_Templates {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.Templates
}
func (t *AdminSearch_AdminSearch) GetTotalCount() int64 {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.TotalCount
}
func (t *AdminSearch_AdminSearch) GetUserSettings() *AdminSearch_AdminSearch_UserSettings {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.UserSettings
}
func (t *AdminSearch_AdminSearch) GetUsers() *AdminSearch_AdminSearch_Users {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.Users
}

type CreateAPIToken_CreateAPIToken_APIToken struct {
	CreatedAt     *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string    "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt     *time.Time "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID            string     "json:\"id\" graphql:\"id\""
	IsActive      *bool      "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt    *time.Time "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name          string     "json:\"name\" graphql:\"name\""
	OwnerID       *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RevokedAt     *time.Time "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy     *string    "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason *string    "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes        []string   "json:\"scopes,omitempty\" graphql:\"scopes\""
	Tags          []string   "json:\"tags,omitempty\" graphql:\"tags\""
	Token         string     "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateAPIToken_CreateAPIToken_APIToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.CreatedAt
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetCreatedBy() *string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.CreatedBy
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetDescription() *string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.Description
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.ExpiresAt
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetID() string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.ID
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetIsActive() *bool {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.IsActive
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.LastUsedAt
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetName() string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.Name
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetOwnerID() *string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.OwnerID
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetRevokedAt() *time.Time {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.RevokedAt
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetRevokedBy() *string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.RevokedBy
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetRevokedReason() *string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.RevokedReason
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetScopes() []string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.Scopes
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetTags() []string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.Tags
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetToken() string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.Token
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.UpdatedAt
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.UpdatedBy
}

type CreateAPIToken_CreateAPIToken struct {
	APIToken CreateAPIToken_CreateAPIToken_APIToken "json:\"apiToken\" graphql:\"apiToken\""
}

func (t *CreateAPIToken_CreateAPIToken) GetAPIToken() *CreateAPIToken_CreateAPIToken_APIToken {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken{}
	}
	return &t.APIToken
}

type DeleteAPIToken_DeleteAPIToken struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteAPIToken_DeleteAPIToken) GetDeletedID() string {
	if t == nil {
		t = &DeleteAPIToken_DeleteAPIToken{}
	}
	return t.DeletedID
}

type GetAllAPITokens_APITokens_Edges_Node struct {
	CreatedAt     *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string    "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt     *time.Time "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID            string     "json:\"id\" graphql:\"id\""
	IsActive      *bool      "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt    *time.Time "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name          string     "json:\"name\" graphql:\"name\""
	OwnerID       *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RevokedAt     *time.Time "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy     *string    "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason *string    "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes        []string   "json:\"scopes,omitempty\" graphql:\"scopes\""
	Tags          []string   "json:\"tags,omitempty\" graphql:\"tags\""
	Token         string     "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllAPITokens_APITokens_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetIsActive() *bool {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.IsActive
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.LastUsedAt
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetRevokedAt() *time.Time {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.RevokedAt
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetRevokedBy() *string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.RevokedBy
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetRevokedReason() *string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.RevokedReason
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetScopes() []string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.Scopes
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetToken() string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.Token
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllAPITokens_APITokens_Edges struct {
	Node *GetAllAPITokens_APITokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllAPITokens_APITokens_Edges) GetNode() *GetAllAPITokens_APITokens_Edges_Node {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges{}
	}
	return t.Node
}

type GetAllAPITokens_APITokens struct {
	Edges []*GetAllAPITokens_APITokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllAPITokens_APITokens) GetEdges() []*GetAllAPITokens_APITokens_Edges {
	if t == nil {
		t = &GetAllAPITokens_APITokens{}
	}
	return t.Edges
}

type GetAPITokenByID_APIToken_Owner struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
}

func (t *GetAPITokenByID_APIToken_Owner) GetDisplayName() string {
	if t == nil {
		t = &GetAPITokenByID_APIToken_Owner{}
	}
	return t.DisplayName
}
func (t *GetAPITokenByID_APIToken_Owner) GetID() string {
	if t == nil {
		t = &GetAPITokenByID_APIToken_Owner{}
	}
	return t.ID
}

type GetAPITokenByID_APIToken struct {
	CreatedAt     *time.Time                      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string                         "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt     *time.Time                      "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID            string                          "json:\"id\" graphql:\"id\""
	IsActive      *bool                           "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt    *time.Time                      "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name          string                          "json:\"name\" graphql:\"name\""
	Owner         *GetAPITokenByID_APIToken_Owner "json:\"owner,omitempty\" graphql:\"owner\""
	RevokedAt     *time.Time                      "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy     *string                         "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason *string                         "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes        []string                        "json:\"scopes,omitempty\" graphql:\"scopes\""
	Tags          []string                        "json:\"tags,omitempty\" graphql:\"tags\""
	Token         string                          "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAPITokenByID_APIToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.CreatedAt
}
func (t *GetAPITokenByID_APIToken) GetCreatedBy() *string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.CreatedBy
}
func (t *GetAPITokenByID_APIToken) GetDescription() *string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.Description
}
func (t *GetAPITokenByID_APIToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.ExpiresAt
}
func (t *GetAPITokenByID_APIToken) GetID() string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.ID
}
func (t *GetAPITokenByID_APIToken) GetIsActive() *bool {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.IsActive
}
func (t *GetAPITokenByID_APIToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.LastUsedAt
}
func (t *GetAPITokenByID_APIToken) GetName() string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.Name
}
func (t *GetAPITokenByID_APIToken) GetOwner() *GetAPITokenByID_APIToken_Owner {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.Owner
}
func (t *GetAPITokenByID_APIToken) GetRevokedAt() *time.Time {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.RevokedAt
}
func (t *GetAPITokenByID_APIToken) GetRevokedBy() *string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.RevokedBy
}
func (t *GetAPITokenByID_APIToken) GetRevokedReason() *string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.RevokedReason
}
func (t *GetAPITokenByID_APIToken) GetScopes() []string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.Scopes
}
func (t *GetAPITokenByID_APIToken) GetTags() []string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.Tags
}
func (t *GetAPITokenByID_APIToken) GetToken() string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.Token
}
func (t *GetAPITokenByID_APIToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.UpdatedAt
}
func (t *GetAPITokenByID_APIToken) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.UpdatedBy
}

type GetAPITokens_APITokens_Edges_Node struct {
	CreatedAt     *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string    "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt     *time.Time "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID            string     "json:\"id\" graphql:\"id\""
	IsActive      *bool      "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt    *time.Time "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name          string     "json:\"name\" graphql:\"name\""
	OwnerID       *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RevokedAt     *time.Time "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy     *string    "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason *string    "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes        []string   "json:\"scopes,omitempty\" graphql:\"scopes\""
	Tags          []string   "json:\"tags,omitempty\" graphql:\"tags\""
	Token         string     "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAPITokens_APITokens_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAPITokens_APITokens_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAPITokens_APITokens_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.Description
}
func (t *GetAPITokens_APITokens_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetAPITokens_APITokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.ID
}
func (t *GetAPITokens_APITokens_Edges_Node) GetIsActive() *bool {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.IsActive
}
func (t *GetAPITokens_APITokens_Edges_Node) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.LastUsedAt
}
func (t *GetAPITokens_APITokens_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.Name
}
func (t *GetAPITokens_APITokens_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAPITokens_APITokens_Edges_Node) GetRevokedAt() *time.Time {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.RevokedAt
}
func (t *GetAPITokens_APITokens_Edges_Node) GetRevokedBy() *string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.RevokedBy
}
func (t *GetAPITokens_APITokens_Edges_Node) GetRevokedReason() *string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.RevokedReason
}
func (t *GetAPITokens_APITokens_Edges_Node) GetScopes() []string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.Scopes
}
func (t *GetAPITokens_APITokens_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAPITokens_APITokens_Edges_Node) GetToken() string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.Token
}
func (t *GetAPITokens_APITokens_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAPITokens_APITokens_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAPITokens_APITokens_Edges struct {
	Node *GetAPITokens_APITokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAPITokens_APITokens_Edges) GetNode() *GetAPITokens_APITokens_Edges_Node {
	if t == nil {
		t = &GetAPITokens_APITokens_Edges{}
	}
	return t.Node
}

type GetAPITokens_APITokens struct {
	Edges []*GetAPITokens_APITokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAPITokens_APITokens) GetEdges() []*GetAPITokens_APITokens_Edges {
	if t == nil {
		t = &GetAPITokens_APITokens{}
	}
	return t.Edges
}

type UpdateAPIToken_UpdateAPIToken_APIToken struct {
	CreatedAt     *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string    "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt     *time.Time "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID            string     "json:\"id\" graphql:\"id\""
	IsActive      *bool      "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt    *time.Time "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name          string     "json:\"name\" graphql:\"name\""
	OwnerID       *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RevokedAt     *time.Time "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy     *string    "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason *string    "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes        []string   "json:\"scopes,omitempty\" graphql:\"scopes\""
	Tags          []string   "json:\"tags,omitempty\" graphql:\"tags\""
	Token         string     "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.CreatedAt
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.CreatedBy
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetDescription() *string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.Description
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.ExpiresAt
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetID() string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.ID
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetIsActive() *bool {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.IsActive
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.LastUsedAt
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetName() string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.Name
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetOwnerID() *string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.OwnerID
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetRevokedAt() *time.Time {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.RevokedAt
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetRevokedBy() *string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.RevokedBy
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetRevokedReason() *string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.RevokedReason
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetScopes() []string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.Scopes
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetTags() []string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.Tags
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetToken() string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.Token
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.UpdatedAt
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.UpdatedBy
}

type UpdateAPIToken_UpdateAPIToken struct {
	APIToken UpdateAPIToken_UpdateAPIToken_APIToken "json:\"apiToken\" graphql:\"apiToken\""
}

func (t *UpdateAPIToken_UpdateAPIToken) GetAPIToken() *UpdateAPIToken_UpdateAPIToken_APIToken {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken{}
	}
	return &t.APIToken
}

type CreateBulkContact_CreateBulkContact_Contacts struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	ID          string           "json:\"id\" graphql:\"id\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkContact_CreateBulkContact_Contacts) GetAddress() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.Address
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetCompany() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.Company
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.CreatedAt
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.CreatedBy
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetEmail() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.Email
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetFullName() string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.FullName
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetID() string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.ID
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.OwnerID
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetPhoneNumber() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.PhoneNumber
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return &t.Status
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetTags() []string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.Tags
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetTitle() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.Title
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.UpdatedBy
}

type CreateBulkContact_CreateBulkContact struct {
	Contacts []*CreateBulkContact_CreateBulkContact_Contacts "json:\"contacts,omitempty\" graphql:\"contacts\""
}

func (t *CreateBulkContact_CreateBulkContact) GetContacts() []*CreateBulkContact_CreateBulkContact_Contacts {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact{}
	}
	return t.Contacts
}

type CreateBulkCSVContact_CreateBulkCSVContact_Contacts struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	ID          string           "json:\"id\" graphql:\"id\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetAddress() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.Address
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetCompany() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.Company
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetEmail() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.Email
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetFullName() string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.FullName
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetID() string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.ID
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetPhoneNumber() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.PhoneNumber
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return &t.Status
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.Tags
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetTitle() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.Title
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVContact_CreateBulkCSVContact struct {
	Contacts []*CreateBulkCSVContact_CreateBulkCSVContact_Contacts "json:\"contacts,omitempty\" graphql:\"contacts\""
}

func (t *CreateBulkCSVContact_CreateBulkCSVContact) GetContacts() []*CreateBulkCSVContact_CreateBulkCSVContact_Contacts {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact{}
	}
	return t.Contacts
}

type CreateContact_CreateContact_Contact struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	ID          string           "json:\"id\" graphql:\"id\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateContact_CreateContact_Contact) GetAddress() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.Address
}
func (t *CreateContact_CreateContact_Contact) GetCompany() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.Company
}
func (t *CreateContact_CreateContact_Contact) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.CreatedAt
}
func (t *CreateContact_CreateContact_Contact) GetCreatedBy() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.CreatedBy
}
func (t *CreateContact_CreateContact_Contact) GetEmail() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.Email
}
func (t *CreateContact_CreateContact_Contact) GetFullName() string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.FullName
}
func (t *CreateContact_CreateContact_Contact) GetID() string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.ID
}
func (t *CreateContact_CreateContact_Contact) GetOwnerID() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.OwnerID
}
func (t *CreateContact_CreateContact_Contact) GetPhoneNumber() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.PhoneNumber
}
func (t *CreateContact_CreateContact_Contact) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return &t.Status
}
func (t *CreateContact_CreateContact_Contact) GetTags() []string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.Tags
}
func (t *CreateContact_CreateContact_Contact) GetTitle() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.Title
}
func (t *CreateContact_CreateContact_Contact) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.UpdatedAt
}
func (t *CreateContact_CreateContact_Contact) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.UpdatedBy
}

type CreateContact_CreateContact struct {
	Contact CreateContact_CreateContact_Contact "json:\"contact\" graphql:\"contact\""
}

func (t *CreateContact_CreateContact) GetContact() *CreateContact_CreateContact_Contact {
	if t == nil {
		t = &CreateContact_CreateContact{}
	}
	return &t.Contact
}

type DeleteContact_DeleteContact struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteContact_DeleteContact) GetDeletedID() string {
	if t == nil {
		t = &DeleteContact_DeleteContact{}
	}
	return t.DeletedID
}

type GetAllContacts_Contacts_Edges_Node struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	ID          string           "json:\"id\" graphql:\"id\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllContacts_Contacts_Edges_Node) GetAddress() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.Address
}
func (t *GetAllContacts_Contacts_Edges_Node) GetCompany() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.Company
}
func (t *GetAllContacts_Contacts_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllContacts_Contacts_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllContacts_Contacts_Edges_Node) GetEmail() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.Email
}
func (t *GetAllContacts_Contacts_Edges_Node) GetFullName() string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.FullName
}
func (t *GetAllContacts_Contacts_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllContacts_Contacts_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllContacts_Contacts_Edges_Node) GetPhoneNumber() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.PhoneNumber
}
func (t *GetAllContacts_Contacts_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllContacts_Contacts_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllContacts_Contacts_Edges_Node) GetTitle() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.Title
}
func (t *GetAllContacts_Contacts_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllContacts_Contacts_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllContacts_Contacts_Edges struct {
	Node *GetAllContacts_Contacts_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllContacts_Contacts_Edges) GetNode() *GetAllContacts_Contacts_Edges_Node {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges{}
	}
	return t.Node
}

type GetAllContacts_Contacts struct {
	Edges []*GetAllContacts_Contacts_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllContacts_Contacts) GetEdges() []*GetAllContacts_Contacts_Edges {
	if t == nil {
		t = &GetAllContacts_Contacts{}
	}
	return t.Edges
}

type GetContactByID_Contact struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	ID          string           "json:\"id\" graphql:\"id\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetContactByID_Contact) GetAddress() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.Address
}
func (t *GetContactByID_Contact) GetCompany() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.Company
}
func (t *GetContactByID_Contact) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.CreatedAt
}
func (t *GetContactByID_Contact) GetCreatedBy() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.CreatedBy
}
func (t *GetContactByID_Contact) GetEmail() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.Email
}
func (t *GetContactByID_Contact) GetFullName() string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.FullName
}
func (t *GetContactByID_Contact) GetID() string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.ID
}
func (t *GetContactByID_Contact) GetOwnerID() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.OwnerID
}
func (t *GetContactByID_Contact) GetPhoneNumber() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.PhoneNumber
}
func (t *GetContactByID_Contact) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return &t.Status
}
func (t *GetContactByID_Contact) GetTags() []string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.Tags
}
func (t *GetContactByID_Contact) GetTitle() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.Title
}
func (t *GetContactByID_Contact) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.UpdatedAt
}
func (t *GetContactByID_Contact) GetUpdatedBy() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.UpdatedBy
}

type GetContacts_Contacts_Edges_Node struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	ID          string           "json:\"id\" graphql:\"id\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetContacts_Contacts_Edges_Node) GetAddress() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.Address
}
func (t *GetContacts_Contacts_Edges_Node) GetCompany() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.Company
}
func (t *GetContacts_Contacts_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetContacts_Contacts_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetContacts_Contacts_Edges_Node) GetEmail() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.Email
}
func (t *GetContacts_Contacts_Edges_Node) GetFullName() string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.FullName
}
func (t *GetContacts_Contacts_Edges_Node) GetID() string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.ID
}
func (t *GetContacts_Contacts_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetContacts_Contacts_Edges_Node) GetPhoneNumber() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.PhoneNumber
}
func (t *GetContacts_Contacts_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return &t.Status
}
func (t *GetContacts_Contacts_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.Tags
}
func (t *GetContacts_Contacts_Edges_Node) GetTitle() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.Title
}
func (t *GetContacts_Contacts_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetContacts_Contacts_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetContacts_Contacts_Edges struct {
	Node *GetContacts_Contacts_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetContacts_Contacts_Edges) GetNode() *GetContacts_Contacts_Edges_Node {
	if t == nil {
		t = &GetContacts_Contacts_Edges{}
	}
	return t.Node
}

type GetContacts_Contacts struct {
	Edges []*GetContacts_Contacts_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetContacts_Contacts) GetEdges() []*GetContacts_Contacts_Edges {
	if t == nil {
		t = &GetContacts_Contacts{}
	}
	return t.Edges
}

type UpdateContact_UpdateContact_Contact struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	ID          string           "json:\"id\" graphql:\"id\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateContact_UpdateContact_Contact) GetAddress() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.Address
}
func (t *UpdateContact_UpdateContact_Contact) GetCompany() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.Company
}
func (t *UpdateContact_UpdateContact_Contact) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.CreatedAt
}
func (t *UpdateContact_UpdateContact_Contact) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.CreatedBy
}
func (t *UpdateContact_UpdateContact_Contact) GetEmail() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.Email
}
func (t *UpdateContact_UpdateContact_Contact) GetFullName() string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.FullName
}
func (t *UpdateContact_UpdateContact_Contact) GetID() string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.ID
}
func (t *UpdateContact_UpdateContact_Contact) GetOwnerID() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.OwnerID
}
func (t *UpdateContact_UpdateContact_Contact) GetPhoneNumber() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.PhoneNumber
}
func (t *UpdateContact_UpdateContact_Contact) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return &t.Status
}
func (t *UpdateContact_UpdateContact_Contact) GetTags() []string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.Tags
}
func (t *UpdateContact_UpdateContact_Contact) GetTitle() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.Title
}
func (t *UpdateContact_UpdateContact_Contact) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.UpdatedAt
}
func (t *UpdateContact_UpdateContact_Contact) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.UpdatedBy
}

type UpdateContact_UpdateContact struct {
	Contact UpdateContact_UpdateContact_Contact "json:\"contact\" graphql:\"contact\""
}

func (t *UpdateContact_UpdateContact) GetContact() *UpdateContact_UpdateContact_Contact {
	if t == nil {
		t = &UpdateContact_UpdateContact{}
	}
	return &t.Contact
}

type GetAllContactHistories_ContactHistories_Edges_Node struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	HistoryTime time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID          string           "json:\"id\" graphql:\"id\""
	Operation   history.OpType   "json:\"operation\" graphql:\"operation\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Ref         *string          "json:\"ref,omitempty\" graphql:\"ref\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetAddress() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Address
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetCompany() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Company
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetEmail() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Email
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetFullName() string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.FullName
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetPhoneNumber() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.PhoneNumber
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetTitle() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Title
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllContactHistories_ContactHistories_Edges struct {
	Node *GetAllContactHistories_ContactHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllContactHistories_ContactHistories_Edges) GetNode() *GetAllContactHistories_ContactHistories_Edges_Node {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges{}
	}
	return t.Node
}

type GetAllContactHistories_ContactHistories struct {
	Edges []*GetAllContactHistories_ContactHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllContactHistories_ContactHistories) GetEdges() []*GetAllContactHistories_ContactHistories_Edges {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories{}
	}
	return t.Edges
}

type GetContactHistories_ContactHistories_Edges_Node struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	HistoryTime time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID          string           "json:\"id\" graphql:\"id\""
	Operation   history.OpType   "json:\"operation\" graphql:\"operation\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Ref         *string          "json:\"ref,omitempty\" graphql:\"ref\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetContactHistories_ContactHistories_Edges_Node) GetAddress() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Address
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetCompany() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Company
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetEmail() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Email
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetFullName() string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.FullName
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetPhoneNumber() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.PhoneNumber
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetTitle() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Title
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetContactHistories_ContactHistories_Edges struct {
	Node *GetContactHistories_ContactHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetContactHistories_ContactHistories_Edges) GetNode() *GetContactHistories_ContactHistories_Edges_Node {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges{}
	}
	return t.Node
}

type GetContactHistories_ContactHistories struct {
	Edges []*GetContactHistories_ContactHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetContactHistories_ContactHistories) GetEdges() []*GetContactHistories_ContactHistories_Edges {
	if t == nil {
		t = &GetContactHistories_ContactHistories{}
	}
	return t.Edges
}

type CreateBulkControl_CreateBulkControl_Controls struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	StandardID             *string                          "json:\"standardID,omitempty\" graphql:\"standardID\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkControl_CreateBulkControl_Controls) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.AssessmentMethods
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.AssessmentObjectives
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetCategory() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.Category
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetCategoryID() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.CategoryID
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetControlQuestions() []string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.ControlQuestions
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetControlType() *enums.ControlType {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.ControlType
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.CreatedAt
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.CreatedBy
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetDescription() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.Description
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.DisplayID
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.ExampleEvidence
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetID() string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.ID
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.ImplementationGuidance
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetMappedCategories() []string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.MappedCategories
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.OwnerID
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetRefCode() string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.RefCode
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetReferences() []*models.Reference {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.References
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetSource() *enums.ControlSource {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.Source
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetStandardID() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.StandardID
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.Status
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetSubcategory() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.Subcategory
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetTags() []string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.Tags
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.UpdatedBy
}

type CreateBulkControl_CreateBulkControl struct {
	Controls []*CreateBulkControl_CreateBulkControl_Controls "json:\"controls,omitempty\" graphql:\"controls\""
}

func (t *CreateBulkControl_CreateBulkControl) GetControls() []*CreateBulkControl_CreateBulkControl_Controls {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl{}
	}
	return t.Controls
}

type CreateBulkCSVControl_CreateBulkCSVControl_Controls struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	StandardID             *string                          "json:\"standardID,omitempty\" graphql:\"standardID\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.AssessmentMethods
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.AssessmentObjectives
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetCategory() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.Category
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetCategoryID() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.CategoryID
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetControlQuestions() []string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.ControlQuestions
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetControlType() *enums.ControlType {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.ControlType
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.Description
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.DisplayID
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.ExampleEvidence
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetID() string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.ID
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.ImplementationGuidance
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetMappedCategories() []string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.MappedCategories
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetRefCode() string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.RefCode
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetReferences() []*models.Reference {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.References
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetSource() *enums.ControlSource {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.Source
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetStandardID() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.StandardID
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.Status
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetSubcategory() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.Subcategory
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.Tags
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVControl_CreateBulkCSVControl struct {
	Controls []*CreateBulkCSVControl_CreateBulkCSVControl_Controls "json:\"controls,omitempty\" graphql:\"controls\""
}

func (t *CreateBulkCSVControl_CreateBulkCSVControl) GetControls() []*CreateBulkCSVControl_CreateBulkCSVControl_Controls {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl{}
	}
	return t.Controls
}

type CreateControl_CreateControl_Control_ControlOwner struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateControl_CreateControl_Control_ControlOwner) GetID() string {
	if t == nil {
		t = &CreateControl_CreateControl_Control_ControlOwner{}
	}
	return t.ID
}
func (t *CreateControl_CreateControl_Control_ControlOwner) GetName() string {
	if t == nil {
		t = &CreateControl_CreateControl_Control_ControlOwner{}
	}
	return t.Name
}

type CreateControl_CreateControl_Control_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateControl_CreateControl_Control_Delegate) GetID() string {
	if t == nil {
		t = &CreateControl_CreateControl_Control_Delegate{}
	}
	return t.ID
}
func (t *CreateControl_CreateControl_Control_Delegate) GetName() string {
	if t == nil {
		t = &CreateControl_CreateControl_Control_Delegate{}
	}
	return t.Name
}

type CreateControl_CreateControl_Control_Programs_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *CreateControl_CreateControl_Control_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &CreateControl_CreateControl_Control_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *CreateControl_CreateControl_Control_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateControl_CreateControl_Control_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *CreateControl_CreateControl_Control_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &CreateControl_CreateControl_Control_Programs_Edges_Node{}
	}
	return t.Name
}

type CreateControl_CreateControl_Control_Programs_Edges struct {
	Node *CreateControl_CreateControl_Control_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateControl_CreateControl_Control_Programs_Edges) GetNode() *CreateControl_CreateControl_Control_Programs_Edges_Node {
	if t == nil {
		t = &CreateControl_CreateControl_Control_Programs_Edges{}
	}
	return t.Node
}

type CreateControl_CreateControl_Control_Programs struct {
	Edges []*CreateControl_CreateControl_Control_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateControl_CreateControl_Control_Programs) GetEdges() []*CreateControl_CreateControl_Control_Programs_Edges {
	if t == nil {
		t = &CreateControl_CreateControl_Control_Programs{}
	}
	return t.Edges
}

type CreateControl_CreateControl_Control_ControlImplementations_Edges_Node struct {
	Details *string               "json:\"details,omitempty\" graphql:\"details\""
	ID      string                "json:\"id\" graphql:\"id\""
	Status  *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
}

func (t *CreateControl_CreateControl_Control_ControlImplementations_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control_ControlImplementations_Edges_Node{}
	}
	return t.Details
}
func (t *CreateControl_CreateControl_Control_ControlImplementations_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateControl_CreateControl_Control_ControlImplementations_Edges_Node{}
	}
	return t.ID
}
func (t *CreateControl_CreateControl_Control_ControlImplementations_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateControl_CreateControl_Control_ControlImplementations_Edges_Node{}
	}
	return t.Status
}

type CreateControl_CreateControl_Control_ControlImplementations_Edges struct {
	Node *CreateControl_CreateControl_Control_ControlImplementations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateControl_CreateControl_Control_ControlImplementations_Edges) GetNode() *CreateControl_CreateControl_Control_ControlImplementations_Edges_Node {
	if t == nil {
		t = &CreateControl_CreateControl_Control_ControlImplementations_Edges{}
	}
	return t.Node
}

type CreateControl_CreateControl_Control_ControlImplementations struct {
	Edges []*CreateControl_CreateControl_Control_ControlImplementations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateControl_CreateControl_Control_ControlImplementations) GetEdges() []*CreateControl_CreateControl_Control_ControlImplementations_Edges {
	if t == nil {
		t = &CreateControl_CreateControl_Control_ControlImplementations{}
	}
	return t.Edges
}

type CreateControl_CreateControl_Control_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateControl_CreateControl_Control_Editors) GetID() string {
	if t == nil {
		t = &CreateControl_CreateControl_Control_Editors{}
	}
	return t.ID
}
func (t *CreateControl_CreateControl_Control_Editors) GetName() string {
	if t == nil {
		t = &CreateControl_CreateControl_Control_Editors{}
	}
	return t.Name
}

type CreateControl_CreateControl_Control_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateControl_CreateControl_Control_Viewers) GetID() string {
	if t == nil {
		t = &CreateControl_CreateControl_Control_Viewers{}
	}
	return t.ID
}
func (t *CreateControl_CreateControl_Control_Viewers) GetName() string {
	if t == nil {
		t = &CreateControl_CreateControl_Control_Viewers{}
	}
	return t.Name
}

type CreateControl_CreateControl_Control_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateControl_CreateControl_Control_BlockedGroups) GetID() string {
	if t == nil {
		t = &CreateControl_CreateControl_Control_BlockedGroups{}
	}
	return t.ID
}
func (t *CreateControl_CreateControl_Control_BlockedGroups) GetName() string {
	if t == nil {
		t = &CreateControl_CreateControl_Control_BlockedGroups{}
	}
	return t.Name
}

type CreateControl_CreateControl_Control struct {
	AssessmentMethods      []*models.AssessmentMethod                                 "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective                              "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	BlockedGroups          []*CreateControl_CreateControl_Control_BlockedGroups       "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	Category               *string                                                    "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                                                    "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlImplementations CreateControl_CreateControl_Control_ControlImplementations "json:\"controlImplementations\" graphql:\"controlImplementations\""
	ControlOwner           *CreateControl_CreateControl_Control_ControlOwner          "json:\"controlOwner,omitempty\" graphql:\"controlOwner\""
	ControlQuestions       []string                                                   "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType                                         "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate               *CreateControl_CreateControl_Control_Delegate              "json:\"delegate,omitempty\" graphql:\"delegate\""
	Description            *string                                                    "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                                                     "json:\"displayID\" graphql:\"displayID\""
	Editors                []*CreateControl_CreateControl_Control_Editors             "json:\"editors,omitempty\" graphql:\"editors\""
	ExampleEvidence        []*models.ExampleEvidence                                  "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                                                     "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance                           "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                                                   "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                                                    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Programs               CreateControl_CreateControl_Control_Programs               "json:\"programs\" graphql:\"programs\""
	RefCode                string                                                     "json:\"refCode\" graphql:\"refCode\""
	References             []*models.Reference                                        "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource                                       "json:\"source,omitempty\" graphql:\"source\""
	StandardID             *string                                                    "json:\"standardID,omitempty\" graphql:\"standardID\""
	Status                 *enums.ControlStatus                                       "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                                                    "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                                                   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers                []*CreateControl_CreateControl_Control_Viewers             "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *CreateControl_CreateControl_Control) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.AssessmentMethods
}
func (t *CreateControl_CreateControl_Control) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.AssessmentObjectives
}
func (t *CreateControl_CreateControl_Control) GetBlockedGroups() []*CreateControl_CreateControl_Control_BlockedGroups {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.BlockedGroups
}
func (t *CreateControl_CreateControl_Control) GetCategory() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Category
}
func (t *CreateControl_CreateControl_Control) GetCategoryID() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.CategoryID
}
func (t *CreateControl_CreateControl_Control) GetControlImplementations() *CreateControl_CreateControl_Control_ControlImplementations {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return &t.ControlImplementations
}
func (t *CreateControl_CreateControl_Control) GetControlOwner() *CreateControl_CreateControl_Control_ControlOwner {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.ControlOwner
}
func (t *CreateControl_CreateControl_Control) GetControlQuestions() []string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.ControlQuestions
}
func (t *CreateControl_CreateControl_Control) GetControlType() *enums.ControlType {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.ControlType
}
func (t *CreateControl_CreateControl_Control) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.CreatedAt
}
func (t *CreateControl_CreateControl_Control) GetCreatedBy() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.CreatedBy
}
func (t *CreateControl_CreateControl_Control) GetDelegate() *CreateControl_CreateControl_Control_Delegate {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Delegate
}
func (t *CreateControl_CreateControl_Control) GetDescription() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Description
}
func (t *CreateControl_CreateControl_Control) GetDisplayID() string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.DisplayID
}
func (t *CreateControl_CreateControl_Control) GetEditors() []*CreateControl_CreateControl_Control_Editors {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Editors
}
func (t *CreateControl_CreateControl_Control) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.ExampleEvidence
}
func (t *CreateControl_CreateControl_Control) GetID() string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.ID
}
func (t *CreateControl_CreateControl_Control) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.ImplementationGuidance
}
func (t *CreateControl_CreateControl_Control) GetMappedCategories() []string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.MappedCategories
}
func (t *CreateControl_CreateControl_Control) GetOwnerID() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.OwnerID
}
func (t *CreateControl_CreateControl_Control) GetPrograms() *CreateControl_CreateControl_Control_Programs {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return &t.Programs
}
func (t *CreateControl_CreateControl_Control) GetRefCode() string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.RefCode
}
func (t *CreateControl_CreateControl_Control) GetReferences() []*models.Reference {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.References
}
func (t *CreateControl_CreateControl_Control) GetSource() *enums.ControlSource {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Source
}
func (t *CreateControl_CreateControl_Control) GetStandardID() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.StandardID
}
func (t *CreateControl_CreateControl_Control) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Status
}
func (t *CreateControl_CreateControl_Control) GetSubcategory() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Subcategory
}
func (t *CreateControl_CreateControl_Control) GetTags() []string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Tags
}
func (t *CreateControl_CreateControl_Control) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.UpdatedAt
}
func (t *CreateControl_CreateControl_Control) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.UpdatedBy
}
func (t *CreateControl_CreateControl_Control) GetViewers() []*CreateControl_CreateControl_Control_Viewers {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Viewers
}

type CreateControl_CreateControl struct {
	Control CreateControl_CreateControl_Control "json:\"control\" graphql:\"control\""
}

func (t *CreateControl_CreateControl) GetControl() *CreateControl_CreateControl_Control {
	if t == nil {
		t = &CreateControl_CreateControl{}
	}
	return &t.Control
}

type DeleteControl_DeleteControl struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteControl_DeleteControl) GetDeletedID() string {
	if t == nil {
		t = &DeleteControl_DeleteControl{}
	}
	return t.DeletedID
}

type GetAllControls_Controls_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllControls_Controls_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllControls_Controls_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllControls_Controls_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllControls_Controls_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllControls_Controls_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllControls_Controls_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllControls_Controls_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllControls_Controls_PageInfo{}
	}
	return t.StartCursor
}

type GetAllControls_Controls_Edges_Node_ControlOwner struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllControls_Controls_Edges_Node_ControlOwner) GetID() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_ControlOwner{}
	}
	return t.ID
}
func (t *GetAllControls_Controls_Edges_Node_ControlOwner) GetName() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_ControlOwner{}
	}
	return t.Name
}

type GetAllControls_Controls_Edges_Node_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllControls_Controls_Edges_Node_Delegate) GetID() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_Delegate{}
	}
	return t.ID
}
func (t *GetAllControls_Controls_Edges_Node_Delegate) GetName() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_Delegate{}
	}
	return t.Name
}

type GetAllControls_Controls_Edges_Node_Standard struct {
	GoverningBody *string "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	ID            string  "json:\"id\" graphql:\"id\""
	Name          string  "json:\"name\" graphql:\"name\""
	ShortName     *string "json:\"shortName,omitempty\" graphql:\"shortName\""
}

func (t *GetAllControls_Controls_Edges_Node_Standard) GetGoverningBody() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_Standard{}
	}
	return t.GoverningBody
}
func (t *GetAllControls_Controls_Edges_Node_Standard) GetID() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_Standard{}
	}
	return t.ID
}
func (t *GetAllControls_Controls_Edges_Node_Standard) GetName() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_Standard{}
	}
	return t.Name
}
func (t *GetAllControls_Controls_Edges_Node_Standard) GetShortName() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_Standard{}
	}
	return t.ShortName
}

type GetAllControls_Controls_Edges_Node_ControlImplementations_Edges_Node struct {
	Details *string               "json:\"details,omitempty\" graphql:\"details\""
	ID      string                "json:\"id\" graphql:\"id\""
	Status  *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
}

func (t *GetAllControls_Controls_Edges_Node_ControlImplementations_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_ControlImplementations_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllControls_Controls_Edges_Node_ControlImplementations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_ControlImplementations_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllControls_Controls_Edges_Node_ControlImplementations_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_ControlImplementations_Edges_Node{}
	}
	return t.Status
}

type GetAllControls_Controls_Edges_Node_ControlImplementations_Edges struct {
	Node *GetAllControls_Controls_Edges_Node_ControlImplementations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControls_Controls_Edges_Node_ControlImplementations_Edges) GetNode() *GetAllControls_Controls_Edges_Node_ControlImplementations_Edges_Node {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_ControlImplementations_Edges{}
	}
	return t.Node
}

type GetAllControls_Controls_Edges_Node_ControlImplementations struct {
	Edges []*GetAllControls_Controls_Edges_Node_ControlImplementations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllControls_Controls_Edges_Node_ControlImplementations) GetEdges() []*GetAllControls_Controls_Edges_Node_ControlImplementations_Edges {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_ControlImplementations{}
	}
	return t.Edges
}

type GetAllControls_Controls_Edges_Node_Programs_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *GetAllControls_Controls_Edges_Node_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllControls_Controls_Edges_Node_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllControls_Controls_Edges_Node_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_Programs_Edges_Node{}
	}
	return t.Name
}

type GetAllControls_Controls_Edges_Node_Programs_Edges struct {
	Node *GetAllControls_Controls_Edges_Node_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControls_Controls_Edges_Node_Programs_Edges) GetNode() *GetAllControls_Controls_Edges_Node_Programs_Edges_Node {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_Programs_Edges{}
	}
	return t.Node
}

type GetAllControls_Controls_Edges_Node_Programs struct {
	Edges []*GetAllControls_Controls_Edges_Node_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllControls_Controls_Edges_Node_Programs) GetEdges() []*GetAllControls_Controls_Edges_Node_Programs_Edges {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_Programs{}
	}
	return t.Edges
}

type GetAllControls_Controls_Edges_Node_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllControls_Controls_Edges_Node_Editors) GetID() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_Editors{}
	}
	return t.ID
}
func (t *GetAllControls_Controls_Edges_Node_Editors) GetName() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_Editors{}
	}
	return t.Name
}

type GetAllControls_Controls_Edges_Node_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllControls_Controls_Edges_Node_Viewers) GetID() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_Viewers{}
	}
	return t.ID
}
func (t *GetAllControls_Controls_Edges_Node_Viewers) GetName() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_Viewers{}
	}
	return t.Name
}

type GetAllControls_Controls_Edges_Node_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllControls_Controls_Edges_Node_BlockedGroups) GetID() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_BlockedGroups{}
	}
	return t.ID
}
func (t *GetAllControls_Controls_Edges_Node_BlockedGroups) GetName() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node_BlockedGroups{}
	}
	return t.Name
}

type GetAllControls_Controls_Edges_Node struct {
	AssessmentMethods      []*models.AssessmentMethod                                "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective                             "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	BlockedGroups          []*GetAllControls_Controls_Edges_Node_BlockedGroups       "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	Category               *string                                                   "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                                                   "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlImplementations GetAllControls_Controls_Edges_Node_ControlImplementations "json:\"controlImplementations\" graphql:\"controlImplementations\""
	ControlOwner           *GetAllControls_Controls_Edges_Node_ControlOwner          "json:\"controlOwner,omitempty\" graphql:\"controlOwner\""
	ControlQuestions       []string                                                  "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType                                        "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                                                "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                                                   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate               *GetAllControls_Controls_Edges_Node_Delegate              "json:\"delegate,omitempty\" graphql:\"delegate\""
	Description            *string                                                   "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                                                    "json:\"displayID\" graphql:\"displayID\""
	Editors                []*GetAllControls_Controls_Edges_Node_Editors             "json:\"editors,omitempty\" graphql:\"editors\""
	ExampleEvidence        []*models.ExampleEvidence                                 "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                                                    "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance                          "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                                                  "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                                                   "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Programs               GetAllControls_Controls_Edges_Node_Programs               "json:\"programs\" graphql:\"programs\""
	RefCode                string                                                    "json:\"refCode\" graphql:\"refCode\""
	References             []*models.Reference                                       "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource                                      "json:\"source,omitempty\" graphql:\"source\""
	Standard               *GetAllControls_Controls_Edges_Node_Standard              "json:\"standard,omitempty\" graphql:\"standard\""
	StandardID             *string                                                   "json:\"standardID,omitempty\" graphql:\"standardID\""
	Status                 *enums.ControlStatus                                      "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                                                   "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                                                  "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                                                "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                                                   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers                []*GetAllControls_Controls_Edges_Node_Viewers             "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *GetAllControls_Controls_Edges_Node) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.AssessmentMethods
}
func (t *GetAllControls_Controls_Edges_Node) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.AssessmentObjectives
}
func (t *GetAllControls_Controls_Edges_Node) GetBlockedGroups() []*GetAllControls_Controls_Edges_Node_BlockedGroups {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.BlockedGroups
}
func (t *GetAllControls_Controls_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllControls_Controls_Edges_Node) GetCategoryID() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.CategoryID
}
func (t *GetAllControls_Controls_Edges_Node) GetControlImplementations() *GetAllControls_Controls_Edges_Node_ControlImplementations {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return &t.ControlImplementations
}
func (t *GetAllControls_Controls_Edges_Node) GetControlOwner() *GetAllControls_Controls_Edges_Node_ControlOwner {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.ControlOwner
}
func (t *GetAllControls_Controls_Edges_Node) GetControlQuestions() []string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.ControlQuestions
}
func (t *GetAllControls_Controls_Edges_Node) GetControlType() *enums.ControlType {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.ControlType
}
func (t *GetAllControls_Controls_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllControls_Controls_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllControls_Controls_Edges_Node) GetDelegate() *GetAllControls_Controls_Edges_Node_Delegate {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Delegate
}
func (t *GetAllControls_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllControls_Controls_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllControls_Controls_Edges_Node) GetEditors() []*GetAllControls_Controls_Edges_Node_Editors {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Editors
}
func (t *GetAllControls_Controls_Edges_Node) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.ExampleEvidence
}
func (t *GetAllControls_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllControls_Controls_Edges_Node) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.ImplementationGuidance
}
func (t *GetAllControls_Controls_Edges_Node) GetMappedCategories() []string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.MappedCategories
}
func (t *GetAllControls_Controls_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllControls_Controls_Edges_Node) GetPrograms() *GetAllControls_Controls_Edges_Node_Programs {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return &t.Programs
}
func (t *GetAllControls_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.RefCode
}
func (t *GetAllControls_Controls_Edges_Node) GetReferences() []*models.Reference {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.References
}
func (t *GetAllControls_Controls_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllControls_Controls_Edges_Node) GetStandard() *GetAllControls_Controls_Edges_Node_Standard {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Standard
}
func (t *GetAllControls_Controls_Edges_Node) GetStandardID() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.StandardID
}
func (t *GetAllControls_Controls_Edges_Node) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllControls_Controls_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetAllControls_Controls_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllControls_Controls_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllControls_Controls_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllControls_Controls_Edges_Node) GetViewers() []*GetAllControls_Controls_Edges_Node_Viewers {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Viewers
}

type GetAllControls_Controls_Edges struct {
	Node *GetAllControls_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControls_Controls_Edges) GetNode() *GetAllControls_Controls_Edges_Node {
	if t == nil {
		t = &GetAllControls_Controls_Edges{}
	}
	return t.Node
}

type GetAllControls_Controls struct {
	Edges      []*GetAllControls_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllControls_Controls_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                            "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllControls_Controls) GetEdges() []*GetAllControls_Controls_Edges {
	if t == nil {
		t = &GetAllControls_Controls{}
	}
	return t.Edges
}
func (t *GetAllControls_Controls) GetPageInfo() *GetAllControls_Controls_PageInfo {
	if t == nil {
		t = &GetAllControls_Controls{}
	}
	return &t.PageInfo
}
func (t *GetAllControls_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllControls_Controls{}
	}
	return t.TotalCount
}

type GetControlByID_Control_ControlOwner struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetControlByID_Control_ControlOwner) GetID() string {
	if t == nil {
		t = &GetControlByID_Control_ControlOwner{}
	}
	return t.ID
}
func (t *GetControlByID_Control_ControlOwner) GetName() string {
	if t == nil {
		t = &GetControlByID_Control_ControlOwner{}
	}
	return t.Name
}

type GetControlByID_Control_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetControlByID_Control_Delegate) GetID() string {
	if t == nil {
		t = &GetControlByID_Control_Delegate{}
	}
	return t.ID
}
func (t *GetControlByID_Control_Delegate) GetName() string {
	if t == nil {
		t = &GetControlByID_Control_Delegate{}
	}
	return t.Name
}

type GetControlByID_Control_Standard struct {
	GoverningBody *string "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	ID            string  "json:\"id\" graphql:\"id\""
	Name          string  "json:\"name\" graphql:\"name\""
	ShortName     *string "json:\"shortName,omitempty\" graphql:\"shortName\""
}

func (t *GetControlByID_Control_Standard) GetGoverningBody() *string {
	if t == nil {
		t = &GetControlByID_Control_Standard{}
	}
	return t.GoverningBody
}
func (t *GetControlByID_Control_Standard) GetID() string {
	if t == nil {
		t = &GetControlByID_Control_Standard{}
	}
	return t.ID
}
func (t *GetControlByID_Control_Standard) GetName() string {
	if t == nil {
		t = &GetControlByID_Control_Standard{}
	}
	return t.Name
}
func (t *GetControlByID_Control_Standard) GetShortName() *string {
	if t == nil {
		t = &GetControlByID_Control_Standard{}
	}
	return t.ShortName
}

type GetControlByID_Control_ControlImplementations_Edges_Node struct {
	Details *string               "json:\"details,omitempty\" graphql:\"details\""
	ID      string                "json:\"id\" graphql:\"id\""
	Status  *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
}

func (t *GetControlByID_Control_ControlImplementations_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetControlByID_Control_ControlImplementations_Edges_Node{}
	}
	return t.Details
}
func (t *GetControlByID_Control_ControlImplementations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlByID_Control_ControlImplementations_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlByID_Control_ControlImplementations_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetControlByID_Control_ControlImplementations_Edges_Node{}
	}
	return t.Status
}

type GetControlByID_Control_ControlImplementations_Edges struct {
	Node *GetControlByID_Control_ControlImplementations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlByID_Control_ControlImplementations_Edges) GetNode() *GetControlByID_Control_ControlImplementations_Edges_Node {
	if t == nil {
		t = &GetControlByID_Control_ControlImplementations_Edges{}
	}
	return t.Node
}

type GetControlByID_Control_ControlImplementations struct {
	Edges []*GetControlByID_Control_ControlImplementations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControlByID_Control_ControlImplementations) GetEdges() []*GetControlByID_Control_ControlImplementations_Edges {
	if t == nil {
		t = &GetControlByID_Control_ControlImplementations{}
	}
	return t.Edges
}

type GetControlByID_Control_Programs_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *GetControlByID_Control_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetControlByID_Control_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetControlByID_Control_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlByID_Control_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlByID_Control_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GetControlByID_Control_Programs_Edges_Node{}
	}
	return t.Name
}

type GetControlByID_Control_Programs_Edges struct {
	Node *GetControlByID_Control_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlByID_Control_Programs_Edges) GetNode() *GetControlByID_Control_Programs_Edges_Node {
	if t == nil {
		t = &GetControlByID_Control_Programs_Edges{}
	}
	return t.Node
}

type GetControlByID_Control_Programs struct {
	Edges []*GetControlByID_Control_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControlByID_Control_Programs) GetEdges() []*GetControlByID_Control_Programs_Edges {
	if t == nil {
		t = &GetControlByID_Control_Programs{}
	}
	return t.Edges
}

type GetControlByID_Control_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetControlByID_Control_Editors) GetID() string {
	if t == nil {
		t = &GetControlByID_Control_Editors{}
	}
	return t.ID
}
func (t *GetControlByID_Control_Editors) GetName() string {
	if t == nil {
		t = &GetControlByID_Control_Editors{}
	}
	return t.Name
}

type GetControlByID_Control_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetControlByID_Control_Viewers) GetID() string {
	if t == nil {
		t = &GetControlByID_Control_Viewers{}
	}
	return t.ID
}
func (t *GetControlByID_Control_Viewers) GetName() string {
	if t == nil {
		t = &GetControlByID_Control_Viewers{}
	}
	return t.Name
}

type GetControlByID_Control_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetControlByID_Control_BlockedGroups) GetID() string {
	if t == nil {
		t = &GetControlByID_Control_BlockedGroups{}
	}
	return t.ID
}
func (t *GetControlByID_Control_BlockedGroups) GetName() string {
	if t == nil {
		t = &GetControlByID_Control_BlockedGroups{}
	}
	return t.Name
}

type GetControlByID_Control struct {
	AssessmentMethods      []*models.AssessmentMethod                    "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective                 "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	BlockedGroups          []*GetControlByID_Control_BlockedGroups       "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	Category               *string                                       "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                                       "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlImplementations GetControlByID_Control_ControlImplementations "json:\"controlImplementations\" graphql:\"controlImplementations\""
	ControlOwner           *GetControlByID_Control_ControlOwner          "json:\"controlOwner,omitempty\" graphql:\"controlOwner\""
	ControlQuestions       []string                                      "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType                            "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate               *GetControlByID_Control_Delegate              "json:\"delegate,omitempty\" graphql:\"delegate\""
	Description            *string                                       "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                                        "json:\"displayID\" graphql:\"displayID\""
	Editors                []*GetControlByID_Control_Editors             "json:\"editors,omitempty\" graphql:\"editors\""
	ExampleEvidence        []*models.ExampleEvidence                     "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                                        "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance              "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                                      "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                                       "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Programs               GetControlByID_Control_Programs               "json:\"programs\" graphql:\"programs\""
	RefCode                string                                        "json:\"refCode\" graphql:\"refCode\""
	References             []*models.Reference                           "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource                          "json:\"source,omitempty\" graphql:\"source\""
	Standard               *GetControlByID_Control_Standard              "json:\"standard,omitempty\" graphql:\"standard\""
	StandardID             *string                                       "json:\"standardID,omitempty\" graphql:\"standardID\""
	Status                 *enums.ControlStatus                          "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                                       "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                                      "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers                []*GetControlByID_Control_Viewers             "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *GetControlByID_Control) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.AssessmentMethods
}
func (t *GetControlByID_Control) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.AssessmentObjectives
}
func (t *GetControlByID_Control) GetBlockedGroups() []*GetControlByID_Control_BlockedGroups {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.BlockedGroups
}
func (t *GetControlByID_Control) GetCategory() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Category
}
func (t *GetControlByID_Control) GetCategoryID() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.CategoryID
}
func (t *GetControlByID_Control) GetControlImplementations() *GetControlByID_Control_ControlImplementations {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return &t.ControlImplementations
}
func (t *GetControlByID_Control) GetControlOwner() *GetControlByID_Control_ControlOwner {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.ControlOwner
}
func (t *GetControlByID_Control) GetControlQuestions() []string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.ControlQuestions
}
func (t *GetControlByID_Control) GetControlType() *enums.ControlType {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.ControlType
}
func (t *GetControlByID_Control) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.CreatedAt
}
func (t *GetControlByID_Control) GetCreatedBy() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.CreatedBy
}
func (t *GetControlByID_Control) GetDelegate() *GetControlByID_Control_Delegate {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Delegate
}
func (t *GetControlByID_Control) GetDescription() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Description
}
func (t *GetControlByID_Control) GetDisplayID() string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.DisplayID
}
func (t *GetControlByID_Control) GetEditors() []*GetControlByID_Control_Editors {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Editors
}
func (t *GetControlByID_Control) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.ExampleEvidence
}
func (t *GetControlByID_Control) GetID() string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.ID
}
func (t *GetControlByID_Control) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.ImplementationGuidance
}
func (t *GetControlByID_Control) GetMappedCategories() []string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.MappedCategories
}
func (t *GetControlByID_Control) GetOwnerID() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.OwnerID
}
func (t *GetControlByID_Control) GetPrograms() *GetControlByID_Control_Programs {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return &t.Programs
}
func (t *GetControlByID_Control) GetRefCode() string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.RefCode
}
func (t *GetControlByID_Control) GetReferences() []*models.Reference {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.References
}
func (t *GetControlByID_Control) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Source
}
func (t *GetControlByID_Control) GetStandard() *GetControlByID_Control_Standard {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Standard
}
func (t *GetControlByID_Control) GetStandardID() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.StandardID
}
func (t *GetControlByID_Control) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Status
}
func (t *GetControlByID_Control) GetSubcategory() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Subcategory
}
func (t *GetControlByID_Control) GetTags() []string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Tags
}
func (t *GetControlByID_Control) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.UpdatedAt
}
func (t *GetControlByID_Control) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.UpdatedBy
}
func (t *GetControlByID_Control) GetViewers() []*GetControlByID_Control_Viewers {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Viewers
}

type GetControls_Controls_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetControls_Controls_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetControls_Controls_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetControls_Controls_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetControls_Controls_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetControls_Controls_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetControls_Controls_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetControls_Controls_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetControls_Controls_PageInfo{}
	}
	return t.StartCursor
}

type GetControls_Controls_Edges_Node_ControlOwner struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetControls_Controls_Edges_Node_ControlOwner) GetID() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_ControlOwner{}
	}
	return t.ID
}
func (t *GetControls_Controls_Edges_Node_ControlOwner) GetName() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_ControlOwner{}
	}
	return t.Name
}

type GetControls_Controls_Edges_Node_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetControls_Controls_Edges_Node_Delegate) GetID() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_Delegate{}
	}
	return t.ID
}
func (t *GetControls_Controls_Edges_Node_Delegate) GetName() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_Delegate{}
	}
	return t.Name
}

type GetControls_Controls_Edges_Node_Standard struct {
	GoverningBody *string "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	ID            string  "json:\"id\" graphql:\"id\""
	Name          string  "json:\"name\" graphql:\"name\""
	ShortName     *string "json:\"shortName,omitempty\" graphql:\"shortName\""
}

func (t *GetControls_Controls_Edges_Node_Standard) GetGoverningBody() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_Standard{}
	}
	return t.GoverningBody
}
func (t *GetControls_Controls_Edges_Node_Standard) GetID() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_Standard{}
	}
	return t.ID
}
func (t *GetControls_Controls_Edges_Node_Standard) GetName() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_Standard{}
	}
	return t.Name
}
func (t *GetControls_Controls_Edges_Node_Standard) GetShortName() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_Standard{}
	}
	return t.ShortName
}

type GetControls_Controls_Edges_Node_ControlImplementations_Edges_Node struct {
	Details *string               "json:\"details,omitempty\" graphql:\"details\""
	ID      string                "json:\"id\" graphql:\"id\""
	Status  *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
}

func (t *GetControls_Controls_Edges_Node_ControlImplementations_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_ControlImplementations_Edges_Node{}
	}
	return t.Details
}
func (t *GetControls_Controls_Edges_Node_ControlImplementations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_ControlImplementations_Edges_Node{}
	}
	return t.ID
}
func (t *GetControls_Controls_Edges_Node_ControlImplementations_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_ControlImplementations_Edges_Node{}
	}
	return t.Status
}

type GetControls_Controls_Edges_Node_ControlImplementations_Edges struct {
	Node *GetControls_Controls_Edges_Node_ControlImplementations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControls_Controls_Edges_Node_ControlImplementations_Edges) GetNode() *GetControls_Controls_Edges_Node_ControlImplementations_Edges_Node {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_ControlImplementations_Edges{}
	}
	return t.Node
}

type GetControls_Controls_Edges_Node_ControlImplementations struct {
	Edges []*GetControls_Controls_Edges_Node_ControlImplementations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControls_Controls_Edges_Node_ControlImplementations) GetEdges() []*GetControls_Controls_Edges_Node_ControlImplementations_Edges {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_ControlImplementations{}
	}
	return t.Edges
}

type GetControls_Controls_Edges_Node_Programs_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *GetControls_Controls_Edges_Node_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetControls_Controls_Edges_Node_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GetControls_Controls_Edges_Node_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_Programs_Edges_Node{}
	}
	return t.Name
}

type GetControls_Controls_Edges_Node_Programs_Edges struct {
	Node *GetControls_Controls_Edges_Node_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControls_Controls_Edges_Node_Programs_Edges) GetNode() *GetControls_Controls_Edges_Node_Programs_Edges_Node {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_Programs_Edges{}
	}
	return t.Node
}

type GetControls_Controls_Edges_Node_Programs struct {
	Edges []*GetControls_Controls_Edges_Node_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControls_Controls_Edges_Node_Programs) GetEdges() []*GetControls_Controls_Edges_Node_Programs_Edges {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_Programs{}
	}
	return t.Edges
}

type GetControls_Controls_Edges_Node_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetControls_Controls_Edges_Node_Editors) GetID() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_Editors{}
	}
	return t.ID
}
func (t *GetControls_Controls_Edges_Node_Editors) GetName() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_Editors{}
	}
	return t.Name
}

type GetControls_Controls_Edges_Node_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetControls_Controls_Edges_Node_Viewers) GetID() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_Viewers{}
	}
	return t.ID
}
func (t *GetControls_Controls_Edges_Node_Viewers) GetName() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_Viewers{}
	}
	return t.Name
}

type GetControls_Controls_Edges_Node_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetControls_Controls_Edges_Node_BlockedGroups) GetID() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_BlockedGroups{}
	}
	return t.ID
}
func (t *GetControls_Controls_Edges_Node_BlockedGroups) GetName() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node_BlockedGroups{}
	}
	return t.Name
}

type GetControls_Controls_Edges_Node struct {
	AssessmentMethods      []*models.AssessmentMethod                             "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective                          "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	BlockedGroups          []*GetControls_Controls_Edges_Node_BlockedGroups       "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	Category               *string                                                "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                                                "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlImplementations GetControls_Controls_Edges_Node_ControlImplementations "json:\"controlImplementations\" graphql:\"controlImplementations\""
	ControlOwner           *GetControls_Controls_Edges_Node_ControlOwner          "json:\"controlOwner,omitempty\" graphql:\"controlOwner\""
	ControlQuestions       []string                                               "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType                                     "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate               *GetControls_Controls_Edges_Node_Delegate              "json:\"delegate,omitempty\" graphql:\"delegate\""
	Description            *string                                                "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                                                 "json:\"displayID\" graphql:\"displayID\""
	Editors                []*GetControls_Controls_Edges_Node_Editors             "json:\"editors,omitempty\" graphql:\"editors\""
	ExampleEvidence        []*models.ExampleEvidence                              "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                                                 "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance                       "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                                               "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                                                "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Programs               GetControls_Controls_Edges_Node_Programs               "json:\"programs\" graphql:\"programs\""
	RefCode                string                                                 "json:\"refCode\" graphql:\"refCode\""
	References             []*models.Reference                                    "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource                                   "json:\"source,omitempty\" graphql:\"source\""
	Standard               *GetControls_Controls_Edges_Node_Standard              "json:\"standard,omitempty\" graphql:\"standard\""
	StandardID             *string                                                "json:\"standardID,omitempty\" graphql:\"standardID\""
	Status                 *enums.ControlStatus                                   "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                                                "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                                               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers                []*GetControls_Controls_Edges_Node_Viewers             "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *GetControls_Controls_Edges_Node) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.AssessmentMethods
}
func (t *GetControls_Controls_Edges_Node) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.AssessmentObjectives
}
func (t *GetControls_Controls_Edges_Node) GetBlockedGroups() []*GetControls_Controls_Edges_Node_BlockedGroups {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.BlockedGroups
}
func (t *GetControls_Controls_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Category
}
func (t *GetControls_Controls_Edges_Node) GetCategoryID() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.CategoryID
}
func (t *GetControls_Controls_Edges_Node) GetControlImplementations() *GetControls_Controls_Edges_Node_ControlImplementations {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return &t.ControlImplementations
}
func (t *GetControls_Controls_Edges_Node) GetControlOwner() *GetControls_Controls_Edges_Node_ControlOwner {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.ControlOwner
}
func (t *GetControls_Controls_Edges_Node) GetControlQuestions() []string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.ControlQuestions
}
func (t *GetControls_Controls_Edges_Node) GetControlType() *enums.ControlType {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.ControlType
}
func (t *GetControls_Controls_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetControls_Controls_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetControls_Controls_Edges_Node) GetDelegate() *GetControls_Controls_Edges_Node_Delegate {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Delegate
}
func (t *GetControls_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *GetControls_Controls_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetControls_Controls_Edges_Node) GetEditors() []*GetControls_Controls_Edges_Node_Editors {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Editors
}
func (t *GetControls_Controls_Edges_Node) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.ExampleEvidence
}
func (t *GetControls_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetControls_Controls_Edges_Node) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.ImplementationGuidance
}
func (t *GetControls_Controls_Edges_Node) GetMappedCategories() []string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.MappedCategories
}
func (t *GetControls_Controls_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetControls_Controls_Edges_Node) GetPrograms() *GetControls_Controls_Edges_Node_Programs {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return &t.Programs
}
func (t *GetControls_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.RefCode
}
func (t *GetControls_Controls_Edges_Node) GetReferences() []*models.Reference {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.References
}
func (t *GetControls_Controls_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Source
}
func (t *GetControls_Controls_Edges_Node) GetStandard() *GetControls_Controls_Edges_Node_Standard {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Standard
}
func (t *GetControls_Controls_Edges_Node) GetStandardID() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.StandardID
}
func (t *GetControls_Controls_Edges_Node) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Status
}
func (t *GetControls_Controls_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetControls_Controls_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Tags
}
func (t *GetControls_Controls_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetControls_Controls_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetControls_Controls_Edges_Node) GetViewers() []*GetControls_Controls_Edges_Node_Viewers {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Viewers
}

type GetControls_Controls_Edges struct {
	Node *GetControls_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControls_Controls_Edges) GetNode() *GetControls_Controls_Edges_Node {
	if t == nil {
		t = &GetControls_Controls_Edges{}
	}
	return t.Node
}

type GetControls_Controls struct {
	Edges      []*GetControls_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetControls_Controls_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetControls_Controls) GetEdges() []*GetControls_Controls_Edges {
	if t == nil {
		t = &GetControls_Controls{}
	}
	return t.Edges
}
func (t *GetControls_Controls) GetPageInfo() *GetControls_Controls_PageInfo {
	if t == nil {
		t = &GetControls_Controls{}
	}
	return &t.PageInfo
}
func (t *GetControls_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &GetControls_Controls{}
	}
	return t.TotalCount
}

type UpdateControl_UpdateControl_Control_ControlOwner struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateControl_UpdateControl_Control_ControlOwner) GetID() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_ControlOwner{}
	}
	return t.ID
}
func (t *UpdateControl_UpdateControl_Control_ControlOwner) GetName() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_ControlOwner{}
	}
	return t.Name
}

type UpdateControl_UpdateControl_Control_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateControl_UpdateControl_Control_Delegate) GetID() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_Delegate{}
	}
	return t.ID
}
func (t *UpdateControl_UpdateControl_Control_Delegate) GetName() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_Delegate{}
	}
	return t.Name
}

type UpdateControl_UpdateControl_Control_Standard struct {
	GoverningBody *string "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	ID            string  "json:\"id\" graphql:\"id\""
	Name          string  "json:\"name\" graphql:\"name\""
	ShortName     *string "json:\"shortName,omitempty\" graphql:\"shortName\""
}

func (t *UpdateControl_UpdateControl_Control_Standard) GetGoverningBody() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_Standard{}
	}
	return t.GoverningBody
}
func (t *UpdateControl_UpdateControl_Control_Standard) GetID() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_Standard{}
	}
	return t.ID
}
func (t *UpdateControl_UpdateControl_Control_Standard) GetName() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_Standard{}
	}
	return t.Name
}
func (t *UpdateControl_UpdateControl_Control_Standard) GetShortName() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_Standard{}
	}
	return t.ShortName
}

type UpdateControl_UpdateControl_Control_ControlImplementations_Edges_Node struct {
	Details *string               "json:\"details,omitempty\" graphql:\"details\""
	ID      string                "json:\"id\" graphql:\"id\""
	Status  *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
}

func (t *UpdateControl_UpdateControl_Control_ControlImplementations_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_ControlImplementations_Edges_Node{}
	}
	return t.Details
}
func (t *UpdateControl_UpdateControl_Control_ControlImplementations_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_ControlImplementations_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateControl_UpdateControl_Control_ControlImplementations_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_ControlImplementations_Edges_Node{}
	}
	return t.Status
}

type UpdateControl_UpdateControl_Control_ControlImplementations_Edges struct {
	Node *UpdateControl_UpdateControl_Control_ControlImplementations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateControl_UpdateControl_Control_ControlImplementations_Edges) GetNode() *UpdateControl_UpdateControl_Control_ControlImplementations_Edges_Node {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_ControlImplementations_Edges{}
	}
	return t.Node
}

type UpdateControl_UpdateControl_Control_ControlImplementations struct {
	Edges []*UpdateControl_UpdateControl_Control_ControlImplementations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateControl_UpdateControl_Control_ControlImplementations) GetEdges() []*UpdateControl_UpdateControl_Control_ControlImplementations_Edges {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_ControlImplementations{}
	}
	return t.Edges
}

type UpdateControl_UpdateControl_Control_Programs_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *UpdateControl_UpdateControl_Control_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *UpdateControl_UpdateControl_Control_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateControl_UpdateControl_Control_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_Programs_Edges_Node{}
	}
	return t.Name
}

type UpdateControl_UpdateControl_Control_Programs_Edges struct {
	Node *UpdateControl_UpdateControl_Control_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateControl_UpdateControl_Control_Programs_Edges) GetNode() *UpdateControl_UpdateControl_Control_Programs_Edges_Node {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_Programs_Edges{}
	}
	return t.Node
}

type UpdateControl_UpdateControl_Control_Programs struct {
	Edges []*UpdateControl_UpdateControl_Control_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateControl_UpdateControl_Control_Programs) GetEdges() []*UpdateControl_UpdateControl_Control_Programs_Edges {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_Programs{}
	}
	return t.Edges
}

type UpdateControl_UpdateControl_Control_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateControl_UpdateControl_Control_Editors) GetID() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_Editors{}
	}
	return t.ID
}
func (t *UpdateControl_UpdateControl_Control_Editors) GetName() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_Editors{}
	}
	return t.Name
}

type UpdateControl_UpdateControl_Control_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateControl_UpdateControl_Control_Viewers) GetID() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_Viewers{}
	}
	return t.ID
}
func (t *UpdateControl_UpdateControl_Control_Viewers) GetName() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_Viewers{}
	}
	return t.Name
}

type UpdateControl_UpdateControl_Control_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateControl_UpdateControl_Control_BlockedGroups) GetID() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_BlockedGroups{}
	}
	return t.ID
}
func (t *UpdateControl_UpdateControl_Control_BlockedGroups) GetName() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control_BlockedGroups{}
	}
	return t.Name
}

type UpdateControl_UpdateControl_Control struct {
	AssessmentMethods      []*models.AssessmentMethod                                 "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective                              "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	BlockedGroups          []*UpdateControl_UpdateControl_Control_BlockedGroups       "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	Category               *string                                                    "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                                                    "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlImplementations UpdateControl_UpdateControl_Control_ControlImplementations "json:\"controlImplementations\" graphql:\"controlImplementations\""
	ControlOwner           *UpdateControl_UpdateControl_Control_ControlOwner          "json:\"controlOwner,omitempty\" graphql:\"controlOwner\""
	ControlQuestions       []string                                                   "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType                                         "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate               *UpdateControl_UpdateControl_Control_Delegate              "json:\"delegate,omitempty\" graphql:\"delegate\""
	Description            *string                                                    "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                                                     "json:\"displayID\" graphql:\"displayID\""
	Editors                []*UpdateControl_UpdateControl_Control_Editors             "json:\"editors,omitempty\" graphql:\"editors\""
	ExampleEvidence        []*models.ExampleEvidence                                  "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                                                     "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance                           "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                                                   "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                                                    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Programs               UpdateControl_UpdateControl_Control_Programs               "json:\"programs\" graphql:\"programs\""
	RefCode                string                                                     "json:\"refCode\" graphql:\"refCode\""
	References             []*models.Reference                                        "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource                                       "json:\"source,omitempty\" graphql:\"source\""
	Standard               *UpdateControl_UpdateControl_Control_Standard              "json:\"standard,omitempty\" graphql:\"standard\""
	StandardID             *string                                                    "json:\"standardID,omitempty\" graphql:\"standardID\""
	Status                 *enums.ControlStatus                                       "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                                                    "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                                                   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers                []*UpdateControl_UpdateControl_Control_Viewers             "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *UpdateControl_UpdateControl_Control) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.AssessmentMethods
}
func (t *UpdateControl_UpdateControl_Control) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.AssessmentObjectives
}
func (t *UpdateControl_UpdateControl_Control) GetBlockedGroups() []*UpdateControl_UpdateControl_Control_BlockedGroups {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.BlockedGroups
}
func (t *UpdateControl_UpdateControl_Control) GetCategory() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Category
}
func (t *UpdateControl_UpdateControl_Control) GetCategoryID() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.CategoryID
}
func (t *UpdateControl_UpdateControl_Control) GetControlImplementations() *UpdateControl_UpdateControl_Control_ControlImplementations {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return &t.ControlImplementations
}
func (t *UpdateControl_UpdateControl_Control) GetControlOwner() *UpdateControl_UpdateControl_Control_ControlOwner {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.ControlOwner
}
func (t *UpdateControl_UpdateControl_Control) GetControlQuestions() []string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.ControlQuestions
}
func (t *UpdateControl_UpdateControl_Control) GetControlType() *enums.ControlType {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.ControlType
}
func (t *UpdateControl_UpdateControl_Control) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.CreatedAt
}
func (t *UpdateControl_UpdateControl_Control) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.CreatedBy
}
func (t *UpdateControl_UpdateControl_Control) GetDelegate() *UpdateControl_UpdateControl_Control_Delegate {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Delegate
}
func (t *UpdateControl_UpdateControl_Control) GetDescription() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Description
}
func (t *UpdateControl_UpdateControl_Control) GetDisplayID() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.DisplayID
}
func (t *UpdateControl_UpdateControl_Control) GetEditors() []*UpdateControl_UpdateControl_Control_Editors {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Editors
}
func (t *UpdateControl_UpdateControl_Control) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.ExampleEvidence
}
func (t *UpdateControl_UpdateControl_Control) GetID() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.ID
}
func (t *UpdateControl_UpdateControl_Control) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.ImplementationGuidance
}
func (t *UpdateControl_UpdateControl_Control) GetMappedCategories() []string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.MappedCategories
}
func (t *UpdateControl_UpdateControl_Control) GetOwnerID() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.OwnerID
}
func (t *UpdateControl_UpdateControl_Control) GetPrograms() *UpdateControl_UpdateControl_Control_Programs {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return &t.Programs
}
func (t *UpdateControl_UpdateControl_Control) GetRefCode() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.RefCode
}
func (t *UpdateControl_UpdateControl_Control) GetReferences() []*models.Reference {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.References
}
func (t *UpdateControl_UpdateControl_Control) GetSource() *enums.ControlSource {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Source
}
func (t *UpdateControl_UpdateControl_Control) GetStandard() *UpdateControl_UpdateControl_Control_Standard {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Standard
}
func (t *UpdateControl_UpdateControl_Control) GetStandardID() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.StandardID
}
func (t *UpdateControl_UpdateControl_Control) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Status
}
func (t *UpdateControl_UpdateControl_Control) GetSubcategory() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Subcategory
}
func (t *UpdateControl_UpdateControl_Control) GetTags() []string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Tags
}
func (t *UpdateControl_UpdateControl_Control) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.UpdatedAt
}
func (t *UpdateControl_UpdateControl_Control) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.UpdatedBy
}
func (t *UpdateControl_UpdateControl_Control) GetViewers() []*UpdateControl_UpdateControl_Control_Viewers {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Viewers
}

type UpdateControl_UpdateControl struct {
	Control UpdateControl_UpdateControl_Control "json:\"control\" graphql:\"control\""
}

func (t *UpdateControl_UpdateControl) GetControl() *UpdateControl_UpdateControl_Control {
	if t == nil {
		t = &UpdateControl_UpdateControl{}
	}
	return &t.Control
}

type CreateControlsByClone_CreateControlsByClone_Controls_Programs_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *CreateControlsByClone_CreateControlsByClone_Controls_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls_Programs_Edges_Node{}
	}
	return t.Name
}

type CreateControlsByClone_CreateControlsByClone_Controls_Programs_Edges struct {
	Node *CreateControlsByClone_CreateControlsByClone_Controls_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateControlsByClone_CreateControlsByClone_Controls_Programs_Edges) GetNode() *CreateControlsByClone_CreateControlsByClone_Controls_Programs_Edges_Node {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls_Programs_Edges{}
	}
	return t.Node
}

type CreateControlsByClone_CreateControlsByClone_Controls_Programs struct {
	Edges []*CreateControlsByClone_CreateControlsByClone_Controls_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateControlsByClone_CreateControlsByClone_Controls_Programs) GetEdges() []*CreateControlsByClone_CreateControlsByClone_Controls_Programs_Edges {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls_Programs{}
	}
	return t.Edges
}

type CreateControlsByClone_CreateControlsByClone_Controls struct {
	AssessmentMethods      []*models.AssessmentMethod                                    "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective                                 "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	Category               *string                                                       "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                                                       "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlQuestions       []string                                                      "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType                                            "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description            *string                                                       "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                                                        "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence                                     "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                                                        "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance                              "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                                                      "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                                                       "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Programs               CreateControlsByClone_CreateControlsByClone_Controls_Programs "json:\"programs\" graphql:\"programs\""
	RefCode                string                                                        "json:\"refCode\" graphql:\"refCode\""
	References             []*models.Reference                                           "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource                                          "json:\"source,omitempty\" graphql:\"source\""
	StandardID             *string                                                       "json:\"standardID,omitempty\" graphql:\"standardID\""
	Status                 *enums.ControlStatus                                          "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                                                       "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                                                      "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.AssessmentMethods
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.AssessmentObjectives
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetCategory() *string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.Category
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetCategoryID() *string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.CategoryID
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetControlQuestions() []string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.ControlQuestions
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetControlType() *enums.ControlType {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.ControlType
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.CreatedAt
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetCreatedBy() *string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.CreatedBy
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetDescription() *string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.Description
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetDisplayID() string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.DisplayID
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.ExampleEvidence
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetID() string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.ID
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.ImplementationGuidance
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetMappedCategories() []string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.MappedCategories
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetOwnerID() *string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.OwnerID
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetPrograms() *CreateControlsByClone_CreateControlsByClone_Controls_Programs {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return &t.Programs
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetRefCode() string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.RefCode
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetReferences() []*models.Reference {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.References
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetSource() *enums.ControlSource {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.Source
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetStandardID() *string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.StandardID
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.Status
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetSubcategory() *string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.Subcategory
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetTags() []string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.Tags
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.UpdatedAt
}
func (t *CreateControlsByClone_CreateControlsByClone_Controls) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone_Controls{}
	}
	return t.UpdatedBy
}

type CreateControlsByClone_CreateControlsByClone struct {
	Controls []*CreateControlsByClone_CreateControlsByClone_Controls "json:\"controls,omitempty\" graphql:\"controls\""
}

func (t *CreateControlsByClone_CreateControlsByClone) GetControls() []*CreateControlsByClone_CreateControlsByClone_Controls {
	if t == nil {
		t = &CreateControlsByClone_CreateControlsByClone{}
	}
	return t.Controls
}

type GetAllControlHistories_ControlHistories_Edges_Node struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	HistoryTime            time.Time                        "json:\"historyTime\" graphql:\"historyTime\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	Operation              history.OpType                   "json:\"operation\" graphql:\"operation\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                    *string                          "json:\"ref,omitempty\" graphql:\"ref\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	StandardID             *string                          "json:\"standardID,omitempty\" graphql:\"standardID\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.AssessmentMethods
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.AssessmentObjectives
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetCategoryID() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.CategoryID
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetControlQuestions() []string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ControlQuestions
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetControlType() *enums.ControlType {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ControlType
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ExampleEvidence
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ImplementationGuidance
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetMappedCategories() []string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.MappedCategories
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.RefCode
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetReferences() []*models.Reference {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.References
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetStandardID() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.StandardID
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllControlHistories_ControlHistories_Edges struct {
	Node *GetAllControlHistories_ControlHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControlHistories_ControlHistories_Edges) GetNode() *GetAllControlHistories_ControlHistories_Edges_Node {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges{}
	}
	return t.Node
}

type GetAllControlHistories_ControlHistories struct {
	Edges []*GetAllControlHistories_ControlHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllControlHistories_ControlHistories) GetEdges() []*GetAllControlHistories_ControlHistories_Edges {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories{}
	}
	return t.Edges
}

type GetControlHistories_ControlHistories_Edges_Node struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	HistoryTime            time.Time                        "json:\"historyTime\" graphql:\"historyTime\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	Operation              history.OpType                   "json:\"operation\" graphql:\"operation\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                    *string                          "json:\"ref,omitempty\" graphql:\"ref\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	StandardID             *string                          "json:\"standardID,omitempty\" graphql:\"standardID\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetControlHistories_ControlHistories_Edges_Node) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.AssessmentMethods
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.AssessmentObjectives
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Category
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetCategoryID() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.CategoryID
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetControlQuestions() []string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ControlQuestions
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetControlType() *enums.ControlType {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ControlType
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ExampleEvidence
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ImplementationGuidance
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetMappedCategories() []string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.MappedCategories
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.RefCode
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetReferences() []*models.Reference {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.References
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetStandardID() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.StandardID
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetControlHistories_ControlHistories_Edges struct {
	Node *GetControlHistories_ControlHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlHistories_ControlHistories_Edges) GetNode() *GetControlHistories_ControlHistories_Edges_Node {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges{}
	}
	return t.Node
}

type GetControlHistories_ControlHistories struct {
	Edges []*GetControlHistories_ControlHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControlHistories_ControlHistories) GetEdges() []*GetControlHistories_ControlHistories_Edges {
	if t == nil {
		t = &GetControlHistories_ControlHistories{}
	}
	return t.Edges
}

type CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls_Edges_Node{}
	}
	return t.RefCode
}

type CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls_Edges struct {
	Node *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls_Edges) GetNode() *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls_Edges_Node {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls_Edges{}
	}
	return t.Node
}

type CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls struct {
	Edges      []*CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                                                                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls) GetEdges() []*CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls_Edges {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls{}
	}
	return t.Edges
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls{}
	}
	return t.TotalCount
}

type CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Subcontrols_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Subcontrols_Edges struct {
	Node *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Subcontrols_Edges) GetNode() *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Subcontrols_Edges_Node {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Subcontrols_Edges{}
	}
	return t.Node
}

type CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Subcontrols struct {
	Edges      []*CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                                                                                       "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Subcontrols) GetEdges() []*CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Subcontrols_Edges {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Subcontrols{}
	}
	return t.Edges
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Subcontrols) GetTotalCount() int64 {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Subcontrols{}
	}
	return t.TotalCount
}

type CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations struct {
	Controls           CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt          *time.Time                                                                                         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string                                                                                            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details            *string                                                                                            "json:\"details,omitempty\" graphql:\"details\""
	ID                 string                                                                                             "json:\"id\" graphql:\"id\""
	ImplementationDate *time.Time                                                                                         "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	Status             *enums.DocumentStatus                                                                              "json:\"status,omitempty\" graphql:\"status\""
	Subcontrols        CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags               []string                                                                                           "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt          *time.Time                                                                                         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string                                                                                            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerificationDate   *time.Time                                                                                         "json:\"verificationDate,omitempty\" graphql:\"verificationDate\""
	Verified           *bool                                                                                              "json:\"verified,omitempty\" graphql:\"verified\""
}

func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetControls() *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Controls {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return &t.Controls
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.CreatedAt
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.CreatedBy
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetDetails() *string {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.Details
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetID() string {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.ID
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetImplementationDate() *time.Time {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.ImplementationDate
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.Status
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetSubcontrols() *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations_Subcontrols {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return &t.Subcontrols
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetTags() []string {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.Tags
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetVerificationDate() *time.Time {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.VerificationDate
}
func (t *CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations) GetVerified() *bool {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations{}
	}
	return t.Verified
}

type CreateBulkControlImplementation_CreateBulkControlImplementation struct {
	ControlImplementations []*CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations "json:\"controlImplementations,omitempty\" graphql:\"controlImplementations\""
}

func (t *CreateBulkControlImplementation_CreateBulkControlImplementation) GetControlImplementations() []*CreateBulkControlImplementation_CreateBulkControlImplementation_ControlImplementations {
	if t == nil {
		t = &CreateBulkControlImplementation_CreateBulkControlImplementation{}
	}
	return t.ControlImplementations
}

type CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls_Edges_Node{}
	}
	return t.RefCode
}

type CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls_Edges struct {
	Node *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls_Edges) GetNode() *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls_Edges_Node {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls_Edges{}
	}
	return t.Node
}

type CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls struct {
	Edges      []*CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                                                                                          "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls) GetEdges() []*CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls_Edges {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls{}
	}
	return t.Edges
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls{}
	}
	return t.TotalCount
}

type CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Subcontrols_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Subcontrols_Edges struct {
	Node *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Subcontrols_Edges) GetNode() *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Subcontrols_Edges_Node {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Subcontrols_Edges{}
	}
	return t.Node
}

type CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Subcontrols struct {
	Edges      []*CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                                                                                             "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Subcontrols) GetEdges() []*CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Subcontrols_Edges {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Subcontrols{}
	}
	return t.Edges
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Subcontrols) GetTotalCount() int64 {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Subcontrols{}
	}
	return t.TotalCount
}

type CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations struct {
	Controls           CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt          *time.Time                                                                                               "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string                                                                                                  "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details            *string                                                                                                  "json:\"details,omitempty\" graphql:\"details\""
	ID                 string                                                                                                   "json:\"id\" graphql:\"id\""
	ImplementationDate *time.Time                                                                                               "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	Status             *enums.DocumentStatus                                                                                    "json:\"status,omitempty\" graphql:\"status\""
	Subcontrols        CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags               []string                                                                                                 "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt          *time.Time                                                                                               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string                                                                                                  "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerificationDate   *time.Time                                                                                               "json:\"verificationDate,omitempty\" graphql:\"verificationDate\""
	Verified           *bool                                                                                                    "json:\"verified,omitempty\" graphql:\"verified\""
}

func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetControls() *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Controls {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return &t.Controls
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetDetails() *string {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.Details
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetID() string {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.ID
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetImplementationDate() *time.Time {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.ImplementationDate
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.Status
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetSubcontrols() *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations_Subcontrols {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return &t.Subcontrols
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.Tags
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetVerificationDate() *time.Time {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.VerificationDate
}
func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations) GetVerified() *bool {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations{}
	}
	return t.Verified
}

type CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation struct {
	ControlImplementations []*CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations "json:\"controlImplementations,omitempty\" graphql:\"controlImplementations\""
}

func (t *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation) GetControlImplementations() []*CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation_ControlImplementations {
	if t == nil {
		t = &CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation{}
	}
	return t.ControlImplementations
}

type CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls_Edges_Node{}
	}
	return t.RefCode
}

type CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls_Edges struct {
	Node *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls_Edges) GetNode() *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls_Edges_Node {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls_Edges{}
	}
	return t.Node
}

type CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls struct {
	Edges      []*CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                                                                           "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls) GetEdges() []*CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls_Edges {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls{}
	}
	return t.Edges
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls{}
	}
	return t.TotalCount
}

type CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols_Edges struct {
	Node *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols_Edges) GetNode() *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols_Edges_Node {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols_Edges{}
	}
	return t.Node
}

type CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols struct {
	Edges      []*CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                                                                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols) GetEdges() []*CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols_Edges {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols{}
	}
	return t.Edges
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols) GetTotalCount() int64 {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols{}
	}
	return t.TotalCount
}

type CreateControlImplementation_CreateControlImplementation_ControlImplementation struct {
	Controls           CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt          *time.Time                                                                                "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string                                                                                   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details            *string                                                                                   "json:\"details,omitempty\" graphql:\"details\""
	ID                 string                                                                                    "json:\"id\" graphql:\"id\""
	ImplementationDate *time.Time                                                                                "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	Status             *enums.DocumentStatus                                                                     "json:\"status,omitempty\" graphql:\"status\""
	Subcontrols        CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags               []string                                                                                  "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt          *time.Time                                                                                "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string                                                                                   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerificationDate   *time.Time                                                                                "json:\"verificationDate,omitempty\" graphql:\"verificationDate\""
	Verified           *bool                                                                                     "json:\"verified,omitempty\" graphql:\"verified\""
}

func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetControls() *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Controls {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return &t.Controls
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.CreatedAt
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetCreatedBy() *string {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.CreatedBy
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetDetails() *string {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.Details
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetID() string {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.ID
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetImplementationDate() *time.Time {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.ImplementationDate
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.Status
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetSubcontrols() *CreateControlImplementation_CreateControlImplementation_ControlImplementation_Subcontrols {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return &t.Subcontrols
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetTags() []string {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.Tags
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.UpdatedAt
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.UpdatedBy
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetVerificationDate() *time.Time {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.VerificationDate
}
func (t *CreateControlImplementation_CreateControlImplementation_ControlImplementation) GetVerified() *bool {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation_ControlImplementation{}
	}
	return t.Verified
}

type CreateControlImplementation_CreateControlImplementation struct {
	ControlImplementation CreateControlImplementation_CreateControlImplementation_ControlImplementation "json:\"controlImplementation\" graphql:\"controlImplementation\""
}

func (t *CreateControlImplementation_CreateControlImplementation) GetControlImplementation() *CreateControlImplementation_CreateControlImplementation_ControlImplementation {
	if t == nil {
		t = &CreateControlImplementation_CreateControlImplementation{}
	}
	return &t.ControlImplementation
}

type DeleteControlImplementation_DeleteControlImplementation struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteControlImplementation_DeleteControlImplementation) GetDeletedID() string {
	if t == nil {
		t = &DeleteControlImplementation_DeleteControlImplementation{}
	}
	return t.DeletedID
}

type GetAllControlImplementations_ControlImplementations_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllControlImplementations_ControlImplementations_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllControlImplementations_ControlImplementations_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllControlImplementations_ControlImplementations_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllControlImplementations_ControlImplementations_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_PageInfo{}
	}
	return t.StartCursor
}

type GetAllControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetAllControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetAllControlImplementations_ControlImplementations_Edges_Node_Controls_Edges struct {
	Node *GetAllControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControlImplementations_ControlImplementations_Edges_Node_Controls_Edges) GetNode() *GetAllControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node_Controls_Edges{}
	}
	return t.Node
}

type GetAllControlImplementations_ControlImplementations_Edges_Node_Controls struct {
	Edges      []*GetAllControlImplementations_ControlImplementations_Edges_Node_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                                                            "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllControlImplementations_ControlImplementations_Edges_Node_Controls) GetEdges() []*GetAllControlImplementations_ControlImplementations_Edges_Node_Controls_Edges {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node_Controls{}
	}
	return t.Edges
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node_Controls{}
	}
	return t.TotalCount
}

type GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges struct {
	Node *GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges) GetNode() *GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges{}
	}
	return t.Node
}

type GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols struct {
	Edges      []*GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                                                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols) GetEdges() []*GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols{}
	}
	return t.Edges
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols{}
	}
	return t.TotalCount
}

type GetAllControlImplementations_ControlImplementations_Edges_Node struct {
	Controls           GetAllControlImplementations_ControlImplementations_Edges_Node_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt          *time.Time                                                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string                                                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details            *string                                                                    "json:\"details,omitempty\" graphql:\"details\""
	ID                 string                                                                     "json:\"id\" graphql:\"id\""
	ImplementationDate *time.Time                                                                 "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	Status             *enums.DocumentStatus                                                      "json:\"status,omitempty\" graphql:\"status\""
	Subcontrols        GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags               []string                                                                   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt          *time.Time                                                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string                                                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerificationDate   *time.Time                                                                 "json:\"verificationDate,omitempty\" graphql:\"verificationDate\""
	Verified           *bool                                                                      "json:\"verified,omitempty\" graphql:\"verified\""
}

func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetControls() *GetAllControlImplementations_ControlImplementations_Edges_Node_Controls {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return &t.Controls
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetImplementationDate() *time.Time {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.ImplementationDate
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetSubcontrols() *GetAllControlImplementations_ControlImplementations_Edges_Node_Subcontrols {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return &t.Subcontrols
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetVerificationDate() *time.Time {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.VerificationDate
}
func (t *GetAllControlImplementations_ControlImplementations_Edges_Node) GetVerified() *bool {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.Verified
}

type GetAllControlImplementations_ControlImplementations_Edges struct {
	Node *GetAllControlImplementations_ControlImplementations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControlImplementations_ControlImplementations_Edges) GetNode() *GetAllControlImplementations_ControlImplementations_Edges_Node {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations_Edges{}
	}
	return t.Node
}

type GetAllControlImplementations_ControlImplementations struct {
	Edges      []*GetAllControlImplementations_ControlImplementations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllControlImplementations_ControlImplementations_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                        "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllControlImplementations_ControlImplementations) GetEdges() []*GetAllControlImplementations_ControlImplementations_Edges {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations{}
	}
	return t.Edges
}
func (t *GetAllControlImplementations_ControlImplementations) GetPageInfo() *GetAllControlImplementations_ControlImplementations_PageInfo {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations{}
	}
	return &t.PageInfo
}
func (t *GetAllControlImplementations_ControlImplementations) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllControlImplementations_ControlImplementations{}
	}
	return t.TotalCount
}

type GetControlImplementationByID_ControlImplementation_Controls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetControlImplementationByID_ControlImplementation_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlImplementationByID_ControlImplementation_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetControlImplementationByID_ControlImplementation_Controls_Edges struct {
	Node *GetControlImplementationByID_ControlImplementation_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlImplementationByID_ControlImplementation_Controls_Edges) GetNode() *GetControlImplementationByID_ControlImplementation_Controls_Edges_Node {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation_Controls_Edges{}
	}
	return t.Node
}

type GetControlImplementationByID_ControlImplementation_Controls struct {
	Edges      []*GetControlImplementationByID_ControlImplementation_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                                                "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetControlImplementationByID_ControlImplementation_Controls) GetEdges() []*GetControlImplementationByID_ControlImplementation_Controls_Edges {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation_Controls{}
	}
	return t.Edges
}
func (t *GetControlImplementationByID_ControlImplementation_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation_Controls{}
	}
	return t.TotalCount
}

type GetControlImplementationByID_ControlImplementation_Subcontrols_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetControlImplementationByID_ControlImplementation_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlImplementationByID_ControlImplementation_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type GetControlImplementationByID_ControlImplementation_Subcontrols_Edges struct {
	Node *GetControlImplementationByID_ControlImplementation_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlImplementationByID_ControlImplementation_Subcontrols_Edges) GetNode() *GetControlImplementationByID_ControlImplementation_Subcontrols_Edges_Node {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation_Subcontrols_Edges{}
	}
	return t.Node
}

type GetControlImplementationByID_ControlImplementation_Subcontrols struct {
	Edges      []*GetControlImplementationByID_ControlImplementation_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetControlImplementationByID_ControlImplementation_Subcontrols) GetEdges() []*GetControlImplementationByID_ControlImplementation_Subcontrols_Edges {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation_Subcontrols{}
	}
	return t.Edges
}
func (t *GetControlImplementationByID_ControlImplementation_Subcontrols) GetTotalCount() int64 {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation_Subcontrols{}
	}
	return t.TotalCount
}

type GetControlImplementationByID_ControlImplementation struct {
	Controls           GetControlImplementationByID_ControlImplementation_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt          *time.Time                                                     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string                                                        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details            *string                                                        "json:\"details,omitempty\" graphql:\"details\""
	ID                 string                                                         "json:\"id\" graphql:\"id\""
	ImplementationDate *time.Time                                                     "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	Status             *enums.DocumentStatus                                          "json:\"status,omitempty\" graphql:\"status\""
	Subcontrols        GetControlImplementationByID_ControlImplementation_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags               []string                                                       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt          *time.Time                                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string                                                        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerificationDate   *time.Time                                                     "json:\"verificationDate,omitempty\" graphql:\"verificationDate\""
	Verified           *bool                                                          "json:\"verified,omitempty\" graphql:\"verified\""
}

func (t *GetControlImplementationByID_ControlImplementation) GetControls() *GetControlImplementationByID_ControlImplementation_Controls {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return &t.Controls
}
func (t *GetControlImplementationByID_ControlImplementation) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.CreatedAt
}
func (t *GetControlImplementationByID_ControlImplementation) GetCreatedBy() *string {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.CreatedBy
}
func (t *GetControlImplementationByID_ControlImplementation) GetDetails() *string {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.Details
}
func (t *GetControlImplementationByID_ControlImplementation) GetID() string {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.ID
}
func (t *GetControlImplementationByID_ControlImplementation) GetImplementationDate() *time.Time {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.ImplementationDate
}
func (t *GetControlImplementationByID_ControlImplementation) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.Status
}
func (t *GetControlImplementationByID_ControlImplementation) GetSubcontrols() *GetControlImplementationByID_ControlImplementation_Subcontrols {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return &t.Subcontrols
}
func (t *GetControlImplementationByID_ControlImplementation) GetTags() []string {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.Tags
}
func (t *GetControlImplementationByID_ControlImplementation) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.UpdatedAt
}
func (t *GetControlImplementationByID_ControlImplementation) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.UpdatedBy
}
func (t *GetControlImplementationByID_ControlImplementation) GetVerificationDate() *time.Time {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.VerificationDate
}
func (t *GetControlImplementationByID_ControlImplementation) GetVerified() *bool {
	if t == nil {
		t = &GetControlImplementationByID_ControlImplementation{}
	}
	return t.Verified
}

type GetControlImplementations_ControlImplementations_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetControlImplementations_ControlImplementations_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetControlImplementations_ControlImplementations_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetControlImplementations_ControlImplementations_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetControlImplementations_ControlImplementations_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_PageInfo{}
	}
	return t.StartCursor
}

type GetControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetControlImplementations_ControlImplementations_Edges_Node_Controls_Edges struct {
	Node *GetControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlImplementations_ControlImplementations_Edges_Node_Controls_Edges) GetNode() *GetControlImplementations_ControlImplementations_Edges_Node_Controls_Edges_Node {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node_Controls_Edges{}
	}
	return t.Node
}

type GetControlImplementations_ControlImplementations_Edges_Node_Controls struct {
	Edges      []*GetControlImplementations_ControlImplementations_Edges_Node_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetControlImplementations_ControlImplementations_Edges_Node_Controls) GetEdges() []*GetControlImplementations_ControlImplementations_Edges_Node_Controls_Edges {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node_Controls{}
	}
	return t.Edges
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node_Controls{}
	}
	return t.TotalCount
}

type GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges struct {
	Node *GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges) GetNode() *GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges_Node {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges{}
	}
	return t.Node
}

type GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols struct {
	Edges      []*GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                                                            "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols) GetEdges() []*GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols_Edges {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols{}
	}
	return t.Edges
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols) GetTotalCount() int64 {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols{}
	}
	return t.TotalCount
}

type GetControlImplementations_ControlImplementations_Edges_Node struct {
	Controls           GetControlImplementations_ControlImplementations_Edges_Node_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt          *time.Time                                                              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string                                                                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details            *string                                                                 "json:\"details,omitempty\" graphql:\"details\""
	ID                 string                                                                  "json:\"id\" graphql:\"id\""
	ImplementationDate *time.Time                                                              "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	Status             *enums.DocumentStatus                                                   "json:\"status,omitempty\" graphql:\"status\""
	Subcontrols        GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags               []string                                                                "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt          *time.Time                                                              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string                                                                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerificationDate   *time.Time                                                              "json:\"verificationDate,omitempty\" graphql:\"verificationDate\""
	Verified           *bool                                                                   "json:\"verified,omitempty\" graphql:\"verified\""
}

func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetControls() *GetControlImplementations_ControlImplementations_Edges_Node_Controls {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return &t.Controls
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.Details
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetImplementationDate() *time.Time {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.ImplementationDate
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.Status
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetSubcontrols() *GetControlImplementations_ControlImplementations_Edges_Node_Subcontrols {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return &t.Subcontrols
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.Tags
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetVerificationDate() *time.Time {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.VerificationDate
}
func (t *GetControlImplementations_ControlImplementations_Edges_Node) GetVerified() *bool {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges_Node{}
	}
	return t.Verified
}

type GetControlImplementations_ControlImplementations_Edges struct {
	Node *GetControlImplementations_ControlImplementations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlImplementations_ControlImplementations_Edges) GetNode() *GetControlImplementations_ControlImplementations_Edges_Node {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations_Edges{}
	}
	return t.Node
}

type GetControlImplementations_ControlImplementations struct {
	Edges      []*GetControlImplementations_ControlImplementations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetControlImplementations_ControlImplementations_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetControlImplementations_ControlImplementations) GetEdges() []*GetControlImplementations_ControlImplementations_Edges {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations{}
	}
	return t.Edges
}
func (t *GetControlImplementations_ControlImplementations) GetPageInfo() *GetControlImplementations_ControlImplementations_PageInfo {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations{}
	}
	return &t.PageInfo
}
func (t *GetControlImplementations_ControlImplementations) GetTotalCount() int64 {
	if t == nil {
		t = &GetControlImplementations_ControlImplementations{}
	}
	return t.TotalCount
}

type UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls_Edges_Node{}
	}
	return t.RefCode
}

type UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls_Edges struct {
	Node *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls_Edges) GetNode() *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls_Edges_Node {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls_Edges{}
	}
	return t.Node
}

type UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls struct {
	Edges      []*UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                                                                           "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls) GetEdges() []*UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls_Edges {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls{}
	}
	return t.Edges
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls{}
	}
	return t.TotalCount
}

type UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols_Edges struct {
	Node *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols_Edges) GetNode() *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols_Edges_Node {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols_Edges{}
	}
	return t.Node
}

type UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols struct {
	Edges      []*UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                                                                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols) GetEdges() []*UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols_Edges {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols{}
	}
	return t.Edges
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols) GetTotalCount() int64 {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols{}
	}
	return t.TotalCount
}

type UpdateControlImplementation_UpdateControlImplementation_ControlImplementation struct {
	Controls           UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt          *time.Time                                                                                "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string                                                                                   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details            *string                                                                                   "json:\"details,omitempty\" graphql:\"details\""
	ID                 string                                                                                    "json:\"id\" graphql:\"id\""
	ImplementationDate *time.Time                                                                                "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	Status             *enums.DocumentStatus                                                                     "json:\"status,omitempty\" graphql:\"status\""
	Subcontrols        UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags               []string                                                                                  "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt          *time.Time                                                                                "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string                                                                                   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerificationDate   *time.Time                                                                                "json:\"verificationDate,omitempty\" graphql:\"verificationDate\""
	Verified           *bool                                                                                     "json:\"verified,omitempty\" graphql:\"verified\""
}

func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetControls() *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Controls {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return &t.Controls
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.CreatedAt
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.CreatedBy
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetDetails() *string {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.Details
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetID() string {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.ID
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetImplementationDate() *time.Time {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.ImplementationDate
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.Status
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetSubcontrols() *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation_Subcontrols {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return &t.Subcontrols
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetTags() []string {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.Tags
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.UpdatedAt
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.UpdatedBy
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetVerificationDate() *time.Time {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.VerificationDate
}
func (t *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation) GetVerified() *bool {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation_ControlImplementation{}
	}
	return t.Verified
}

type UpdateControlImplementation_UpdateControlImplementation struct {
	ControlImplementation UpdateControlImplementation_UpdateControlImplementation_ControlImplementation "json:\"controlImplementation\" graphql:\"controlImplementation\""
}

func (t *UpdateControlImplementation_UpdateControlImplementation) GetControlImplementation() *UpdateControlImplementation_UpdateControlImplementation_ControlImplementation {
	if t == nil {
		t = &UpdateControlImplementation_UpdateControlImplementation{}
	}
	return &t.ControlImplementation
}

type GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node struct {
	CreatedAt          *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details            *string               "json:\"details,omitempty\" graphql:\"details\""
	HistoryTime        time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID                 string                "json:\"id\" graphql:\"id\""
	ImplementationDate *time.Time            "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	Operation          history.OpType        "json:\"operation\" graphql:\"operation\""
	Ref                *string               "json:\"ref,omitempty\" graphql:\"ref\""
	Status             *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags               []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt          *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerificationDate   *time.Time            "json:\"verificationDate,omitempty\" graphql:\"verificationDate\""
	Verified           *bool                 "json:\"verified,omitempty\" graphql:\"verified\""
}

func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetImplementationDate() *time.Time {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.ImplementationDate
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetVerificationDate() *time.Time {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.VerificationDate
}
func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetVerified() *bool {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.Verified
}

type GetAllControlImplementationHistories_ControlImplementationHistories_Edges struct {
	Node *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControlImplementationHistories_ControlImplementationHistories_Edges) GetNode() *GetAllControlImplementationHistories_ControlImplementationHistories_Edges_Node {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories_Edges{}
	}
	return t.Node
}

type GetAllControlImplementationHistories_ControlImplementationHistories struct {
	Edges []*GetAllControlImplementationHistories_ControlImplementationHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllControlImplementationHistories_ControlImplementationHistories) GetEdges() []*GetAllControlImplementationHistories_ControlImplementationHistories_Edges {
	if t == nil {
		t = &GetAllControlImplementationHistories_ControlImplementationHistories{}
	}
	return t.Edges
}

type GetControlImplementationHistories_ControlImplementationHistories_Edges_Node struct {
	CreatedAt          *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy          *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details            *string               "json:\"details,omitempty\" graphql:\"details\""
	HistoryTime        time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID                 string                "json:\"id\" graphql:\"id\""
	ImplementationDate *time.Time            "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	Operation          history.OpType        "json:\"operation\" graphql:\"operation\""
	Ref                *string               "json:\"ref,omitempty\" graphql:\"ref\""
	Status             *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags               []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt          *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy          *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerificationDate   *time.Time            "json:\"verificationDate,omitempty\" graphql:\"verificationDate\""
	Verified           *bool                 "json:\"verified,omitempty\" graphql:\"verified\""
}

func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetImplementationDate() *time.Time {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.ImplementationDate
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetVerificationDate() *time.Time {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.VerificationDate
}
func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node) GetVerified() *bool {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges_Node{}
	}
	return t.Verified
}

type GetControlImplementationHistories_ControlImplementationHistories_Edges struct {
	Node *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlImplementationHistories_ControlImplementationHistories_Edges) GetNode() *GetControlImplementationHistories_ControlImplementationHistories_Edges_Node {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories_Edges{}
	}
	return t.Node
}

type GetControlImplementationHistories_ControlImplementationHistories struct {
	Edges []*GetControlImplementationHistories_ControlImplementationHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControlImplementationHistories_ControlImplementationHistories) GetEdges() []*GetControlImplementationHistories_ControlImplementationHistories_Edges {
	if t == nil {
		t = &GetControlImplementationHistories_ControlImplementationHistories{}
	}
	return t.Edges
}

type CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives struct {
	Category             *string              "json:\"category,omitempty\" graphql:\"category\""
	ControlObjectiveType *string              "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	CreatedAt            *time.Time           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DesiredOutcome       *string              "json:\"desiredOutcome,omitempty\" graphql:\"desiredOutcome\""
	DisplayID            string               "json:\"displayID\" graphql:\"displayID\""
	ID                   string               "json:\"id\" graphql:\"id\""
	Name                 string               "json:\"name\" graphql:\"name\""
	OwnerID              *string              "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Revision             *string              "json:\"revision,omitempty\" graphql:\"revision\""
	Source               *enums.ControlSource "json:\"source,omitempty\" graphql:\"source\""
	Status               *string              "json:\"status,omitempty\" graphql:\"status\""
	Subcategory          *string              "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                 []string             "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetCategory() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Category
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetControlObjectiveType() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.ControlObjectiveType
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetDesiredOutcome() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.DesiredOutcome
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.DisplayID
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetID() string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.ID
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetName() string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Name
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetRevision() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Revision
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetSource() *enums.ControlSource {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Source
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetStatus() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Status
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetSubcategory() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Subcategory
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Tags
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVControlObjective_CreateBulkCSVControlObjective struct {
	ControlObjectives []*CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives "json:\"controlObjectives,omitempty\" graphql:\"controlObjectives\""
}

func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective) GetControlObjectives() []*CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective{}
	}
	return t.ControlObjectives
}

type CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives struct {
	Category             *string              "json:\"category,omitempty\" graphql:\"category\""
	ControlObjectiveType *string              "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	CreatedAt            *time.Time           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DesiredOutcome       *string              "json:\"desiredOutcome,omitempty\" graphql:\"desiredOutcome\""
	DisplayID            string               "json:\"displayID\" graphql:\"displayID\""
	ID                   string               "json:\"id\" graphql:\"id\""
	Name                 string               "json:\"name\" graphql:\"name\""
	OwnerID              *string              "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Revision             *string              "json:\"revision,omitempty\" graphql:\"revision\""
	Source               *enums.ControlSource "json:\"source,omitempty\" graphql:\"source\""
	Status               *string              "json:\"status,omitempty\" graphql:\"status\""
	Subcategory          *string              "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                 []string             "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetCategory() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Category
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetControlObjectiveType() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.ControlObjectiveType
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.CreatedAt
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.CreatedBy
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetDesiredOutcome() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.DesiredOutcome
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.DisplayID
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetID() string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.ID
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetName() string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Name
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.OwnerID
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetRevision() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Revision
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetSource() *enums.ControlSource {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Source
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetStatus() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Status
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetSubcategory() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Subcategory
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetTags() []string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Tags
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.UpdatedBy
}

type CreateBulkControlObjective_CreateBulkControlObjective struct {
	ControlObjectives []*CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives "json:\"controlObjectives,omitempty\" graphql:\"controlObjectives\""
}

func (t *CreateBulkControlObjective_CreateBulkControlObjective) GetControlObjectives() []*CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective{}
	}
	return t.ControlObjectives
}

type CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	DisplayID   string  "json:\"displayID\" graphql:\"displayID\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges_Node{}
	}
	return t.DisplayID
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges_Node{}
	}
	return t.RefCode
}

type CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges struct {
	Node *CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges) GetNode() *CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges_Node {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges{}
	}
	return t.Node
}

type CreateControlObjective_CreateControlObjective_ControlObjective_Controls struct {
	Edges []*CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateControlObjective_CreateControlObjective_ControlObjective_Controls) GetEdges() []*CreateControlObjective_CreateControlObjective_ControlObjective_Controls_Edges {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_Controls{}
	}
	return t.Edges
}

type CreateControlObjective_CreateControlObjective_ControlObjective_Programs_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *CreateControlObjective_CreateControlObjective_ControlObjective_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_Programs_Edges_Node{}
	}
	return t.Name
}

type CreateControlObjective_CreateControlObjective_ControlObjective_Programs_Edges struct {
	Node *CreateControlObjective_CreateControlObjective_ControlObjective_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateControlObjective_CreateControlObjective_ControlObjective_Programs_Edges) GetNode() *CreateControlObjective_CreateControlObjective_ControlObjective_Programs_Edges_Node {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_Programs_Edges{}
	}
	return t.Node
}

type CreateControlObjective_CreateControlObjective_ControlObjective_Programs struct {
	Edges []*CreateControlObjective_CreateControlObjective_ControlObjective_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateControlObjective_CreateControlObjective_ControlObjective_Programs) GetEdges() []*CreateControlObjective_CreateControlObjective_ControlObjective_Programs_Edges {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_Programs{}
	}
	return t.Edges
}

type CreateControlObjective_CreateControlObjective_ControlObjective_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateControlObjective_CreateControlObjective_ControlObjective_Editors) GetID() string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_Editors{}
	}
	return t.ID
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective_Editors) GetName() string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_Editors{}
	}
	return t.Name
}

type CreateControlObjective_CreateControlObjective_ControlObjective_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateControlObjective_CreateControlObjective_ControlObjective_Viewers) GetID() string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_Viewers{}
	}
	return t.ID
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective_Viewers) GetName() string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_Viewers{}
	}
	return t.Name
}

type CreateControlObjective_CreateControlObjective_ControlObjective_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateControlObjective_CreateControlObjective_ControlObjective_BlockedGroups) GetID() string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_BlockedGroups{}
	}
	return t.ID
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective_BlockedGroups) GetName() string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective_BlockedGroups{}
	}
	return t.Name
}

type CreateControlObjective_CreateControlObjective_ControlObjective struct {
	BlockedGroups        []*CreateControlObjective_CreateControlObjective_ControlObjective_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	Category             *string                                                                         "json:\"category,omitempty\" graphql:\"category\""
	ControlObjectiveType *string                                                                         "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	Controls             CreateControlObjective_CreateControlObjective_ControlObjective_Controls         "json:\"controls\" graphql:\"controls\""
	CreatedAt            *time.Time                                                                      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                                                         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DesiredOutcome       *string                                                                         "json:\"desiredOutcome,omitempty\" graphql:\"desiredOutcome\""
	DisplayID            string                                                                          "json:\"displayID\" graphql:\"displayID\""
	Editors              []*CreateControlObjective_CreateControlObjective_ControlObjective_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID                   string                                                                          "json:\"id\" graphql:\"id\""
	Name                 string                                                                          "json:\"name\" graphql:\"name\""
	OwnerID              *string                                                                         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Programs             CreateControlObjective_CreateControlObjective_ControlObjective_Programs         "json:\"programs\" graphql:\"programs\""
	Revision             *string                                                                         "json:\"revision,omitempty\" graphql:\"revision\""
	Source               *enums.ControlSource                                                            "json:\"source,omitempty\" graphql:\"source\""
	Status               *string                                                                         "json:\"status,omitempty\" graphql:\"status\""
	Subcategory          *string                                                                         "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                 []string                                                                        "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                                                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                                                         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers              []*CreateControlObjective_CreateControlObjective_ControlObjective_Viewers       "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetBlockedGroups() []*CreateControlObjective_CreateControlObjective_ControlObjective_BlockedGroups {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.BlockedGroups
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetCategory() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Category
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetControlObjectiveType() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.ControlObjectiveType
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetControls() *CreateControlObjective_CreateControlObjective_ControlObjective_Controls {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return &t.Controls
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.CreatedAt
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetCreatedBy() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.CreatedBy
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetDesiredOutcome() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.DesiredOutcome
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetDisplayID() string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.DisplayID
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetEditors() []*CreateControlObjective_CreateControlObjective_ControlObjective_Editors {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Editors
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetID() string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.ID
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetName() string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Name
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetOwnerID() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.OwnerID
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetPrograms() *CreateControlObjective_CreateControlObjective_ControlObjective_Programs {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return &t.Programs
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetRevision() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Revision
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetSource() *enums.ControlSource {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Source
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetStatus() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Status
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetSubcategory() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Subcategory
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetTags() []string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Tags
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.UpdatedAt
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.UpdatedBy
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetViewers() []*CreateControlObjective_CreateControlObjective_ControlObjective_Viewers {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Viewers
}

type CreateControlObjective_CreateControlObjective struct {
	ControlObjective CreateControlObjective_CreateControlObjective_ControlObjective "json:\"controlObjective\" graphql:\"controlObjective\""
}

func (t *CreateControlObjective_CreateControlObjective) GetControlObjective() *CreateControlObjective_CreateControlObjective_ControlObjective {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective{}
	}
	return &t.ControlObjective
}

type DeleteControlObjective_DeleteControlObjective struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteControlObjective_DeleteControlObjective) GetDeletedID() string {
	if t == nil {
		t = &DeleteControlObjective_DeleteControlObjective{}
	}
	return t.DeletedID
}

type GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	DisplayID   string  "json:\"displayID\" graphql:\"displayID\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges struct {
	Node *GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges) GetNode() *GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges{}
	}
	return t.Node
}

type GetAllControlObjectives_ControlObjectives_Edges_Node_Controls struct {
	Edges []*GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_Controls) GetEdges() []*GetAllControlObjectives_ControlObjectives_Edges_Node_Controls_Edges {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_Controls{}
	}
	return t.Edges
}

type GetAllControlObjectives_ControlObjectives_Edges_Node_Programs_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_Programs_Edges_Node{}
	}
	return t.Name
}

type GetAllControlObjectives_ControlObjectives_Edges_Node_Programs_Edges struct {
	Node *GetAllControlObjectives_ControlObjectives_Edges_Node_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_Programs_Edges) GetNode() *GetAllControlObjectives_ControlObjectives_Edges_Node_Programs_Edges_Node {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_Programs_Edges{}
	}
	return t.Node
}

type GetAllControlObjectives_ControlObjectives_Edges_Node_Programs struct {
	Edges []*GetAllControlObjectives_ControlObjectives_Edges_Node_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_Programs) GetEdges() []*GetAllControlObjectives_ControlObjectives_Edges_Node_Programs_Edges {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_Programs{}
	}
	return t.Edges
}

type GetAllControlObjectives_ControlObjectives_Edges_Node_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_Editors) GetID() string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_Editors{}
	}
	return t.ID
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_Editors) GetName() string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_Editors{}
	}
	return t.Name
}

type GetAllControlObjectives_ControlObjectives_Edges_Node_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_Viewers) GetID() string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_Viewers{}
	}
	return t.ID
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_Viewers) GetName() string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_Viewers{}
	}
	return t.Name
}

type GetAllControlObjectives_ControlObjectives_Edges_Node_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_BlockedGroups) GetID() string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_BlockedGroups{}
	}
	return t.ID
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node_BlockedGroups) GetName() string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node_BlockedGroups{}
	}
	return t.Name
}

type GetAllControlObjectives_ControlObjectives_Edges_Node struct {
	BlockedGroups        []*GetAllControlObjectives_ControlObjectives_Edges_Node_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	Category             *string                                                               "json:\"category,omitempty\" graphql:\"category\""
	ControlObjectiveType *string                                                               "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	Controls             GetAllControlObjectives_ControlObjectives_Edges_Node_Controls         "json:\"controls\" graphql:\"controls\""
	CreatedAt            *time.Time                                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                                               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DesiredOutcome       *string                                                               "json:\"desiredOutcome,omitempty\" graphql:\"desiredOutcome\""
	DisplayID            string                                                                "json:\"displayID\" graphql:\"displayID\""
	Editors              []*GetAllControlObjectives_ControlObjectives_Edges_Node_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID                   string                                                                "json:\"id\" graphql:\"id\""
	Name                 string                                                                "json:\"name\" graphql:\"name\""
	OwnerID              *string                                                               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Programs             GetAllControlObjectives_ControlObjectives_Edges_Node_Programs         "json:\"programs\" graphql:\"programs\""
	Revision             *string                                                               "json:\"revision,omitempty\" graphql:\"revision\""
	Source               *enums.ControlSource                                                  "json:\"source,omitempty\" graphql:\"source\""
	Status               *string                                                               "json:\"status,omitempty\" graphql:\"status\""
	Subcategory          *string                                                               "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                 []string                                                              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                                               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers              []*GetAllControlObjectives_ControlObjectives_Edges_Node_Viewers       "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetBlockedGroups() []*GetAllControlObjectives_ControlObjectives_Edges_Node_BlockedGroups {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.BlockedGroups
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetControlObjectiveType() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.ControlObjectiveType
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetControls() *GetAllControlObjectives_ControlObjectives_Edges_Node_Controls {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return &t.Controls
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetDesiredOutcome() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.DesiredOutcome
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetEditors() []*GetAllControlObjectives_ControlObjectives_Edges_Node_Editors {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Editors
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetPrograms() *GetAllControlObjectives_ControlObjectives_Edges_Node_Programs {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return &t.Programs
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Revision
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetViewers() []*GetAllControlObjectives_ControlObjectives_Edges_Node_Viewers {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Viewers
}

type GetAllControlObjectives_ControlObjectives_Edges struct {
	Node *GetAllControlObjectives_ControlObjectives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControlObjectives_ControlObjectives_Edges) GetNode() *GetAllControlObjectives_ControlObjectives_Edges_Node {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges{}
	}
	return t.Node
}

type GetAllControlObjectives_ControlObjectives struct {
	Edges []*GetAllControlObjectives_ControlObjectives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllControlObjectives_ControlObjectives) GetEdges() []*GetAllControlObjectives_ControlObjectives_Edges {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives{}
	}
	return t.Edges
}

type GetControlObjectiveByID_ControlObjective_Controls_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	DisplayID   string  "json:\"displayID\" graphql:\"displayID\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetControlObjectiveByID_ControlObjective_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *GetControlObjectiveByID_ControlObjective_Controls_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_Controls_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetControlObjectiveByID_ControlObjective_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlObjectiveByID_ControlObjective_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetControlObjectiveByID_ControlObjective_Controls_Edges struct {
	Node *GetControlObjectiveByID_ControlObjective_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlObjectiveByID_ControlObjective_Controls_Edges) GetNode() *GetControlObjectiveByID_ControlObjective_Controls_Edges_Node {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_Controls_Edges{}
	}
	return t.Node
}

type GetControlObjectiveByID_ControlObjective_Controls struct {
	Edges []*GetControlObjectiveByID_ControlObjective_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControlObjectiveByID_ControlObjective_Controls) GetEdges() []*GetControlObjectiveByID_ControlObjective_Controls_Edges {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_Controls{}
	}
	return t.Edges
}

type GetControlObjectiveByID_ControlObjective_Programs_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *GetControlObjectiveByID_ControlObjective_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetControlObjectiveByID_ControlObjective_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlObjectiveByID_ControlObjective_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_Programs_Edges_Node{}
	}
	return t.Name
}

type GetControlObjectiveByID_ControlObjective_Programs_Edges struct {
	Node *GetControlObjectiveByID_ControlObjective_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlObjectiveByID_ControlObjective_Programs_Edges) GetNode() *GetControlObjectiveByID_ControlObjective_Programs_Edges_Node {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_Programs_Edges{}
	}
	return t.Node
}

type GetControlObjectiveByID_ControlObjective_Programs struct {
	Edges []*GetControlObjectiveByID_ControlObjective_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControlObjectiveByID_ControlObjective_Programs) GetEdges() []*GetControlObjectiveByID_ControlObjective_Programs_Edges {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_Programs{}
	}
	return t.Edges
}

type GetControlObjectiveByID_ControlObjective_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetControlObjectiveByID_ControlObjective_Editors) GetID() string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_Editors{}
	}
	return t.ID
}
func (t *GetControlObjectiveByID_ControlObjective_Editors) GetName() string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_Editors{}
	}
	return t.Name
}

type GetControlObjectiveByID_ControlObjective_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetControlObjectiveByID_ControlObjective_Viewers) GetID() string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_Viewers{}
	}
	return t.ID
}
func (t *GetControlObjectiveByID_ControlObjective_Viewers) GetName() string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_Viewers{}
	}
	return t.Name
}

type GetControlObjectiveByID_ControlObjective_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetControlObjectiveByID_ControlObjective_BlockedGroups) GetID() string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_BlockedGroups{}
	}
	return t.ID
}
func (t *GetControlObjectiveByID_ControlObjective_BlockedGroups) GetName() string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective_BlockedGroups{}
	}
	return t.Name
}

type GetControlObjectiveByID_ControlObjective struct {
	BlockedGroups        []*GetControlObjectiveByID_ControlObjective_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	Category             *string                                                   "json:\"category,omitempty\" graphql:\"category\""
	ControlObjectiveType *string                                                   "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	Controls             GetControlObjectiveByID_ControlObjective_Controls         "json:\"controls\" graphql:\"controls\""
	CreatedAt            *time.Time                                                "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                                   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DesiredOutcome       *string                                                   "json:\"desiredOutcome,omitempty\" graphql:\"desiredOutcome\""
	DisplayID            string                                                    "json:\"displayID\" graphql:\"displayID\""
	Editors              []*GetControlObjectiveByID_ControlObjective_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID                   string                                                    "json:\"id\" graphql:\"id\""
	Name                 string                                                    "json:\"name\" graphql:\"name\""
	OwnerID              *string                                                   "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Programs             GetControlObjectiveByID_ControlObjective_Programs         "json:\"programs\" graphql:\"programs\""
	Revision             *string                                                   "json:\"revision,omitempty\" graphql:\"revision\""
	Source               *enums.ControlSource                                      "json:\"source,omitempty\" graphql:\"source\""
	Status               *string                                                   "json:\"status,omitempty\" graphql:\"status\""
	Subcategory          *string                                                   "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                 []string                                                  "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                                "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                                   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers              []*GetControlObjectiveByID_ControlObjective_Viewers       "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *GetControlObjectiveByID_ControlObjective) GetBlockedGroups() []*GetControlObjectiveByID_ControlObjective_BlockedGroups {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.BlockedGroups
}
func (t *GetControlObjectiveByID_ControlObjective) GetCategory() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Category
}
func (t *GetControlObjectiveByID_ControlObjective) GetControlObjectiveType() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.ControlObjectiveType
}
func (t *GetControlObjectiveByID_ControlObjective) GetControls() *GetControlObjectiveByID_ControlObjective_Controls {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return &t.Controls
}
func (t *GetControlObjectiveByID_ControlObjective) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.CreatedAt
}
func (t *GetControlObjectiveByID_ControlObjective) GetCreatedBy() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.CreatedBy
}
func (t *GetControlObjectiveByID_ControlObjective) GetDesiredOutcome() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.DesiredOutcome
}
func (t *GetControlObjectiveByID_ControlObjective) GetDisplayID() string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.DisplayID
}
func (t *GetControlObjectiveByID_ControlObjective) GetEditors() []*GetControlObjectiveByID_ControlObjective_Editors {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Editors
}
func (t *GetControlObjectiveByID_ControlObjective) GetID() string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.ID
}
func (t *GetControlObjectiveByID_ControlObjective) GetName() string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Name
}
func (t *GetControlObjectiveByID_ControlObjective) GetOwnerID() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.OwnerID
}
func (t *GetControlObjectiveByID_ControlObjective) GetPrograms() *GetControlObjectiveByID_ControlObjective_Programs {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return &t.Programs
}
func (t *GetControlObjectiveByID_ControlObjective) GetRevision() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Revision
}
func (t *GetControlObjectiveByID_ControlObjective) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Source
}
func (t *GetControlObjectiveByID_ControlObjective) GetStatus() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Status
}
func (t *GetControlObjectiveByID_ControlObjective) GetSubcategory() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Subcategory
}
func (t *GetControlObjectiveByID_ControlObjective) GetTags() []string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Tags
}
func (t *GetControlObjectiveByID_ControlObjective) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.UpdatedAt
}
func (t *GetControlObjectiveByID_ControlObjective) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.UpdatedBy
}
func (t *GetControlObjectiveByID_ControlObjective) GetViewers() []*GetControlObjectiveByID_ControlObjective_Viewers {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Viewers
}

type GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	DisplayID   string  "json:\"displayID\" graphql:\"displayID\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges struct {
	Node *GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges) GetNode() *GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges_Node {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges{}
	}
	return t.Node
}

type GetControlObjectives_ControlObjectives_Edges_Node_Controls struct {
	Edges []*GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControlObjectives_ControlObjectives_Edges_Node_Controls) GetEdges() []*GetControlObjectives_ControlObjectives_Edges_Node_Controls_Edges {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_Controls{}
	}
	return t.Edges
}

type GetControlObjectives_ControlObjectives_Edges_Node_Programs_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *GetControlObjectives_ControlObjectives_Edges_Node_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_Programs_Edges_Node{}
	}
	return t.Name
}

type GetControlObjectives_ControlObjectives_Edges_Node_Programs_Edges struct {
	Node *GetControlObjectives_ControlObjectives_Edges_Node_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlObjectives_ControlObjectives_Edges_Node_Programs_Edges) GetNode() *GetControlObjectives_ControlObjectives_Edges_Node_Programs_Edges_Node {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_Programs_Edges{}
	}
	return t.Node
}

type GetControlObjectives_ControlObjectives_Edges_Node_Programs struct {
	Edges []*GetControlObjectives_ControlObjectives_Edges_Node_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControlObjectives_ControlObjectives_Edges_Node_Programs) GetEdges() []*GetControlObjectives_ControlObjectives_Edges_Node_Programs_Edges {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_Programs{}
	}
	return t.Edges
}

type GetControlObjectives_ControlObjectives_Edges_Node_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetControlObjectives_ControlObjectives_Edges_Node_Editors) GetID() string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_Editors{}
	}
	return t.ID
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node_Editors) GetName() string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_Editors{}
	}
	return t.Name
}

type GetControlObjectives_ControlObjectives_Edges_Node_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetControlObjectives_ControlObjectives_Edges_Node_Viewers) GetID() string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_Viewers{}
	}
	return t.ID
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node_Viewers) GetName() string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_Viewers{}
	}
	return t.Name
}

type GetControlObjectives_ControlObjectives_Edges_Node_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetControlObjectives_ControlObjectives_Edges_Node_BlockedGroups) GetID() string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_BlockedGroups{}
	}
	return t.ID
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node_BlockedGroups) GetName() string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node_BlockedGroups{}
	}
	return t.Name
}

type GetControlObjectives_ControlObjectives_Edges_Node struct {
	BlockedGroups        []*GetControlObjectives_ControlObjectives_Edges_Node_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	Category             *string                                                            "json:\"category,omitempty\" graphql:\"category\""
	ControlObjectiveType *string                                                            "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	Controls             GetControlObjectives_ControlObjectives_Edges_Node_Controls         "json:\"controls\" graphql:\"controls\""
	CreatedAt            *time.Time                                                         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                                            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DesiredOutcome       *string                                                            "json:\"desiredOutcome,omitempty\" graphql:\"desiredOutcome\""
	DisplayID            string                                                             "json:\"displayID\" graphql:\"displayID\""
	Editors              []*GetControlObjectives_ControlObjectives_Edges_Node_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID                   string                                                             "json:\"id\" graphql:\"id\""
	Name                 string                                                             "json:\"name\" graphql:\"name\""
	OwnerID              *string                                                            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Programs             GetControlObjectives_ControlObjectives_Edges_Node_Programs         "json:\"programs\" graphql:\"programs\""
	Revision             *string                                                            "json:\"revision,omitempty\" graphql:\"revision\""
	Source               *enums.ControlSource                                               "json:\"source,omitempty\" graphql:\"source\""
	Status               *string                                                            "json:\"status,omitempty\" graphql:\"status\""
	Subcategory          *string                                                            "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                 []string                                                           "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                                         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                                            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers              []*GetControlObjectives_ControlObjectives_Edges_Node_Viewers       "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetBlockedGroups() []*GetControlObjectives_ControlObjectives_Edges_Node_BlockedGroups {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.BlockedGroups
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Category
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetControlObjectiveType() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.ControlObjectiveType
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetControls() *GetControlObjectives_ControlObjectives_Edges_Node_Controls {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return &t.Controls
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetDesiredOutcome() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.DesiredOutcome
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetEditors() []*GetControlObjectives_ControlObjectives_Edges_Node_Editors {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Editors
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetName() string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Name
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetPrograms() *GetControlObjectives_ControlObjectives_Edges_Node_Programs {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return &t.Programs
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Revision
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Source
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Status
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Tags
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetViewers() []*GetControlObjectives_ControlObjectives_Edges_Node_Viewers {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Viewers
}

type GetControlObjectives_ControlObjectives_Edges struct {
	Node *GetControlObjectives_ControlObjectives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlObjectives_ControlObjectives_Edges) GetNode() *GetControlObjectives_ControlObjectives_Edges_Node {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges{}
	}
	return t.Node
}

type GetControlObjectives_ControlObjectives struct {
	Edges []*GetControlObjectives_ControlObjectives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControlObjectives_ControlObjectives) GetEdges() []*GetControlObjectives_ControlObjectives_Edges {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives{}
	}
	return t.Edges
}

type UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	DisplayID   string  "json:\"displayID\" graphql:\"displayID\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges_Node{}
	}
	return t.DisplayID
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges_Node{}
	}
	return t.RefCode
}

type UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges struct {
	Node *UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges) GetNode() *UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges_Node {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges{}
	}
	return t.Node
}

type UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls struct {
	Edges []*UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls) GetEdges() []*UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls_Edges {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls{}
	}
	return t.Edges
}

type UpdateControlObjective_UpdateControlObjective_ControlObjective_Programs_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_Programs_Edges_Node{}
	}
	return t.Name
}

type UpdateControlObjective_UpdateControlObjective_ControlObjective_Programs_Edges struct {
	Node *UpdateControlObjective_UpdateControlObjective_ControlObjective_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_Programs_Edges) GetNode() *UpdateControlObjective_UpdateControlObjective_ControlObjective_Programs_Edges_Node {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_Programs_Edges{}
	}
	return t.Node
}

type UpdateControlObjective_UpdateControlObjective_ControlObjective_Programs struct {
	Edges []*UpdateControlObjective_UpdateControlObjective_ControlObjective_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_Programs) GetEdges() []*UpdateControlObjective_UpdateControlObjective_ControlObjective_Programs_Edges {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_Programs{}
	}
	return t.Edges
}

type UpdateControlObjective_UpdateControlObjective_ControlObjective_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_Editors) GetID() string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_Editors{}
	}
	return t.ID
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_Editors) GetName() string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_Editors{}
	}
	return t.Name
}

type UpdateControlObjective_UpdateControlObjective_ControlObjective_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_Viewers) GetID() string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_Viewers{}
	}
	return t.ID
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_Viewers) GetName() string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_Viewers{}
	}
	return t.Name
}

type UpdateControlObjective_UpdateControlObjective_ControlObjective_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_BlockedGroups) GetID() string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_BlockedGroups{}
	}
	return t.ID
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective_BlockedGroups) GetName() string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective_BlockedGroups{}
	}
	return t.Name
}

type UpdateControlObjective_UpdateControlObjective_ControlObjective struct {
	BlockedGroups        []*UpdateControlObjective_UpdateControlObjective_ControlObjective_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	Category             *string                                                                         "json:\"category,omitempty\" graphql:\"category\""
	ControlObjectiveType *string                                                                         "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	Controls             UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls         "json:\"controls\" graphql:\"controls\""
	CreatedAt            *time.Time                                                                      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                                                         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DesiredOutcome       *string                                                                         "json:\"desiredOutcome,omitempty\" graphql:\"desiredOutcome\""
	DisplayID            string                                                                          "json:\"displayID\" graphql:\"displayID\""
	Editors              []*UpdateControlObjective_UpdateControlObjective_ControlObjective_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID                   string                                                                          "json:\"id\" graphql:\"id\""
	Name                 string                                                                          "json:\"name\" graphql:\"name\""
	OwnerID              *string                                                                         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Programs             UpdateControlObjective_UpdateControlObjective_ControlObjective_Programs         "json:\"programs\" graphql:\"programs\""
	Revision             *string                                                                         "json:\"revision,omitempty\" graphql:\"revision\""
	Source               *enums.ControlSource                                                            "json:\"source,omitempty\" graphql:\"source\""
	Status               *string                                                                         "json:\"status,omitempty\" graphql:\"status\""
	Subcategory          *string                                                                         "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                 []string                                                                        "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                                                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                                                         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers              []*UpdateControlObjective_UpdateControlObjective_ControlObjective_Viewers       "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetBlockedGroups() []*UpdateControlObjective_UpdateControlObjective_ControlObjective_BlockedGroups {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.BlockedGroups
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetCategory() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Category
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetControlObjectiveType() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.ControlObjectiveType
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetControls() *UpdateControlObjective_UpdateControlObjective_ControlObjective_Controls {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return &t.Controls
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.CreatedAt
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.CreatedBy
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetDesiredOutcome() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.DesiredOutcome
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetDisplayID() string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.DisplayID
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetEditors() []*UpdateControlObjective_UpdateControlObjective_ControlObjective_Editors {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Editors
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetID() string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.ID
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetName() string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Name
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetOwnerID() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.OwnerID
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetPrograms() *UpdateControlObjective_UpdateControlObjective_ControlObjective_Programs {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return &t.Programs
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetRevision() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Revision
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetSource() *enums.ControlSource {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Source
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetStatus() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Status
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetSubcategory() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Subcategory
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetTags() []string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Tags
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.UpdatedAt
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.UpdatedBy
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetViewers() []*UpdateControlObjective_UpdateControlObjective_ControlObjective_Viewers {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Viewers
}

type UpdateControlObjective_UpdateControlObjective struct {
	ControlObjective UpdateControlObjective_UpdateControlObjective_ControlObjective "json:\"controlObjective\" graphql:\"controlObjective\""
}

func (t *UpdateControlObjective_UpdateControlObjective) GetControlObjective() *UpdateControlObjective_UpdateControlObjective_ControlObjective {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective{}
	}
	return &t.ControlObjective
}

type GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node struct {
	Category             *string              "json:\"category,omitempty\" graphql:\"category\""
	ControlObjectiveType *string              "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	CreatedAt            *time.Time           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DesiredOutcome       *string              "json:\"desiredOutcome,omitempty\" graphql:\"desiredOutcome\""
	DisplayID            string               "json:\"displayID\" graphql:\"displayID\""
	HistoryTime          time.Time            "json:\"historyTime\" graphql:\"historyTime\""
	ID                   string               "json:\"id\" graphql:\"id\""
	Name                 string               "json:\"name\" graphql:\"name\""
	Operation            history.OpType       "json:\"operation\" graphql:\"operation\""
	OwnerID              *string              "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                  *string              "json:\"ref,omitempty\" graphql:\"ref\""
	Revision             *string              "json:\"revision,omitempty\" graphql:\"revision\""
	Source               *enums.ControlSource "json:\"source,omitempty\" graphql:\"source\""
	Status               *string              "json:\"status,omitempty\" graphql:\"status\""
	Subcategory          *string              "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                 []string             "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetControlObjectiveType() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.ControlObjectiveType
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetDesiredOutcome() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.DesiredOutcome
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Revision
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges struct {
	Node *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges) GetNode() *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges{}
	}
	return t.Node
}

type GetAllControlObjectiveHistories_ControlObjectiveHistories struct {
	Edges []*GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories) GetEdges() []*GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories{}
	}
	return t.Edges
}

type GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node struct {
	Category             *string              "json:\"category,omitempty\" graphql:\"category\""
	ControlObjectiveType *string              "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	CreatedAt            *time.Time           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DesiredOutcome       *string              "json:\"desiredOutcome,omitempty\" graphql:\"desiredOutcome\""
	DisplayID            string               "json:\"displayID\" graphql:\"displayID\""
	HistoryTime          time.Time            "json:\"historyTime\" graphql:\"historyTime\""
	ID                   string               "json:\"id\" graphql:\"id\""
	Name                 string               "json:\"name\" graphql:\"name\""
	Operation            history.OpType       "json:\"operation\" graphql:\"operation\""
	OwnerID              *string              "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                  *string              "json:\"ref,omitempty\" graphql:\"ref\""
	Revision             *string              "json:\"revision,omitempty\" graphql:\"revision\""
	Source               *enums.ControlSource "json:\"source,omitempty\" graphql:\"source\""
	Status               *string              "json:\"status,omitempty\" graphql:\"status\""
	Subcategory          *string              "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                 []string             "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Category
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetControlObjectiveType() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.ControlObjectiveType
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetDesiredOutcome() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.DesiredOutcome
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Revision
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetControlObjectiveHistories_ControlObjectiveHistories_Edges struct {
	Node *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges) GetNode() *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges{}
	}
	return t.Node
}

type GetControlObjectiveHistories_ControlObjectiveHistories struct {
	Edges []*GetControlObjectiveHistories_ControlObjectiveHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControlObjectiveHistories_ControlObjectiveHistories) GetEdges() []*GetControlObjectiveHistories_ControlObjectiveHistories_Edges {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories{}
	}
	return t.Edges
}

type CreateDocumentData_CreateDocumentData_DocumentData struct {
	CreatedAt  *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Data       map[string]any "json:\"data\" graphql:\"data\""
	ID         string         "json:\"id\" graphql:\"id\""
	TemplateID string         "json:\"templateID\" graphql:\"templateID\""
	UpdatedAt  *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.CreatedAt
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetCreatedBy() *string {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.CreatedBy
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetData() map[string]any {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.Data
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetID() string {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.ID
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetTemplateID() string {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.TemplateID
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.UpdatedAt
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.UpdatedBy
}

type CreateDocumentData_CreateDocumentData struct {
	DocumentData CreateDocumentData_CreateDocumentData_DocumentData "json:\"documentData\" graphql:\"documentData\""
}

func (t *CreateDocumentData_CreateDocumentData) GetDocumentData() *CreateDocumentData_CreateDocumentData_DocumentData {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData{}
	}
	return &t.DocumentData
}

type DeleteDocumentData_DeleteDocumentData struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteDocumentData_DeleteDocumentData) GetDeletedID() string {
	if t == nil {
		t = &DeleteDocumentData_DeleteDocumentData{}
	}
	return t.DeletedID
}

type GetDocumentDataByID_DocumentData struct {
	CreatedAt  *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Data       map[string]any "json:\"data\" graphql:\"data\""
	ID         string         "json:\"id\" graphql:\"id\""
	TemplateID string         "json:\"templateID\" graphql:\"templateID\""
	UpdatedAt  *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetDocumentDataByID_DocumentData) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.CreatedAt
}
func (t *GetDocumentDataByID_DocumentData) GetCreatedBy() *string {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.CreatedBy
}
func (t *GetDocumentDataByID_DocumentData) GetData() map[string]any {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.Data
}
func (t *GetDocumentDataByID_DocumentData) GetID() string {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.ID
}
func (t *GetDocumentDataByID_DocumentData) GetTemplateID() string {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.TemplateID
}
func (t *GetDocumentDataByID_DocumentData) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.UpdatedAt
}
func (t *GetDocumentDataByID_DocumentData) GetUpdatedBy() *string {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.UpdatedBy
}

type UpdateDocumentData_UpdateDocumentData_DocumentData struct {
	CreatedAt  *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Data       map[string]any "json:\"data\" graphql:\"data\""
	ID         string         "json:\"id\" graphql:\"id\""
	TemplateID string         "json:\"templateID\" graphql:\"templateID\""
	UpdatedAt  *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.CreatedAt
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.CreatedBy
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetData() map[string]any {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.Data
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetID() string {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.ID
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetTemplateID() string {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.TemplateID
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.UpdatedAt
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.UpdatedBy
}

type UpdateDocumentData_UpdateDocumentData struct {
	DocumentData UpdateDocumentData_UpdateDocumentData_DocumentData "json:\"documentData\" graphql:\"documentData\""
}

func (t *UpdateDocumentData_UpdateDocumentData) GetDocumentData() *UpdateDocumentData_UpdateDocumentData_DocumentData {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData{}
	}
	return &t.DocumentData
}

type GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Data        map[string]any "json:\"data\" graphql:\"data\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateID  string         "json:\"templateID\" graphql:\"templateID\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetData() map[string]any {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.Data
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetTemplateID() string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.TemplateID
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllDocumentDataHistories_DocumentDataHistories_Edges struct {
	Node *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges) GetNode() *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges{}
	}
	return t.Node
}

type GetAllDocumentDataHistories_DocumentDataHistories struct {
	Edges []*GetAllDocumentDataHistories_DocumentDataHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllDocumentDataHistories_DocumentDataHistories) GetEdges() []*GetAllDocumentDataHistories_DocumentDataHistories_Edges {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories{}
	}
	return t.Edges
}

type GetDocumentDataHistories_DocumentDataHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Data        map[string]any "json:\"data\" graphql:\"data\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateID  string         "json:\"templateID\" graphql:\"templateID\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetData() map[string]any {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.Data
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetTemplateID() string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.TemplateID
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetDocumentDataHistories_DocumentDataHistories_Edges struct {
	Node *GetDocumentDataHistories_DocumentDataHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetDocumentDataHistories_DocumentDataHistories_Edges) GetNode() *GetDocumentDataHistories_DocumentDataHistories_Edges_Node {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges{}
	}
	return t.Node
}

type GetDocumentDataHistories_DocumentDataHistories struct {
	Edges []*GetDocumentDataHistories_DocumentDataHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetDocumentDataHistories_DocumentDataHistories) GetEdges() []*GetDocumentDataHistories_DocumentDataHistories_Edges {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories{}
	}
	return t.Edges
}

type CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes_Edges_Node struct {
	Text      string     "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes_Edges_Node) GetText() string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes_Edges_Node{}
	}
	return t.Text
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes_Edges_Node{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes_Edges struct {
	Node *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes_Edges) GetNode() *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes_Edges_Node {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes_Edges{}
	}
	return t.Node
}

type CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes struct {
	Edges []*CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes) GetEdges() []*CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes_Edges {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes{}
	}
	return t.Edges
}

type CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_EntityType struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_EntityType) GetName() string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_EntityType{}
	}
	return t.Name
}

type CreateBulkCSVEntity_CreateBulkCSVEntity_Entities struct {
	CreatedAt   *time.Time                                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                                      "json:\"description,omitempty\" graphql:\"description\""
	DisplayName *string                                                      "json:\"displayName,omitempty\" graphql:\"displayName\""
	Domains     []string                                                     "json:\"domains,omitempty\" graphql:\"domains\""
	EntityType  *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_EntityType "json:\"entityType,omitempty\" graphql:\"entityType\""
	ID          string                                                       "json:\"id\" graphql:\"id\""
	Name        *string                                                      "json:\"name,omitempty\" graphql:\"name\""
	Notes       CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes       "json:\"notes\" graphql:\"notes\""
	OwnerID     *string                                                      "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status      *string                                                      "json:\"status,omitempty\" graphql:\"status\""
	Tags        []string                                                     "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.Description
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetDisplayName() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.DisplayName
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetDomains() []string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.Domains
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetEntityType() *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_EntityType {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.EntityType
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.ID
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetName() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.Name
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetNotes() *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return &t.Notes
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetStatus() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.Status
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.Tags
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVEntity_CreateBulkCSVEntity struct {
	Entities []*CreateBulkCSVEntity_CreateBulkCSVEntity_Entities "json:\"entities,omitempty\" graphql:\"entities\""
}

func (t *CreateBulkCSVEntity_CreateBulkCSVEntity) GetEntities() []*CreateBulkCSVEntity_CreateBulkCSVEntity_Entities {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity{}
	}
	return t.Entities
}

type CreateBulkEntity_CreateBulkEntity_Entities_Notes_Edges_Node struct {
	Text      string     "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkEntity_CreateBulkEntity_Entities_Notes_Edges_Node) GetText() string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities_Notes_Edges_Node{}
	}
	return t.Text
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities_Notes_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities_Notes_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities_Notes_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities_Notes_Edges_Node{}
	}
	return t.UpdatedBy
}

type CreateBulkEntity_CreateBulkEntity_Entities_Notes_Edges struct {
	Node *CreateBulkEntity_CreateBulkEntity_Entities_Notes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkEntity_CreateBulkEntity_Entities_Notes_Edges) GetNode() *CreateBulkEntity_CreateBulkEntity_Entities_Notes_Edges_Node {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities_Notes_Edges{}
	}
	return t.Node
}

type CreateBulkEntity_CreateBulkEntity_Entities_Notes struct {
	Edges []*CreateBulkEntity_CreateBulkEntity_Entities_Notes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkEntity_CreateBulkEntity_Entities_Notes) GetEdges() []*CreateBulkEntity_CreateBulkEntity_Entities_Notes_Edges {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities_Notes{}
	}
	return t.Edges
}

type CreateBulkEntity_CreateBulkEntity_Entities_EntityType struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkEntity_CreateBulkEntity_Entities_EntityType) GetName() string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities_EntityType{}
	}
	return t.Name
}

type CreateBulkEntity_CreateBulkEntity_Entities struct {
	CreatedAt   *time.Time                                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                                "json:\"description,omitempty\" graphql:\"description\""
	DisplayName *string                                                "json:\"displayName,omitempty\" graphql:\"displayName\""
	Domains     []string                                               "json:\"domains,omitempty\" graphql:\"domains\""
	EntityType  *CreateBulkEntity_CreateBulkEntity_Entities_EntityType "json:\"entityType,omitempty\" graphql:\"entityType\""
	ID          string                                                 "json:\"id\" graphql:\"id\""
	Name        *string                                                "json:\"name,omitempty\" graphql:\"name\""
	Notes       CreateBulkEntity_CreateBulkEntity_Entities_Notes       "json:\"notes\" graphql:\"notes\""
	OwnerID     *string                                                "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status      *string                                                "json:\"status,omitempty\" graphql:\"status\""
	Tags        []string                                               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.CreatedAt
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.CreatedBy
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetDescription() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.Description
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetDisplayName() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.DisplayName
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetDomains() []string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.Domains
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetEntityType() *CreateBulkEntity_CreateBulkEntity_Entities_EntityType {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.EntityType
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetID() string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.ID
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetName() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.Name
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetNotes() *CreateBulkEntity_CreateBulkEntity_Entities_Notes {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return &t.Notes
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.OwnerID
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetStatus() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.Status
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetTags() []string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.Tags
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.UpdatedBy
}

type CreateBulkEntity_CreateBulkEntity struct {
	Entities []*CreateBulkEntity_CreateBulkEntity_Entities "json:\"entities,omitempty\" graphql:\"entities\""
}

func (t *CreateBulkEntity_CreateBulkEntity) GetEntities() []*CreateBulkEntity_CreateBulkEntity_Entities {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity{}
	}
	return t.Entities
}

type CreateEntity_CreateEntity_Entity_Notes_Edges_Node struct {
	Text      string     "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateEntity_CreateEntity_Entity_Notes_Edges_Node) GetText() string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity_Notes_Edges_Node{}
	}
	return t.Text
}
func (t *CreateEntity_CreateEntity_Entity_Notes_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity_Notes_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *CreateEntity_CreateEntity_Entity_Notes_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity_Notes_Edges_Node{}
	}
	return t.UpdatedBy
}

type CreateEntity_CreateEntity_Entity_Notes_Edges struct {
	Node *CreateEntity_CreateEntity_Entity_Notes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateEntity_CreateEntity_Entity_Notes_Edges) GetNode() *CreateEntity_CreateEntity_Entity_Notes_Edges_Node {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity_Notes_Edges{}
	}
	return t.Node
}

type CreateEntity_CreateEntity_Entity_Notes struct {
	Edges []*CreateEntity_CreateEntity_Entity_Notes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateEntity_CreateEntity_Entity_Notes) GetEdges() []*CreateEntity_CreateEntity_Entity_Notes_Edges {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity_Notes{}
	}
	return t.Edges
}

type CreateEntity_CreateEntity_Entity_EntityType struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateEntity_CreateEntity_Entity_EntityType) GetName() string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity_EntityType{}
	}
	return t.Name
}

type CreateEntity_CreateEntity_Entity struct {
	CreatedAt   *time.Time                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                      "json:\"description,omitempty\" graphql:\"description\""
	DisplayName *string                                      "json:\"displayName,omitempty\" graphql:\"displayName\""
	Domains     []string                                     "json:\"domains,omitempty\" graphql:\"domains\""
	EntityType  *CreateEntity_CreateEntity_Entity_EntityType "json:\"entityType,omitempty\" graphql:\"entityType\""
	ID          string                                       "json:\"id\" graphql:\"id\""
	Name        *string                                      "json:\"name,omitempty\" graphql:\"name\""
	Notes       CreateEntity_CreateEntity_Entity_Notes       "json:\"notes\" graphql:\"notes\""
	OwnerID     *string                                      "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status      *string                                      "json:\"status,omitempty\" graphql:\"status\""
	Tags        []string                                     "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateEntity_CreateEntity_Entity) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.CreatedAt
}
func (t *CreateEntity_CreateEntity_Entity) GetCreatedBy() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.CreatedBy
}
func (t *CreateEntity_CreateEntity_Entity) GetDescription() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.Description
}
func (t *CreateEntity_CreateEntity_Entity) GetDisplayName() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.DisplayName
}
func (t *CreateEntity_CreateEntity_Entity) GetDomains() []string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.Domains
}
func (t *CreateEntity_CreateEntity_Entity) GetEntityType() *CreateEntity_CreateEntity_Entity_EntityType {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.EntityType
}
func (t *CreateEntity_CreateEntity_Entity) GetID() string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.ID
}
func (t *CreateEntity_CreateEntity_Entity) GetName() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.Name
}
func (t *CreateEntity_CreateEntity_Entity) GetNotes() *CreateEntity_CreateEntity_Entity_Notes {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return &t.Notes
}
func (t *CreateEntity_CreateEntity_Entity) GetOwnerID() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.OwnerID
}
func (t *CreateEntity_CreateEntity_Entity) GetStatus() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.Status
}
func (t *CreateEntity_CreateEntity_Entity) GetTags() []string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.Tags
}
func (t *CreateEntity_CreateEntity_Entity) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.UpdatedAt
}
func (t *CreateEntity_CreateEntity_Entity) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.UpdatedBy
}

type CreateEntity_CreateEntity struct {
	Entity CreateEntity_CreateEntity_Entity "json:\"entity\" graphql:\"entity\""
}

func (t *CreateEntity_CreateEntity) GetEntity() *CreateEntity_CreateEntity_Entity {
	if t == nil {
		t = &CreateEntity_CreateEntity{}
	}
	return &t.Entity
}

type DeleteEntity_DeleteEntity struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteEntity_DeleteEntity) GetDeletedID() string {
	if t == nil {
		t = &DeleteEntity_DeleteEntity{}
	}
	return t.DeletedID
}

type GetAllEntities_Entities_Edges_Node_Notes_Edges_Node struct {
	Text      string     "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllEntities_Entities_Edges_Node_Notes_Edges_Node) GetText() string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node_Notes_Edges_Node{}
	}
	return t.Text
}
func (t *GetAllEntities_Entities_Edges_Node_Notes_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node_Notes_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEntities_Entities_Edges_Node_Notes_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node_Notes_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllEntities_Entities_Edges_Node_Notes_Edges struct {
	Node *GetAllEntities_Entities_Edges_Node_Notes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEntities_Entities_Edges_Node_Notes_Edges) GetNode() *GetAllEntities_Entities_Edges_Node_Notes_Edges_Node {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node_Notes_Edges{}
	}
	return t.Node
}

type GetAllEntities_Entities_Edges_Node_Notes struct {
	Edges []*GetAllEntities_Entities_Edges_Node_Notes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEntities_Entities_Edges_Node_Notes) GetEdges() []*GetAllEntities_Entities_Edges_Node_Notes_Edges {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node_Notes{}
	}
	return t.Edges
}

type GetAllEntities_Entities_Edges_Node_EntityType struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllEntities_Entities_Edges_Node_EntityType) GetName() string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node_EntityType{}
	}
	return t.Name
}

type GetAllEntities_Entities_Edges_Node struct {
	CreatedAt   *time.Time                                     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                        "json:\"description,omitempty\" graphql:\"description\""
	DisplayName *string                                        "json:\"displayName,omitempty\" graphql:\"displayName\""
	Domains     []string                                       "json:\"domains,omitempty\" graphql:\"domains\""
	EntityType  *GetAllEntities_Entities_Edges_Node_EntityType "json:\"entityType,omitempty\" graphql:\"entityType\""
	ID          string                                         "json:\"id\" graphql:\"id\""
	Name        *string                                        "json:\"name,omitempty\" graphql:\"name\""
	Notes       GetAllEntities_Entities_Edges_Node_Notes       "json:\"notes\" graphql:\"notes\""
	OwnerID     *string                                        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status      *string                                        "json:\"status,omitempty\" graphql:\"status\""
	Tags        []string                                       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllEntities_Entities_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEntities_Entities_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEntities_Entities_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllEntities_Entities_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllEntities_Entities_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.Domains
}
func (t *GetAllEntities_Entities_Edges_Node) GetEntityType() *GetAllEntities_Entities_Edges_Node_EntityType {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.EntityType
}
func (t *GetAllEntities_Entities_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEntities_Entities_Edges_Node) GetName() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllEntities_Entities_Edges_Node) GetNotes() *GetAllEntities_Entities_Edges_Node_Notes {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return &t.Notes
}
func (t *GetAllEntities_Entities_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllEntities_Entities_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllEntities_Entities_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEntities_Entities_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEntities_Entities_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllEntities_Entities_Edges struct {
	Node *GetAllEntities_Entities_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEntities_Entities_Edges) GetNode() *GetAllEntities_Entities_Edges_Node {
	if t == nil {
		t = &GetAllEntities_Entities_Edges{}
	}
	return t.Node
}

type GetAllEntities_Entities struct {
	Edges []*GetAllEntities_Entities_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEntities_Entities) GetEdges() []*GetAllEntities_Entities_Edges {
	if t == nil {
		t = &GetAllEntities_Entities{}
	}
	return t.Edges
}

type GetEntities_Entities_Edges_Node_Notes_Edges_Node struct {
	Text      string     "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntities_Entities_Edges_Node_Notes_Edges_Node) GetText() string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node_Notes_Edges_Node{}
	}
	return t.Text
}
func (t *GetEntities_Entities_Edges_Node_Notes_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node_Notes_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEntities_Entities_Edges_Node_Notes_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node_Notes_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetEntities_Entities_Edges_Node_Notes_Edges struct {
	Node *GetEntities_Entities_Edges_Node_Notes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntities_Entities_Edges_Node_Notes_Edges) GetNode() *GetEntities_Entities_Edges_Node_Notes_Edges_Node {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node_Notes_Edges{}
	}
	return t.Node
}

type GetEntities_Entities_Edges_Node_Notes struct {
	Edges []*GetEntities_Entities_Edges_Node_Notes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEntities_Entities_Edges_Node_Notes) GetEdges() []*GetEntities_Entities_Edges_Node_Notes_Edges {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node_Notes{}
	}
	return t.Edges
}

type GetEntities_Entities_Edges_Node_EntityType struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetEntities_Entities_Edges_Node_EntityType) GetName() string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node_EntityType{}
	}
	return t.Name
}

type GetEntities_Entities_Edges_Node struct {
	CreatedAt   *time.Time                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                     "json:\"description,omitempty\" graphql:\"description\""
	DisplayName *string                                     "json:\"displayName,omitempty\" graphql:\"displayName\""
	Domains     []string                                    "json:\"domains,omitempty\" graphql:\"domains\""
	EntityType  *GetEntities_Entities_Edges_Node_EntityType "json:\"entityType,omitempty\" graphql:\"entityType\""
	ID          string                                      "json:\"id\" graphql:\"id\""
	Name        *string                                     "json:\"name,omitempty\" graphql:\"name\""
	Notes       GetEntities_Entities_Edges_Node_Notes       "json:\"notes\" graphql:\"notes\""
	OwnerID     *string                                     "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status      *string                                     "json:\"status,omitempty\" graphql:\"status\""
	Tags        []string                                    "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntities_Entities_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetEntities_Entities_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetEntities_Entities_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.Description
}
func (t *GetEntities_Entities_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetEntities_Entities_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.Domains
}
func (t *GetEntities_Entities_Edges_Node) GetEntityType() *GetEntities_Entities_Edges_Node_EntityType {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.EntityType
}
func (t *GetEntities_Entities_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.ID
}
func (t *GetEntities_Entities_Edges_Node) GetName() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.Name
}
func (t *GetEntities_Entities_Edges_Node) GetNotes() *GetEntities_Entities_Edges_Node_Notes {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return &t.Notes
}
func (t *GetEntities_Entities_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetEntities_Entities_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.Status
}
func (t *GetEntities_Entities_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEntities_Entities_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEntities_Entities_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetEntities_Entities_Edges struct {
	Node *GetEntities_Entities_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntities_Entities_Edges) GetNode() *GetEntities_Entities_Edges_Node {
	if t == nil {
		t = &GetEntities_Entities_Edges{}
	}
	return t.Node
}

type GetEntities_Entities struct {
	Edges []*GetEntities_Entities_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEntities_Entities) GetEdges() []*GetEntities_Entities_Edges {
	if t == nil {
		t = &GetEntities_Entities{}
	}
	return t.Edges
}

type GetEntityByID_Entity_Notes_Edges_Node struct {
	Text      string     "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntityByID_Entity_Notes_Edges_Node) GetText() string {
	if t == nil {
		t = &GetEntityByID_Entity_Notes_Edges_Node{}
	}
	return t.Text
}
func (t *GetEntityByID_Entity_Notes_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntityByID_Entity_Notes_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEntityByID_Entity_Notes_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntityByID_Entity_Notes_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetEntityByID_Entity_Notes_Edges struct {
	Node *GetEntityByID_Entity_Notes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntityByID_Entity_Notes_Edges) GetNode() *GetEntityByID_Entity_Notes_Edges_Node {
	if t == nil {
		t = &GetEntityByID_Entity_Notes_Edges{}
	}
	return t.Node
}

type GetEntityByID_Entity_Notes struct {
	Edges []*GetEntityByID_Entity_Notes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEntityByID_Entity_Notes) GetEdges() []*GetEntityByID_Entity_Notes_Edges {
	if t == nil {
		t = &GetEntityByID_Entity_Notes{}
	}
	return t.Edges
}

type GetEntityByID_Entity_EntityType struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetEntityByID_Entity_EntityType) GetName() string {
	if t == nil {
		t = &GetEntityByID_Entity_EntityType{}
	}
	return t.Name
}

type GetEntityByID_Entity_Contacts_Edges_Node struct {
	Address     *string "json:\"address,omitempty\" graphql:\"address\""
	Company     *string "json:\"company,omitempty\" graphql:\"company\""
	Email       *string "json:\"email,omitempty\" graphql:\"email\""
	FullName    string  "json:\"fullName\" graphql:\"fullName\""
	ID          string  "json:\"id\" graphql:\"id\""
	PhoneNumber *string "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Title       *string "json:\"title,omitempty\" graphql:\"title\""
}

func (t *GetEntityByID_Entity_Contacts_Edges_Node) GetAddress() *string {
	if t == nil {
		t = &GetEntityByID_Entity_Contacts_Edges_Node{}
	}
	return t.Address
}
func (t *GetEntityByID_Entity_Contacts_Edges_Node) GetCompany() *string {
	if t == nil {
		t = &GetEntityByID_Entity_Contacts_Edges_Node{}
	}
	return t.Company
}
func (t *GetEntityByID_Entity_Contacts_Edges_Node) GetEmail() *string {
	if t == nil {
		t = &GetEntityByID_Entity_Contacts_Edges_Node{}
	}
	return t.Email
}
func (t *GetEntityByID_Entity_Contacts_Edges_Node) GetFullName() string {
	if t == nil {
		t = &GetEntityByID_Entity_Contacts_Edges_Node{}
	}
	return t.FullName
}
func (t *GetEntityByID_Entity_Contacts_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEntityByID_Entity_Contacts_Edges_Node{}
	}
	return t.ID
}
func (t *GetEntityByID_Entity_Contacts_Edges_Node) GetPhoneNumber() *string {
	if t == nil {
		t = &GetEntityByID_Entity_Contacts_Edges_Node{}
	}
	return t.PhoneNumber
}
func (t *GetEntityByID_Entity_Contacts_Edges_Node) GetTitle() *string {
	if t == nil {
		t = &GetEntityByID_Entity_Contacts_Edges_Node{}
	}
	return t.Title
}

type GetEntityByID_Entity_Contacts_Edges struct {
	Node *GetEntityByID_Entity_Contacts_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntityByID_Entity_Contacts_Edges) GetNode() *GetEntityByID_Entity_Contacts_Edges_Node {
	if t == nil {
		t = &GetEntityByID_Entity_Contacts_Edges{}
	}
	return t.Node
}

type GetEntityByID_Entity_Contacts struct {
	Edges []*GetEntityByID_Entity_Contacts_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEntityByID_Entity_Contacts) GetEdges() []*GetEntityByID_Entity_Contacts_Edges {
	if t == nil {
		t = &GetEntityByID_Entity_Contacts{}
	}
	return t.Edges
}

type GetEntityByID_Entity struct {
	Contacts    GetEntityByID_Entity_Contacts    "json:\"contacts\" graphql:\"contacts\""
	CreatedAt   *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayName *string                          "json:\"displayName,omitempty\" graphql:\"displayName\""
	Domains     []string                         "json:\"domains,omitempty\" graphql:\"domains\""
	EntityType  *GetEntityByID_Entity_EntityType "json:\"entityType,omitempty\" graphql:\"entityType\""
	ID          string                           "json:\"id\" graphql:\"id\""
	Name        *string                          "json:\"name,omitempty\" graphql:\"name\""
	Notes       GetEntityByID_Entity_Notes       "json:\"notes\" graphql:\"notes\""
	OwnerID     *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status      *string                          "json:\"status,omitempty\" graphql:\"status\""
	Tags        []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntityByID_Entity) GetContacts() *GetEntityByID_Entity_Contacts {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return &t.Contacts
}
func (t *GetEntityByID_Entity) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.CreatedAt
}
func (t *GetEntityByID_Entity) GetCreatedBy() *string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.CreatedBy
}
func (t *GetEntityByID_Entity) GetDescription() *string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.Description
}
func (t *GetEntityByID_Entity) GetDisplayName() *string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.DisplayName
}
func (t *GetEntityByID_Entity) GetDomains() []string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.Domains
}
func (t *GetEntityByID_Entity) GetEntityType() *GetEntityByID_Entity_EntityType {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.EntityType
}
func (t *GetEntityByID_Entity) GetID() string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.ID
}
func (t *GetEntityByID_Entity) GetName() *string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.Name
}
func (t *GetEntityByID_Entity) GetNotes() *GetEntityByID_Entity_Notes {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return &t.Notes
}
func (t *GetEntityByID_Entity) GetOwnerID() *string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.OwnerID
}
func (t *GetEntityByID_Entity) GetStatus() *string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.Status
}
func (t *GetEntityByID_Entity) GetTags() []string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.Tags
}
func (t *GetEntityByID_Entity) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.UpdatedAt
}
func (t *GetEntityByID_Entity) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.UpdatedBy
}

type UpdateEntity_UpdateEntity_Entity_Notes_Edges_Node struct {
	Text      string     "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateEntity_UpdateEntity_Entity_Notes_Edges_Node) GetText() string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity_Notes_Edges_Node{}
	}
	return t.Text
}
func (t *UpdateEntity_UpdateEntity_Entity_Notes_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity_Notes_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *UpdateEntity_UpdateEntity_Entity_Notes_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity_Notes_Edges_Node{}
	}
	return t.UpdatedBy
}

type UpdateEntity_UpdateEntity_Entity_Notes_Edges struct {
	Node *UpdateEntity_UpdateEntity_Entity_Notes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateEntity_UpdateEntity_Entity_Notes_Edges) GetNode() *UpdateEntity_UpdateEntity_Entity_Notes_Edges_Node {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity_Notes_Edges{}
	}
	return t.Node
}

type UpdateEntity_UpdateEntity_Entity_Notes struct {
	Edges []*UpdateEntity_UpdateEntity_Entity_Notes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateEntity_UpdateEntity_Entity_Notes) GetEdges() []*UpdateEntity_UpdateEntity_Entity_Notes_Edges {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity_Notes{}
	}
	return t.Edges
}

type UpdateEntity_UpdateEntity_Entity_EntityType struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateEntity_UpdateEntity_Entity_EntityType) GetName() string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity_EntityType{}
	}
	return t.Name
}

type UpdateEntity_UpdateEntity_Entity struct {
	CreatedAt   *time.Time                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                      "json:\"description,omitempty\" graphql:\"description\""
	DisplayName *string                                      "json:\"displayName,omitempty\" graphql:\"displayName\""
	Domains     []string                                     "json:\"domains,omitempty\" graphql:\"domains\""
	EntityType  *UpdateEntity_UpdateEntity_Entity_EntityType "json:\"entityType,omitempty\" graphql:\"entityType\""
	ID          string                                       "json:\"id\" graphql:\"id\""
	Name        *string                                      "json:\"name,omitempty\" graphql:\"name\""
	Notes       UpdateEntity_UpdateEntity_Entity_Notes       "json:\"notes\" graphql:\"notes\""
	OwnerID     *string                                      "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status      *string                                      "json:\"status,omitempty\" graphql:\"status\""
	Tags        []string                                     "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateEntity_UpdateEntity_Entity) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.CreatedAt
}
func (t *UpdateEntity_UpdateEntity_Entity) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.CreatedBy
}
func (t *UpdateEntity_UpdateEntity_Entity) GetDescription() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.Description
}
func (t *UpdateEntity_UpdateEntity_Entity) GetDisplayName() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.DisplayName
}
func (t *UpdateEntity_UpdateEntity_Entity) GetDomains() []string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.Domains
}
func (t *UpdateEntity_UpdateEntity_Entity) GetEntityType() *UpdateEntity_UpdateEntity_Entity_EntityType {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.EntityType
}
func (t *UpdateEntity_UpdateEntity_Entity) GetID() string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.ID
}
func (t *UpdateEntity_UpdateEntity_Entity) GetName() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.Name
}
func (t *UpdateEntity_UpdateEntity_Entity) GetNotes() *UpdateEntity_UpdateEntity_Entity_Notes {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return &t.Notes
}
func (t *UpdateEntity_UpdateEntity_Entity) GetOwnerID() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.OwnerID
}
func (t *UpdateEntity_UpdateEntity_Entity) GetStatus() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.Status
}
func (t *UpdateEntity_UpdateEntity_Entity) GetTags() []string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.Tags
}
func (t *UpdateEntity_UpdateEntity_Entity) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.UpdatedAt
}
func (t *UpdateEntity_UpdateEntity_Entity) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.UpdatedBy
}

type UpdateEntity_UpdateEntity struct {
	Entity UpdateEntity_UpdateEntity_Entity "json:\"entity\" graphql:\"entity\""
}

func (t *UpdateEntity_UpdateEntity) GetEntity() *UpdateEntity_UpdateEntity_Entity {
	if t == nil {
		t = &UpdateEntity_UpdateEntity{}
	}
	return &t.Entity
}

type GetAllEntityHistories_EntityHistories_Edges_Node struct {
	CreatedAt    *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string        "json:\"description,omitempty\" graphql:\"description\""
	DisplayName  *string        "json:\"displayName,omitempty\" graphql:\"displayName\""
	Domains      []string       "json:\"domains,omitempty\" graphql:\"domains\""
	EntityTypeID *string        "json:\"entityTypeID,omitempty\" graphql:\"entityTypeID\""
	HistoryTime  time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID           string         "json:\"id\" graphql:\"id\""
	Name         *string        "json:\"name,omitempty\" graphql:\"name\""
	Operation    history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID      *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref          *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Status       *string        "json:\"status,omitempty\" graphql:\"status\""
	Tags         []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Domains
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetEntityTypeID() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.EntityTypeID
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetName() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllEntityHistories_EntityHistories_Edges struct {
	Node *GetAllEntityHistories_EntityHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEntityHistories_EntityHistories_Edges) GetNode() *GetAllEntityHistories_EntityHistories_Edges_Node {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges{}
	}
	return t.Node
}

type GetAllEntityHistories_EntityHistories struct {
	Edges []*GetAllEntityHistories_EntityHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEntityHistories_EntityHistories) GetEdges() []*GetAllEntityHistories_EntityHistories_Edges {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories{}
	}
	return t.Edges
}

type GetEntityHistories_EntityHistories_Edges_Node struct {
	CreatedAt    *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string        "json:\"description,omitempty\" graphql:\"description\""
	DisplayName  *string        "json:\"displayName,omitempty\" graphql:\"displayName\""
	Domains      []string       "json:\"domains,omitempty\" graphql:\"domains\""
	EntityTypeID *string        "json:\"entityTypeID,omitempty\" graphql:\"entityTypeID\""
	HistoryTime  time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID           string         "json:\"id\" graphql:\"id\""
	Name         *string        "json:\"name,omitempty\" graphql:\"name\""
	Operation    history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID      *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref          *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Status       *string        "json:\"status,omitempty\" graphql:\"status\""
	Tags         []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntityHistories_EntityHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Domains
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetEntityTypeID() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.EntityTypeID
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetName() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetEntityHistories_EntityHistories_Edges struct {
	Node *GetEntityHistories_EntityHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntityHistories_EntityHistories_Edges) GetNode() *GetEntityHistories_EntityHistories_Edges_Node {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges{}
	}
	return t.Node
}

type GetEntityHistories_EntityHistories struct {
	Edges []*GetEntityHistories_EntityHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEntityHistories_EntityHistories) GetEdges() []*GetEntityHistories_EntityHistories_Edges {
	if t == nil {
		t = &GetEntityHistories_EntityHistories{}
	}
	return t.Edges
}

type CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	OwnerID   *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.ID
}
func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetName() string {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.Name
}
func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.Tags
}
func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVEntityType_CreateBulkCSVEntityType struct {
	EntityTypes []*CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes "json:\"entityTypes,omitempty\" graphql:\"entityTypes\""
}

func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType) GetEntityTypes() []*CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType{}
	}
	return t.EntityTypes
}

type CreateBulkEntityType_CreateBulkEntityType_EntityTypes struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	OwnerID   *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.CreatedAt
}
func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.CreatedBy
}
func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetID() string {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.ID
}
func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetName() string {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.Name
}
func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.OwnerID
}
func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetTags() []string {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.Tags
}
func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.UpdatedBy
}

type CreateBulkEntityType_CreateBulkEntityType struct {
	EntityTypes []*CreateBulkEntityType_CreateBulkEntityType_EntityTypes "json:\"entityTypes,omitempty\" graphql:\"entityTypes\""
}

func (t *CreateBulkEntityType_CreateBulkEntityType) GetEntityTypes() []*CreateBulkEntityType_CreateBulkEntityType_EntityTypes {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType{}
	}
	return t.EntityTypes
}

type CreateEntityType_CreateEntityType_EntityType struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	OwnerID   *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateEntityType_CreateEntityType_EntityType) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.CreatedAt
}
func (t *CreateEntityType_CreateEntityType_EntityType) GetCreatedBy() *string {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.CreatedBy
}
func (t *CreateEntityType_CreateEntityType_EntityType) GetID() string {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.ID
}
func (t *CreateEntityType_CreateEntityType_EntityType) GetName() string {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.Name
}
func (t *CreateEntityType_CreateEntityType_EntityType) GetOwnerID() *string {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.OwnerID
}
func (t *CreateEntityType_CreateEntityType_EntityType) GetTags() []string {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.Tags
}
func (t *CreateEntityType_CreateEntityType_EntityType) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.UpdatedAt
}
func (t *CreateEntityType_CreateEntityType_EntityType) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.UpdatedBy
}

type CreateEntityType_CreateEntityType struct {
	EntityType CreateEntityType_CreateEntityType_EntityType "json:\"entityType\" graphql:\"entityType\""
}

func (t *CreateEntityType_CreateEntityType) GetEntityType() *CreateEntityType_CreateEntityType_EntityType {
	if t == nil {
		t = &CreateEntityType_CreateEntityType{}
	}
	return &t.EntityType
}

type DeleteEntityType_DeleteEntityType struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteEntityType_DeleteEntityType) GetDeletedID() string {
	if t == nil {
		t = &DeleteEntityType_DeleteEntityType{}
	}
	return t.DeletedID
}

type GetAllEntityTypes_EntityTypes_Edges_Node struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	OwnerID   *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllEntityTypes_EntityTypes_Edges struct {
	Node *GetAllEntityTypes_EntityTypes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEntityTypes_EntityTypes_Edges) GetNode() *GetAllEntityTypes_EntityTypes_Edges_Node {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges{}
	}
	return t.Node
}

type GetAllEntityTypes_EntityTypes struct {
	Edges []*GetAllEntityTypes_EntityTypes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEntityTypes_EntityTypes) GetEdges() []*GetAllEntityTypes_EntityTypes_Edges {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes{}
	}
	return t.Edges
}

type GetEntityTypeByID_EntityType struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	OwnerID   *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntityTypeByID_EntityType) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.CreatedAt
}
func (t *GetEntityTypeByID_EntityType) GetCreatedBy() *string {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.CreatedBy
}
func (t *GetEntityTypeByID_EntityType) GetID() string {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.ID
}
func (t *GetEntityTypeByID_EntityType) GetName() string {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.Name
}
func (t *GetEntityTypeByID_EntityType) GetOwnerID() *string {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.OwnerID
}
func (t *GetEntityTypeByID_EntityType) GetTags() []string {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.Tags
}
func (t *GetEntityTypeByID_EntityType) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.UpdatedAt
}
func (t *GetEntityTypeByID_EntityType) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.UpdatedBy
}

type GetEntityTypes_EntityTypes_Edges_Node struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	OwnerID   *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntityTypes_EntityTypes_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetEntityTypes_EntityTypes_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetEntityTypes_EntityTypes_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.ID
}
func (t *GetEntityTypes_EntityTypes_Edges_Node) GetName() string {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.Name
}
func (t *GetEntityTypes_EntityTypes_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetEntityTypes_EntityTypes_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEntityTypes_EntityTypes_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEntityTypes_EntityTypes_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetEntityTypes_EntityTypes_Edges struct {
	Node *GetEntityTypes_EntityTypes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntityTypes_EntityTypes_Edges) GetNode() *GetEntityTypes_EntityTypes_Edges_Node {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges{}
	}
	return t.Node
}

type GetEntityTypes_EntityTypes struct {
	Edges []*GetEntityTypes_EntityTypes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEntityTypes_EntityTypes) GetEdges() []*GetEntityTypes_EntityTypes_Edges {
	if t == nil {
		t = &GetEntityTypes_EntityTypes{}
	}
	return t.Edges
}

type UpdateEntityType_UpdateEntityType_EntityType struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	OwnerID   *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateEntityType_UpdateEntityType_EntityType) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.CreatedAt
}
func (t *UpdateEntityType_UpdateEntityType_EntityType) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.CreatedBy
}
func (t *UpdateEntityType_UpdateEntityType_EntityType) GetID() string {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.ID
}
func (t *UpdateEntityType_UpdateEntityType_EntityType) GetName() string {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.Name
}
func (t *UpdateEntityType_UpdateEntityType_EntityType) GetOwnerID() *string {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.OwnerID
}
func (t *UpdateEntityType_UpdateEntityType_EntityType) GetTags() []string {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.Tags
}
func (t *UpdateEntityType_UpdateEntityType_EntityType) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.UpdatedAt
}
func (t *UpdateEntityType_UpdateEntityType_EntityType) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.UpdatedBy
}

type UpdateEntityType_UpdateEntityType struct {
	EntityType UpdateEntityType_UpdateEntityType_EntityType "json:\"entityType\" graphql:\"entityType\""
}

func (t *UpdateEntityType_UpdateEntityType) GetEntityType() *UpdateEntityType_UpdateEntityType_EntityType {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType{}
	}
	return &t.EntityType
}

type GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllEntityTypeHistories_EntityTypeHistories_Edges struct {
	Node *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges) GetNode() *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges{}
	}
	return t.Node
}

type GetAllEntityTypeHistories_EntityTypeHistories struct {
	Edges []*GetAllEntityTypeHistories_EntityTypeHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEntityTypeHistories_EntityTypeHistories) GetEdges() []*GetAllEntityTypeHistories_EntityTypeHistories_Edges {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories{}
	}
	return t.Edges
}

type GetEntityTypeHistories_EntityTypeHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetEntityTypeHistories_EntityTypeHistories_Edges struct {
	Node *GetEntityTypeHistories_EntityTypeHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntityTypeHistories_EntityTypeHistories_Edges) GetNode() *GetEntityTypeHistories_EntityTypeHistories_Edges_Node {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges{}
	}
	return t.Node
}

type GetEntityTypeHistories_EntityTypeHistories struct {
	Edges []*GetEntityTypeHistories_EntityTypeHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEntityTypeHistories_EntityTypeHistories) GetEdges() []*GetEntityTypeHistories_EntityTypeHistories_Edges {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories{}
	}
	return t.Edges
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Users_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Users_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Users_Edges_Node{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Users_Edges struct {
	Node *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Users_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Users_Edges) GetNode() *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Users_Edges_Node {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Users_Edges{}
	}
	return t.Node
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Users struct {
	Edges []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Users_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Users) GetEdges() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Users_Edges {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Users{}
	}
	return t.Edges
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groups_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groups_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groups_Edges_Node{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groups_Edges struct {
	Node *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groups_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groups_Edges) GetNode() *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groups_Edges_Node {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groups_Edges{}
	}
	return t.Node
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groups struct {
	Edges []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groups_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groups) GetEdges() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groups_Edges {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groups{}
	}
	return t.Edges
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integrations_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integrations_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integrations_Edges_Node{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integrations_Edges struct {
	Node *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integrations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integrations_Edges) GetNode() *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integrations_Edges_Node {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integrations_Edges{}
	}
	return t.Node
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integrations struct {
	Edges []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integrations) GetEdges() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integrations_Edges {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integrations{}
	}
	return t.Edges
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organizations_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organizations_Edges_Node{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organizations_Edges struct {
	Node *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organizations_Edges) GetNode() *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organizations_Edges_Node {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organizations_Edges{}
	}
	return t.Node
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organizations struct {
	Edges []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organizations) GetEdges() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organizations_Edges {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organizations{}
	}
	return t.Edges
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invites_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invites_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invites_Edges_Node{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invites_Edges struct {
	Node *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invites_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invites_Edges) GetNode() *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invites_Edges_Node {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invites_Edges{}
	}
	return t.Node
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invites struct {
	Edges []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invites_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invites) GetEdges() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invites_Edges {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invites{}
	}
	return t.Edges
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessTokens_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessTokens_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessTokens_Edges_Node{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessTokens_Edges struct {
	Node *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessTokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessTokens_Edges) GetNode() *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessTokens_Edges_Node {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessTokens_Edges{}
	}
	return t.Node
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessTokens struct {
	Edges []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessTokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessTokens) GetEdges() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessTokens_Edges {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessTokens{}
	}
	return t.Edges
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Secrets_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Secrets_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Secrets_Edges_Node{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Secrets_Edges struct {
	Node *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Secrets_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Secrets_Edges) GetNode() *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Secrets_Edges_Node {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Secrets_Edges{}
	}
	return t.Node
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Secrets struct {
	Edges []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Secrets_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Secrets) GetEdges() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Secrets_Edges {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Secrets{}
	}
	return t.Edges
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmemberships_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmemberships_Edges_Node{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmemberships_Edges struct {
	Node *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmemberships_Edges) GetNode() *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmemberships_Edges_Node {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmemberships_Edges{}
	}
	return t.Node
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmemberships struct {
	Edges []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmemberships) GetEdges() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmemberships_Edges {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmemberships{}
	}
	return t.Edges
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmemberships_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmemberships_Edges_Node{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmemberships_Edges struct {
	Node *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmemberships_Edges) GetNode() *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmemberships_Edges_Node {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmemberships_Edges{}
	}
	return t.Node
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmemberships struct {
	Edges []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmemberships) GetEdges() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmemberships_Edges {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmemberships{}
	}
	return t.Edges
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events struct {
	CorrelationID        *string                                                           "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	EventID              *string                                                           "json:\"eventID,omitempty\" graphql:\"eventID\""
	EventType            string                                                            "json:\"eventType\" graphql:\"eventType\""
	Groupmemberships     CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmemberships     "json:\"groupmemberships\" graphql:\"groupmemberships\""
	Groups               CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groups               "json:\"groups\" graphql:\"groups\""
	ID                   string                                                            "json:\"id\" graphql:\"id\""
	Integrations         CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integrations         "json:\"integrations\" graphql:\"integrations\""
	Invites              CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invites              "json:\"invites\" graphql:\"invites\""
	Metadata             map[string]any                                                    "json:\"metadata,omitempty\" graphql:\"metadata\""
	Organizations        CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organizations        "json:\"organizations\" graphql:\"organizations\""
	Orgmemberships       CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmemberships       "json:\"orgmemberships\" graphql:\"orgmemberships\""
	PersonalAccessTokens CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessTokens "json:\"personalAccessTokens\" graphql:\"personalAccessTokens\""
	Secrets              CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Secrets              "json:\"secrets\" graphql:\"secrets\""
	Users                CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Users                "json:\"users\" graphql:\"users\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetCorrelationID() *string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.CorrelationID
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetEventID() *string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.EventID
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetEventType() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.EventType
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetGroupmemberships() *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmemberships {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return &t.Groupmemberships
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetGroups() *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groups {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return &t.Groups
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.ID
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetIntegrations() *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integrations {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return &t.Integrations
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetInvites() *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invites {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return &t.Invites
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetMetadata() map[string]any {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Metadata
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetOrganizations() *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organizations {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return &t.Organizations
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetOrgmemberships() *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmemberships {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return &t.Orgmemberships
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetPersonalAccessTokens() *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessTokens {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return &t.PersonalAccessTokens
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetSecrets() *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Secrets {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return &t.Secrets
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetUsers() *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Users {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return &t.Users
}

type CreateBulkCSVEvent_CreateBulkCSVEvent struct {
	Events []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events "json:\"events,omitempty\" graphql:\"events\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent) GetEvents() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent{}
	}
	return t.Events
}

type CreateBulkEvent_CreateBulkEvent_Events_Users_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Users_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Users_Edges_Node{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Users_Edges struct {
	Node *CreateBulkEvent_CreateBulkEvent_Events_Users_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Users_Edges) GetNode() *CreateBulkEvent_CreateBulkEvent_Events_Users_Edges_Node {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Users_Edges{}
	}
	return t.Node
}

type CreateBulkEvent_CreateBulkEvent_Events_Users struct {
	Edges []*CreateBulkEvent_CreateBulkEvent_Events_Users_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Users) GetEdges() []*CreateBulkEvent_CreateBulkEvent_Events_Users_Edges {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Users{}
	}
	return t.Edges
}

type CreateBulkEvent_CreateBulkEvent_Events_Groups_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Groups_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Groups_Edges_Node{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Groups_Edges struct {
	Node *CreateBulkEvent_CreateBulkEvent_Events_Groups_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Groups_Edges) GetNode() *CreateBulkEvent_CreateBulkEvent_Events_Groups_Edges_Node {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Groups_Edges{}
	}
	return t.Node
}

type CreateBulkEvent_CreateBulkEvent_Events_Groups struct {
	Edges []*CreateBulkEvent_CreateBulkEvent_Events_Groups_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Groups) GetEdges() []*CreateBulkEvent_CreateBulkEvent_Events_Groups_Edges {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Groups{}
	}
	return t.Edges
}

type CreateBulkEvent_CreateBulkEvent_Events_Integrations_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Integrations_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Integrations_Edges_Node{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Integrations_Edges struct {
	Node *CreateBulkEvent_CreateBulkEvent_Events_Integrations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Integrations_Edges) GetNode() *CreateBulkEvent_CreateBulkEvent_Events_Integrations_Edges_Node {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Integrations_Edges{}
	}
	return t.Node
}

type CreateBulkEvent_CreateBulkEvent_Events_Integrations struct {
	Edges []*CreateBulkEvent_CreateBulkEvent_Events_Integrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Integrations) GetEdges() []*CreateBulkEvent_CreateBulkEvent_Events_Integrations_Edges {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Integrations{}
	}
	return t.Edges
}

type CreateBulkEvent_CreateBulkEvent_Events_Organizations_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Organizations_Edges_Node{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Organizations_Edges struct {
	Node *CreateBulkEvent_CreateBulkEvent_Events_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Organizations_Edges) GetNode() *CreateBulkEvent_CreateBulkEvent_Events_Organizations_Edges_Node {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Organizations_Edges{}
	}
	return t.Node
}

type CreateBulkEvent_CreateBulkEvent_Events_Organizations struct {
	Edges []*CreateBulkEvent_CreateBulkEvent_Events_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Organizations) GetEdges() []*CreateBulkEvent_CreateBulkEvent_Events_Organizations_Edges {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Organizations{}
	}
	return t.Edges
}

type CreateBulkEvent_CreateBulkEvent_Events_Invites_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Invites_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Invites_Edges_Node{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Invites_Edges struct {
	Node *CreateBulkEvent_CreateBulkEvent_Events_Invites_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Invites_Edges) GetNode() *CreateBulkEvent_CreateBulkEvent_Events_Invites_Edges_Node {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Invites_Edges{}
	}
	return t.Node
}

type CreateBulkEvent_CreateBulkEvent_Events_Invites struct {
	Edges []*CreateBulkEvent_CreateBulkEvent_Events_Invites_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Invites) GetEdges() []*CreateBulkEvent_CreateBulkEvent_Events_Invites_Edges {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Invites{}
	}
	return t.Edges
}

type CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessTokens_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessTokens_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessTokens_Edges_Node{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessTokens_Edges struct {
	Node *CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessTokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessTokens_Edges) GetNode() *CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessTokens_Edges_Node {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessTokens_Edges{}
	}
	return t.Node
}

type CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessTokens struct {
	Edges []*CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessTokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessTokens) GetEdges() []*CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessTokens_Edges {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessTokens{}
	}
	return t.Edges
}

type CreateBulkEvent_CreateBulkEvent_Events_Secrets_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Secrets_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Secrets_Edges_Node{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Secrets_Edges struct {
	Node *CreateBulkEvent_CreateBulkEvent_Events_Secrets_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Secrets_Edges) GetNode() *CreateBulkEvent_CreateBulkEvent_Events_Secrets_Edges_Node {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Secrets_Edges{}
	}
	return t.Node
}

type CreateBulkEvent_CreateBulkEvent_Events_Secrets struct {
	Edges []*CreateBulkEvent_CreateBulkEvent_Events_Secrets_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Secrets) GetEdges() []*CreateBulkEvent_CreateBulkEvent_Events_Secrets_Edges {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Secrets{}
	}
	return t.Edges
}

type CreateBulkEvent_CreateBulkEvent_Events_Orgmemberships_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Orgmemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Orgmemberships_Edges_Node{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Orgmemberships_Edges struct {
	Node *CreateBulkEvent_CreateBulkEvent_Events_Orgmemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Orgmemberships_Edges) GetNode() *CreateBulkEvent_CreateBulkEvent_Events_Orgmemberships_Edges_Node {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Orgmemberships_Edges{}
	}
	return t.Node
}

type CreateBulkEvent_CreateBulkEvent_Events_Orgmemberships struct {
	Edges []*CreateBulkEvent_CreateBulkEvent_Events_Orgmemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Orgmemberships) GetEdges() []*CreateBulkEvent_CreateBulkEvent_Events_Orgmemberships_Edges {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Orgmemberships{}
	}
	return t.Edges
}

type CreateBulkEvent_CreateBulkEvent_Events_Groupmemberships_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Groupmemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Groupmemberships_Edges_Node{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Groupmemberships_Edges struct {
	Node *CreateBulkEvent_CreateBulkEvent_Events_Groupmemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Groupmemberships_Edges) GetNode() *CreateBulkEvent_CreateBulkEvent_Events_Groupmemberships_Edges_Node {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Groupmemberships_Edges{}
	}
	return t.Node
}

type CreateBulkEvent_CreateBulkEvent_Events_Groupmemberships struct {
	Edges []*CreateBulkEvent_CreateBulkEvent_Events_Groupmemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Groupmemberships) GetEdges() []*CreateBulkEvent_CreateBulkEvent_Events_Groupmemberships_Edges {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Groupmemberships{}
	}
	return t.Edges
}

type CreateBulkEvent_CreateBulkEvent_Events struct {
	CorrelationID        *string                                                     "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	EventID              *string                                                     "json:\"eventID,omitempty\" graphql:\"eventID\""
	EventType            string                                                      "json:\"eventType\" graphql:\"eventType\""
	Groupmemberships     CreateBulkEvent_CreateBulkEvent_Events_Groupmemberships     "json:\"groupmemberships\" graphql:\"groupmemberships\""
	Groups               CreateBulkEvent_CreateBulkEvent_Events_Groups               "json:\"groups\" graphql:\"groups\""
	ID                   string                                                      "json:\"id\" graphql:\"id\""
	Integrations         CreateBulkEvent_CreateBulkEvent_Events_Integrations         "json:\"integrations\" graphql:\"integrations\""
	Invites              CreateBulkEvent_CreateBulkEvent_Events_Invites              "json:\"invites\" graphql:\"invites\""
	Metadata             map[string]any                                              "json:\"metadata,omitempty\" graphql:\"metadata\""
	Organizations        CreateBulkEvent_CreateBulkEvent_Events_Organizations        "json:\"organizations\" graphql:\"organizations\""
	Orgmemberships       CreateBulkEvent_CreateBulkEvent_Events_Orgmemberships       "json:\"orgmemberships\" graphql:\"orgmemberships\""
	PersonalAccessTokens CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessTokens "json:\"personalAccessTokens\" graphql:\"personalAccessTokens\""
	Secrets              CreateBulkEvent_CreateBulkEvent_Events_Secrets              "json:\"secrets\" graphql:\"secrets\""
	Users                CreateBulkEvent_CreateBulkEvent_Events_Users                "json:\"users\" graphql:\"users\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events) GetCorrelationID() *string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.CorrelationID
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetEventID() *string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.EventID
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetEventType() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.EventType
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetGroupmemberships() *CreateBulkEvent_CreateBulkEvent_Events_Groupmemberships {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return &t.Groupmemberships
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetGroups() *CreateBulkEvent_CreateBulkEvent_Events_Groups {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return &t.Groups
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.ID
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetIntegrations() *CreateBulkEvent_CreateBulkEvent_Events_Integrations {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return &t.Integrations
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetInvites() *CreateBulkEvent_CreateBulkEvent_Events_Invites {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return &t.Invites
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetMetadata() map[string]any {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Metadata
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetOrganizations() *CreateBulkEvent_CreateBulkEvent_Events_Organizations {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return &t.Organizations
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetOrgmemberships() *CreateBulkEvent_CreateBulkEvent_Events_Orgmemberships {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return &t.Orgmemberships
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetPersonalAccessTokens() *CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessTokens {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return &t.PersonalAccessTokens
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetSecrets() *CreateBulkEvent_CreateBulkEvent_Events_Secrets {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return &t.Secrets
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetUsers() *CreateBulkEvent_CreateBulkEvent_Events_Users {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return &t.Users
}

type CreateBulkEvent_CreateBulkEvent struct {
	Events []*CreateBulkEvent_CreateBulkEvent_Events "json:\"events,omitempty\" graphql:\"events\""
}

func (t *CreateBulkEvent_CreateBulkEvent) GetEvents() []*CreateBulkEvent_CreateBulkEvent_Events {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent{}
	}
	return t.Events
}

type CreateEvent_CreateEvent_Event struct {
	CorrelationID *string        "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	EventID       *string        "json:\"eventID,omitempty\" graphql:\"eventID\""
	EventType     string         "json:\"eventType\" graphql:\"eventType\""
	ID            string         "json:\"id\" graphql:\"id\""
	Metadata      map[string]any "json:\"metadata,omitempty\" graphql:\"metadata\""
}

func (t *CreateEvent_CreateEvent_Event) GetCorrelationID() *string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.CorrelationID
}
func (t *CreateEvent_CreateEvent_Event) GetEventID() *string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.EventID
}
func (t *CreateEvent_CreateEvent_Event) GetEventType() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.EventType
}
func (t *CreateEvent_CreateEvent_Event) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.ID
}
func (t *CreateEvent_CreateEvent_Event) GetMetadata() map[string]any {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Metadata
}

type CreateEvent_CreateEvent struct {
	Event CreateEvent_CreateEvent_Event "json:\"event\" graphql:\"event\""
}

func (t *CreateEvent_CreateEvent) GetEvent() *CreateEvent_CreateEvent_Event {
	if t == nil {
		t = &CreateEvent_CreateEvent{}
	}
	return &t.Event
}

type DeleteEvent_DeleteEvent struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteEvent_DeleteEvent) GetDeletedID() string {
	if t == nil {
		t = &DeleteEvent_DeleteEvent{}
	}
	return t.DeletedID
}

type GetAllEvents_Events_Edges_Node_Users_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Users_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Users_Edges_Node{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Users_Edges struct {
	Node *GetAllEvents_Events_Edges_Node_Users_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvents_Events_Edges_Node_Users_Edges) GetNode() *GetAllEvents_Events_Edges_Node_Users_Edges_Node {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Users_Edges{}
	}
	return t.Node
}

type GetAllEvents_Events_Edges_Node_Users struct {
	Edges []*GetAllEvents_Events_Edges_Node_Users_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEvents_Events_Edges_Node_Users) GetEdges() []*GetAllEvents_Events_Edges_Node_Users_Edges {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Users{}
	}
	return t.Edges
}

type GetAllEvents_Events_Edges_Node_Groups_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Groups_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Groups_Edges_Node{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Groups_Edges struct {
	Node *GetAllEvents_Events_Edges_Node_Groups_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvents_Events_Edges_Node_Groups_Edges) GetNode() *GetAllEvents_Events_Edges_Node_Groups_Edges_Node {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Groups_Edges{}
	}
	return t.Node
}

type GetAllEvents_Events_Edges_Node_Groups struct {
	Edges []*GetAllEvents_Events_Edges_Node_Groups_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEvents_Events_Edges_Node_Groups) GetEdges() []*GetAllEvents_Events_Edges_Node_Groups_Edges {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Groups{}
	}
	return t.Edges
}

type GetAllEvents_Events_Edges_Node_Integrations_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Integrations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Integrations_Edges_Node{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Integrations_Edges struct {
	Node *GetAllEvents_Events_Edges_Node_Integrations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvents_Events_Edges_Node_Integrations_Edges) GetNode() *GetAllEvents_Events_Edges_Node_Integrations_Edges_Node {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Integrations_Edges{}
	}
	return t.Node
}

type GetAllEvents_Events_Edges_Node_Integrations struct {
	Edges []*GetAllEvents_Events_Edges_Node_Integrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEvents_Events_Edges_Node_Integrations) GetEdges() []*GetAllEvents_Events_Edges_Node_Integrations_Edges {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Integrations{}
	}
	return t.Edges
}

type GetAllEvents_Events_Edges_Node_Organizations_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Organizations_Edges_Node{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Organizations_Edges struct {
	Node *GetAllEvents_Events_Edges_Node_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvents_Events_Edges_Node_Organizations_Edges) GetNode() *GetAllEvents_Events_Edges_Node_Organizations_Edges_Node {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Organizations_Edges{}
	}
	return t.Node
}

type GetAllEvents_Events_Edges_Node_Organizations struct {
	Edges []*GetAllEvents_Events_Edges_Node_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEvents_Events_Edges_Node_Organizations) GetEdges() []*GetAllEvents_Events_Edges_Node_Organizations_Edges {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Organizations{}
	}
	return t.Edges
}

type GetAllEvents_Events_Edges_Node_Invites_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Invites_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Invites_Edges_Node{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Invites_Edges struct {
	Node *GetAllEvents_Events_Edges_Node_Invites_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvents_Events_Edges_Node_Invites_Edges) GetNode() *GetAllEvents_Events_Edges_Node_Invites_Edges_Node {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Invites_Edges{}
	}
	return t.Node
}

type GetAllEvents_Events_Edges_Node_Invites struct {
	Edges []*GetAllEvents_Events_Edges_Node_Invites_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEvents_Events_Edges_Node_Invites) GetEdges() []*GetAllEvents_Events_Edges_Node_Invites_Edges {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Invites{}
	}
	return t.Edges
}

type GetAllEvents_Events_Edges_Node_PersonalAccessTokens_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_PersonalAccessTokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_PersonalAccessTokens_Edges_Node{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_PersonalAccessTokens_Edges struct {
	Node *GetAllEvents_Events_Edges_Node_PersonalAccessTokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvents_Events_Edges_Node_PersonalAccessTokens_Edges) GetNode() *GetAllEvents_Events_Edges_Node_PersonalAccessTokens_Edges_Node {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_PersonalAccessTokens_Edges{}
	}
	return t.Node
}

type GetAllEvents_Events_Edges_Node_PersonalAccessTokens struct {
	Edges []*GetAllEvents_Events_Edges_Node_PersonalAccessTokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEvents_Events_Edges_Node_PersonalAccessTokens) GetEdges() []*GetAllEvents_Events_Edges_Node_PersonalAccessTokens_Edges {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_PersonalAccessTokens{}
	}
	return t.Edges
}

type GetAllEvents_Events_Edges_Node_Secrets_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Secrets_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Secrets_Edges_Node{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Secrets_Edges struct {
	Node *GetAllEvents_Events_Edges_Node_Secrets_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvents_Events_Edges_Node_Secrets_Edges) GetNode() *GetAllEvents_Events_Edges_Node_Secrets_Edges_Node {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Secrets_Edges{}
	}
	return t.Node
}

type GetAllEvents_Events_Edges_Node_Secrets struct {
	Edges []*GetAllEvents_Events_Edges_Node_Secrets_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEvents_Events_Edges_Node_Secrets) GetEdges() []*GetAllEvents_Events_Edges_Node_Secrets_Edges {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Secrets{}
	}
	return t.Edges
}

type GetAllEvents_Events_Edges_Node_Orgmemberships_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Orgmemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Orgmemberships_Edges_Node{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Orgmemberships_Edges struct {
	Node *GetAllEvents_Events_Edges_Node_Orgmemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvents_Events_Edges_Node_Orgmemberships_Edges) GetNode() *GetAllEvents_Events_Edges_Node_Orgmemberships_Edges_Node {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Orgmemberships_Edges{}
	}
	return t.Node
}

type GetAllEvents_Events_Edges_Node_Orgmemberships struct {
	Edges []*GetAllEvents_Events_Edges_Node_Orgmemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEvents_Events_Edges_Node_Orgmemberships) GetEdges() []*GetAllEvents_Events_Edges_Node_Orgmemberships_Edges {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Orgmemberships{}
	}
	return t.Edges
}

type GetAllEvents_Events_Edges_Node_Groupmemberships_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Groupmemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Groupmemberships_Edges_Node{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Groupmemberships_Edges struct {
	Node *GetAllEvents_Events_Edges_Node_Groupmemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvents_Events_Edges_Node_Groupmemberships_Edges) GetNode() *GetAllEvents_Events_Edges_Node_Groupmemberships_Edges_Node {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Groupmemberships_Edges{}
	}
	return t.Node
}

type GetAllEvents_Events_Edges_Node_Groupmemberships struct {
	Edges []*GetAllEvents_Events_Edges_Node_Groupmemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEvents_Events_Edges_Node_Groupmemberships) GetEdges() []*GetAllEvents_Events_Edges_Node_Groupmemberships_Edges {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Groupmemberships{}
	}
	return t.Edges
}

type GetAllEvents_Events_Edges_Node struct {
	CorrelationID        *string                                             "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	CreatedAt            *time.Time                                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EventID              *string                                             "json:\"eventID,omitempty\" graphql:\"eventID\""
	EventType            string                                              "json:\"eventType\" graphql:\"eventType\""
	Groupmemberships     GetAllEvents_Events_Edges_Node_Groupmemberships     "json:\"groupmemberships\" graphql:\"groupmemberships\""
	Groups               GetAllEvents_Events_Edges_Node_Groups               "json:\"groups\" graphql:\"groups\""
	ID                   string                                              "json:\"id\" graphql:\"id\""
	Integrations         GetAllEvents_Events_Edges_Node_Integrations         "json:\"integrations\" graphql:\"integrations\""
	Invites              GetAllEvents_Events_Edges_Node_Invites              "json:\"invites\" graphql:\"invites\""
	Metadata             map[string]any                                      "json:\"metadata,omitempty\" graphql:\"metadata\""
	Organizations        GetAllEvents_Events_Edges_Node_Organizations        "json:\"organizations\" graphql:\"organizations\""
	Orgmemberships       GetAllEvents_Events_Edges_Node_Orgmemberships       "json:\"orgmemberships\" graphql:\"orgmemberships\""
	PersonalAccessTokens GetAllEvents_Events_Edges_Node_PersonalAccessTokens "json:\"personalAccessTokens\" graphql:\"personalAccessTokens\""
	Secrets              GetAllEvents_Events_Edges_Node_Secrets              "json:\"secrets\" graphql:\"secrets\""
	UpdatedAt            *time.Time                                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Users                GetAllEvents_Events_Edges_Node_Users                "json:\"users\" graphql:\"users\""
}

func (t *GetAllEvents_Events_Edges_Node) GetCorrelationID() *string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.CorrelationID
}
func (t *GetAllEvents_Events_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEvents_Events_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEvents_Events_Edges_Node) GetEventID() *string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.EventID
}
func (t *GetAllEvents_Events_Edges_Node) GetEventType() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.EventType
}
func (t *GetAllEvents_Events_Edges_Node) GetGroupmemberships() *GetAllEvents_Events_Edges_Node_Groupmemberships {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return &t.Groupmemberships
}
func (t *GetAllEvents_Events_Edges_Node) GetGroups() *GetAllEvents_Events_Edges_Node_Groups {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return &t.Groups
}
func (t *GetAllEvents_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEvents_Events_Edges_Node) GetIntegrations() *GetAllEvents_Events_Edges_Node_Integrations {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return &t.Integrations
}
func (t *GetAllEvents_Events_Edges_Node) GetInvites() *GetAllEvents_Events_Edges_Node_Invites {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return &t.Invites
}
func (t *GetAllEvents_Events_Edges_Node) GetMetadata() map[string]any {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetAllEvents_Events_Edges_Node) GetOrganizations() *GetAllEvents_Events_Edges_Node_Organizations {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return &t.Organizations
}
func (t *GetAllEvents_Events_Edges_Node) GetOrgmemberships() *GetAllEvents_Events_Edges_Node_Orgmemberships {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return &t.Orgmemberships
}
func (t *GetAllEvents_Events_Edges_Node) GetPersonalAccessTokens() *GetAllEvents_Events_Edges_Node_PersonalAccessTokens {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return &t.PersonalAccessTokens
}
func (t *GetAllEvents_Events_Edges_Node) GetSecrets() *GetAllEvents_Events_Edges_Node_Secrets {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return &t.Secrets
}
func (t *GetAllEvents_Events_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEvents_Events_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllEvents_Events_Edges_Node) GetUsers() *GetAllEvents_Events_Edges_Node_Users {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return &t.Users
}

type GetAllEvents_Events_Edges struct {
	Node *GetAllEvents_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvents_Events_Edges) GetNode() *GetAllEvents_Events_Edges_Node {
	if t == nil {
		t = &GetAllEvents_Events_Edges{}
	}
	return t.Node
}

type GetAllEvents_Events struct {
	Edges []*GetAllEvents_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEvents_Events) GetEdges() []*GetAllEvents_Events_Edges {
	if t == nil {
		t = &GetAllEvents_Events{}
	}
	return t.Edges
}

type GetEventByID_Event_Users_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Users_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Users_Edges_Node{}
	}
	return t.ID
}

type GetEventByID_Event_Users_Edges struct {
	Node *GetEventByID_Event_Users_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEventByID_Event_Users_Edges) GetNode() *GetEventByID_Event_Users_Edges_Node {
	if t == nil {
		t = &GetEventByID_Event_Users_Edges{}
	}
	return t.Node
}

type GetEventByID_Event_Users struct {
	Edges []*GetEventByID_Event_Users_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEventByID_Event_Users) GetEdges() []*GetEventByID_Event_Users_Edges {
	if t == nil {
		t = &GetEventByID_Event_Users{}
	}
	return t.Edges
}

type GetEventByID_Event_Groups_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Groups_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Groups_Edges_Node{}
	}
	return t.ID
}

type GetEventByID_Event_Groups_Edges struct {
	Node *GetEventByID_Event_Groups_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEventByID_Event_Groups_Edges) GetNode() *GetEventByID_Event_Groups_Edges_Node {
	if t == nil {
		t = &GetEventByID_Event_Groups_Edges{}
	}
	return t.Node
}

type GetEventByID_Event_Groups struct {
	Edges []*GetEventByID_Event_Groups_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEventByID_Event_Groups) GetEdges() []*GetEventByID_Event_Groups_Edges {
	if t == nil {
		t = &GetEventByID_Event_Groups{}
	}
	return t.Edges
}

type GetEventByID_Event_Integrations_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Integrations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Integrations_Edges_Node{}
	}
	return t.ID
}

type GetEventByID_Event_Integrations_Edges struct {
	Node *GetEventByID_Event_Integrations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEventByID_Event_Integrations_Edges) GetNode() *GetEventByID_Event_Integrations_Edges_Node {
	if t == nil {
		t = &GetEventByID_Event_Integrations_Edges{}
	}
	return t.Node
}

type GetEventByID_Event_Integrations struct {
	Edges []*GetEventByID_Event_Integrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEventByID_Event_Integrations) GetEdges() []*GetEventByID_Event_Integrations_Edges {
	if t == nil {
		t = &GetEventByID_Event_Integrations{}
	}
	return t.Edges
}

type GetEventByID_Event_Organizations_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Organizations_Edges_Node{}
	}
	return t.ID
}

type GetEventByID_Event_Organizations_Edges struct {
	Node *GetEventByID_Event_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEventByID_Event_Organizations_Edges) GetNode() *GetEventByID_Event_Organizations_Edges_Node {
	if t == nil {
		t = &GetEventByID_Event_Organizations_Edges{}
	}
	return t.Node
}

type GetEventByID_Event_Organizations struct {
	Edges []*GetEventByID_Event_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEventByID_Event_Organizations) GetEdges() []*GetEventByID_Event_Organizations_Edges {
	if t == nil {
		t = &GetEventByID_Event_Organizations{}
	}
	return t.Edges
}

type GetEventByID_Event_Invites_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Invites_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Invites_Edges_Node{}
	}
	return t.ID
}

type GetEventByID_Event_Invites_Edges struct {
	Node *GetEventByID_Event_Invites_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEventByID_Event_Invites_Edges) GetNode() *GetEventByID_Event_Invites_Edges_Node {
	if t == nil {
		t = &GetEventByID_Event_Invites_Edges{}
	}
	return t.Node
}

type GetEventByID_Event_Invites struct {
	Edges []*GetEventByID_Event_Invites_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEventByID_Event_Invites) GetEdges() []*GetEventByID_Event_Invites_Edges {
	if t == nil {
		t = &GetEventByID_Event_Invites{}
	}
	return t.Edges
}

type GetEventByID_Event_PersonalAccessTokens_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_PersonalAccessTokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_PersonalAccessTokens_Edges_Node{}
	}
	return t.ID
}

type GetEventByID_Event_PersonalAccessTokens_Edges struct {
	Node *GetEventByID_Event_PersonalAccessTokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEventByID_Event_PersonalAccessTokens_Edges) GetNode() *GetEventByID_Event_PersonalAccessTokens_Edges_Node {
	if t == nil {
		t = &GetEventByID_Event_PersonalAccessTokens_Edges{}
	}
	return t.Node
}

type GetEventByID_Event_PersonalAccessTokens struct {
	Edges []*GetEventByID_Event_PersonalAccessTokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEventByID_Event_PersonalAccessTokens) GetEdges() []*GetEventByID_Event_PersonalAccessTokens_Edges {
	if t == nil {
		t = &GetEventByID_Event_PersonalAccessTokens{}
	}
	return t.Edges
}

type GetEventByID_Event_Secrets_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Secrets_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Secrets_Edges_Node{}
	}
	return t.ID
}

type GetEventByID_Event_Secrets_Edges struct {
	Node *GetEventByID_Event_Secrets_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEventByID_Event_Secrets_Edges) GetNode() *GetEventByID_Event_Secrets_Edges_Node {
	if t == nil {
		t = &GetEventByID_Event_Secrets_Edges{}
	}
	return t.Node
}

type GetEventByID_Event_Secrets struct {
	Edges []*GetEventByID_Event_Secrets_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEventByID_Event_Secrets) GetEdges() []*GetEventByID_Event_Secrets_Edges {
	if t == nil {
		t = &GetEventByID_Event_Secrets{}
	}
	return t.Edges
}

type GetEventByID_Event_Orgmemberships_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Orgmemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Orgmemberships_Edges_Node{}
	}
	return t.ID
}

type GetEventByID_Event_Orgmemberships_Edges struct {
	Node *GetEventByID_Event_Orgmemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEventByID_Event_Orgmemberships_Edges) GetNode() *GetEventByID_Event_Orgmemberships_Edges_Node {
	if t == nil {
		t = &GetEventByID_Event_Orgmemberships_Edges{}
	}
	return t.Node
}

type GetEventByID_Event_Orgmemberships struct {
	Edges []*GetEventByID_Event_Orgmemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEventByID_Event_Orgmemberships) GetEdges() []*GetEventByID_Event_Orgmemberships_Edges {
	if t == nil {
		t = &GetEventByID_Event_Orgmemberships{}
	}
	return t.Edges
}

type GetEventByID_Event_Groupmemberships_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Groupmemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Groupmemberships_Edges_Node{}
	}
	return t.ID
}

type GetEventByID_Event_Groupmemberships_Edges struct {
	Node *GetEventByID_Event_Groupmemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEventByID_Event_Groupmemberships_Edges) GetNode() *GetEventByID_Event_Groupmemberships_Edges_Node {
	if t == nil {
		t = &GetEventByID_Event_Groupmemberships_Edges{}
	}
	return t.Node
}

type GetEventByID_Event_Groupmemberships struct {
	Edges []*GetEventByID_Event_Groupmemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEventByID_Event_Groupmemberships) GetEdges() []*GetEventByID_Event_Groupmemberships_Edges {
	if t == nil {
		t = &GetEventByID_Event_Groupmemberships{}
	}
	return t.Edges
}

type GetEventByID_Event struct {
	CorrelationID        *string                                 "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	CreatedAt            *time.Time                              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EventID              *string                                 "json:\"eventID,omitempty\" graphql:\"eventID\""
	EventType            string                                  "json:\"eventType\" graphql:\"eventType\""
	Groupmemberships     GetEventByID_Event_Groupmemberships     "json:\"groupmemberships\" graphql:\"groupmemberships\""
	Groups               GetEventByID_Event_Groups               "json:\"groups\" graphql:\"groups\""
	ID                   string                                  "json:\"id\" graphql:\"id\""
	Integrations         GetEventByID_Event_Integrations         "json:\"integrations\" graphql:\"integrations\""
	Invites              GetEventByID_Event_Invites              "json:\"invites\" graphql:\"invites\""
	Metadata             map[string]any                          "json:\"metadata,omitempty\" graphql:\"metadata\""
	Organizations        GetEventByID_Event_Organizations        "json:\"organizations\" graphql:\"organizations\""
	Orgmemberships       GetEventByID_Event_Orgmemberships       "json:\"orgmemberships\" graphql:\"orgmemberships\""
	PersonalAccessTokens GetEventByID_Event_PersonalAccessTokens "json:\"personalAccessTokens\" graphql:\"personalAccessTokens\""
	Secrets              GetEventByID_Event_Secrets              "json:\"secrets\" graphql:\"secrets\""
	UpdatedAt            *time.Time                              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Users                GetEventByID_Event_Users                "json:\"users\" graphql:\"users\""
}

func (t *GetEventByID_Event) GetCorrelationID() *string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.CorrelationID
}
func (t *GetEventByID_Event) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.CreatedAt
}
func (t *GetEventByID_Event) GetCreatedBy() *string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.CreatedBy
}
func (t *GetEventByID_Event) GetEventID() *string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.EventID
}
func (t *GetEventByID_Event) GetEventType() string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.EventType
}
func (t *GetEventByID_Event) GetGroupmemberships() *GetEventByID_Event_Groupmemberships {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return &t.Groupmemberships
}
func (t *GetEventByID_Event) GetGroups() *GetEventByID_Event_Groups {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return &t.Groups
}
func (t *GetEventByID_Event) GetID() string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.ID
}
func (t *GetEventByID_Event) GetIntegrations() *GetEventByID_Event_Integrations {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return &t.Integrations
}
func (t *GetEventByID_Event) GetInvites() *GetEventByID_Event_Invites {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return &t.Invites
}
func (t *GetEventByID_Event) GetMetadata() map[string]any {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Metadata
}
func (t *GetEventByID_Event) GetOrganizations() *GetEventByID_Event_Organizations {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return &t.Organizations
}
func (t *GetEventByID_Event) GetOrgmemberships() *GetEventByID_Event_Orgmemberships {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return &t.Orgmemberships
}
func (t *GetEventByID_Event) GetPersonalAccessTokens() *GetEventByID_Event_PersonalAccessTokens {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return &t.PersonalAccessTokens
}
func (t *GetEventByID_Event) GetSecrets() *GetEventByID_Event_Secrets {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return &t.Secrets
}
func (t *GetEventByID_Event) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.UpdatedAt
}
func (t *GetEventByID_Event) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.UpdatedBy
}
func (t *GetEventByID_Event) GetUsers() *GetEventByID_Event_Users {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return &t.Users
}

type GetEvents_Events_Edges_Node struct {
	CorrelationID *string        "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	EventID       *string        "json:\"eventID,omitempty\" graphql:\"eventID\""
	EventType     string         "json:\"eventType\" graphql:\"eventType\""
	ID            string         "json:\"id\" graphql:\"id\""
	Metadata      map[string]any "json:\"metadata,omitempty\" graphql:\"metadata\""
}

func (t *GetEvents_Events_Edges_Node) GetCorrelationID() *string {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.CorrelationID
}
func (t *GetEvents_Events_Edges_Node) GetEventID() *string {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.EventID
}
func (t *GetEvents_Events_Edges_Node) GetEventType() string {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.EventType
}
func (t *GetEvents_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.ID
}
func (t *GetEvents_Events_Edges_Node) GetMetadata() map[string]any {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.Metadata
}

type GetEvents_Events_Edges struct {
	Node *GetEvents_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvents_Events_Edges) GetNode() *GetEvents_Events_Edges_Node {
	if t == nil {
		t = &GetEvents_Events_Edges{}
	}
	return t.Node
}

type GetEvents_Events struct {
	Edges []*GetEvents_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEvents_Events) GetEdges() []*GetEvents_Events_Edges {
	if t == nil {
		t = &GetEvents_Events{}
	}
	return t.Edges
}

type UpdateEvent_UpdateEvent_Event struct {
	CorrelationID *string        "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	CreatedAt     *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EventID       *string        "json:\"eventID,omitempty\" graphql:\"eventID\""
	EventType     string         "json:\"eventType\" graphql:\"eventType\""
	ID            string         "json:\"id\" graphql:\"id\""
	Metadata      map[string]any "json:\"metadata,omitempty\" graphql:\"metadata\""
	UpdatedAt     *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateEvent_UpdateEvent_Event) GetCorrelationID() *string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.CorrelationID
}
func (t *UpdateEvent_UpdateEvent_Event) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.CreatedAt
}
func (t *UpdateEvent_UpdateEvent_Event) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.CreatedBy
}
func (t *UpdateEvent_UpdateEvent_Event) GetEventID() *string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.EventID
}
func (t *UpdateEvent_UpdateEvent_Event) GetEventType() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.EventType
}
func (t *UpdateEvent_UpdateEvent_Event) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.ID
}
func (t *UpdateEvent_UpdateEvent_Event) GetMetadata() map[string]any {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Metadata
}
func (t *UpdateEvent_UpdateEvent_Event) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.UpdatedAt
}
func (t *UpdateEvent_UpdateEvent_Event) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.UpdatedBy
}

type UpdateEvent_UpdateEvent struct {
	Event UpdateEvent_UpdateEvent_Event "json:\"event\" graphql:\"event\""
}

func (t *UpdateEvent_UpdateEvent) GetEvent() *UpdateEvent_UpdateEvent_Event {
	if t == nil {
		t = &UpdateEvent_UpdateEvent{}
	}
	return &t.Event
}

type GetAllEventHistories_EventHistories_Edges_Node struct {
	CorrelationID *string        "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	CreatedAt     *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EventID       *string        "json:\"eventID,omitempty\" graphql:\"eventID\""
	EventType     string         "json:\"eventType\" graphql:\"eventType\""
	HistoryTime   time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID            string         "json:\"id\" graphql:\"id\""
	Metadata      map[string]any "json:\"metadata,omitempty\" graphql:\"metadata\""
	Operation     history.OpType "json:\"operation\" graphql:\"operation\""
	Ref           *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags          []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllEventHistories_EventHistories_Edges_Node) GetCorrelationID() *string {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return t.CorrelationID
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetEventID() *string {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return t.EventID
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetEventType() string {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return t.EventType
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetMetadata() map[string]any {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllEventHistories_EventHistories_Edges struct {
	Node *GetAllEventHistories_EventHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEventHistories_EventHistories_Edges) GetNode() *GetAllEventHistories_EventHistories_Edges_Node {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges{}
	}
	return t.Node
}

type GetAllEventHistories_EventHistories struct {
	Edges []*GetAllEventHistories_EventHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEventHistories_EventHistories) GetEdges() []*GetAllEventHistories_EventHistories_Edges {
	if t == nil {
		t = &GetAllEventHistories_EventHistories{}
	}
	return t.Edges
}

type GetEventHistories_EventHistories_Edges_Node struct {
	CorrelationID *string        "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	CreatedAt     *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EventID       *string        "json:\"eventID,omitempty\" graphql:\"eventID\""
	EventType     string         "json:\"eventType\" graphql:\"eventType\""
	HistoryTime   time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID            string         "json:\"id\" graphql:\"id\""
	Metadata      map[string]any "json:\"metadata,omitempty\" graphql:\"metadata\""
	Operation     history.OpType "json:\"operation\" graphql:\"operation\""
	Ref           *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags          []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEventHistories_EventHistories_Edges_Node) GetCorrelationID() *string {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return t.CorrelationID
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetEventID() *string {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return t.EventID
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetEventType() string {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return t.EventType
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetMetadata() map[string]any {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetEventHistories_EventHistories_Edges struct {
	Node *GetEventHistories_EventHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEventHistories_EventHistories_Edges) GetNode() *GetEventHistories_EventHistories_Edges_Node {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges{}
	}
	return t.Node
}

type GetEventHistories_EventHistories struct {
	Edges []*GetEventHistories_EventHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEventHistories_EventHistories) GetEdges() []*GetEventHistories_EventHistories_Edges {
	if t == nil {
		t = &GetEventHistories_EventHistories{}
	}
	return t.Edges
}

type CreateEvidence_CreateEvidence_Evidence_Files_Edges_Node struct {
	ID           string  "json:\"id\" graphql:\"id\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Files_Edges_Node{}
	}
	return t.ID
}
func (t *CreateEvidence_CreateEvidence_Evidence_Files_Edges_Node) GetPresignedURL() *string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Files_Edges_Node{}
	}
	return t.PresignedURL
}

type CreateEvidence_CreateEvidence_Evidence_Files_Edges struct {
	Node *CreateEvidence_CreateEvidence_Evidence_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_Files_Edges) GetNode() *CreateEvidence_CreateEvidence_Evidence_Files_Edges_Node {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Files_Edges{}
	}
	return t.Node
}

type CreateEvidence_CreateEvidence_Evidence_Files struct {
	Edges []*CreateEvidence_CreateEvidence_Evidence_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_Files) GetEdges() []*CreateEvidence_CreateEvidence_Evidence_Files_Edges {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Files{}
	}
	return t.Edges
}

type CreateEvidence_CreateEvidence_Evidence_Programs_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *CreateEvidence_CreateEvidence_Evidence_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *CreateEvidence_CreateEvidence_Evidence_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Programs_Edges_Node{}
	}
	return t.Name
}

type CreateEvidence_CreateEvidence_Evidence_Programs_Edges struct {
	Node *CreateEvidence_CreateEvidence_Evidence_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_Programs_Edges) GetNode() *CreateEvidence_CreateEvidence_Evidence_Programs_Edges_Node {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Programs_Edges{}
	}
	return t.Node
}

type CreateEvidence_CreateEvidence_Evidence_Programs struct {
	Edges []*CreateEvidence_CreateEvidence_Evidence_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_Programs) GetEdges() []*CreateEvidence_CreateEvidence_Evidence_Programs_Edges {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Programs{}
	}
	return t.Edges
}

type CreateEvidence_CreateEvidence_Evidence_Tasks_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_Tasks_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Tasks_Edges_Node{}
	}
	return t.DisplayID
}
func (t *CreateEvidence_CreateEvidence_Evidence_Tasks_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Tasks_Edges_Node{}
	}
	return t.ID
}

type CreateEvidence_CreateEvidence_Evidence_Tasks_Edges struct {
	Node *CreateEvidence_CreateEvidence_Evidence_Tasks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_Tasks_Edges) GetNode() *CreateEvidence_CreateEvidence_Evidence_Tasks_Edges_Node {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Tasks_Edges{}
	}
	return t.Node
}

type CreateEvidence_CreateEvidence_Evidence_Tasks struct {
	Edges []*CreateEvidence_CreateEvidence_Evidence_Tasks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_Tasks) GetEdges() []*CreateEvidence_CreateEvidence_Evidence_Tasks_Edges {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Tasks{}
	}
	return t.Edges
}

type CreateEvidence_CreateEvidence_Evidence_Controls_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	RefCode   string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_Controls_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Controls_Edges_Node{}
	}
	return t.DisplayID
}
func (t *CreateEvidence_CreateEvidence_Evidence_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *CreateEvidence_CreateEvidence_Evidence_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Controls_Edges_Node{}
	}
	return t.RefCode
}

type CreateEvidence_CreateEvidence_Evidence_Controls_Edges struct {
	Node *CreateEvidence_CreateEvidence_Evidence_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_Controls_Edges) GetNode() *CreateEvidence_CreateEvidence_Evidence_Controls_Edges_Node {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Controls_Edges{}
	}
	return t.Node
}

type CreateEvidence_CreateEvidence_Evidence_Controls struct {
	Edges []*CreateEvidence_CreateEvidence_Evidence_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_Controls) GetEdges() []*CreateEvidence_CreateEvidence_Evidence_Controls_Edges {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Controls{}
	}
	return t.Edges
}

type CreateEvidence_CreateEvidence_Evidence_Subcontrols_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	RefCode   string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_Subcontrols_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Subcontrols_Edges_Node{}
	}
	return t.DisplayID
}
func (t *CreateEvidence_CreateEvidence_Evidence_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *CreateEvidence_CreateEvidence_Evidence_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type CreateEvidence_CreateEvidence_Evidence_Subcontrols_Edges struct {
	Node *CreateEvidence_CreateEvidence_Evidence_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_Subcontrols_Edges) GetNode() *CreateEvidence_CreateEvidence_Evidence_Subcontrols_Edges_Node {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Subcontrols_Edges{}
	}
	return t.Node
}

type CreateEvidence_CreateEvidence_Evidence_Subcontrols struct {
	Edges []*CreateEvidence_CreateEvidence_Evidence_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_Subcontrols) GetEdges() []*CreateEvidence_CreateEvidence_Evidence_Subcontrols_Edges {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_Subcontrols{}
	}
	return t.Edges
}

type CreateEvidence_CreateEvidence_Evidence_ControlObjectives_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_ControlObjectives_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_ControlObjectives_Edges_Node{}
	}
	return t.DisplayID
}
func (t *CreateEvidence_CreateEvidence_Evidence_ControlObjectives_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_ControlObjectives_Edges_Node{}
	}
	return t.ID
}
func (t *CreateEvidence_CreateEvidence_Evidence_ControlObjectives_Edges_Node) GetName() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_ControlObjectives_Edges_Node{}
	}
	return t.Name
}

type CreateEvidence_CreateEvidence_Evidence_ControlObjectives_Edges struct {
	Node *CreateEvidence_CreateEvidence_Evidence_ControlObjectives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_ControlObjectives_Edges) GetNode() *CreateEvidence_CreateEvidence_Evidence_ControlObjectives_Edges_Node {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_ControlObjectives_Edges{}
	}
	return t.Node
}

type CreateEvidence_CreateEvidence_Evidence_ControlObjectives struct {
	Edges []*CreateEvidence_CreateEvidence_Evidence_ControlObjectives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateEvidence_CreateEvidence_Evidence_ControlObjectives) GetEdges() []*CreateEvidence_CreateEvidence_Evidence_ControlObjectives_Edges {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence_ControlObjectives{}
	}
	return t.Edges
}

type CreateEvidence_CreateEvidence_Evidence struct {
	CollectionProcedure *string                                                  "json:\"collectionProcedure,omitempty\" graphql:\"collectionProcedure\""
	ControlObjectives   CreateEvidence_CreateEvidence_Evidence_ControlObjectives "json:\"controlObjectives\" graphql:\"controlObjectives\""
	Controls            CreateEvidence_CreateEvidence_Evidence_Controls          "json:\"controls\" graphql:\"controls\""
	CreatedAt           *time.Time                                               "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string                                                  "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	CreationDate        time.Time                                                "json:\"creationDate\" graphql:\"creationDate\""
	Description         *string                                                  "json:\"description,omitempty\" graphql:\"description\""
	DisplayID           string                                                   "json:\"displayID\" graphql:\"displayID\""
	Files               CreateEvidence_CreateEvidence_Evidence_Files             "json:\"files\" graphql:\"files\""
	ID                  string                                                   "json:\"id\" graphql:\"id\""
	IsAutomated         *bool                                                    "json:\"isAutomated,omitempty\" graphql:\"isAutomated\""
	Name                string                                                   "json:\"name\" graphql:\"name\""
	OwnerID             *string                                                  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Programs            CreateEvidence_CreateEvidence_Evidence_Programs          "json:\"programs\" graphql:\"programs\""
	RenewalDate         *time.Time                                               "json:\"renewalDate,omitempty\" graphql:\"renewalDate\""
	Source              *string                                                  "json:\"source,omitempty\" graphql:\"source\""
	Status              *enums.EvidenceStatus                                    "json:\"status,omitempty\" graphql:\"status\""
	Subcontrols         CreateEvidence_CreateEvidence_Evidence_Subcontrols       "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags                []string                                                 "json:\"tags,omitempty\" graphql:\"tags\""
	Tasks               CreateEvidence_CreateEvidence_Evidence_Tasks             "json:\"tasks\" graphql:\"tasks\""
	UpdatedAt           *time.Time                                               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string                                                  "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URL                 *string                                                  "json:\"url,omitempty\" graphql:\"url\""
}

func (t *CreateEvidence_CreateEvidence_Evidence) GetCollectionProcedure() *string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.CollectionProcedure
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetControlObjectives() *CreateEvidence_CreateEvidence_Evidence_ControlObjectives {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return &t.ControlObjectives
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetControls() *CreateEvidence_CreateEvidence_Evidence_Controls {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return &t.Controls
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.CreatedAt
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetCreatedBy() *string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.CreatedBy
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetCreationDate() *time.Time {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return &t.CreationDate
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetDescription() *string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.Description
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetDisplayID() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.DisplayID
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetFiles() *CreateEvidence_CreateEvidence_Evidence_Files {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return &t.Files
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetID() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.ID
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetIsAutomated() *bool {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.IsAutomated
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetName() string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.Name
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetOwnerID() *string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.OwnerID
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetPrograms() *CreateEvidence_CreateEvidence_Evidence_Programs {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return &t.Programs
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetRenewalDate() *time.Time {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.RenewalDate
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetSource() *string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.Source
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetStatus() *enums.EvidenceStatus {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.Status
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetSubcontrols() *CreateEvidence_CreateEvidence_Evidence_Subcontrols {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return &t.Subcontrols
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetTags() []string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.Tags
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetTasks() *CreateEvidence_CreateEvidence_Evidence_Tasks {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return &t.Tasks
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.UpdatedAt
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.UpdatedBy
}
func (t *CreateEvidence_CreateEvidence_Evidence) GetURL() *string {
	if t == nil {
		t = &CreateEvidence_CreateEvidence_Evidence{}
	}
	return t.URL
}

type CreateEvidence_CreateEvidence struct {
	Evidence CreateEvidence_CreateEvidence_Evidence "json:\"evidence\" graphql:\"evidence\""
}

func (t *CreateEvidence_CreateEvidence) GetEvidence() *CreateEvidence_CreateEvidence_Evidence {
	if t == nil {
		t = &CreateEvidence_CreateEvidence{}
	}
	return &t.Evidence
}

type DeleteEvidence_DeleteEvidence struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteEvidence_DeleteEvidence) GetDeletedID() string {
	if t == nil {
		t = &DeleteEvidence_DeleteEvidence{}
	}
	return t.DeletedID
}

type GetAllEvidences_Evidences_Edges_Node_Files_Edges_Node struct {
	ID           string  "json:\"id\" graphql:\"id\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEvidences_Evidences_Edges_Node_Files_Edges_Node) GetPresignedURL() *string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Files_Edges_Node{}
	}
	return t.PresignedURL
}

type GetAllEvidences_Evidences_Edges_Node_Files_Edges struct {
	Node *GetAllEvidences_Evidences_Edges_Node_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_Files_Edges) GetNode() *GetAllEvidences_Evidences_Edges_Node_Files_Edges_Node {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Files_Edges{}
	}
	return t.Node
}

type GetAllEvidences_Evidences_Edges_Node_Files struct {
	Edges []*GetAllEvidences_Evidences_Edges_Node_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_Files) GetEdges() []*GetAllEvidences_Evidences_Edges_Node_Files_Edges {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Files{}
	}
	return t.Edges
}

type GetAllEvidences_Evidences_Edges_Node_Programs_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllEvidences_Evidences_Edges_Node_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEvidences_Evidences_Edges_Node_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Programs_Edges_Node{}
	}
	return t.Name
}

type GetAllEvidences_Evidences_Edges_Node_Programs_Edges struct {
	Node *GetAllEvidences_Evidences_Edges_Node_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_Programs_Edges) GetNode() *GetAllEvidences_Evidences_Edges_Node_Programs_Edges_Node {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Programs_Edges{}
	}
	return t.Node
}

type GetAllEvidences_Evidences_Edges_Node_Programs struct {
	Edges []*GetAllEvidences_Evidences_Edges_Node_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_Programs) GetEdges() []*GetAllEvidences_Evidences_Edges_Node_Programs_Edges {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Programs{}
	}
	return t.Edges
}

type GetAllEvidences_Evidences_Edges_Node_Tasks_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_Tasks_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Tasks_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllEvidences_Evidences_Edges_Node_Tasks_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Tasks_Edges_Node{}
	}
	return t.ID
}

type GetAllEvidences_Evidences_Edges_Node_Tasks_Edges struct {
	Node *GetAllEvidences_Evidences_Edges_Node_Tasks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_Tasks_Edges) GetNode() *GetAllEvidences_Evidences_Edges_Node_Tasks_Edges_Node {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Tasks_Edges{}
	}
	return t.Node
}

type GetAllEvidences_Evidences_Edges_Node_Tasks struct {
	Edges []*GetAllEvidences_Evidences_Edges_Node_Tasks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_Tasks) GetEdges() []*GetAllEvidences_Evidences_Edges_Node_Tasks_Edges {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Tasks{}
	}
	return t.Edges
}

type GetAllEvidences_Evidences_Edges_Node_Controls_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	RefCode   string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_Controls_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Controls_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllEvidences_Evidences_Edges_Node_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEvidences_Evidences_Edges_Node_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetAllEvidences_Evidences_Edges_Node_Controls_Edges struct {
	Node *GetAllEvidences_Evidences_Edges_Node_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_Controls_Edges) GetNode() *GetAllEvidences_Evidences_Edges_Node_Controls_Edges_Node {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Controls_Edges{}
	}
	return t.Node
}

type GetAllEvidences_Evidences_Edges_Node_Controls struct {
	Edges []*GetAllEvidences_Evidences_Edges_Node_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_Controls) GetEdges() []*GetAllEvidences_Evidences_Edges_Node_Controls_Edges {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Controls{}
	}
	return t.Edges
}

type GetAllEvidences_Evidences_Edges_Node_Subcontrols_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	RefCode   string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_Subcontrols_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Subcontrols_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllEvidences_Evidences_Edges_Node_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEvidences_Evidences_Edges_Node_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type GetAllEvidences_Evidences_Edges_Node_Subcontrols_Edges struct {
	Node *GetAllEvidences_Evidences_Edges_Node_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_Subcontrols_Edges) GetNode() *GetAllEvidences_Evidences_Edges_Node_Subcontrols_Edges_Node {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Subcontrols_Edges{}
	}
	return t.Node
}

type GetAllEvidences_Evidences_Edges_Node_Subcontrols struct {
	Edges []*GetAllEvidences_Evidences_Edges_Node_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_Subcontrols) GetEdges() []*GetAllEvidences_Evidences_Edges_Node_Subcontrols_Edges {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_Subcontrols{}
	}
	return t.Edges
}

type GetAllEvidences_Evidences_Edges_Node_ControlObjectives_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_ControlObjectives_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_ControlObjectives_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllEvidences_Evidences_Edges_Node_ControlObjectives_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_ControlObjectives_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEvidences_Evidences_Edges_Node_ControlObjectives_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_ControlObjectives_Edges_Node{}
	}
	return t.Name
}

type GetAllEvidences_Evidences_Edges_Node_ControlObjectives_Edges struct {
	Node *GetAllEvidences_Evidences_Edges_Node_ControlObjectives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_ControlObjectives_Edges) GetNode() *GetAllEvidences_Evidences_Edges_Node_ControlObjectives_Edges_Node {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_ControlObjectives_Edges{}
	}
	return t.Node
}

type GetAllEvidences_Evidences_Edges_Node_ControlObjectives struct {
	Edges []*GetAllEvidences_Evidences_Edges_Node_ControlObjectives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEvidences_Evidences_Edges_Node_ControlObjectives) GetEdges() []*GetAllEvidences_Evidences_Edges_Node_ControlObjectives_Edges {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node_ControlObjectives{}
	}
	return t.Edges
}

type GetAllEvidences_Evidences_Edges_Node struct {
	CollectionProcedure *string                                                "json:\"collectionProcedure,omitempty\" graphql:\"collectionProcedure\""
	ControlObjectives   GetAllEvidences_Evidences_Edges_Node_ControlObjectives "json:\"controlObjectives\" graphql:\"controlObjectives\""
	Controls            GetAllEvidences_Evidences_Edges_Node_Controls          "json:\"controls\" graphql:\"controls\""
	CreatedAt           *time.Time                                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string                                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	CreationDate        time.Time                                              "json:\"creationDate\" graphql:\"creationDate\""
	Description         *string                                                "json:\"description,omitempty\" graphql:\"description\""
	DisplayID           string                                                 "json:\"displayID\" graphql:\"displayID\""
	Files               GetAllEvidences_Evidences_Edges_Node_Files             "json:\"files\" graphql:\"files\""
	ID                  string                                                 "json:\"id\" graphql:\"id\""
	IsAutomated         *bool                                                  "json:\"isAutomated,omitempty\" graphql:\"isAutomated\""
	Name                string                                                 "json:\"name\" graphql:\"name\""
	OwnerID             *string                                                "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Programs            GetAllEvidences_Evidences_Edges_Node_Programs          "json:\"programs\" graphql:\"programs\""
	RenewalDate         *time.Time                                             "json:\"renewalDate,omitempty\" graphql:\"renewalDate\""
	Source              *string                                                "json:\"source,omitempty\" graphql:\"source\""
	Status              *enums.EvidenceStatus                                  "json:\"status,omitempty\" graphql:\"status\""
	Subcontrols         GetAllEvidences_Evidences_Edges_Node_Subcontrols       "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags                []string                                               "json:\"tags,omitempty\" graphql:\"tags\""
	Tasks               GetAllEvidences_Evidences_Edges_Node_Tasks             "json:\"tasks\" graphql:\"tasks\""
	UpdatedAt           *time.Time                                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string                                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URL                 *string                                                "json:\"url,omitempty\" graphql:\"url\""
}

func (t *GetAllEvidences_Evidences_Edges_Node) GetCollectionProcedure() *string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.CollectionProcedure
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetControlObjectives() *GetAllEvidences_Evidences_Edges_Node_ControlObjectives {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return &t.ControlObjectives
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetControls() *GetAllEvidences_Evidences_Edges_Node_Controls {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return &t.Controls
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetCreationDate() *time.Time {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return &t.CreationDate
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetFiles() *GetAllEvidences_Evidences_Edges_Node_Files {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return &t.Files
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetIsAutomated() *bool {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.IsAutomated
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetPrograms() *GetAllEvidences_Evidences_Edges_Node_Programs {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return &t.Programs
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetRenewalDate() *time.Time {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.RenewalDate
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetStatus() *enums.EvidenceStatus {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetSubcontrols() *GetAllEvidences_Evidences_Edges_Node_Subcontrols {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return &t.Subcontrols
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetTasks() *GetAllEvidences_Evidences_Edges_Node_Tasks {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return &t.Tasks
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllEvidences_Evidences_Edges_Node) GetURL() *string {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges_Node{}
	}
	return t.URL
}

type GetAllEvidences_Evidences_Edges struct {
	Node *GetAllEvidences_Evidences_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvidences_Evidences_Edges) GetNode() *GetAllEvidences_Evidences_Edges_Node {
	if t == nil {
		t = &GetAllEvidences_Evidences_Edges{}
	}
	return t.Node
}

type GetAllEvidences_Evidences struct {
	Edges []*GetAllEvidences_Evidences_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEvidences_Evidences) GetEdges() []*GetAllEvidences_Evidences_Edges {
	if t == nil {
		t = &GetAllEvidences_Evidences{}
	}
	return t.Edges
}

type GetEvidenceByID_Evidence_Files_Edges_Node struct {
	ID           string  "json:\"id\" graphql:\"id\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetEvidenceByID_Evidence_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GetEvidenceByID_Evidence_Files_Edges_Node) GetPresignedURL() *string {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Files_Edges_Node{}
	}
	return t.PresignedURL
}

type GetEvidenceByID_Evidence_Files_Edges struct {
	Node *GetEvidenceByID_Evidence_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvidenceByID_Evidence_Files_Edges) GetNode() *GetEvidenceByID_Evidence_Files_Edges_Node {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Files_Edges{}
	}
	return t.Node
}

type GetEvidenceByID_Evidence_Files struct {
	Edges []*GetEvidenceByID_Evidence_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEvidenceByID_Evidence_Files) GetEdges() []*GetEvidenceByID_Evidence_Files_Edges {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Files{}
	}
	return t.Edges
}

type GetEvidenceByID_Evidence_Programs_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *GetEvidenceByID_Evidence_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetEvidenceByID_Evidence_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GetEvidenceByID_Evidence_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Programs_Edges_Node{}
	}
	return t.Name
}

type GetEvidenceByID_Evidence_Programs_Edges struct {
	Node *GetEvidenceByID_Evidence_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvidenceByID_Evidence_Programs_Edges) GetNode() *GetEvidenceByID_Evidence_Programs_Edges_Node {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Programs_Edges{}
	}
	return t.Node
}

type GetEvidenceByID_Evidence_Programs struct {
	Edges []*GetEvidenceByID_Evidence_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEvidenceByID_Evidence_Programs) GetEdges() []*GetEvidenceByID_Evidence_Programs_Edges {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Programs{}
	}
	return t.Edges
}

type GetEvidenceByID_Evidence_Tasks_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
}

func (t *GetEvidenceByID_Evidence_Tasks_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Tasks_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetEvidenceByID_Evidence_Tasks_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Tasks_Edges_Node{}
	}
	return t.ID
}

type GetEvidenceByID_Evidence_Tasks_Edges struct {
	Node *GetEvidenceByID_Evidence_Tasks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvidenceByID_Evidence_Tasks_Edges) GetNode() *GetEvidenceByID_Evidence_Tasks_Edges_Node {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Tasks_Edges{}
	}
	return t.Node
}

type GetEvidenceByID_Evidence_Tasks struct {
	Edges []*GetEvidenceByID_Evidence_Tasks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEvidenceByID_Evidence_Tasks) GetEdges() []*GetEvidenceByID_Evidence_Tasks_Edges {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Tasks{}
	}
	return t.Edges
}

type GetEvidenceByID_Evidence_Controls_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	RefCode   string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetEvidenceByID_Evidence_Controls_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Controls_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetEvidenceByID_Evidence_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetEvidenceByID_Evidence_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetEvidenceByID_Evidence_Controls_Edges struct {
	Node *GetEvidenceByID_Evidence_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvidenceByID_Evidence_Controls_Edges) GetNode() *GetEvidenceByID_Evidence_Controls_Edges_Node {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Controls_Edges{}
	}
	return t.Node
}

type GetEvidenceByID_Evidence_Controls struct {
	Edges []*GetEvidenceByID_Evidence_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEvidenceByID_Evidence_Controls) GetEdges() []*GetEvidenceByID_Evidence_Controls_Edges {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Controls{}
	}
	return t.Edges
}

type GetEvidenceByID_Evidence_Subcontrols_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	RefCode   string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetEvidenceByID_Evidence_Subcontrols_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Subcontrols_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetEvidenceByID_Evidence_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GetEvidenceByID_Evidence_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type GetEvidenceByID_Evidence_Subcontrols_Edges struct {
	Node *GetEvidenceByID_Evidence_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvidenceByID_Evidence_Subcontrols_Edges) GetNode() *GetEvidenceByID_Evidence_Subcontrols_Edges_Node {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Subcontrols_Edges{}
	}
	return t.Node
}

type GetEvidenceByID_Evidence_Subcontrols struct {
	Edges []*GetEvidenceByID_Evidence_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEvidenceByID_Evidence_Subcontrols) GetEdges() []*GetEvidenceByID_Evidence_Subcontrols_Edges {
	if t == nil {
		t = &GetEvidenceByID_Evidence_Subcontrols{}
	}
	return t.Edges
}

type GetEvidenceByID_Evidence_ControlObjectives_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *GetEvidenceByID_Evidence_ControlObjectives_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence_ControlObjectives_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetEvidenceByID_Evidence_ControlObjectives_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence_ControlObjectives_Edges_Node{}
	}
	return t.ID
}
func (t *GetEvidenceByID_Evidence_ControlObjectives_Edges_Node) GetName() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence_ControlObjectives_Edges_Node{}
	}
	return t.Name
}

type GetEvidenceByID_Evidence_ControlObjectives_Edges struct {
	Node *GetEvidenceByID_Evidence_ControlObjectives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvidenceByID_Evidence_ControlObjectives_Edges) GetNode() *GetEvidenceByID_Evidence_ControlObjectives_Edges_Node {
	if t == nil {
		t = &GetEvidenceByID_Evidence_ControlObjectives_Edges{}
	}
	return t.Node
}

type GetEvidenceByID_Evidence_ControlObjectives struct {
	Edges []*GetEvidenceByID_Evidence_ControlObjectives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEvidenceByID_Evidence_ControlObjectives) GetEdges() []*GetEvidenceByID_Evidence_ControlObjectives_Edges {
	if t == nil {
		t = &GetEvidenceByID_Evidence_ControlObjectives{}
	}
	return t.Edges
}

type GetEvidenceByID_Evidence struct {
	CollectionProcedure *string                                    "json:\"collectionProcedure,omitempty\" graphql:\"collectionProcedure\""
	ControlObjectives   GetEvidenceByID_Evidence_ControlObjectives "json:\"controlObjectives\" graphql:\"controlObjectives\""
	Controls            GetEvidenceByID_Evidence_Controls          "json:\"controls\" graphql:\"controls\""
	CreatedAt           *time.Time                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	CreationDate        time.Time                                  "json:\"creationDate\" graphql:\"creationDate\""
	Description         *string                                    "json:\"description,omitempty\" graphql:\"description\""
	DisplayID           string                                     "json:\"displayID\" graphql:\"displayID\""
	Files               GetEvidenceByID_Evidence_Files             "json:\"files\" graphql:\"files\""
	ID                  string                                     "json:\"id\" graphql:\"id\""
	IsAutomated         *bool                                      "json:\"isAutomated,omitempty\" graphql:\"isAutomated\""
	Name                string                                     "json:\"name\" graphql:\"name\""
	OwnerID             *string                                    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Programs            GetEvidenceByID_Evidence_Programs          "json:\"programs\" graphql:\"programs\""
	RenewalDate         *time.Time                                 "json:\"renewalDate,omitempty\" graphql:\"renewalDate\""
	Source              *string                                    "json:\"source,omitempty\" graphql:\"source\""
	Status              *enums.EvidenceStatus                      "json:\"status,omitempty\" graphql:\"status\""
	Subcontrols         GetEvidenceByID_Evidence_Subcontrols       "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags                []string                                   "json:\"tags,omitempty\" graphql:\"tags\""
	Tasks               GetEvidenceByID_Evidence_Tasks             "json:\"tasks\" graphql:\"tasks\""
	UpdatedAt           *time.Time                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URL                 *string                                    "json:\"url,omitempty\" graphql:\"url\""
}

func (t *GetEvidenceByID_Evidence) GetCollectionProcedure() *string {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.CollectionProcedure
}
func (t *GetEvidenceByID_Evidence) GetControlObjectives() *GetEvidenceByID_Evidence_ControlObjectives {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return &t.ControlObjectives
}
func (t *GetEvidenceByID_Evidence) GetControls() *GetEvidenceByID_Evidence_Controls {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return &t.Controls
}
func (t *GetEvidenceByID_Evidence) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.CreatedAt
}
func (t *GetEvidenceByID_Evidence) GetCreatedBy() *string {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.CreatedBy
}
func (t *GetEvidenceByID_Evidence) GetCreationDate() *time.Time {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return &t.CreationDate
}
func (t *GetEvidenceByID_Evidence) GetDescription() *string {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.Description
}
func (t *GetEvidenceByID_Evidence) GetDisplayID() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.DisplayID
}
func (t *GetEvidenceByID_Evidence) GetFiles() *GetEvidenceByID_Evidence_Files {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return &t.Files
}
func (t *GetEvidenceByID_Evidence) GetID() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.ID
}
func (t *GetEvidenceByID_Evidence) GetIsAutomated() *bool {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.IsAutomated
}
func (t *GetEvidenceByID_Evidence) GetName() string {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.Name
}
func (t *GetEvidenceByID_Evidence) GetOwnerID() *string {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.OwnerID
}
func (t *GetEvidenceByID_Evidence) GetPrograms() *GetEvidenceByID_Evidence_Programs {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return &t.Programs
}
func (t *GetEvidenceByID_Evidence) GetRenewalDate() *time.Time {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.RenewalDate
}
func (t *GetEvidenceByID_Evidence) GetSource() *string {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.Source
}
func (t *GetEvidenceByID_Evidence) GetStatus() *enums.EvidenceStatus {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.Status
}
func (t *GetEvidenceByID_Evidence) GetSubcontrols() *GetEvidenceByID_Evidence_Subcontrols {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return &t.Subcontrols
}
func (t *GetEvidenceByID_Evidence) GetTags() []string {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.Tags
}
func (t *GetEvidenceByID_Evidence) GetTasks() *GetEvidenceByID_Evidence_Tasks {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return &t.Tasks
}
func (t *GetEvidenceByID_Evidence) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.UpdatedAt
}
func (t *GetEvidenceByID_Evidence) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.UpdatedBy
}
func (t *GetEvidenceByID_Evidence) GetURL() *string {
	if t == nil {
		t = &GetEvidenceByID_Evidence{}
	}
	return t.URL
}

type GetEvidences_Evidences_Edges_Node_Files_Edges_Node struct {
	ID           string  "json:\"id\" graphql:\"id\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetEvidences_Evidences_Edges_Node_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GetEvidences_Evidences_Edges_Node_Files_Edges_Node) GetPresignedURL() *string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Files_Edges_Node{}
	}
	return t.PresignedURL
}

type GetEvidences_Evidences_Edges_Node_Files_Edges struct {
	Node *GetEvidences_Evidences_Edges_Node_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvidences_Evidences_Edges_Node_Files_Edges) GetNode() *GetEvidences_Evidences_Edges_Node_Files_Edges_Node {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Files_Edges{}
	}
	return t.Node
}

type GetEvidences_Evidences_Edges_Node_Files struct {
	Edges []*GetEvidences_Evidences_Edges_Node_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEvidences_Evidences_Edges_Node_Files) GetEdges() []*GetEvidences_Evidences_Edges_Node_Files_Edges {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Files{}
	}
	return t.Edges
}

type GetEvidences_Evidences_Edges_Node_Programs_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *GetEvidences_Evidences_Edges_Node_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetEvidences_Evidences_Edges_Node_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GetEvidences_Evidences_Edges_Node_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Programs_Edges_Node{}
	}
	return t.Name
}

type GetEvidences_Evidences_Edges_Node_Programs_Edges struct {
	Node *GetEvidences_Evidences_Edges_Node_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvidences_Evidences_Edges_Node_Programs_Edges) GetNode() *GetEvidences_Evidences_Edges_Node_Programs_Edges_Node {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Programs_Edges{}
	}
	return t.Node
}

type GetEvidences_Evidences_Edges_Node_Programs struct {
	Edges []*GetEvidences_Evidences_Edges_Node_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEvidences_Evidences_Edges_Node_Programs) GetEdges() []*GetEvidences_Evidences_Edges_Node_Programs_Edges {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Programs{}
	}
	return t.Edges
}

type GetEvidences_Evidences_Edges_Node_Tasks_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
}

func (t *GetEvidences_Evidences_Edges_Node_Tasks_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Tasks_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetEvidences_Evidences_Edges_Node_Tasks_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Tasks_Edges_Node{}
	}
	return t.ID
}

type GetEvidences_Evidences_Edges_Node_Tasks_Edges struct {
	Node *GetEvidences_Evidences_Edges_Node_Tasks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvidences_Evidences_Edges_Node_Tasks_Edges) GetNode() *GetEvidences_Evidences_Edges_Node_Tasks_Edges_Node {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Tasks_Edges{}
	}
	return t.Node
}

type GetEvidences_Evidences_Edges_Node_Tasks struct {
	Edges []*GetEvidences_Evidences_Edges_Node_Tasks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEvidences_Evidences_Edges_Node_Tasks) GetEdges() []*GetEvidences_Evidences_Edges_Node_Tasks_Edges {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Tasks{}
	}
	return t.Edges
}

type GetEvidences_Evidences_Edges_Node_Controls_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	RefCode   string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetEvidences_Evidences_Edges_Node_Controls_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Controls_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetEvidences_Evidences_Edges_Node_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetEvidences_Evidences_Edges_Node_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetEvidences_Evidences_Edges_Node_Controls_Edges struct {
	Node *GetEvidences_Evidences_Edges_Node_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvidences_Evidences_Edges_Node_Controls_Edges) GetNode() *GetEvidences_Evidences_Edges_Node_Controls_Edges_Node {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Controls_Edges{}
	}
	return t.Node
}

type GetEvidences_Evidences_Edges_Node_Controls struct {
	Edges []*GetEvidences_Evidences_Edges_Node_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEvidences_Evidences_Edges_Node_Controls) GetEdges() []*GetEvidences_Evidences_Edges_Node_Controls_Edges {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Controls{}
	}
	return t.Edges
}

type GetEvidences_Evidences_Edges_Node_Subcontrols_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	RefCode   string "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetEvidences_Evidences_Edges_Node_Subcontrols_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Subcontrols_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetEvidences_Evidences_Edges_Node_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GetEvidences_Evidences_Edges_Node_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type GetEvidences_Evidences_Edges_Node_Subcontrols_Edges struct {
	Node *GetEvidences_Evidences_Edges_Node_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvidences_Evidences_Edges_Node_Subcontrols_Edges) GetNode() *GetEvidences_Evidences_Edges_Node_Subcontrols_Edges_Node {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Subcontrols_Edges{}
	}
	return t.Node
}

type GetEvidences_Evidences_Edges_Node_Subcontrols struct {
	Edges []*GetEvidences_Evidences_Edges_Node_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEvidences_Evidences_Edges_Node_Subcontrols) GetEdges() []*GetEvidences_Evidences_Edges_Node_Subcontrols_Edges {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_Subcontrols{}
	}
	return t.Edges
}

type GetEvidences_Evidences_Edges_Node_ControlObjectives_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *GetEvidences_Evidences_Edges_Node_ControlObjectives_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_ControlObjectives_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetEvidences_Evidences_Edges_Node_ControlObjectives_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_ControlObjectives_Edges_Node{}
	}
	return t.ID
}
func (t *GetEvidences_Evidences_Edges_Node_ControlObjectives_Edges_Node) GetName() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_ControlObjectives_Edges_Node{}
	}
	return t.Name
}

type GetEvidences_Evidences_Edges_Node_ControlObjectives_Edges struct {
	Node *GetEvidences_Evidences_Edges_Node_ControlObjectives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvidences_Evidences_Edges_Node_ControlObjectives_Edges) GetNode() *GetEvidences_Evidences_Edges_Node_ControlObjectives_Edges_Node {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_ControlObjectives_Edges{}
	}
	return t.Node
}

type GetEvidences_Evidences_Edges_Node_ControlObjectives struct {
	Edges []*GetEvidences_Evidences_Edges_Node_ControlObjectives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEvidences_Evidences_Edges_Node_ControlObjectives) GetEdges() []*GetEvidences_Evidences_Edges_Node_ControlObjectives_Edges {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node_ControlObjectives{}
	}
	return t.Edges
}

type GetEvidences_Evidences_Edges_Node struct {
	CollectionProcedure *string                                             "json:\"collectionProcedure,omitempty\" graphql:\"collectionProcedure\""
	ControlObjectives   GetEvidences_Evidences_Edges_Node_ControlObjectives "json:\"controlObjectives\" graphql:\"controlObjectives\""
	Controls            GetEvidences_Evidences_Edges_Node_Controls          "json:\"controls\" graphql:\"controls\""
	CreatedAt           *time.Time                                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string                                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	CreationDate        time.Time                                           "json:\"creationDate\" graphql:\"creationDate\""
	Description         *string                                             "json:\"description,omitempty\" graphql:\"description\""
	DisplayID           string                                              "json:\"displayID\" graphql:\"displayID\""
	Files               GetEvidences_Evidences_Edges_Node_Files             "json:\"files\" graphql:\"files\""
	ID                  string                                              "json:\"id\" graphql:\"id\""
	IsAutomated         *bool                                               "json:\"isAutomated,omitempty\" graphql:\"isAutomated\""
	Name                string                                              "json:\"name\" graphql:\"name\""
	OwnerID             *string                                             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Programs            GetEvidences_Evidences_Edges_Node_Programs          "json:\"programs\" graphql:\"programs\""
	RenewalDate         *time.Time                                          "json:\"renewalDate,omitempty\" graphql:\"renewalDate\""
	Source              *string                                             "json:\"source,omitempty\" graphql:\"source\""
	Status              *enums.EvidenceStatus                               "json:\"status,omitempty\" graphql:\"status\""
	Subcontrols         GetEvidences_Evidences_Edges_Node_Subcontrols       "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags                []string                                            "json:\"tags,omitempty\" graphql:\"tags\""
	Tasks               GetEvidences_Evidences_Edges_Node_Tasks             "json:\"tasks\" graphql:\"tasks\""
	UpdatedAt           *time.Time                                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string                                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URL                 *string                                             "json:\"url,omitempty\" graphql:\"url\""
}

func (t *GetEvidences_Evidences_Edges_Node) GetCollectionProcedure() *string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.CollectionProcedure
}
func (t *GetEvidences_Evidences_Edges_Node) GetControlObjectives() *GetEvidences_Evidences_Edges_Node_ControlObjectives {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return &t.ControlObjectives
}
func (t *GetEvidences_Evidences_Edges_Node) GetControls() *GetEvidences_Evidences_Edges_Node_Controls {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return &t.Controls
}
func (t *GetEvidences_Evidences_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetEvidences_Evidences_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetEvidences_Evidences_Edges_Node) GetCreationDate() *time.Time {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return &t.CreationDate
}
func (t *GetEvidences_Evidences_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.Description
}
func (t *GetEvidences_Evidences_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetEvidences_Evidences_Edges_Node) GetFiles() *GetEvidences_Evidences_Edges_Node_Files {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return &t.Files
}
func (t *GetEvidences_Evidences_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.ID
}
func (t *GetEvidences_Evidences_Edges_Node) GetIsAutomated() *bool {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.IsAutomated
}
func (t *GetEvidences_Evidences_Edges_Node) GetName() string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.Name
}
func (t *GetEvidences_Evidences_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetEvidences_Evidences_Edges_Node) GetPrograms() *GetEvidences_Evidences_Edges_Node_Programs {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return &t.Programs
}
func (t *GetEvidences_Evidences_Edges_Node) GetRenewalDate() *time.Time {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.RenewalDate
}
func (t *GetEvidences_Evidences_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.Source
}
func (t *GetEvidences_Evidences_Edges_Node) GetStatus() *enums.EvidenceStatus {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.Status
}
func (t *GetEvidences_Evidences_Edges_Node) GetSubcontrols() *GetEvidences_Evidences_Edges_Node_Subcontrols {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return &t.Subcontrols
}
func (t *GetEvidences_Evidences_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEvidences_Evidences_Edges_Node) GetTasks() *GetEvidences_Evidences_Edges_Node_Tasks {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return &t.Tasks
}
func (t *GetEvidences_Evidences_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEvidences_Evidences_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetEvidences_Evidences_Edges_Node) GetURL() *string {
	if t == nil {
		t = &GetEvidences_Evidences_Edges_Node{}
	}
	return t.URL
}

type GetEvidences_Evidences_Edges struct {
	Node *GetEvidences_Evidences_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvidences_Evidences_Edges) GetNode() *GetEvidences_Evidences_Edges_Node {
	if t == nil {
		t = &GetEvidences_Evidences_Edges{}
	}
	return t.Node
}

type GetEvidences_Evidences struct {
	Edges []*GetEvidences_Evidences_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEvidences_Evidences) GetEdges() []*GetEvidences_Evidences_Edges {
	if t == nil {
		t = &GetEvidences_Evidences{}
	}
	return t.Edges
}

type UpdateEvidence_UpdateEvidence_Evidence_Files_Edges_Node struct {
	ID           string  "json:\"id\" graphql:\"id\""
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Files_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateEvidence_UpdateEvidence_Evidence_Files_Edges_Node) GetPresignedURL() *string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Files_Edges_Node{}
	}
	return t.PresignedURL
}

type UpdateEvidence_UpdateEvidence_Evidence_Files_Edges struct {
	Node *UpdateEvidence_UpdateEvidence_Evidence_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_Files_Edges) GetNode() *UpdateEvidence_UpdateEvidence_Evidence_Files_Edges_Node {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Files_Edges{}
	}
	return t.Node
}

type UpdateEvidence_UpdateEvidence_Evidence_Files struct {
	Edges []*UpdateEvidence_UpdateEvidence_Evidence_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_Files) GetEdges() []*UpdateEvidence_UpdateEvidence_Evidence_Files_Edges {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Files{}
	}
	return t.Edges
}

type UpdateEvidence_UpdateEvidence_Evidence_Programs_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *UpdateEvidence_UpdateEvidence_Evidence_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateEvidence_UpdateEvidence_Evidence_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Programs_Edges_Node{}
	}
	return t.Name
}

type UpdateEvidence_UpdateEvidence_Evidence_Programs_Edges struct {
	Node *UpdateEvidence_UpdateEvidence_Evidence_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_Programs_Edges) GetNode() *UpdateEvidence_UpdateEvidence_Evidence_Programs_Edges_Node {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Programs_Edges{}
	}
	return t.Node
}

type UpdateEvidence_UpdateEvidence_Evidence_Programs struct {
	Edges []*UpdateEvidence_UpdateEvidence_Evidence_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_Programs) GetEdges() []*UpdateEvidence_UpdateEvidence_Evidence_Programs_Edges {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Programs{}
	}
	return t.Edges
}

type UpdateEvidence_UpdateEvidence_Evidence_Tasks_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_Tasks_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Tasks_Edges_Node{}
	}
	return t.DisplayID
}
func (t *UpdateEvidence_UpdateEvidence_Evidence_Tasks_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Tasks_Edges_Node{}
	}
	return t.ID
}

type UpdateEvidence_UpdateEvidence_Evidence_Tasks_Edges struct {
	Node *UpdateEvidence_UpdateEvidence_Evidence_Tasks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_Tasks_Edges) GetNode() *UpdateEvidence_UpdateEvidence_Evidence_Tasks_Edges_Node {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Tasks_Edges{}
	}
	return t.Node
}

type UpdateEvidence_UpdateEvidence_Evidence_Tasks struct {
	Edges []*UpdateEvidence_UpdateEvidence_Evidence_Tasks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_Tasks) GetEdges() []*UpdateEvidence_UpdateEvidence_Evidence_Tasks_Edges {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Tasks{}
	}
	return t.Edges
}

type UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	RefCode   string "json:\"refCode\" graphql:\"refCode\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges_Node{}
	}
	return t.DisplayID
}
func (t *UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges_Node{}
	}
	return t.RefCode
}

type UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges struct {
	Node *UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges) GetNode() *UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges_Node {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges{}
	}
	return t.Node
}

type UpdateEvidence_UpdateEvidence_Evidence_Controls struct {
	Edges []*UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_Controls) GetEdges() []*UpdateEvidence_UpdateEvidence_Evidence_Controls_Edges {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Controls{}
	}
	return t.Edges
}

type UpdateEvidence_UpdateEvidence_Evidence_Subcontrols_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	RefCode   string "json:\"refCode\" graphql:\"refCode\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_Subcontrols_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Subcontrols_Edges_Node{}
	}
	return t.DisplayID
}
func (t *UpdateEvidence_UpdateEvidence_Evidence_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateEvidence_UpdateEvidence_Evidence_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type UpdateEvidence_UpdateEvidence_Evidence_Subcontrols_Edges struct {
	Node *UpdateEvidence_UpdateEvidence_Evidence_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_Subcontrols_Edges) GetNode() *UpdateEvidence_UpdateEvidence_Evidence_Subcontrols_Edges_Node {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Subcontrols_Edges{}
	}
	return t.Node
}

type UpdateEvidence_UpdateEvidence_Evidence_Subcontrols struct {
	Edges []*UpdateEvidence_UpdateEvidence_Evidence_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_Subcontrols) GetEdges() []*UpdateEvidence_UpdateEvidence_Evidence_Subcontrols_Edges {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_Subcontrols{}
	}
	return t.Edges
}

type UpdateEvidence_UpdateEvidence_Evidence_ControlObjectives_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_ControlObjectives_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_ControlObjectives_Edges_Node{}
	}
	return t.DisplayID
}
func (t *UpdateEvidence_UpdateEvidence_Evidence_ControlObjectives_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_ControlObjectives_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateEvidence_UpdateEvidence_Evidence_ControlObjectives_Edges_Node) GetName() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_ControlObjectives_Edges_Node{}
	}
	return t.Name
}

type UpdateEvidence_UpdateEvidence_Evidence_ControlObjectives_Edges struct {
	Node *UpdateEvidence_UpdateEvidence_Evidence_ControlObjectives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_ControlObjectives_Edges) GetNode() *UpdateEvidence_UpdateEvidence_Evidence_ControlObjectives_Edges_Node {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_ControlObjectives_Edges{}
	}
	return t.Node
}

type UpdateEvidence_UpdateEvidence_Evidence_ControlObjectives struct {
	Edges []*UpdateEvidence_UpdateEvidence_Evidence_ControlObjectives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence_ControlObjectives) GetEdges() []*UpdateEvidence_UpdateEvidence_Evidence_ControlObjectives_Edges {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence_ControlObjectives{}
	}
	return t.Edges
}

type UpdateEvidence_UpdateEvidence_Evidence struct {
	CollectionProcedure *string                                                  "json:\"collectionProcedure,omitempty\" graphql:\"collectionProcedure\""
	ControlObjectives   UpdateEvidence_UpdateEvidence_Evidence_ControlObjectives "json:\"controlObjectives\" graphql:\"controlObjectives\""
	Controls            UpdateEvidence_UpdateEvidence_Evidence_Controls          "json:\"controls\" graphql:\"controls\""
	CreatedAt           *time.Time                                               "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string                                                  "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	CreationDate        time.Time                                                "json:\"creationDate\" graphql:\"creationDate\""
	Description         *string                                                  "json:\"description,omitempty\" graphql:\"description\""
	DisplayID           string                                                   "json:\"displayID\" graphql:\"displayID\""
	Files               UpdateEvidence_UpdateEvidence_Evidence_Files             "json:\"files\" graphql:\"files\""
	ID                  string                                                   "json:\"id\" graphql:\"id\""
	IsAutomated         *bool                                                    "json:\"isAutomated,omitempty\" graphql:\"isAutomated\""
	Name                string                                                   "json:\"name\" graphql:\"name\""
	OwnerID             *string                                                  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Programs            UpdateEvidence_UpdateEvidence_Evidence_Programs          "json:\"programs\" graphql:\"programs\""
	RenewalDate         *time.Time                                               "json:\"renewalDate,omitempty\" graphql:\"renewalDate\""
	Source              *string                                                  "json:\"source,omitempty\" graphql:\"source\""
	Status              *enums.EvidenceStatus                                    "json:\"status,omitempty\" graphql:\"status\""
	Subcontrols         UpdateEvidence_UpdateEvidence_Evidence_Subcontrols       "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags                []string                                                 "json:\"tags,omitempty\" graphql:\"tags\""
	Tasks               UpdateEvidence_UpdateEvidence_Evidence_Tasks             "json:\"tasks\" graphql:\"tasks\""
	UpdatedAt           *time.Time                                               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string                                                  "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URL                 *string                                                  "json:\"url,omitempty\" graphql:\"url\""
}

func (t *UpdateEvidence_UpdateEvidence_Evidence) GetCollectionProcedure() *string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.CollectionProcedure
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetControlObjectives() *UpdateEvidence_UpdateEvidence_Evidence_ControlObjectives {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return &t.ControlObjectives
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetControls() *UpdateEvidence_UpdateEvidence_Evidence_Controls {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return &t.Controls
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.CreatedAt
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.CreatedBy
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetCreationDate() *time.Time {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return &t.CreationDate
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetDescription() *string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.Description
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetDisplayID() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.DisplayID
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetFiles() *UpdateEvidence_UpdateEvidence_Evidence_Files {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return &t.Files
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetID() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.ID
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetIsAutomated() *bool {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.IsAutomated
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetName() string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.Name
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetOwnerID() *string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.OwnerID
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetPrograms() *UpdateEvidence_UpdateEvidence_Evidence_Programs {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return &t.Programs
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetRenewalDate() *time.Time {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.RenewalDate
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetSource() *string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.Source
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetStatus() *enums.EvidenceStatus {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.Status
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetSubcontrols() *UpdateEvidence_UpdateEvidence_Evidence_Subcontrols {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return &t.Subcontrols
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetTags() []string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.Tags
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetTasks() *UpdateEvidence_UpdateEvidence_Evidence_Tasks {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return &t.Tasks
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.UpdatedAt
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.UpdatedBy
}
func (t *UpdateEvidence_UpdateEvidence_Evidence) GetURL() *string {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence_Evidence{}
	}
	return t.URL
}

type UpdateEvidence_UpdateEvidence struct {
	Evidence UpdateEvidence_UpdateEvidence_Evidence "json:\"evidence\" graphql:\"evidence\""
}

func (t *UpdateEvidence_UpdateEvidence) GetEvidence() *UpdateEvidence_UpdateEvidence_Evidence {
	if t == nil {
		t = &UpdateEvidence_UpdateEvidence{}
	}
	return &t.Evidence
}

type GetAllEvidenceHistories_EvidenceHistories_Edges_Node struct {
	CollectionProcedure *string        "json:\"collectionProcedure,omitempty\" graphql:\"collectionProcedure\""
	CreatedAt           *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	CreationDate        time.Time      "json:\"creationDate\" graphql:\"creationDate\""
	Description         *string        "json:\"description,omitempty\" graphql:\"description\""
	DisplayID           string         "json:\"displayID\" graphql:\"displayID\""
	HistoryTime         time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID                  string         "json:\"id\" graphql:\"id\""
	IsAutomated         *bool          "json:\"isAutomated,omitempty\" graphql:\"isAutomated\""
	Name                string         "json:\"name\" graphql:\"name\""
	Operation           history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID             *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                 *string        "json:\"ref,omitempty\" graphql:\"ref\""
	RenewalDate         *time.Time     "json:\"renewalDate,omitempty\" graphql:\"renewalDate\""
	Source              *string        "json:\"source,omitempty\" graphql:\"source\""
	Tags                []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt           *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URL                 *string        "json:\"url,omitempty\" graphql:\"url\""
}

func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetCollectionProcedure() *string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.CollectionProcedure
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetCreationDate() *time.Time {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return &t.CreationDate
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetIsAutomated() *bool {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.IsAutomated
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetRenewalDate() *time.Time {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.RenewalDate
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllEvidenceHistories_EvidenceHistories_Edges_Node) GetURL() *string {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.URL
}

type GetAllEvidenceHistories_EvidenceHistories_Edges struct {
	Node *GetAllEvidenceHistories_EvidenceHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvidenceHistories_EvidenceHistories_Edges) GetNode() *GetAllEvidenceHistories_EvidenceHistories_Edges_Node {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories_Edges{}
	}
	return t.Node
}

type GetAllEvidenceHistories_EvidenceHistories struct {
	Edges []*GetAllEvidenceHistories_EvidenceHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEvidenceHistories_EvidenceHistories) GetEdges() []*GetAllEvidenceHistories_EvidenceHistories_Edges {
	if t == nil {
		t = &GetAllEvidenceHistories_EvidenceHistories{}
	}
	return t.Edges
}

type GetEvidenceHistories_EvidenceHistories_Edges_Node struct {
	CollectionProcedure *string        "json:\"collectionProcedure,omitempty\" graphql:\"collectionProcedure\""
	CreatedAt           *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	CreationDate        time.Time      "json:\"creationDate\" graphql:\"creationDate\""
	Description         *string        "json:\"description,omitempty\" graphql:\"description\""
	DisplayID           string         "json:\"displayID\" graphql:\"displayID\""
	HistoryTime         time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID                  string         "json:\"id\" graphql:\"id\""
	IsAutomated         *bool          "json:\"isAutomated,omitempty\" graphql:\"isAutomated\""
	Name                string         "json:\"name\" graphql:\"name\""
	Operation           history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID             *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                 *string        "json:\"ref,omitempty\" graphql:\"ref\""
	RenewalDate         *time.Time     "json:\"renewalDate,omitempty\" graphql:\"renewalDate\""
	Source              *string        "json:\"source,omitempty\" graphql:\"source\""
	Tags                []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt           *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URL                 *string        "json:\"url,omitempty\" graphql:\"url\""
}

func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetCollectionProcedure() *string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.CollectionProcedure
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetCreationDate() *time.Time {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return &t.CreationDate
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetIsAutomated() *bool {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.IsAutomated
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetRenewalDate() *time.Time {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.RenewalDate
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetEvidenceHistories_EvidenceHistories_Edges_Node) GetURL() *string {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges_Node{}
	}
	return t.URL
}

type GetEvidenceHistories_EvidenceHistories_Edges struct {
	Node *GetEvidenceHistories_EvidenceHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvidenceHistories_EvidenceHistories_Edges) GetNode() *GetEvidenceHistories_EvidenceHistories_Edges_Node {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories_Edges{}
	}
	return t.Node
}

type GetEvidenceHistories_EvidenceHistories struct {
	Edges []*GetEvidenceHistories_EvidenceHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEvidenceHistories_EvidenceHistories) GetEdges() []*GetEvidenceHistories_EvidenceHistories_Edges {
	if t == nil {
		t = &GetEvidenceHistories_EvidenceHistories{}
	}
	return t.Edges
}

type DeleteFile_DeleteFile struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteFile_DeleteFile) GetDeletedID() string {
	if t == nil {
		t = &DeleteFile_DeleteFile{}
	}
	return t.DeletedID
}

type GetAllFiles_Files_Edges_Node struct {
	CategoryType          *string    "json:\"categoryType,omitempty\" graphql:\"categoryType\""
	CreatedAt             *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy             *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DetectedContentType   string     "json:\"detectedContentType\" graphql:\"detectedContentType\""
	DetectedMimeType      *string    "json:\"detectedMimeType,omitempty\" graphql:\"detectedMimeType\""
	ID                    string     "json:\"id\" graphql:\"id\""
	Md5Hash               *string    "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	PersistedFileSize     *int64     "json:\"persistedFileSize,omitempty\" graphql:\"persistedFileSize\""
	ProvidedFileExtension string     "json:\"providedFileExtension\" graphql:\"providedFileExtension\""
	ProvidedFileName      string     "json:\"providedFileName\" graphql:\"providedFileName\""
	ProvidedFileSize      *int64     "json:\"providedFileSize,omitempty\" graphql:\"providedFileSize\""
	StoragePath           *string    "json:\"storagePath,omitempty\" graphql:\"storagePath\""
	StorageScheme         *string    "json:\"storageScheme,omitempty\" graphql:\"storageScheme\""
	StorageVolume         *string    "json:\"storageVolume,omitempty\" graphql:\"storageVolume\""
	StoreKey              *string    "json:\"storeKey,omitempty\" graphql:\"storeKey\""
	Tags                  []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt             *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy             *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URI                   *string    "json:\"uri,omitempty\" graphql:\"uri\""
}

func (t *GetAllFiles_Files_Edges_Node) GetCategoryType() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.CategoryType
}
func (t *GetAllFiles_Files_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllFiles_Files_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllFiles_Files_Edges_Node) GetDetectedContentType() string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.DetectedContentType
}
func (t *GetAllFiles_Files_Edges_Node) GetDetectedMimeType() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.DetectedMimeType
}
func (t *GetAllFiles_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllFiles_Files_Edges_Node) GetMd5Hash() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.Md5Hash
}
func (t *GetAllFiles_Files_Edges_Node) GetPersistedFileSize() *int64 {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.PersistedFileSize
}
func (t *GetAllFiles_Files_Edges_Node) GetProvidedFileExtension() string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.ProvidedFileExtension
}
func (t *GetAllFiles_Files_Edges_Node) GetProvidedFileName() string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.ProvidedFileName
}
func (t *GetAllFiles_Files_Edges_Node) GetProvidedFileSize() *int64 {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.ProvidedFileSize
}
func (t *GetAllFiles_Files_Edges_Node) GetStoragePath() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.StoragePath
}
func (t *GetAllFiles_Files_Edges_Node) GetStorageScheme() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.StorageScheme
}
func (t *GetAllFiles_Files_Edges_Node) GetStorageVolume() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.StorageVolume
}
func (t *GetAllFiles_Files_Edges_Node) GetStoreKey() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.StoreKey
}
func (t *GetAllFiles_Files_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllFiles_Files_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllFiles_Files_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllFiles_Files_Edges_Node) GetURI() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.URI
}

type GetAllFiles_Files_Edges struct {
	Node *GetAllFiles_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllFiles_Files_Edges) GetNode() *GetAllFiles_Files_Edges_Node {
	if t == nil {
		t = &GetAllFiles_Files_Edges{}
	}
	return t.Node
}

type GetAllFiles_Files struct {
	Edges []*GetAllFiles_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllFiles_Files) GetEdges() []*GetAllFiles_Files_Edges {
	if t == nil {
		t = &GetAllFiles_Files{}
	}
	return t.Edges
}

type GetFileByID_File struct {
	CategoryType          *string    "json:\"categoryType,omitempty\" graphql:\"categoryType\""
	CreatedAt             *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy             *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DetectedContentType   string     "json:\"detectedContentType\" graphql:\"detectedContentType\""
	DetectedMimeType      *string    "json:\"detectedMimeType,omitempty\" graphql:\"detectedMimeType\""
	ID                    string     "json:\"id\" graphql:\"id\""
	Md5Hash               *string    "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	PersistedFileSize     *int64     "json:\"persistedFileSize,omitempty\" graphql:\"persistedFileSize\""
	ProvidedFileExtension string     "json:\"providedFileExtension\" graphql:\"providedFileExtension\""
	ProvidedFileName      string     "json:\"providedFileName\" graphql:\"providedFileName\""
	ProvidedFileSize      *int64     "json:\"providedFileSize,omitempty\" graphql:\"providedFileSize\""
	StoragePath           *string    "json:\"storagePath,omitempty\" graphql:\"storagePath\""
	StorageScheme         *string    "json:\"storageScheme,omitempty\" graphql:\"storageScheme\""
	StorageVolume         *string    "json:\"storageVolume,omitempty\" graphql:\"storageVolume\""
	StoreKey              *string    "json:\"storeKey,omitempty\" graphql:\"storeKey\""
	Tags                  []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt             *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy             *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URI                   *string    "json:\"uri,omitempty\" graphql:\"uri\""
}

func (t *GetFileByID_File) GetCategoryType() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.CategoryType
}
func (t *GetFileByID_File) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.CreatedAt
}
func (t *GetFileByID_File) GetCreatedBy() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.CreatedBy
}
func (t *GetFileByID_File) GetDetectedContentType() string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.DetectedContentType
}
func (t *GetFileByID_File) GetDetectedMimeType() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.DetectedMimeType
}
func (t *GetFileByID_File) GetID() string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.ID
}
func (t *GetFileByID_File) GetMd5Hash() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.Md5Hash
}
func (t *GetFileByID_File) GetPersistedFileSize() *int64 {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.PersistedFileSize
}
func (t *GetFileByID_File) GetProvidedFileExtension() string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.ProvidedFileExtension
}
func (t *GetFileByID_File) GetProvidedFileName() string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.ProvidedFileName
}
func (t *GetFileByID_File) GetProvidedFileSize() *int64 {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.ProvidedFileSize
}
func (t *GetFileByID_File) GetStoragePath() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.StoragePath
}
func (t *GetFileByID_File) GetStorageScheme() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.StorageScheme
}
func (t *GetFileByID_File) GetStorageVolume() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.StorageVolume
}
func (t *GetFileByID_File) GetStoreKey() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.StoreKey
}
func (t *GetFileByID_File) GetTags() []string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.Tags
}
func (t *GetFileByID_File) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.UpdatedAt
}
func (t *GetFileByID_File) GetUpdatedBy() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.UpdatedBy
}
func (t *GetFileByID_File) GetURI() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.URI
}

type GetFiles_Files_Edges_Node struct {
	CategoryType          *string    "json:\"categoryType,omitempty\" graphql:\"categoryType\""
	CreatedAt             *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy             *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DetectedContentType   string     "json:\"detectedContentType\" graphql:\"detectedContentType\""
	DetectedMimeType      *string    "json:\"detectedMimeType,omitempty\" graphql:\"detectedMimeType\""
	ID                    string     "json:\"id\" graphql:\"id\""
	Md5Hash               *string    "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	PersistedFileSize     *int64     "json:\"persistedFileSize,omitempty\" graphql:\"persistedFileSize\""
	ProvidedFileExtension string     "json:\"providedFileExtension\" graphql:\"providedFileExtension\""
	ProvidedFileName      string     "json:\"providedFileName\" graphql:\"providedFileName\""
	ProvidedFileSize      *int64     "json:\"providedFileSize,omitempty\" graphql:\"providedFileSize\""
	StoragePath           *string    "json:\"storagePath,omitempty\" graphql:\"storagePath\""
	StorageScheme         *string    "json:\"storageScheme,omitempty\" graphql:\"storageScheme\""
	StorageVolume         *string    "json:\"storageVolume,omitempty\" graphql:\"storageVolume\""
	StoreKey              *string    "json:\"storeKey,omitempty\" graphql:\"storeKey\""
	Tags                  []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt             *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy             *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URI                   *string    "json:\"uri,omitempty\" graphql:\"uri\""
}

func (t *GetFiles_Files_Edges_Node) GetCategoryType() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.CategoryType
}
func (t *GetFiles_Files_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetFiles_Files_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetFiles_Files_Edges_Node) GetDetectedContentType() string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.DetectedContentType
}
func (t *GetFiles_Files_Edges_Node) GetDetectedMimeType() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.DetectedMimeType
}
func (t *GetFiles_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GetFiles_Files_Edges_Node) GetMd5Hash() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.Md5Hash
}
func (t *GetFiles_Files_Edges_Node) GetPersistedFileSize() *int64 {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.PersistedFileSize
}
func (t *GetFiles_Files_Edges_Node) GetProvidedFileExtension() string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.ProvidedFileExtension
}
func (t *GetFiles_Files_Edges_Node) GetProvidedFileName() string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.ProvidedFileName
}
func (t *GetFiles_Files_Edges_Node) GetProvidedFileSize() *int64 {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.ProvidedFileSize
}
func (t *GetFiles_Files_Edges_Node) GetStoragePath() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.StoragePath
}
func (t *GetFiles_Files_Edges_Node) GetStorageScheme() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.StorageScheme
}
func (t *GetFiles_Files_Edges_Node) GetStorageVolume() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.StorageVolume
}
func (t *GetFiles_Files_Edges_Node) GetStoreKey() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.StoreKey
}
func (t *GetFiles_Files_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.Tags
}
func (t *GetFiles_Files_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetFiles_Files_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetFiles_Files_Edges_Node) GetURI() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.URI
}

type GetFiles_Files_Edges struct {
	Node *GetFiles_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetFiles_Files_Edges) GetNode() *GetFiles_Files_Edges_Node {
	if t == nil {
		t = &GetFiles_Files_Edges{}
	}
	return t.Node
}

type GetFiles_Files struct {
	Edges []*GetFiles_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetFiles_Files) GetEdges() []*GetFiles_Files_Edges {
	if t == nil {
		t = &GetFiles_Files{}
	}
	return t.Edges
}

type GetAllFileHistories_FileHistories_Edges_Node struct {
	CategoryType          *string        "json:\"categoryType,omitempty\" graphql:\"categoryType\""
	CreatedAt             *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy             *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DetectedContentType   string         "json:\"detectedContentType\" graphql:\"detectedContentType\""
	DetectedMimeType      *string        "json:\"detectedMimeType,omitempty\" graphql:\"detectedMimeType\""
	HistoryTime           time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID                    string         "json:\"id\" graphql:\"id\""
	Md5Hash               *string        "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	Operation             history.OpType "json:\"operation\" graphql:\"operation\""
	PersistedFileSize     *int64         "json:\"persistedFileSize,omitempty\" graphql:\"persistedFileSize\""
	ProvidedFileExtension string         "json:\"providedFileExtension\" graphql:\"providedFileExtension\""
	ProvidedFileName      string         "json:\"providedFileName\" graphql:\"providedFileName\""
	ProvidedFileSize      *int64         "json:\"providedFileSize,omitempty\" graphql:\"providedFileSize\""
	Ref                   *string        "json:\"ref,omitempty\" graphql:\"ref\""
	StoragePath           *string        "json:\"storagePath,omitempty\" graphql:\"storagePath\""
	StorageScheme         *string        "json:\"storageScheme,omitempty\" graphql:\"storageScheme\""
	StorageVolume         *string        "json:\"storageVolume,omitempty\" graphql:\"storageVolume\""
	StoreKey              *string        "json:\"storeKey,omitempty\" graphql:\"storeKey\""
	Tags                  []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt             *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy             *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URI                   *string        "json:\"uri,omitempty\" graphql:\"uri\""
}

func (t *GetAllFileHistories_FileHistories_Edges_Node) GetCategoryType() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.CategoryType
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetDetectedContentType() string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.DetectedContentType
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetDetectedMimeType() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.DetectedMimeType
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetMd5Hash() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.Md5Hash
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetPersistedFileSize() *int64 {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.PersistedFileSize
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetProvidedFileExtension() string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.ProvidedFileExtension
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetProvidedFileName() string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.ProvidedFileName
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetProvidedFileSize() *int64 {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.ProvidedFileSize
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetStoragePath() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.StoragePath
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetStorageScheme() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.StorageScheme
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetStorageVolume() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.StorageVolume
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetStoreKey() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.StoreKey
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetURI() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.URI
}

type GetAllFileHistories_FileHistories_Edges struct {
	Node *GetAllFileHistories_FileHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllFileHistories_FileHistories_Edges) GetNode() *GetAllFileHistories_FileHistories_Edges_Node {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges{}
	}
	return t.Node
}

type GetAllFileHistories_FileHistories struct {
	Edges []*GetAllFileHistories_FileHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllFileHistories_FileHistories) GetEdges() []*GetAllFileHistories_FileHistories_Edges {
	if t == nil {
		t = &GetAllFileHistories_FileHistories{}
	}
	return t.Edges
}

type GetFileHistories_FileHistories_Edges_Node struct {
	CategoryType          *string        "json:\"categoryType,omitempty\" graphql:\"categoryType\""
	CreatedAt             *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy             *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DetectedContentType   string         "json:\"detectedContentType\" graphql:\"detectedContentType\""
	DetectedMimeType      *string        "json:\"detectedMimeType,omitempty\" graphql:\"detectedMimeType\""
	HistoryTime           time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID                    string         "json:\"id\" graphql:\"id\""
	Md5Hash               *string        "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	Operation             history.OpType "json:\"operation\" graphql:\"operation\""
	PersistedFileSize     *int64         "json:\"persistedFileSize,omitempty\" graphql:\"persistedFileSize\""
	ProvidedFileExtension string         "json:\"providedFileExtension\" graphql:\"providedFileExtension\""
	ProvidedFileName      string         "json:\"providedFileName\" graphql:\"providedFileName\""
	ProvidedFileSize      *int64         "json:\"providedFileSize,omitempty\" graphql:\"providedFileSize\""
	Ref                   *string        "json:\"ref,omitempty\" graphql:\"ref\""
	StoragePath           *string        "json:\"storagePath,omitempty\" graphql:\"storagePath\""
	StorageScheme         *string        "json:\"storageScheme,omitempty\" graphql:\"storageScheme\""
	StorageVolume         *string        "json:\"storageVolume,omitempty\" graphql:\"storageVolume\""
	StoreKey              *string        "json:\"storeKey,omitempty\" graphql:\"storeKey\""
	Tags                  []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt             *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy             *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URI                   *string        "json:\"uri,omitempty\" graphql:\"uri\""
}

func (t *GetFileHistories_FileHistories_Edges_Node) GetCategoryType() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.CategoryType
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetDetectedContentType() string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.DetectedContentType
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetDetectedMimeType() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.DetectedMimeType
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetMd5Hash() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.Md5Hash
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetPersistedFileSize() *int64 {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.PersistedFileSize
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetProvidedFileExtension() string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.ProvidedFileExtension
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetProvidedFileName() string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.ProvidedFileName
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetProvidedFileSize() *int64 {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.ProvidedFileSize
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetStoragePath() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.StoragePath
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetStorageScheme() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.StorageScheme
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetStorageVolume() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.StorageVolume
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetStoreKey() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.StoreKey
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetURI() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.URI
}

type GetFileHistories_FileHistories_Edges struct {
	Node *GetFileHistories_FileHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetFileHistories_FileHistories_Edges) GetNode() *GetFileHistories_FileHistories_Edges_Node {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges{}
	}
	return t.Node
}

type GetFileHistories_FileHistories struct {
	Edges []*GetFileHistories_FileHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetFileHistories_FileHistories) GetEdges() []*GetFileHistories_FileHistories_Edges {
	if t == nil {
		t = &GetFileHistories_FileHistories{}
	}
	return t.Edges
}

type CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Owner struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Owner) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Owner{}
	}
	return t.DisplayName
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Owner) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Owner{}
	}
	return t.ID
}

type CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting struct {
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting{}
	}
	return &t.JoinPolicy
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting{}
	}
	return t.SyncToGithub
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting{}
	}
	return t.SyncToSlack
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting{}
	}
	return &t.Visibility
}

type CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User) GetFirstName() *string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User{}
	}
	return t.FirstName
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User) GetLastName() *string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User{}
	}
	return t.LastName
}

type CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members struct {
	ID   string                                                    "json:\"id\" graphql:\"id\""
	Role enums.Role                                                "json:\"role\" graphql:\"role\""
	User CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User "json:\"user\" graphql:\"user\""
}

func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members{}
	}
	return &t.Role
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members) GetUser() *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members{}
	}
	return &t.User
}

type CreateBulkCSVGroup_CreateBulkCSVGroup_Groups struct {
	Description *string                                                 "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string                                                  "json:\"displayName\" graphql:\"displayName\""
	ID          string                                                  "json:\"id\" graphql:\"id\""
	LogoURL     *string                                                 "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Members     []*CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members "json:\"members,omitempty\" graphql:\"members\""
	Name        string                                                  "json:\"name\" graphql:\"name\""
	Owner       *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Owner     "json:\"owner,omitempty\" graphql:\"owner\""
	Setting     *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting   "json:\"setting,omitempty\" graphql:\"setting\""
	Tags        []string                                                "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.Description
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.DisplayName
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetLogoURL() *string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.LogoURL
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetMembers() []*CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.Members
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetName() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.Name
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetOwner() *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Owner {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.Owner
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetSetting() *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.Setting
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.Tags
}

type CreateBulkCSVGroup_CreateBulkCSVGroup struct {
	Groups []*CreateBulkCSVGroup_CreateBulkCSVGroup_Groups "json:\"groups,omitempty\" graphql:\"groups\""
}

func (t *CreateBulkCSVGroup_CreateBulkCSVGroup) GetGroups() []*CreateBulkCSVGroup_CreateBulkCSVGroup_Groups {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup{}
	}
	return t.Groups
}

type CreateBulkGroup_CreateBulkGroup_Groups_Owner struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkGroup_CreateBulkGroup_Groups_Owner) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Owner{}
	}
	return t.DisplayName
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Owner) GetID() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Owner{}
	}
	return t.ID
}

type CreateBulkGroup_CreateBulkGroup_Groups_Setting struct {
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *CreateBulkGroup_CreateBulkGroup_Groups_Setting) GetID() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Setting{}
	}
	return t.ID
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Setting{}
	}
	return &t.JoinPolicy
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Setting{}
	}
	return t.SyncToGithub
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Setting{}
	}
	return t.SyncToSlack
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Setting{}
	}
	return &t.Visibility
}

type CreateBulkGroup_CreateBulkGroup_Groups_Members_User struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateBulkGroup_CreateBulkGroup_Groups_Members_User) GetFirstName() *string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Members_User{}
	}
	return t.FirstName
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Members_User) GetID() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Members_User{}
	}
	return t.ID
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Members_User) GetLastName() *string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Members_User{}
	}
	return t.LastName
}

type CreateBulkGroup_CreateBulkGroup_Groups_Members struct {
	ID   string                                              "json:\"id\" graphql:\"id\""
	Role enums.Role                                          "json:\"role\" graphql:\"role\""
	User CreateBulkGroup_CreateBulkGroup_Groups_Members_User "json:\"user\" graphql:\"user\""
}

func (t *CreateBulkGroup_CreateBulkGroup_Groups_Members) GetID() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Members{}
	}
	return t.ID
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Members) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Members{}
	}
	return &t.Role
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Members) GetUser() *CreateBulkGroup_CreateBulkGroup_Groups_Members_User {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Members{}
	}
	return &t.User
}

type CreateBulkGroup_CreateBulkGroup_Groups struct {
	Description *string                                           "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string                                            "json:\"displayName\" graphql:\"displayName\""
	ID          string                                            "json:\"id\" graphql:\"id\""
	LogoURL     *string                                           "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Members     []*CreateBulkGroup_CreateBulkGroup_Groups_Members "json:\"members,omitempty\" graphql:\"members\""
	Name        string                                            "json:\"name\" graphql:\"name\""
	Owner       *CreateBulkGroup_CreateBulkGroup_Groups_Owner     "json:\"owner,omitempty\" graphql:\"owner\""
	Setting     *CreateBulkGroup_CreateBulkGroup_Groups_Setting   "json:\"setting,omitempty\" graphql:\"setting\""
	Tags        []string                                          "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetDescription() *string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.Description
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.DisplayName
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetID() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.ID
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetLogoURL() *string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.LogoURL
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetMembers() []*CreateBulkGroup_CreateBulkGroup_Groups_Members {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.Members
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetName() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.Name
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetOwner() *CreateBulkGroup_CreateBulkGroup_Groups_Owner {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.Owner
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetSetting() *CreateBulkGroup_CreateBulkGroup_Groups_Setting {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.Setting
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetTags() []string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.Tags
}

type CreateBulkGroup_CreateBulkGroup struct {
	Groups []*CreateBulkGroup_CreateBulkGroup_Groups "json:\"groups,omitempty\" graphql:\"groups\""
}

func (t *CreateBulkGroup_CreateBulkGroup) GetGroups() []*CreateBulkGroup_CreateBulkGroup_Groups {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup{}
	}
	return t.Groups
}

type CreateGroup_CreateGroup_Group_Owner struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
}

func (t *CreateGroup_CreateGroup_Group_Owner) GetDisplayName() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Owner{}
	}
	return t.DisplayName
}
func (t *CreateGroup_CreateGroup_Group_Owner) GetID() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Owner{}
	}
	return t.ID
}

type CreateGroup_CreateGroup_Group_Setting struct {
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *CreateGroup_CreateGroup_Group_Setting) GetID() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return t.ID
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return &t.JoinPolicy
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return t.SyncToGithub
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return t.SyncToSlack
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return &t.Visibility
}

type CreateGroup_CreateGroup_Group_Permissions struct {
	DisplayID   *string          "json:\"displayID,omitempty\" graphql:\"displayID\""
	ID          *string          "json:\"id,omitempty\" graphql:\"id\""
	Name        *string          "json:\"name,omitempty\" graphql:\"name\""
	ObjectType  string           "json:\"objectType\" graphql:\"objectType\""
	Permissions enums.Permission "json:\"permissions\" graphql:\"permissions\""
}

func (t *CreateGroup_CreateGroup_Group_Permissions) GetDisplayID() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Permissions{}
	}
	return t.DisplayID
}
func (t *CreateGroup_CreateGroup_Group_Permissions) GetID() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Permissions{}
	}
	return t.ID
}
func (t *CreateGroup_CreateGroup_Group_Permissions) GetName() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Permissions{}
	}
	return t.Name
}
func (t *CreateGroup_CreateGroup_Group_Permissions) GetObjectType() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Permissions{}
	}
	return t.ObjectType
}
func (t *CreateGroup_CreateGroup_Group_Permissions) GetPermissions() *enums.Permission {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Permissions{}
	}
	return &t.Permissions
}

type CreateGroup_CreateGroup_Group_Members_User struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateGroup_CreateGroup_Group_Members_User) GetFirstName() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Members_User{}
	}
	return t.FirstName
}
func (t *CreateGroup_CreateGroup_Group_Members_User) GetID() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Members_User{}
	}
	return t.ID
}
func (t *CreateGroup_CreateGroup_Group_Members_User) GetLastName() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Members_User{}
	}
	return t.LastName
}

type CreateGroup_CreateGroup_Group_Members struct {
	ID   string                                     "json:\"id\" graphql:\"id\""
	Role enums.Role                                 "json:\"role\" graphql:\"role\""
	User CreateGroup_CreateGroup_Group_Members_User "json:\"user\" graphql:\"user\""
}

func (t *CreateGroup_CreateGroup_Group_Members) GetID() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Members{}
	}
	return t.ID
}
func (t *CreateGroup_CreateGroup_Group_Members) GetRole() *enums.Role {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Members{}
	}
	return &t.Role
}
func (t *CreateGroup_CreateGroup_Group_Members) GetUser() *CreateGroup_CreateGroup_Group_Members_User {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Members{}
	}
	return &t.User
}

type CreateGroup_CreateGroup_Group struct {
	Description *string                                      "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string                                       "json:\"displayName\" graphql:\"displayName\""
	ID          string                                       "json:\"id\" graphql:\"id\""
	LogoURL     *string                                      "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Members     []*CreateGroup_CreateGroup_Group_Members     "json:\"members,omitempty\" graphql:\"members\""
	Name        string                                       "json:\"name\" graphql:\"name\""
	Owner       *CreateGroup_CreateGroup_Group_Owner         "json:\"owner,omitempty\" graphql:\"owner\""
	Permissions []*CreateGroup_CreateGroup_Group_Permissions "json:\"permissions,omitempty\" graphql:\"permissions\""
	Setting     *CreateGroup_CreateGroup_Group_Setting       "json:\"setting,omitempty\" graphql:\"setting\""
	Tags        []string                                     "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *CreateGroup_CreateGroup_Group) GetDescription() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Description
}
func (t *CreateGroup_CreateGroup_Group) GetDisplayName() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.DisplayName
}
func (t *CreateGroup_CreateGroup_Group) GetID() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.ID
}
func (t *CreateGroup_CreateGroup_Group) GetLogoURL() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.LogoURL
}
func (t *CreateGroup_CreateGroup_Group) GetMembers() []*CreateGroup_CreateGroup_Group_Members {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Members
}
func (t *CreateGroup_CreateGroup_Group) GetName() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Name
}
func (t *CreateGroup_CreateGroup_Group) GetOwner() *CreateGroup_CreateGroup_Group_Owner {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Owner
}
func (t *CreateGroup_CreateGroup_Group) GetPermissions() []*CreateGroup_CreateGroup_Group_Permissions {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Permissions
}
func (t *CreateGroup_CreateGroup_Group) GetSetting() *CreateGroup_CreateGroup_Group_Setting {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Setting
}
func (t *CreateGroup_CreateGroup_Group) GetTags() []string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Tags
}

type CreateGroup_CreateGroup struct {
	Group CreateGroup_CreateGroup_Group "json:\"group\" graphql:\"group\""
}

func (t *CreateGroup_CreateGroup) GetGroup() *CreateGroup_CreateGroup_Group {
	if t == nil {
		t = &CreateGroup_CreateGroup{}
	}
	return &t.Group
}

type CreateGroupByClone_CreateGroupByClone_Group_Members_User struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateGroupByClone_CreateGroupByClone_Group_Members_User) GetFirstName() *string {
	if t == nil {
		t = &CreateGroupByClone_CreateGroupByClone_Group_Members_User{}
	}
	return t.FirstName
}
func (t *CreateGroupByClone_CreateGroupByClone_Group_Members_User) GetLastName() *string {
	if t == nil {
		t = &CreateGroupByClone_CreateGroupByClone_Group_Members_User{}
	}
	return t.LastName
}

type CreateGroupByClone_CreateGroupByClone_Group_Members struct {
	ID   string                                                   "json:\"id\" graphql:\"id\""
	User CreateGroupByClone_CreateGroupByClone_Group_Members_User "json:\"user\" graphql:\"user\""
}

func (t *CreateGroupByClone_CreateGroupByClone_Group_Members) GetID() string {
	if t == nil {
		t = &CreateGroupByClone_CreateGroupByClone_Group_Members{}
	}
	return t.ID
}
func (t *CreateGroupByClone_CreateGroupByClone_Group_Members) GetUser() *CreateGroupByClone_CreateGroupByClone_Group_Members_User {
	if t == nil {
		t = &CreateGroupByClone_CreateGroupByClone_Group_Members{}
	}
	return &t.User
}

type CreateGroupByClone_CreateGroupByClone_Group_Permissions struct {
	DisplayID   *string          "json:\"displayID,omitempty\" graphql:\"displayID\""
	ID          *string          "json:\"id,omitempty\" graphql:\"id\""
	Name        *string          "json:\"name,omitempty\" graphql:\"name\""
	ObjectType  string           "json:\"objectType\" graphql:\"objectType\""
	Permissions enums.Permission "json:\"permissions\" graphql:\"permissions\""
}

func (t *CreateGroupByClone_CreateGroupByClone_Group_Permissions) GetDisplayID() *string {
	if t == nil {
		t = &CreateGroupByClone_CreateGroupByClone_Group_Permissions{}
	}
	return t.DisplayID
}
func (t *CreateGroupByClone_CreateGroupByClone_Group_Permissions) GetID() *string {
	if t == nil {
		t = &CreateGroupByClone_CreateGroupByClone_Group_Permissions{}
	}
	return t.ID
}
func (t *CreateGroupByClone_CreateGroupByClone_Group_Permissions) GetName() *string {
	if t == nil {
		t = &CreateGroupByClone_CreateGroupByClone_Group_Permissions{}
	}
	return t.Name
}
func (t *CreateGroupByClone_CreateGroupByClone_Group_Permissions) GetObjectType() string {
	if t == nil {
		t = &CreateGroupByClone_CreateGroupByClone_Group_Permissions{}
	}
	return t.ObjectType
}
func (t *CreateGroupByClone_CreateGroupByClone_Group_Permissions) GetPermissions() *enums.Permission {
	if t == nil {
		t = &CreateGroupByClone_CreateGroupByClone_Group_Permissions{}
	}
	return &t.Permissions
}

type CreateGroupByClone_CreateGroupByClone_Group struct {
	DisplayID   string                                                     "json:\"displayID\" graphql:\"displayID\""
	ID          string                                                     "json:\"id\" graphql:\"id\""
	Members     []*CreateGroupByClone_CreateGroupByClone_Group_Members     "json:\"members,omitempty\" graphql:\"members\""
	Permissions []*CreateGroupByClone_CreateGroupByClone_Group_Permissions "json:\"permissions,omitempty\" graphql:\"permissions\""
}

func (t *CreateGroupByClone_CreateGroupByClone_Group) GetDisplayID() string {
	if t == nil {
		t = &CreateGroupByClone_CreateGroupByClone_Group{}
	}
	return t.DisplayID
}
func (t *CreateGroupByClone_CreateGroupByClone_Group) GetID() string {
	if t == nil {
		t = &CreateGroupByClone_CreateGroupByClone_Group{}
	}
	return t.ID
}
func (t *CreateGroupByClone_CreateGroupByClone_Group) GetMembers() []*CreateGroupByClone_CreateGroupByClone_Group_Members {
	if t == nil {
		t = &CreateGroupByClone_CreateGroupByClone_Group{}
	}
	return t.Members
}
func (t *CreateGroupByClone_CreateGroupByClone_Group) GetPermissions() []*CreateGroupByClone_CreateGroupByClone_Group_Permissions {
	if t == nil {
		t = &CreateGroupByClone_CreateGroupByClone_Group{}
	}
	return t.Permissions
}

type CreateGroupByClone_CreateGroupByClone struct {
	Group CreateGroupByClone_CreateGroupByClone_Group "json:\"group\" graphql:\"group\""
}

func (t *CreateGroupByClone_CreateGroupByClone) GetGroup() *CreateGroupByClone_CreateGroupByClone_Group {
	if t == nil {
		t = &CreateGroupByClone_CreateGroupByClone{}
	}
	return &t.Group
}

type CreateGroupWithMembers_CreateGroupWithMembers_Group_Setting struct {
	Visibility enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *CreateGroupWithMembers_CreateGroupWithMembers_Group_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &CreateGroupWithMembers_CreateGroupWithMembers_Group_Setting{}
	}
	return &t.Visibility
}

type CreateGroupWithMembers_CreateGroupWithMembers_Group_Members_User struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateGroupWithMembers_CreateGroupWithMembers_Group_Members_User) GetFirstName() *string {
	if t == nil {
		t = &CreateGroupWithMembers_CreateGroupWithMembers_Group_Members_User{}
	}
	return t.FirstName
}
func (t *CreateGroupWithMembers_CreateGroupWithMembers_Group_Members_User) GetID() string {
	if t == nil {
		t = &CreateGroupWithMembers_CreateGroupWithMembers_Group_Members_User{}
	}
	return t.ID
}
func (t *CreateGroupWithMembers_CreateGroupWithMembers_Group_Members_User) GetLastName() *string {
	if t == nil {
		t = &CreateGroupWithMembers_CreateGroupWithMembers_Group_Members_User{}
	}
	return t.LastName
}

type CreateGroupWithMembers_CreateGroupWithMembers_Group_Members struct {
	ID   string                                                           "json:\"id\" graphql:\"id\""
	Role enums.Role                                                       "json:\"role\" graphql:\"role\""
	User CreateGroupWithMembers_CreateGroupWithMembers_Group_Members_User "json:\"user\" graphql:\"user\""
}

func (t *CreateGroupWithMembers_CreateGroupWithMembers_Group_Members) GetID() string {
	if t == nil {
		t = &CreateGroupWithMembers_CreateGroupWithMembers_Group_Members{}
	}
	return t.ID
}
func (t *CreateGroupWithMembers_CreateGroupWithMembers_Group_Members) GetRole() *enums.Role {
	if t == nil {
		t = &CreateGroupWithMembers_CreateGroupWithMembers_Group_Members{}
	}
	return &t.Role
}
func (t *CreateGroupWithMembers_CreateGroupWithMembers_Group_Members) GetUser() *CreateGroupWithMembers_CreateGroupWithMembers_Group_Members_User {
	if t == nil {
		t = &CreateGroupWithMembers_CreateGroupWithMembers_Group_Members{}
	}
	return &t.User
}

type CreateGroupWithMembers_CreateGroupWithMembers_Group struct {
	DisplayID string                                                         "json:\"displayID\" graphql:\"displayID\""
	ID        string                                                         "json:\"id\" graphql:\"id\""
	Members   []*CreateGroupWithMembers_CreateGroupWithMembers_Group_Members "json:\"members,omitempty\" graphql:\"members\""
	Name      string                                                         "json:\"name\" graphql:\"name\""
	Setting   *CreateGroupWithMembers_CreateGroupWithMembers_Group_Setting   "json:\"setting,omitempty\" graphql:\"setting\""
}

func (t *CreateGroupWithMembers_CreateGroupWithMembers_Group) GetDisplayID() string {
	if t == nil {
		t = &CreateGroupWithMembers_CreateGroupWithMembers_Group{}
	}
	return t.DisplayID
}
func (t *CreateGroupWithMembers_CreateGroupWithMembers_Group) GetID() string {
	if t == nil {
		t = &CreateGroupWithMembers_CreateGroupWithMembers_Group{}
	}
	return t.ID
}
func (t *CreateGroupWithMembers_CreateGroupWithMembers_Group) GetMembers() []*CreateGroupWithMembers_CreateGroupWithMembers_Group_Members {
	if t == nil {
		t = &CreateGroupWithMembers_CreateGroupWithMembers_Group{}
	}
	return t.Members
}
func (t *CreateGroupWithMembers_CreateGroupWithMembers_Group) GetName() string {
	if t == nil {
		t = &CreateGroupWithMembers_CreateGroupWithMembers_Group{}
	}
	return t.Name
}
func (t *CreateGroupWithMembers_CreateGroupWithMembers_Group) GetSetting() *CreateGroupWithMembers_CreateGroupWithMembers_Group_Setting {
	if t == nil {
		t = &CreateGroupWithMembers_CreateGroupWithMembers_Group{}
	}
	return t.Setting
}

type CreateGroupWithMembers_CreateGroupWithMembers struct {
	Group CreateGroupWithMembers_CreateGroupWithMembers_Group "json:\"group\" graphql:\"group\""
}

func (t *CreateGroupWithMembers_CreateGroupWithMembers) GetGroup() *CreateGroupWithMembers_CreateGroupWithMembers_Group {
	if t == nil {
		t = &CreateGroupWithMembers_CreateGroupWithMembers{}
	}
	return &t.Group
}

type DeleteGroup_DeleteGroup struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteGroup_DeleteGroup) GetDeletedID() string {
	if t == nil {
		t = &DeleteGroup_DeleteGroup{}
	}
	return t.DeletedID
}

type GetAllGroups_Groups_Edges_Node_Owner struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
}

func (t *GetAllGroups_Groups_Edges_Node_Owner) GetDisplayName() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Owner{}
	}
	return t.DisplayName
}
func (t *GetAllGroups_Groups_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Owner{}
	}
	return t.ID
}

type GetAllGroups_Groups_Edges_Node_Setting struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetAllGroups_Groups_Edges_Node_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.CreatedAt
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.CreatedBy
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetID() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.ID
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return &t.JoinPolicy
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.SyncToGithub
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.SyncToSlack
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.UpdatedBy
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return &t.Visibility
}

type GetAllGroups_Groups_Edges_Node_Members_User struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetAllGroups_Groups_Edges_Node_Members_User) GetFirstName() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Members_User{}
	}
	return t.FirstName
}
func (t *GetAllGroups_Groups_Edges_Node_Members_User) GetID() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Members_User{}
	}
	return t.ID
}
func (t *GetAllGroups_Groups_Edges_Node_Members_User) GetLastName() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Members_User{}
	}
	return t.LastName
}

type GetAllGroups_Groups_Edges_Node_Members struct {
	ID   string                                      "json:\"id\" graphql:\"id\""
	Role enums.Role                                  "json:\"role\" graphql:\"role\""
	User GetAllGroups_Groups_Edges_Node_Members_User "json:\"user\" graphql:\"user\""
}

func (t *GetAllGroups_Groups_Edges_Node_Members) GetID() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Members{}
	}
	return t.ID
}
func (t *GetAllGroups_Groups_Edges_Node_Members) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Members{}
	}
	return &t.Role
}
func (t *GetAllGroups_Groups_Edges_Node_Members) GetUser() *GetAllGroups_Groups_Edges_Node_Members_User {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Members{}
	}
	return &t.User
}

type GetAllGroups_Groups_Edges_Node struct {
	CreatedAt   *time.Time                                "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                   "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string                                    "json:\"displayName\" graphql:\"displayName\""
	ID          string                                    "json:\"id\" graphql:\"id\""
	IsManaged   *bool                                     "json:\"isManaged,omitempty\" graphql:\"isManaged\""
	LogoURL     *string                                   "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Members     []*GetAllGroups_Groups_Edges_Node_Members "json:\"members,omitempty\" graphql:\"members\""
	Name        string                                    "json:\"name\" graphql:\"name\""
	Owner       *GetAllGroups_Groups_Edges_Node_Owner     "json:\"owner,omitempty\" graphql:\"owner\""
	Setting     *GetAllGroups_Groups_Edges_Node_Setting   "json:\"setting,omitempty\" graphql:\"setting\""
	Tags        []string                                  "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                                "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllGroups_Groups_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllGroups_Groups_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllGroups_Groups_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllGroups_Groups_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllGroups_Groups_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllGroups_Groups_Edges_Node) GetIsManaged() *bool {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.IsManaged
}
func (t *GetAllGroups_Groups_Edges_Node) GetLogoURL() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.LogoURL
}
func (t *GetAllGroups_Groups_Edges_Node) GetMembers() []*GetAllGroups_Groups_Edges_Node_Members {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Members
}
func (t *GetAllGroups_Groups_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllGroups_Groups_Edges_Node) GetOwner() *GetAllGroups_Groups_Edges_Node_Owner {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Owner
}
func (t *GetAllGroups_Groups_Edges_Node) GetSetting() *GetAllGroups_Groups_Edges_Node_Setting {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Setting
}
func (t *GetAllGroups_Groups_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllGroups_Groups_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllGroups_Groups_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllGroups_Groups_Edges struct {
	Node *GetAllGroups_Groups_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllGroups_Groups_Edges) GetNode() *GetAllGroups_Groups_Edges_Node {
	if t == nil {
		t = &GetAllGroups_Groups_Edges{}
	}
	return t.Node
}

type GetAllGroups_Groups struct {
	Edges []*GetAllGroups_Groups_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllGroups_Groups) GetEdges() []*GetAllGroups_Groups_Edges {
	if t == nil {
		t = &GetAllGroups_Groups{}
	}
	return t.Edges
}

type GetGroupByID_Group_Owner struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
}

func (t *GetGroupByID_Group_Owner) GetDisplayName() string {
	if t == nil {
		t = &GetGroupByID_Group_Owner{}
	}
	return t.DisplayName
}
func (t *GetGroupByID_Group_Owner) GetID() string {
	if t == nil {
		t = &GetGroupByID_Group_Owner{}
	}
	return t.ID
}

type GetGroupByID_Group_Setting struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetGroupByID_Group_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.CreatedAt
}
func (t *GetGroupByID_Group_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.CreatedBy
}
func (t *GetGroupByID_Group_Setting) GetID() string {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.ID
}
func (t *GetGroupByID_Group_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return &t.JoinPolicy
}
func (t *GetGroupByID_Group_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.SyncToGithub
}
func (t *GetGroupByID_Group_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.SyncToSlack
}
func (t *GetGroupByID_Group_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetGroupByID_Group_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.UpdatedBy
}
func (t *GetGroupByID_Group_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return &t.Visibility
}

type GetGroupByID_Group_Permissions struct {
	DisplayID   *string          "json:\"displayID,omitempty\" graphql:\"displayID\""
	ID          *string          "json:\"id,omitempty\" graphql:\"id\""
	Name        *string          "json:\"name,omitempty\" graphql:\"name\""
	ObjectType  string           "json:\"objectType\" graphql:\"objectType\""
	Permissions enums.Permission "json:\"permissions\" graphql:\"permissions\""
}

func (t *GetGroupByID_Group_Permissions) GetDisplayID() *string {
	if t == nil {
		t = &GetGroupByID_Group_Permissions{}
	}
	return t.DisplayID
}
func (t *GetGroupByID_Group_Permissions) GetID() *string {
	if t == nil {
		t = &GetGroupByID_Group_Permissions{}
	}
	return t.ID
}
func (t *GetGroupByID_Group_Permissions) GetName() *string {
	if t == nil {
		t = &GetGroupByID_Group_Permissions{}
	}
	return t.Name
}
func (t *GetGroupByID_Group_Permissions) GetObjectType() string {
	if t == nil {
		t = &GetGroupByID_Group_Permissions{}
	}
	return t.ObjectType
}
func (t *GetGroupByID_Group_Permissions) GetPermissions() *enums.Permission {
	if t == nil {
		t = &GetGroupByID_Group_Permissions{}
	}
	return &t.Permissions
}

type GetGroupByID_Group_Members_User struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetGroupByID_Group_Members_User) GetFirstName() *string {
	if t == nil {
		t = &GetGroupByID_Group_Members_User{}
	}
	return t.FirstName
}
func (t *GetGroupByID_Group_Members_User) GetID() string {
	if t == nil {
		t = &GetGroupByID_Group_Members_User{}
	}
	return t.ID
}
func (t *GetGroupByID_Group_Members_User) GetLastName() *string {
	if t == nil {
		t = &GetGroupByID_Group_Members_User{}
	}
	return t.LastName
}

type GetGroupByID_Group_Members struct {
	ID   string                          "json:\"id\" graphql:\"id\""
	Role enums.Role                      "json:\"role\" graphql:\"role\""
	User GetGroupByID_Group_Members_User "json:\"user\" graphql:\"user\""
}

func (t *GetGroupByID_Group_Members) GetID() string {
	if t == nil {
		t = &GetGroupByID_Group_Members{}
	}
	return t.ID
}
func (t *GetGroupByID_Group_Members) GetRole() *enums.Role {
	if t == nil {
		t = &GetGroupByID_Group_Members{}
	}
	return &t.Role
}
func (t *GetGroupByID_Group_Members) GetUser() *GetGroupByID_Group_Members_User {
	if t == nil {
		t = &GetGroupByID_Group_Members{}
	}
	return &t.User
}

type GetGroupByID_Group struct {
	CreatedAt   *time.Time                        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                           "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string                            "json:\"displayName\" graphql:\"displayName\""
	ID          string                            "json:\"id\" graphql:\"id\""
	IsManaged   *bool                             "json:\"isManaged,omitempty\" graphql:\"isManaged\""
	LogoURL     *string                           "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Members     []*GetGroupByID_Group_Members     "json:\"members,omitempty\" graphql:\"members\""
	Name        string                            "json:\"name\" graphql:\"name\""
	Owner       *GetGroupByID_Group_Owner         "json:\"owner,omitempty\" graphql:\"owner\""
	Permissions []*GetGroupByID_Group_Permissions "json:\"permissions,omitempty\" graphql:\"permissions\""
	Setting     *GetGroupByID_Group_Setting       "json:\"setting,omitempty\" graphql:\"setting\""
	Tags        []string                          "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetGroupByID_Group) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.CreatedAt
}
func (t *GetGroupByID_Group) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.CreatedBy
}
func (t *GetGroupByID_Group) GetDescription() *string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Description
}
func (t *GetGroupByID_Group) GetDisplayName() string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.DisplayName
}
func (t *GetGroupByID_Group) GetID() string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.ID
}
func (t *GetGroupByID_Group) GetIsManaged() *bool {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.IsManaged
}
func (t *GetGroupByID_Group) GetLogoURL() *string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.LogoURL
}
func (t *GetGroupByID_Group) GetMembers() []*GetGroupByID_Group_Members {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Members
}
func (t *GetGroupByID_Group) GetName() string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Name
}
func (t *GetGroupByID_Group) GetOwner() *GetGroupByID_Group_Owner {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Owner
}
func (t *GetGroupByID_Group) GetPermissions() []*GetGroupByID_Group_Permissions {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Permissions
}
func (t *GetGroupByID_Group) GetSetting() *GetGroupByID_Group_Setting {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Setting
}
func (t *GetGroupByID_Group) GetTags() []string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Tags
}
func (t *GetGroupByID_Group) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.UpdatedAt
}
func (t *GetGroupByID_Group) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.UpdatedBy
}

type GetGroups_Groups_Edges_Node_Owner struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
}

func (t *GetGroups_Groups_Edges_Node_Owner) GetDisplayName() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Owner{}
	}
	return t.DisplayName
}
func (t *GetGroups_Groups_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Owner{}
	}
	return t.ID
}

type GetGroups_Groups_Edges_Node_Setting struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetGroups_Groups_Edges_Node_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.CreatedAt
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.CreatedBy
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetID() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.ID
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return &t.JoinPolicy
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.SyncToGithub
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.SyncToSlack
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.UpdatedBy
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return &t.Visibility
}

type GetGroups_Groups_Edges_Node_Permissions struct {
	DisplayID   *string          "json:\"displayID,omitempty\" graphql:\"displayID\""
	ID          *string          "json:\"id,omitempty\" graphql:\"id\""
	Name        *string          "json:\"name,omitempty\" graphql:\"name\""
	ObjectType  string           "json:\"objectType\" graphql:\"objectType\""
	Permissions enums.Permission "json:\"permissions\" graphql:\"permissions\""
}

func (t *GetGroups_Groups_Edges_Node_Permissions) GetDisplayID() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Permissions{}
	}
	return t.DisplayID
}
func (t *GetGroups_Groups_Edges_Node_Permissions) GetID() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Permissions{}
	}
	return t.ID
}
func (t *GetGroups_Groups_Edges_Node_Permissions) GetName() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Permissions{}
	}
	return t.Name
}
func (t *GetGroups_Groups_Edges_Node_Permissions) GetObjectType() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Permissions{}
	}
	return t.ObjectType
}
func (t *GetGroups_Groups_Edges_Node_Permissions) GetPermissions() *enums.Permission {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Permissions{}
	}
	return &t.Permissions
}

type GetGroups_Groups_Edges_Node_Members_User struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetGroups_Groups_Edges_Node_Members_User) GetFirstName() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Members_User{}
	}
	return t.FirstName
}
func (t *GetGroups_Groups_Edges_Node_Members_User) GetID() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Members_User{}
	}
	return t.ID
}
func (t *GetGroups_Groups_Edges_Node_Members_User) GetLastName() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Members_User{}
	}
	return t.LastName
}

type GetGroups_Groups_Edges_Node_Members struct {
	ID   string                                   "json:\"id\" graphql:\"id\""
	Role enums.Role                               "json:\"role\" graphql:\"role\""
	User GetGroups_Groups_Edges_Node_Members_User "json:\"user\" graphql:\"user\""
}

func (t *GetGroups_Groups_Edges_Node_Members) GetID() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Members{}
	}
	return t.ID
}
func (t *GetGroups_Groups_Edges_Node_Members) GetRole() *enums.Role {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Members{}
	}
	return &t.Role
}
func (t *GetGroups_Groups_Edges_Node_Members) GetUser() *GetGroups_Groups_Edges_Node_Members_User {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Members{}
	}
	return &t.User
}

type GetGroups_Groups_Edges_Node struct {
	CreatedAt   *time.Time                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                    "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string                                     "json:\"displayName\" graphql:\"displayName\""
	ID          string                                     "json:\"id\" graphql:\"id\""
	IsManaged   *bool                                      "json:\"isManaged,omitempty\" graphql:\"isManaged\""
	LogoURL     *string                                    "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Members     []*GetGroups_Groups_Edges_Node_Members     "json:\"members,omitempty\" graphql:\"members\""
	Name        string                                     "json:\"name\" graphql:\"name\""
	Owner       *GetGroups_Groups_Edges_Node_Owner         "json:\"owner,omitempty\" graphql:\"owner\""
	Permissions []*GetGroups_Groups_Edges_Node_Permissions "json:\"permissions,omitempty\" graphql:\"permissions\""
	Setting     *GetGroups_Groups_Edges_Node_Setting       "json:\"setting,omitempty\" graphql:\"setting\""
	Tags        []string                                   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetGroups_Groups_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetGroups_Groups_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetGroups_Groups_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.Description
}
func (t *GetGroups_Groups_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetGroups_Groups_Edges_Node) GetID() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.ID
}
func (t *GetGroups_Groups_Edges_Node) GetIsManaged() *bool {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.IsManaged
}
func (t *GetGroups_Groups_Edges_Node) GetLogoURL() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.LogoURL
}
func (t *GetGroups_Groups_Edges_Node) GetMembers() []*GetGroups_Groups_Edges_Node_Members {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.Members
}
func (t *GetGroups_Groups_Edges_Node) GetName() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.Name
}
func (t *GetGroups_Groups_Edges_Node) GetOwner() *GetGroups_Groups_Edges_Node_Owner {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.Owner
}
func (t *GetGroups_Groups_Edges_Node) GetPermissions() []*GetGroups_Groups_Edges_Node_Permissions {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.Permissions
}
func (t *GetGroups_Groups_Edges_Node) GetSetting() *GetGroups_Groups_Edges_Node_Setting {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.Setting
}
func (t *GetGroups_Groups_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.Tags
}
func (t *GetGroups_Groups_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetGroups_Groups_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetGroups_Groups_Edges struct {
	Node *GetGroups_Groups_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetGroups_Groups_Edges) GetNode() *GetGroups_Groups_Edges_Node {
	if t == nil {
		t = &GetGroups_Groups_Edges{}
	}
	return t.Node
}

type GetGroups_Groups struct {
	Edges []*GetGroups_Groups_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetGroups_Groups) GetEdges() []*GetGroups_Groups_Edges {
	if t == nil {
		t = &GetGroups_Groups{}
	}
	return t.Edges
}

type UpdateGroup_UpdateGroup_Group_Owner struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
}

func (t *UpdateGroup_UpdateGroup_Group_Owner) GetDisplayName() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Owner{}
	}
	return t.DisplayName
}
func (t *UpdateGroup_UpdateGroup_Group_Owner) GetID() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Owner{}
	}
	return t.ID
}

type UpdateGroup_UpdateGroup_Group_Setting struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *UpdateGroup_UpdateGroup_Group_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.CreatedAt
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.CreatedBy
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetID() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.ID
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return &t.JoinPolicy
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.SyncToGithub
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.SyncToSlack
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.UpdatedAt
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.UpdatedBy
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return &t.Visibility
}

type UpdateGroup_UpdateGroup_Group_Permissions struct {
	DisplayID   *string          "json:\"displayID,omitempty\" graphql:\"displayID\""
	ID          *string          "json:\"id,omitempty\" graphql:\"id\""
	Name        *string          "json:\"name,omitempty\" graphql:\"name\""
	ObjectType  string           "json:\"objectType\" graphql:\"objectType\""
	Permissions enums.Permission "json:\"permissions\" graphql:\"permissions\""
}

func (t *UpdateGroup_UpdateGroup_Group_Permissions) GetDisplayID() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Permissions{}
	}
	return t.DisplayID
}
func (t *UpdateGroup_UpdateGroup_Group_Permissions) GetID() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Permissions{}
	}
	return t.ID
}
func (t *UpdateGroup_UpdateGroup_Group_Permissions) GetName() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Permissions{}
	}
	return t.Name
}
func (t *UpdateGroup_UpdateGroup_Group_Permissions) GetObjectType() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Permissions{}
	}
	return t.ObjectType
}
func (t *UpdateGroup_UpdateGroup_Group_Permissions) GetPermissions() *enums.Permission {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Permissions{}
	}
	return &t.Permissions
}

type UpdateGroup_UpdateGroup_Group_Members_User struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *UpdateGroup_UpdateGroup_Group_Members_User) GetFirstName() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Members_User{}
	}
	return t.FirstName
}
func (t *UpdateGroup_UpdateGroup_Group_Members_User) GetID() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Members_User{}
	}
	return t.ID
}
func (t *UpdateGroup_UpdateGroup_Group_Members_User) GetLastName() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Members_User{}
	}
	return t.LastName
}

type UpdateGroup_UpdateGroup_Group_Members struct {
	ID   string                                     "json:\"id\" graphql:\"id\""
	Role enums.Role                                 "json:\"role\" graphql:\"role\""
	User UpdateGroup_UpdateGroup_Group_Members_User "json:\"user\" graphql:\"user\""
}

func (t *UpdateGroup_UpdateGroup_Group_Members) GetID() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Members{}
	}
	return t.ID
}
func (t *UpdateGroup_UpdateGroup_Group_Members) GetRole() *enums.Role {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Members{}
	}
	return &t.Role
}
func (t *UpdateGroup_UpdateGroup_Group_Members) GetUser() *UpdateGroup_UpdateGroup_Group_Members_User {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Members{}
	}
	return &t.User
}

type UpdateGroup_UpdateGroup_Group struct {
	Description *string                                      "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string                                       "json:\"displayName\" graphql:\"displayName\""
	ID          string                                       "json:\"id\" graphql:\"id\""
	LogoURL     *string                                      "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Members     []*UpdateGroup_UpdateGroup_Group_Members     "json:\"members,omitempty\" graphql:\"members\""
	Name        string                                       "json:\"name\" graphql:\"name\""
	Owner       *UpdateGroup_UpdateGroup_Group_Owner         "json:\"owner,omitempty\" graphql:\"owner\""
	Permissions []*UpdateGroup_UpdateGroup_Group_Permissions "json:\"permissions,omitempty\" graphql:\"permissions\""
	Setting     *UpdateGroup_UpdateGroup_Group_Setting       "json:\"setting,omitempty\" graphql:\"setting\""
	Tags        []string                                     "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *UpdateGroup_UpdateGroup_Group) GetDescription() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Description
}
func (t *UpdateGroup_UpdateGroup_Group) GetDisplayName() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.DisplayName
}
func (t *UpdateGroup_UpdateGroup_Group) GetID() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.ID
}
func (t *UpdateGroup_UpdateGroup_Group) GetLogoURL() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.LogoURL
}
func (t *UpdateGroup_UpdateGroup_Group) GetMembers() []*UpdateGroup_UpdateGroup_Group_Members {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Members
}
func (t *UpdateGroup_UpdateGroup_Group) GetName() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Name
}
func (t *UpdateGroup_UpdateGroup_Group) GetOwner() *UpdateGroup_UpdateGroup_Group_Owner {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Owner
}
func (t *UpdateGroup_UpdateGroup_Group) GetPermissions() []*UpdateGroup_UpdateGroup_Group_Permissions {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Permissions
}
func (t *UpdateGroup_UpdateGroup_Group) GetSetting() *UpdateGroup_UpdateGroup_Group_Setting {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Setting
}
func (t *UpdateGroup_UpdateGroup_Group) GetTags() []string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Tags
}

type UpdateGroup_UpdateGroup struct {
	Group UpdateGroup_UpdateGroup_Group "json:\"group\" graphql:\"group\""
}

func (t *UpdateGroup_UpdateGroup) GetGroup() *UpdateGroup_UpdateGroup_Group {
	if t == nil {
		t = &UpdateGroup_UpdateGroup{}
	}
	return &t.Group
}

type GetAllGroupHistories_GroupHistories_Edges_Node struct {
	CreatedAt       *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string        "json:\"description,omitempty\" graphql:\"description\""
	DisplayName     string         "json:\"displayName\" graphql:\"displayName\""
	GravatarLogoURL *string        "json:\"gravatarLogoURL,omitempty\" graphql:\"gravatarLogoURL\""
	HistoryTime     time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID              string         "json:\"id\" graphql:\"id\""
	LogoURL         *string        "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name            string         "json:\"name\" graphql:\"name\""
	Operation       history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID         *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref             *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags            []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetGravatarLogoURL() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.GravatarLogoURL
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetLogoURL() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.LogoURL
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllGroupHistories_GroupHistories_Edges struct {
	Node *GetAllGroupHistories_GroupHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllGroupHistories_GroupHistories_Edges) GetNode() *GetAllGroupHistories_GroupHistories_Edges_Node {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges{}
	}
	return t.Node
}

type GetAllGroupHistories_GroupHistories struct {
	Edges []*GetAllGroupHistories_GroupHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllGroupHistories_GroupHistories) GetEdges() []*GetAllGroupHistories_GroupHistories_Edges {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories{}
	}
	return t.Edges
}

type GetGroupHistories_GroupHistories_Edges_Node struct {
	CreatedAt       *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string        "json:\"description,omitempty\" graphql:\"description\""
	DisplayName     string         "json:\"displayName\" graphql:\"displayName\""
	GravatarLogoURL *string        "json:\"gravatarLogoURL,omitempty\" graphql:\"gravatarLogoURL\""
	HistoryTime     time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID              string         "json:\"id\" graphql:\"id\""
	LogoURL         *string        "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name            string         "json:\"name\" graphql:\"name\""
	Operation       history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID         *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref             *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags            []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetGroupHistories_GroupHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetGravatarLogoURL() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.GravatarLogoURL
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetLogoURL() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.LogoURL
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetGroupHistories_GroupHistories_Edges struct {
	Node *GetGroupHistories_GroupHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetGroupHistories_GroupHistories_Edges) GetNode() *GetGroupHistories_GroupHistories_Edges_Node {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges{}
	}
	return t.Node
}

type GetGroupHistories_GroupHistories struct {
	Edges []*GetGroupHistories_GroupHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetGroupHistories_GroupHistories) GetEdges() []*GetGroupHistories_GroupHistories_Edges {
	if t == nil {
		t = &GetGroupHistories_GroupHistories{}
	}
	return t.Edges
}

type AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_Group) GetID() string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_Group{}
	}
	return t.ID
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_Group) GetName() string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_Group{}
	}
	return t.Name
}

type AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User) GetDisplayName() string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User{}
	}
	return t.DisplayName
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User) GetEmail() string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User{}
	}
	return t.Email
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User) GetFirstName() *string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User{}
	}
	return t.FirstName
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User) GetID() string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User{}
	}
	return t.ID
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User) GetLastName() *string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User{}
	}
	return t.LastName
}

type AddUserToGroupWithRole_CreateGroupMembership_GroupMembership struct {
	Group   AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_Group "json:\"group\" graphql:\"group\""
	GroupID string                                                             "json:\"groupID\" graphql:\"groupID\""
	ID      string                                                             "json:\"id\" graphql:\"id\""
	Role    enums.Role                                                         "json:\"role\" graphql:\"role\""
	User    AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User  "json:\"user\" graphql:\"user\""
	UserID  string                                                             "json:\"userID\" graphql:\"userID\""
}

func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership) GetGroup() *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_Group {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership{}
	}
	return &t.Group
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership) GetGroupID() string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership{}
	}
	return t.GroupID
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership) GetID() string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership{}
	}
	return t.ID
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership) GetRole() *enums.Role {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership{}
	}
	return &t.Role
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership) GetUser() *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership{}
	}
	return &t.User
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership) GetUserID() string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership{}
	}
	return t.UserID
}

type AddUserToGroupWithRole_CreateGroupMembership struct {
	GroupMembership AddUserToGroupWithRole_CreateGroupMembership_GroupMembership "json:\"groupMembership\" graphql:\"groupMembership\""
}

func (t *AddUserToGroupWithRole_CreateGroupMembership) GetGroupMembership() *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership{}
	}
	return &t.GroupMembership
}

type CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_Group) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_Group{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_Group) GetName() string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_Group{}
	}
	return t.Name
}

type CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User{}
	}
	return t.DisplayName
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User) GetEmail() string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User{}
	}
	return t.Email
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User) GetFirstName() *string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User{}
	}
	return t.FirstName
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User) GetLastName() *string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User{}
	}
	return t.LastName
}

type CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships struct {
	Group   CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_Group "json:\"group\" graphql:\"group\""
	GroupID string                                                                        "json:\"groupID\" graphql:\"groupID\""
	ID      string                                                                        "json:\"id\" graphql:\"id\""
	Role    enums.Role                                                                    "json:\"role\" graphql:\"role\""
	User    CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User  "json:\"user\" graphql:\"user\""
	UserID  string                                                                        "json:\"userID\" graphql:\"userID\""
}

func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships) GetGroup() *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_Group {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return &t.Group
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships) GetGroupID() string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return t.GroupID
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships) GetUser() *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return &t.User
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships) GetUserID() string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return t.UserID
}

type CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership struct {
	GroupMemberships []*CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships "json:\"groupMemberships,omitempty\" graphql:\"groupMemberships\""
}

func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership) GetGroupMemberships() []*CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership{}
	}
	return t.GroupMemberships
}

type CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_Group) GetID() string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_Group{}
	}
	return t.ID
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_Group) GetName() string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_Group{}
	}
	return t.Name
}

type CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User{}
	}
	return t.DisplayName
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User) GetEmail() string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User{}
	}
	return t.Email
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User) GetFirstName() *string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User{}
	}
	return t.FirstName
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User) GetID() string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User{}
	}
	return t.ID
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User) GetLastName() *string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User{}
	}
	return t.LastName
}

type CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships struct {
	Group   CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_Group "json:\"group\" graphql:\"group\""
	GroupID string                                                                  "json:\"groupID\" graphql:\"groupID\""
	ID      string                                                                  "json:\"id\" graphql:\"id\""
	Role    enums.Role                                                              "json:\"role\" graphql:\"role\""
	User    CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User  "json:\"user\" graphql:\"user\""
	UserID  string                                                                  "json:\"userID\" graphql:\"userID\""
}

func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships) GetGroup() *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_Group {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships{}
	}
	return &t.Group
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships) GetGroupID() string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships{}
	}
	return t.GroupID
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships{}
	}
	return t.ID
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships) GetUser() *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships{}
	}
	return &t.User
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships) GetUserID() string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships{}
	}
	return t.UserID
}

type CreateBulkGroupMembers_CreateBulkGroupMembership struct {
	GroupMemberships []*CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships "json:\"groupMemberships,omitempty\" graphql:\"groupMemberships\""
}

func (t *CreateBulkGroupMembers_CreateBulkGroupMembership) GetGroupMemberships() []*CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership{}
	}
	return t.GroupMemberships
}

type GetGroupMembersByGroupID_GroupMemberships_Edges_Node_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_Group) GetID() string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node_Group{}
	}
	return t.ID
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_Group) GetName() string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node_Group{}
	}
	return t.Name
}

type GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User) GetDisplayName() string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User{}
	}
	return t.DisplayName
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User) GetEmail() string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User{}
	}
	return t.Email
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User) GetFirstName() *string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User{}
	}
	return t.FirstName
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User) GetID() string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User{}
	}
	return t.ID
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User) GetLastName() *string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User{}
	}
	return t.LastName
}

type GetGroupMembersByGroupID_GroupMemberships_Edges_Node struct {
	Group   GetGroupMembersByGroupID_GroupMemberships_Edges_Node_Group "json:\"group\" graphql:\"group\""
	GroupID string                                                     "json:\"groupID\" graphql:\"groupID\""
	ID      string                                                     "json:\"id\" graphql:\"id\""
	Role    enums.Role                                                 "json:\"role\" graphql:\"role\""
	User    GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User  "json:\"user\" graphql:\"user\""
	UserID  string                                                     "json:\"userID\" graphql:\"userID\""
}

func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node) GetGroup() *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_Group {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node{}
	}
	return &t.Group
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node) GetGroupID() string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node{}
	}
	return t.GroupID
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node{}
	}
	return t.ID
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node{}
	}
	return &t.Role
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node) GetUser() *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node{}
	}
	return &t.User
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node{}
	}
	return t.UserID
}

type GetGroupMembersByGroupID_GroupMemberships_Edges struct {
	Node *GetGroupMembersByGroupID_GroupMemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetGroupMembersByGroupID_GroupMemberships_Edges) GetNode() *GetGroupMembersByGroupID_GroupMemberships_Edges_Node {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges{}
	}
	return t.Node
}

type GetGroupMembersByGroupID_GroupMemberships struct {
	Edges []*GetGroupMembersByGroupID_GroupMemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetGroupMembersByGroupID_GroupMemberships) GetEdges() []*GetGroupMembersByGroupID_GroupMemberships_Edges {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships{}
	}
	return t.Edges
}

type RemoveUserFromGroup_DeleteGroupMembership struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *RemoveUserFromGroup_DeleteGroupMembership) GetDeletedID() string {
	if t == nil {
		t = &RemoveUserFromGroup_DeleteGroupMembership{}
	}
	return t.DeletedID
}

type UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_Group) GetID() string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_Group{}
	}
	return t.ID
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_Group) GetName() string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_Group{}
	}
	return t.Name
}

type UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User) GetDisplayName() string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User{}
	}
	return t.DisplayName
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User) GetEmail() string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User{}
	}
	return t.Email
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User) GetFirstName() *string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User{}
	}
	return t.FirstName
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User) GetID() string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User{}
	}
	return t.ID
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User) GetLastName() *string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User{}
	}
	return t.LastName
}

type UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership struct {
	Group   UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_Group "json:\"group\" graphql:\"group\""
	GroupID string                                                            "json:\"groupID\" graphql:\"groupID\""
	ID      string                                                            "json:\"id\" graphql:\"id\""
	Role    enums.Role                                                        "json:\"role\" graphql:\"role\""
	User    UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User  "json:\"user\" graphql:\"user\""
	UserID  string                                                            "json:\"userID\" graphql:\"userID\""
}

func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership) GetGroup() *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_Group {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership{}
	}
	return &t.Group
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership) GetGroupID() string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership{}
	}
	return t.GroupID
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership) GetID() string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership{}
	}
	return t.ID
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership) GetRole() *enums.Role {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership{}
	}
	return &t.Role
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership) GetUser() *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership{}
	}
	return &t.User
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership) GetUserID() string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership{}
	}
	return t.UserID
}

type UpdateUserRoleInGroup_UpdateGroupMembership struct {
	GroupMembership UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership "json:\"groupMembership\" graphql:\"groupMembership\""
}

func (t *UpdateUserRoleInGroup_UpdateGroupMembership) GetGroupMembership() *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership{}
	}
	return &t.GroupMembership
}

type GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID     string         "json:\"groupID\" graphql:\"groupID\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Role        enums.Role     "json:\"role\" graphql:\"role\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID      string         "json:\"userID\" graphql:\"userID\""
}

func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetGroupID() string {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.GroupID
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return &t.Role
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.UserID
}

type GetAllGroupMembershipHistories_GroupMembershipHistories_Edges struct {
	Node *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges) GetNode() *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges{}
	}
	return t.Node
}

type GetAllGroupMembershipHistories_GroupMembershipHistories struct {
	Edges []*GetAllGroupMembershipHistories_GroupMembershipHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllGroupMembershipHistories_GroupMembershipHistories) GetEdges() []*GetAllGroupMembershipHistories_GroupMembershipHistories_Edges {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories{}
	}
	return t.Edges
}

type GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID     string         "json:\"groupID\" graphql:\"groupID\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Role        enums.Role     "json:\"role\" graphql:\"role\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID      string         "json:\"userID\" graphql:\"userID\""
}

func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetGroupID() string {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.GroupID
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return &t.Role
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.UserID
}

type GetGroupMembershipHistories_GroupMembershipHistories_Edges struct {
	Node *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges) GetNode() *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges{}
	}
	return t.Node
}

type GetGroupMembershipHistories_GroupMembershipHistories struct {
	Edges []*GetGroupMembershipHistories_GroupMembershipHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetGroupMembershipHistories_GroupMembershipHistories) GetEdges() []*GetGroupMembershipHistories_GroupMembershipHistories_Edges {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories{}
	}
	return t.Edges
}

type GetAllGroupSettings_GroupSettings_Edges_Node_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllGroupSettings_GroupSettings_Edges_Node_Group) GetID() string {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node_Group{}
	}
	return t.ID
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node_Group) GetName() string {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node_Group{}
	}
	return t.Name
}

type GetAllGroupSettings_GroupSettings_Edges_Node struct {
	CreatedAt    *time.Time                                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Group        *GetAllGroupSettings_GroupSettings_Edges_Node_Group "json:\"group,omitempty\" graphql:\"group\""
	ID           string                                              "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy                                    "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool                                               "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool                                               "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	UpdatedAt    *time.Time                                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility                                    "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetGroup() *GetAllGroupSettings_GroupSettings_Edges_Node_Group {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.Group
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return &t.JoinPolicy
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.SyncToGithub
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.SyncToSlack
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return &t.Visibility
}

type GetAllGroupSettings_GroupSettings_Edges struct {
	Node *GetAllGroupSettings_GroupSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllGroupSettings_GroupSettings_Edges) GetNode() *GetAllGroupSettings_GroupSettings_Edges_Node {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges{}
	}
	return t.Node
}

type GetAllGroupSettings_GroupSettings struct {
	Edges []*GetAllGroupSettings_GroupSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllGroupSettings_GroupSettings) GetEdges() []*GetAllGroupSettings_GroupSettings_Edges {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings{}
	}
	return t.Edges
}

type GetGroupSettingByID_GroupSetting_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetGroupSettingByID_GroupSetting_Group) GetID() string {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting_Group{}
	}
	return t.ID
}
func (t *GetGroupSettingByID_GroupSetting_Group) GetName() string {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting_Group{}
	}
	return t.Name
}

type GetGroupSettingByID_GroupSetting struct {
	CreatedAt    *time.Time                              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Group        *GetGroupSettingByID_GroupSetting_Group "json:\"group,omitempty\" graphql:\"group\""
	ID           string                                  "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy                        "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool                                   "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool                                   "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	UpdatedAt    *time.Time                              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility                        "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetGroupSettingByID_GroupSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.CreatedAt
}
func (t *GetGroupSettingByID_GroupSetting) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.CreatedBy
}
func (t *GetGroupSettingByID_GroupSetting) GetGroup() *GetGroupSettingByID_GroupSetting_Group {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.Group
}
func (t *GetGroupSettingByID_GroupSetting) GetID() string {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.ID
}
func (t *GetGroupSettingByID_GroupSetting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return &t.JoinPolicy
}
func (t *GetGroupSettingByID_GroupSetting) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.SyncToGithub
}
func (t *GetGroupSettingByID_GroupSetting) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.SyncToSlack
}
func (t *GetGroupSettingByID_GroupSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.UpdatedAt
}
func (t *GetGroupSettingByID_GroupSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.UpdatedBy
}
func (t *GetGroupSettingByID_GroupSetting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return &t.Visibility
}

type GetGroupSettings_GroupSettings_Edges_Node_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetGroupSettings_GroupSettings_Edges_Node_Group) GetID() string {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node_Group{}
	}
	return t.ID
}
func (t *GetGroupSettings_GroupSettings_Edges_Node_Group) GetName() string {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node_Group{}
	}
	return t.Name
}

type GetGroupSettings_GroupSettings_Edges_Node struct {
	CreatedAt    *time.Time                                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Group        *GetGroupSettings_GroupSettings_Edges_Node_Group "json:\"group,omitempty\" graphql:\"group\""
	ID           string                                           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy                                 "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool                                            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool                                            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	UpdatedAt    *time.Time                                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility                                 "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetGroupSettings_GroupSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetGroup() *GetGroupSettings_GroupSettings_Edges_Node_Group {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.Group
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return &t.JoinPolicy
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.SyncToGithub
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.SyncToSlack
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return &t.Visibility
}

type GetGroupSettings_GroupSettings_Edges struct {
	Node *GetGroupSettings_GroupSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetGroupSettings_GroupSettings_Edges) GetNode() *GetGroupSettings_GroupSettings_Edges_Node {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges{}
	}
	return t.Node
}

type GetGroupSettings_GroupSettings struct {
	Edges []*GetGroupSettings_GroupSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetGroupSettings_GroupSettings) GetEdges() []*GetGroupSettings_GroupSettings_Edges {
	if t == nil {
		t = &GetGroupSettings_GroupSettings{}
	}
	return t.Edges
}

type UpdateGroupSetting_UpdateGroupSetting_GroupSetting_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting_Group) GetID() string {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting_Group{}
	}
	return t.ID
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting_Group) GetName() string {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting_Group{}
	}
	return t.Name
}

type UpdateGroupSetting_UpdateGroupSetting_GroupSetting struct {
	CreatedAt    *time.Time                                                "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                                   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Group        *UpdateGroupSetting_UpdateGroupSetting_GroupSetting_Group "json:\"group,omitempty\" graphql:\"group\""
	ID           string                                                    "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy                                          "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool                                                     "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool                                                     "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	UpdatedAt    *time.Time                                                "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                                   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility                                          "json:\"visibility\" graphql:\"visibility\""
}

func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.CreatedAt
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.CreatedBy
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetGroup() *UpdateGroupSetting_UpdateGroupSetting_GroupSetting_Group {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.Group
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetID() string {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.ID
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return &t.JoinPolicy
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetSyncToGithub() *bool {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.SyncToGithub
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetSyncToSlack() *bool {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.SyncToSlack
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.UpdatedAt
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.UpdatedBy
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return &t.Visibility
}

type UpdateGroupSetting_UpdateGroupSetting struct {
	GroupSetting UpdateGroupSetting_UpdateGroupSetting_GroupSetting "json:\"groupSetting\" graphql:\"groupSetting\""
}

func (t *UpdateGroupSetting_UpdateGroupSetting) GetGroupSetting() *UpdateGroupSetting_UpdateGroupSetting_GroupSetting {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting{}
	}
	return &t.GroupSetting
}

type GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID      *string          "json:\"groupID,omitempty\" graphql:\"groupID\""
	HistoryTime  time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	Operation    history.OpType   "json:\"operation\" graphql:\"operation\""
	Ref          *string          "json:\"ref,omitempty\" graphql:\"ref\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetGroupID() *string {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.GroupID
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.JoinPolicy
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.SyncToGithub
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.SyncToSlack
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.Visibility
}

type GetAllGroupSettingHistories_GroupSettingHistories_Edges struct {
	Node *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges) GetNode() *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges{}
	}
	return t.Node
}

type GetAllGroupSettingHistories_GroupSettingHistories struct {
	Edges []*GetAllGroupSettingHistories_GroupSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllGroupSettingHistories_GroupSettingHistories) GetEdges() []*GetAllGroupSettingHistories_GroupSettingHistories_Edges {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories{}
	}
	return t.Edges
}

type GetGroupSettingHistories_GroupSettingHistories_Edges_Node struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID      *string          "json:\"groupID,omitempty\" graphql:\"groupID\""
	HistoryTime  time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	Operation    history.OpType   "json:\"operation\" graphql:\"operation\""
	Ref          *string          "json:\"ref,omitempty\" graphql:\"ref\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetGroupID() *string {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.GroupID
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.JoinPolicy
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.SyncToGithub
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.SyncToSlack
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.Visibility
}

type GetGroupSettingHistories_GroupSettingHistories_Edges struct {
	Node *GetGroupSettingHistories_GroupSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetGroupSettingHistories_GroupSettingHistories_Edges) GetNode() *GetGroupSettingHistories_GroupSettingHistories_Edges_Node {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges{}
	}
	return t.Node
}

type GetGroupSettingHistories_GroupSettingHistories struct {
	Edges []*GetGroupSettingHistories_GroupSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetGroupSettingHistories_GroupSettingHistories) GetEdges() []*GetGroupSettingHistories_GroupSettingHistories_Edges {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories{}
	}
	return t.Edges
}

type CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations_Edges_Node{}
	}
	return t.ID
}

type CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations_Edges struct {
	Node *CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations_Edges) GetNode() *CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations_Edges_Node {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations_Edges{}
	}
	return t.Node
}

type CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations struct {
	Edges []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations) GetEdges() []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations_Edges {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations{}
	}
	return t.Edges
}

type CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events_Edges_Node{}
	}
	return t.ID
}

type CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events_Edges struct {
	Node *CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events_Edges) GetNode() *CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events_Edges_Node {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events_Edges{}
	}
	return t.Node
}

type CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events struct {
	Edges []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events) GetEdges() []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events_Edges {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events{}
	}
	return t.Edges
}

type CreateBulkCSVHush_CreateBulkCSVHush_Hushes struct {
	Description  *string                                                 "json:\"description,omitempty\" graphql:\"description\""
	Events       CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events       "json:\"events\" graphql:\"events\""
	ID           string                                                  "json:\"id\" graphql:\"id\""
	Integrations CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations "json:\"integrations\" graphql:\"integrations\""
	Kind         *string                                                 "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                                  "json:\"name\" graphql:\"name\""
	OwnerID      *string                                                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SecretName   *string                                                 "json:\"secretName,omitempty\" graphql:\"secretName\""
}

func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.Description
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetEvents() *CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return &t.Events
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetID() string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.ID
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetIntegrations() *CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return &t.Integrations
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetKind() *string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.Kind
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetName() string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.Name
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetSecretName() *string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.SecretName
}

type CreateBulkCSVHush_CreateBulkCSVHush struct {
	Hushes []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes "json:\"hushes,omitempty\" graphql:\"hushes\""
}

func (t *CreateBulkCSVHush_CreateBulkCSVHush) GetHushes() []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush{}
	}
	return t.Hushes
}

type CreateBulkHush_CreateBulkHush_Hushes_Integrations_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkHush_CreateBulkHush_Hushes_Integrations_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes_Integrations_Edges_Node{}
	}
	return t.ID
}

type CreateBulkHush_CreateBulkHush_Hushes_Integrations_Edges struct {
	Node *CreateBulkHush_CreateBulkHush_Hushes_Integrations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkHush_CreateBulkHush_Hushes_Integrations_Edges) GetNode() *CreateBulkHush_CreateBulkHush_Hushes_Integrations_Edges_Node {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes_Integrations_Edges{}
	}
	return t.Node
}

type CreateBulkHush_CreateBulkHush_Hushes_Integrations struct {
	Edges []*CreateBulkHush_CreateBulkHush_Hushes_Integrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkHush_CreateBulkHush_Hushes_Integrations) GetEdges() []*CreateBulkHush_CreateBulkHush_Hushes_Integrations_Edges {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes_Integrations{}
	}
	return t.Edges
}

type CreateBulkHush_CreateBulkHush_Hushes_Events_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkHush_CreateBulkHush_Hushes_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes_Events_Edges_Node{}
	}
	return t.ID
}

type CreateBulkHush_CreateBulkHush_Hushes_Events_Edges struct {
	Node *CreateBulkHush_CreateBulkHush_Hushes_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkHush_CreateBulkHush_Hushes_Events_Edges) GetNode() *CreateBulkHush_CreateBulkHush_Hushes_Events_Edges_Node {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes_Events_Edges{}
	}
	return t.Node
}

type CreateBulkHush_CreateBulkHush_Hushes_Events struct {
	Edges []*CreateBulkHush_CreateBulkHush_Hushes_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkHush_CreateBulkHush_Hushes_Events) GetEdges() []*CreateBulkHush_CreateBulkHush_Hushes_Events_Edges {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes_Events{}
	}
	return t.Edges
}

type CreateBulkHush_CreateBulkHush_Hushes struct {
	Description  *string                                           "json:\"description,omitempty\" graphql:\"description\""
	Events       CreateBulkHush_CreateBulkHush_Hushes_Events       "json:\"events\" graphql:\"events\""
	ID           string                                            "json:\"id\" graphql:\"id\""
	Integrations CreateBulkHush_CreateBulkHush_Hushes_Integrations "json:\"integrations\" graphql:\"integrations\""
	Kind         *string                                           "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                            "json:\"name\" graphql:\"name\""
	OwnerID      *string                                           "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SecretName   *string                                           "json:\"secretName,omitempty\" graphql:\"secretName\""
}

func (t *CreateBulkHush_CreateBulkHush_Hushes) GetDescription() *string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.Description
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetEvents() *CreateBulkHush_CreateBulkHush_Hushes_Events {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return &t.Events
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetID() string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.ID
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetIntegrations() *CreateBulkHush_CreateBulkHush_Hushes_Integrations {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return &t.Integrations
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetKind() *string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.Kind
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetName() string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.Name
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.OwnerID
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetSecretName() *string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.SecretName
}

type CreateBulkHush_CreateBulkHush struct {
	Hushes []*CreateBulkHush_CreateBulkHush_Hushes "json:\"hushes,omitempty\" graphql:\"hushes\""
}

func (t *CreateBulkHush_CreateBulkHush) GetHushes() []*CreateBulkHush_CreateBulkHush_Hushes {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush{}
	}
	return t.Hushes
}

type CreateHush_CreateHush_Hush_Integrations_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateHush_CreateHush_Hush_Integrations_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush_Integrations_Edges_Node{}
	}
	return t.ID
}

type CreateHush_CreateHush_Hush_Integrations_Edges struct {
	Node *CreateHush_CreateHush_Hush_Integrations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateHush_CreateHush_Hush_Integrations_Edges) GetNode() *CreateHush_CreateHush_Hush_Integrations_Edges_Node {
	if t == nil {
		t = &CreateHush_CreateHush_Hush_Integrations_Edges{}
	}
	return t.Node
}

type CreateHush_CreateHush_Hush_Integrations struct {
	Edges []*CreateHush_CreateHush_Hush_Integrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateHush_CreateHush_Hush_Integrations) GetEdges() []*CreateHush_CreateHush_Hush_Integrations_Edges {
	if t == nil {
		t = &CreateHush_CreateHush_Hush_Integrations{}
	}
	return t.Edges
}

type CreateHush_CreateHush_Hush_Events_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateHush_CreateHush_Hush_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush_Events_Edges_Node{}
	}
	return t.ID
}

type CreateHush_CreateHush_Hush_Events_Edges struct {
	Node *CreateHush_CreateHush_Hush_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateHush_CreateHush_Hush_Events_Edges) GetNode() *CreateHush_CreateHush_Hush_Events_Edges_Node {
	if t == nil {
		t = &CreateHush_CreateHush_Hush_Events_Edges{}
	}
	return t.Node
}

type CreateHush_CreateHush_Hush_Events struct {
	Edges []*CreateHush_CreateHush_Hush_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateHush_CreateHush_Hush_Events) GetEdges() []*CreateHush_CreateHush_Hush_Events_Edges {
	if t == nil {
		t = &CreateHush_CreateHush_Hush_Events{}
	}
	return t.Edges
}

type CreateHush_CreateHush_Hush struct {
	Description  *string                                 "json:\"description,omitempty\" graphql:\"description\""
	Events       CreateHush_CreateHush_Hush_Events       "json:\"events\" graphql:\"events\""
	ID           string                                  "json:\"id\" graphql:\"id\""
	Integrations CreateHush_CreateHush_Hush_Integrations "json:\"integrations\" graphql:\"integrations\""
	Kind         *string                                 "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                  "json:\"name\" graphql:\"name\""
	OwnerID      *string                                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SecretName   *string                                 "json:\"secretName,omitempty\" graphql:\"secretName\""
}

func (t *CreateHush_CreateHush_Hush) GetDescription() *string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.Description
}
func (t *CreateHush_CreateHush_Hush) GetEvents() *CreateHush_CreateHush_Hush_Events {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return &t.Events
}
func (t *CreateHush_CreateHush_Hush) GetID() string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.ID
}
func (t *CreateHush_CreateHush_Hush) GetIntegrations() *CreateHush_CreateHush_Hush_Integrations {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return &t.Integrations
}
func (t *CreateHush_CreateHush_Hush) GetKind() *string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.Kind
}
func (t *CreateHush_CreateHush_Hush) GetName() string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.Name
}
func (t *CreateHush_CreateHush_Hush) GetOwnerID() *string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.OwnerID
}
func (t *CreateHush_CreateHush_Hush) GetSecretName() *string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.SecretName
}

type CreateHush_CreateHush struct {
	Hush CreateHush_CreateHush_Hush "json:\"hush\" graphql:\"hush\""
}

func (t *CreateHush_CreateHush) GetHush() *CreateHush_CreateHush_Hush {
	if t == nil {
		t = &CreateHush_CreateHush{}
	}
	return &t.Hush
}

type GetAllHushes_Hushes_Edges_Node_Integrations_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllHushes_Hushes_Edges_Node_Integrations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node_Integrations_Edges_Node{}
	}
	return t.ID
}

type GetAllHushes_Hushes_Edges_Node_Integrations_Edges struct {
	Node *GetAllHushes_Hushes_Edges_Node_Integrations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllHushes_Hushes_Edges_Node_Integrations_Edges) GetNode() *GetAllHushes_Hushes_Edges_Node_Integrations_Edges_Node {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node_Integrations_Edges{}
	}
	return t.Node
}

type GetAllHushes_Hushes_Edges_Node_Integrations struct {
	Edges []*GetAllHushes_Hushes_Edges_Node_Integrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllHushes_Hushes_Edges_Node_Integrations) GetEdges() []*GetAllHushes_Hushes_Edges_Node_Integrations_Edges {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node_Integrations{}
	}
	return t.Edges
}

type GetAllHushes_Hushes_Edges_Node_Events_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllHushes_Hushes_Edges_Node_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node_Events_Edges_Node{}
	}
	return t.ID
}

type GetAllHushes_Hushes_Edges_Node_Events_Edges struct {
	Node *GetAllHushes_Hushes_Edges_Node_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllHushes_Hushes_Edges_Node_Events_Edges) GetNode() *GetAllHushes_Hushes_Edges_Node_Events_Edges_Node {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node_Events_Edges{}
	}
	return t.Node
}

type GetAllHushes_Hushes_Edges_Node_Events struct {
	Edges []*GetAllHushes_Hushes_Edges_Node_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllHushes_Hushes_Edges_Node_Events) GetEdges() []*GetAllHushes_Hushes_Edges_Node_Events_Edges {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node_Events{}
	}
	return t.Edges
}

type GetAllHushes_Hushes_Edges_Node struct {
	CreatedAt    *time.Time                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string                                     "json:\"description,omitempty\" graphql:\"description\""
	Events       GetAllHushes_Hushes_Edges_Node_Events       "json:\"events\" graphql:\"events\""
	ID           string                                      "json:\"id\" graphql:\"id\""
	Integrations GetAllHushes_Hushes_Edges_Node_Integrations "json:\"integrations\" graphql:\"integrations\""
	Kind         *string                                     "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                      "json:\"name\" graphql:\"name\""
	OwnerID      *string                                     "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SecretName   *string                                     "json:\"secretName,omitempty\" graphql:\"secretName\""
	UpdatedAt    *time.Time                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllHushes_Hushes_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllHushes_Hushes_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllHushes_Hushes_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllHushes_Hushes_Edges_Node) GetEvents() *GetAllHushes_Hushes_Edges_Node_Events {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return &t.Events
}
func (t *GetAllHushes_Hushes_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllHushes_Hushes_Edges_Node) GetIntegrations() *GetAllHushes_Hushes_Edges_Node_Integrations {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return &t.Integrations
}
func (t *GetAllHushes_Hushes_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.Kind
}
func (t *GetAllHushes_Hushes_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllHushes_Hushes_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllHushes_Hushes_Edges_Node) GetSecretName() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.SecretName
}
func (t *GetAllHushes_Hushes_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllHushes_Hushes_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllHushes_Hushes_Edges struct {
	Node *GetAllHushes_Hushes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllHushes_Hushes_Edges) GetNode() *GetAllHushes_Hushes_Edges_Node {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges{}
	}
	return t.Node
}

type GetAllHushes_Hushes struct {
	Edges []*GetAllHushes_Hushes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllHushes_Hushes) GetEdges() []*GetAllHushes_Hushes_Edges {
	if t == nil {
		t = &GetAllHushes_Hushes{}
	}
	return t.Edges
}

type GetHushByID_Hush_Integrations_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetHushByID_Hush_Integrations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetHushByID_Hush_Integrations_Edges_Node{}
	}
	return t.ID
}

type GetHushByID_Hush_Integrations_Edges struct {
	Node *GetHushByID_Hush_Integrations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetHushByID_Hush_Integrations_Edges) GetNode() *GetHushByID_Hush_Integrations_Edges_Node {
	if t == nil {
		t = &GetHushByID_Hush_Integrations_Edges{}
	}
	return t.Node
}

type GetHushByID_Hush_Integrations struct {
	Edges []*GetHushByID_Hush_Integrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetHushByID_Hush_Integrations) GetEdges() []*GetHushByID_Hush_Integrations_Edges {
	if t == nil {
		t = &GetHushByID_Hush_Integrations{}
	}
	return t.Edges
}

type GetHushByID_Hush_Events_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetHushByID_Hush_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &GetHushByID_Hush_Events_Edges_Node{}
	}
	return t.ID
}

type GetHushByID_Hush_Events_Edges struct {
	Node *GetHushByID_Hush_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetHushByID_Hush_Events_Edges) GetNode() *GetHushByID_Hush_Events_Edges_Node {
	if t == nil {
		t = &GetHushByID_Hush_Events_Edges{}
	}
	return t.Node
}

type GetHushByID_Hush_Events struct {
	Edges []*GetHushByID_Hush_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetHushByID_Hush_Events) GetEdges() []*GetHushByID_Hush_Events_Edges {
	if t == nil {
		t = &GetHushByID_Hush_Events{}
	}
	return t.Edges
}

type GetHushByID_Hush struct {
	CreatedAt    *time.Time                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string                       "json:\"description,omitempty\" graphql:\"description\""
	Events       GetHushByID_Hush_Events       "json:\"events\" graphql:\"events\""
	ID           string                        "json:\"id\" graphql:\"id\""
	Integrations GetHushByID_Hush_Integrations "json:\"integrations\" graphql:\"integrations\""
	Kind         *string                       "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                        "json:\"name\" graphql:\"name\""
	OwnerID      *string                       "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SecretName   *string                       "json:\"secretName,omitempty\" graphql:\"secretName\""
	UpdatedAt    *time.Time                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetHushByID_Hush) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.CreatedAt
}
func (t *GetHushByID_Hush) GetCreatedBy() *string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.CreatedBy
}
func (t *GetHushByID_Hush) GetDescription() *string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.Description
}
func (t *GetHushByID_Hush) GetEvents() *GetHushByID_Hush_Events {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return &t.Events
}
func (t *GetHushByID_Hush) GetID() string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.ID
}
func (t *GetHushByID_Hush) GetIntegrations() *GetHushByID_Hush_Integrations {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return &t.Integrations
}
func (t *GetHushByID_Hush) GetKind() *string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.Kind
}
func (t *GetHushByID_Hush) GetName() string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.Name
}
func (t *GetHushByID_Hush) GetOwnerID() *string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.OwnerID
}
func (t *GetHushByID_Hush) GetSecretName() *string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.SecretName
}
func (t *GetHushByID_Hush) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.UpdatedAt
}
func (t *GetHushByID_Hush) GetUpdatedBy() *string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.UpdatedBy
}

type GetHushes_Hushes_Edges_Node_Integrations_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetHushes_Hushes_Edges_Node_Integrations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node_Integrations_Edges_Node{}
	}
	return t.ID
}

type GetHushes_Hushes_Edges_Node_Integrations_Edges struct {
	Node *GetHushes_Hushes_Edges_Node_Integrations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetHushes_Hushes_Edges_Node_Integrations_Edges) GetNode() *GetHushes_Hushes_Edges_Node_Integrations_Edges_Node {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node_Integrations_Edges{}
	}
	return t.Node
}

type GetHushes_Hushes_Edges_Node_Integrations struct {
	Edges []*GetHushes_Hushes_Edges_Node_Integrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetHushes_Hushes_Edges_Node_Integrations) GetEdges() []*GetHushes_Hushes_Edges_Node_Integrations_Edges {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node_Integrations{}
	}
	return t.Edges
}

type GetHushes_Hushes_Edges_Node_Events_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetHushes_Hushes_Edges_Node_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node_Events_Edges_Node{}
	}
	return t.ID
}

type GetHushes_Hushes_Edges_Node_Events_Edges struct {
	Node *GetHushes_Hushes_Edges_Node_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetHushes_Hushes_Edges_Node_Events_Edges) GetNode() *GetHushes_Hushes_Edges_Node_Events_Edges_Node {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node_Events_Edges{}
	}
	return t.Node
}

type GetHushes_Hushes_Edges_Node_Events struct {
	Edges []*GetHushes_Hushes_Edges_Node_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetHushes_Hushes_Edges_Node_Events) GetEdges() []*GetHushes_Hushes_Edges_Node_Events_Edges {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node_Events{}
	}
	return t.Edges
}

type GetHushes_Hushes_Edges_Node struct {
	CreatedAt    *time.Time                               "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                  "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string                                  "json:\"description,omitempty\" graphql:\"description\""
	Events       GetHushes_Hushes_Edges_Node_Events       "json:\"events\" graphql:\"events\""
	ID           string                                   "json:\"id\" graphql:\"id\""
	Integrations GetHushes_Hushes_Edges_Node_Integrations "json:\"integrations\" graphql:\"integrations\""
	Kind         *string                                  "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                   "json:\"name\" graphql:\"name\""
	OwnerID      *string                                  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SecretName   *string                                  "json:\"secretName,omitempty\" graphql:\"secretName\""
	UpdatedAt    *time.Time                               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                  "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetHushes_Hushes_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetHushes_Hushes_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetHushes_Hushes_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.Description
}
func (t *GetHushes_Hushes_Edges_Node) GetEvents() *GetHushes_Hushes_Edges_Node_Events {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return &t.Events
}
func (t *GetHushes_Hushes_Edges_Node) GetID() string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.ID
}
func (t *GetHushes_Hushes_Edges_Node) GetIntegrations() *GetHushes_Hushes_Edges_Node_Integrations {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return &t.Integrations
}
func (t *GetHushes_Hushes_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.Kind
}
func (t *GetHushes_Hushes_Edges_Node) GetName() string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.Name
}
func (t *GetHushes_Hushes_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetHushes_Hushes_Edges_Node) GetSecretName() *string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.SecretName
}
func (t *GetHushes_Hushes_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetHushes_Hushes_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetHushes_Hushes_Edges struct {
	Node *GetHushes_Hushes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetHushes_Hushes_Edges) GetNode() *GetHushes_Hushes_Edges_Node {
	if t == nil {
		t = &GetHushes_Hushes_Edges{}
	}
	return t.Node
}

type GetHushes_Hushes struct {
	Edges []*GetHushes_Hushes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetHushes_Hushes) GetEdges() []*GetHushes_Hushes_Edges {
	if t == nil {
		t = &GetHushes_Hushes{}
	}
	return t.Edges
}

type UpdateHush_UpdateHush_Hush_Integrations_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateHush_UpdateHush_Hush_Integrations_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush_Integrations_Edges_Node{}
	}
	return t.ID
}

type UpdateHush_UpdateHush_Hush_Integrations_Edges struct {
	Node *UpdateHush_UpdateHush_Hush_Integrations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateHush_UpdateHush_Hush_Integrations_Edges) GetNode() *UpdateHush_UpdateHush_Hush_Integrations_Edges_Node {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush_Integrations_Edges{}
	}
	return t.Node
}

type UpdateHush_UpdateHush_Hush_Integrations struct {
	Edges []*UpdateHush_UpdateHush_Hush_Integrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateHush_UpdateHush_Hush_Integrations) GetEdges() []*UpdateHush_UpdateHush_Hush_Integrations_Edges {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush_Integrations{}
	}
	return t.Edges
}

type UpdateHush_UpdateHush_Hush_Events_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateHush_UpdateHush_Hush_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush_Events_Edges_Node{}
	}
	return t.ID
}

type UpdateHush_UpdateHush_Hush_Events_Edges struct {
	Node *UpdateHush_UpdateHush_Hush_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateHush_UpdateHush_Hush_Events_Edges) GetNode() *UpdateHush_UpdateHush_Hush_Events_Edges_Node {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush_Events_Edges{}
	}
	return t.Node
}

type UpdateHush_UpdateHush_Hush_Events struct {
	Edges []*UpdateHush_UpdateHush_Hush_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateHush_UpdateHush_Hush_Events) GetEdges() []*UpdateHush_UpdateHush_Hush_Events_Edges {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush_Events{}
	}
	return t.Edges
}

type UpdateHush_UpdateHush_Hush struct {
	Description  *string                                 "json:\"description,omitempty\" graphql:\"description\""
	Events       UpdateHush_UpdateHush_Hush_Events       "json:\"events\" graphql:\"events\""
	ID           string                                  "json:\"id\" graphql:\"id\""
	Integrations UpdateHush_UpdateHush_Hush_Integrations "json:\"integrations\" graphql:\"integrations\""
	Kind         *string                                 "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                  "json:\"name\" graphql:\"name\""
	OwnerID      *string                                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SecretName   *string                                 "json:\"secretName,omitempty\" graphql:\"secretName\""
}

func (t *UpdateHush_UpdateHush_Hush) GetDescription() *string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.Description
}
func (t *UpdateHush_UpdateHush_Hush) GetEvents() *UpdateHush_UpdateHush_Hush_Events {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return &t.Events
}
func (t *UpdateHush_UpdateHush_Hush) GetID() string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.ID
}
func (t *UpdateHush_UpdateHush_Hush) GetIntegrations() *UpdateHush_UpdateHush_Hush_Integrations {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return &t.Integrations
}
func (t *UpdateHush_UpdateHush_Hush) GetKind() *string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.Kind
}
func (t *UpdateHush_UpdateHush_Hush) GetName() string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.Name
}
func (t *UpdateHush_UpdateHush_Hush) GetOwnerID() *string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.OwnerID
}
func (t *UpdateHush_UpdateHush_Hush) GetSecretName() *string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.SecretName
}

type UpdateHush_UpdateHush struct {
	Hush UpdateHush_UpdateHush_Hush "json:\"hush\" graphql:\"hush\""
}

func (t *UpdateHush_UpdateHush) GetHush() *UpdateHush_UpdateHush_Hush {
	if t == nil {
		t = &UpdateHush_UpdateHush{}
	}
	return &t.Hush
}

type GetAllHushHistories_HushHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string        "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Kind        *string        "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	SecretName  *string        "json:\"secretName,omitempty\" graphql:\"secretName\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllHushHistories_HushHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.Kind
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetSecretName() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.SecretName
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllHushHistories_HushHistories_Edges struct {
	Node *GetAllHushHistories_HushHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllHushHistories_HushHistories_Edges) GetNode() *GetAllHushHistories_HushHistories_Edges_Node {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges{}
	}
	return t.Node
}

type GetAllHushHistories_HushHistories struct {
	Edges []*GetAllHushHistories_HushHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllHushHistories_HushHistories) GetEdges() []*GetAllHushHistories_HushHistories_Edges {
	if t == nil {
		t = &GetAllHushHistories_HushHistories{}
	}
	return t.Edges
}

type GetHushHistories_HushHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string        "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Kind        *string        "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	SecretName  *string        "json:\"secretName,omitempty\" graphql:\"secretName\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetHushHistories_HushHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.Kind
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetSecretName() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.SecretName
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetHushHistories_HushHistories_Edges struct {
	Node *GetHushHistories_HushHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetHushHistories_HushHistories_Edges) GetNode() *GetHushHistories_HushHistories_Edges_Node {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges{}
	}
	return t.Node
}

type GetHushHistories_HushHistories struct {
	Edges []*GetHushHistories_HushHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetHushHistories_HushHistories) GetEdges() []*GetHushHistories_HushHistories_Edges {
	if t == nil {
		t = &GetHushHistories_HushHistories{}
	}
	return t.Edges
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Owner) GetID() string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Owner{}
	}
	return t.ID
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets_Edges_Node{}
	}
	return t.ID
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets_Edges struct {
	Node *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets_Edges) GetNode() *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets_Edges_Node {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets_Edges{}
	}
	return t.Node
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets struct {
	Edges []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets) GetEdges() []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets_Edges {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets{}
	}
	return t.Edges
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events_Edges_Node{}
	}
	return t.ID
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events_Edges struct {
	Node *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events_Edges) GetNode() *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events_Edges_Node {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events_Edges{}
	}
	return t.Node
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events struct {
	Edges []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events) GetEdges() []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events_Edges {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events{}
	}
	return t.Edges
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations struct {
	Description *string                                                                "json:\"description,omitempty\" graphql:\"description\""
	Events      CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events  "json:\"events\" graphql:\"events\""
	ID          string                                                                 "json:\"id\" graphql:\"id\""
	Kind        *string                                                                "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string                                                                 "json:\"name\" graphql:\"name\""
	Owner       *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Owner  "json:\"owner,omitempty\" graphql:\"owner\""
	OwnerID     *string                                                                "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Secrets     CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets "json:\"secrets\" graphql:\"secrets\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.Description
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetEvents() *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return &t.Events
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetID() string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.ID
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetKind() *string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.Kind
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetName() string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.Name
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetOwner() *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Owner {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.Owner
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetSecrets() *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return &t.Secrets
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration struct {
	Integrations []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations "json:\"integrations,omitempty\" graphql:\"integrations\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration) GetIntegrations() []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration{}
	}
	return t.Integrations
}

type CreateBulkIntegration_CreateBulkIntegration_Integrations_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations_Owner) GetID() string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations_Owner{}
	}
	return t.ID
}

type CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets_Edges_Node{}
	}
	return t.ID
}

type CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets_Edges struct {
	Node *CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets_Edges) GetNode() *CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets_Edges_Node {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets_Edges{}
	}
	return t.Node
}

type CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets struct {
	Edges []*CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets) GetEdges() []*CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets_Edges {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets{}
	}
	return t.Edges
}

type CreateBulkIntegration_CreateBulkIntegration_Integrations_Events_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations_Events_Edges_Node{}
	}
	return t.ID
}

type CreateBulkIntegration_CreateBulkIntegration_Integrations_Events_Edges struct {
	Node *CreateBulkIntegration_CreateBulkIntegration_Integrations_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations_Events_Edges) GetNode() *CreateBulkIntegration_CreateBulkIntegration_Integrations_Events_Edges_Node {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations_Events_Edges{}
	}
	return t.Node
}

type CreateBulkIntegration_CreateBulkIntegration_Integrations_Events struct {
	Edges []*CreateBulkIntegration_CreateBulkIntegration_Integrations_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations_Events) GetEdges() []*CreateBulkIntegration_CreateBulkIntegration_Integrations_Events_Edges {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations_Events{}
	}
	return t.Edges
}

type CreateBulkIntegration_CreateBulkIntegration_Integrations struct {
	Description *string                                                          "json:\"description,omitempty\" graphql:\"description\""
	Events      CreateBulkIntegration_CreateBulkIntegration_Integrations_Events  "json:\"events\" graphql:\"events\""
	ID          string                                                           "json:\"id\" graphql:\"id\""
	Kind        *string                                                          "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string                                                           "json:\"name\" graphql:\"name\""
	Owner       *CreateBulkIntegration_CreateBulkIntegration_Integrations_Owner  "json:\"owner,omitempty\" graphql:\"owner\""
	OwnerID     *string                                                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Secrets     CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets "json:\"secrets\" graphql:\"secrets\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetDescription() *string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.Description
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetEvents() *CreateBulkIntegration_CreateBulkIntegration_Integrations_Events {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return &t.Events
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetID() string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.ID
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetKind() *string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.Kind
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetName() string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.Name
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetOwner() *CreateBulkIntegration_CreateBulkIntegration_Integrations_Owner {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.Owner
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.OwnerID
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetSecrets() *CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return &t.Secrets
}

type CreateBulkIntegration_CreateBulkIntegration struct {
	Integrations []*CreateBulkIntegration_CreateBulkIntegration_Integrations "json:\"integrations,omitempty\" graphql:\"integrations\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration) GetIntegrations() []*CreateBulkIntegration_CreateBulkIntegration_Integrations {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration{}
	}
	return t.Integrations
}

type CreateIntegration_CreateIntegration_Integration_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateIntegration_CreateIntegration_Integration_Owner) GetID() string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration_Owner{}
	}
	return t.ID
}

type CreateIntegration_CreateIntegration_Integration_Secrets_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateIntegration_CreateIntegration_Integration_Secrets_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration_Secrets_Edges_Node{}
	}
	return t.ID
}

type CreateIntegration_CreateIntegration_Integration_Secrets_Edges struct {
	Node *CreateIntegration_CreateIntegration_Integration_Secrets_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateIntegration_CreateIntegration_Integration_Secrets_Edges) GetNode() *CreateIntegration_CreateIntegration_Integration_Secrets_Edges_Node {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration_Secrets_Edges{}
	}
	return t.Node
}

type CreateIntegration_CreateIntegration_Integration_Secrets struct {
	Edges []*CreateIntegration_CreateIntegration_Integration_Secrets_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateIntegration_CreateIntegration_Integration_Secrets) GetEdges() []*CreateIntegration_CreateIntegration_Integration_Secrets_Edges {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration_Secrets{}
	}
	return t.Edges
}

type CreateIntegration_CreateIntegration_Integration_Events_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateIntegration_CreateIntegration_Integration_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration_Events_Edges_Node{}
	}
	return t.ID
}

type CreateIntegration_CreateIntegration_Integration_Events_Edges struct {
	Node *CreateIntegration_CreateIntegration_Integration_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateIntegration_CreateIntegration_Integration_Events_Edges) GetNode() *CreateIntegration_CreateIntegration_Integration_Events_Edges_Node {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration_Events_Edges{}
	}
	return t.Node
}

type CreateIntegration_CreateIntegration_Integration_Events struct {
	Edges []*CreateIntegration_CreateIntegration_Integration_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateIntegration_CreateIntegration_Integration_Events) GetEdges() []*CreateIntegration_CreateIntegration_Integration_Events_Edges {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration_Events{}
	}
	return t.Edges
}

type CreateIntegration_CreateIntegration_Integration struct {
	Description *string                                                 "json:\"description,omitempty\" graphql:\"description\""
	Events      CreateIntegration_CreateIntegration_Integration_Events  "json:\"events\" graphql:\"events\""
	ID          string                                                  "json:\"id\" graphql:\"id\""
	Kind        *string                                                 "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string                                                  "json:\"name\" graphql:\"name\""
	Owner       *CreateIntegration_CreateIntegration_Integration_Owner  "json:\"owner,omitempty\" graphql:\"owner\""
	OwnerID     *string                                                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Secrets     CreateIntegration_CreateIntegration_Integration_Secrets "json:\"secrets\" graphql:\"secrets\""
}

func (t *CreateIntegration_CreateIntegration_Integration) GetDescription() *string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.Description
}
func (t *CreateIntegration_CreateIntegration_Integration) GetEvents() *CreateIntegration_CreateIntegration_Integration_Events {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return &t.Events
}
func (t *CreateIntegration_CreateIntegration_Integration) GetID() string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.ID
}
func (t *CreateIntegration_CreateIntegration_Integration) GetKind() *string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.Kind
}
func (t *CreateIntegration_CreateIntegration_Integration) GetName() string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.Name
}
func (t *CreateIntegration_CreateIntegration_Integration) GetOwner() *CreateIntegration_CreateIntegration_Integration_Owner {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.Owner
}
func (t *CreateIntegration_CreateIntegration_Integration) GetOwnerID() *string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.OwnerID
}
func (t *CreateIntegration_CreateIntegration_Integration) GetSecrets() *CreateIntegration_CreateIntegration_Integration_Secrets {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return &t.Secrets
}

type CreateIntegration_CreateIntegration struct {
	Integration CreateIntegration_CreateIntegration_Integration "json:\"integration\" graphql:\"integration\""
}

func (t *CreateIntegration_CreateIntegration) GetIntegration() *CreateIntegration_CreateIntegration_Integration {
	if t == nil {
		t = &CreateIntegration_CreateIntegration{}
	}
	return &t.Integration
}

type DeleteIntegration_DeleteIntegration struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteIntegration_DeleteIntegration) GetDeletedID() string {
	if t == nil {
		t = &DeleteIntegration_DeleteIntegration{}
	}
	return t.DeletedID
}

type GetAllIntegrations_Integrations_Edges_Node_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllIntegrations_Integrations_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node_Owner{}
	}
	return t.ID
}

type GetAllIntegrations_Integrations_Edges_Node_Secrets_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllIntegrations_Integrations_Edges_Node_Secrets_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node_Secrets_Edges_Node{}
	}
	return t.ID
}

type GetAllIntegrations_Integrations_Edges_Node_Secrets_Edges struct {
	Node *GetAllIntegrations_Integrations_Edges_Node_Secrets_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllIntegrations_Integrations_Edges_Node_Secrets_Edges) GetNode() *GetAllIntegrations_Integrations_Edges_Node_Secrets_Edges_Node {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node_Secrets_Edges{}
	}
	return t.Node
}

type GetAllIntegrations_Integrations_Edges_Node_Secrets struct {
	Edges []*GetAllIntegrations_Integrations_Edges_Node_Secrets_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllIntegrations_Integrations_Edges_Node_Secrets) GetEdges() []*GetAllIntegrations_Integrations_Edges_Node_Secrets_Edges {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node_Secrets{}
	}
	return t.Edges
}

type GetAllIntegrations_Integrations_Edges_Node_Events_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllIntegrations_Integrations_Edges_Node_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node_Events_Edges_Node{}
	}
	return t.ID
}

type GetAllIntegrations_Integrations_Edges_Node_Events_Edges struct {
	Node *GetAllIntegrations_Integrations_Edges_Node_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllIntegrations_Integrations_Edges_Node_Events_Edges) GetNode() *GetAllIntegrations_Integrations_Edges_Node_Events_Edges_Node {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node_Events_Edges{}
	}
	return t.Node
}

type GetAllIntegrations_Integrations_Edges_Node_Events struct {
	Edges []*GetAllIntegrations_Integrations_Edges_Node_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllIntegrations_Integrations_Edges_Node_Events) GetEdges() []*GetAllIntegrations_Integrations_Edges_Node_Events_Edges {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node_Events{}
	}
	return t.Edges
}

type GetAllIntegrations_Integrations_Edges_Node struct {
	CreatedAt   *time.Time                                         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                            "json:\"description,omitempty\" graphql:\"description\""
	Events      GetAllIntegrations_Integrations_Edges_Node_Events  "json:\"events\" graphql:\"events\""
	ID          string                                             "json:\"id\" graphql:\"id\""
	Kind        *string                                            "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string                                             "json:\"name\" graphql:\"name\""
	Owner       *GetAllIntegrations_Integrations_Edges_Node_Owner  "json:\"owner,omitempty\" graphql:\"owner\""
	OwnerID     *string                                            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Secrets     GetAllIntegrations_Integrations_Edges_Node_Secrets "json:\"secrets\" graphql:\"secrets\""
	UpdatedAt   *time.Time                                         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllIntegrations_Integrations_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetEvents() *GetAllIntegrations_Integrations_Edges_Node_Events {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return &t.Events
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Kind
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetOwner() *GetAllIntegrations_Integrations_Edges_Node_Owner {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Owner
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetSecrets() *GetAllIntegrations_Integrations_Edges_Node_Secrets {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return &t.Secrets
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllIntegrations_Integrations_Edges struct {
	Node *GetAllIntegrations_Integrations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllIntegrations_Integrations_Edges) GetNode() *GetAllIntegrations_Integrations_Edges_Node {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges{}
	}
	return t.Node
}

type GetAllIntegrations_Integrations struct {
	Edges []*GetAllIntegrations_Integrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllIntegrations_Integrations) GetEdges() []*GetAllIntegrations_Integrations_Edges {
	if t == nil {
		t = &GetAllIntegrations_Integrations{}
	}
	return t.Edges
}

type GetIntegrationByID_Integration_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIntegrationByID_Integration_Owner) GetID() string {
	if t == nil {
		t = &GetIntegrationByID_Integration_Owner{}
	}
	return t.ID
}

type GetIntegrationByID_Integration_Secrets_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIntegrationByID_Integration_Secrets_Edges_Node) GetID() string {
	if t == nil {
		t = &GetIntegrationByID_Integration_Secrets_Edges_Node{}
	}
	return t.ID
}

type GetIntegrationByID_Integration_Secrets_Edges struct {
	Node *GetIntegrationByID_Integration_Secrets_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetIntegrationByID_Integration_Secrets_Edges) GetNode() *GetIntegrationByID_Integration_Secrets_Edges_Node {
	if t == nil {
		t = &GetIntegrationByID_Integration_Secrets_Edges{}
	}
	return t.Node
}

type GetIntegrationByID_Integration_Secrets struct {
	Edges []*GetIntegrationByID_Integration_Secrets_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetIntegrationByID_Integration_Secrets) GetEdges() []*GetIntegrationByID_Integration_Secrets_Edges {
	if t == nil {
		t = &GetIntegrationByID_Integration_Secrets{}
	}
	return t.Edges
}

type GetIntegrationByID_Integration_Events_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIntegrationByID_Integration_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &GetIntegrationByID_Integration_Events_Edges_Node{}
	}
	return t.ID
}

type GetIntegrationByID_Integration_Events_Edges struct {
	Node *GetIntegrationByID_Integration_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetIntegrationByID_Integration_Events_Edges) GetNode() *GetIntegrationByID_Integration_Events_Edges_Node {
	if t == nil {
		t = &GetIntegrationByID_Integration_Events_Edges{}
	}
	return t.Node
}

type GetIntegrationByID_Integration_Events struct {
	Edges []*GetIntegrationByID_Integration_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetIntegrationByID_Integration_Events) GetEdges() []*GetIntegrationByID_Integration_Events_Edges {
	if t == nil {
		t = &GetIntegrationByID_Integration_Events{}
	}
	return t.Edges
}

type GetIntegrationByID_Integration struct {
	CreatedAt   *time.Time                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                "json:\"description,omitempty\" graphql:\"description\""
	Events      GetIntegrationByID_Integration_Events  "json:\"events\" graphql:\"events\""
	ID          string                                 "json:\"id\" graphql:\"id\""
	Kind        *string                                "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string                                 "json:\"name\" graphql:\"name\""
	Owner       *GetIntegrationByID_Integration_Owner  "json:\"owner,omitempty\" graphql:\"owner\""
	OwnerID     *string                                "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Secrets     GetIntegrationByID_Integration_Secrets "json:\"secrets\" graphql:\"secrets\""
	UpdatedAt   *time.Time                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetIntegrationByID_Integration) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.CreatedAt
}
func (t *GetIntegrationByID_Integration) GetCreatedBy() *string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.CreatedBy
}
func (t *GetIntegrationByID_Integration) GetDescription() *string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Description
}
func (t *GetIntegrationByID_Integration) GetEvents() *GetIntegrationByID_Integration_Events {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return &t.Events
}
func (t *GetIntegrationByID_Integration) GetID() string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.ID
}
func (t *GetIntegrationByID_Integration) GetKind() *string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Kind
}
func (t *GetIntegrationByID_Integration) GetName() string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Name
}
func (t *GetIntegrationByID_Integration) GetOwner() *GetIntegrationByID_Integration_Owner {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Owner
}
func (t *GetIntegrationByID_Integration) GetOwnerID() *string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.OwnerID
}
func (t *GetIntegrationByID_Integration) GetSecrets() *GetIntegrationByID_Integration_Secrets {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return &t.Secrets
}
func (t *GetIntegrationByID_Integration) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.UpdatedAt
}
func (t *GetIntegrationByID_Integration) GetUpdatedBy() *string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.UpdatedBy
}

type GetIntegrations_Integrations_Edges_Node_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIntegrations_Integrations_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node_Owner{}
	}
	return t.ID
}

type GetIntegrations_Integrations_Edges_Node_Secrets_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIntegrations_Integrations_Edges_Node_Secrets_Edges_Node) GetID() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node_Secrets_Edges_Node{}
	}
	return t.ID
}

type GetIntegrations_Integrations_Edges_Node_Secrets_Edges struct {
	Node *GetIntegrations_Integrations_Edges_Node_Secrets_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetIntegrations_Integrations_Edges_Node_Secrets_Edges) GetNode() *GetIntegrations_Integrations_Edges_Node_Secrets_Edges_Node {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node_Secrets_Edges{}
	}
	return t.Node
}

type GetIntegrations_Integrations_Edges_Node_Secrets struct {
	Edges []*GetIntegrations_Integrations_Edges_Node_Secrets_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetIntegrations_Integrations_Edges_Node_Secrets) GetEdges() []*GetIntegrations_Integrations_Edges_Node_Secrets_Edges {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node_Secrets{}
	}
	return t.Edges
}

type GetIntegrations_Integrations_Edges_Node_Events_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIntegrations_Integrations_Edges_Node_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node_Events_Edges_Node{}
	}
	return t.ID
}

type GetIntegrations_Integrations_Edges_Node_Events_Edges struct {
	Node *GetIntegrations_Integrations_Edges_Node_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetIntegrations_Integrations_Edges_Node_Events_Edges) GetNode() *GetIntegrations_Integrations_Edges_Node_Events_Edges_Node {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node_Events_Edges{}
	}
	return t.Node
}

type GetIntegrations_Integrations_Edges_Node_Events struct {
	Edges []*GetIntegrations_Integrations_Edges_Node_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetIntegrations_Integrations_Edges_Node_Events) GetEdges() []*GetIntegrations_Integrations_Edges_Node_Events_Edges {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node_Events{}
	}
	return t.Edges
}

type GetIntegrations_Integrations_Edges_Node struct {
	CreatedAt   *time.Time                                      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                         "json:\"description,omitempty\" graphql:\"description\""
	Events      GetIntegrations_Integrations_Edges_Node_Events  "json:\"events\" graphql:\"events\""
	ID          string                                          "json:\"id\" graphql:\"id\""
	Kind        *string                                         "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string                                          "json:\"name\" graphql:\"name\""
	Owner       *GetIntegrations_Integrations_Edges_Node_Owner  "json:\"owner,omitempty\" graphql:\"owner\""
	OwnerID     *string                                         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Secrets     GetIntegrations_Integrations_Edges_Node_Secrets "json:\"secrets\" graphql:\"secrets\""
	UpdatedAt   *time.Time                                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetIntegrations_Integrations_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetIntegrations_Integrations_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetIntegrations_Integrations_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Description
}
func (t *GetIntegrations_Integrations_Edges_Node) GetEvents() *GetIntegrations_Integrations_Edges_Node_Events {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return &t.Events
}
func (t *GetIntegrations_Integrations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.ID
}
func (t *GetIntegrations_Integrations_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Kind
}
func (t *GetIntegrations_Integrations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Name
}
func (t *GetIntegrations_Integrations_Edges_Node) GetOwner() *GetIntegrations_Integrations_Edges_Node_Owner {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Owner
}
func (t *GetIntegrations_Integrations_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetIntegrations_Integrations_Edges_Node) GetSecrets() *GetIntegrations_Integrations_Edges_Node_Secrets {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return &t.Secrets
}
func (t *GetIntegrations_Integrations_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetIntegrations_Integrations_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetIntegrations_Integrations_Edges struct {
	Node *GetIntegrations_Integrations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetIntegrations_Integrations_Edges) GetNode() *GetIntegrations_Integrations_Edges_Node {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges{}
	}
	return t.Node
}

type GetIntegrations_Integrations struct {
	Edges []*GetIntegrations_Integrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetIntegrations_Integrations) GetEdges() []*GetIntegrations_Integrations_Edges {
	if t == nil {
		t = &GetIntegrations_Integrations{}
	}
	return t.Edges
}

type UpdateIntegration_UpdateIntegration_Integration_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateIntegration_UpdateIntegration_Integration_Owner) GetID() string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration_Owner{}
	}
	return t.ID
}

type UpdateIntegration_UpdateIntegration_Integration_Secrets_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateIntegration_UpdateIntegration_Integration_Secrets_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration_Secrets_Edges_Node{}
	}
	return t.ID
}

type UpdateIntegration_UpdateIntegration_Integration_Secrets_Edges struct {
	Node *UpdateIntegration_UpdateIntegration_Integration_Secrets_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateIntegration_UpdateIntegration_Integration_Secrets_Edges) GetNode() *UpdateIntegration_UpdateIntegration_Integration_Secrets_Edges_Node {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration_Secrets_Edges{}
	}
	return t.Node
}

type UpdateIntegration_UpdateIntegration_Integration_Secrets struct {
	Edges []*UpdateIntegration_UpdateIntegration_Integration_Secrets_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateIntegration_UpdateIntegration_Integration_Secrets) GetEdges() []*UpdateIntegration_UpdateIntegration_Integration_Secrets_Edges {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration_Secrets{}
	}
	return t.Edges
}

type UpdateIntegration_UpdateIntegration_Integration_Events_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateIntegration_UpdateIntegration_Integration_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration_Events_Edges_Node{}
	}
	return t.ID
}

type UpdateIntegration_UpdateIntegration_Integration_Events_Edges struct {
	Node *UpdateIntegration_UpdateIntegration_Integration_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateIntegration_UpdateIntegration_Integration_Events_Edges) GetNode() *UpdateIntegration_UpdateIntegration_Integration_Events_Edges_Node {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration_Events_Edges{}
	}
	return t.Node
}

type UpdateIntegration_UpdateIntegration_Integration_Events struct {
	Edges []*UpdateIntegration_UpdateIntegration_Integration_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateIntegration_UpdateIntegration_Integration_Events) GetEdges() []*UpdateIntegration_UpdateIntegration_Integration_Events_Edges {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration_Events{}
	}
	return t.Edges
}

type UpdateIntegration_UpdateIntegration_Integration struct {
	Description *string                                                 "json:\"description,omitempty\" graphql:\"description\""
	Events      UpdateIntegration_UpdateIntegration_Integration_Events  "json:\"events\" graphql:\"events\""
	ID          string                                                  "json:\"id\" graphql:\"id\""
	Kind        *string                                                 "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string                                                  "json:\"name\" graphql:\"name\""
	Owner       *UpdateIntegration_UpdateIntegration_Integration_Owner  "json:\"owner,omitempty\" graphql:\"owner\""
	OwnerID     *string                                                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Secrets     UpdateIntegration_UpdateIntegration_Integration_Secrets "json:\"secrets\" graphql:\"secrets\""
}

func (t *UpdateIntegration_UpdateIntegration_Integration) GetDescription() *string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.Description
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetEvents() *UpdateIntegration_UpdateIntegration_Integration_Events {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return &t.Events
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetID() string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.ID
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetKind() *string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.Kind
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetName() string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.Name
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetOwner() *UpdateIntegration_UpdateIntegration_Integration_Owner {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.Owner
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetOwnerID() *string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.OwnerID
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetSecrets() *UpdateIntegration_UpdateIntegration_Integration_Secrets {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return &t.Secrets
}

type UpdateIntegration_UpdateIntegration struct {
	Integration UpdateIntegration_UpdateIntegration_Integration "json:\"integration\" graphql:\"integration\""
}

func (t *UpdateIntegration_UpdateIntegration) GetIntegration() *UpdateIntegration_UpdateIntegration_Integration {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration{}
	}
	return &t.Integration
}

type GetAllIntegrationHistories_IntegrationHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string        "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Kind        *string        "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Kind
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllIntegrationHistories_IntegrationHistories_Edges struct {
	Node *GetAllIntegrationHistories_IntegrationHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllIntegrationHistories_IntegrationHistories_Edges) GetNode() *GetAllIntegrationHistories_IntegrationHistories_Edges_Node {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges{}
	}
	return t.Node
}

type GetAllIntegrationHistories_IntegrationHistories struct {
	Edges []*GetAllIntegrationHistories_IntegrationHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllIntegrationHistories_IntegrationHistories) GetEdges() []*GetAllIntegrationHistories_IntegrationHistories_Edges {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories{}
	}
	return t.Edges
}

type GetIntegrationHistories_IntegrationHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string        "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Kind        *string        "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Kind
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetIntegrationHistories_IntegrationHistories_Edges struct {
	Node *GetIntegrationHistories_IntegrationHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetIntegrationHistories_IntegrationHistories_Edges) GetNode() *GetIntegrationHistories_IntegrationHistories_Edges_Node {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges{}
	}
	return t.Node
}

type GetIntegrationHistories_IntegrationHistories struct {
	Edges []*GetIntegrationHistories_IntegrationHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetIntegrationHistories_IntegrationHistories) GetEdges() []*GetIntegrationHistories_IntegrationHistories_Edges {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories{}
	}
	return t.Edges
}

type CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies_Approver struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies_Approver) GetID() string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies_Approver{}
	}
	return t.ID
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies_Approver) GetName() string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies_Approver{}
	}
	return t.Name
}

type CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies_Delegate) GetID() string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies_Delegate{}
	}
	return t.ID
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies_Delegate) GetName() string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies_Delegate{}
	}
	return t.Name
}

type CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies struct {
	ApprovalRequired *bool                                                                              "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	Approver         *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies_Approver "json:\"approver,omitempty\" graphql:\"approver\""
	CreatedAt        *time.Time                                                                         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                                                                            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate         *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies_Delegate "json:\"delegate,omitempty\" graphql:\"delegate\""
	Details          *string                                                                            "json:\"details,omitempty\" graphql:\"details\""
	DisplayID        string                                                                             "json:\"displayID\" graphql:\"displayID\""
	ID               string                                                                             "json:\"id\" graphql:\"id\""
	Name             string                                                                             "json:\"name\" graphql:\"name\""
	OwnerID          *string                                                                            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PolicyType       *string                                                                            "json:\"policyType,omitempty\" graphql:\"policyType\""
	ReviewDue        *time.Time                                                                         "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency                                                                   "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string                                                                            "json:\"revision,omitempty\" graphql:\"revision\""
	Status           *enums.DocumentStatus                                                              "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string                                                                           "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time                                                                         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                                                                            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetApprovalRequired() *bool {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.ApprovalRequired
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetApprover() *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies_Approver {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.Approver
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetDelegate() *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies_Delegate {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.Delegate
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetDetails() *string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.Details
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.DisplayID
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetID() string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.ID
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetName() string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.Name
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetPolicyType() *string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.PolicyType
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetReviewDue() *time.Time {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.ReviewDue
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.ReviewFrequency
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetRevision() *string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.Revision
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.Status
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.Tags
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy struct {
	InternalPolicies []*CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies "json:\"internalPolicies,omitempty\" graphql:\"internalPolicies\""
}

func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy) GetInternalPolicies() []*CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy{}
	}
	return t.InternalPolicies
}

type CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies_Approver struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies_Approver) GetID() string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies_Approver{}
	}
	return t.ID
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies_Approver) GetName() string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies_Approver{}
	}
	return t.Name
}

type CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies_Delegate) GetID() string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies_Delegate{}
	}
	return t.ID
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies_Delegate) GetName() string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies_Delegate{}
	}
	return t.Name
}

type CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies struct {
	ApprovalRequired *bool                                                                        "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	Approver         *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies_Approver "json:\"approver,omitempty\" graphql:\"approver\""
	CreatedAt        *time.Time                                                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                                                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate         *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies_Delegate "json:\"delegate,omitempty\" graphql:\"delegate\""
	Details          *string                                                                      "json:\"details,omitempty\" graphql:\"details\""
	DisplayID        string                                                                       "json:\"displayID\" graphql:\"displayID\""
	ID               string                                                                       "json:\"id\" graphql:\"id\""
	Name             string                                                                       "json:\"name\" graphql:\"name\""
	OwnerID          *string                                                                      "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PolicyType       *string                                                                      "json:\"policyType,omitempty\" graphql:\"policyType\""
	ReviewDue        *time.Time                                                                   "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency                                                             "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string                                                                      "json:\"revision,omitempty\" graphql:\"revision\""
	Status           *enums.DocumentStatus                                                        "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string                                                                     "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time                                                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                                                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetApprovalRequired() *bool {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.ApprovalRequired
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetApprover() *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies_Approver {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.Approver
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.CreatedAt
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.CreatedBy
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetDelegate() *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies_Delegate {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.Delegate
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetDetails() *string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.Details
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.DisplayID
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetID() string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.ID
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetName() string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.Name
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.OwnerID
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetPolicyType() *string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.PolicyType
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetReviewDue() *time.Time {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.ReviewDue
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.ReviewFrequency
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetRevision() *string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.Revision
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.Status
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetTags() []string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.Tags
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.UpdatedBy
}

type CreateBulkInternalPolicy_CreateBulkInternalPolicy struct {
	InternalPolicies []*CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies "json:\"internalPolicies,omitempty\" graphql:\"internalPolicies\""
}

func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy) GetInternalPolicies() []*CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy{}
	}
	return t.InternalPolicies
}

type CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_Editors) GetID() string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_Editors{}
	}
	return t.ID
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_Editors) GetName() string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_Editors{}
	}
	return t.Name
}

type CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_BlockedGroups) GetID() string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_BlockedGroups{}
	}
	return t.ID
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_BlockedGroups) GetName() string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_BlockedGroups{}
	}
	return t.Name
}

type CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_Approver struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_Approver) GetID() string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_Approver{}
	}
	return t.ID
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_Approver) GetName() string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_Approver{}
	}
	return t.Name
}

type CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_Delegate) GetID() string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_Delegate{}
	}
	return t.ID
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_Delegate) GetName() string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_Delegate{}
	}
	return t.Name
}

type CreateInternalPolicy_CreateInternalPolicy_InternalPolicy struct {
	ApprovalRequired *bool                                                                     "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	Approver         *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_Approver        "json:\"approver,omitempty\" graphql:\"approver\""
	BlockedGroups    []*CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	CreatedAt        *time.Time                                                                "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                                                                   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate         *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_Delegate        "json:\"delegate,omitempty\" graphql:\"delegate\""
	Details          *string                                                                   "json:\"details,omitempty\" graphql:\"details\""
	DisplayID        string                                                                    "json:\"displayID\" graphql:\"displayID\""
	Editors          []*CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID               string                                                                    "json:\"id\" graphql:\"id\""
	Name             string                                                                    "json:\"name\" graphql:\"name\""
	OwnerID          *string                                                                   "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PolicyType       *string                                                                   "json:\"policyType,omitempty\" graphql:\"policyType\""
	ReviewDue        *time.Time                                                                "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency                                                          "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string                                                                   "json:\"revision,omitempty\" graphql:\"revision\""
	Status           *enums.DocumentStatus                                                     "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string                                                                  "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time                                                                "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                                                                   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetApprovalRequired() *bool {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.ApprovalRequired
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetApprover() *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_Approver {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.Approver
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetBlockedGroups() []*CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_BlockedGroups {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.BlockedGroups
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.CreatedAt
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetCreatedBy() *string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.CreatedBy
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetDelegate() *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_Delegate {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.Delegate
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetDetails() *string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.Details
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetDisplayID() string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.DisplayID
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetEditors() []*CreateInternalPolicy_CreateInternalPolicy_InternalPolicy_Editors {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.Editors
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetID() string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.ID
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetName() string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.Name
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetOwnerID() *string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.OwnerID
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetPolicyType() *string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.PolicyType
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetReviewDue() *time.Time {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.ReviewDue
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.ReviewFrequency
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetRevision() *string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.Revision
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.Status
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetTags() []string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.Tags
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.UpdatedAt
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.UpdatedBy
}

type CreateInternalPolicy_CreateInternalPolicy struct {
	InternalPolicy CreateInternalPolicy_CreateInternalPolicy_InternalPolicy "json:\"internalPolicy\" graphql:\"internalPolicy\""
}

func (t *CreateInternalPolicy_CreateInternalPolicy) GetInternalPolicy() *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy{}
	}
	return &t.InternalPolicy
}

type DeleteInternalPolicy_DeleteInternalPolicy struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteInternalPolicy_DeleteInternalPolicy) GetDeletedID() string {
	if t == nil {
		t = &DeleteInternalPolicy_DeleteInternalPolicy{}
	}
	return t.DeletedID
}

type GetAllInternalPolicies_InternalPolicies_Edges_Node_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node_Editors) GetID() string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node_Editors{}
	}
	return t.ID
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node_Editors) GetName() string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node_Editors{}
	}
	return t.Name
}

type GetAllInternalPolicies_InternalPolicies_Edges_Node_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node_BlockedGroups) GetID() string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node_BlockedGroups{}
	}
	return t.ID
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node_BlockedGroups) GetName() string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node_BlockedGroups{}
	}
	return t.Name
}

type GetAllInternalPolicies_InternalPolicies_Edges_Node_Approver struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node_Approver) GetID() string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node_Approver{}
	}
	return t.ID
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node_Approver) GetName() string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node_Approver{}
	}
	return t.Name
}

type GetAllInternalPolicies_InternalPolicies_Edges_Node_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node_Delegate) GetID() string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node_Delegate{}
	}
	return t.ID
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node_Delegate) GetName() string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node_Delegate{}
	}
	return t.Name
}

type GetAllInternalPolicies_InternalPolicies_Edges_Node struct {
	ApprovalRequired *bool                                                               "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	Approver         *GetAllInternalPolicies_InternalPolicies_Edges_Node_Approver        "json:\"approver,omitempty\" graphql:\"approver\""
	BlockedGroups    []*GetAllInternalPolicies_InternalPolicies_Edges_Node_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	CreatedAt        *time.Time                                                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                                                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate         *GetAllInternalPolicies_InternalPolicies_Edges_Node_Delegate        "json:\"delegate,omitempty\" graphql:\"delegate\""
	Details          *string                                                             "json:\"details,omitempty\" graphql:\"details\""
	DisplayID        string                                                              "json:\"displayID\" graphql:\"displayID\""
	Editors          []*GetAllInternalPolicies_InternalPolicies_Edges_Node_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID               string                                                              "json:\"id\" graphql:\"id\""
	Name             string                                                              "json:\"name\" graphql:\"name\""
	OwnerID          *string                                                             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PolicyType       *string                                                             "json:\"policyType,omitempty\" graphql:\"policyType\""
	ReviewDue        *time.Time                                                          "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency                                                    "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string                                                             "json:\"revision,omitempty\" graphql:\"revision\""
	Status           *enums.DocumentStatus                                               "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string                                                            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time                                                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                                                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetApprover() *GetAllInternalPolicies_InternalPolicies_Edges_Node_Approver {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Approver
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetBlockedGroups() []*GetAllInternalPolicies_InternalPolicies_Edges_Node_BlockedGroups {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.BlockedGroups
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetDelegate() *GetAllInternalPolicies_InternalPolicies_Edges_Node_Delegate {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Delegate
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetEditors() []*GetAllInternalPolicies_InternalPolicies_Edges_Node_Editors {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Editors
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetPolicyType() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.PolicyType
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Revision
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllInternalPolicies_InternalPolicies_Edges struct {
	Node *GetAllInternalPolicies_InternalPolicies_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllInternalPolicies_InternalPolicies_Edges) GetNode() *GetAllInternalPolicies_InternalPolicies_Edges_Node {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges{}
	}
	return t.Node
}

type GetAllInternalPolicies_InternalPolicies struct {
	Edges []*GetAllInternalPolicies_InternalPolicies_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllInternalPolicies_InternalPolicies) GetEdges() []*GetAllInternalPolicies_InternalPolicies_Edges {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies{}
	}
	return t.Edges
}

type GetInternalPolicies_InternalPolicies_Edges_Node_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetInternalPolicies_InternalPolicies_Edges_Node_Editors) GetID() string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node_Editors{}
	}
	return t.ID
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node_Editors) GetName() string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node_Editors{}
	}
	return t.Name
}

type GetInternalPolicies_InternalPolicies_Edges_Node_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetInternalPolicies_InternalPolicies_Edges_Node_BlockedGroups) GetID() string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node_BlockedGroups{}
	}
	return t.ID
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node_BlockedGroups) GetName() string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node_BlockedGroups{}
	}
	return t.Name
}

type GetInternalPolicies_InternalPolicies_Edges_Node_Approver struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetInternalPolicies_InternalPolicies_Edges_Node_Approver) GetID() string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node_Approver{}
	}
	return t.ID
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node_Approver) GetName() string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node_Approver{}
	}
	return t.Name
}

type GetInternalPolicies_InternalPolicies_Edges_Node_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetInternalPolicies_InternalPolicies_Edges_Node_Delegate) GetID() string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node_Delegate{}
	}
	return t.ID
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node_Delegate) GetName() string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node_Delegate{}
	}
	return t.Name
}

type GetInternalPolicies_InternalPolicies_Edges_Node struct {
	ApprovalRequired *bool                                                            "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	Approver         *GetInternalPolicies_InternalPolicies_Edges_Node_Approver        "json:\"approver,omitempty\" graphql:\"approver\""
	BlockedGroups    []*GetInternalPolicies_InternalPolicies_Edges_Node_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	CreatedAt        *time.Time                                                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                                                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate         *GetInternalPolicies_InternalPolicies_Edges_Node_Delegate        "json:\"delegate,omitempty\" graphql:\"delegate\""
	Details          *string                                                          "json:\"details,omitempty\" graphql:\"details\""
	DisplayID        string                                                           "json:\"displayID\" graphql:\"displayID\""
	Editors          []*GetInternalPolicies_InternalPolicies_Edges_Node_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID               string                                                           "json:\"id\" graphql:\"id\""
	Name             string                                                           "json:\"name\" graphql:\"name\""
	OwnerID          *string                                                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PolicyType       *string                                                          "json:\"policyType,omitempty\" graphql:\"policyType\""
	ReviewDue        *time.Time                                                       "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency                                                 "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string                                                          "json:\"revision,omitempty\" graphql:\"revision\""
	Status           *enums.DocumentStatus                                            "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string                                                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time                                                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                                                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetApprover() *GetInternalPolicies_InternalPolicies_Edges_Node_Approver {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Approver
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetBlockedGroups() []*GetInternalPolicies_InternalPolicies_Edges_Node_BlockedGroups {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.BlockedGroups
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetDelegate() *GetInternalPolicies_InternalPolicies_Edges_Node_Delegate {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Delegate
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Details
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetEditors() []*GetInternalPolicies_InternalPolicies_Edges_Node_Editors {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Editors
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetID() string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ID
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetName() string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Name
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetPolicyType() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.PolicyType
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Revision
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Status
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Tags
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetInternalPolicies_InternalPolicies_Edges struct {
	Node *GetInternalPolicies_InternalPolicies_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetInternalPolicies_InternalPolicies_Edges) GetNode() *GetInternalPolicies_InternalPolicies_Edges_Node {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges{}
	}
	return t.Node
}

type GetInternalPolicies_InternalPolicies struct {
	Edges []*GetInternalPolicies_InternalPolicies_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetInternalPolicies_InternalPolicies) GetEdges() []*GetInternalPolicies_InternalPolicies_Edges {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies{}
	}
	return t.Edges
}

type GetInternalPolicyByID_InternalPolicy_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetInternalPolicyByID_InternalPolicy_Editors) GetID() string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy_Editors{}
	}
	return t.ID
}
func (t *GetInternalPolicyByID_InternalPolicy_Editors) GetName() string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy_Editors{}
	}
	return t.Name
}

type GetInternalPolicyByID_InternalPolicy_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetInternalPolicyByID_InternalPolicy_BlockedGroups) GetID() string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy_BlockedGroups{}
	}
	return t.ID
}
func (t *GetInternalPolicyByID_InternalPolicy_BlockedGroups) GetName() string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy_BlockedGroups{}
	}
	return t.Name
}

type GetInternalPolicyByID_InternalPolicy_Approver struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetInternalPolicyByID_InternalPolicy_Approver) GetID() string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy_Approver{}
	}
	return t.ID
}
func (t *GetInternalPolicyByID_InternalPolicy_Approver) GetName() string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy_Approver{}
	}
	return t.Name
}

type GetInternalPolicyByID_InternalPolicy_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetInternalPolicyByID_InternalPolicy_Delegate) GetID() string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy_Delegate{}
	}
	return t.ID
}
func (t *GetInternalPolicyByID_InternalPolicy_Delegate) GetName() string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy_Delegate{}
	}
	return t.Name
}

type GetInternalPolicyByID_InternalPolicy struct {
	ApprovalRequired *bool                                                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	Approver         *GetInternalPolicyByID_InternalPolicy_Approver        "json:\"approver,omitempty\" graphql:\"approver\""
	BlockedGroups    []*GetInternalPolicyByID_InternalPolicy_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	CreatedAt        *time.Time                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                                               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate         *GetInternalPolicyByID_InternalPolicy_Delegate        "json:\"delegate,omitempty\" graphql:\"delegate\""
	Details          *string                                               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID        string                                                "json:\"displayID\" graphql:\"displayID\""
	Editors          []*GetInternalPolicyByID_InternalPolicy_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID               string                                                "json:\"id\" graphql:\"id\""
	Name             string                                                "json:\"name\" graphql:\"name\""
	OwnerID          *string                                               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PolicyType       *string                                               "json:\"policyType,omitempty\" graphql:\"policyType\""
	ReviewDue        *time.Time                                            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency                                      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string                                               "json:\"revision,omitempty\" graphql:\"revision\""
	Status           *enums.DocumentStatus                                 "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string                                              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                                               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetInternalPolicyByID_InternalPolicy) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.ApprovalRequired
}
func (t *GetInternalPolicyByID_InternalPolicy) GetApprover() *GetInternalPolicyByID_InternalPolicy_Approver {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.Approver
}
func (t *GetInternalPolicyByID_InternalPolicy) GetBlockedGroups() []*GetInternalPolicyByID_InternalPolicy_BlockedGroups {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.BlockedGroups
}
func (t *GetInternalPolicyByID_InternalPolicy) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.CreatedAt
}
func (t *GetInternalPolicyByID_InternalPolicy) GetCreatedBy() *string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.CreatedBy
}
func (t *GetInternalPolicyByID_InternalPolicy) GetDelegate() *GetInternalPolicyByID_InternalPolicy_Delegate {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.Delegate
}
func (t *GetInternalPolicyByID_InternalPolicy) GetDetails() *string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.Details
}
func (t *GetInternalPolicyByID_InternalPolicy) GetDisplayID() string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.DisplayID
}
func (t *GetInternalPolicyByID_InternalPolicy) GetEditors() []*GetInternalPolicyByID_InternalPolicy_Editors {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.Editors
}
func (t *GetInternalPolicyByID_InternalPolicy) GetID() string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.ID
}
func (t *GetInternalPolicyByID_InternalPolicy) GetName() string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.Name
}
func (t *GetInternalPolicyByID_InternalPolicy) GetOwnerID() *string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.OwnerID
}
func (t *GetInternalPolicyByID_InternalPolicy) GetPolicyType() *string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.PolicyType
}
func (t *GetInternalPolicyByID_InternalPolicy) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.ReviewDue
}
func (t *GetInternalPolicyByID_InternalPolicy) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.ReviewFrequency
}
func (t *GetInternalPolicyByID_InternalPolicy) GetRevision() *string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.Revision
}
func (t *GetInternalPolicyByID_InternalPolicy) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.Status
}
func (t *GetInternalPolicyByID_InternalPolicy) GetTags() []string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.Tags
}
func (t *GetInternalPolicyByID_InternalPolicy) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.UpdatedAt
}
func (t *GetInternalPolicyByID_InternalPolicy) GetUpdatedBy() *string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.UpdatedBy
}

type UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_Editors) GetID() string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_Editors{}
	}
	return t.ID
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_Editors) GetName() string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_Editors{}
	}
	return t.Name
}

type UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_BlockedGroups) GetID() string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_BlockedGroups{}
	}
	return t.ID
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_BlockedGroups) GetName() string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_BlockedGroups{}
	}
	return t.Name
}

type UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_Approver struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_Approver) GetID() string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_Approver{}
	}
	return t.ID
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_Approver) GetName() string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_Approver{}
	}
	return t.Name
}

type UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_Delegate) GetID() string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_Delegate{}
	}
	return t.ID
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_Delegate) GetName() string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_Delegate{}
	}
	return t.Name
}

type UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy struct {
	ApprovalRequired *bool                                                                     "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	Approver         *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_Approver        "json:\"approver,omitempty\" graphql:\"approver\""
	BlockedGroups    []*UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	CreatedAt        *time.Time                                                                "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                                                                   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate         *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_Delegate        "json:\"delegate,omitempty\" graphql:\"delegate\""
	Details          *string                                                                   "json:\"details,omitempty\" graphql:\"details\""
	DisplayID        string                                                                    "json:\"displayID\" graphql:\"displayID\""
	Editors          []*UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID               string                                                                    "json:\"id\" graphql:\"id\""
	Name             string                                                                    "json:\"name\" graphql:\"name\""
	OwnerID          *string                                                                   "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PolicyType       *string                                                                   "json:\"policyType,omitempty\" graphql:\"policyType\""
	ReviewDue        *time.Time                                                                "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency                                                          "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string                                                                   "json:\"revision,omitempty\" graphql:\"revision\""
	Status           *enums.DocumentStatus                                                     "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string                                                                  "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time                                                                "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                                                                   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetApprovalRequired() *bool {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.ApprovalRequired
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetApprover() *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_Approver {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.Approver
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetBlockedGroups() []*UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_BlockedGroups {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.BlockedGroups
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.CreatedAt
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.CreatedBy
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetDelegate() *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_Delegate {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.Delegate
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetDetails() *string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.Details
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetDisplayID() string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.DisplayID
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetEditors() []*UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy_Editors {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.Editors
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetID() string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.ID
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetName() string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.Name
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetOwnerID() *string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.OwnerID
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetPolicyType() *string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.PolicyType
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetReviewDue() *time.Time {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.ReviewDue
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.ReviewFrequency
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetRevision() *string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.Revision
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.Status
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetTags() []string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.Tags
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.UpdatedAt
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.UpdatedBy
}

type UpdateInternalPolicy_UpdateInternalPolicy struct {
	InternalPolicy UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy "json:\"internalPolicy\" graphql:\"internalPolicy\""
}

func (t *UpdateInternalPolicy_UpdateInternalPolicy) GetInternalPolicy() *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy{}
	}
	return &t.InternalPolicy
}

type GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node struct {
	ApprovalRequired *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	CreatedAt        *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details          *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID        string                "json:\"displayID\" graphql:\"displayID\""
	HistoryTime      time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID               string                "json:\"id\" graphql:\"id\""
	Name             string                "json:\"name\" graphql:\"name\""
	Operation        history.OpType        "json:\"operation\" graphql:\"operation\""
	OwnerID          *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PolicyType       *string               "json:\"policyType,omitempty\" graphql:\"policyType\""
	Ref              *string               "json:\"ref,omitempty\" graphql:\"ref\""
	ReviewDue        *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Status           *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetPolicyType() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.PolicyType
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllInternalPolicyHistories_InternalPolicyHistories_Edges struct {
	Node *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges) GetNode() *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges{}
	}
	return t.Node
}

type GetAllInternalPolicyHistories_InternalPolicyHistories struct {
	Edges []*GetAllInternalPolicyHistories_InternalPolicyHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllInternalPolicyHistories_InternalPolicyHistories) GetEdges() []*GetAllInternalPolicyHistories_InternalPolicyHistories_Edges {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories{}
	}
	return t.Edges
}

type GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node struct {
	ApprovalRequired *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	CreatedAt        *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details          *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID        string                "json:\"displayID\" graphql:\"displayID\""
	HistoryTime      time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID               string                "json:\"id\" graphql:\"id\""
	Name             string                "json:\"name\" graphql:\"name\""
	Operation        history.OpType        "json:\"operation\" graphql:\"operation\""
	OwnerID          *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PolicyType       *string               "json:\"policyType,omitempty\" graphql:\"policyType\""
	Ref              *string               "json:\"ref,omitempty\" graphql:\"ref\""
	ReviewDue        *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Status           *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetPolicyType() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.PolicyType
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetInternalPolicyHistories_InternalPolicyHistories_Edges struct {
	Node *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges) GetNode() *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges{}
	}
	return t.Node
}

type GetInternalPolicyHistories_InternalPolicyHistories struct {
	Edges []*GetInternalPolicyHistories_InternalPolicyHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetInternalPolicyHistories_InternalPolicyHistories) GetEdges() []*GetInternalPolicyHistories_InternalPolicyHistories_Edges {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories{}
	}
	return t.Edges
}

type CreateBulkCSVInvite_CreateBulkCSVInvite_Invites struct {
	Expires      *time.Time         "json:\"expires,omitempty\" graphql:\"expires\""
	ID           string             "json:\"id\" graphql:\"id\""
	Recipient    string             "json:\"recipient\" graphql:\"recipient\""
	RequestorID  *string            "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Role         enums.Role         "json:\"role\" graphql:\"role\""
	SendAttempts int64              "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Status       enums.InviteStatus "json:\"status\" graphql:\"status\""
}

func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetExpires() *time.Time {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.Expires
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetID() string {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.ID
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetRecipient() string {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.Recipient
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetRequestorID() *string {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.RequestorID
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return &t.Role
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetSendAttempts() int64 {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.SendAttempts
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return &t.Status
}

type CreateBulkCSVInvite_CreateBulkCSVInvite struct {
	Invites []*CreateBulkCSVInvite_CreateBulkCSVInvite_Invites "json:\"invites,omitempty\" graphql:\"invites\""
}

func (t *CreateBulkCSVInvite_CreateBulkCSVInvite) GetInvites() []*CreateBulkCSVInvite_CreateBulkCSVInvite_Invites {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite{}
	}
	return t.Invites
}

type CreateBulkInvite_CreateBulkInvite_Invites struct {
	Expires      *time.Time         "json:\"expires,omitempty\" graphql:\"expires\""
	ID           string             "json:\"id\" graphql:\"id\""
	Recipient    string             "json:\"recipient\" graphql:\"recipient\""
	RequestorID  *string            "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Role         enums.Role         "json:\"role\" graphql:\"role\""
	SendAttempts int64              "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Status       enums.InviteStatus "json:\"status\" graphql:\"status\""
}

func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetExpires() *time.Time {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.Expires
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetID() string {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.ID
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetRecipient() string {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.Recipient
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetRequestorID() *string {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.RequestorID
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return &t.Role
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetSendAttempts() int64 {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.SendAttempts
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return &t.Status
}

type CreateBulkInvite_CreateBulkInvite struct {
	Invites []*CreateBulkInvite_CreateBulkInvite_Invites "json:\"invites,omitempty\" graphql:\"invites\""
}

func (t *CreateBulkInvite_CreateBulkInvite) GetInvites() []*CreateBulkInvite_CreateBulkInvite_Invites {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite{}
	}
	return t.Invites
}

type CreateInvite_CreateInvite_Invite_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateInvite_CreateInvite_Invite_Owner) GetID() string {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite_Owner{}
	}
	return t.ID
}

type CreateInvite_CreateInvite_Invite struct {
	Expires      *time.Time                              "json:\"expires,omitempty\" graphql:\"expires\""
	ID           string                                  "json:\"id\" graphql:\"id\""
	Owner        *CreateInvite_CreateInvite_Invite_Owner "json:\"owner,omitempty\" graphql:\"owner\""
	Recipient    string                                  "json:\"recipient\" graphql:\"recipient\""
	RequestorID  *string                                 "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Role         enums.Role                              "json:\"role\" graphql:\"role\""
	SendAttempts int64                                   "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Status       enums.InviteStatus                      "json:\"status\" graphql:\"status\""
}

func (t *CreateInvite_CreateInvite_Invite) GetExpires() *time.Time {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.Expires
}
func (t *CreateInvite_CreateInvite_Invite) GetID() string {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.ID
}
func (t *CreateInvite_CreateInvite_Invite) GetOwner() *CreateInvite_CreateInvite_Invite_Owner {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.Owner
}
func (t *CreateInvite_CreateInvite_Invite) GetRecipient() string {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.Recipient
}
func (t *CreateInvite_CreateInvite_Invite) GetRequestorID() *string {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.RequestorID
}
func (t *CreateInvite_CreateInvite_Invite) GetRole() *enums.Role {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return &t.Role
}
func (t *CreateInvite_CreateInvite_Invite) GetSendAttempts() int64 {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.SendAttempts
}
func (t *CreateInvite_CreateInvite_Invite) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return &t.Status
}

type CreateInvite_CreateInvite struct {
	Invite CreateInvite_CreateInvite_Invite "json:\"invite\" graphql:\"invite\""
}

func (t *CreateInvite_CreateInvite) GetInvite() *CreateInvite_CreateInvite_Invite {
	if t == nil {
		t = &CreateInvite_CreateInvite{}
	}
	return &t.Invite
}

type DeleteInvite_DeleteInvite struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteInvite_DeleteInvite) GetDeletedID() string {
	if t == nil {
		t = &DeleteInvite_DeleteInvite{}
	}
	return t.DeletedID
}

type GetAllInvites_Invites_Edges_Node struct {
	ID        string             "json:\"id\" graphql:\"id\""
	Recipient string             "json:\"recipient\" graphql:\"recipient\""
	Role      enums.Role         "json:\"role\" graphql:\"role\""
	Status    enums.InviteStatus "json:\"status\" graphql:\"status\""
}

func (t *GetAllInvites_Invites_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllInvites_Invites_Edges_Node) GetRecipient() string {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return t.Recipient
}
func (t *GetAllInvites_Invites_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return &t.Role
}
func (t *GetAllInvites_Invites_Edges_Node) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return &t.Status
}

type GetAllInvites_Invites_Edges struct {
	Node *GetAllInvites_Invites_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllInvites_Invites_Edges) GetNode() *GetAllInvites_Invites_Edges_Node {
	if t == nil {
		t = &GetAllInvites_Invites_Edges{}
	}
	return t.Node
}

type GetAllInvites_Invites struct {
	Edges []*GetAllInvites_Invites_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllInvites_Invites) GetEdges() []*GetAllInvites_Invites_Edges {
	if t == nil {
		t = &GetAllInvites_Invites{}
	}
	return t.Edges
}

type GetInviteByID_Invite_Owner struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetInviteByID_Invite_Owner) GetDisplayName() string {
	if t == nil {
		t = &GetInviteByID_Invite_Owner{}
	}
	return t.DisplayName
}
func (t *GetInviteByID_Invite_Owner) GetID() string {
	if t == nil {
		t = &GetInviteByID_Invite_Owner{}
	}
	return t.ID
}
func (t *GetInviteByID_Invite_Owner) GetName() string {
	if t == nil {
		t = &GetInviteByID_Invite_Owner{}
	}
	return t.Name
}

type GetInviteByID_Invite struct {
	CreatedAt    *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Expires      *time.Time                  "json:\"expires,omitempty\" graphql:\"expires\""
	ID           string                      "json:\"id\" graphql:\"id\""
	Owner        *GetInviteByID_Invite_Owner "json:\"owner,omitempty\" graphql:\"owner\""
	Recipient    string                      "json:\"recipient\" graphql:\"recipient\""
	RequestorID  *string                     "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Role         enums.Role                  "json:\"role\" graphql:\"role\""
	SendAttempts int64                       "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Status       enums.InviteStatus          "json:\"status\" graphql:\"status\""
	UpdatedAt    *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetInviteByID_Invite) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.CreatedAt
}
func (t *GetInviteByID_Invite) GetCreatedBy() *string {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.CreatedBy
}
func (t *GetInviteByID_Invite) GetExpires() *time.Time {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.Expires
}
func (t *GetInviteByID_Invite) GetID() string {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.ID
}
func (t *GetInviteByID_Invite) GetOwner() *GetInviteByID_Invite_Owner {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.Owner
}
func (t *GetInviteByID_Invite) GetRecipient() string {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.Recipient
}
func (t *GetInviteByID_Invite) GetRequestorID() *string {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.RequestorID
}
func (t *GetInviteByID_Invite) GetRole() *enums.Role {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return &t.Role
}
func (t *GetInviteByID_Invite) GetSendAttempts() int64 {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.SendAttempts
}
func (t *GetInviteByID_Invite) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return &t.Status
}
func (t *GetInviteByID_Invite) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.UpdatedAt
}
func (t *GetInviteByID_Invite) GetUpdatedBy() *string {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.UpdatedBy
}

type InvitesByOrgID_Invites_Edges_Node_Owner_Invites_Edges_Node struct {
	Recipient    string             "json:\"recipient\" graphql:\"recipient\""
	RequestorID  *string            "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Role         enums.Role         "json:\"role\" graphql:\"role\""
	SendAttempts int64              "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Status       enums.InviteStatus "json:\"status\" graphql:\"status\""
}

func (t *InvitesByOrgID_Invites_Edges_Node_Owner_Invites_Edges_Node) GetRecipient() string {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner_Invites_Edges_Node{}
	}
	return t.Recipient
}
func (t *InvitesByOrgID_Invites_Edges_Node_Owner_Invites_Edges_Node) GetRequestorID() *string {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner_Invites_Edges_Node{}
	}
	return t.RequestorID
}
func (t *InvitesByOrgID_Invites_Edges_Node_Owner_Invites_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner_Invites_Edges_Node{}
	}
	return &t.Role
}
func (t *InvitesByOrgID_Invites_Edges_Node_Owner_Invites_Edges_Node) GetSendAttempts() int64 {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner_Invites_Edges_Node{}
	}
	return t.SendAttempts
}
func (t *InvitesByOrgID_Invites_Edges_Node_Owner_Invites_Edges_Node) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner_Invites_Edges_Node{}
	}
	return &t.Status
}

type InvitesByOrgID_Invites_Edges_Node_Owner_Invites_Edges struct {
	Node *InvitesByOrgID_Invites_Edges_Node_Owner_Invites_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *InvitesByOrgID_Invites_Edges_Node_Owner_Invites_Edges) GetNode() *InvitesByOrgID_Invites_Edges_Node_Owner_Invites_Edges_Node {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner_Invites_Edges{}
	}
	return t.Node
}

type InvitesByOrgID_Invites_Edges_Node_Owner_Invites struct {
	Edges []*InvitesByOrgID_Invites_Edges_Node_Owner_Invites_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *InvitesByOrgID_Invites_Edges_Node_Owner_Invites) GetEdges() []*InvitesByOrgID_Invites_Edges_Node_Owner_Invites_Edges {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner_Invites{}
	}
	return t.Edges
}

type InvitesByOrgID_Invites_Edges_Node_Owner struct {
	ID      string                                          "json:\"id\" graphql:\"id\""
	Invites InvitesByOrgID_Invites_Edges_Node_Owner_Invites "json:\"invites\" graphql:\"invites\""
}

func (t *InvitesByOrgID_Invites_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner{}
	}
	return t.ID
}
func (t *InvitesByOrgID_Invites_Edges_Node_Owner) GetInvites() *InvitesByOrgID_Invites_Edges_Node_Owner_Invites {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner{}
	}
	return &t.Invites
}

type InvitesByOrgID_Invites_Edges_Node struct {
	Owner *InvitesByOrgID_Invites_Edges_Node_Owner "json:\"owner,omitempty\" graphql:\"owner\""
}

func (t *InvitesByOrgID_Invites_Edges_Node) GetOwner() *InvitesByOrgID_Invites_Edges_Node_Owner {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node{}
	}
	return t.Owner
}

type InvitesByOrgID_Invites_Edges struct {
	Node *InvitesByOrgID_Invites_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *InvitesByOrgID_Invites_Edges) GetNode() *InvitesByOrgID_Invites_Edges_Node {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges{}
	}
	return t.Node
}

type InvitesByOrgID_Invites struct {
	Edges []*InvitesByOrgID_Invites_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *InvitesByOrgID_Invites) GetEdges() []*InvitesByOrgID_Invites_Edges {
	if t == nil {
		t = &InvitesByOrgID_Invites{}
	}
	return t.Edges
}

type CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Controls_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Controls_Edges_Node{}
	}
	return t.RefCode
}

type CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Controls_Edges struct {
	Node *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Controls_Edges) GetNode() *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Controls_Edges_Node {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Controls_Edges{}
	}
	return t.Node
}

type CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Controls struct {
	Edges []*CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Controls) GetEdges() []*CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Controls_Edges {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Controls{}
	}
	return t.Edges
}

type CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Subcontrols_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Subcontrols_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Subcontrols_Edges_Node{}
	}
	return t.Description
}
func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Subcontrols_Edges struct {
	Node *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Subcontrols_Edges) GetNode() *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Subcontrols_Edges_Node {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Subcontrols_Edges{}
	}
	return t.Node
}

type CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Subcontrols struct {
	Edges []*CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Subcontrols) GetEdges() []*CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Subcontrols_Edges {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Subcontrols{}
	}
	return t.Edges
}

type CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls struct {
	Controls    CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt   *time.Time                                                                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                                                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID          string                                                                           "json:\"id\" graphql:\"id\""
	MappingType *string                                                                          "json:\"mappingType,omitempty\" graphql:\"mappingType\""
	Relation    *string                                                                          "json:\"relation,omitempty\" graphql:\"relation\""
	Subcontrols CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags        []string                                                                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                                                                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                                                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls) GetControls() *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Controls {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls{}
	}
	return &t.Controls
}
func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls) GetID() string {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls{}
	}
	return t.ID
}
func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls) GetMappingType() *string {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls{}
	}
	return t.MappingType
}
func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls) GetRelation() *string {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls{}
	}
	return t.Relation
}
func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls) GetSubcontrols() *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls_Subcontrols {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls{}
	}
	return &t.Subcontrols
}
func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls{}
	}
	return t.Tags
}
func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVMappedControl_CreateBulkCSVMappedControl struct {
	MappedControls []*CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls "json:\"mappedControls,omitempty\" graphql:\"mappedControls\""
}

func (t *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl) GetMappedControls() []*CreateBulkCSVMappedControl_CreateBulkCSVMappedControl_MappedControls {
	if t == nil {
		t = &CreateBulkCSVMappedControl_CreateBulkCSVMappedControl{}
	}
	return t.MappedControls
}

type CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Controls_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Controls_Edges_Node{}
	}
	return t.RefCode
}

type CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Controls_Edges struct {
	Node *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Controls_Edges) GetNode() *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Controls_Edges_Node {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Controls_Edges{}
	}
	return t.Node
}

type CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Controls struct {
	Edges []*CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Controls) GetEdges() []*CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Controls_Edges {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Controls{}
	}
	return t.Edges
}

type CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Subcontrols_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Subcontrols_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Subcontrols_Edges_Node{}
	}
	return t.Description
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Subcontrols_Edges struct {
	Node *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Subcontrols_Edges) GetNode() *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Subcontrols_Edges_Node {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Subcontrols_Edges{}
	}
	return t.Node
}

type CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Subcontrols struct {
	Edges []*CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Subcontrols) GetEdges() []*CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Subcontrols_Edges {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Subcontrols{}
	}
	return t.Edges
}

type CreateBulkMappedControl_CreateBulkMappedControl_MappedControls struct {
	Controls    CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt   *time.Time                                                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID          string                                                                     "json:\"id\" graphql:\"id\""
	MappingType *string                                                                    "json:\"mappingType,omitempty\" graphql:\"mappingType\""
	Relation    *string                                                                    "json:\"relation,omitempty\" graphql:\"relation\""
	Subcontrols CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags        []string                                                                   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                                                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetControls() *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Controls {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return &t.Controls
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return t.CreatedAt
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return t.CreatedBy
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetID() string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return t.ID
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetMappingType() *string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return t.MappingType
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetRelation() *string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return t.Relation
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetSubcontrols() *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls_Subcontrols {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return &t.Subcontrols
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetTags() []string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return t.Tags
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkMappedControl_CreateBulkMappedControl_MappedControls) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl_MappedControls{}
	}
	return t.UpdatedBy
}

type CreateBulkMappedControl_CreateBulkMappedControl struct {
	MappedControls []*CreateBulkMappedControl_CreateBulkMappedControl_MappedControls "json:\"mappedControls,omitempty\" graphql:\"mappedControls\""
}

func (t *CreateBulkMappedControl_CreateBulkMappedControl) GetMappedControls() []*CreateBulkMappedControl_CreateBulkMappedControl_MappedControls {
	if t == nil {
		t = &CreateBulkMappedControl_CreateBulkMappedControl{}
	}
	return t.MappedControls
}

type CreateMappedControl_CreateMappedControl_MappedControl_Controls_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateMappedControl_CreateMappedControl_MappedControl_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_Controls_Edges_Node{}
	}
	return t.RefCode
}

type CreateMappedControl_CreateMappedControl_MappedControl_Controls_Edges struct {
	Node *CreateMappedControl_CreateMappedControl_MappedControl_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateMappedControl_CreateMappedControl_MappedControl_Controls_Edges) GetNode() *CreateMappedControl_CreateMappedControl_MappedControl_Controls_Edges_Node {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_Controls_Edges{}
	}
	return t.Node
}

type CreateMappedControl_CreateMappedControl_MappedControl_Controls struct {
	Edges []*CreateMappedControl_CreateMappedControl_MappedControl_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateMappedControl_CreateMappedControl_MappedControl_Controls) GetEdges() []*CreateMappedControl_CreateMappedControl_MappedControl_Controls_Edges {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_Controls{}
	}
	return t.Edges
}

type CreateMappedControl_CreateMappedControl_MappedControl_Subcontrols_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateMappedControl_CreateMappedControl_MappedControl_Subcontrols_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_Subcontrols_Edges_Node{}
	}
	return t.Description
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type CreateMappedControl_CreateMappedControl_MappedControl_Subcontrols_Edges struct {
	Node *CreateMappedControl_CreateMappedControl_MappedControl_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateMappedControl_CreateMappedControl_MappedControl_Subcontrols_Edges) GetNode() *CreateMappedControl_CreateMappedControl_MappedControl_Subcontrols_Edges_Node {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_Subcontrols_Edges{}
	}
	return t.Node
}

type CreateMappedControl_CreateMappedControl_MappedControl_Subcontrols struct {
	Edges []*CreateMappedControl_CreateMappedControl_MappedControl_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateMappedControl_CreateMappedControl_MappedControl_Subcontrols) GetEdges() []*CreateMappedControl_CreateMappedControl_MappedControl_Subcontrols_Edges {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl_Subcontrols{}
	}
	return t.Edges
}

type CreateMappedControl_CreateMappedControl_MappedControl struct {
	Controls    CreateMappedControl_CreateMappedControl_MappedControl_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt   *time.Time                                                        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                                           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID          string                                                            "json:\"id\" graphql:\"id\""
	MappingType *string                                                           "json:\"mappingType,omitempty\" graphql:\"mappingType\""
	Relation    *string                                                           "json:\"relation,omitempty\" graphql:\"relation\""
	Subcontrols CreateMappedControl_CreateMappedControl_MappedControl_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags        []string                                                          "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                                                        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                                           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetControls() *CreateMappedControl_CreateMappedControl_MappedControl_Controls {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return &t.Controls
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return t.CreatedAt
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetCreatedBy() *string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return t.CreatedBy
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetID() string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return t.ID
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetMappingType() *string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return t.MappingType
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetRelation() *string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return t.Relation
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetSubcontrols() *CreateMappedControl_CreateMappedControl_MappedControl_Subcontrols {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return &t.Subcontrols
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetTags() []string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return t.Tags
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return t.UpdatedAt
}
func (t *CreateMappedControl_CreateMappedControl_MappedControl) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl_MappedControl{}
	}
	return t.UpdatedBy
}

type CreateMappedControl_CreateMappedControl struct {
	MappedControl CreateMappedControl_CreateMappedControl_MappedControl "json:\"mappedControl\" graphql:\"mappedControl\""
}

func (t *CreateMappedControl_CreateMappedControl) GetMappedControl() *CreateMappedControl_CreateMappedControl_MappedControl {
	if t == nil {
		t = &CreateMappedControl_CreateMappedControl{}
	}
	return &t.MappedControl
}

type DeleteMappedControl_DeleteMappedControl struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteMappedControl_DeleteMappedControl) GetDeletedID() string {
	if t == nil {
		t = &DeleteMappedControl_DeleteMappedControl{}
	}
	return t.DeletedID
}

type GetAllMappedControls_MappedControls_Edges_Node_Controls_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetAllMappedControls_MappedControls_Edges_Node_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllMappedControls_MappedControls_Edges_Node_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllMappedControls_MappedControls_Edges_Node_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetAllMappedControls_MappedControls_Edges_Node_Controls_Edges struct {
	Node *GetAllMappedControls_MappedControls_Edges_Node_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllMappedControls_MappedControls_Edges_Node_Controls_Edges) GetNode() *GetAllMappedControls_MappedControls_Edges_Node_Controls_Edges_Node {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_Controls_Edges{}
	}
	return t.Node
}

type GetAllMappedControls_MappedControls_Edges_Node_Controls struct {
	Edges []*GetAllMappedControls_MappedControls_Edges_Node_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllMappedControls_MappedControls_Edges_Node_Controls) GetEdges() []*GetAllMappedControls_MappedControls_Edges_Node_Controls_Edges {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_Controls{}
	}
	return t.Edges
}

type GetAllMappedControls_MappedControls_Edges_Node_Subcontrols_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetAllMappedControls_MappedControls_Edges_Node_Subcontrols_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_Subcontrols_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllMappedControls_MappedControls_Edges_Node_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllMappedControls_MappedControls_Edges_Node_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type GetAllMappedControls_MappedControls_Edges_Node_Subcontrols_Edges struct {
	Node *GetAllMappedControls_MappedControls_Edges_Node_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllMappedControls_MappedControls_Edges_Node_Subcontrols_Edges) GetNode() *GetAllMappedControls_MappedControls_Edges_Node_Subcontrols_Edges_Node {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_Subcontrols_Edges{}
	}
	return t.Node
}

type GetAllMappedControls_MappedControls_Edges_Node_Subcontrols struct {
	Edges []*GetAllMappedControls_MappedControls_Edges_Node_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllMappedControls_MappedControls_Edges_Node_Subcontrols) GetEdges() []*GetAllMappedControls_MappedControls_Edges_Node_Subcontrols_Edges {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node_Subcontrols{}
	}
	return t.Edges
}

type GetAllMappedControls_MappedControls_Edges_Node struct {
	Controls    GetAllMappedControls_MappedControls_Edges_Node_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt   *time.Time                                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID          string                                                     "json:\"id\" graphql:\"id\""
	MappingType *string                                                    "json:\"mappingType,omitempty\" graphql:\"mappingType\""
	Relation    *string                                                    "json:\"relation,omitempty\" graphql:\"relation\""
	Subcontrols GetAllMappedControls_MappedControls_Edges_Node_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags        []string                                                   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllMappedControls_MappedControls_Edges_Node) GetControls() *GetAllMappedControls_MappedControls_Edges_Node_Controls {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return &t.Controls
}
func (t *GetAllMappedControls_MappedControls_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllMappedControls_MappedControls_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllMappedControls_MappedControls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllMappedControls_MappedControls_Edges_Node) GetMappingType() *string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return t.MappingType
}
func (t *GetAllMappedControls_MappedControls_Edges_Node) GetRelation() *string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return t.Relation
}
func (t *GetAllMappedControls_MappedControls_Edges_Node) GetSubcontrols() *GetAllMappedControls_MappedControls_Edges_Node_Subcontrols {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return &t.Subcontrols
}
func (t *GetAllMappedControls_MappedControls_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllMappedControls_MappedControls_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllMappedControls_MappedControls_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllMappedControls_MappedControls_Edges struct {
	Node *GetAllMappedControls_MappedControls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllMappedControls_MappedControls_Edges) GetNode() *GetAllMappedControls_MappedControls_Edges_Node {
	if t == nil {
		t = &GetAllMappedControls_MappedControls_Edges{}
	}
	return t.Node
}

type GetAllMappedControls_MappedControls struct {
	Edges []*GetAllMappedControls_MappedControls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllMappedControls_MappedControls) GetEdges() []*GetAllMappedControls_MappedControls_Edges {
	if t == nil {
		t = &GetAllMappedControls_MappedControls{}
	}
	return t.Edges
}

type GetMappedControlByID_MappedControl_Controls_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetMappedControlByID_MappedControl_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *GetMappedControlByID_MappedControl_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetMappedControlByID_MappedControl_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetMappedControlByID_MappedControl_Controls_Edges struct {
	Node *GetMappedControlByID_MappedControl_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetMappedControlByID_MappedControl_Controls_Edges) GetNode() *GetMappedControlByID_MappedControl_Controls_Edges_Node {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_Controls_Edges{}
	}
	return t.Node
}

type GetMappedControlByID_MappedControl_Controls struct {
	Edges []*GetMappedControlByID_MappedControl_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetMappedControlByID_MappedControl_Controls) GetEdges() []*GetMappedControlByID_MappedControl_Controls_Edges {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_Controls{}
	}
	return t.Edges
}

type GetMappedControlByID_MappedControl_Subcontrols_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetMappedControlByID_MappedControl_Subcontrols_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_Subcontrols_Edges_Node{}
	}
	return t.Description
}
func (t *GetMappedControlByID_MappedControl_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GetMappedControlByID_MappedControl_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type GetMappedControlByID_MappedControl_Subcontrols_Edges struct {
	Node *GetMappedControlByID_MappedControl_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetMappedControlByID_MappedControl_Subcontrols_Edges) GetNode() *GetMappedControlByID_MappedControl_Subcontrols_Edges_Node {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_Subcontrols_Edges{}
	}
	return t.Node
}

type GetMappedControlByID_MappedControl_Subcontrols struct {
	Edges []*GetMappedControlByID_MappedControl_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetMappedControlByID_MappedControl_Subcontrols) GetEdges() []*GetMappedControlByID_MappedControl_Subcontrols_Edges {
	if t == nil {
		t = &GetMappedControlByID_MappedControl_Subcontrols{}
	}
	return t.Edges
}

type GetMappedControlByID_MappedControl struct {
	Controls    GetMappedControlByID_MappedControl_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt   *time.Time                                     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID          string                                         "json:\"id\" graphql:\"id\""
	MappingType *string                                        "json:\"mappingType,omitempty\" graphql:\"mappingType\""
	Relation    *string                                        "json:\"relation,omitempty\" graphql:\"relation\""
	Subcontrols GetMappedControlByID_MappedControl_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags        []string                                       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetMappedControlByID_MappedControl) GetControls() *GetMappedControlByID_MappedControl_Controls {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return &t.Controls
}
func (t *GetMappedControlByID_MappedControl) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return t.CreatedAt
}
func (t *GetMappedControlByID_MappedControl) GetCreatedBy() *string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return t.CreatedBy
}
func (t *GetMappedControlByID_MappedControl) GetID() string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return t.ID
}
func (t *GetMappedControlByID_MappedControl) GetMappingType() *string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return t.MappingType
}
func (t *GetMappedControlByID_MappedControl) GetRelation() *string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return t.Relation
}
func (t *GetMappedControlByID_MappedControl) GetSubcontrols() *GetMappedControlByID_MappedControl_Subcontrols {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return &t.Subcontrols
}
func (t *GetMappedControlByID_MappedControl) GetTags() []string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return t.Tags
}
func (t *GetMappedControlByID_MappedControl) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return t.UpdatedAt
}
func (t *GetMappedControlByID_MappedControl) GetUpdatedBy() *string {
	if t == nil {
		t = &GetMappedControlByID_MappedControl{}
	}
	return t.UpdatedBy
}

type GetMappedControls_MappedControls_Edges_Node_Controls_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetMappedControls_MappedControls_Edges_Node_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *GetMappedControls_MappedControls_Edges_Node_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetMappedControls_MappedControls_Edges_Node_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetMappedControls_MappedControls_Edges_Node_Controls_Edges struct {
	Node *GetMappedControls_MappedControls_Edges_Node_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetMappedControls_MappedControls_Edges_Node_Controls_Edges) GetNode() *GetMappedControls_MappedControls_Edges_Node_Controls_Edges_Node {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_Controls_Edges{}
	}
	return t.Node
}

type GetMappedControls_MappedControls_Edges_Node_Controls struct {
	Edges []*GetMappedControls_MappedControls_Edges_Node_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetMappedControls_MappedControls_Edges_Node_Controls) GetEdges() []*GetMappedControls_MappedControls_Edges_Node_Controls_Edges {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_Controls{}
	}
	return t.Edges
}

type GetMappedControls_MappedControls_Edges_Node_Subcontrols_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetMappedControls_MappedControls_Edges_Node_Subcontrols_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_Subcontrols_Edges_Node{}
	}
	return t.Description
}
func (t *GetMappedControls_MappedControls_Edges_Node_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GetMappedControls_MappedControls_Edges_Node_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type GetMappedControls_MappedControls_Edges_Node_Subcontrols_Edges struct {
	Node *GetMappedControls_MappedControls_Edges_Node_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetMappedControls_MappedControls_Edges_Node_Subcontrols_Edges) GetNode() *GetMappedControls_MappedControls_Edges_Node_Subcontrols_Edges_Node {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_Subcontrols_Edges{}
	}
	return t.Node
}

type GetMappedControls_MappedControls_Edges_Node_Subcontrols struct {
	Edges []*GetMappedControls_MappedControls_Edges_Node_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetMappedControls_MappedControls_Edges_Node_Subcontrols) GetEdges() []*GetMappedControls_MappedControls_Edges_Node_Subcontrols_Edges {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node_Subcontrols{}
	}
	return t.Edges
}

type GetMappedControls_MappedControls_Edges_Node struct {
	Controls    GetMappedControls_MappedControls_Edges_Node_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt   *time.Time                                              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID          string                                                  "json:\"id\" graphql:\"id\""
	MappingType *string                                                 "json:\"mappingType,omitempty\" graphql:\"mappingType\""
	Relation    *string                                                 "json:\"relation,omitempty\" graphql:\"relation\""
	Subcontrols GetMappedControls_MappedControls_Edges_Node_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags        []string                                                "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                                              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetMappedControls_MappedControls_Edges_Node) GetControls() *GetMappedControls_MappedControls_Edges_Node_Controls {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return &t.Controls
}
func (t *GetMappedControls_MappedControls_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetMappedControls_MappedControls_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetMappedControls_MappedControls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return t.ID
}
func (t *GetMappedControls_MappedControls_Edges_Node) GetMappingType() *string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return t.MappingType
}
func (t *GetMappedControls_MappedControls_Edges_Node) GetRelation() *string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return t.Relation
}
func (t *GetMappedControls_MappedControls_Edges_Node) GetSubcontrols() *GetMappedControls_MappedControls_Edges_Node_Subcontrols {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return &t.Subcontrols
}
func (t *GetMappedControls_MappedControls_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return t.Tags
}
func (t *GetMappedControls_MappedControls_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetMappedControls_MappedControls_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetMappedControls_MappedControls_Edges struct {
	Node *GetMappedControls_MappedControls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetMappedControls_MappedControls_Edges) GetNode() *GetMappedControls_MappedControls_Edges_Node {
	if t == nil {
		t = &GetMappedControls_MappedControls_Edges{}
	}
	return t.Node
}

type GetMappedControls_MappedControls struct {
	Edges []*GetMappedControls_MappedControls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetMappedControls_MappedControls) GetEdges() []*GetMappedControls_MappedControls_Edges {
	if t == nil {
		t = &GetMappedControls_MappedControls{}
	}
	return t.Edges
}

type UpdateMappedControl_UpdateMappedControl_MappedControl_Controls_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_Controls_Edges_Node{}
	}
	return t.RefCode
}

type UpdateMappedControl_UpdateMappedControl_MappedControl_Controls_Edges struct {
	Node *UpdateMappedControl_UpdateMappedControl_MappedControl_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_Controls_Edges) GetNode() *UpdateMappedControl_UpdateMappedControl_MappedControl_Controls_Edges_Node {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_Controls_Edges{}
	}
	return t.Node
}

type UpdateMappedControl_UpdateMappedControl_MappedControl_Controls struct {
	Edges []*UpdateMappedControl_UpdateMappedControl_MappedControl_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_Controls) GetEdges() []*UpdateMappedControl_UpdateMappedControl_MappedControl_Controls_Edges {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_Controls{}
	}
	return t.Edges
}

type UpdateMappedControl_UpdateMappedControl_MappedControl_Subcontrols_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_Subcontrols_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_Subcontrols_Edges_Node{}
	}
	return t.Description
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type UpdateMappedControl_UpdateMappedControl_MappedControl_Subcontrols_Edges struct {
	Node *UpdateMappedControl_UpdateMappedControl_MappedControl_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_Subcontrols_Edges) GetNode() *UpdateMappedControl_UpdateMappedControl_MappedControl_Subcontrols_Edges_Node {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_Subcontrols_Edges{}
	}
	return t.Node
}

type UpdateMappedControl_UpdateMappedControl_MappedControl_Subcontrols struct {
	Edges []*UpdateMappedControl_UpdateMappedControl_MappedControl_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateMappedControl_UpdateMappedControl_MappedControl_Subcontrols) GetEdges() []*UpdateMappedControl_UpdateMappedControl_MappedControl_Subcontrols_Edges {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl_Subcontrols{}
	}
	return t.Edges
}

type UpdateMappedControl_UpdateMappedControl_MappedControl struct {
	Controls    UpdateMappedControl_UpdateMappedControl_MappedControl_Controls    "json:\"controls\" graphql:\"controls\""
	CreatedAt   *time.Time                                                        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                                           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID          string                                                            "json:\"id\" graphql:\"id\""
	MappingType *string                                                           "json:\"mappingType,omitempty\" graphql:\"mappingType\""
	Relation    *string                                                           "json:\"relation,omitempty\" graphql:\"relation\""
	Subcontrols UpdateMappedControl_UpdateMappedControl_MappedControl_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
	Tags        []string                                                          "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                                                        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                                           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetControls() *UpdateMappedControl_UpdateMappedControl_MappedControl_Controls {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return &t.Controls
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return t.CreatedAt
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return t.CreatedBy
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetID() string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return t.ID
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetMappingType() *string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return t.MappingType
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetRelation() *string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return t.Relation
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetSubcontrols() *UpdateMappedControl_UpdateMappedControl_MappedControl_Subcontrols {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return &t.Subcontrols
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetTags() []string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return t.Tags
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return t.UpdatedAt
}
func (t *UpdateMappedControl_UpdateMappedControl_MappedControl) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl_MappedControl{}
	}
	return t.UpdatedBy
}

type UpdateMappedControl_UpdateMappedControl struct {
	MappedControl UpdateMappedControl_UpdateMappedControl_MappedControl "json:\"mappedControl\" graphql:\"mappedControl\""
}

func (t *UpdateMappedControl_UpdateMappedControl) GetMappedControl() *UpdateMappedControl_UpdateMappedControl_MappedControl {
	if t == nil {
		t = &UpdateMappedControl_UpdateMappedControl{}
	}
	return &t.MappedControl
}

type GetAllMappedControlHistories_MappedControlHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	MappingType *string        "json:\"mappingType,omitempty\" graphql:\"mappingType\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Relation    *string        "json:\"relation,omitempty\" graphql:\"relation\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetMappingType() *string {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.MappingType
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetRelation() *string {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.Relation
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllMappedControlHistories_MappedControlHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllMappedControlHistories_MappedControlHistories_Edges struct {
	Node *GetAllMappedControlHistories_MappedControlHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllMappedControlHistories_MappedControlHistories_Edges) GetNode() *GetAllMappedControlHistories_MappedControlHistories_Edges_Node {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories_Edges{}
	}
	return t.Node
}

type GetAllMappedControlHistories_MappedControlHistories struct {
	Edges []*GetAllMappedControlHistories_MappedControlHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllMappedControlHistories_MappedControlHistories) GetEdges() []*GetAllMappedControlHistories_MappedControlHistories_Edges {
	if t == nil {
		t = &GetAllMappedControlHistories_MappedControlHistories{}
	}
	return t.Edges
}

type GetMappedControlHistories_MappedControlHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	MappingType *string        "json:\"mappingType,omitempty\" graphql:\"mappingType\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Relation    *string        "json:\"relation,omitempty\" graphql:\"relation\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetMappingType() *string {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.MappingType
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetRelation() *string {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.Relation
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetMappedControlHistories_MappedControlHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetMappedControlHistories_MappedControlHistories_Edges struct {
	Node *GetMappedControlHistories_MappedControlHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetMappedControlHistories_MappedControlHistories_Edges) GetNode() *GetMappedControlHistories_MappedControlHistories_Edges_Node {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories_Edges{}
	}
	return t.Node
}

type GetMappedControlHistories_MappedControlHistories struct {
	Edges []*GetMappedControlHistories_MappedControlHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetMappedControlHistories_MappedControlHistories) GetEdges() []*GetMappedControlHistories_MappedControlHistories_Edges {
	if t == nil {
		t = &GetMappedControlHistories_MappedControlHistories{}
	}
	return t.Edges
}

type CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string    "json:\"description,omitempty\" graphql:\"description\""
	Details     *string    "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string     "json:\"displayID\" graphql:\"displayID\""
	ID          string     "json:\"id\" graphql:\"id\""
	Name        string     "json:\"name\" graphql:\"name\""
	Tags        []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.Description
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetDetails() *string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.Details
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.DisplayID
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetID() string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.ID
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetName() string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.Name
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.Tags
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVNarrative_CreateBulkCSVNarrative struct {
	Narratives []*CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives "json:\"narratives,omitempty\" graphql:\"narratives\""
}

func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative) GetNarratives() []*CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative{}
	}
	return t.Narratives
}

type CreateBulkNarrative_CreateBulkNarrative_Narratives struct {
	CreatedAt   *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string    "json:\"description,omitempty\" graphql:\"description\""
	Details     *string    "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string     "json:\"displayID\" graphql:\"displayID\""
	ID          string     "json:\"id\" graphql:\"id\""
	Name        string     "json:\"name\" graphql:\"name\""
	Tags        []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.CreatedAt
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.CreatedBy
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetDescription() *string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.Description
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetDetails() *string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.Details
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.DisplayID
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetID() string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.ID
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetName() string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.Name
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetTags() []string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.Tags
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.UpdatedBy
}

type CreateBulkNarrative_CreateBulkNarrative struct {
	Narratives []*CreateBulkNarrative_CreateBulkNarrative_Narratives "json:\"narratives,omitempty\" graphql:\"narratives\""
}

func (t *CreateBulkNarrative_CreateBulkNarrative) GetNarratives() []*CreateBulkNarrative_CreateBulkNarrative_Narratives {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative{}
	}
	return t.Narratives
}

type CreateNarrative_CreateNarrative_Narrative_Programs_Edges_Node struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateNarrative_CreateNarrative_Narrative_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *CreateNarrative_CreateNarrative_Narrative_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative_Programs_Edges_Node{}
	}
	return t.Name
}

type CreateNarrative_CreateNarrative_Narrative_Programs_Edges struct {
	Node *CreateNarrative_CreateNarrative_Narrative_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateNarrative_CreateNarrative_Narrative_Programs_Edges) GetNode() *CreateNarrative_CreateNarrative_Narrative_Programs_Edges_Node {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative_Programs_Edges{}
	}
	return t.Node
}

type CreateNarrative_CreateNarrative_Narrative_Programs struct {
	Edges []*CreateNarrative_CreateNarrative_Narrative_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateNarrative_CreateNarrative_Narrative_Programs) GetEdges() []*CreateNarrative_CreateNarrative_Narrative_Programs_Edges {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative_Programs{}
	}
	return t.Edges
}

type CreateNarrative_CreateNarrative_Narrative_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateNarrative_CreateNarrative_Narrative_Editors) GetID() string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative_Editors{}
	}
	return t.ID
}
func (t *CreateNarrative_CreateNarrative_Narrative_Editors) GetName() string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative_Editors{}
	}
	return t.Name
}

type CreateNarrative_CreateNarrative_Narrative_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateNarrative_CreateNarrative_Narrative_Viewers) GetID() string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative_Viewers{}
	}
	return t.ID
}
func (t *CreateNarrative_CreateNarrative_Narrative_Viewers) GetName() string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative_Viewers{}
	}
	return t.Name
}

type CreateNarrative_CreateNarrative_Narrative_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateNarrative_CreateNarrative_Narrative_BlockedGroups) GetID() string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative_BlockedGroups{}
	}
	return t.ID
}
func (t *CreateNarrative_CreateNarrative_Narrative_BlockedGroups) GetName() string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative_BlockedGroups{}
	}
	return t.Name
}

type CreateNarrative_CreateNarrative_Narrative struct {
	BlockedGroups []*CreateNarrative_CreateNarrative_Narrative_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	CreatedAt     *time.Time                                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string                                                    "json:\"description,omitempty\" graphql:\"description\""
	Details       *string                                                    "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                                                     "json:\"displayID\" graphql:\"displayID\""
	Editors       []*CreateNarrative_CreateNarrative_Narrative_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID            string                                                     "json:\"id\" graphql:\"id\""
	Name          string                                                     "json:\"name\" graphql:\"name\""
	Programs      CreateNarrative_CreateNarrative_Narrative_Programs         "json:\"programs\" graphql:\"programs\""
	Tags          []string                                                   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time                                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers       []*CreateNarrative_CreateNarrative_Narrative_Viewers       "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *CreateNarrative_CreateNarrative_Narrative) GetBlockedGroups() []*CreateNarrative_CreateNarrative_Narrative_BlockedGroups {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.BlockedGroups
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.CreatedAt
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetCreatedBy() *string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.CreatedBy
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetDescription() *string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.Description
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetDetails() *string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.Details
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetDisplayID() string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.DisplayID
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetEditors() []*CreateNarrative_CreateNarrative_Narrative_Editors {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.Editors
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetID() string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.ID
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetName() string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.Name
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetPrograms() *CreateNarrative_CreateNarrative_Narrative_Programs {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return &t.Programs
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetTags() []string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.Tags
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.UpdatedAt
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.UpdatedBy
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetViewers() []*CreateNarrative_CreateNarrative_Narrative_Viewers {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.Viewers
}

type CreateNarrative_CreateNarrative struct {
	Narrative CreateNarrative_CreateNarrative_Narrative "json:\"narrative\" graphql:\"narrative\""
}

func (t *CreateNarrative_CreateNarrative) GetNarrative() *CreateNarrative_CreateNarrative_Narrative {
	if t == nil {
		t = &CreateNarrative_CreateNarrative{}
	}
	return &t.Narrative
}

type DeleteNarrative_DeleteNarrative struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteNarrative_DeleteNarrative) GetDeletedID() string {
	if t == nil {
		t = &DeleteNarrative_DeleteNarrative{}
	}
	return t.DeletedID
}

type GetAllNarratives_Narratives_Edges_Node_Programs_Edges_Node struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllNarratives_Narratives_Edges_Node_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllNarratives_Narratives_Edges_Node_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node_Programs_Edges_Node{}
	}
	return t.Name
}

type GetAllNarratives_Narratives_Edges_Node_Programs_Edges struct {
	Node *GetAllNarratives_Narratives_Edges_Node_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllNarratives_Narratives_Edges_Node_Programs_Edges) GetNode() *GetAllNarratives_Narratives_Edges_Node_Programs_Edges_Node {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node_Programs_Edges{}
	}
	return t.Node
}

type GetAllNarratives_Narratives_Edges_Node_Programs struct {
	Edges []*GetAllNarratives_Narratives_Edges_Node_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllNarratives_Narratives_Edges_Node_Programs) GetEdges() []*GetAllNarratives_Narratives_Edges_Node_Programs_Edges {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node_Programs{}
	}
	return t.Edges
}

type GetAllNarratives_Narratives_Edges_Node_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllNarratives_Narratives_Edges_Node_Editors) GetID() string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node_Editors{}
	}
	return t.ID
}
func (t *GetAllNarratives_Narratives_Edges_Node_Editors) GetName() string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node_Editors{}
	}
	return t.Name
}

type GetAllNarratives_Narratives_Edges_Node_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllNarratives_Narratives_Edges_Node_Viewers) GetID() string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node_Viewers{}
	}
	return t.ID
}
func (t *GetAllNarratives_Narratives_Edges_Node_Viewers) GetName() string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node_Viewers{}
	}
	return t.Name
}

type GetAllNarratives_Narratives_Edges_Node_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllNarratives_Narratives_Edges_Node_BlockedGroups) GetID() string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node_BlockedGroups{}
	}
	return t.ID
}
func (t *GetAllNarratives_Narratives_Edges_Node_BlockedGroups) GetName() string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node_BlockedGroups{}
	}
	return t.Name
}

type GetAllNarratives_Narratives_Edges_Node struct {
	BlockedGroups []*GetAllNarratives_Narratives_Edges_Node_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	CreatedAt     *time.Time                                              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string                                                 "json:\"description,omitempty\" graphql:\"description\""
	Details       *string                                                 "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                                                  "json:\"displayID\" graphql:\"displayID\""
	Editors       []*GetAllNarratives_Narratives_Edges_Node_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID            string                                                  "json:\"id\" graphql:\"id\""
	Name          string                                                  "json:\"name\" graphql:\"name\""
	Programs      GetAllNarratives_Narratives_Edges_Node_Programs         "json:\"programs\" graphql:\"programs\""
	Tags          []string                                                "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time                                              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers       []*GetAllNarratives_Narratives_Edges_Node_Viewers       "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *GetAllNarratives_Narratives_Edges_Node) GetBlockedGroups() []*GetAllNarratives_Narratives_Edges_Node_BlockedGroups {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.BlockedGroups
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetEditors() []*GetAllNarratives_Narratives_Edges_Node_Editors {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.Editors
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetPrograms() *GetAllNarratives_Narratives_Edges_Node_Programs {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return &t.Programs
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetViewers() []*GetAllNarratives_Narratives_Edges_Node_Viewers {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.Viewers
}

type GetAllNarratives_Narratives_Edges struct {
	Node *GetAllNarratives_Narratives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllNarratives_Narratives_Edges) GetNode() *GetAllNarratives_Narratives_Edges_Node {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges{}
	}
	return t.Node
}

type GetAllNarratives_Narratives struct {
	Edges []*GetAllNarratives_Narratives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllNarratives_Narratives) GetEdges() []*GetAllNarratives_Narratives_Edges {
	if t == nil {
		t = &GetAllNarratives_Narratives{}
	}
	return t.Edges
}

type GetNarrativeByID_Narrative_Programs_Edges_Node struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetNarrativeByID_Narrative_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetNarrativeByID_Narrative_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GetNarrativeByID_Narrative_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GetNarrativeByID_Narrative_Programs_Edges_Node{}
	}
	return t.Name
}

type GetNarrativeByID_Narrative_Programs_Edges struct {
	Node *GetNarrativeByID_Narrative_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetNarrativeByID_Narrative_Programs_Edges) GetNode() *GetNarrativeByID_Narrative_Programs_Edges_Node {
	if t == nil {
		t = &GetNarrativeByID_Narrative_Programs_Edges{}
	}
	return t.Node
}

type GetNarrativeByID_Narrative_Programs struct {
	Edges []*GetNarrativeByID_Narrative_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetNarrativeByID_Narrative_Programs) GetEdges() []*GetNarrativeByID_Narrative_Programs_Edges {
	if t == nil {
		t = &GetNarrativeByID_Narrative_Programs{}
	}
	return t.Edges
}

type GetNarrativeByID_Narrative_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetNarrativeByID_Narrative_Editors) GetID() string {
	if t == nil {
		t = &GetNarrativeByID_Narrative_Editors{}
	}
	return t.ID
}
func (t *GetNarrativeByID_Narrative_Editors) GetName() string {
	if t == nil {
		t = &GetNarrativeByID_Narrative_Editors{}
	}
	return t.Name
}

type GetNarrativeByID_Narrative_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetNarrativeByID_Narrative_Viewers) GetID() string {
	if t == nil {
		t = &GetNarrativeByID_Narrative_Viewers{}
	}
	return t.ID
}
func (t *GetNarrativeByID_Narrative_Viewers) GetName() string {
	if t == nil {
		t = &GetNarrativeByID_Narrative_Viewers{}
	}
	return t.Name
}

type GetNarrativeByID_Narrative_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetNarrativeByID_Narrative_BlockedGroups) GetID() string {
	if t == nil {
		t = &GetNarrativeByID_Narrative_BlockedGroups{}
	}
	return t.ID
}
func (t *GetNarrativeByID_Narrative_BlockedGroups) GetName() string {
	if t == nil {
		t = &GetNarrativeByID_Narrative_BlockedGroups{}
	}
	return t.Name
}

type GetNarrativeByID_Narrative struct {
	BlockedGroups []*GetNarrativeByID_Narrative_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	CreatedAt     *time.Time                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string                                     "json:\"description,omitempty\" graphql:\"description\""
	Details       *string                                     "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                                      "json:\"displayID\" graphql:\"displayID\""
	Editors       []*GetNarrativeByID_Narrative_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID            string                                      "json:\"id\" graphql:\"id\""
	Name          string                                      "json:\"name\" graphql:\"name\""
	Programs      GetNarrativeByID_Narrative_Programs         "json:\"programs\" graphql:\"programs\""
	Tags          []string                                    "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers       []*GetNarrativeByID_Narrative_Viewers       "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *GetNarrativeByID_Narrative) GetBlockedGroups() []*GetNarrativeByID_Narrative_BlockedGroups {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.BlockedGroups
}
func (t *GetNarrativeByID_Narrative) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.CreatedAt
}
func (t *GetNarrativeByID_Narrative) GetCreatedBy() *string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.CreatedBy
}
func (t *GetNarrativeByID_Narrative) GetDescription() *string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.Description
}
func (t *GetNarrativeByID_Narrative) GetDetails() *string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.Details
}
func (t *GetNarrativeByID_Narrative) GetDisplayID() string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.DisplayID
}
func (t *GetNarrativeByID_Narrative) GetEditors() []*GetNarrativeByID_Narrative_Editors {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.Editors
}
func (t *GetNarrativeByID_Narrative) GetID() string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.ID
}
func (t *GetNarrativeByID_Narrative) GetName() string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.Name
}
func (t *GetNarrativeByID_Narrative) GetPrograms() *GetNarrativeByID_Narrative_Programs {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return &t.Programs
}
func (t *GetNarrativeByID_Narrative) GetTags() []string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.Tags
}
func (t *GetNarrativeByID_Narrative) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.UpdatedAt
}
func (t *GetNarrativeByID_Narrative) GetUpdatedBy() *string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.UpdatedBy
}
func (t *GetNarrativeByID_Narrative) GetViewers() []*GetNarrativeByID_Narrative_Viewers {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.Viewers
}

type GetNarratives_Narratives_Edges_Node_Programs_Edges_Node struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetNarratives_Narratives_Edges_Node_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GetNarratives_Narratives_Edges_Node_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node_Programs_Edges_Node{}
	}
	return t.Name
}

type GetNarratives_Narratives_Edges_Node_Programs_Edges struct {
	Node *GetNarratives_Narratives_Edges_Node_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetNarratives_Narratives_Edges_Node_Programs_Edges) GetNode() *GetNarratives_Narratives_Edges_Node_Programs_Edges_Node {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node_Programs_Edges{}
	}
	return t.Node
}

type GetNarratives_Narratives_Edges_Node_Programs struct {
	Edges []*GetNarratives_Narratives_Edges_Node_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetNarratives_Narratives_Edges_Node_Programs) GetEdges() []*GetNarratives_Narratives_Edges_Node_Programs_Edges {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node_Programs{}
	}
	return t.Edges
}

type GetNarratives_Narratives_Edges_Node_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetNarratives_Narratives_Edges_Node_Editors) GetID() string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node_Editors{}
	}
	return t.ID
}
func (t *GetNarratives_Narratives_Edges_Node_Editors) GetName() string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node_Editors{}
	}
	return t.Name
}

type GetNarratives_Narratives_Edges_Node_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetNarratives_Narratives_Edges_Node_Viewers) GetID() string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node_Viewers{}
	}
	return t.ID
}
func (t *GetNarratives_Narratives_Edges_Node_Viewers) GetName() string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node_Viewers{}
	}
	return t.Name
}

type GetNarratives_Narratives_Edges_Node_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetNarratives_Narratives_Edges_Node_BlockedGroups) GetID() string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node_BlockedGroups{}
	}
	return t.ID
}
func (t *GetNarratives_Narratives_Edges_Node_BlockedGroups) GetName() string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node_BlockedGroups{}
	}
	return t.Name
}

type GetNarratives_Narratives_Edges_Node struct {
	BlockedGroups []*GetNarratives_Narratives_Edges_Node_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	CreatedAt     *time.Time                                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string                                              "json:\"description,omitempty\" graphql:\"description\""
	Details       *string                                              "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                                               "json:\"displayID\" graphql:\"displayID\""
	Editors       []*GetNarratives_Narratives_Edges_Node_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID            string                                               "json:\"id\" graphql:\"id\""
	Name          string                                               "json:\"name\" graphql:\"name\""
	Programs      GetNarratives_Narratives_Edges_Node_Programs         "json:\"programs\" graphql:\"programs\""
	Tags          []string                                             "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time                                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers       []*GetNarratives_Narratives_Edges_Node_Viewers       "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *GetNarratives_Narratives_Edges_Node) GetBlockedGroups() []*GetNarratives_Narratives_Edges_Node_BlockedGroups {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.BlockedGroups
}
func (t *GetNarratives_Narratives_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetNarratives_Narratives_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetNarratives_Narratives_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.Description
}
func (t *GetNarratives_Narratives_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.Details
}
func (t *GetNarratives_Narratives_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetNarratives_Narratives_Edges_Node) GetEditors() []*GetNarratives_Narratives_Edges_Node_Editors {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.Editors
}
func (t *GetNarratives_Narratives_Edges_Node) GetID() string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.ID
}
func (t *GetNarratives_Narratives_Edges_Node) GetName() string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.Name
}
func (t *GetNarratives_Narratives_Edges_Node) GetPrograms() *GetNarratives_Narratives_Edges_Node_Programs {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return &t.Programs
}
func (t *GetNarratives_Narratives_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.Tags
}
func (t *GetNarratives_Narratives_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetNarratives_Narratives_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetNarratives_Narratives_Edges_Node) GetViewers() []*GetNarratives_Narratives_Edges_Node_Viewers {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.Viewers
}

type GetNarratives_Narratives_Edges struct {
	Node *GetNarratives_Narratives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetNarratives_Narratives_Edges) GetNode() *GetNarratives_Narratives_Edges_Node {
	if t == nil {
		t = &GetNarratives_Narratives_Edges{}
	}
	return t.Node
}

type GetNarratives_Narratives struct {
	Edges []*GetNarratives_Narratives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetNarratives_Narratives) GetEdges() []*GetNarratives_Narratives_Edges {
	if t == nil {
		t = &GetNarratives_Narratives{}
	}
	return t.Edges
}

type UpdateNarrative_UpdateNarrative_Narrative_Programs_Edges_Node struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateNarrative_UpdateNarrative_Narrative_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateNarrative_UpdateNarrative_Narrative_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative_Programs_Edges_Node{}
	}
	return t.Name
}

type UpdateNarrative_UpdateNarrative_Narrative_Programs_Edges struct {
	Node *UpdateNarrative_UpdateNarrative_Narrative_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateNarrative_UpdateNarrative_Narrative_Programs_Edges) GetNode() *UpdateNarrative_UpdateNarrative_Narrative_Programs_Edges_Node {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative_Programs_Edges{}
	}
	return t.Node
}

type UpdateNarrative_UpdateNarrative_Narrative_Programs struct {
	Edges []*UpdateNarrative_UpdateNarrative_Narrative_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateNarrative_UpdateNarrative_Narrative_Programs) GetEdges() []*UpdateNarrative_UpdateNarrative_Narrative_Programs_Edges {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative_Programs{}
	}
	return t.Edges
}

type UpdateNarrative_UpdateNarrative_Narrative_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateNarrative_UpdateNarrative_Narrative_Editors) GetID() string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative_Editors{}
	}
	return t.ID
}
func (t *UpdateNarrative_UpdateNarrative_Narrative_Editors) GetName() string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative_Editors{}
	}
	return t.Name
}

type UpdateNarrative_UpdateNarrative_Narrative_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateNarrative_UpdateNarrative_Narrative_Viewers) GetID() string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative_Viewers{}
	}
	return t.ID
}
func (t *UpdateNarrative_UpdateNarrative_Narrative_Viewers) GetName() string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative_Viewers{}
	}
	return t.Name
}

type UpdateNarrative_UpdateNarrative_Narrative_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateNarrative_UpdateNarrative_Narrative_BlockedGroups) GetID() string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative_BlockedGroups{}
	}
	return t.ID
}
func (t *UpdateNarrative_UpdateNarrative_Narrative_BlockedGroups) GetName() string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative_BlockedGroups{}
	}
	return t.Name
}

type UpdateNarrative_UpdateNarrative_Narrative struct {
	BlockedGroups []*UpdateNarrative_UpdateNarrative_Narrative_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	CreatedAt     *time.Time                                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string                                                    "json:\"description,omitempty\" graphql:\"description\""
	Details       *string                                                    "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                                                     "json:\"displayID\" graphql:\"displayID\""
	Editors       []*UpdateNarrative_UpdateNarrative_Narrative_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID            string                                                     "json:\"id\" graphql:\"id\""
	Name          string                                                     "json:\"name\" graphql:\"name\""
	Programs      UpdateNarrative_UpdateNarrative_Narrative_Programs         "json:\"programs\" graphql:\"programs\""
	Tags          []string                                                   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time                                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers       []*UpdateNarrative_UpdateNarrative_Narrative_Viewers       "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *UpdateNarrative_UpdateNarrative_Narrative) GetBlockedGroups() []*UpdateNarrative_UpdateNarrative_Narrative_BlockedGroups {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.BlockedGroups
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.CreatedAt
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.CreatedBy
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetDescription() *string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.Description
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetDetails() *string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.Details
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetDisplayID() string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.DisplayID
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetEditors() []*UpdateNarrative_UpdateNarrative_Narrative_Editors {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.Editors
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetID() string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.ID
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetName() string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.Name
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetPrograms() *UpdateNarrative_UpdateNarrative_Narrative_Programs {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return &t.Programs
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetTags() []string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.Tags
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.UpdatedAt
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.UpdatedBy
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetViewers() []*UpdateNarrative_UpdateNarrative_Narrative_Viewers {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.Viewers
}

type UpdateNarrative_UpdateNarrative struct {
	Narrative UpdateNarrative_UpdateNarrative_Narrative "json:\"narrative\" graphql:\"narrative\""
}

func (t *UpdateNarrative_UpdateNarrative) GetNarrative() *UpdateNarrative_UpdateNarrative_Narrative {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative{}
	}
	return &t.Narrative
}

type GetAllNarrativeHistories_NarrativeHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string        "json:\"description,omitempty\" graphql:\"description\""
	Details     *string        "json:\"details,omitempty\" graphql:\"details\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllNarrativeHistories_NarrativeHistories_Edges struct {
	Node *GetAllNarrativeHistories_NarrativeHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllNarrativeHistories_NarrativeHistories_Edges) GetNode() *GetAllNarrativeHistories_NarrativeHistories_Edges_Node {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges{}
	}
	return t.Node
}

type GetAllNarrativeHistories_NarrativeHistories struct {
	Edges []*GetAllNarrativeHistories_NarrativeHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllNarrativeHistories_NarrativeHistories) GetEdges() []*GetAllNarrativeHistories_NarrativeHistories_Edges {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories{}
	}
	return t.Edges
}

type GetNarrativeHistories_NarrativeHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string        "json:\"description,omitempty\" graphql:\"description\""
	Details     *string        "json:\"details,omitempty\" graphql:\"details\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetNarrativeHistories_NarrativeHistories_Edges struct {
	Node *GetNarrativeHistories_NarrativeHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetNarrativeHistories_NarrativeHistories_Edges) GetNode() *GetNarrativeHistories_NarrativeHistories_Edges_Node {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges{}
	}
	return t.Node
}

type GetNarrativeHistories_NarrativeHistories struct {
	Edges []*GetNarrativeHistories_NarrativeHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetNarrativeHistories_NarrativeHistories) GetEdges() []*GetNarrativeHistories_NarrativeHistories_Edges {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories{}
	}
	return t.Edges
}

type GetNoteByID_Note_Files_Edges_Node struct {
	ID            string  "json:\"id\" graphql:\"id\""
	StoragePath   *string "json:\"storagePath,omitempty\" graphql:\"storagePath\""
	StorageScheme *string "json:\"storageScheme,omitempty\" graphql:\"storageScheme\""
	StorageVolume *string "json:\"storageVolume,omitempty\" graphql:\"storageVolume\""
}

func (t *GetNoteByID_Note_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GetNoteByID_Note_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GetNoteByID_Note_Files_Edges_Node) GetStoragePath() *string {
	if t == nil {
		t = &GetNoteByID_Note_Files_Edges_Node{}
	}
	return t.StoragePath
}
func (t *GetNoteByID_Note_Files_Edges_Node) GetStorageScheme() *string {
	if t == nil {
		t = &GetNoteByID_Note_Files_Edges_Node{}
	}
	return t.StorageScheme
}
func (t *GetNoteByID_Note_Files_Edges_Node) GetStorageVolume() *string {
	if t == nil {
		t = &GetNoteByID_Note_Files_Edges_Node{}
	}
	return t.StorageVolume
}

type GetNoteByID_Note_Files_Edges struct {
	Node *GetNoteByID_Note_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetNoteByID_Note_Files_Edges) GetNode() *GetNoteByID_Note_Files_Edges_Node {
	if t == nil {
		t = &GetNoteByID_Note_Files_Edges{}
	}
	return t.Node
}

type GetNoteByID_Note_Files struct {
	Edges []*GetNoteByID_Note_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetNoteByID_Note_Files) GetEdges() []*GetNoteByID_Note_Files_Edges {
	if t == nil {
		t = &GetNoteByID_Note_Files{}
	}
	return t.Edges
}

type GetNoteByID_Note struct {
	CreatedAt *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID string                 "json:\"displayID\" graphql:\"displayID\""
	Files     GetNoteByID_Note_Files "json:\"files\" graphql:\"files\""
	ID        string                 "json:\"id\" graphql:\"id\""
	Text      string                 "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetNoteByID_Note) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetNoteByID_Note{}
	}
	return t.CreatedAt
}
func (t *GetNoteByID_Note) GetCreatedBy() *string {
	if t == nil {
		t = &GetNoteByID_Note{}
	}
	return t.CreatedBy
}
func (t *GetNoteByID_Note) GetDisplayID() string {
	if t == nil {
		t = &GetNoteByID_Note{}
	}
	return t.DisplayID
}
func (t *GetNoteByID_Note) GetFiles() *GetNoteByID_Note_Files {
	if t == nil {
		t = &GetNoteByID_Note{}
	}
	return &t.Files
}
func (t *GetNoteByID_Note) GetID() string {
	if t == nil {
		t = &GetNoteByID_Note{}
	}
	return t.ID
}
func (t *GetNoteByID_Note) GetText() string {
	if t == nil {
		t = &GetNoteByID_Note{}
	}
	return t.Text
}
func (t *GetNoteByID_Note) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetNoteByID_Note{}
	}
	return t.UpdatedAt
}
func (t *GetNoteByID_Note) GetUpdatedBy() *string {
	if t == nil {
		t = &GetNoteByID_Note{}
	}
	return t.UpdatedBy
}

type GetAllNoteHistories_NoteHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Text        string         "json:\"text\" graphql:\"text\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetText() string {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.Text
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllNoteHistories_NoteHistories_Edges struct {
	Node *GetAllNoteHistories_NoteHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllNoteHistories_NoteHistories_Edges) GetNode() *GetAllNoteHistories_NoteHistories_Edges_Node {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges{}
	}
	return t.Node
}

type GetAllNoteHistories_NoteHistories struct {
	Edges []*GetAllNoteHistories_NoteHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllNoteHistories_NoteHistories) GetEdges() []*GetAllNoteHistories_NoteHistories_Edges {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories{}
	}
	return t.Edges
}

type GetNoteHistories_NoteHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Text        string         "json:\"text\" graphql:\"text\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetNoteHistories_NoteHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetText() string {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.Text
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetNoteHistories_NoteHistories_Edges struct {
	Node *GetNoteHistories_NoteHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetNoteHistories_NoteHistories_Edges) GetNode() *GetNoteHistories_NoteHistories_Edges_Node {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges{}
	}
	return t.Node
}

type GetNoteHistories_NoteHistories struct {
	Edges []*GetNoteHistories_NoteHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetNoteHistories_NoteHistories) GetEdges() []*GetNoteHistories_NoteHistories_Edges {
	if t == nil {
		t = &GetNoteHistories_NoteHistories{}
	}
	return t.Edges
}

type CreateOnboarding_CreateOnboarding_Onboarding struct {
	CompanyDetails map[string]any "json:\"companyDetails,omitempty\" graphql:\"companyDetails\""
	CompanyName    string         "json:\"companyName\" graphql:\"companyName\""
	Compliance     map[string]any "json:\"compliance,omitempty\" graphql:\"compliance\""
	Domains        []string       "json:\"domains,omitempty\" graphql:\"domains\""
	ID             string         "json:\"id\" graphql:\"id\""
	OrganizationID *string        "json:\"organizationID,omitempty\" graphql:\"organizationID\""
	UserDetails    map[string]any "json:\"userDetails,omitempty\" graphql:\"userDetails\""
}

func (t *CreateOnboarding_CreateOnboarding_Onboarding) GetCompanyDetails() map[string]any {
	if t == nil {
		t = &CreateOnboarding_CreateOnboarding_Onboarding{}
	}
	return t.CompanyDetails
}
func (t *CreateOnboarding_CreateOnboarding_Onboarding) GetCompanyName() string {
	if t == nil {
		t = &CreateOnboarding_CreateOnboarding_Onboarding{}
	}
	return t.CompanyName
}
func (t *CreateOnboarding_CreateOnboarding_Onboarding) GetCompliance() map[string]any {
	if t == nil {
		t = &CreateOnboarding_CreateOnboarding_Onboarding{}
	}
	return t.Compliance
}
func (t *CreateOnboarding_CreateOnboarding_Onboarding) GetDomains() []string {
	if t == nil {
		t = &CreateOnboarding_CreateOnboarding_Onboarding{}
	}
	return t.Domains
}
func (t *CreateOnboarding_CreateOnboarding_Onboarding) GetID() string {
	if t == nil {
		t = &CreateOnboarding_CreateOnboarding_Onboarding{}
	}
	return t.ID
}
func (t *CreateOnboarding_CreateOnboarding_Onboarding) GetOrganizationID() *string {
	if t == nil {
		t = &CreateOnboarding_CreateOnboarding_Onboarding{}
	}
	return t.OrganizationID
}
func (t *CreateOnboarding_CreateOnboarding_Onboarding) GetUserDetails() map[string]any {
	if t == nil {
		t = &CreateOnboarding_CreateOnboarding_Onboarding{}
	}
	return t.UserDetails
}

type CreateOnboarding_CreateOnboarding struct {
	Onboarding CreateOnboarding_CreateOnboarding_Onboarding "json:\"onboarding\" graphql:\"onboarding\""
}

func (t *CreateOnboarding_CreateOnboarding) GetOnboarding() *CreateOnboarding_CreateOnboarding_Onboarding {
	if t == nil {
		t = &CreateOnboarding_CreateOnboarding{}
	}
	return &t.Onboarding
}

type CreateOrganization_CreateOrganization_Organization_AvatarFile struct {
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *CreateOrganization_CreateOrganization_Organization_AvatarFile) GetPresignedURL() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_AvatarFile{}
	}
	return t.PresignedURL
}

type CreateOrganization_CreateOrganization_Organization_Setting struct {
	AllowedEmailDomains []string        "json:\"allowedEmailDomains,omitempty\" graphql:\"allowedEmailDomains\""
	BillingAddress      *models.Address "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact      *string         "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail        *string         "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone        *string         "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt           *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains             []string        "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation         *enums.Region   "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID                  string          "json:\"id\" graphql:\"id\""
	Tags                []string        "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier       *string         "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt           *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetAllowedEmailDomains() []string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.AllowedEmailDomains
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetBillingAddress() *models.Address {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.BillingAddress
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetBillingContact() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.BillingContact
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetBillingEmail() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.BillingEmail
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetBillingPhone() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.BillingPhone
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.CreatedAt
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.CreatedBy
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetDomains() []string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.Domains
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.GeoLocation
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetID() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.ID
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetTags() []string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.Tags
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetTaxIdentifier() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.TaxIdentifier
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.UpdatedAt
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.UpdatedBy
}

type CreateOrganization_CreateOrganization_Organization_Parent struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateOrganization_CreateOrganization_Organization_Parent) GetID() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Parent{}
	}
	return t.ID
}
func (t *CreateOrganization_CreateOrganization_Organization_Parent) GetName() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Parent{}
	}
	return t.Name
}

type CreateOrganization_CreateOrganization_Organization_Children_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
}

func (t *CreateOrganization_CreateOrganization_Organization_Children_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Children_Edges_Node{}
	}
	return t.Description
}
func (t *CreateOrganization_CreateOrganization_Organization_Children_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Children_Edges_Node{}
	}
	return t.DisplayName
}
func (t *CreateOrganization_CreateOrganization_Organization_Children_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Children_Edges_Node{}
	}
	return t.ID
}
func (t *CreateOrganization_CreateOrganization_Organization_Children_Edges_Node) GetName() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Children_Edges_Node{}
	}
	return t.Name
}

type CreateOrganization_CreateOrganization_Organization_Children_Edges struct {
	Node *CreateOrganization_CreateOrganization_Organization_Children_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateOrganization_CreateOrganization_Organization_Children_Edges) GetNode() *CreateOrganization_CreateOrganization_Organization_Children_Edges_Node {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Children_Edges{}
	}
	return t.Node
}

type CreateOrganization_CreateOrganization_Organization_Children struct {
	Edges []*CreateOrganization_CreateOrganization_Organization_Children_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateOrganization_CreateOrganization_Organization_Children) GetEdges() []*CreateOrganization_CreateOrganization_Organization_Children_Edges {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Children{}
	}
	return t.Edges
}

type CreateOrganization_CreateOrganization_Organization struct {
	AvatarFile        *CreateOrganization_CreateOrganization_Organization_AvatarFile "json:\"avatarFile,omitempty\" graphql:\"avatarFile\""
	AvatarLocalFileID *string                                                        "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string                                                        "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	Children          CreateOrganization_CreateOrganization_Organization_Children    "json:\"children\" graphql:\"children\""
	CreatedAt         *time.Time                                                     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	Description       *string                                                        "json:\"description,omitempty\" graphql:\"description\""
	DisplayName       string                                                         "json:\"displayName\" graphql:\"displayName\""
	ID                string                                                         "json:\"id\" graphql:\"id\""
	Name              string                                                         "json:\"name\" graphql:\"name\""
	Parent            *CreateOrganization_CreateOrganization_Organization_Parent     "json:\"parent,omitempty\" graphql:\"parent\""
	PersonalOrg       *bool                                                          "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Setting           *CreateOrganization_CreateOrganization_Organization_Setting    "json:\"setting,omitempty\" graphql:\"setting\""
	Tags              []string                                                       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time                                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
}

func (t *CreateOrganization_CreateOrganization_Organization) GetAvatarFile() *CreateOrganization_CreateOrganization_Organization_AvatarFile {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.AvatarFile
}
func (t *CreateOrganization_CreateOrganization_Organization) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.AvatarLocalFileID
}
func (t *CreateOrganization_CreateOrganization_Organization) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.AvatarRemoteURL
}
func (t *CreateOrganization_CreateOrganization_Organization) GetChildren() *CreateOrganization_CreateOrganization_Organization_Children {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return &t.Children
}
func (t *CreateOrganization_CreateOrganization_Organization) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.CreatedAt
}
func (t *CreateOrganization_CreateOrganization_Organization) GetDescription() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.Description
}
func (t *CreateOrganization_CreateOrganization_Organization) GetDisplayName() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.DisplayName
}
func (t *CreateOrganization_CreateOrganization_Organization) GetID() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.ID
}
func (t *CreateOrganization_CreateOrganization_Organization) GetName() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.Name
}
func (t *CreateOrganization_CreateOrganization_Organization) GetParent() *CreateOrganization_CreateOrganization_Organization_Parent {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.Parent
}
func (t *CreateOrganization_CreateOrganization_Organization) GetPersonalOrg() *bool {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.PersonalOrg
}
func (t *CreateOrganization_CreateOrganization_Organization) GetSetting() *CreateOrganization_CreateOrganization_Organization_Setting {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.Setting
}
func (t *CreateOrganization_CreateOrganization_Organization) GetTags() []string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.Tags
}
func (t *CreateOrganization_CreateOrganization_Organization) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.UpdatedAt
}

type CreateOrganization_CreateOrganization struct {
	Organization CreateOrganization_CreateOrganization_Organization "json:\"organization\" graphql:\"organization\""
}

func (t *CreateOrganization_CreateOrganization) GetOrganization() *CreateOrganization_CreateOrganization_Organization {
	if t == nil {
		t = &CreateOrganization_CreateOrganization{}
	}
	return &t.Organization
}

type CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting struct {
	AllowedEmailDomains []string        "json:\"allowedEmailDomains,omitempty\" graphql:\"allowedEmailDomains\""
	BillingAddress      *models.Address "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact      *string         "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail        *string         "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone        *string         "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt           *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains             []string        "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation         *enums.Region   "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID                  string          "json:\"id\" graphql:\"id\""
	Tags                []string        "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier       *string         "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt           *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting) GetAllowedEmailDomains() []string {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting{}
	}
	return t.AllowedEmailDomains
}
func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting) GetBillingAddress() *models.Address {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting{}
	}
	return t.BillingAddress
}
func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting) GetBillingContact() *string {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting{}
	}
	return t.BillingContact
}
func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting) GetBillingEmail() *string {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting{}
	}
	return t.BillingEmail
}
func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting) GetBillingPhone() *string {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting{}
	}
	return t.BillingPhone
}
func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting{}
	}
	return t.CreatedAt
}
func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting{}
	}
	return t.CreatedBy
}
func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting) GetDomains() []string {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting{}
	}
	return t.Domains
}
func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting{}
	}
	return t.GeoLocation
}
func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting) GetID() string {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting{}
	}
	return t.ID
}
func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting) GetTags() []string {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting{}
	}
	return t.Tags
}
func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting) GetTaxIdentifier() *string {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting{}
	}
	return t.TaxIdentifier
}
func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting{}
	}
	return t.UpdatedAt
}
func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting{}
	}
	return t.UpdatedBy
}

type CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges_Node_User struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges_Node_User) GetFirstName() *string {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges_Node_User{}
	}
	return t.FirstName
}
func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges_Node_User) GetID() string {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges_Node_User{}
	}
	return t.ID
}
func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges_Node_User) GetLastName() *string {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges_Node_User{}
	}
	return t.LastName
}

type CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges_Node struct {
	ID   string                                                                                           "json:\"id\" graphql:\"id\""
	Role enums.Role                                                                                       "json:\"role\" graphql:\"role\""
	User CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges_Node_User "json:\"user\" graphql:\"user\""
}

func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges_Node{}
	}
	return t.ID
}
func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges_Node{}
	}
	return &t.Role
}
func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges_Node) GetUser() *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges_Node_User {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges_Node{}
	}
	return &t.User
}

type CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges struct {
	Node *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges) GetNode() *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges_Node {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges{}
	}
	return t.Node
}

type CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members struct {
	Edges      []*CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                                                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members) GetEdges() []*CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members_Edges {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members{}
	}
	return t.Edges
}
func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members) GetTotalCount() int64 {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members{}
	}
	return t.TotalCount
}

type CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization struct {
	DisplayName string                                                                            "json:\"displayName\" graphql:\"displayName\""
	ID          string                                                                            "json:\"id\" graphql:\"id\""
	Members     CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members  "json:\"members\" graphql:\"members\""
	Name        string                                                                            "json:\"name\" graphql:\"name\""
	Setting     *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting "json:\"setting,omitempty\" graphql:\"setting\""
}

func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization) GetDisplayName() string {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization{}
	}
	return t.DisplayName
}
func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization) GetID() string {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization{}
	}
	return t.ID
}
func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization) GetMembers() *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Members {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization{}
	}
	return &t.Members
}
func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization) GetName() string {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization{}
	}
	return t.Name
}
func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization) GetSetting() *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization_Setting {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization{}
	}
	return t.Setting
}

type CreateOrganizationWithMembers_CreateOrganizationWithMembers struct {
	Organization CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization "json:\"organization\" graphql:\"organization\""
}

func (t *CreateOrganizationWithMembers_CreateOrganizationWithMembers) GetOrganization() *CreateOrganizationWithMembers_CreateOrganizationWithMembers_Organization {
	if t == nil {
		t = &CreateOrganizationWithMembers_CreateOrganizationWithMembers{}
	}
	return &t.Organization
}

type DeleteOrganization_DeleteOrganization struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteOrganization_DeleteOrganization) GetDeletedID() string {
	if t == nil {
		t = &DeleteOrganization_DeleteOrganization{}
	}
	return t.DeletedID
}

type GetAllOrganizations_Organizations_Edges_Node_Parent struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Parent) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Parent{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Parent) GetName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Parent{}
	}
	return t.Name
}

type GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.Name
}

type GetAllOrganizations_Organizations_Edges_Node_Children_Edges struct {
	Node *GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Children_Edges) GetNode() *GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Children_Edges{}
	}
	return t.Node
}

type GetAllOrganizations_Organizations_Edges_Node_Children struct {
	Edges []*GetAllOrganizations_Organizations_Edges_Node_Children_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Children) GetEdges() []*GetAllOrganizations_Organizations_Edges_Node_Children_Edges {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Children{}
	}
	return t.Edges
}

type GetAllOrganizations_Organizations_Edges_Node_Members_Edges_Node_User struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Members_Edges_Node_User) GetFirstName() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Members_Edges_Node_User{}
	}
	return t.FirstName
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Members_Edges_Node_User) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Members_Edges_Node_User{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Members_Edges_Node_User) GetLastName() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Members_Edges_Node_User{}
	}
	return t.LastName
}

type GetAllOrganizations_Organizations_Edges_Node_Members_Edges_Node struct {
	ID   string                                                               "json:\"id\" graphql:\"id\""
	Role enums.Role                                                           "json:\"role\" graphql:\"role\""
	User GetAllOrganizations_Organizations_Edges_Node_Members_Edges_Node_User "json:\"user\" graphql:\"user\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Members_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Members_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Members_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Members_Edges_Node{}
	}
	return &t.Role
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Members_Edges_Node) GetUser() *GetAllOrganizations_Organizations_Edges_Node_Members_Edges_Node_User {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Members_Edges_Node{}
	}
	return &t.User
}

type GetAllOrganizations_Organizations_Edges_Node_Members_Edges struct {
	Node *GetAllOrganizations_Organizations_Edges_Node_Members_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Members_Edges) GetNode() *GetAllOrganizations_Organizations_Edges_Node_Members_Edges_Node {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Members_Edges{}
	}
	return t.Node
}

type GetAllOrganizations_Organizations_Edges_Node_Members struct {
	Edges      []*GetAllOrganizations_Organizations_Edges_Node_Members_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Members) GetEdges() []*GetAllOrganizations_Organizations_Edges_Node_Members_Edges {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Members{}
	}
	return t.Edges
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Members) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Members{}
	}
	return t.TotalCount
}

type GetAllOrganizations_Organizations_Edges_Node_Setting struct {
	AllowedEmailDomains []string        "json:\"allowedEmailDomains,omitempty\" graphql:\"allowedEmailDomains\""
	BillingAddress      *models.Address "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact      *string         "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail        *string         "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone        *string         "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt           *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains             []string        "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation         *enums.Region   "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID                  string          "json:\"id\" graphql:\"id\""
	Tags                []string        "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier       *string         "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt           *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetAllowedEmailDomains() []string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.AllowedEmailDomains
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetBillingAddress() *models.Address {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingAddress
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetBillingContact() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingContact
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetBillingEmail() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingEmail
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetBillingPhone() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingPhone
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.CreatedAt
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.CreatedBy
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetDomains() []string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.Domains
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.GeoLocation
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetTags() []string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.Tags
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.TaxIdentifier
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.UpdatedBy
}

type GetAllOrganizations_Organizations_Edges_Node_OrgSubscriptions struct {
	Active                   bool     "json:\"active\" graphql:\"active\""
	Features                 []string "json:\"features,omitempty\" graphql:\"features\""
	ID                       string   "json:\"id\" graphql:\"id\""
	ProductTier              *string  "json:\"productTier,omitempty\" graphql:\"productTier\""
	StripeCustomerID         *string  "json:\"stripeCustomerID,omitempty\" graphql:\"stripeCustomerID\""
	StripeSubscriptionStatus *string  "json:\"stripeSubscriptionStatus,omitempty\" graphql:\"stripeSubscriptionStatus\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_OrgSubscriptions) GetActive() bool {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_OrgSubscriptions{}
	}
	return t.Active
}
func (t *GetAllOrganizations_Organizations_Edges_Node_OrgSubscriptions) GetFeatures() []string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_OrgSubscriptions{}
	}
	return t.Features
}
func (t *GetAllOrganizations_Organizations_Edges_Node_OrgSubscriptions) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_OrgSubscriptions{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_OrgSubscriptions) GetProductTier() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_OrgSubscriptions{}
	}
	return t.ProductTier
}
func (t *GetAllOrganizations_Organizations_Edges_Node_OrgSubscriptions) GetStripeCustomerID() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_OrgSubscriptions{}
	}
	return t.StripeCustomerID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_OrgSubscriptions) GetStripeSubscriptionStatus() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_OrgSubscriptions{}
	}
	return t.StripeSubscriptionStatus
}

type GetAllOrganizations_Organizations_Edges_Node_ControlCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_ControlCreators) GetDisplayID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_ControlCreators{}
	}
	return t.DisplayID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_ControlCreators) GetDisplayName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_ControlCreators{}
	}
	return t.DisplayName
}
func (t *GetAllOrganizations_Organizations_Edges_Node_ControlCreators) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_ControlCreators{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_ControlCreators) GetName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_ControlCreators{}
	}
	return t.Name
}

type GetAllOrganizations_Organizations_Edges_Node_ProgramCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_ProgramCreators) GetDisplayID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_ProgramCreators{}
	}
	return t.DisplayID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_ProgramCreators) GetDisplayName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_ProgramCreators{}
	}
	return t.DisplayName
}
func (t *GetAllOrganizations_Organizations_Edges_Node_ProgramCreators) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_ProgramCreators{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_ProgramCreators) GetName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_ProgramCreators{}
	}
	return t.Name
}

type GetAllOrganizations_Organizations_Edges_Node_ProcedureCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_ProcedureCreators) GetDisplayID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_ProcedureCreators{}
	}
	return t.DisplayID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_ProcedureCreators) GetDisplayName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_ProcedureCreators{}
	}
	return t.DisplayName
}
func (t *GetAllOrganizations_Organizations_Edges_Node_ProcedureCreators) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_ProcedureCreators{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_ProcedureCreators) GetName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_ProcedureCreators{}
	}
	return t.Name
}

type GetAllOrganizations_Organizations_Edges_Node_InternalPolicyCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_InternalPolicyCreators) GetDisplayID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_InternalPolicyCreators{}
	}
	return t.DisplayID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_InternalPolicyCreators) GetDisplayName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_InternalPolicyCreators{}
	}
	return t.DisplayName
}
func (t *GetAllOrganizations_Organizations_Edges_Node_InternalPolicyCreators) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_InternalPolicyCreators{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_InternalPolicyCreators) GetName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_InternalPolicyCreators{}
	}
	return t.Name
}

type GetAllOrganizations_Organizations_Edges_Node_ControlObjectiveCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_ControlObjectiveCreators) GetDisplayID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_ControlObjectiveCreators{}
	}
	return t.DisplayID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_ControlObjectiveCreators) GetDisplayName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_ControlObjectiveCreators{}
	}
	return t.DisplayName
}
func (t *GetAllOrganizations_Organizations_Edges_Node_ControlObjectiveCreators) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_ControlObjectiveCreators{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_ControlObjectiveCreators) GetName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_ControlObjectiveCreators{}
	}
	return t.Name
}

type GetAllOrganizations_Organizations_Edges_Node_NarrativeCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_NarrativeCreators) GetDisplayID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_NarrativeCreators{}
	}
	return t.DisplayID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_NarrativeCreators) GetDisplayName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_NarrativeCreators{}
	}
	return t.DisplayName
}
func (t *GetAllOrganizations_Organizations_Edges_Node_NarrativeCreators) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_NarrativeCreators{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_NarrativeCreators) GetName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_NarrativeCreators{}
	}
	return t.Name
}

type GetAllOrganizations_Organizations_Edges_Node_RiskCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_RiskCreators) GetDisplayID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_RiskCreators{}
	}
	return t.DisplayID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_RiskCreators) GetDisplayName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_RiskCreators{}
	}
	return t.DisplayName
}
func (t *GetAllOrganizations_Organizations_Edges_Node_RiskCreators) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_RiskCreators{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_RiskCreators) GetName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_RiskCreators{}
	}
	return t.Name
}

type GetAllOrganizations_Organizations_Edges_Node_TemplateCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_TemplateCreators) GetDisplayID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_TemplateCreators{}
	}
	return t.DisplayID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_TemplateCreators) GetDisplayName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_TemplateCreators{}
	}
	return t.DisplayName
}
func (t *GetAllOrganizations_Organizations_Edges_Node_TemplateCreators) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_TemplateCreators{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_TemplateCreators) GetName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_TemplateCreators{}
	}
	return t.Name
}

type GetAllOrganizations_Organizations_Edges_Node struct {
	Children                 GetAllOrganizations_Organizations_Edges_Node_Children                    "json:\"children\" graphql:\"children\""
	ControlCreators          []*GetAllOrganizations_Organizations_Edges_Node_ControlCreators          "json:\"controlCreators,omitempty\" graphql:\"controlCreators\""
	ControlObjectiveCreators []*GetAllOrganizations_Organizations_Edges_Node_ControlObjectiveCreators "json:\"controlObjectiveCreators,omitempty\" graphql:\"controlObjectiveCreators\""
	CreatedAt                *time.Time                                                               "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	Description              *string                                                                  "json:\"description,omitempty\" graphql:\"description\""
	DisplayName              string                                                                   "json:\"displayName\" graphql:\"displayName\""
	ID                       string                                                                   "json:\"id\" graphql:\"id\""
	InternalPolicyCreators   []*GetAllOrganizations_Organizations_Edges_Node_InternalPolicyCreators   "json:\"internalPolicyCreators,omitempty\" graphql:\"internalPolicyCreators\""
	Members                  GetAllOrganizations_Organizations_Edges_Node_Members                     "json:\"members\" graphql:\"members\""
	Name                     string                                                                   "json:\"name\" graphql:\"name\""
	NarrativeCreators        []*GetAllOrganizations_Organizations_Edges_Node_NarrativeCreators        "json:\"narrativeCreators,omitempty\" graphql:\"narrativeCreators\""
	OrgSubscriptions         []*GetAllOrganizations_Organizations_Edges_Node_OrgSubscriptions         "json:\"orgSubscriptions,omitempty\" graphql:\"orgSubscriptions\""
	Parent                   *GetAllOrganizations_Organizations_Edges_Node_Parent                     "json:\"parent,omitempty\" graphql:\"parent\""
	PersonalOrg              *bool                                                                    "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	ProcedureCreators        []*GetAllOrganizations_Organizations_Edges_Node_ProcedureCreators        "json:\"procedureCreators,omitempty\" graphql:\"procedureCreators\""
	ProgramCreators          []*GetAllOrganizations_Organizations_Edges_Node_ProgramCreators          "json:\"programCreators,omitempty\" graphql:\"programCreators\""
	RiskCreators             []*GetAllOrganizations_Organizations_Edges_Node_RiskCreators             "json:\"riskCreators,omitempty\" graphql:\"riskCreators\""
	Setting                  *GetAllOrganizations_Organizations_Edges_Node_Setting                    "json:\"setting,omitempty\" graphql:\"setting\""
	Tags                     []string                                                                 "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateCreators         []*GetAllOrganizations_Organizations_Edges_Node_TemplateCreators         "json:\"templateCreators,omitempty\" graphql:\"templateCreators\""
	UpdatedAt                *time.Time                                                               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node) GetChildren() *GetAllOrganizations_Organizations_Edges_Node_Children {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return &t.Children
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetControlCreators() []*GetAllOrganizations_Organizations_Edges_Node_ControlCreators {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.ControlCreators
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetControlObjectiveCreators() []*GetAllOrganizations_Organizations_Edges_Node_ControlObjectiveCreators {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.ControlObjectiveCreators
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetInternalPolicyCreators() []*GetAllOrganizations_Organizations_Edges_Node_InternalPolicyCreators {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.InternalPolicyCreators
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetMembers() *GetAllOrganizations_Organizations_Edges_Node_Members {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return &t.Members
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetNarrativeCreators() []*GetAllOrganizations_Organizations_Edges_Node_NarrativeCreators {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.NarrativeCreators
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetOrgSubscriptions() []*GetAllOrganizations_Organizations_Edges_Node_OrgSubscriptions {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.OrgSubscriptions
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetParent() *GetAllOrganizations_Organizations_Edges_Node_Parent {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Parent
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.PersonalOrg
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetProcedureCreators() []*GetAllOrganizations_Organizations_Edges_Node_ProcedureCreators {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.ProcedureCreators
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetProgramCreators() []*GetAllOrganizations_Organizations_Edges_Node_ProgramCreators {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.ProgramCreators
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetRiskCreators() []*GetAllOrganizations_Organizations_Edges_Node_RiskCreators {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.RiskCreators
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetSetting() *GetAllOrganizations_Organizations_Edges_Node_Setting {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Setting
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetTemplateCreators() []*GetAllOrganizations_Organizations_Edges_Node_TemplateCreators {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.TemplateCreators
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.UpdatedAt
}

type GetAllOrganizations_Organizations_Edges struct {
	Node *GetAllOrganizations_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrganizations_Organizations_Edges) GetNode() *GetAllOrganizations_Organizations_Edges_Node {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges{}
	}
	return t.Node
}

type GetAllOrganizations_Organizations struct {
	Edges []*GetAllOrganizations_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllOrganizations_Organizations) GetEdges() []*GetAllOrganizations_Organizations_Edges {
	if t == nil {
		t = &GetAllOrganizations_Organizations{}
	}
	return t.Edges
}

type GetOrganizationByID_Organization_Parent struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizationByID_Organization_Parent) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Parent{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_Parent) GetName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Parent{}
	}
	return t.Name
}

type GetOrganizationByID_Organization_Children_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizationByID_Organization_Children_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Children_Edges_Node{}
	}
	return t.Description
}
func (t *GetOrganizationByID_Organization_Children_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Children_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetOrganizationByID_Organization_Children_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Children_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_Children_Edges_Node) GetName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Children_Edges_Node{}
	}
	return t.Name
}

type GetOrganizationByID_Organization_Children_Edges struct {
	Node *GetOrganizationByID_Organization_Children_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizationByID_Organization_Children_Edges) GetNode() *GetOrganizationByID_Organization_Children_Edges_Node {
	if t == nil {
		t = &GetOrganizationByID_Organization_Children_Edges{}
	}
	return t.Node
}

type GetOrganizationByID_Organization_Children struct {
	Edges []*GetOrganizationByID_Organization_Children_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrganizationByID_Organization_Children) GetEdges() []*GetOrganizationByID_Organization_Children_Edges {
	if t == nil {
		t = &GetOrganizationByID_Organization_Children{}
	}
	return t.Edges
}

type GetOrganizationByID_Organization_Members_Edges_Node_User struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetOrganizationByID_Organization_Members_Edges_Node_User) GetFirstName() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Members_Edges_Node_User{}
	}
	return t.FirstName
}
func (t *GetOrganizationByID_Organization_Members_Edges_Node_User) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Members_Edges_Node_User{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_Members_Edges_Node_User) GetLastName() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Members_Edges_Node_User{}
	}
	return t.LastName
}

type GetOrganizationByID_Organization_Members_Edges_Node struct {
	ID   string                                                   "json:\"id\" graphql:\"id\""
	Role enums.Role                                               "json:\"role\" graphql:\"role\""
	User GetOrganizationByID_Organization_Members_Edges_Node_User "json:\"user\" graphql:\"user\""
}

func (t *GetOrganizationByID_Organization_Members_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Members_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_Members_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetOrganizationByID_Organization_Members_Edges_Node{}
	}
	return &t.Role
}
func (t *GetOrganizationByID_Organization_Members_Edges_Node) GetUser() *GetOrganizationByID_Organization_Members_Edges_Node_User {
	if t == nil {
		t = &GetOrganizationByID_Organization_Members_Edges_Node{}
	}
	return &t.User
}

type GetOrganizationByID_Organization_Members_Edges struct {
	Node *GetOrganizationByID_Organization_Members_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizationByID_Organization_Members_Edges) GetNode() *GetOrganizationByID_Organization_Members_Edges_Node {
	if t == nil {
		t = &GetOrganizationByID_Organization_Members_Edges{}
	}
	return t.Node
}

type GetOrganizationByID_Organization_Members struct {
	Edges      []*GetOrganizationByID_Organization_Members_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                             "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetOrganizationByID_Organization_Members) GetEdges() []*GetOrganizationByID_Organization_Members_Edges {
	if t == nil {
		t = &GetOrganizationByID_Organization_Members{}
	}
	return t.Edges
}
func (t *GetOrganizationByID_Organization_Members) GetTotalCount() int64 {
	if t == nil {
		t = &GetOrganizationByID_Organization_Members{}
	}
	return t.TotalCount
}

type GetOrganizationByID_Organization_Setting struct {
	AllowedEmailDomains []string        "json:\"allowedEmailDomains,omitempty\" graphql:\"allowedEmailDomains\""
	BillingAddress      *models.Address "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact      *string         "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail        *string         "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone        *string         "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt           *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains             []string        "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation         *enums.Region   "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID                  string          "json:\"id\" graphql:\"id\""
	Tags                []string        "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier       *string         "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt           *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrganizationByID_Organization_Setting) GetAllowedEmailDomains() []string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.AllowedEmailDomains
}
func (t *GetOrganizationByID_Organization_Setting) GetBillingAddress() *models.Address {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.BillingAddress
}
func (t *GetOrganizationByID_Organization_Setting) GetBillingContact() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.BillingContact
}
func (t *GetOrganizationByID_Organization_Setting) GetBillingEmail() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.BillingEmail
}
func (t *GetOrganizationByID_Organization_Setting) GetBillingPhone() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.BillingPhone
}
func (t *GetOrganizationByID_Organization_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.CreatedAt
}
func (t *GetOrganizationByID_Organization_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationByID_Organization_Setting) GetDomains() []string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.Domains
}
func (t *GetOrganizationByID_Organization_Setting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.GeoLocation
}
func (t *GetOrganizationByID_Organization_Setting) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_Setting) GetTags() []string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.Tags
}
func (t *GetOrganizationByID_Organization_Setting) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.TaxIdentifier
}
func (t *GetOrganizationByID_Organization_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizationByID_Organization_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.UpdatedBy
}

type GetOrganizationByID_Organization_OrgSubscriptions struct {
	Active                   bool     "json:\"active\" graphql:\"active\""
	Features                 []string "json:\"features,omitempty\" graphql:\"features\""
	ID                       string   "json:\"id\" graphql:\"id\""
	ProductTier              *string  "json:\"productTier,omitempty\" graphql:\"productTier\""
	StripeCustomerID         *string  "json:\"stripeCustomerID,omitempty\" graphql:\"stripeCustomerID\""
	StripeSubscriptionStatus *string  "json:\"stripeSubscriptionStatus,omitempty\" graphql:\"stripeSubscriptionStatus\""
}

func (t *GetOrganizationByID_Organization_OrgSubscriptions) GetActive() bool {
	if t == nil {
		t = &GetOrganizationByID_Organization_OrgSubscriptions{}
	}
	return t.Active
}
func (t *GetOrganizationByID_Organization_OrgSubscriptions) GetFeatures() []string {
	if t == nil {
		t = &GetOrganizationByID_Organization_OrgSubscriptions{}
	}
	return t.Features
}
func (t *GetOrganizationByID_Organization_OrgSubscriptions) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_OrgSubscriptions{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_OrgSubscriptions) GetProductTier() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_OrgSubscriptions{}
	}
	return t.ProductTier
}
func (t *GetOrganizationByID_Organization_OrgSubscriptions) GetStripeCustomerID() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_OrgSubscriptions{}
	}
	return t.StripeCustomerID
}
func (t *GetOrganizationByID_Organization_OrgSubscriptions) GetStripeSubscriptionStatus() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_OrgSubscriptions{}
	}
	return t.StripeSubscriptionStatus
}

type GetOrganizationByID_Organization_ControlCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizationByID_Organization_ControlCreators) GetDisplayID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_ControlCreators{}
	}
	return t.DisplayID
}
func (t *GetOrganizationByID_Organization_ControlCreators) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_ControlCreators{}
	}
	return t.DisplayName
}
func (t *GetOrganizationByID_Organization_ControlCreators) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_ControlCreators{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_ControlCreators) GetName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_ControlCreators{}
	}
	return t.Name
}

type GetOrganizationByID_Organization_ProgramCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizationByID_Organization_ProgramCreators) GetDisplayID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_ProgramCreators{}
	}
	return t.DisplayID
}
func (t *GetOrganizationByID_Organization_ProgramCreators) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_ProgramCreators{}
	}
	return t.DisplayName
}
func (t *GetOrganizationByID_Organization_ProgramCreators) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_ProgramCreators{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_ProgramCreators) GetName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_ProgramCreators{}
	}
	return t.Name
}

type GetOrganizationByID_Organization_ProcedureCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizationByID_Organization_ProcedureCreators) GetDisplayID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_ProcedureCreators{}
	}
	return t.DisplayID
}
func (t *GetOrganizationByID_Organization_ProcedureCreators) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_ProcedureCreators{}
	}
	return t.DisplayName
}
func (t *GetOrganizationByID_Organization_ProcedureCreators) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_ProcedureCreators{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_ProcedureCreators) GetName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_ProcedureCreators{}
	}
	return t.Name
}

type GetOrganizationByID_Organization_InternalPolicyCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizationByID_Organization_InternalPolicyCreators) GetDisplayID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_InternalPolicyCreators{}
	}
	return t.DisplayID
}
func (t *GetOrganizationByID_Organization_InternalPolicyCreators) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_InternalPolicyCreators{}
	}
	return t.DisplayName
}
func (t *GetOrganizationByID_Organization_InternalPolicyCreators) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_InternalPolicyCreators{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_InternalPolicyCreators) GetName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_InternalPolicyCreators{}
	}
	return t.Name
}

type GetOrganizationByID_Organization_ControlObjectiveCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizationByID_Organization_ControlObjectiveCreators) GetDisplayID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_ControlObjectiveCreators{}
	}
	return t.DisplayID
}
func (t *GetOrganizationByID_Organization_ControlObjectiveCreators) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_ControlObjectiveCreators{}
	}
	return t.DisplayName
}
func (t *GetOrganizationByID_Organization_ControlObjectiveCreators) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_ControlObjectiveCreators{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_ControlObjectiveCreators) GetName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_ControlObjectiveCreators{}
	}
	return t.Name
}

type GetOrganizationByID_Organization_NarrativeCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizationByID_Organization_NarrativeCreators) GetDisplayID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_NarrativeCreators{}
	}
	return t.DisplayID
}
func (t *GetOrganizationByID_Organization_NarrativeCreators) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_NarrativeCreators{}
	}
	return t.DisplayName
}
func (t *GetOrganizationByID_Organization_NarrativeCreators) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_NarrativeCreators{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_NarrativeCreators) GetName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_NarrativeCreators{}
	}
	return t.Name
}

type GetOrganizationByID_Organization_RiskCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizationByID_Organization_RiskCreators) GetDisplayID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_RiskCreators{}
	}
	return t.DisplayID
}
func (t *GetOrganizationByID_Organization_RiskCreators) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_RiskCreators{}
	}
	return t.DisplayName
}
func (t *GetOrganizationByID_Organization_RiskCreators) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_RiskCreators{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_RiskCreators) GetName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_RiskCreators{}
	}
	return t.Name
}

type GetOrganizationByID_Organization_TemplateCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizationByID_Organization_TemplateCreators) GetDisplayID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_TemplateCreators{}
	}
	return t.DisplayID
}
func (t *GetOrganizationByID_Organization_TemplateCreators) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_TemplateCreators{}
	}
	return t.DisplayName
}
func (t *GetOrganizationByID_Organization_TemplateCreators) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_TemplateCreators{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_TemplateCreators) GetName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_TemplateCreators{}
	}
	return t.Name
}

type GetOrganizationByID_Organization struct {
	AvatarLocalFileID        *string                                                      "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL          *string                                                      "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	Children                 GetOrganizationByID_Organization_Children                    "json:\"children\" graphql:\"children\""
	ControlCreators          []*GetOrganizationByID_Organization_ControlCreators          "json:\"controlCreators,omitempty\" graphql:\"controlCreators\""
	ControlObjectiveCreators []*GetOrganizationByID_Organization_ControlObjectiveCreators "json:\"controlObjectiveCreators,omitempty\" graphql:\"controlObjectiveCreators\""
	CreatedAt                *time.Time                                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                *string                                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description              *string                                                      "json:\"description,omitempty\" graphql:\"description\""
	DisplayName              string                                                       "json:\"displayName\" graphql:\"displayName\""
	ID                       string                                                       "json:\"id\" graphql:\"id\""
	InternalPolicyCreators   []*GetOrganizationByID_Organization_InternalPolicyCreators   "json:\"internalPolicyCreators,omitempty\" graphql:\"internalPolicyCreators\""
	Members                  GetOrganizationByID_Organization_Members                     "json:\"members\" graphql:\"members\""
	Name                     string                                                       "json:\"name\" graphql:\"name\""
	NarrativeCreators        []*GetOrganizationByID_Organization_NarrativeCreators        "json:\"narrativeCreators,omitempty\" graphql:\"narrativeCreators\""
	OrgSubscriptions         []*GetOrganizationByID_Organization_OrgSubscriptions         "json:\"orgSubscriptions,omitempty\" graphql:\"orgSubscriptions\""
	Parent                   *GetOrganizationByID_Organization_Parent                     "json:\"parent,omitempty\" graphql:\"parent\""
	PersonalOrg              *bool                                                        "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	ProcedureCreators        []*GetOrganizationByID_Organization_ProcedureCreators        "json:\"procedureCreators,omitempty\" graphql:\"procedureCreators\""
	ProgramCreators          []*GetOrganizationByID_Organization_ProgramCreators          "json:\"programCreators,omitempty\" graphql:\"programCreators\""
	RiskCreators             []*GetOrganizationByID_Organization_RiskCreators             "json:\"riskCreators,omitempty\" graphql:\"riskCreators\""
	Setting                  *GetOrganizationByID_Organization_Setting                    "json:\"setting,omitempty\" graphql:\"setting\""
	Tags                     []string                                                     "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateCreators         []*GetOrganizationByID_Organization_TemplateCreators         "json:\"templateCreators,omitempty\" graphql:\"templateCreators\""
	UpdatedAt                *time.Time                                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                *string                                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrganizationByID_Organization) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.AvatarLocalFileID
}
func (t *GetOrganizationByID_Organization) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.AvatarRemoteURL
}
func (t *GetOrganizationByID_Organization) GetChildren() *GetOrganizationByID_Organization_Children {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return &t.Children
}
func (t *GetOrganizationByID_Organization) GetControlCreators() []*GetOrganizationByID_Organization_ControlCreators {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.ControlCreators
}
func (t *GetOrganizationByID_Organization) GetControlObjectiveCreators() []*GetOrganizationByID_Organization_ControlObjectiveCreators {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.ControlObjectiveCreators
}
func (t *GetOrganizationByID_Organization) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.CreatedAt
}
func (t *GetOrganizationByID_Organization) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationByID_Organization) GetDescription() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Description
}
func (t *GetOrganizationByID_Organization) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.DisplayName
}
func (t *GetOrganizationByID_Organization) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization) GetInternalPolicyCreators() []*GetOrganizationByID_Organization_InternalPolicyCreators {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.InternalPolicyCreators
}
func (t *GetOrganizationByID_Organization) GetMembers() *GetOrganizationByID_Organization_Members {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return &t.Members
}
func (t *GetOrganizationByID_Organization) GetName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Name
}
func (t *GetOrganizationByID_Organization) GetNarrativeCreators() []*GetOrganizationByID_Organization_NarrativeCreators {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.NarrativeCreators
}
func (t *GetOrganizationByID_Organization) GetOrgSubscriptions() []*GetOrganizationByID_Organization_OrgSubscriptions {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.OrgSubscriptions
}
func (t *GetOrganizationByID_Organization) GetParent() *GetOrganizationByID_Organization_Parent {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Parent
}
func (t *GetOrganizationByID_Organization) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.PersonalOrg
}
func (t *GetOrganizationByID_Organization) GetProcedureCreators() []*GetOrganizationByID_Organization_ProcedureCreators {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.ProcedureCreators
}
func (t *GetOrganizationByID_Organization) GetProgramCreators() []*GetOrganizationByID_Organization_ProgramCreators {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.ProgramCreators
}
func (t *GetOrganizationByID_Organization) GetRiskCreators() []*GetOrganizationByID_Organization_RiskCreators {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.RiskCreators
}
func (t *GetOrganizationByID_Organization) GetSetting() *GetOrganizationByID_Organization_Setting {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Setting
}
func (t *GetOrganizationByID_Organization) GetTags() []string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Tags
}
func (t *GetOrganizationByID_Organization) GetTemplateCreators() []*GetOrganizationByID_Organization_TemplateCreators {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.TemplateCreators
}
func (t *GetOrganizationByID_Organization) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizationByID_Organization) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.UpdatedBy
}

type GetOrganizations_Organizations_Edges_Node_Parent struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Parent) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Parent{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_Parent) GetName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Parent{}
	}
	return t.Name
}

type GetOrganizations_Organizations_Edges_Node_Children_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.Description
}
func (t *GetOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.Name
}

type GetOrganizations_Organizations_Edges_Node_Children_Edges struct {
	Node *GetOrganizations_Organizations_Edges_Node_Children_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Children_Edges) GetNode() *GetOrganizations_Organizations_Edges_Node_Children_Edges_Node {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Children_Edges{}
	}
	return t.Node
}

type GetOrganizations_Organizations_Edges_Node_Children struct {
	Edges []*GetOrganizations_Organizations_Edges_Node_Children_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Children) GetEdges() []*GetOrganizations_Organizations_Edges_Node_Children_Edges {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Children{}
	}
	return t.Edges
}

type GetOrganizations_Organizations_Edges_Node_Members_Edges_Node_User struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Members_Edges_Node_User) GetFirstName() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Members_Edges_Node_User{}
	}
	return t.FirstName
}
func (t *GetOrganizations_Organizations_Edges_Node_Members_Edges_Node_User) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Members_Edges_Node_User{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_Members_Edges_Node_User) GetLastName() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Members_Edges_Node_User{}
	}
	return t.LastName
}

type GetOrganizations_Organizations_Edges_Node_Members_Edges_Node struct {
	ID   string                                                            "json:\"id\" graphql:\"id\""
	Role enums.Role                                                        "json:\"role\" graphql:\"role\""
	User GetOrganizations_Organizations_Edges_Node_Members_Edges_Node_User "json:\"user\" graphql:\"user\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Members_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Members_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_Members_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Members_Edges_Node{}
	}
	return &t.Role
}
func (t *GetOrganizations_Organizations_Edges_Node_Members_Edges_Node) GetUser() *GetOrganizations_Organizations_Edges_Node_Members_Edges_Node_User {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Members_Edges_Node{}
	}
	return &t.User
}

type GetOrganizations_Organizations_Edges_Node_Members_Edges struct {
	Node *GetOrganizations_Organizations_Edges_Node_Members_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Members_Edges) GetNode() *GetOrganizations_Organizations_Edges_Node_Members_Edges_Node {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Members_Edges{}
	}
	return t.Node
}

type GetOrganizations_Organizations_Edges_Node_Members struct {
	Edges      []*GetOrganizations_Organizations_Edges_Node_Members_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Members) GetEdges() []*GetOrganizations_Organizations_Edges_Node_Members_Edges {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Members{}
	}
	return t.Edges
}
func (t *GetOrganizations_Organizations_Edges_Node_Members) GetTotalCount() int64 {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Members{}
	}
	return t.TotalCount
}

type GetOrganizations_Organizations_Edges_Node_Setting struct {
	AllowedEmailDomains []string        "json:\"allowedEmailDomains,omitempty\" graphql:\"allowedEmailDomains\""
	BillingAddress      *models.Address "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact      *string         "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail        *string         "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone        *string         "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt           *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains             []string        "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation         *enums.Region   "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID                  string          "json:\"id\" graphql:\"id\""
	Tags                []string        "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier       *string         "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt           *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetAllowedEmailDomains() []string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.AllowedEmailDomains
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetBillingAddress() *models.Address {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingAddress
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetBillingContact() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingContact
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetBillingEmail() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingEmail
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetBillingPhone() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingPhone
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.CreatedAt
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.CreatedBy
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetDomains() []string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.Domains
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.GeoLocation
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetTags() []string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.Tags
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.TaxIdentifier
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.UpdatedBy
}

type GetOrganizations_Organizations_Edges_Node_OrgSubscriptions struct {
	Active                   bool     "json:\"active\" graphql:\"active\""
	Features                 []string "json:\"features,omitempty\" graphql:\"features\""
	ID                       string   "json:\"id\" graphql:\"id\""
	ProductTier              *string  "json:\"productTier,omitempty\" graphql:\"productTier\""
	StripeCustomerID         *string  "json:\"stripeCustomerID,omitempty\" graphql:\"stripeCustomerID\""
	StripeSubscriptionStatus *string  "json:\"stripeSubscriptionStatus,omitempty\" graphql:\"stripeSubscriptionStatus\""
}

func (t *GetOrganizations_Organizations_Edges_Node_OrgSubscriptions) GetActive() bool {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_OrgSubscriptions{}
	}
	return t.Active
}
func (t *GetOrganizations_Organizations_Edges_Node_OrgSubscriptions) GetFeatures() []string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_OrgSubscriptions{}
	}
	return t.Features
}
func (t *GetOrganizations_Organizations_Edges_Node_OrgSubscriptions) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_OrgSubscriptions{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_OrgSubscriptions) GetProductTier() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_OrgSubscriptions{}
	}
	return t.ProductTier
}
func (t *GetOrganizations_Organizations_Edges_Node_OrgSubscriptions) GetStripeCustomerID() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_OrgSubscriptions{}
	}
	return t.StripeCustomerID
}
func (t *GetOrganizations_Organizations_Edges_Node_OrgSubscriptions) GetStripeSubscriptionStatus() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_OrgSubscriptions{}
	}
	return t.StripeSubscriptionStatus
}

type GetOrganizations_Organizations_Edges_Node_ControlCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizations_Organizations_Edges_Node_ControlCreators) GetDisplayID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_ControlCreators{}
	}
	return t.DisplayID
}
func (t *GetOrganizations_Organizations_Edges_Node_ControlCreators) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_ControlCreators{}
	}
	return t.DisplayName
}
func (t *GetOrganizations_Organizations_Edges_Node_ControlCreators) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_ControlCreators{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_ControlCreators) GetName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_ControlCreators{}
	}
	return t.Name
}

type GetOrganizations_Organizations_Edges_Node_ProgramCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizations_Organizations_Edges_Node_ProgramCreators) GetDisplayID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_ProgramCreators{}
	}
	return t.DisplayID
}
func (t *GetOrganizations_Organizations_Edges_Node_ProgramCreators) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_ProgramCreators{}
	}
	return t.DisplayName
}
func (t *GetOrganizations_Organizations_Edges_Node_ProgramCreators) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_ProgramCreators{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_ProgramCreators) GetName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_ProgramCreators{}
	}
	return t.Name
}

type GetOrganizations_Organizations_Edges_Node_ProcedureCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizations_Organizations_Edges_Node_ProcedureCreators) GetDisplayID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_ProcedureCreators{}
	}
	return t.DisplayID
}
func (t *GetOrganizations_Organizations_Edges_Node_ProcedureCreators) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_ProcedureCreators{}
	}
	return t.DisplayName
}
func (t *GetOrganizations_Organizations_Edges_Node_ProcedureCreators) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_ProcedureCreators{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_ProcedureCreators) GetName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_ProcedureCreators{}
	}
	return t.Name
}

type GetOrganizations_Organizations_Edges_Node_InternalPolicyCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizations_Organizations_Edges_Node_InternalPolicyCreators) GetDisplayID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_InternalPolicyCreators{}
	}
	return t.DisplayID
}
func (t *GetOrganizations_Organizations_Edges_Node_InternalPolicyCreators) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_InternalPolicyCreators{}
	}
	return t.DisplayName
}
func (t *GetOrganizations_Organizations_Edges_Node_InternalPolicyCreators) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_InternalPolicyCreators{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_InternalPolicyCreators) GetName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_InternalPolicyCreators{}
	}
	return t.Name
}

type GetOrganizations_Organizations_Edges_Node_ControlObjectiveCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizations_Organizations_Edges_Node_ControlObjectiveCreators) GetDisplayID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_ControlObjectiveCreators{}
	}
	return t.DisplayID
}
func (t *GetOrganizations_Organizations_Edges_Node_ControlObjectiveCreators) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_ControlObjectiveCreators{}
	}
	return t.DisplayName
}
func (t *GetOrganizations_Organizations_Edges_Node_ControlObjectiveCreators) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_ControlObjectiveCreators{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_ControlObjectiveCreators) GetName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_ControlObjectiveCreators{}
	}
	return t.Name
}

type GetOrganizations_Organizations_Edges_Node_NarrativeCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizations_Organizations_Edges_Node_NarrativeCreators) GetDisplayID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_NarrativeCreators{}
	}
	return t.DisplayID
}
func (t *GetOrganizations_Organizations_Edges_Node_NarrativeCreators) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_NarrativeCreators{}
	}
	return t.DisplayName
}
func (t *GetOrganizations_Organizations_Edges_Node_NarrativeCreators) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_NarrativeCreators{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_NarrativeCreators) GetName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_NarrativeCreators{}
	}
	return t.Name
}

type GetOrganizations_Organizations_Edges_Node_RiskCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizations_Organizations_Edges_Node_RiskCreators) GetDisplayID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_RiskCreators{}
	}
	return t.DisplayID
}
func (t *GetOrganizations_Organizations_Edges_Node_RiskCreators) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_RiskCreators{}
	}
	return t.DisplayName
}
func (t *GetOrganizations_Organizations_Edges_Node_RiskCreators) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_RiskCreators{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_RiskCreators) GetName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_RiskCreators{}
	}
	return t.Name
}

type GetOrganizations_Organizations_Edges_Node_TemplateCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizations_Organizations_Edges_Node_TemplateCreators) GetDisplayID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_TemplateCreators{}
	}
	return t.DisplayID
}
func (t *GetOrganizations_Organizations_Edges_Node_TemplateCreators) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_TemplateCreators{}
	}
	return t.DisplayName
}
func (t *GetOrganizations_Organizations_Edges_Node_TemplateCreators) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_TemplateCreators{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_TemplateCreators) GetName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_TemplateCreators{}
	}
	return t.Name
}

type GetOrganizations_Organizations_Edges_Node struct {
	Children                 GetOrganizations_Organizations_Edges_Node_Children                    "json:\"children\" graphql:\"children\""
	ControlCreators          []*GetOrganizations_Organizations_Edges_Node_ControlCreators          "json:\"controlCreators,omitempty\" graphql:\"controlCreators\""
	ControlObjectiveCreators []*GetOrganizations_Organizations_Edges_Node_ControlObjectiveCreators "json:\"controlObjectiveCreators,omitempty\" graphql:\"controlObjectiveCreators\""
	CreatedAt                *time.Time                                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	Description              *string                                                               "json:\"description,omitempty\" graphql:\"description\""
	DisplayName              string                                                                "json:\"displayName\" graphql:\"displayName\""
	ID                       string                                                                "json:\"id\" graphql:\"id\""
	InternalPolicyCreators   []*GetOrganizations_Organizations_Edges_Node_InternalPolicyCreators   "json:\"internalPolicyCreators,omitempty\" graphql:\"internalPolicyCreators\""
	Members                  GetOrganizations_Organizations_Edges_Node_Members                     "json:\"members\" graphql:\"members\""
	Name                     string                                                                "json:\"name\" graphql:\"name\""
	NarrativeCreators        []*GetOrganizations_Organizations_Edges_Node_NarrativeCreators        "json:\"narrativeCreators,omitempty\" graphql:\"narrativeCreators\""
	OrgSubscriptions         []*GetOrganizations_Organizations_Edges_Node_OrgSubscriptions         "json:\"orgSubscriptions,omitempty\" graphql:\"orgSubscriptions\""
	Parent                   *GetOrganizations_Organizations_Edges_Node_Parent                     "json:\"parent,omitempty\" graphql:\"parent\""
	PersonalOrg              *bool                                                                 "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	ProcedureCreators        []*GetOrganizations_Organizations_Edges_Node_ProcedureCreators        "json:\"procedureCreators,omitempty\" graphql:\"procedureCreators\""
	ProgramCreators          []*GetOrganizations_Organizations_Edges_Node_ProgramCreators          "json:\"programCreators,omitempty\" graphql:\"programCreators\""
	RiskCreators             []*GetOrganizations_Organizations_Edges_Node_RiskCreators             "json:\"riskCreators,omitempty\" graphql:\"riskCreators\""
	Setting                  *GetOrganizations_Organizations_Edges_Node_Setting                    "json:\"setting,omitempty\" graphql:\"setting\""
	Tags                     []string                                                              "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateCreators         []*GetOrganizations_Organizations_Edges_Node_TemplateCreators         "json:\"templateCreators,omitempty\" graphql:\"templateCreators\""
	UpdatedAt                *time.Time                                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
}

func (t *GetOrganizations_Organizations_Edges_Node) GetChildren() *GetOrganizations_Organizations_Edges_Node_Children {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return &t.Children
}
func (t *GetOrganizations_Organizations_Edges_Node) GetControlCreators() []*GetOrganizations_Organizations_Edges_Node_ControlCreators {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.ControlCreators
}
func (t *GetOrganizations_Organizations_Edges_Node) GetControlObjectiveCreators() []*GetOrganizations_Organizations_Edges_Node_ControlObjectiveCreators {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.ControlObjectiveCreators
}
func (t *GetOrganizations_Organizations_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrganizations_Organizations_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.Description
}
func (t *GetOrganizations_Organizations_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetOrganizations_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node) GetInternalPolicyCreators() []*GetOrganizations_Organizations_Edges_Node_InternalPolicyCreators {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.InternalPolicyCreators
}
func (t *GetOrganizations_Organizations_Edges_Node) GetMembers() *GetOrganizations_Organizations_Edges_Node_Members {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return &t.Members
}
func (t *GetOrganizations_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.Name
}
func (t *GetOrganizations_Organizations_Edges_Node) GetNarrativeCreators() []*GetOrganizations_Organizations_Edges_Node_NarrativeCreators {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.NarrativeCreators
}
func (t *GetOrganizations_Organizations_Edges_Node) GetOrgSubscriptions() []*GetOrganizations_Organizations_Edges_Node_OrgSubscriptions {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.OrgSubscriptions
}
func (t *GetOrganizations_Organizations_Edges_Node) GetParent() *GetOrganizations_Organizations_Edges_Node_Parent {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.Parent
}
func (t *GetOrganizations_Organizations_Edges_Node) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.PersonalOrg
}
func (t *GetOrganizations_Organizations_Edges_Node) GetProcedureCreators() []*GetOrganizations_Organizations_Edges_Node_ProcedureCreators {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.ProcedureCreators
}
func (t *GetOrganizations_Organizations_Edges_Node) GetProgramCreators() []*GetOrganizations_Organizations_Edges_Node_ProgramCreators {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.ProgramCreators
}
func (t *GetOrganizations_Organizations_Edges_Node) GetRiskCreators() []*GetOrganizations_Organizations_Edges_Node_RiskCreators {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.RiskCreators
}
func (t *GetOrganizations_Organizations_Edges_Node) GetSetting() *GetOrganizations_Organizations_Edges_Node_Setting {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.Setting
}
func (t *GetOrganizations_Organizations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.Tags
}
func (t *GetOrganizations_Organizations_Edges_Node) GetTemplateCreators() []*GetOrganizations_Organizations_Edges_Node_TemplateCreators {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.TemplateCreators
}
func (t *GetOrganizations_Organizations_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.UpdatedAt
}

type GetOrganizations_Organizations_Edges struct {
	Node *GetOrganizations_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizations_Organizations_Edges) GetNode() *GetOrganizations_Organizations_Edges_Node {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges{}
	}
	return t.Node
}

type GetOrganizations_Organizations struct {
	Edges []*GetOrganizations_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrganizations_Organizations) GetEdges() []*GetOrganizations_Organizations_Edges {
	if t == nil {
		t = &GetOrganizations_Organizations{}
	}
	return t.Edges
}

type UpdateOrganization_UpdateOrganization_Organization_AvatarFile struct {
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization_AvatarFile) GetPresignedURL() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_AvatarFile{}
	}
	return t.PresignedURL
}

type UpdateOrganization_UpdateOrganization_Organization_Members_Edges_Node struct {
	ID     string     "json:\"id\" graphql:\"id\""
	Role   enums.Role "json:\"role\" graphql:\"role\""
	UserID string     "json:\"userID\" graphql:\"userID\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization_Members_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Members_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Members_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Members_Edges_Node{}
	}
	return &t.Role
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Members_Edges_Node) GetUserID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Members_Edges_Node{}
	}
	return t.UserID
}

type UpdateOrganization_UpdateOrganization_Organization_Members_Edges struct {
	Node *UpdateOrganization_UpdateOrganization_Organization_Members_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization_Members_Edges) GetNode() *UpdateOrganization_UpdateOrganization_Organization_Members_Edges_Node {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Members_Edges{}
	}
	return t.Node
}

type UpdateOrganization_UpdateOrganization_Organization_Members struct {
	Edges      []*UpdateOrganization_UpdateOrganization_Organization_Members_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	TotalCount int64                                                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization_Members) GetEdges() []*UpdateOrganization_UpdateOrganization_Organization_Members_Edges {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Members{}
	}
	return t.Edges
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Members) GetTotalCount() int64 {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Members{}
	}
	return t.TotalCount
}

type UpdateOrganization_UpdateOrganization_Organization_Setting struct {
	AllowedEmailDomains []string        "json:\"allowedEmailDomains,omitempty\" graphql:\"allowedEmailDomains\""
	BillingAddress      *models.Address "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact      *string         "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail        *string         "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone        *string         "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt           *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains             []string        "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation         *enums.Region   "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID                  string          "json:\"id\" graphql:\"id\""
	Tags                []string        "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier       *string         "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt           *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetAllowedEmailDomains() []string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.AllowedEmailDomains
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetBillingAddress() *models.Address {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.BillingAddress
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetBillingContact() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.BillingContact
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetBillingEmail() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.BillingEmail
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetBillingPhone() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.BillingPhone
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.CreatedAt
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.CreatedBy
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetDomains() []string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.Domains
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.GeoLocation
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.ID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetTags() []string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.Tags
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetTaxIdentifier() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.TaxIdentifier
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.UpdatedAt
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.UpdatedBy
}

type UpdateOrganization_UpdateOrganization_Organization_OrgSubscriptions struct {
	Active                   bool     "json:\"active\" graphql:\"active\""
	Features                 []string "json:\"features,omitempty\" graphql:\"features\""
	ID                       string   "json:\"id\" graphql:\"id\""
	ProductTier              *string  "json:\"productTier,omitempty\" graphql:\"productTier\""
	StripeCustomerID         *string  "json:\"stripeCustomerID,omitempty\" graphql:\"stripeCustomerID\""
	StripeSubscriptionStatus *string  "json:\"stripeSubscriptionStatus,omitempty\" graphql:\"stripeSubscriptionStatus\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization_OrgSubscriptions) GetActive() bool {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_OrgSubscriptions{}
	}
	return t.Active
}
func (t *UpdateOrganization_UpdateOrganization_Organization_OrgSubscriptions) GetFeatures() []string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_OrgSubscriptions{}
	}
	return t.Features
}
func (t *UpdateOrganization_UpdateOrganization_Organization_OrgSubscriptions) GetID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_OrgSubscriptions{}
	}
	return t.ID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_OrgSubscriptions) GetProductTier() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_OrgSubscriptions{}
	}
	return t.ProductTier
}
func (t *UpdateOrganization_UpdateOrganization_Organization_OrgSubscriptions) GetStripeCustomerID() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_OrgSubscriptions{}
	}
	return t.StripeCustomerID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_OrgSubscriptions) GetStripeSubscriptionStatus() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_OrgSubscriptions{}
	}
	return t.StripeSubscriptionStatus
}

type UpdateOrganization_UpdateOrganization_Organization_ControlCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization_ControlCreators) GetDisplayID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_ControlCreators{}
	}
	return t.DisplayID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_ControlCreators) GetDisplayName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_ControlCreators{}
	}
	return t.DisplayName
}
func (t *UpdateOrganization_UpdateOrganization_Organization_ControlCreators) GetID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_ControlCreators{}
	}
	return t.ID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_ControlCreators) GetName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_ControlCreators{}
	}
	return t.Name
}

type UpdateOrganization_UpdateOrganization_Organization_ProgramCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization_ProgramCreators) GetDisplayID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_ProgramCreators{}
	}
	return t.DisplayID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_ProgramCreators) GetDisplayName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_ProgramCreators{}
	}
	return t.DisplayName
}
func (t *UpdateOrganization_UpdateOrganization_Organization_ProgramCreators) GetID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_ProgramCreators{}
	}
	return t.ID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_ProgramCreators) GetName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_ProgramCreators{}
	}
	return t.Name
}

type UpdateOrganization_UpdateOrganization_Organization_ProcedureCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization_ProcedureCreators) GetDisplayID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_ProcedureCreators{}
	}
	return t.DisplayID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_ProcedureCreators) GetDisplayName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_ProcedureCreators{}
	}
	return t.DisplayName
}
func (t *UpdateOrganization_UpdateOrganization_Organization_ProcedureCreators) GetID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_ProcedureCreators{}
	}
	return t.ID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_ProcedureCreators) GetName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_ProcedureCreators{}
	}
	return t.Name
}

type UpdateOrganization_UpdateOrganization_Organization_InternalPolicyCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization_InternalPolicyCreators) GetDisplayID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_InternalPolicyCreators{}
	}
	return t.DisplayID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_InternalPolicyCreators) GetDisplayName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_InternalPolicyCreators{}
	}
	return t.DisplayName
}
func (t *UpdateOrganization_UpdateOrganization_Organization_InternalPolicyCreators) GetID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_InternalPolicyCreators{}
	}
	return t.ID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_InternalPolicyCreators) GetName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_InternalPolicyCreators{}
	}
	return t.Name
}

type UpdateOrganization_UpdateOrganization_Organization_ControlObjectiveCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization_ControlObjectiveCreators) GetDisplayID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_ControlObjectiveCreators{}
	}
	return t.DisplayID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_ControlObjectiveCreators) GetDisplayName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_ControlObjectiveCreators{}
	}
	return t.DisplayName
}
func (t *UpdateOrganization_UpdateOrganization_Organization_ControlObjectiveCreators) GetID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_ControlObjectiveCreators{}
	}
	return t.ID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_ControlObjectiveCreators) GetName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_ControlObjectiveCreators{}
	}
	return t.Name
}

type UpdateOrganization_UpdateOrganization_Organization_NarrativeCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization_NarrativeCreators) GetDisplayID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_NarrativeCreators{}
	}
	return t.DisplayID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_NarrativeCreators) GetDisplayName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_NarrativeCreators{}
	}
	return t.DisplayName
}
func (t *UpdateOrganization_UpdateOrganization_Organization_NarrativeCreators) GetID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_NarrativeCreators{}
	}
	return t.ID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_NarrativeCreators) GetName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_NarrativeCreators{}
	}
	return t.Name
}

type UpdateOrganization_UpdateOrganization_Organization_RiskCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization_RiskCreators) GetDisplayID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_RiskCreators{}
	}
	return t.DisplayID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_RiskCreators) GetDisplayName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_RiskCreators{}
	}
	return t.DisplayName
}
func (t *UpdateOrganization_UpdateOrganization_Organization_RiskCreators) GetID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_RiskCreators{}
	}
	return t.ID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_RiskCreators) GetName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_RiskCreators{}
	}
	return t.Name
}

type UpdateOrganization_UpdateOrganization_Organization_TemplateCreators struct {
	DisplayID   string "json:\"displayID\" graphql:\"displayID\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization_TemplateCreators) GetDisplayID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_TemplateCreators{}
	}
	return t.DisplayID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_TemplateCreators) GetDisplayName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_TemplateCreators{}
	}
	return t.DisplayName
}
func (t *UpdateOrganization_UpdateOrganization_Organization_TemplateCreators) GetID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_TemplateCreators{}
	}
	return t.ID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_TemplateCreators) GetName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_TemplateCreators{}
	}
	return t.Name
}

type UpdateOrganization_UpdateOrganization_Organization struct {
	AvatarFile               *UpdateOrganization_UpdateOrganization_Organization_AvatarFile                 "json:\"avatarFile,omitempty\" graphql:\"avatarFile\""
	AvatarLocalFileID        *string                                                                        "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL          *string                                                                        "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	ControlCreators          []*UpdateOrganization_UpdateOrganization_Organization_ControlCreators          "json:\"controlCreators,omitempty\" graphql:\"controlCreators\""
	ControlObjectiveCreators []*UpdateOrganization_UpdateOrganization_Organization_ControlObjectiveCreators "json:\"controlObjectiveCreators,omitempty\" graphql:\"controlObjectiveCreators\""
	Description              *string                                                                        "json:\"description,omitempty\" graphql:\"description\""
	DisplayName              string                                                                         "json:\"displayName\" graphql:\"displayName\""
	ID                       string                                                                         "json:\"id\" graphql:\"id\""
	InternalPolicyCreators   []*UpdateOrganization_UpdateOrganization_Organization_InternalPolicyCreators   "json:\"internalPolicyCreators,omitempty\" graphql:\"internalPolicyCreators\""
	Members                  UpdateOrganization_UpdateOrganization_Organization_Members                     "json:\"members\" graphql:\"members\""
	Name                     string                                                                         "json:\"name\" graphql:\"name\""
	NarrativeCreators        []*UpdateOrganization_UpdateOrganization_Organization_NarrativeCreators        "json:\"narrativeCreators,omitempty\" graphql:\"narrativeCreators\""
	OrgSubscriptions         []*UpdateOrganization_UpdateOrganization_Organization_OrgSubscriptions         "json:\"orgSubscriptions,omitempty\" graphql:\"orgSubscriptions\""
	PersonalOrg              *bool                                                                          "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	ProcedureCreators        []*UpdateOrganization_UpdateOrganization_Organization_ProcedureCreators        "json:\"procedureCreators,omitempty\" graphql:\"procedureCreators\""
	ProgramCreators          []*UpdateOrganization_UpdateOrganization_Organization_ProgramCreators          "json:\"programCreators,omitempty\" graphql:\"programCreators\""
	RiskCreators             []*UpdateOrganization_UpdateOrganization_Organization_RiskCreators             "json:\"riskCreators,omitempty\" graphql:\"riskCreators\""
	Setting                  *UpdateOrganization_UpdateOrganization_Organization_Setting                    "json:\"setting,omitempty\" graphql:\"setting\""
	Tags                     []string                                                                       "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateCreators         []*UpdateOrganization_UpdateOrganization_Organization_TemplateCreators         "json:\"templateCreators,omitempty\" graphql:\"templateCreators\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization) GetAvatarFile() *UpdateOrganization_UpdateOrganization_Organization_AvatarFile {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.AvatarFile
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.AvatarLocalFileID
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.AvatarRemoteURL
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetControlCreators() []*UpdateOrganization_UpdateOrganization_Organization_ControlCreators {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.ControlCreators
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetControlObjectiveCreators() []*UpdateOrganization_UpdateOrganization_Organization_ControlObjectiveCreators {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.ControlObjectiveCreators
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetDescription() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.Description
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetDisplayName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.DisplayName
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.ID
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetInternalPolicyCreators() []*UpdateOrganization_UpdateOrganization_Organization_InternalPolicyCreators {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.InternalPolicyCreators
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetMembers() *UpdateOrganization_UpdateOrganization_Organization_Members {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return &t.Members
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.Name
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetNarrativeCreators() []*UpdateOrganization_UpdateOrganization_Organization_NarrativeCreators {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.NarrativeCreators
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetOrgSubscriptions() []*UpdateOrganization_UpdateOrganization_Organization_OrgSubscriptions {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.OrgSubscriptions
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetPersonalOrg() *bool {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.PersonalOrg
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetProcedureCreators() []*UpdateOrganization_UpdateOrganization_Organization_ProcedureCreators {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.ProcedureCreators
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetProgramCreators() []*UpdateOrganization_UpdateOrganization_Organization_ProgramCreators {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.ProgramCreators
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetRiskCreators() []*UpdateOrganization_UpdateOrganization_Organization_RiskCreators {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.RiskCreators
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetSetting() *UpdateOrganization_UpdateOrganization_Organization_Setting {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.Setting
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetTags() []string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.Tags
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetTemplateCreators() []*UpdateOrganization_UpdateOrganization_Organization_TemplateCreators {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.TemplateCreators
}

type UpdateOrganization_UpdateOrganization struct {
	Organization UpdateOrganization_UpdateOrganization_Organization "json:\"organization\" graphql:\"organization\""
}

func (t *UpdateOrganization_UpdateOrganization) GetOrganization() *UpdateOrganization_UpdateOrganization_Organization {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization{}
	}
	return &t.Organization
}

type GetAllOrganizationHistories_OrganizationHistories_Edges_Node struct {
	AvatarRemoteURL *string        "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	CreatedAt       *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DedicatedDb     bool           "json:\"dedicatedDb\" graphql:\"dedicatedDb\""
	Description     *string        "json:\"description,omitempty\" graphql:\"description\""
	DisplayName     string         "json:\"displayName\" graphql:\"displayName\""
	HistoryTime     time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID              string         "json:\"id\" graphql:\"id\""
	Name            string         "json:\"name\" graphql:\"name\""
	Operation       history.OpType "json:\"operation\" graphql:\"operation\""
	PersonalOrg     *bool          "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Ref             *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags            []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetDedicatedDb() bool {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.DedicatedDb
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.PersonalOrg
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllOrganizationHistories_OrganizationHistories_Edges struct {
	Node *GetAllOrganizationHistories_OrganizationHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrganizationHistories_OrganizationHistories_Edges) GetNode() *GetAllOrganizationHistories_OrganizationHistories_Edges_Node {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges{}
	}
	return t.Node
}

type GetAllOrganizationHistories_OrganizationHistories struct {
	Edges []*GetAllOrganizationHistories_OrganizationHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllOrganizationHistories_OrganizationHistories) GetEdges() []*GetAllOrganizationHistories_OrganizationHistories_Edges {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories{}
	}
	return t.Edges
}

type GetOrganizationHistories_OrganizationHistories_Edges_Node struct {
	AvatarRemoteURL *string        "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	CreatedAt       *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DedicatedDb     bool           "json:\"dedicatedDb\" graphql:\"dedicatedDb\""
	Description     *string        "json:\"description,omitempty\" graphql:\"description\""
	DisplayName     string         "json:\"displayName\" graphql:\"displayName\""
	HistoryTime     time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID              string         "json:\"id\" graphql:\"id\""
	Name            string         "json:\"name\" graphql:\"name\""
	Operation       history.OpType "json:\"operation\" graphql:\"operation\""
	PersonalOrg     *bool          "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Ref             *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags            []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetDedicatedDb() bool {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.DedicatedDb
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.PersonalOrg
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetOrganizationHistories_OrganizationHistories_Edges struct {
	Node *GetOrganizationHistories_OrganizationHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizationHistories_OrganizationHistories_Edges) GetNode() *GetOrganizationHistories_OrganizationHistories_Edges_Node {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges{}
	}
	return t.Node
}

type GetOrganizationHistories_OrganizationHistories struct {
	Edges []*GetOrganizationHistories_OrganizationHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrganizationHistories_OrganizationHistories) GetEdges() []*GetOrganizationHistories_OrganizationHistories_Edges {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories{}
	}
	return t.Edges
}

type GetAllOrganizationSettings_OrganizationSettings_Edges_Node_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node_Organization) GetID() string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node_Organization{}
	}
	return t.ID
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node_Organization) GetName() string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node_Organization{}
	}
	return t.Name
}

type GetAllOrganizationSettings_OrganizationSettings_Edges_Node struct {
	AllowedEmailDomains []string                                                                 "json:\"allowedEmailDomains,omitempty\" graphql:\"allowedEmailDomains\""
	BillingAddress      *models.Address                                                          "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact      *string                                                                  "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail        *string                                                                  "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone        *string                                                                  "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt           *time.Time                                                               "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string                                                                  "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains             []string                                                                 "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation         *enums.Region                                                            "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID                  string                                                                   "json:\"id\" graphql:\"id\""
	Organization        *GetAllOrganizationSettings_OrganizationSettings_Edges_Node_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Tags                []string                                                                 "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier       *string                                                                  "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt           *time.Time                                                               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string                                                                  "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetAllowedEmailDomains() []string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.AllowedEmailDomains
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingAddress() *models.Address {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingAddress
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingContact() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingContact
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingEmail() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingEmail
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingPhone() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingPhone
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.Domains
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.GeoLocation
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetOrganization() *GetAllOrganizationSettings_OrganizationSettings_Edges_Node_Organization {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.Organization
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.TaxIdentifier
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllOrganizationSettings_OrganizationSettings_Edges struct {
	Node *GetAllOrganizationSettings_OrganizationSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrganizationSettings_OrganizationSettings_Edges) GetNode() *GetAllOrganizationSettings_OrganizationSettings_Edges_Node {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges{}
	}
	return t.Node
}

type GetAllOrganizationSettings_OrganizationSettings struct {
	Edges []*GetAllOrganizationSettings_OrganizationSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllOrganizationSettings_OrganizationSettings) GetEdges() []*GetAllOrganizationSettings_OrganizationSettings_Edges {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings{}
	}
	return t.Edges
}

type GetOrganizationSettingByID_OrganizationSetting_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizationSettingByID_OrganizationSetting_Organization) GetID() string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting_Organization{}
	}
	return t.ID
}
func (t *GetOrganizationSettingByID_OrganizationSetting_Organization) GetName() string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting_Organization{}
	}
	return t.Name
}

type GetOrganizationSettingByID_OrganizationSetting struct {
	AllowedEmailDomains []string                                                     "json:\"allowedEmailDomains,omitempty\" graphql:\"allowedEmailDomains\""
	BillingAddress      *models.Address                                              "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact      *string                                                      "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail        *string                                                      "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone        *string                                                      "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt           *time.Time                                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string                                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains             []string                                                     "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation         *enums.Region                                                "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID                  string                                                       "json:\"id\" graphql:\"id\""
	Organization        *GetOrganizationSettingByID_OrganizationSetting_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Tags                []string                                                     "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier       *string                                                      "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt           *time.Time                                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string                                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrganizationSettingByID_OrganizationSetting) GetAllowedEmailDomains() []string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.AllowedEmailDomains
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetBillingAddress() *models.Address {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.BillingAddress
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetBillingContact() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.BillingContact
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetBillingEmail() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.BillingEmail
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetBillingPhone() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.BillingPhone
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.CreatedAt
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetDomains() []string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.Domains
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.GeoLocation
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetID() string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.ID
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetOrganization() *GetOrganizationSettingByID_OrganizationSetting_Organization {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.Organization
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetTags() []string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.Tags
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.TaxIdentifier
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.UpdatedBy
}

type GetOrganizationSettings_OrganizationSettings_Edges_Node_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node_Organization) GetID() string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node_Organization{}
	}
	return t.ID
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node_Organization) GetName() string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node_Organization{}
	}
	return t.Name
}

type GetOrganizationSettings_OrganizationSettings_Edges_Node struct {
	AllowedEmailDomains []string                                                              "json:\"allowedEmailDomains,omitempty\" graphql:\"allowedEmailDomains\""
	BillingAddress      *models.Address                                                       "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact      *string                                                               "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail        *string                                                               "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone        *string                                                               "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt           *time.Time                                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string                                                               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains             []string                                                              "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation         *enums.Region                                                         "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID                  string                                                                "json:\"id\" graphql:\"id\""
	Organization        *GetOrganizationSettings_OrganizationSettings_Edges_Node_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Tags                []string                                                              "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier       *string                                                               "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt           *time.Time                                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string                                                               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetAllowedEmailDomains() []string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.AllowedEmailDomains
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingAddress() *models.Address {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingAddress
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingContact() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingContact
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingEmail() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingEmail
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingPhone() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingPhone
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.Domains
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.GeoLocation
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetOrganization() *GetOrganizationSettings_OrganizationSettings_Edges_Node_Organization {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.Organization
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.Tags
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.TaxIdentifier
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetOrganizationSettings_OrganizationSettings_Edges struct {
	Node *GetOrganizationSettings_OrganizationSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizationSettings_OrganizationSettings_Edges) GetNode() *GetOrganizationSettings_OrganizationSettings_Edges_Node {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges{}
	}
	return t.Node
}

type GetOrganizationSettings_OrganizationSettings struct {
	Edges []*GetOrganizationSettings_OrganizationSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrganizationSettings_OrganizationSettings) GetEdges() []*GetOrganizationSettings_OrganizationSettings_Edges {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings{}
	}
	return t.Edges
}

type UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting_Organization) GetID() string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting_Organization{}
	}
	return t.ID
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting_Organization) GetName() string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting_Organization{}
	}
	return t.Name
}

type UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting struct {
	AllowedEmailDomains []string                                                                              "json:\"allowedEmailDomains,omitempty\" graphql:\"allowedEmailDomains\""
	BillingAddress      *models.Address                                                                       "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact      *string                                                                               "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail        *string                                                                               "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone        *string                                                                               "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt           *time.Time                                                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy           *string                                                                               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains             []string                                                                              "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation         *enums.Region                                                                         "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID                  string                                                                                "json:\"id\" graphql:\"id\""
	Organization        *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Tags                []string                                                                              "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier       *string                                                                               "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt           *time.Time                                                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy           *string                                                                               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetAllowedEmailDomains() []string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.AllowedEmailDomains
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetBillingAddress() *models.Address {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.BillingAddress
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetBillingContact() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.BillingContact
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetBillingEmail() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.BillingEmail
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetBillingPhone() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.BillingPhone
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.CreatedAt
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.CreatedBy
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetDomains() []string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.Domains
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.GeoLocation
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetID() string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.ID
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetOrganization() *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting_Organization {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.Organization
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetTags() []string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.Tags
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetTaxIdentifier() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.TaxIdentifier
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.UpdatedAt
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.UpdatedBy
}

type UpdateOrganizationSetting_UpdateOrganizationSetting struct {
	OrganizationSetting UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting "json:\"organizationSetting\" graphql:\"organizationSetting\""
}

func (t *UpdateOrganizationSetting_UpdateOrganizationSetting) GetOrganizationSetting() *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting{}
	}
	return &t.OrganizationSetting
}

type GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node struct {
	BillingAddress *models.Address "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact *string         "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string         "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string         "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt      *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains        []string        "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation    *enums.Region   "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	HistoryTime    time.Time       "json:\"historyTime\" graphql:\"historyTime\""
	ID             string          "json:\"id\" graphql:\"id\""
	Operation      history.OpType  "json:\"operation\" graphql:\"operation\""
	OrganizationID *string         "json:\"organizationID,omitempty\" graphql:\"organizationID\""
	Ref            *string         "json:\"ref,omitempty\" graphql:\"ref\""
	Tags           []string        "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier  *string         "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt      *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingAddress() *models.Address {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingAddress
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingContact() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingContact
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingEmail() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingEmail
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingPhone() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingPhone
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Domains
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.GeoLocation
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetOrganizationID() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.TaxIdentifier
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges struct {
	Node *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges) GetNode() *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges{}
	}
	return t.Node
}

type GetAllOrganizationSettingHistories_OrganizationSettingHistories struct {
	Edges []*GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories) GetEdges() []*GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories{}
	}
	return t.Edges
}

type GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node struct {
	BillingAddress *models.Address "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact *string         "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string         "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string         "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt      *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains        []string        "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation    *enums.Region   "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	HistoryTime    time.Time       "json:\"historyTime\" graphql:\"historyTime\""
	ID             string          "json:\"id\" graphql:\"id\""
	Operation      history.OpType  "json:\"operation\" graphql:\"operation\""
	OrganizationID *string         "json:\"organizationID,omitempty\" graphql:\"organizationID\""
	Ref            *string         "json:\"ref,omitempty\" graphql:\"ref\""
	Tags           []string        "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier  *string         "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt      *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingAddress() *models.Address {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingAddress
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingContact() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingContact
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingEmail() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingEmail
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingPhone() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingPhone
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Domains
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.GeoLocation
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetOrganizationID() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.TaxIdentifier
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetOrganizationSettingHistories_OrganizationSettingHistories_Edges struct {
	Node *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges) GetNode() *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges{}
	}
	return t.Node
}

type GetOrganizationSettingHistories_OrganizationSettingHistories struct {
	Edges []*GetOrganizationSettingHistories_OrganizationSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrganizationSettingHistories_OrganizationSettingHistories) GetEdges() []*GetOrganizationSettingHistories_OrganizationSettingHistories_Edges {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories{}
	}
	return t.Edges
}

type AddUserToOrgWithRole_CreateOrgMembership_OrgMembership struct {
	ID             string     "json:\"id\" graphql:\"id\""
	OrganizationID string     "json:\"organizationID\" graphql:\"organizationID\""
	Role           enums.Role "json:\"role\" graphql:\"role\""
	UserID         string     "json:\"userID\" graphql:\"userID\""
}

func (t *AddUserToOrgWithRole_CreateOrgMembership_OrgMembership) GetID() string {
	if t == nil {
		t = &AddUserToOrgWithRole_CreateOrgMembership_OrgMembership{}
	}
	return t.ID
}
func (t *AddUserToOrgWithRole_CreateOrgMembership_OrgMembership) GetOrganizationID() string {
	if t == nil {
		t = &AddUserToOrgWithRole_CreateOrgMembership_OrgMembership{}
	}
	return t.OrganizationID
}
func (t *AddUserToOrgWithRole_CreateOrgMembership_OrgMembership) GetRole() *enums.Role {
	if t == nil {
		t = &AddUserToOrgWithRole_CreateOrgMembership_OrgMembership{}
	}
	return &t.Role
}
func (t *AddUserToOrgWithRole_CreateOrgMembership_OrgMembership) GetUserID() string {
	if t == nil {
		t = &AddUserToOrgWithRole_CreateOrgMembership_OrgMembership{}
	}
	return t.UserID
}

type AddUserToOrgWithRole_CreateOrgMembership struct {
	OrgMembership AddUserToOrgWithRole_CreateOrgMembership_OrgMembership "json:\"orgMembership\" graphql:\"orgMembership\""
}

func (t *AddUserToOrgWithRole_CreateOrgMembership) GetOrgMembership() *AddUserToOrgWithRole_CreateOrgMembership_OrgMembership {
	if t == nil {
		t = &AddUserToOrgWithRole_CreateOrgMembership{}
	}
	return &t.OrgMembership
}

type CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships struct {
	ID             string     "json:\"id\" graphql:\"id\""
	OrganizationID string     "json:\"organizationID\" graphql:\"organizationID\""
	Role           enums.Role "json:\"role\" graphql:\"role\""
	UserID         string     "json:\"userID\" graphql:\"userID\""
}

func (t *CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships{}
	}
	return t.ID
}
func (t *CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships) GetOrganizationID() string {
	if t == nil {
		t = &CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships{}
	}
	return t.OrganizationID
}
func (t *CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships) GetUserID() string {
	if t == nil {
		t = &CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships{}
	}
	return t.UserID
}

type CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership struct {
	OrgMemberships []*CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships "json:\"orgMemberships,omitempty\" graphql:\"orgMemberships\""
}

func (t *CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership) GetOrgMemberships() []*CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships {
	if t == nil {
		t = &CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership{}
	}
	return t.OrgMemberships
}

type CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships struct {
	ID             string     "json:\"id\" graphql:\"id\""
	OrganizationID string     "json:\"organizationID\" graphql:\"organizationID\""
	Role           enums.Role "json:\"role\" graphql:\"role\""
	UserID         string     "json:\"userID\" graphql:\"userID\""
}

func (t *CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships{}
	}
	return t.ID
}
func (t *CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships) GetOrganizationID() string {
	if t == nil {
		t = &CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships{}
	}
	return t.OrganizationID
}
func (t *CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships) GetUserID() string {
	if t == nil {
		t = &CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships{}
	}
	return t.UserID
}

type CreateBulkOrgMembers_CreateBulkOrgMembership struct {
	OrgMemberships []*CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships "json:\"orgMemberships,omitempty\" graphql:\"orgMemberships\""
}

func (t *CreateBulkOrgMembers_CreateBulkOrgMembership) GetOrgMemberships() []*CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships {
	if t == nil {
		t = &CreateBulkOrgMembers_CreateBulkOrgMembership{}
	}
	return t.OrgMemberships
}

type GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User) GetDisplayName() string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User{}
	}
	return t.DisplayName
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User) GetEmail() string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User{}
	}
	return t.Email
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User) GetFirstName() *string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User{}
	}
	return t.FirstName
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User) GetID() string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User{}
	}
	return t.ID
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User) GetLastName() *string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User{}
	}
	return t.LastName
}

type GetOrgMembersByOrgID_OrgMemberships_Edges_Node struct {
	ID             string                                              "json:\"id\" graphql:\"id\""
	OrganizationID string                                              "json:\"organizationID\" graphql:\"organizationID\""
	Role           enums.Role                                          "json:\"role\" graphql:\"role\""
	User           GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User "json:\"user\" graphql:\"user\""
	UserID         string                                              "json:\"userID\" graphql:\"userID\""
}

func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node) GetOrganizationID() string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node{}
	}
	return &t.Role
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node) GetUser() *GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node{}
	}
	return &t.User
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node{}
	}
	return t.UserID
}

type GetOrgMembersByOrgID_OrgMemberships_Edges struct {
	Node *GetOrgMembersByOrgID_OrgMemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrgMembersByOrgID_OrgMemberships_Edges) GetNode() *GetOrgMembersByOrgID_OrgMemberships_Edges_Node {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges{}
	}
	return t.Node
}

type GetOrgMembersByOrgID_OrgMemberships struct {
	Edges []*GetOrgMembersByOrgID_OrgMemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrgMembersByOrgID_OrgMemberships) GetEdges() []*GetOrgMembersByOrgID_OrgMemberships_Edges {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships{}
	}
	return t.Edges
}

type RemoveUserFromOrg_DeleteOrgMembership struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *RemoveUserFromOrg_DeleteOrgMembership) GetDeletedID() string {
	if t == nil {
		t = &RemoveUserFromOrg_DeleteOrgMembership{}
	}
	return t.DeletedID
}

type UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership struct {
	ID             string     "json:\"id\" graphql:\"id\""
	OrganizationID string     "json:\"organizationID\" graphql:\"organizationID\""
	Role           enums.Role "json:\"role\" graphql:\"role\""
	UserID         string     "json:\"userID\" graphql:\"userID\""
}

func (t *UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership) GetID() string {
	if t == nil {
		t = &UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership{}
	}
	return t.ID
}
func (t *UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership) GetOrganizationID() string {
	if t == nil {
		t = &UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership{}
	}
	return t.OrganizationID
}
func (t *UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership) GetRole() *enums.Role {
	if t == nil {
		t = &UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership{}
	}
	return &t.Role
}
func (t *UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership) GetUserID() string {
	if t == nil {
		t = &UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership{}
	}
	return t.UserID
}

type UpdateUserRoleInOrg_UpdateOrgMembership struct {
	OrgMembership UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership "json:\"orgMembership\" graphql:\"orgMembership\""
}

func (t *UpdateUserRoleInOrg_UpdateOrgMembership) GetOrgMembership() *UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership {
	if t == nil {
		t = &UpdateUserRoleInOrg_UpdateOrgMembership{}
	}
	return &t.OrgMembership
}

type GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node struct {
	CreatedAt      *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime    time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID             string         "json:\"id\" graphql:\"id\""
	Operation      history.OpType "json:\"operation\" graphql:\"operation\""
	OrganizationID string         "json:\"organizationID\" graphql:\"organizationID\""
	Ref            *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Role           enums.Role     "json:\"role\" graphql:\"role\""
	UpdatedAt      *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID         string         "json:\"userID\" graphql:\"userID\""
}

func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetOrganizationID() string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.Role
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UserID
}

type GetAllOrgMembershipHistories_OrgMembershipHistories_Edges struct {
	Node *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges) GetNode() *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges{}
	}
	return t.Node
}

type GetAllOrgMembershipHistories_OrgMembershipHistories struct {
	Edges []*GetAllOrgMembershipHistories_OrgMembershipHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllOrgMembershipHistories_OrgMembershipHistories) GetEdges() []*GetAllOrgMembershipHistories_OrgMembershipHistories_Edges {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories{}
	}
	return t.Edges
}

type GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node struct {
	CreatedAt      *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime    time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID             string         "json:\"id\" graphql:\"id\""
	Operation      history.OpType "json:\"operation\" graphql:\"operation\""
	OrganizationID string         "json:\"organizationID\" graphql:\"organizationID\""
	Ref            *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Role           enums.Role     "json:\"role\" graphql:\"role\""
	UpdatedAt      *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID         string         "json:\"userID\" graphql:\"userID\""
}

func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetOrganizationID() string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.Role
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UserID
}

type GetOrgMembershipHistories_OrgMembershipHistories_Edges struct {
	Node *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges) GetNode() *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges{}
	}
	return t.Node
}

type GetOrgMembershipHistories_OrgMembershipHistories struct {
	Edges []*GetOrgMembershipHistories_OrgMembershipHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrgMembershipHistories_OrgMembershipHistories) GetEdges() []*GetOrgMembershipHistories_OrgMembershipHistories_Edges {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories{}
	}
	return t.Edges
}

type GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node struct {
	Active                   bool          "json:\"active\" graphql:\"active\""
	CreatedAt                *time.Time    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                *string       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DaysUntilDue             *string       "json:\"daysUntilDue,omitempty\" graphql:\"daysUntilDue\""
	ExpiresAt                *time.Time    "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	FeatureLookupKeys        []string      "json:\"featureLookupKeys,omitempty\" graphql:\"featureLookupKeys\""
	Features                 []string      "json:\"features,omitempty\" graphql:\"features\""
	ID                       string        "json:\"id\" graphql:\"id\""
	OwnerID                  *string       "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PaymentMethodAdded       *bool         "json:\"paymentMethodAdded,omitempty\" graphql:\"paymentMethodAdded\""
	ProductPrice             *models.Price "json:\"productPrice,omitempty\" graphql:\"productPrice\""
	ProductTier              *string       "json:\"productTier,omitempty\" graphql:\"productTier\""
	StripeCustomerID         *string       "json:\"stripeCustomerID,omitempty\" graphql:\"stripeCustomerID\""
	StripeProductTierID      *string       "json:\"stripeProductTierID,omitempty\" graphql:\"stripeProductTierID\""
	StripeSubscriptionID     *string       "json:\"stripeSubscriptionID,omitempty\" graphql:\"stripeSubscriptionID\""
	StripeSubscriptionStatus *string       "json:\"stripeSubscriptionStatus,omitempty\" graphql:\"stripeSubscriptionStatus\""
	Tags                     []string      "json:\"tags,omitempty\" graphql:\"tags\""
	TrialExpiresAt           *time.Time    "json:\"trialExpiresAt,omitempty\" graphql:\"trialExpiresAt\""
	UpdatedAt                *time.Time    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                *string       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetActive() bool {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.Active
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetDaysUntilDue() *string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.DaysUntilDue
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetFeatureLookupKeys() []string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.FeatureLookupKeys
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetFeatures() []string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.Features
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetPaymentMethodAdded() *bool {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.PaymentMethodAdded
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetProductPrice() *models.Price {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.ProductPrice
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetProductTier() *string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.ProductTier
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetStripeCustomerID() *string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.StripeCustomerID
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetStripeProductTierID() *string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.StripeProductTierID
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetStripeSubscriptionID() *string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.StripeSubscriptionID
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetStripeSubscriptionStatus() *string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.StripeSubscriptionStatus
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetTrialExpiresAt() *time.Time {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.TrialExpiresAt
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllOrgSubscriptions_OrgSubscriptions_Edges struct {
	Node *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrgSubscriptions_OrgSubscriptions_Edges) GetNode() *GetAllOrgSubscriptions_OrgSubscriptions_Edges_Node {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions_Edges{}
	}
	return t.Node
}

type GetAllOrgSubscriptions_OrgSubscriptions struct {
	Edges []*GetAllOrgSubscriptions_OrgSubscriptions_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllOrgSubscriptions_OrgSubscriptions) GetEdges() []*GetAllOrgSubscriptions_OrgSubscriptions_Edges {
	if t == nil {
		t = &GetAllOrgSubscriptions_OrgSubscriptions{}
	}
	return t.Edges
}

type GetOrgSubscriptionByID_OrgSubscription struct {
	Active                   bool          "json:\"active\" graphql:\"active\""
	CreatedAt                *time.Time    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                *string       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DaysUntilDue             *string       "json:\"daysUntilDue,omitempty\" graphql:\"daysUntilDue\""
	ExpiresAt                *time.Time    "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	FeatureLookupKeys        []string      "json:\"featureLookupKeys,omitempty\" graphql:\"featureLookupKeys\""
	Features                 []string      "json:\"features,omitempty\" graphql:\"features\""
	ID                       string        "json:\"id\" graphql:\"id\""
	OwnerID                  *string       "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PaymentMethodAdded       *bool         "json:\"paymentMethodAdded,omitempty\" graphql:\"paymentMethodAdded\""
	ProductPrice             *models.Price "json:\"productPrice,omitempty\" graphql:\"productPrice\""
	ProductTier              *string       "json:\"productTier,omitempty\" graphql:\"productTier\""
	StripeCustomerID         *string       "json:\"stripeCustomerID,omitempty\" graphql:\"stripeCustomerID\""
	StripeProductTierID      *string       "json:\"stripeProductTierID,omitempty\" graphql:\"stripeProductTierID\""
	StripeSubscriptionID     *string       "json:\"stripeSubscriptionID,omitempty\" graphql:\"stripeSubscriptionID\""
	StripeSubscriptionStatus *string       "json:\"stripeSubscriptionStatus,omitempty\" graphql:\"stripeSubscriptionStatus\""
	Tags                     []string      "json:\"tags,omitempty\" graphql:\"tags\""
	TrialExpiresAt           *time.Time    "json:\"trialExpiresAt,omitempty\" graphql:\"trialExpiresAt\""
	UpdatedAt                *time.Time    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                *string       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrgSubscriptionByID_OrgSubscription) GetActive() bool {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.Active
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.CreatedAt
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.CreatedBy
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetDaysUntilDue() *string {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.DaysUntilDue
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.ExpiresAt
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetFeatureLookupKeys() []string {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.FeatureLookupKeys
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetFeatures() []string {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.Features
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetID() string {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.ID
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetOwnerID() *string {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.OwnerID
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetPaymentMethodAdded() *bool {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.PaymentMethodAdded
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetProductPrice() *models.Price {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.ProductPrice
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetProductTier() *string {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.ProductTier
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetStripeCustomerID() *string {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.StripeCustomerID
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetStripeProductTierID() *string {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.StripeProductTierID
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetStripeSubscriptionID() *string {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.StripeSubscriptionID
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetStripeSubscriptionStatus() *string {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.StripeSubscriptionStatus
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetTags() []string {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.Tags
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetTrialExpiresAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.TrialExpiresAt
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.UpdatedAt
}
func (t *GetOrgSubscriptionByID_OrgSubscription) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrgSubscriptionByID_OrgSubscription{}
	}
	return t.UpdatedBy
}

type GetOrgSubscriptions_OrgSubscriptions_Edges_Node struct {
	Active                   bool          "json:\"active\" graphql:\"active\""
	CreatedAt                *time.Time    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                *string       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DaysUntilDue             *string       "json:\"daysUntilDue,omitempty\" graphql:\"daysUntilDue\""
	ExpiresAt                *time.Time    "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	FeatureLookupKeys        []string      "json:\"featureLookupKeys,omitempty\" graphql:\"featureLookupKeys\""
	Features                 []string      "json:\"features,omitempty\" graphql:\"features\""
	ID                       string        "json:\"id\" graphql:\"id\""
	OwnerID                  *string       "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PaymentMethodAdded       *bool         "json:\"paymentMethodAdded,omitempty\" graphql:\"paymentMethodAdded\""
	ProductPrice             *models.Price "json:\"productPrice,omitempty\" graphql:\"productPrice\""
	ProductTier              *string       "json:\"productTier,omitempty\" graphql:\"productTier\""
	StripeCustomerID         *string       "json:\"stripeCustomerID,omitempty\" graphql:\"stripeCustomerID\""
	StripeProductTierID      *string       "json:\"stripeProductTierID,omitempty\" graphql:\"stripeProductTierID\""
	StripeSubscriptionID     *string       "json:\"stripeSubscriptionID,omitempty\" graphql:\"stripeSubscriptionID\""
	StripeSubscriptionStatus *string       "json:\"stripeSubscriptionStatus,omitempty\" graphql:\"stripeSubscriptionStatus\""
	Tags                     []string      "json:\"tags,omitempty\" graphql:\"tags\""
	TrialExpiresAt           *time.Time    "json:\"trialExpiresAt,omitempty\" graphql:\"trialExpiresAt\""
	UpdatedAt                *time.Time    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                *string       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetActive() bool {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.Active
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetDaysUntilDue() *string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.DaysUntilDue
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetFeatureLookupKeys() []string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.FeatureLookupKeys
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetFeatures() []string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.Features
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetPaymentMethodAdded() *bool {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.PaymentMethodAdded
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetProductPrice() *models.Price {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.ProductPrice
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetProductTier() *string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.ProductTier
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetStripeCustomerID() *string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.StripeCustomerID
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetStripeProductTierID() *string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.StripeProductTierID
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetStripeSubscriptionID() *string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.StripeSubscriptionID
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetStripeSubscriptionStatus() *string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.StripeSubscriptionStatus
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.Tags
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetTrialExpiresAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.TrialExpiresAt
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOrgSubscriptions_OrgSubscriptions_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetOrgSubscriptions_OrgSubscriptions_Edges struct {
	Node *GetOrgSubscriptions_OrgSubscriptions_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrgSubscriptions_OrgSubscriptions_Edges) GetNode() *GetOrgSubscriptions_OrgSubscriptions_Edges_Node {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions_Edges{}
	}
	return t.Node
}

type GetOrgSubscriptions_OrgSubscriptions struct {
	Edges []*GetOrgSubscriptions_OrgSubscriptions_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrgSubscriptions_OrgSubscriptions) GetEdges() []*GetOrgSubscriptions_OrgSubscriptions_Edges {
	if t == nil {
		t = &GetOrgSubscriptions_OrgSubscriptions{}
	}
	return t.Edges
}

type GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node struct {
	Active                   bool           "json:\"active\" graphql:\"active\""
	CreatedAt                *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ExpiresAt                *time.Time     "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Features                 []string       "json:\"features,omitempty\" graphql:\"features\""
	HistoryTime              time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID                       string         "json:\"id\" graphql:\"id\""
	Operation                history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID                  *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProductTier              *string        "json:\"productTier,omitempty\" graphql:\"productTier\""
	Ref                      *string        "json:\"ref,omitempty\" graphql:\"ref\""
	StripeCustomerID         *string        "json:\"stripeCustomerID,omitempty\" graphql:\"stripeCustomerID\""
	StripeProductTierID      *string        "json:\"stripeProductTierID,omitempty\" graphql:\"stripeProductTierID\""
	StripeSubscriptionID     *string        "json:\"stripeSubscriptionID,omitempty\" graphql:\"stripeSubscriptionID\""
	StripeSubscriptionStatus *string        "json:\"stripeSubscriptionStatus,omitempty\" graphql:\"stripeSubscriptionStatus\""
	Tags                     []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetActive() bool {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.Active
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetFeatures() []string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.Features
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetProductTier() *string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.ProductTier
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetStripeCustomerID() *string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.StripeCustomerID
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetStripeProductTierID() *string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.StripeProductTierID
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetStripeSubscriptionID() *string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.StripeSubscriptionID
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetStripeSubscriptionStatus() *string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.StripeSubscriptionStatus
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges struct {
	Node *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges) GetNode() *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges{}
	}
	return t.Node
}

type GetAllOrgSubscriptionHistories_OrgSubscriptionHistories struct {
	Edges []*GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories) GetEdges() []*GetAllOrgSubscriptionHistories_OrgSubscriptionHistories_Edges {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories_OrgSubscriptionHistories{}
	}
	return t.Edges
}

type GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node struct {
	Active                   bool           "json:\"active\" graphql:\"active\""
	CreatedAt                *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ExpiresAt                *time.Time     "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Features                 []string       "json:\"features,omitempty\" graphql:\"features\""
	HistoryTime              time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID                       string         "json:\"id\" graphql:\"id\""
	Operation                history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID                  *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProductTier              *string        "json:\"productTier,omitempty\" graphql:\"productTier\""
	Ref                      *string        "json:\"ref,omitempty\" graphql:\"ref\""
	StripeCustomerID         *string        "json:\"stripeCustomerID,omitempty\" graphql:\"stripeCustomerID\""
	StripeProductTierID      *string        "json:\"stripeProductTierID,omitempty\" graphql:\"stripeProductTierID\""
	StripeSubscriptionID     *string        "json:\"stripeSubscriptionID,omitempty\" graphql:\"stripeSubscriptionID\""
	StripeSubscriptionStatus *string        "json:\"stripeSubscriptionStatus,omitempty\" graphql:\"stripeSubscriptionStatus\""
	Tags                     []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetActive() bool {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.Active
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetFeatures() []string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.Features
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetProductTier() *string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.ProductTier
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetStripeCustomerID() *string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.StripeCustomerID
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetStripeProductTierID() *string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.StripeProductTierID
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetStripeSubscriptionID() *string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.StripeSubscriptionID
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetStripeSubscriptionStatus() *string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.StripeSubscriptionStatus
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges struct {
	Node *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges) GetNode() *GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges_Node {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges{}
	}
	return t.Node
}

type GetOrgSubscriptionHistories_OrgSubscriptionHistories struct {
	Edges []*GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrgSubscriptionHistories_OrgSubscriptionHistories) GetEdges() []*GetOrgSubscriptionHistories_OrgSubscriptionHistories_Edges {
	if t == nil {
		t = &GetOrgSubscriptionHistories_OrgSubscriptionHistories{}
	}
	return t.Edges
}

type CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node{}
	}
	return t.Name
}

type CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges struct {
	Node *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges) GetNode() *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges{}
	}
	return t.Node
}

type CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations struct {
	Edges []*CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations) GetEdges() []*CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations_Edges {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations{}
	}
	return t.Edges
}

type CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Owner) GetID() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Owner{}
	}
	return t.ID
}

type CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken struct {
	CreatedAt     *time.Time                                                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                                                               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string                                                                               "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt     *time.Time                                                                            "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID            string                                                                                "json:\"id\" graphql:\"id\""
	IsActive      *bool                                                                                 "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt    *time.Time                                                                            "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name          string                                                                                "json:\"name\" graphql:\"name\""
	Organizations CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations "json:\"organizations\" graphql:\"organizations\""
	Owner         CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Owner         "json:\"owner\" graphql:\"owner\""
	RevokedAt     *time.Time                                                                            "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy     *string                                                                               "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason *string                                                                               "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes        []string                                                                              "json:\"scopes,omitempty\" graphql:\"scopes\""
	Tags          []string                                                                              "json:\"tags,omitempty\" graphql:\"tags\""
	Token         string                                                                                "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time                                                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                                               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.CreatedAt
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetCreatedBy() *string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.CreatedBy
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetDescription() *string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Description
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.ExpiresAt
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.ID
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetIsActive() *bool {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.IsActive
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.LastUsedAt
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetName() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Name
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetOrganizations() *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return &t.Organizations
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetOwner() *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Owner {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return &t.Owner
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetRevokedAt() *time.Time {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.RevokedAt
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetRevokedBy() *string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.RevokedBy
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetRevokedReason() *string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.RevokedReason
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetScopes() []string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Scopes
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetTags() []string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Tags
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetToken() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Token
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.UpdatedAt
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetUpdatedBy() *string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.UpdatedBy
}

type CreatePersonalAccessToken_CreatePersonalAccessToken struct {
	PersonalAccessToken CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken "json:\"personalAccessToken\" graphql:\"personalAccessToken\""
}

func (t *CreatePersonalAccessToken_CreatePersonalAccessToken) GetPersonalAccessToken() *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken{}
	}
	return &t.PersonalAccessToken
}

type DeletePersonalAccessToken_DeletePersonalAccessToken struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeletePersonalAccessToken_DeletePersonalAccessToken) GetDeletedID() string {
	if t == nil {
		t = &DeletePersonalAccessToken_DeletePersonalAccessToken{}
	}
	return t.DeletedID
}

type GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node{}
	}
	return t.Name
}

type GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges struct {
	Node *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges) GetNode() *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges{}
	}
	return t.Node
}

type GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations struct {
	Edges []*GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations) GetEdges() []*GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations{}
	}
	return t.Edges
}

type GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node struct {
	CreatedAt     *time.Time                                                               "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                                                  "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string                                                                  "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt     *time.Time                                                               "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID            string                                                                   "json:\"id\" graphql:\"id\""
	IsActive      *bool                                                                    "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt    *time.Time                                                               "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name          string                                                                   "json:\"name\" graphql:\"name\""
	Organizations GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations "json:\"organizations\" graphql:\"organizations\""
	RevokedAt     *time.Time                                                               "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy     *string                                                                  "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason *string                                                                  "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes        []string                                                                 "json:\"scopes,omitempty\" graphql:\"scopes\""
	Tags          []string                                                                 "json:\"tags,omitempty\" graphql:\"tags\""
	Token         string                                                                   "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time                                                               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                                  "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetIsActive() *bool {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.IsActive
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.LastUsedAt
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetOrganizations() *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return &t.Organizations
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetRevokedAt() *time.Time {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.RevokedAt
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetRevokedBy() *string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.RevokedBy
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetRevokedReason() *string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.RevokedReason
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetScopes() []string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Scopes
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetToken() string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Token
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllPersonalAccessTokens_PersonalAccessTokens_Edges struct {
	Node *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges) GetNode() *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges{}
	}
	return t.Node
}

type GetAllPersonalAccessTokens_PersonalAccessTokens struct {
	Edges []*GetAllPersonalAccessTokens_PersonalAccessTokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllPersonalAccessTokens_PersonalAccessTokens) GetEdges() []*GetAllPersonalAccessTokens_PersonalAccessTokens_Edges {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens{}
	}
	return t.Edges
}

type GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges_Node struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges_Node{}
	}
	return t.Name
}

type GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges struct {
	Node *GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges) GetNode() *GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges_Node {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges{}
	}
	return t.Node
}

type GetPersonalAccessTokenByID_PersonalAccessToken_Organizations struct {
	Edges []*GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetPersonalAccessTokenByID_PersonalAccessToken_Organizations) GetEdges() []*GetPersonalAccessTokenByID_PersonalAccessToken_Organizations_Edges {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken_Organizations{}
	}
	return t.Edges
}

type GetPersonalAccessTokenByID_PersonalAccessToken struct {
	CreatedAt     *time.Time                                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string                                                      "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt     *time.Time                                                   "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID            string                                                       "json:\"id\" graphql:\"id\""
	IsActive      *bool                                                        "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt    *time.Time                                                   "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name          string                                                       "json:\"name\" graphql:\"name\""
	Organizations GetPersonalAccessTokenByID_PersonalAccessToken_Organizations "json:\"organizations\" graphql:\"organizations\""
	RevokedAt     *time.Time                                                   "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy     *string                                                      "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason *string                                                      "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes        []string                                                     "json:\"scopes,omitempty\" graphql:\"scopes\""
	Tags          []string                                                     "json:\"tags,omitempty\" graphql:\"tags\""
	Token         string                                                       "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time                                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.CreatedAt
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetCreatedBy() *string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.CreatedBy
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetDescription() *string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.Description
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.ExpiresAt
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.ID
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetIsActive() *bool {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.IsActive
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.LastUsedAt
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetName() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.Name
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetOrganizations() *GetPersonalAccessTokenByID_PersonalAccessToken_Organizations {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return &t.Organizations
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetRevokedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.RevokedAt
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetRevokedBy() *string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.RevokedBy
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetRevokedReason() *string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.RevokedReason
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetScopes() []string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.Scopes
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetTags() []string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.Tags
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetToken() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.Token
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.UpdatedAt
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetUpdatedBy() *string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.UpdatedBy
}

type GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node{}
	}
	return t.Name
}

type GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges struct {
	Node *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges) GetNode() *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges_Node {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges{}
	}
	return t.Node
}

type GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations struct {
	Edges []*GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations) GetEdges() []*GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations_Edges {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations{}
	}
	return t.Edges
}

type GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node struct {
	CreatedAt     *time.Time                                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                                               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string                                                               "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt     *time.Time                                                            "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID            string                                                                "json:\"id\" graphql:\"id\""
	IsActive      *bool                                                                 "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt    *time.Time                                                            "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name          string                                                                "json:\"name\" graphql:\"name\""
	Organizations GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations "json:\"organizations\" graphql:\"organizations\""
	RevokedAt     *time.Time                                                            "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy     *string                                                               "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason *string                                                               "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes        []string                                                              "json:\"scopes,omitempty\" graphql:\"scopes\""
	Tags          []string                                                              "json:\"tags,omitempty\" graphql:\"tags\""
	Token         string                                                                "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time                                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Description
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.ID
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetIsActive() *bool {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.IsActive
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.LastUsedAt
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetName() string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Name
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetOrganizations() *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return &t.Organizations
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetRevokedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.RevokedAt
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetRevokedBy() *string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.RevokedBy
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetRevokedReason() *string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.RevokedReason
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetScopes() []string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Scopes
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Tags
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetToken() string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Token
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetPersonalAccessTokens_PersonalAccessTokens_Edges struct {
	Node *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetPersonalAccessTokens_PersonalAccessTokens_Edges) GetNode() *GetPersonalAccessTokens_PersonalAccessTokens_Edges_Node {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens_Edges{}
	}
	return t.Node
}

type GetPersonalAccessTokens_PersonalAccessTokens struct {
	Edges []*GetPersonalAccessTokens_PersonalAccessTokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetPersonalAccessTokens_PersonalAccessTokens) GetEdges() []*GetPersonalAccessTokens_PersonalAccessTokens_Edges {
	if t == nil {
		t = &GetPersonalAccessTokens_PersonalAccessTokens{}
	}
	return t.Edges
}

type UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node{}
	}
	return t.Name
}

type UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges struct {
	Node *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges) GetNode() *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges_Node {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges{}
	}
	return t.Node
}

type UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations struct {
	Edges []*UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations) GetEdges() []*UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations_Edges {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations{}
	}
	return t.Edges
}

type UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Owner) GetID() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Owner{}
	}
	return t.ID
}

type UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken struct {
	CreatedAt     *time.Time                                                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                                                               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string                                                                               "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt     *time.Time                                                                            "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID            string                                                                                "json:\"id\" graphql:\"id\""
	IsActive      *bool                                                                                 "json:\"isActive,omitempty\" graphql:\"isActive\""
	LastUsedAt    *time.Time                                                                            "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name          string                                                                                "json:\"name\" graphql:\"name\""
	Organizations UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations "json:\"organizations\" graphql:\"organizations\""
	Owner         UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Owner         "json:\"owner\" graphql:\"owner\""
	RevokedAt     *time.Time                                                                            "json:\"revokedAt,omitempty\" graphql:\"revokedAt\""
	RevokedBy     *string                                                                               "json:\"revokedBy,omitempty\" graphql:\"revokedBy\""
	RevokedReason *string                                                                               "json:\"revokedReason,omitempty\" graphql:\"revokedReason\""
	Scopes        []string                                                                              "json:\"scopes,omitempty\" graphql:\"scopes\""
	Tags          []string                                                                              "json:\"tags,omitempty\" graphql:\"tags\""
	Token         string                                                                                "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time                                                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                                               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.CreatedAt
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetCreatedBy() *string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.CreatedBy
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetDescription() *string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Description
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.ExpiresAt
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.ID
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetIsActive() *bool {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.IsActive
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.LastUsedAt
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetName() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Name
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetOrganizations() *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return &t.Organizations
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetOwner() *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Owner {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return &t.Owner
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetRevokedAt() *time.Time {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.RevokedAt
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetRevokedBy() *string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.RevokedBy
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetRevokedReason() *string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.RevokedReason
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetScopes() []string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Scopes
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetTags() []string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Tags
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetToken() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Token
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.UpdatedAt
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.UpdatedBy
}

type UpdatePersonalAccessToken_UpdatePersonalAccessToken struct {
	PersonalAccessToken UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken "json:\"personalAccessToken\" graphql:\"personalAccessToken\""
}

func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken) GetPersonalAccessToken() *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken{}
	}
	return &t.PersonalAccessToken
}

type CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures_Approver struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures_Approver) GetID() string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures_Approver{}
	}
	return t.ID
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures_Approver) GetName() string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures_Approver{}
	}
	return t.Name
}

type CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures_Delegate) GetID() string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures_Delegate{}
	}
	return t.ID
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures_Delegate) GetName() string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures_Delegate{}
	}
	return t.Name
}

type CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures struct {
	ApprovalRequired *bool                                                              "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	Approver         *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures_Approver "json:\"approver,omitempty\" graphql:\"approver\""
	CreatedAt        *time.Time                                                         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                                                            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate         *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures_Delegate "json:\"delegate,omitempty\" graphql:\"delegate\""
	Details          *string                                                            "json:\"details,omitempty\" graphql:\"details\""
	DisplayID        string                                                             "json:\"displayID\" graphql:\"displayID\""
	ID               string                                                             "json:\"id\" graphql:\"id\""
	Name             string                                                             "json:\"name\" graphql:\"name\""
	OwnerID          *string                                                            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProcedureType    *string                                                            "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	ReviewDue        *time.Time                                                         "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency                                                   "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string                                                            "json:\"revision,omitempty\" graphql:\"revision\""
	Status           *enums.DocumentStatus                                              "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string                                                           "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time                                                         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                                                            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetApprovalRequired() *bool {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.ApprovalRequired
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetApprover() *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures_Approver {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.Approver
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetDelegate() *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures_Delegate {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.Delegate
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetDetails() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.Details
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.DisplayID
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetID() string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.ID
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetName() string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.Name
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetProcedureType() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.ProcedureType
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetReviewDue() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.ReviewDue
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.ReviewFrequency
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetRevision() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.Revision
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.Status
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.Tags
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVProcedure_CreateBulkCSVProcedure struct {
	Procedures []*CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures "json:\"procedures,omitempty\" graphql:\"procedures\""
}

func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure) GetProcedures() []*CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure{}
	}
	return t.Procedures
}

type CreateBulkProcedure_CreateBulkProcedure_Procedures_Approver struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures_Approver) GetID() string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures_Approver{}
	}
	return t.ID
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures_Approver) GetName() string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures_Approver{}
	}
	return t.Name
}

type CreateBulkProcedure_CreateBulkProcedure_Procedures_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures_Delegate) GetID() string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures_Delegate{}
	}
	return t.ID
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures_Delegate) GetName() string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures_Delegate{}
	}
	return t.Name
}

type CreateBulkProcedure_CreateBulkProcedure_Procedures struct {
	ApprovalRequired *bool                                                        "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	Approver         *CreateBulkProcedure_CreateBulkProcedure_Procedures_Approver "json:\"approver,omitempty\" graphql:\"approver\""
	CreatedAt        *time.Time                                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate         *CreateBulkProcedure_CreateBulkProcedure_Procedures_Delegate "json:\"delegate,omitempty\" graphql:\"delegate\""
	Details          *string                                                      "json:\"details,omitempty\" graphql:\"details\""
	DisplayID        string                                                       "json:\"displayID\" graphql:\"displayID\""
	ID               string                                                       "json:\"id\" graphql:\"id\""
	Name             string                                                       "json:\"name\" graphql:\"name\""
	OwnerID          *string                                                      "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProcedureType    *string                                                      "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	ReviewDue        *time.Time                                                   "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency                                             "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string                                                      "json:\"revision,omitempty\" graphql:\"revision\""
	Status           *enums.DocumentStatus                                        "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string                                                     "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time                                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetApprovalRequired() *bool {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.ApprovalRequired
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetApprover() *CreateBulkProcedure_CreateBulkProcedure_Procedures_Approver {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.Approver
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.CreatedAt
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.CreatedBy
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetDelegate() *CreateBulkProcedure_CreateBulkProcedure_Procedures_Delegate {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.Delegate
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetDetails() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.Details
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.DisplayID
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetID() string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.ID
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetName() string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.Name
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.OwnerID
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetProcedureType() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.ProcedureType
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetReviewDue() *time.Time {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.ReviewDue
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.ReviewFrequency
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetRevision() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.Revision
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.Status
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetTags() []string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.Tags
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.UpdatedBy
}

type CreateBulkProcedure_CreateBulkProcedure struct {
	Procedures []*CreateBulkProcedure_CreateBulkProcedure_Procedures "json:\"procedures,omitempty\" graphql:\"procedures\""
}

func (t *CreateBulkProcedure_CreateBulkProcedure) GetProcedures() []*CreateBulkProcedure_CreateBulkProcedure_Procedures {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure{}
	}
	return t.Procedures
}

type CreateProcedure_CreateProcedure_Procedure_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateProcedure_CreateProcedure_Procedure_Editors) GetID() string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure_Editors{}
	}
	return t.ID
}
func (t *CreateProcedure_CreateProcedure_Procedure_Editors) GetName() string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure_Editors{}
	}
	return t.Name
}

type CreateProcedure_CreateProcedure_Procedure_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateProcedure_CreateProcedure_Procedure_BlockedGroups) GetID() string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure_BlockedGroups{}
	}
	return t.ID
}
func (t *CreateProcedure_CreateProcedure_Procedure_BlockedGroups) GetName() string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure_BlockedGroups{}
	}
	return t.Name
}

type CreateProcedure_CreateProcedure_Procedure_Approver struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateProcedure_CreateProcedure_Procedure_Approver) GetID() string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure_Approver{}
	}
	return t.ID
}
func (t *CreateProcedure_CreateProcedure_Procedure_Approver) GetName() string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure_Approver{}
	}
	return t.Name
}

type CreateProcedure_CreateProcedure_Procedure_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateProcedure_CreateProcedure_Procedure_Delegate) GetID() string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure_Delegate{}
	}
	return t.ID
}
func (t *CreateProcedure_CreateProcedure_Procedure_Delegate) GetName() string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure_Delegate{}
	}
	return t.Name
}

type CreateProcedure_CreateProcedure_Procedure struct {
	ApprovalRequired *bool                                                      "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	Approver         *CreateProcedure_CreateProcedure_Procedure_Approver        "json:\"approver,omitempty\" graphql:\"approver\""
	BlockedGroups    []*CreateProcedure_CreateProcedure_Procedure_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	CreatedAt        *time.Time                                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate         *CreateProcedure_CreateProcedure_Procedure_Delegate        "json:\"delegate,omitempty\" graphql:\"delegate\""
	Details          *string                                                    "json:\"details,omitempty\" graphql:\"details\""
	DisplayID        string                                                     "json:\"displayID\" graphql:\"displayID\""
	Editors          []*CreateProcedure_CreateProcedure_Procedure_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID               string                                                     "json:\"id\" graphql:\"id\""
	Name             string                                                     "json:\"name\" graphql:\"name\""
	OwnerID          *string                                                    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProcedureType    *string                                                    "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	ReviewDue        *time.Time                                                 "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency                                           "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string                                                    "json:\"revision,omitempty\" graphql:\"revision\""
	Status           *enums.DocumentStatus                                      "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string                                                   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time                                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateProcedure_CreateProcedure_Procedure) GetApprovalRequired() *bool {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.ApprovalRequired
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetApprover() *CreateProcedure_CreateProcedure_Procedure_Approver {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.Approver
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetBlockedGroups() []*CreateProcedure_CreateProcedure_Procedure_BlockedGroups {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.BlockedGroups
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.CreatedAt
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetCreatedBy() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.CreatedBy
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetDelegate() *CreateProcedure_CreateProcedure_Procedure_Delegate {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.Delegate
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetDetails() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.Details
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetDisplayID() string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.DisplayID
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetEditors() []*CreateProcedure_CreateProcedure_Procedure_Editors {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.Editors
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetID() string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.ID
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetName() string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.Name
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetOwnerID() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.OwnerID
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetProcedureType() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.ProcedureType
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetReviewDue() *time.Time {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.ReviewDue
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.ReviewFrequency
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetRevision() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.Revision
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.Status
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetTags() []string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.Tags
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.UpdatedAt
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.UpdatedBy
}

type CreateProcedure_CreateProcedure struct {
	Procedure CreateProcedure_CreateProcedure_Procedure "json:\"procedure\" graphql:\"procedure\""
}

func (t *CreateProcedure_CreateProcedure) GetProcedure() *CreateProcedure_CreateProcedure_Procedure {
	if t == nil {
		t = &CreateProcedure_CreateProcedure{}
	}
	return &t.Procedure
}

type DeleteProcedure_DeleteProcedure struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteProcedure_DeleteProcedure) GetDeletedID() string {
	if t == nil {
		t = &DeleteProcedure_DeleteProcedure{}
	}
	return t.DeletedID
}

type GetAllProcedures_Procedures_Edges_Node_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllProcedures_Procedures_Edges_Node_Editors) GetID() string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node_Editors{}
	}
	return t.ID
}
func (t *GetAllProcedures_Procedures_Edges_Node_Editors) GetName() string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node_Editors{}
	}
	return t.Name
}

type GetAllProcedures_Procedures_Edges_Node_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllProcedures_Procedures_Edges_Node_BlockedGroups) GetID() string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node_BlockedGroups{}
	}
	return t.ID
}
func (t *GetAllProcedures_Procedures_Edges_Node_BlockedGroups) GetName() string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node_BlockedGroups{}
	}
	return t.Name
}

type GetAllProcedures_Procedures_Edges_Node_Approver struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllProcedures_Procedures_Edges_Node_Approver) GetID() string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node_Approver{}
	}
	return t.ID
}
func (t *GetAllProcedures_Procedures_Edges_Node_Approver) GetName() string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node_Approver{}
	}
	return t.Name
}

type GetAllProcedures_Procedures_Edges_Node_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllProcedures_Procedures_Edges_Node_Delegate) GetID() string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node_Delegate{}
	}
	return t.ID
}
func (t *GetAllProcedures_Procedures_Edges_Node_Delegate) GetName() string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node_Delegate{}
	}
	return t.Name
}

type GetAllProcedures_Procedures_Edges_Node struct {
	ApprovalRequired *bool                                                   "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	Approver         *GetAllProcedures_Procedures_Edges_Node_Approver        "json:\"approver,omitempty\" graphql:\"approver\""
	BlockedGroups    []*GetAllProcedures_Procedures_Edges_Node_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	CreatedAt        *time.Time                                              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                                                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate         *GetAllProcedures_Procedures_Edges_Node_Delegate        "json:\"delegate,omitempty\" graphql:\"delegate\""
	Details          *string                                                 "json:\"details,omitempty\" graphql:\"details\""
	DisplayID        string                                                  "json:\"displayID\" graphql:\"displayID\""
	Editors          []*GetAllProcedures_Procedures_Edges_Node_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID               string                                                  "json:\"id\" graphql:\"id\""
	Name             string                                                  "json:\"name\" graphql:\"name\""
	OwnerID          *string                                                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProcedureType    *string                                                 "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	ReviewDue        *time.Time                                              "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency                                        "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string                                                 "json:\"revision,omitempty\" graphql:\"revision\""
	Status           *enums.DocumentStatus                                   "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string                                                "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time                                              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                                                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllProcedures_Procedures_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetApprover() *GetAllProcedures_Procedures_Edges_Node_Approver {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.Approver
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetBlockedGroups() []*GetAllProcedures_Procedures_Edges_Node_BlockedGroups {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.BlockedGroups
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetDelegate() *GetAllProcedures_Procedures_Edges_Node_Delegate {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.Delegate
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetEditors() []*GetAllProcedures_Procedures_Edges_Node_Editors {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.Editors
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetProcedureType() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.ProcedureType
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.Revision
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllProcedures_Procedures_Edges struct {
	Node *GetAllProcedures_Procedures_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllProcedures_Procedures_Edges) GetNode() *GetAllProcedures_Procedures_Edges_Node {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges{}
	}
	return t.Node
}

type GetAllProcedures_Procedures struct {
	Edges []*GetAllProcedures_Procedures_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllProcedures_Procedures) GetEdges() []*GetAllProcedures_Procedures_Edges {
	if t == nil {
		t = &GetAllProcedures_Procedures{}
	}
	return t.Edges
}

type GetProcedureByID_Procedure_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetProcedureByID_Procedure_Editors) GetID() string {
	if t == nil {
		t = &GetProcedureByID_Procedure_Editors{}
	}
	return t.ID
}
func (t *GetProcedureByID_Procedure_Editors) GetName() string {
	if t == nil {
		t = &GetProcedureByID_Procedure_Editors{}
	}
	return t.Name
}

type GetProcedureByID_Procedure_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetProcedureByID_Procedure_BlockedGroups) GetID() string {
	if t == nil {
		t = &GetProcedureByID_Procedure_BlockedGroups{}
	}
	return t.ID
}
func (t *GetProcedureByID_Procedure_BlockedGroups) GetName() string {
	if t == nil {
		t = &GetProcedureByID_Procedure_BlockedGroups{}
	}
	return t.Name
}

type GetProcedureByID_Procedure_Approver struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetProcedureByID_Procedure_Approver) GetID() string {
	if t == nil {
		t = &GetProcedureByID_Procedure_Approver{}
	}
	return t.ID
}
func (t *GetProcedureByID_Procedure_Approver) GetName() string {
	if t == nil {
		t = &GetProcedureByID_Procedure_Approver{}
	}
	return t.Name
}

type GetProcedureByID_Procedure_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetProcedureByID_Procedure_Delegate) GetID() string {
	if t == nil {
		t = &GetProcedureByID_Procedure_Delegate{}
	}
	return t.ID
}
func (t *GetProcedureByID_Procedure_Delegate) GetName() string {
	if t == nil {
		t = &GetProcedureByID_Procedure_Delegate{}
	}
	return t.Name
}

type GetProcedureByID_Procedure struct {
	ApprovalRequired *bool                                       "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	Approver         *GetProcedureByID_Procedure_Approver        "json:\"approver,omitempty\" graphql:\"approver\""
	BlockedGroups    []*GetProcedureByID_Procedure_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	CreatedAt        *time.Time                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate         *GetProcedureByID_Procedure_Delegate        "json:\"delegate,omitempty\" graphql:\"delegate\""
	Details          *string                                     "json:\"details,omitempty\" graphql:\"details\""
	DisplayID        string                                      "json:\"displayID\" graphql:\"displayID\""
	Editors          []*GetProcedureByID_Procedure_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID               string                                      "json:\"id\" graphql:\"id\""
	Name             string                                      "json:\"name\" graphql:\"name\""
	OwnerID          *string                                     "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProcedureType    *string                                     "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	ReviewDue        *time.Time                                  "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency                            "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string                                     "json:\"revision,omitempty\" graphql:\"revision\""
	Status           *enums.DocumentStatus                       "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string                                    "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetProcedureByID_Procedure) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.ApprovalRequired
}
func (t *GetProcedureByID_Procedure) GetApprover() *GetProcedureByID_Procedure_Approver {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.Approver
}
func (t *GetProcedureByID_Procedure) GetBlockedGroups() []*GetProcedureByID_Procedure_BlockedGroups {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.BlockedGroups
}
func (t *GetProcedureByID_Procedure) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.CreatedAt
}
func (t *GetProcedureByID_Procedure) GetCreatedBy() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.CreatedBy
}
func (t *GetProcedureByID_Procedure) GetDelegate() *GetProcedureByID_Procedure_Delegate {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.Delegate
}
func (t *GetProcedureByID_Procedure) GetDetails() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.Details
}
func (t *GetProcedureByID_Procedure) GetDisplayID() string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.DisplayID
}
func (t *GetProcedureByID_Procedure) GetEditors() []*GetProcedureByID_Procedure_Editors {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.Editors
}
func (t *GetProcedureByID_Procedure) GetID() string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.ID
}
func (t *GetProcedureByID_Procedure) GetName() string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.Name
}
func (t *GetProcedureByID_Procedure) GetOwnerID() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.OwnerID
}
func (t *GetProcedureByID_Procedure) GetProcedureType() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.ProcedureType
}
func (t *GetProcedureByID_Procedure) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.ReviewDue
}
func (t *GetProcedureByID_Procedure) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.ReviewFrequency
}
func (t *GetProcedureByID_Procedure) GetRevision() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.Revision
}
func (t *GetProcedureByID_Procedure) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.Status
}
func (t *GetProcedureByID_Procedure) GetTags() []string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.Tags
}
func (t *GetProcedureByID_Procedure) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.UpdatedAt
}
func (t *GetProcedureByID_Procedure) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.UpdatedBy
}

type GetProcedures_Procedures_Edges_Node_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetProcedures_Procedures_Edges_Node_Editors) GetID() string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node_Editors{}
	}
	return t.ID
}
func (t *GetProcedures_Procedures_Edges_Node_Editors) GetName() string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node_Editors{}
	}
	return t.Name
}

type GetProcedures_Procedures_Edges_Node_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetProcedures_Procedures_Edges_Node_BlockedGroups) GetID() string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node_BlockedGroups{}
	}
	return t.ID
}
func (t *GetProcedures_Procedures_Edges_Node_BlockedGroups) GetName() string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node_BlockedGroups{}
	}
	return t.Name
}

type GetProcedures_Procedures_Edges_Node_Approver struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetProcedures_Procedures_Edges_Node_Approver) GetID() string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node_Approver{}
	}
	return t.ID
}
func (t *GetProcedures_Procedures_Edges_Node_Approver) GetName() string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node_Approver{}
	}
	return t.Name
}

type GetProcedures_Procedures_Edges_Node_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetProcedures_Procedures_Edges_Node_Delegate) GetID() string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node_Delegate{}
	}
	return t.ID
}
func (t *GetProcedures_Procedures_Edges_Node_Delegate) GetName() string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node_Delegate{}
	}
	return t.Name
}

type GetProcedures_Procedures_Edges_Node struct {
	ApprovalRequired *bool                                                "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	Approver         *GetProcedures_Procedures_Edges_Node_Approver        "json:\"approver,omitempty\" graphql:\"approver\""
	BlockedGroups    []*GetProcedures_Procedures_Edges_Node_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	CreatedAt        *time.Time                                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                                              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate         *GetProcedures_Procedures_Edges_Node_Delegate        "json:\"delegate,omitempty\" graphql:\"delegate\""
	Details          *string                                              "json:\"details,omitempty\" graphql:\"details\""
	DisplayID        string                                               "json:\"displayID\" graphql:\"displayID\""
	Editors          []*GetProcedures_Procedures_Edges_Node_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID               string                                               "json:\"id\" graphql:\"id\""
	Name             string                                               "json:\"name\" graphql:\"name\""
	OwnerID          *string                                              "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProcedureType    *string                                              "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	ReviewDue        *time.Time                                           "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency                                     "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string                                              "json:\"revision,omitempty\" graphql:\"revision\""
	Status           *enums.DocumentStatus                                "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string                                             "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time                                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                                              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetProcedures_Procedures_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetProcedures_Procedures_Edges_Node) GetApprover() *GetProcedures_Procedures_Edges_Node_Approver {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.Approver
}
func (t *GetProcedures_Procedures_Edges_Node) GetBlockedGroups() []*GetProcedures_Procedures_Edges_Node_BlockedGroups {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.BlockedGroups
}
func (t *GetProcedures_Procedures_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetProcedures_Procedures_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetProcedures_Procedures_Edges_Node) GetDelegate() *GetProcedures_Procedures_Edges_Node_Delegate {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.Delegate
}
func (t *GetProcedures_Procedures_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.Details
}
func (t *GetProcedures_Procedures_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetProcedures_Procedures_Edges_Node) GetEditors() []*GetProcedures_Procedures_Edges_Node_Editors {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.Editors
}
func (t *GetProcedures_Procedures_Edges_Node) GetID() string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.ID
}
func (t *GetProcedures_Procedures_Edges_Node) GetName() string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.Name
}
func (t *GetProcedures_Procedures_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetProcedures_Procedures_Edges_Node) GetProcedureType() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.ProcedureType
}
func (t *GetProcedures_Procedures_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetProcedures_Procedures_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetProcedures_Procedures_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.Revision
}
func (t *GetProcedures_Procedures_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.Status
}
func (t *GetProcedures_Procedures_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.Tags
}
func (t *GetProcedures_Procedures_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetProcedures_Procedures_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetProcedures_Procedures_Edges struct {
	Node *GetProcedures_Procedures_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetProcedures_Procedures_Edges) GetNode() *GetProcedures_Procedures_Edges_Node {
	if t == nil {
		t = &GetProcedures_Procedures_Edges{}
	}
	return t.Node
}

type GetProcedures_Procedures struct {
	Edges []*GetProcedures_Procedures_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetProcedures_Procedures) GetEdges() []*GetProcedures_Procedures_Edges {
	if t == nil {
		t = &GetProcedures_Procedures{}
	}
	return t.Edges
}

type UpdateProcedure_UpdateProcedure_Procedure_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateProcedure_UpdateProcedure_Procedure_Editors) GetID() string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure_Editors{}
	}
	return t.ID
}
func (t *UpdateProcedure_UpdateProcedure_Procedure_Editors) GetName() string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure_Editors{}
	}
	return t.Name
}

type UpdateProcedure_UpdateProcedure_Procedure_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateProcedure_UpdateProcedure_Procedure_BlockedGroups) GetID() string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure_BlockedGroups{}
	}
	return t.ID
}
func (t *UpdateProcedure_UpdateProcedure_Procedure_BlockedGroups) GetName() string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure_BlockedGroups{}
	}
	return t.Name
}

type UpdateProcedure_UpdateProcedure_Procedure_Approver struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateProcedure_UpdateProcedure_Procedure_Approver) GetID() string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure_Approver{}
	}
	return t.ID
}
func (t *UpdateProcedure_UpdateProcedure_Procedure_Approver) GetName() string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure_Approver{}
	}
	return t.Name
}

type UpdateProcedure_UpdateProcedure_Procedure_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateProcedure_UpdateProcedure_Procedure_Delegate) GetID() string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure_Delegate{}
	}
	return t.ID
}
func (t *UpdateProcedure_UpdateProcedure_Procedure_Delegate) GetName() string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure_Delegate{}
	}
	return t.Name
}

type UpdateProcedure_UpdateProcedure_Procedure struct {
	ApprovalRequired *bool                                                      "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	Approver         *UpdateProcedure_UpdateProcedure_Procedure_Approver        "json:\"approver,omitempty\" graphql:\"approver\""
	BlockedGroups    []*UpdateProcedure_UpdateProcedure_Procedure_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	CreatedAt        *time.Time                                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate         *UpdateProcedure_UpdateProcedure_Procedure_Delegate        "json:\"delegate,omitempty\" graphql:\"delegate\""
	Details          *string                                                    "json:\"details,omitempty\" graphql:\"details\""
	DisplayID        string                                                     "json:\"displayID\" graphql:\"displayID\""
	Editors          []*UpdateProcedure_UpdateProcedure_Procedure_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID               string                                                     "json:\"id\" graphql:\"id\""
	Name             string                                                     "json:\"name\" graphql:\"name\""
	OwnerID          *string                                                    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProcedureType    *string                                                    "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	ReviewDue        *time.Time                                                 "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency                                           "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string                                                    "json:\"revision,omitempty\" graphql:\"revision\""
	Status           *enums.DocumentStatus                                      "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string                                                   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time                                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateProcedure_UpdateProcedure_Procedure) GetApprovalRequired() *bool {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.ApprovalRequired
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetApprover() *UpdateProcedure_UpdateProcedure_Procedure_Approver {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.Approver
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetBlockedGroups() []*UpdateProcedure_UpdateProcedure_Procedure_BlockedGroups {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.BlockedGroups
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.CreatedAt
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.CreatedBy
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetDelegate() *UpdateProcedure_UpdateProcedure_Procedure_Delegate {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.Delegate
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetDetails() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.Details
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetDisplayID() string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.DisplayID
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetEditors() []*UpdateProcedure_UpdateProcedure_Procedure_Editors {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.Editors
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetID() string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.ID
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetName() string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.Name
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetOwnerID() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.OwnerID
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetProcedureType() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.ProcedureType
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetReviewDue() *time.Time {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.ReviewDue
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.ReviewFrequency
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetRevision() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.Revision
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.Status
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetTags() []string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.Tags
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.UpdatedAt
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.UpdatedBy
}

type UpdateProcedure_UpdateProcedure struct {
	Procedure UpdateProcedure_UpdateProcedure_Procedure "json:\"procedure\" graphql:\"procedure\""
}

func (t *UpdateProcedure_UpdateProcedure) GetProcedure() *UpdateProcedure_UpdateProcedure_Procedure {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure{}
	}
	return &t.Procedure
}

type GetAllProcedureHistories_ProcedureHistories_Edges_Node struct {
	ApprovalRequired *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	CreatedAt        *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details          *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID        string                "json:\"displayID\" graphql:\"displayID\""
	HistoryTime      time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID               string                "json:\"id\" graphql:\"id\""
	Name             string                "json:\"name\" graphql:\"name\""
	Operation        history.OpType        "json:\"operation\" graphql:\"operation\""
	OwnerID          *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProcedureType    *string               "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	Ref              *string               "json:\"ref,omitempty\" graphql:\"ref\""
	ReviewDue        *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status           *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetProcedureType() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ProcedureType
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Revision
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllProcedureHistories_ProcedureHistories_Edges struct {
	Node *GetAllProcedureHistories_ProcedureHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllProcedureHistories_ProcedureHistories_Edges) GetNode() *GetAllProcedureHistories_ProcedureHistories_Edges_Node {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges{}
	}
	return t.Node
}

type GetAllProcedureHistories_ProcedureHistories struct {
	Edges []*GetAllProcedureHistories_ProcedureHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllProcedureHistories_ProcedureHistories) GetEdges() []*GetAllProcedureHistories_ProcedureHistories_Edges {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories{}
	}
	return t.Edges
}

type GetProcedureHistories_ProcedureHistories_Edges_Node struct {
	ApprovalRequired *bool                 "json:\"approvalRequired,omitempty\" graphql:\"approvalRequired\""
	CreatedAt        *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details          *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID        string                "json:\"displayID\" graphql:\"displayID\""
	HistoryTime      time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID               string                "json:\"id\" graphql:\"id\""
	Name             string                "json:\"name\" graphql:\"name\""
	Operation        history.OpType        "json:\"operation\" graphql:\"operation\""
	OwnerID          *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	ProcedureType    *string               "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	Ref              *string               "json:\"ref,omitempty\" graphql:\"ref\""
	ReviewDue        *time.Time            "json:\"reviewDue,omitempty\" graphql:\"reviewDue\""
	ReviewFrequency  *enums.Frequency      "json:\"reviewFrequency,omitempty\" graphql:\"reviewFrequency\""
	Revision         *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status           *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetApprovalRequired() *bool {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ApprovalRequired
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetProcedureType() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ProcedureType
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetReviewDue() *time.Time {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ReviewDue
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetReviewFrequency() *enums.Frequency {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ReviewFrequency
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Revision
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetProcedureHistories_ProcedureHistories_Edges struct {
	Node *GetProcedureHistories_ProcedureHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetProcedureHistories_ProcedureHistories_Edges) GetNode() *GetProcedureHistories_ProcedureHistories_Edges_Node {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges{}
	}
	return t.Node
}

type GetProcedureHistories_ProcedureHistories struct {
	Edges []*GetProcedureHistories_ProcedureHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetProcedureHistories_ProcedureHistories) GetEdges() []*GetProcedureHistories_ProcedureHistories_Edges {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories{}
	}
	return t.Edges
}

type CreateBulkCSVProgram_CreateBulkCSVProgram_Programs struct {
	AuditorReadComments  bool                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	CreatedAt            *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string             "json:\"description,omitempty\" graphql:\"description\""
	DisplayID            string              "json:\"displayID\" graphql:\"displayID\""
	EndDate              *time.Time          "json:\"endDate,omitempty\" graphql:\"endDate\""
	ID                   string              "json:\"id\" graphql:\"id\""
	Name                 string              "json:\"name\" graphql:\"name\""
	OwnerID              *string             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	StartDate            *time.Time          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus "json:\"status\" graphql:\"status\""
	Tags                 []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetAuditorReadComments() bool {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.AuditorReadComments
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetAuditorReady() bool {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.AuditorReady
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetAuditorWriteComments() bool {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.AuditorWriteComments
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.Description
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.DisplayID
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetEndDate() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.EndDate
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetID() string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.ID
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetName() string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.Name
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetStartDate() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.StartDate
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return &t.Status
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.Tags
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVProgram_CreateBulkCSVProgram struct {
	Programs []*CreateBulkCSVProgram_CreateBulkCSVProgram_Programs "json:\"programs,omitempty\" graphql:\"programs\""
}

func (t *CreateBulkCSVProgram_CreateBulkCSVProgram) GetPrograms() []*CreateBulkCSVProgram_CreateBulkCSVProgram_Programs {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram{}
	}
	return t.Programs
}

type CreateBulkProgram_CreateBulkProgram_Programs struct {
	AuditorReadComments  bool                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	CreatedAt            *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string             "json:\"description,omitempty\" graphql:\"description\""
	DisplayID            string              "json:\"displayID\" graphql:\"displayID\""
	EndDate              *time.Time          "json:\"endDate,omitempty\" graphql:\"endDate\""
	ID                   string              "json:\"id\" graphql:\"id\""
	Name                 string              "json:\"name\" graphql:\"name\""
	OwnerID              *string             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	StartDate            *time.Time          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus "json:\"status\" graphql:\"status\""
	Tags                 []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetAuditorReadComments() bool {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.AuditorReadComments
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetAuditorReady() bool {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.AuditorReady
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetAuditorWriteComments() bool {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.AuditorWriteComments
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.CreatedAt
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.CreatedBy
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetDescription() *string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.Description
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.DisplayID
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetEndDate() *time.Time {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.EndDate
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetID() string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.ID
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetName() string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.Name
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.OwnerID
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetStartDate() *time.Time {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.StartDate
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return &t.Status
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetTags() []string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.Tags
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.UpdatedBy
}

type CreateBulkProgram_CreateBulkProgram struct {
	Programs []*CreateBulkProgram_CreateBulkProgram_Programs "json:\"programs,omitempty\" graphql:\"programs\""
}

func (t *CreateBulkProgram_CreateBulkProgram) GetPrograms() []*CreateBulkProgram_CreateBulkProgram_Programs {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram{}
	}
	return t.Programs
}

type CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control_Subcontrols_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control_Subcontrols_Edges struct {
	Node *CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control_Subcontrols_Edges) GetNode() *CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control_Subcontrols_Edges_Node {
	if t == nil {
		t = &CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control_Subcontrols_Edges{}
	}
	return t.Node
}

type CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control_Subcontrols struct {
	Edges []*CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control_Subcontrols) GetEdges() []*CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control_Subcontrols_Edges {
	if t == nil {
		t = &CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control_Subcontrols{}
	}
	return t.Edges
}

type CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control struct {
	ID          string                                                                        "json:\"id\" graphql:\"id\""
	RefCode     string                                                                        "json:\"refCode\" graphql:\"refCode\""
	Subcontrols CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
}

func (t *CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control) GetID() string {
	if t == nil {
		t = &CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control{}
	}
	return t.ID
}
func (t *CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control) GetRefCode() string {
	if t == nil {
		t = &CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control{}
	}
	return t.RefCode
}
func (t *CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control) GetSubcontrols() *CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control_Subcontrols {
	if t == nil {
		t = &CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control{}
	}
	return &t.Subcontrols
}

type CreateControlWithSubcontrols_CreateControlWithSubcontrols struct {
	Control CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control "json:\"control\" graphql:\"control\""
}

func (t *CreateControlWithSubcontrols_CreateControlWithSubcontrols) GetControl() *CreateControlWithSubcontrols_CreateControlWithSubcontrols_Control {
	if t == nil {
		t = &CreateControlWithSubcontrols_CreateControlWithSubcontrols{}
	}
	return &t.Control
}

type CreateFullProgram_CreateFullProgram_Program_Members_Edges_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateFullProgram_CreateFullProgram_Program_Members_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_Members_Edges_Node{}
	}
	return t.ID
}

type CreateFullProgram_CreateFullProgram_Program_Members_Edges struct {
	Node *CreateFullProgram_CreateFullProgram_Program_Members_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateFullProgram_CreateFullProgram_Program_Members_Edges) GetNode() *CreateFullProgram_CreateFullProgram_Program_Members_Edges_Node {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_Members_Edges{}
	}
	return t.Node
}

type CreateFullProgram_CreateFullProgram_Program_Members struct {
	Edges []*CreateFullProgram_CreateFullProgram_Program_Members_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateFullProgram_CreateFullProgram_Program_Members) GetEdges() []*CreateFullProgram_CreateFullProgram_Program_Members_Edges {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_Members{}
	}
	return t.Edges
}

type CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node_Subcontrols_Edges_Node struct {
	ID      string "json:\"id\" graphql:\"id\""
	RefCode string "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}

type CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node_Subcontrols_Edges struct {
	Node *CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node_Subcontrols_Edges) GetNode() *CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node_Subcontrols_Edges_Node {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node_Subcontrols_Edges{}
	}
	return t.Node
}

type CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node_Subcontrols struct {
	Edges []*CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node_Subcontrols) GetEdges() []*CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node_Subcontrols_Edges {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node_Subcontrols{}
	}
	return t.Edges
}

type CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node struct {
	ID          string                                                                      "json:\"id\" graphql:\"id\""
	RefCode     string                                                                      "json:\"refCode\" graphql:\"refCode\""
	Subcontrols CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
}

func (t *CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node{}
	}
	return t.RefCode
}
func (t *CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node) GetSubcontrols() *CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node_Subcontrols {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node{}
	}
	return &t.Subcontrols
}

type CreateFullProgram_CreateFullProgram_Program_Controls_Edges struct {
	Node *CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateFullProgram_CreateFullProgram_Program_Controls_Edges) GetNode() *CreateFullProgram_CreateFullProgram_Program_Controls_Edges_Node {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_Controls_Edges{}
	}
	return t.Node
}

type CreateFullProgram_CreateFullProgram_Program_Controls struct {
	Edges []*CreateFullProgram_CreateFullProgram_Program_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateFullProgram_CreateFullProgram_Program_Controls) GetEdges() []*CreateFullProgram_CreateFullProgram_Program_Controls_Edges {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_Controls{}
	}
	return t.Edges
}

type CreateFullProgram_CreateFullProgram_Program_Risks_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *CreateFullProgram_CreateFullProgram_Program_Risks_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_Risks_Edges_Node{}
	}
	return t.DisplayID
}
func (t *CreateFullProgram_CreateFullProgram_Program_Risks_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_Risks_Edges_Node{}
	}
	return t.ID
}
func (t *CreateFullProgram_CreateFullProgram_Program_Risks_Edges_Node) GetName() string {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_Risks_Edges_Node{}
	}
	return t.Name
}

type CreateFullProgram_CreateFullProgram_Program_Risks_Edges struct {
	Node *CreateFullProgram_CreateFullProgram_Program_Risks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateFullProgram_CreateFullProgram_Program_Risks_Edges) GetNode() *CreateFullProgram_CreateFullProgram_Program_Risks_Edges_Node {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_Risks_Edges{}
	}
	return t.Node
}

type CreateFullProgram_CreateFullProgram_Program_Risks struct {
	Edges []*CreateFullProgram_CreateFullProgram_Program_Risks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateFullProgram_CreateFullProgram_Program_Risks) GetEdges() []*CreateFullProgram_CreateFullProgram_Program_Risks_Edges {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_Risks{}
	}
	return t.Edges
}

type CreateFullProgram_CreateFullProgram_Program_InternalPolicies_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *CreateFullProgram_CreateFullProgram_Program_InternalPolicies_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.DisplayID
}
func (t *CreateFullProgram_CreateFullProgram_Program_InternalPolicies_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.ID
}
func (t *CreateFullProgram_CreateFullProgram_Program_InternalPolicies_Edges_Node) GetName() string {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.Name
}

type CreateFullProgram_CreateFullProgram_Program_InternalPolicies_Edges struct {
	Node *CreateFullProgram_CreateFullProgram_Program_InternalPolicies_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateFullProgram_CreateFullProgram_Program_InternalPolicies_Edges) GetNode() *CreateFullProgram_CreateFullProgram_Program_InternalPolicies_Edges_Node {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_InternalPolicies_Edges{}
	}
	return t.Node
}

type CreateFullProgram_CreateFullProgram_Program_InternalPolicies struct {
	Edges []*CreateFullProgram_CreateFullProgram_Program_InternalPolicies_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateFullProgram_CreateFullProgram_Program_InternalPolicies) GetEdges() []*CreateFullProgram_CreateFullProgram_Program_InternalPolicies_Edges {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_InternalPolicies{}
	}
	return t.Edges
}

type CreateFullProgram_CreateFullProgram_Program_Procedures_Edges_Node struct {
	DisplayID string "json:\"displayID\" graphql:\"displayID\""
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
}

func (t *CreateFullProgram_CreateFullProgram_Program_Procedures_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_Procedures_Edges_Node{}
	}
	return t.DisplayID
}
func (t *CreateFullProgram_CreateFullProgram_Program_Procedures_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_Procedures_Edges_Node{}
	}
	return t.ID
}
func (t *CreateFullProgram_CreateFullProgram_Program_Procedures_Edges_Node) GetName() string {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_Procedures_Edges_Node{}
	}
	return t.Name
}

type CreateFullProgram_CreateFullProgram_Program_Procedures_Edges struct {
	Node *CreateFullProgram_CreateFullProgram_Program_Procedures_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateFullProgram_CreateFullProgram_Program_Procedures_Edges) GetNode() *CreateFullProgram_CreateFullProgram_Program_Procedures_Edges_Node {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_Procedures_Edges{}
	}
	return t.Node
}

type CreateFullProgram_CreateFullProgram_Program_Procedures struct {
	Edges []*CreateFullProgram_CreateFullProgram_Program_Procedures_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateFullProgram_CreateFullProgram_Program_Procedures) GetEdges() []*CreateFullProgram_CreateFullProgram_Program_Procedures_Edges {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program_Procedures{}
	}
	return t.Edges
}

type CreateFullProgram_CreateFullProgram_Program struct {
	Controls         CreateFullProgram_CreateFullProgram_Program_Controls         "json:\"controls\" graphql:\"controls\""
	DisplayID        string                                                       "json:\"displayID\" graphql:\"displayID\""
	ID               string                                                       "json:\"id\" graphql:\"id\""
	InternalPolicies CreateFullProgram_CreateFullProgram_Program_InternalPolicies "json:\"internalPolicies\" graphql:\"internalPolicies\""
	Members          CreateFullProgram_CreateFullProgram_Program_Members          "json:\"members\" graphql:\"members\""
	Name             string                                                       "json:\"name\" graphql:\"name\""
	Procedures       CreateFullProgram_CreateFullProgram_Program_Procedures       "json:\"procedures\" graphql:\"procedures\""
	Risks            CreateFullProgram_CreateFullProgram_Program_Risks            "json:\"risks\" graphql:\"risks\""
}

func (t *CreateFullProgram_CreateFullProgram_Program) GetControls() *CreateFullProgram_CreateFullProgram_Program_Controls {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program{}
	}
	return &t.Controls
}
func (t *CreateFullProgram_CreateFullProgram_Program) GetDisplayID() string {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program{}
	}
	return t.DisplayID
}
func (t *CreateFullProgram_CreateFullProgram_Program) GetID() string {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program{}
	}
	return t.ID
}
func (t *CreateFullProgram_CreateFullProgram_Program) GetInternalPolicies() *CreateFullProgram_CreateFullProgram_Program_InternalPolicies {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program{}
	}
	return &t.InternalPolicies
}
func (t *CreateFullProgram_CreateFullProgram_Program) GetMembers() *CreateFullProgram_CreateFullProgram_Program_Members {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program{}
	}
	return &t.Members
}
func (t *CreateFullProgram_CreateFullProgram_Program) GetName() string {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program{}
	}
	return t.Name
}
func (t *CreateFullProgram_CreateFullProgram_Program) GetProcedures() *CreateFullProgram_CreateFullProgram_Program_Procedures {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program{}
	}
	return &t.Procedures
}
func (t *CreateFullProgram_CreateFullProgram_Program) GetRisks() *CreateFullProgram_CreateFullProgram_Program_Risks {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram_Program{}
	}
	return &t.Risks
}

type CreateFullProgram_CreateFullProgram struct {
	Program CreateFullProgram_CreateFullProgram_Program "json:\"program\" graphql:\"program\""
}

func (t *CreateFullProgram_CreateFullProgram) GetProgram() *CreateFullProgram_CreateFullProgram_Program {
	if t == nil {
		t = &CreateFullProgram_CreateFullProgram{}
	}
	return &t.Program
}

type CreateProgram_CreateProgram_Program_Procedures_Edges_Node struct {
	CreatedAt     *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details       *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                "json:\"displayID\" graphql:\"displayID\""
	ID            string                "json:\"id\" graphql:\"id\""
	Name          string                "json:\"name\" graphql:\"name\""
	ProcedureType *string               "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	Revision      *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status        *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateProgram_CreateProgram_Program_Procedures_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_Procedures_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *CreateProgram_CreateProgram_Program_Procedures_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_Procedures_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *CreateProgram_CreateProgram_Program_Procedures_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_Procedures_Edges_Node{}
	}
	return t.Details
}
func (t *CreateProgram_CreateProgram_Program_Procedures_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_Procedures_Edges_Node{}
	}
	return t.DisplayID
}
func (t *CreateProgram_CreateProgram_Program_Procedures_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_Procedures_Edges_Node{}
	}
	return t.ID
}
func (t *CreateProgram_CreateProgram_Program_Procedures_Edges_Node) GetName() string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_Procedures_Edges_Node{}
	}
	return t.Name
}
func (t *CreateProgram_CreateProgram_Program_Procedures_Edges_Node) GetProcedureType() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_Procedures_Edges_Node{}
	}
	return t.ProcedureType
}
func (t *CreateProgram_CreateProgram_Program_Procedures_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_Procedures_Edges_Node{}
	}
	return t.Revision
}
func (t *CreateProgram_CreateProgram_Program_Procedures_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_Procedures_Edges_Node{}
	}
	return t.Status
}
func (t *CreateProgram_CreateProgram_Program_Procedures_Edges_Node) GetTags() []string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_Procedures_Edges_Node{}
	}
	return t.Tags
}
func (t *CreateProgram_CreateProgram_Program_Procedures_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_Procedures_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *CreateProgram_CreateProgram_Program_Procedures_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_Procedures_Edges_Node{}
	}
	return t.UpdatedBy
}

type CreateProgram_CreateProgram_Program_Procedures_Edges struct {
	Node *CreateProgram_CreateProgram_Program_Procedures_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateProgram_CreateProgram_Program_Procedures_Edges) GetNode() *CreateProgram_CreateProgram_Program_Procedures_Edges_Node {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_Procedures_Edges{}
	}
	return t.Node
}

type CreateProgram_CreateProgram_Program_Procedures struct {
	Edges []*CreateProgram_CreateProgram_Program_Procedures_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateProgram_CreateProgram_Program_Procedures) GetEdges() []*CreateProgram_CreateProgram_Program_Procedures_Edges {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_Procedures{}
	}
	return t.Edges
}

type CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node struct {
	CreatedAt  *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details    *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID  string                "json:\"displayID\" graphql:\"displayID\""
	ID         string                "json:\"id\" graphql:\"id\""
	Name       string                "json:\"name\" graphql:\"name\""
	PolicyType *string               "json:\"policyType,omitempty\" graphql:\"policyType\""
	Revision   *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status     *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags       []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt  *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.Details
}
func (t *CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.DisplayID
}
func (t *CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.ID
}
func (t *CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node) GetName() string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.Name
}
func (t *CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node) GetPolicyType() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.PolicyType
}
func (t *CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.Revision
}
func (t *CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.Status
}
func (t *CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node) GetTags() []string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.Tags
}
func (t *CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.UpdatedBy
}

type CreateProgram_CreateProgram_Program_InternalPolicies_Edges struct {
	Node *CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateProgram_CreateProgram_Program_InternalPolicies_Edges) GetNode() *CreateProgram_CreateProgram_Program_InternalPolicies_Edges_Node {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_InternalPolicies_Edges{}
	}
	return t.Node
}

type CreateProgram_CreateProgram_Program_InternalPolicies struct {
	Edges []*CreateProgram_CreateProgram_Program_InternalPolicies_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateProgram_CreateProgram_Program_InternalPolicies) GetEdges() []*CreateProgram_CreateProgram_Program_InternalPolicies_Edges {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_InternalPolicies{}
	}
	return t.Edges
}

type CreateProgram_CreateProgram_Program_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateProgram_CreateProgram_Program_Editors) GetID() string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_Editors{}
	}
	return t.ID
}
func (t *CreateProgram_CreateProgram_Program_Editors) GetName() string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_Editors{}
	}
	return t.Name
}

type CreateProgram_CreateProgram_Program_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateProgram_CreateProgram_Program_Viewers) GetID() string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_Viewers{}
	}
	return t.ID
}
func (t *CreateProgram_CreateProgram_Program_Viewers) GetName() string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_Viewers{}
	}
	return t.Name
}

type CreateProgram_CreateProgram_Program_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateProgram_CreateProgram_Program_BlockedGroups) GetID() string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_BlockedGroups{}
	}
	return t.ID
}
func (t *CreateProgram_CreateProgram_Program_BlockedGroups) GetName() string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program_BlockedGroups{}
	}
	return t.Name
}

type CreateProgram_CreateProgram_Program struct {
	AuditorReadComments  bool                                                 "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                                                 "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                                                 "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	BlockedGroups        []*CreateProgram_CreateProgram_Program_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	CreatedAt            *time.Time                                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                                              "json:\"description,omitempty\" graphql:\"description\""
	DisplayID            string                                               "json:\"displayID\" graphql:\"displayID\""
	Editors              []*CreateProgram_CreateProgram_Program_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	EndDate              *time.Time                                           "json:\"endDate,omitempty\" graphql:\"endDate\""
	ID                   string                                               "json:\"id\" graphql:\"id\""
	InternalPolicies     CreateProgram_CreateProgram_Program_InternalPolicies "json:\"internalPolicies\" graphql:\"internalPolicies\""
	Name                 string                                               "json:\"name\" graphql:\"name\""
	OwnerID              *string                                              "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Procedures           CreateProgram_CreateProgram_Program_Procedures       "json:\"procedures\" graphql:\"procedures\""
	StartDate            *time.Time                                           "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus                                  "json:\"status\" graphql:\"status\""
	Tags                 []string                                             "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers              []*CreateProgram_CreateProgram_Program_Viewers       "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *CreateProgram_CreateProgram_Program) GetAuditorReadComments() bool {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.AuditorReadComments
}
func (t *CreateProgram_CreateProgram_Program) GetAuditorReady() bool {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.AuditorReady
}
func (t *CreateProgram_CreateProgram_Program) GetAuditorWriteComments() bool {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.AuditorWriteComments
}
func (t *CreateProgram_CreateProgram_Program) GetBlockedGroups() []*CreateProgram_CreateProgram_Program_BlockedGroups {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.BlockedGroups
}
func (t *CreateProgram_CreateProgram_Program) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.CreatedAt
}
func (t *CreateProgram_CreateProgram_Program) GetCreatedBy() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.CreatedBy
}
func (t *CreateProgram_CreateProgram_Program) GetDescription() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.Description
}
func (t *CreateProgram_CreateProgram_Program) GetDisplayID() string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.DisplayID
}
func (t *CreateProgram_CreateProgram_Program) GetEditors() []*CreateProgram_CreateProgram_Program_Editors {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.Editors
}
func (t *CreateProgram_CreateProgram_Program) GetEndDate() *time.Time {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.EndDate
}
func (t *CreateProgram_CreateProgram_Program) GetID() string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.ID
}
func (t *CreateProgram_CreateProgram_Program) GetInternalPolicies() *CreateProgram_CreateProgram_Program_InternalPolicies {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return &t.InternalPolicies
}
func (t *CreateProgram_CreateProgram_Program) GetName() string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.Name
}
func (t *CreateProgram_CreateProgram_Program) GetOwnerID() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.OwnerID
}
func (t *CreateProgram_CreateProgram_Program) GetProcedures() *CreateProgram_CreateProgram_Program_Procedures {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return &t.Procedures
}
func (t *CreateProgram_CreateProgram_Program) GetStartDate() *time.Time {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.StartDate
}
func (t *CreateProgram_CreateProgram_Program) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return &t.Status
}
func (t *CreateProgram_CreateProgram_Program) GetTags() []string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.Tags
}
func (t *CreateProgram_CreateProgram_Program) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.UpdatedAt
}
func (t *CreateProgram_CreateProgram_Program) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.UpdatedBy
}
func (t *CreateProgram_CreateProgram_Program) GetViewers() []*CreateProgram_CreateProgram_Program_Viewers {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.Viewers
}

type CreateProgram_CreateProgram struct {
	Program CreateProgram_CreateProgram_Program "json:\"program\" graphql:\"program\""
}

func (t *CreateProgram_CreateProgram) GetProgram() *CreateProgram_CreateProgram_Program {
	if t == nil {
		t = &CreateProgram_CreateProgram{}
	}
	return &t.Program
}

type CreateProgramWithMembers_CreateProgramWithMembers_Program_Members_Edges_Node_User struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateProgramWithMembers_CreateProgramWithMembers_Program_Members_Edges_Node_User) GetFirstName() *string {
	if t == nil {
		t = &CreateProgramWithMembers_CreateProgramWithMembers_Program_Members_Edges_Node_User{}
	}
	return t.FirstName
}
func (t *CreateProgramWithMembers_CreateProgramWithMembers_Program_Members_Edges_Node_User) GetID() string {
	if t == nil {
		t = &CreateProgramWithMembers_CreateProgramWithMembers_Program_Members_Edges_Node_User{}
	}
	return t.ID
}
func (t *CreateProgramWithMembers_CreateProgramWithMembers_Program_Members_Edges_Node_User) GetLastName() *string {
	if t == nil {
		t = &CreateProgramWithMembers_CreateProgramWithMembers_Program_Members_Edges_Node_User{}
	}
	return t.LastName
}

type CreateProgramWithMembers_CreateProgramWithMembers_Program_Members_Edges_Node struct {
	ID   string                                                                            "json:\"id\" graphql:\"id\""
	User CreateProgramWithMembers_CreateProgramWithMembers_Program_Members_Edges_Node_User "json:\"user\" graphql:\"user\""
}

func (t *CreateProgramWithMembers_CreateProgramWithMembers_Program_Members_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateProgramWithMembers_CreateProgramWithMembers_Program_Members_Edges_Node{}
	}
	return t.ID
}
func (t *CreateProgramWithMembers_CreateProgramWithMembers_Program_Members_Edges_Node) GetUser() *CreateProgramWithMembers_CreateProgramWithMembers_Program_Members_Edges_Node_User {
	if t == nil {
		t = &CreateProgramWithMembers_CreateProgramWithMembers_Program_Members_Edges_Node{}
	}
	return &t.User
}

type CreateProgramWithMembers_CreateProgramWithMembers_Program_Members_Edges struct {
	Node *CreateProgramWithMembers_CreateProgramWithMembers_Program_Members_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateProgramWithMembers_CreateProgramWithMembers_Program_Members_Edges) GetNode() *CreateProgramWithMembers_CreateProgramWithMembers_Program_Members_Edges_Node {
	if t == nil {
		t = &CreateProgramWithMembers_CreateProgramWithMembers_Program_Members_Edges{}
	}
	return t.Node
}

type CreateProgramWithMembers_CreateProgramWithMembers_Program_Members struct {
	Edges []*CreateProgramWithMembers_CreateProgramWithMembers_Program_Members_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateProgramWithMembers_CreateProgramWithMembers_Program_Members) GetEdges() []*CreateProgramWithMembers_CreateProgramWithMembers_Program_Members_Edges {
	if t == nil {
		t = &CreateProgramWithMembers_CreateProgramWithMembers_Program_Members{}
	}
	return t.Edges
}

type CreateProgramWithMembers_CreateProgramWithMembers_Program struct {
	DisplayID string                                                            "json:\"displayID\" graphql:\"displayID\""
	ID        string                                                            "json:\"id\" graphql:\"id\""
	Members   CreateProgramWithMembers_CreateProgramWithMembers_Program_Members "json:\"members\" graphql:\"members\""
	Name      string                                                            "json:\"name\" graphql:\"name\""
}

func (t *CreateProgramWithMembers_CreateProgramWithMembers_Program) GetDisplayID() string {
	if t == nil {
		t = &CreateProgramWithMembers_CreateProgramWithMembers_Program{}
	}
	return t.DisplayID
}
func (t *CreateProgramWithMembers_CreateProgramWithMembers_Program) GetID() string {
	if t == nil {
		t = &CreateProgramWithMembers_CreateProgramWithMembers_Program{}
	}
	return t.ID
}
func (t *CreateProgramWithMembers_CreateProgramWithMembers_Program) GetMembers() *CreateProgramWithMembers_CreateProgramWithMembers_Program_Members {
	if t == nil {
		t = &CreateProgramWithMembers_CreateProgramWithMembers_Program{}
	}
	return &t.Members
}
func (t *CreateProgramWithMembers_CreateProgramWithMembers_Program) GetName() string {
	if t == nil {
		t = &CreateProgramWithMembers_CreateProgramWithMembers_Program{}
	}
	return t.Name
}

type CreateProgramWithMembers_CreateProgramWithMembers struct {
	Program CreateProgramWithMembers_CreateProgramWithMembers_Program "json:\"program\" graphql:\"program\""
}

func (t *CreateProgramWithMembers_CreateProgramWithMembers) GetProgram() *CreateProgramWithMembers_CreateProgramWithMembers_Program {
	if t == nil {
		t = &CreateProgramWithMembers_CreateProgramWithMembers{}
	}
	return &t.Program
}

type DeleteProgram_DeleteProgram struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteProgram_DeleteProgram) GetDeletedID() string {
	if t == nil {
		t = &DeleteProgram_DeleteProgram{}
	}
	return t.DeletedID
}

type GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node struct {
	CreatedAt     *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details       *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                "json:\"displayID\" graphql:\"displayID\""
	ID            string                "json:\"id\" graphql:\"id\""
	Name          string                "json:\"name\" graphql:\"name\""
	ProcedureType *string               "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	Revision      *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status        *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetProcedureType() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.ProcedureType
}
func (t *GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.Revision
}
func (t *GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllPrograms_Programs_Edges_Node_Procedures_Edges struct {
	Node *GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllPrograms_Programs_Edges_Node_Procedures_Edges) GetNode() *GetAllPrograms_Programs_Edges_Node_Procedures_Edges_Node {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Procedures_Edges{}
	}
	return t.Node
}

type GetAllPrograms_Programs_Edges_Node_Procedures struct {
	Edges []*GetAllPrograms_Programs_Edges_Node_Procedures_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllPrograms_Programs_Edges_Node_Procedures) GetEdges() []*GetAllPrograms_Programs_Edges_Node_Procedures_Edges {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Procedures{}
	}
	return t.Edges
}

type GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node struct {
	CreatedAt  *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details    *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID  string                "json:\"displayID\" graphql:\"displayID\""
	ID         string                "json:\"id\" graphql:\"id\""
	Name       string                "json:\"name\" graphql:\"name\""
	PolicyType *string               "json:\"policyType,omitempty\" graphql:\"policyType\""
	Revision   *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status     *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags       []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt  *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetPolicyType() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.PolicyType
}
func (t *GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.Revision
}
func (t *GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges struct {
	Node *GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges) GetNode() *GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges{}
	}
	return t.Node
}

type GetAllPrograms_Programs_Edges_Node_InternalPolicies struct {
	Edges []*GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllPrograms_Programs_Edges_Node_InternalPolicies) GetEdges() []*GetAllPrograms_Programs_Edges_Node_InternalPolicies_Edges {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_InternalPolicies{}
	}
	return t.Edges
}

type GetAllPrograms_Programs_Edges_Node_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllPrograms_Programs_Edges_Node_Editors) GetID() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Editors{}
	}
	return t.ID
}
func (t *GetAllPrograms_Programs_Edges_Node_Editors) GetName() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Editors{}
	}
	return t.Name
}

type GetAllPrograms_Programs_Edges_Node_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllPrograms_Programs_Edges_Node_Viewers) GetID() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Viewers{}
	}
	return t.ID
}
func (t *GetAllPrograms_Programs_Edges_Node_Viewers) GetName() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Viewers{}
	}
	return t.Name
}

type GetAllPrograms_Programs_Edges_Node_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllPrograms_Programs_Edges_Node_BlockedGroups) GetID() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_BlockedGroups{}
	}
	return t.ID
}
func (t *GetAllPrograms_Programs_Edges_Node_BlockedGroups) GetName() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_BlockedGroups{}
	}
	return t.Name
}

type GetAllPrograms_Programs_Edges_Node_Members_Edges_Node_User struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetAllPrograms_Programs_Edges_Node_Members_Edges_Node_User) GetFirstName() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Members_Edges_Node_User{}
	}
	return t.FirstName
}
func (t *GetAllPrograms_Programs_Edges_Node_Members_Edges_Node_User) GetID() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Members_Edges_Node_User{}
	}
	return t.ID
}
func (t *GetAllPrograms_Programs_Edges_Node_Members_Edges_Node_User) GetLastName() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Members_Edges_Node_User{}
	}
	return t.LastName
}

type GetAllPrograms_Programs_Edges_Node_Members_Edges_Node struct {
	ID   string                                                     "json:\"id\" graphql:\"id\""
	User GetAllPrograms_Programs_Edges_Node_Members_Edges_Node_User "json:\"user\" graphql:\"user\""
}

func (t *GetAllPrograms_Programs_Edges_Node_Members_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Members_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllPrograms_Programs_Edges_Node_Members_Edges_Node) GetUser() *GetAllPrograms_Programs_Edges_Node_Members_Edges_Node_User {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Members_Edges_Node{}
	}
	return &t.User
}

type GetAllPrograms_Programs_Edges_Node_Members_Edges struct {
	Node *GetAllPrograms_Programs_Edges_Node_Members_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllPrograms_Programs_Edges_Node_Members_Edges) GetNode() *GetAllPrograms_Programs_Edges_Node_Members_Edges_Node {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Members_Edges{}
	}
	return t.Node
}

type GetAllPrograms_Programs_Edges_Node_Members struct {
	Edges []*GetAllPrograms_Programs_Edges_Node_Members_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllPrograms_Programs_Edges_Node_Members) GetEdges() []*GetAllPrograms_Programs_Edges_Node_Members_Edges {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node_Members{}
	}
	return t.Edges
}

type GetAllPrograms_Programs_Edges_Node struct {
	AuditorReadComments  bool                                                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                                                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                                                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	BlockedGroups        []*GetAllPrograms_Programs_Edges_Node_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	CreatedAt            *time.Time                                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                                             "json:\"description,omitempty\" graphql:\"description\""
	DisplayID            string                                              "json:\"displayID\" graphql:\"displayID\""
	Editors              []*GetAllPrograms_Programs_Edges_Node_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	EndDate              *time.Time                                          "json:\"endDate,omitempty\" graphql:\"endDate\""
	ID                   string                                              "json:\"id\" graphql:\"id\""
	InternalPolicies     GetAllPrograms_Programs_Edges_Node_InternalPolicies "json:\"internalPolicies\" graphql:\"internalPolicies\""
	Members              GetAllPrograms_Programs_Edges_Node_Members          "json:\"members\" graphql:\"members\""
	Name                 string                                              "json:\"name\" graphql:\"name\""
	OwnerID              *string                                             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Procedures           GetAllPrograms_Programs_Edges_Node_Procedures       "json:\"procedures\" graphql:\"procedures\""
	StartDate            *time.Time                                          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus                                 "json:\"status\" graphql:\"status\""
	Tags                 []string                                            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers              []*GetAllPrograms_Programs_Edges_Node_Viewers       "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *GetAllPrograms_Programs_Edges_Node) GetAuditorReadComments() bool {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.AuditorReadComments
}
func (t *GetAllPrograms_Programs_Edges_Node) GetAuditorReady() bool {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.AuditorReady
}
func (t *GetAllPrograms_Programs_Edges_Node) GetAuditorWriteComments() bool {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.AuditorWriteComments
}
func (t *GetAllPrograms_Programs_Edges_Node) GetBlockedGroups() []*GetAllPrograms_Programs_Edges_Node_BlockedGroups {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.BlockedGroups
}
func (t *GetAllPrograms_Programs_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllPrograms_Programs_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllPrograms_Programs_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllPrograms_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllPrograms_Programs_Edges_Node) GetEditors() []*GetAllPrograms_Programs_Edges_Node_Editors {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.Editors
}
func (t *GetAllPrograms_Programs_Edges_Node) GetEndDate() *time.Time {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.EndDate
}
func (t *GetAllPrograms_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllPrograms_Programs_Edges_Node) GetInternalPolicies() *GetAllPrograms_Programs_Edges_Node_InternalPolicies {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return &t.InternalPolicies
}
func (t *GetAllPrograms_Programs_Edges_Node) GetMembers() *GetAllPrograms_Programs_Edges_Node_Members {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return &t.Members
}
func (t *GetAllPrograms_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllPrograms_Programs_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllPrograms_Programs_Edges_Node) GetProcedures() *GetAllPrograms_Programs_Edges_Node_Procedures {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return &t.Procedures
}
func (t *GetAllPrograms_Programs_Edges_Node) GetStartDate() *time.Time {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.StartDate
}
func (t *GetAllPrograms_Programs_Edges_Node) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllPrograms_Programs_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllPrograms_Programs_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllPrograms_Programs_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllPrograms_Programs_Edges_Node) GetViewers() []*GetAllPrograms_Programs_Edges_Node_Viewers {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.Viewers
}

type GetAllPrograms_Programs_Edges struct {
	Node *GetAllPrograms_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllPrograms_Programs_Edges) GetNode() *GetAllPrograms_Programs_Edges_Node {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges{}
	}
	return t.Node
}

type GetAllPrograms_Programs struct {
	Edges []*GetAllPrograms_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllPrograms_Programs) GetEdges() []*GetAllPrograms_Programs_Edges {
	if t == nil {
		t = &GetAllPrograms_Programs{}
	}
	return t.Edges
}

type GetProgramByID_Program_Procedures_Edges_Node struct {
	CreatedAt     *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details       *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                "json:\"displayID\" graphql:\"displayID\""
	ID            string                "json:\"id\" graphql:\"id\""
	Name          string                "json:\"name\" graphql:\"name\""
	ProcedureType *string               "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	Revision      *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status        *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetProgramByID_Program_Procedures_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProgramByID_Program_Procedures_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetProgramByID_Program_Procedures_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetProgramByID_Program_Procedures_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetProgramByID_Program_Procedures_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetProgramByID_Program_Procedures_Edges_Node{}
	}
	return t.Details
}
func (t *GetProgramByID_Program_Procedures_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetProgramByID_Program_Procedures_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetProgramByID_Program_Procedures_Edges_Node) GetID() string {
	if t == nil {
		t = &GetProgramByID_Program_Procedures_Edges_Node{}
	}
	return t.ID
}
func (t *GetProgramByID_Program_Procedures_Edges_Node) GetName() string {
	if t == nil {
		t = &GetProgramByID_Program_Procedures_Edges_Node{}
	}
	return t.Name
}
func (t *GetProgramByID_Program_Procedures_Edges_Node) GetProcedureType() *string {
	if t == nil {
		t = &GetProgramByID_Program_Procedures_Edges_Node{}
	}
	return t.ProcedureType
}
func (t *GetProgramByID_Program_Procedures_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetProgramByID_Program_Procedures_Edges_Node{}
	}
	return t.Revision
}
func (t *GetProgramByID_Program_Procedures_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetProgramByID_Program_Procedures_Edges_Node{}
	}
	return t.Status
}
func (t *GetProgramByID_Program_Procedures_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetProgramByID_Program_Procedures_Edges_Node{}
	}
	return t.Tags
}
func (t *GetProgramByID_Program_Procedures_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProgramByID_Program_Procedures_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetProgramByID_Program_Procedures_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProgramByID_Program_Procedures_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetProgramByID_Program_Procedures_Edges struct {
	Node *GetProgramByID_Program_Procedures_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetProgramByID_Program_Procedures_Edges) GetNode() *GetProgramByID_Program_Procedures_Edges_Node {
	if t == nil {
		t = &GetProgramByID_Program_Procedures_Edges{}
	}
	return t.Node
}

type GetProgramByID_Program_Procedures struct {
	Edges []*GetProgramByID_Program_Procedures_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetProgramByID_Program_Procedures) GetEdges() []*GetProgramByID_Program_Procedures_Edges {
	if t == nil {
		t = &GetProgramByID_Program_Procedures{}
	}
	return t.Edges
}

type GetProgramByID_Program_InternalPolicies_Edges_Node struct {
	CreatedAt  *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details    *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID  string                "json:\"displayID\" graphql:\"displayID\""
	ID         string                "json:\"id\" graphql:\"id\""
	Name       string                "json:\"name\" graphql:\"name\""
	PolicyType *string               "json:\"policyType,omitempty\" graphql:\"policyType\""
	Revision   *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status     *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags       []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt  *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetProgramByID_Program_InternalPolicies_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProgramByID_Program_InternalPolicies_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetProgramByID_Program_InternalPolicies_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetProgramByID_Program_InternalPolicies_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetProgramByID_Program_InternalPolicies_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetProgramByID_Program_InternalPolicies_Edges_Node{}
	}
	return t.Details
}
func (t *GetProgramByID_Program_InternalPolicies_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetProgramByID_Program_InternalPolicies_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetProgramByID_Program_InternalPolicies_Edges_Node) GetID() string {
	if t == nil {
		t = &GetProgramByID_Program_InternalPolicies_Edges_Node{}
	}
	return t.ID
}
func (t *GetProgramByID_Program_InternalPolicies_Edges_Node) GetName() string {
	if t == nil {
		t = &GetProgramByID_Program_InternalPolicies_Edges_Node{}
	}
	return t.Name
}
func (t *GetProgramByID_Program_InternalPolicies_Edges_Node) GetPolicyType() *string {
	if t == nil {
		t = &GetProgramByID_Program_InternalPolicies_Edges_Node{}
	}
	return t.PolicyType
}
func (t *GetProgramByID_Program_InternalPolicies_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetProgramByID_Program_InternalPolicies_Edges_Node{}
	}
	return t.Revision
}
func (t *GetProgramByID_Program_InternalPolicies_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetProgramByID_Program_InternalPolicies_Edges_Node{}
	}
	return t.Status
}
func (t *GetProgramByID_Program_InternalPolicies_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetProgramByID_Program_InternalPolicies_Edges_Node{}
	}
	return t.Tags
}
func (t *GetProgramByID_Program_InternalPolicies_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProgramByID_Program_InternalPolicies_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetProgramByID_Program_InternalPolicies_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProgramByID_Program_InternalPolicies_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetProgramByID_Program_InternalPolicies_Edges struct {
	Node *GetProgramByID_Program_InternalPolicies_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetProgramByID_Program_InternalPolicies_Edges) GetNode() *GetProgramByID_Program_InternalPolicies_Edges_Node {
	if t == nil {
		t = &GetProgramByID_Program_InternalPolicies_Edges{}
	}
	return t.Node
}

type GetProgramByID_Program_InternalPolicies struct {
	Edges []*GetProgramByID_Program_InternalPolicies_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetProgramByID_Program_InternalPolicies) GetEdges() []*GetProgramByID_Program_InternalPolicies_Edges {
	if t == nil {
		t = &GetProgramByID_Program_InternalPolicies{}
	}
	return t.Edges
}

type GetProgramByID_Program_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetProgramByID_Program_Editors) GetID() string {
	if t == nil {
		t = &GetProgramByID_Program_Editors{}
	}
	return t.ID
}
func (t *GetProgramByID_Program_Editors) GetName() string {
	if t == nil {
		t = &GetProgramByID_Program_Editors{}
	}
	return t.Name
}

type GetProgramByID_Program_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetProgramByID_Program_Viewers) GetID() string {
	if t == nil {
		t = &GetProgramByID_Program_Viewers{}
	}
	return t.ID
}
func (t *GetProgramByID_Program_Viewers) GetName() string {
	if t == nil {
		t = &GetProgramByID_Program_Viewers{}
	}
	return t.Name
}

type GetProgramByID_Program_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetProgramByID_Program_BlockedGroups) GetID() string {
	if t == nil {
		t = &GetProgramByID_Program_BlockedGroups{}
	}
	return t.ID
}
func (t *GetProgramByID_Program_BlockedGroups) GetName() string {
	if t == nil {
		t = &GetProgramByID_Program_BlockedGroups{}
	}
	return t.Name
}

type GetProgramByID_Program_Members_Edges_Node_User struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetProgramByID_Program_Members_Edges_Node_User) GetFirstName() *string {
	if t == nil {
		t = &GetProgramByID_Program_Members_Edges_Node_User{}
	}
	return t.FirstName
}
func (t *GetProgramByID_Program_Members_Edges_Node_User) GetID() string {
	if t == nil {
		t = &GetProgramByID_Program_Members_Edges_Node_User{}
	}
	return t.ID
}
func (t *GetProgramByID_Program_Members_Edges_Node_User) GetLastName() *string {
	if t == nil {
		t = &GetProgramByID_Program_Members_Edges_Node_User{}
	}
	return t.LastName
}

type GetProgramByID_Program_Members_Edges_Node struct {
	ID   string                                         "json:\"id\" graphql:\"id\""
	User GetProgramByID_Program_Members_Edges_Node_User "json:\"user\" graphql:\"user\""
}

func (t *GetProgramByID_Program_Members_Edges_Node) GetID() string {
	if t == nil {
		t = &GetProgramByID_Program_Members_Edges_Node{}
	}
	return t.ID
}
func (t *GetProgramByID_Program_Members_Edges_Node) GetUser() *GetProgramByID_Program_Members_Edges_Node_User {
	if t == nil {
		t = &GetProgramByID_Program_Members_Edges_Node{}
	}
	return &t.User
}

type GetProgramByID_Program_Members_Edges struct {
	Node *GetProgramByID_Program_Members_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetProgramByID_Program_Members_Edges) GetNode() *GetProgramByID_Program_Members_Edges_Node {
	if t == nil {
		t = &GetProgramByID_Program_Members_Edges{}
	}
	return t.Node
}

type GetProgramByID_Program_Members struct {
	Edges []*GetProgramByID_Program_Members_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetProgramByID_Program_Members) GetEdges() []*GetProgramByID_Program_Members_Edges {
	if t == nil {
		t = &GetProgramByID_Program_Members{}
	}
	return t.Edges
}

type GetProgramByID_Program struct {
	AuditorReadComments  bool                                    "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                                    "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                                    "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	BlockedGroups        []*GetProgramByID_Program_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	CreatedAt            *time.Time                              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                                 "json:\"description,omitempty\" graphql:\"description\""
	DisplayID            string                                  "json:\"displayID\" graphql:\"displayID\""
	Editors              []*GetProgramByID_Program_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	EndDate              *time.Time                              "json:\"endDate,omitempty\" graphql:\"endDate\""
	ID                   string                                  "json:\"id\" graphql:\"id\""
	InternalPolicies     GetProgramByID_Program_InternalPolicies "json:\"internalPolicies\" graphql:\"internalPolicies\""
	Members              GetProgramByID_Program_Members          "json:\"members\" graphql:\"members\""
	Name                 string                                  "json:\"name\" graphql:\"name\""
	OwnerID              *string                                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Procedures           GetProgramByID_Program_Procedures       "json:\"procedures\" graphql:\"procedures\""
	StartDate            *time.Time                              "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus                     "json:\"status\" graphql:\"status\""
	Tags                 []string                                "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers              []*GetProgramByID_Program_Viewers       "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *GetProgramByID_Program) GetAuditorReadComments() bool {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.AuditorReadComments
}
func (t *GetProgramByID_Program) GetAuditorReady() bool {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.AuditorReady
}
func (t *GetProgramByID_Program) GetAuditorWriteComments() bool {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.AuditorWriteComments
}
func (t *GetProgramByID_Program) GetBlockedGroups() []*GetProgramByID_Program_BlockedGroups {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.BlockedGroups
}
func (t *GetProgramByID_Program) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.CreatedAt
}
func (t *GetProgramByID_Program) GetCreatedBy() *string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.CreatedBy
}
func (t *GetProgramByID_Program) GetDescription() *string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.Description
}
func (t *GetProgramByID_Program) GetDisplayID() string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.DisplayID
}
func (t *GetProgramByID_Program) GetEditors() []*GetProgramByID_Program_Editors {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.Editors
}
func (t *GetProgramByID_Program) GetEndDate() *time.Time {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.EndDate
}
func (t *GetProgramByID_Program) GetID() string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.ID
}
func (t *GetProgramByID_Program) GetInternalPolicies() *GetProgramByID_Program_InternalPolicies {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return &t.InternalPolicies
}
func (t *GetProgramByID_Program) GetMembers() *GetProgramByID_Program_Members {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return &t.Members
}
func (t *GetProgramByID_Program) GetName() string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.Name
}
func (t *GetProgramByID_Program) GetOwnerID() *string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.OwnerID
}
func (t *GetProgramByID_Program) GetProcedures() *GetProgramByID_Program_Procedures {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return &t.Procedures
}
func (t *GetProgramByID_Program) GetStartDate() *time.Time {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.StartDate
}
func (t *GetProgramByID_Program) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return &t.Status
}
func (t *GetProgramByID_Program) GetTags() []string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.Tags
}
func (t *GetProgramByID_Program) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.UpdatedAt
}
func (t *GetProgramByID_Program) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.UpdatedBy
}
func (t *GetProgramByID_Program) GetViewers() []*GetProgramByID_Program_Viewers {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.Viewers
}

type GetPrograms_Programs_Edges_Node_Procedures_Edges_Node struct {
	CreatedAt     *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details       *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                "json:\"displayID\" graphql:\"displayID\""
	ID            string                "json:\"id\" graphql:\"id\""
	Name          string                "json:\"name\" graphql:\"name\""
	ProcedureType *string               "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	Revision      *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status        *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.Details
}
func (t *GetPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetID() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.ID
}
func (t *GetPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetName() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.Name
}
func (t *GetPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetProcedureType() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.ProcedureType
}
func (t *GetPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.Revision
}
func (t *GetPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.Status
}
func (t *GetPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.Tags
}
func (t *GetPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetPrograms_Programs_Edges_Node_Procedures_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Procedures_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetPrograms_Programs_Edges_Node_Procedures_Edges struct {
	Node *GetPrograms_Programs_Edges_Node_Procedures_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetPrograms_Programs_Edges_Node_Procedures_Edges) GetNode() *GetPrograms_Programs_Edges_Node_Procedures_Edges_Node {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Procedures_Edges{}
	}
	return t.Node
}

type GetPrograms_Programs_Edges_Node_Procedures struct {
	Edges []*GetPrograms_Programs_Edges_Node_Procedures_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetPrograms_Programs_Edges_Node_Procedures) GetEdges() []*GetPrograms_Programs_Edges_Node_Procedures_Edges {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Procedures{}
	}
	return t.Edges
}

type GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node struct {
	CreatedAt  *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details    *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID  string                "json:\"displayID\" graphql:\"displayID\""
	ID         string                "json:\"id\" graphql:\"id\""
	Name       string                "json:\"name\" graphql:\"name\""
	PolicyType *string               "json:\"policyType,omitempty\" graphql:\"policyType\""
	Revision   *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status     *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags       []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt  *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.Details
}
func (t *GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetID() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.ID
}
func (t *GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetName() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.Name
}
func (t *GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetPolicyType() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.PolicyType
}
func (t *GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.Revision
}
func (t *GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.Status
}
func (t *GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.Tags
}
func (t *GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetPrograms_Programs_Edges_Node_InternalPolicies_Edges struct {
	Node *GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetPrograms_Programs_Edges_Node_InternalPolicies_Edges) GetNode() *GetPrograms_Programs_Edges_Node_InternalPolicies_Edges_Node {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_InternalPolicies_Edges{}
	}
	return t.Node
}

type GetPrograms_Programs_Edges_Node_InternalPolicies struct {
	Edges []*GetPrograms_Programs_Edges_Node_InternalPolicies_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetPrograms_Programs_Edges_Node_InternalPolicies) GetEdges() []*GetPrograms_Programs_Edges_Node_InternalPolicies_Edges {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_InternalPolicies{}
	}
	return t.Edges
}

type GetPrograms_Programs_Edges_Node_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetPrograms_Programs_Edges_Node_Editors) GetID() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Editors{}
	}
	return t.ID
}
func (t *GetPrograms_Programs_Edges_Node_Editors) GetName() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Editors{}
	}
	return t.Name
}

type GetPrograms_Programs_Edges_Node_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetPrograms_Programs_Edges_Node_Viewers) GetID() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Viewers{}
	}
	return t.ID
}
func (t *GetPrograms_Programs_Edges_Node_Viewers) GetName() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Viewers{}
	}
	return t.Name
}

type GetPrograms_Programs_Edges_Node_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetPrograms_Programs_Edges_Node_BlockedGroups) GetID() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_BlockedGroups{}
	}
	return t.ID
}
func (t *GetPrograms_Programs_Edges_Node_BlockedGroups) GetName() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_BlockedGroups{}
	}
	return t.Name
}

type GetPrograms_Programs_Edges_Node_Members_Edges_Node_User struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetPrograms_Programs_Edges_Node_Members_Edges_Node_User) GetFirstName() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Members_Edges_Node_User{}
	}
	return t.FirstName
}
func (t *GetPrograms_Programs_Edges_Node_Members_Edges_Node_User) GetID() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Members_Edges_Node_User{}
	}
	return t.ID
}
func (t *GetPrograms_Programs_Edges_Node_Members_Edges_Node_User) GetLastName() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Members_Edges_Node_User{}
	}
	return t.LastName
}

type GetPrograms_Programs_Edges_Node_Members_Edges_Node struct {
	ID   string                                                  "json:\"id\" graphql:\"id\""
	User GetPrograms_Programs_Edges_Node_Members_Edges_Node_User "json:\"user\" graphql:\"user\""
}

func (t *GetPrograms_Programs_Edges_Node_Members_Edges_Node) GetID() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Members_Edges_Node{}
	}
	return t.ID
}
func (t *GetPrograms_Programs_Edges_Node_Members_Edges_Node) GetUser() *GetPrograms_Programs_Edges_Node_Members_Edges_Node_User {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Members_Edges_Node{}
	}
	return &t.User
}

type GetPrograms_Programs_Edges_Node_Members_Edges struct {
	Node *GetPrograms_Programs_Edges_Node_Members_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetPrograms_Programs_Edges_Node_Members_Edges) GetNode() *GetPrograms_Programs_Edges_Node_Members_Edges_Node {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Members_Edges{}
	}
	return t.Node
}

type GetPrograms_Programs_Edges_Node_Members struct {
	Edges []*GetPrograms_Programs_Edges_Node_Members_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetPrograms_Programs_Edges_Node_Members) GetEdges() []*GetPrograms_Programs_Edges_Node_Members_Edges {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node_Members{}
	}
	return t.Edges
}

type GetPrograms_Programs_Edges_Node struct {
	AuditorReadComments  bool                                             "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                                             "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                                             "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	BlockedGroups        []*GetPrograms_Programs_Edges_Node_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	CreatedAt            *time.Time                                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID            string                                           "json:\"displayID\" graphql:\"displayID\""
	Editors              []*GetPrograms_Programs_Edges_Node_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	EndDate              *time.Time                                       "json:\"endDate,omitempty\" graphql:\"endDate\""
	ID                   string                                           "json:\"id\" graphql:\"id\""
	InternalPolicies     GetPrograms_Programs_Edges_Node_InternalPolicies "json:\"internalPolicies\" graphql:\"internalPolicies\""
	Members              GetPrograms_Programs_Edges_Node_Members          "json:\"members\" graphql:\"members\""
	Name                 string                                           "json:\"name\" graphql:\"name\""
	OwnerID              *string                                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Procedures           GetPrograms_Programs_Edges_Node_Procedures       "json:\"procedures\" graphql:\"procedures\""
	StartDate            *time.Time                                       "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus                              "json:\"status\" graphql:\"status\""
	Tags                 []string                                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers              []*GetPrograms_Programs_Edges_Node_Viewers       "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *GetPrograms_Programs_Edges_Node) GetAuditorReadComments() bool {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.AuditorReadComments
}
func (t *GetPrograms_Programs_Edges_Node) GetAuditorReady() bool {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.AuditorReady
}
func (t *GetPrograms_Programs_Edges_Node) GetAuditorWriteComments() bool {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.AuditorWriteComments
}
func (t *GetPrograms_Programs_Edges_Node) GetBlockedGroups() []*GetPrograms_Programs_Edges_Node_BlockedGroups {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.BlockedGroups
}
func (t *GetPrograms_Programs_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetPrograms_Programs_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetPrograms_Programs_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.Description
}
func (t *GetPrograms_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetPrograms_Programs_Edges_Node) GetEditors() []*GetPrograms_Programs_Edges_Node_Editors {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.Editors
}
func (t *GetPrograms_Programs_Edges_Node) GetEndDate() *time.Time {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.EndDate
}
func (t *GetPrograms_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GetPrograms_Programs_Edges_Node) GetInternalPolicies() *GetPrograms_Programs_Edges_Node_InternalPolicies {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return &t.InternalPolicies
}
func (t *GetPrograms_Programs_Edges_Node) GetMembers() *GetPrograms_Programs_Edges_Node_Members {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return &t.Members
}
func (t *GetPrograms_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.Name
}
func (t *GetPrograms_Programs_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetPrograms_Programs_Edges_Node) GetProcedures() *GetPrograms_Programs_Edges_Node_Procedures {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return &t.Procedures
}
func (t *GetPrograms_Programs_Edges_Node) GetStartDate() *time.Time {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.StartDate
}
func (t *GetPrograms_Programs_Edges_Node) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return &t.Status
}
func (t *GetPrograms_Programs_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.Tags
}
func (t *GetPrograms_Programs_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetPrograms_Programs_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetPrograms_Programs_Edges_Node) GetViewers() []*GetPrograms_Programs_Edges_Node_Viewers {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.Viewers
}

type GetPrograms_Programs_Edges struct {
	Node *GetPrograms_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetPrograms_Programs_Edges) GetNode() *GetPrograms_Programs_Edges_Node {
	if t == nil {
		t = &GetPrograms_Programs_Edges{}
	}
	return t.Node
}

type GetPrograms_Programs struct {
	Edges []*GetPrograms_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetPrograms_Programs) GetEdges() []*GetPrograms_Programs_Edges {
	if t == nil {
		t = &GetPrograms_Programs{}
	}
	return t.Edges
}

type UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node struct {
	CreatedAt     *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details       *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                "json:\"displayID\" graphql:\"displayID\""
	ID            string                "json:\"id\" graphql:\"id\""
	Name          string                "json:\"name\" graphql:\"name\""
	ProcedureType *string               "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	Revision      *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status        *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node{}
	}
	return t.Details
}
func (t *UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node{}
	}
	return t.DisplayID
}
func (t *UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node) GetName() string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node{}
	}
	return t.Name
}
func (t *UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node) GetProcedureType() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node{}
	}
	return t.ProcedureType
}
func (t *UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node{}
	}
	return t.Revision
}
func (t *UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node{}
	}
	return t.Status
}
func (t *UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node) GetTags() []string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node{}
	}
	return t.Tags
}
func (t *UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node{}
	}
	return t.UpdatedBy
}

type UpdateProgram_UpdateProgram_Program_Procedures_Edges struct {
	Node *UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateProgram_UpdateProgram_Program_Procedures_Edges) GetNode() *UpdateProgram_UpdateProgram_Program_Procedures_Edges_Node {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Procedures_Edges{}
	}
	return t.Node
}

type UpdateProgram_UpdateProgram_Program_Procedures struct {
	Edges []*UpdateProgram_UpdateProgram_Program_Procedures_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateProgram_UpdateProgram_Program_Procedures) GetEdges() []*UpdateProgram_UpdateProgram_Program_Procedures_Edges {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Procedures{}
	}
	return t.Edges
}

type UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node struct {
	CreatedAt  *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details    *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID  string                "json:\"displayID\" graphql:\"displayID\""
	ID         string                "json:\"id\" graphql:\"id\""
	Name       string                "json:\"name\" graphql:\"name\""
	PolicyType *string               "json:\"policyType,omitempty\" graphql:\"policyType\""
	Revision   *string               "json:\"revision,omitempty\" graphql:\"revision\""
	Status     *enums.DocumentStatus "json:\"status,omitempty\" graphql:\"status\""
	Tags       []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt  *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.Details
}
func (t *UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.DisplayID
}
func (t *UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node) GetName() string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.Name
}
func (t *UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node) GetPolicyType() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.PolicyType
}
func (t *UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.Revision
}
func (t *UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node) GetStatus() *enums.DocumentStatus {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.Status
}
func (t *UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node) GetTags() []string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.Tags
}
func (t *UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node{}
	}
	return t.UpdatedBy
}

type UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges struct {
	Node *UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges) GetNode() *UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges_Node {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges{}
	}
	return t.Node
}

type UpdateProgram_UpdateProgram_Program_InternalPolicies struct {
	Edges []*UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateProgram_UpdateProgram_Program_InternalPolicies) GetEdges() []*UpdateProgram_UpdateProgram_Program_InternalPolicies_Edges {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_InternalPolicies{}
	}
	return t.Edges
}

type UpdateProgram_UpdateProgram_Program_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateProgram_UpdateProgram_Program_Editors) GetID() string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Editors{}
	}
	return t.ID
}
func (t *UpdateProgram_UpdateProgram_Program_Editors) GetName() string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Editors{}
	}
	return t.Name
}

type UpdateProgram_UpdateProgram_Program_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateProgram_UpdateProgram_Program_Viewers) GetID() string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Viewers{}
	}
	return t.ID
}
func (t *UpdateProgram_UpdateProgram_Program_Viewers) GetName() string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Viewers{}
	}
	return t.Name
}

type UpdateProgram_UpdateProgram_Program_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateProgram_UpdateProgram_Program_BlockedGroups) GetID() string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_BlockedGroups{}
	}
	return t.ID
}
func (t *UpdateProgram_UpdateProgram_Program_BlockedGroups) GetName() string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_BlockedGroups{}
	}
	return t.Name
}

type UpdateProgram_UpdateProgram_Program_Members_Edges_Node_User struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *UpdateProgram_UpdateProgram_Program_Members_Edges_Node_User) GetFirstName() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Members_Edges_Node_User{}
	}
	return t.FirstName
}
func (t *UpdateProgram_UpdateProgram_Program_Members_Edges_Node_User) GetID() string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Members_Edges_Node_User{}
	}
	return t.ID
}
func (t *UpdateProgram_UpdateProgram_Program_Members_Edges_Node_User) GetLastName() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Members_Edges_Node_User{}
	}
	return t.LastName
}

type UpdateProgram_UpdateProgram_Program_Members_Edges_Node struct {
	ID   string                                                      "json:\"id\" graphql:\"id\""
	User UpdateProgram_UpdateProgram_Program_Members_Edges_Node_User "json:\"user\" graphql:\"user\""
}

func (t *UpdateProgram_UpdateProgram_Program_Members_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Members_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateProgram_UpdateProgram_Program_Members_Edges_Node) GetUser() *UpdateProgram_UpdateProgram_Program_Members_Edges_Node_User {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Members_Edges_Node{}
	}
	return &t.User
}

type UpdateProgram_UpdateProgram_Program_Members_Edges struct {
	Node *UpdateProgram_UpdateProgram_Program_Members_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateProgram_UpdateProgram_Program_Members_Edges) GetNode() *UpdateProgram_UpdateProgram_Program_Members_Edges_Node {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Members_Edges{}
	}
	return t.Node
}

type UpdateProgram_UpdateProgram_Program_Members struct {
	Edges []*UpdateProgram_UpdateProgram_Program_Members_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateProgram_UpdateProgram_Program_Members) GetEdges() []*UpdateProgram_UpdateProgram_Program_Members_Edges {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program_Members{}
	}
	return t.Edges
}

type UpdateProgram_UpdateProgram_Program struct {
	AuditorReadComments  bool                                                 "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                                                 "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                                                 "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	BlockedGroups        []*UpdateProgram_UpdateProgram_Program_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	CreatedAt            *time.Time                                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                                              "json:\"description,omitempty\" graphql:\"description\""
	Editors              []*UpdateProgram_UpdateProgram_Program_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	EndDate              *time.Time                                           "json:\"endDate,omitempty\" graphql:\"endDate\""
	ID                   string                                               "json:\"id\" graphql:\"id\""
	InternalPolicies     UpdateProgram_UpdateProgram_Program_InternalPolicies "json:\"internalPolicies\" graphql:\"internalPolicies\""
	Members              UpdateProgram_UpdateProgram_Program_Members          "json:\"members\" graphql:\"members\""
	Name                 string                                               "json:\"name\" graphql:\"name\""
	OwnerID              *string                                              "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Procedures           UpdateProgram_UpdateProgram_Program_Procedures       "json:\"procedures\" graphql:\"procedures\""
	StartDate            *time.Time                                           "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus                                  "json:\"status\" graphql:\"status\""
	Tags                 []string                                             "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers              []*UpdateProgram_UpdateProgram_Program_Viewers       "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *UpdateProgram_UpdateProgram_Program) GetAuditorReadComments() bool {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.AuditorReadComments
}
func (t *UpdateProgram_UpdateProgram_Program) GetAuditorReady() bool {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.AuditorReady
}
func (t *UpdateProgram_UpdateProgram_Program) GetAuditorWriteComments() bool {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.AuditorWriteComments
}
func (t *UpdateProgram_UpdateProgram_Program) GetBlockedGroups() []*UpdateProgram_UpdateProgram_Program_BlockedGroups {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.BlockedGroups
}
func (t *UpdateProgram_UpdateProgram_Program) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.CreatedAt
}
func (t *UpdateProgram_UpdateProgram_Program) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.CreatedBy
}
func (t *UpdateProgram_UpdateProgram_Program) GetDescription() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.Description
}
func (t *UpdateProgram_UpdateProgram_Program) GetEditors() []*UpdateProgram_UpdateProgram_Program_Editors {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.Editors
}
func (t *UpdateProgram_UpdateProgram_Program) GetEndDate() *time.Time {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.EndDate
}
func (t *UpdateProgram_UpdateProgram_Program) GetID() string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.ID
}
func (t *UpdateProgram_UpdateProgram_Program) GetInternalPolicies() *UpdateProgram_UpdateProgram_Program_InternalPolicies {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return &t.InternalPolicies
}
func (t *UpdateProgram_UpdateProgram_Program) GetMembers() *UpdateProgram_UpdateProgram_Program_Members {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return &t.Members
}
func (t *UpdateProgram_UpdateProgram_Program) GetName() string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.Name
}
func (t *UpdateProgram_UpdateProgram_Program) GetOwnerID() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.OwnerID
}
func (t *UpdateProgram_UpdateProgram_Program) GetProcedures() *UpdateProgram_UpdateProgram_Program_Procedures {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return &t.Procedures
}
func (t *UpdateProgram_UpdateProgram_Program) GetStartDate() *time.Time {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.StartDate
}
func (t *UpdateProgram_UpdateProgram_Program) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return &t.Status
}
func (t *UpdateProgram_UpdateProgram_Program) GetTags() []string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.Tags
}
func (t *UpdateProgram_UpdateProgram_Program) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.UpdatedAt
}
func (t *UpdateProgram_UpdateProgram_Program) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.UpdatedBy
}
func (t *UpdateProgram_UpdateProgram_Program) GetViewers() []*UpdateProgram_UpdateProgram_Program_Viewers {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.Viewers
}

type UpdateProgram_UpdateProgram struct {
	Program UpdateProgram_UpdateProgram_Program "json:\"program\" graphql:\"program\""
}

func (t *UpdateProgram_UpdateProgram) GetProgram() *UpdateProgram_UpdateProgram_Program {
	if t == nil {
		t = &UpdateProgram_UpdateProgram{}
	}
	return &t.Program
}

type AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership_Program struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership_Program) GetID() string {
	if t == nil {
		t = &AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership_Program{}
	}
	return t.ID
}
func (t *AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership_Program) GetName() string {
	if t == nil {
		t = &AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership_Program{}
	}
	return t.Name
}

type AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership_User) GetDisplayName() string {
	if t == nil {
		t = &AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership_User{}
	}
	return t.DisplayName
}
func (t *AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership_User) GetEmail() string {
	if t == nil {
		t = &AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership_User{}
	}
	return t.Email
}
func (t *AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership_User) GetFirstName() *string {
	if t == nil {
		t = &AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership_User{}
	}
	return t.FirstName
}
func (t *AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership_User) GetID() string {
	if t == nil {
		t = &AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership_User{}
	}
	return t.ID
}
func (t *AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership_User) GetLastName() *string {
	if t == nil {
		t = &AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership_User{}
	}
	return t.LastName
}

type AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership struct {
	ID        string                                                                     "json:\"id\" graphql:\"id\""
	Program   AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership_Program "json:\"program\" graphql:\"program\""
	ProgramID string                                                                     "json:\"programID\" graphql:\"programID\""
	Role      enums.Role                                                                 "json:\"role\" graphql:\"role\""
	User      AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership_User    "json:\"user\" graphql:\"user\""
	UserID    string                                                                     "json:\"userID\" graphql:\"userID\""
}

func (t *AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership) GetID() string {
	if t == nil {
		t = &AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership{}
	}
	return t.ID
}
func (t *AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership) GetProgram() *AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership_Program {
	if t == nil {
		t = &AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership{}
	}
	return &t.Program
}
func (t *AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership) GetProgramID() string {
	if t == nil {
		t = &AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership{}
	}
	return t.ProgramID
}
func (t *AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership) GetRole() *enums.Role {
	if t == nil {
		t = &AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership{}
	}
	return &t.Role
}
func (t *AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership) GetUser() *AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership_User {
	if t == nil {
		t = &AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership{}
	}
	return &t.User
}
func (t *AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership) GetUserID() string {
	if t == nil {
		t = &AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership{}
	}
	return t.UserID
}

type AddUserToProgramWithRole_CreateProgramMembership struct {
	ProgramMembership AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership "json:\"programMembership\" graphql:\"programMembership\""
}

func (t *AddUserToProgramWithRole_CreateProgramMembership) GetProgramMembership() *AddUserToProgramWithRole_CreateProgramMembership_ProgramMembership {
	if t == nil {
		t = &AddUserToProgramWithRole_CreateProgramMembership{}
	}
	return &t.ProgramMembership
}

type CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships_Program struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships_Program) GetID() string {
	if t == nil {
		t = &CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships_Program{}
	}
	return t.ID
}
func (t *CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships_Program) GetName() string {
	if t == nil {
		t = &CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships_Program{}
	}
	return t.Name
}

type CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships_User) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships_User{}
	}
	return t.DisplayName
}
func (t *CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships_User) GetEmail() string {
	if t == nil {
		t = &CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships_User{}
	}
	return t.Email
}
func (t *CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships_User) GetFirstName() *string {
	if t == nil {
		t = &CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships_User{}
	}
	return t.FirstName
}
func (t *CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships_User) GetID() string {
	if t == nil {
		t = &CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships_User{}
	}
	return t.ID
}
func (t *CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships_User) GetLastName() *string {
	if t == nil {
		t = &CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships_User{}
	}
	return t.LastName
}

type CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships struct {
	ID        string                                                                                "json:\"id\" graphql:\"id\""
	Program   CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships_Program "json:\"program\" graphql:\"program\""
	ProgramID string                                                                                "json:\"programID\" graphql:\"programID\""
	Role      enums.Role                                                                            "json:\"role\" graphql:\"role\""
	User      CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships_User    "json:\"user\" graphql:\"user\""
	UserID    string                                                                                "json:\"userID\" graphql:\"userID\""
}

func (t *CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.ID
}
func (t *CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships) GetProgram() *CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships_Program {
	if t == nil {
		t = &CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return &t.Program
}
func (t *CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships) GetProgramID() string {
	if t == nil {
		t = &CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.ProgramID
}
func (t *CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships) GetUser() *CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships_User {
	if t == nil {
		t = &CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return &t.User
}
func (t *CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships) GetUserID() string {
	if t == nil {
		t = &CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.UserID
}

type CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership struct {
	ProgramMemberships []*CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships "json:\"programMemberships,omitempty\" graphql:\"programMemberships\""
}

func (t *CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership) GetProgramMemberships() []*CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership_ProgramMemberships {
	if t == nil {
		t = &CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership{}
	}
	return t.ProgramMemberships
}

type CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships_Program struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships_Program) GetID() string {
	if t == nil {
		t = &CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships_Program{}
	}
	return t.ID
}
func (t *CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships_Program) GetName() string {
	if t == nil {
		t = &CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships_Program{}
	}
	return t.Name
}

type CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships_User) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships_User{}
	}
	return t.DisplayName
}
func (t *CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships_User) GetEmail() string {
	if t == nil {
		t = &CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships_User{}
	}
	return t.Email
}
func (t *CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships_User) GetFirstName() *string {
	if t == nil {
		t = &CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships_User{}
	}
	return t.FirstName
}
func (t *CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships_User) GetID() string {
	if t == nil {
		t = &CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships_User{}
	}
	return t.ID
}
func (t *CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships_User) GetLastName() *string {
	if t == nil {
		t = &CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships_User{}
	}
	return t.LastName
}

type CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships struct {
	ID        string                                                                          "json:\"id\" graphql:\"id\""
	Program   CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships_Program "json:\"program\" graphql:\"program\""
	ProgramID string                                                                          "json:\"programID\" graphql:\"programID\""
	Role      enums.Role                                                                      "json:\"role\" graphql:\"role\""
	User      CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships_User    "json:\"user\" graphql:\"user\""
	UserID    string                                                                          "json:\"userID\" graphql:\"userID\""
}

func (t *CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.ID
}
func (t *CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships) GetProgram() *CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships_Program {
	if t == nil {
		t = &CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return &t.Program
}
func (t *CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships) GetProgramID() string {
	if t == nil {
		t = &CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.ProgramID
}
func (t *CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships) GetUser() *CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships_User {
	if t == nil {
		t = &CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return &t.User
}
func (t *CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships) GetUserID() string {
	if t == nil {
		t = &CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.UserID
}

type CreateBulkProgramMembers_CreateBulkProgramMembership struct {
	ProgramMemberships []*CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships "json:\"programMemberships,omitempty\" graphql:\"programMemberships\""
}

func (t *CreateBulkProgramMembers_CreateBulkProgramMembership) GetProgramMemberships() []*CreateBulkProgramMembers_CreateBulkProgramMembership_ProgramMemberships {
	if t == nil {
		t = &CreateBulkProgramMembers_CreateBulkProgramMembership{}
	}
	return t.ProgramMemberships
}

type GetProgramMembersByProgramID_ProgramMemberships_Edges_Node_Program struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetProgramMembersByProgramID_ProgramMemberships_Edges_Node_Program) GetID() string {
	if t == nil {
		t = &GetProgramMembersByProgramID_ProgramMemberships_Edges_Node_Program{}
	}
	return t.ID
}
func (t *GetProgramMembersByProgramID_ProgramMemberships_Edges_Node_Program) GetName() string {
	if t == nil {
		t = &GetProgramMembersByProgramID_ProgramMemberships_Edges_Node_Program{}
	}
	return t.Name
}

type GetProgramMembersByProgramID_ProgramMemberships_Edges_Node_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetProgramMembersByProgramID_ProgramMemberships_Edges_Node_User) GetDisplayName() string {
	if t == nil {
		t = &GetProgramMembersByProgramID_ProgramMemberships_Edges_Node_User{}
	}
	return t.DisplayName
}
func (t *GetProgramMembersByProgramID_ProgramMemberships_Edges_Node_User) GetEmail() string {
	if t == nil {
		t = &GetProgramMembersByProgramID_ProgramMemberships_Edges_Node_User{}
	}
	return t.Email
}
func (t *GetProgramMembersByProgramID_ProgramMemberships_Edges_Node_User) GetFirstName() *string {
	if t == nil {
		t = &GetProgramMembersByProgramID_ProgramMemberships_Edges_Node_User{}
	}
	return t.FirstName
}
func (t *GetProgramMembersByProgramID_ProgramMemberships_Edges_Node_User) GetID() string {
	if t == nil {
		t = &GetProgramMembersByProgramID_ProgramMemberships_Edges_Node_User{}
	}
	return t.ID
}
func (t *GetProgramMembersByProgramID_ProgramMemberships_Edges_Node_User) GetLastName() *string {
	if t == nil {
		t = &GetProgramMembersByProgramID_ProgramMemberships_Edges_Node_User{}
	}
	return t.LastName
}

type GetProgramMembersByProgramID_ProgramMemberships_Edges_Node struct {
	ID        string                                                             "json:\"id\" graphql:\"id\""
	Program   GetProgramMembersByProgramID_ProgramMemberships_Edges_Node_Program "json:\"program\" graphql:\"program\""
	ProgramID string                                                             "json:\"programID\" graphql:\"programID\""
	Role      enums.Role                                                         "json:\"role\" graphql:\"role\""
	User      GetProgramMembersByProgramID_ProgramMemberships_Edges_Node_User    "json:\"user\" graphql:\"user\""
	UserID    string                                                             "json:\"userID\" graphql:\"userID\""
}

func (t *GetProgramMembersByProgramID_ProgramMemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &GetProgramMembersByProgramID_ProgramMemberships_Edges_Node{}
	}
	return t.ID
}
func (t *GetProgramMembersByProgramID_ProgramMemberships_Edges_Node) GetProgram() *GetProgramMembersByProgramID_ProgramMemberships_Edges_Node_Program {
	if t == nil {
		t = &GetProgramMembersByProgramID_ProgramMemberships_Edges_Node{}
	}
	return &t.Program
}
func (t *GetProgramMembersByProgramID_ProgramMemberships_Edges_Node) GetProgramID() string {
	if t == nil {
		t = &GetProgramMembersByProgramID_ProgramMemberships_Edges_Node{}
	}
	return t.ProgramID
}
func (t *GetProgramMembersByProgramID_ProgramMemberships_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetProgramMembersByProgramID_ProgramMemberships_Edges_Node{}
	}
	return &t.Role
}
func (t *GetProgramMembersByProgramID_ProgramMemberships_Edges_Node) GetUser() *GetProgramMembersByProgramID_ProgramMemberships_Edges_Node_User {
	if t == nil {
		t = &GetProgramMembersByProgramID_ProgramMemberships_Edges_Node{}
	}
	return &t.User
}
func (t *GetProgramMembersByProgramID_ProgramMemberships_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetProgramMembersByProgramID_ProgramMemberships_Edges_Node{}
	}
	return t.UserID
}

type GetProgramMembersByProgramID_ProgramMemberships_Edges struct {
	Node *GetProgramMembersByProgramID_ProgramMemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetProgramMembersByProgramID_ProgramMemberships_Edges) GetNode() *GetProgramMembersByProgramID_ProgramMemberships_Edges_Node {
	if t == nil {
		t = &GetProgramMembersByProgramID_ProgramMemberships_Edges{}
	}
	return t.Node
}

type GetProgramMembersByProgramID_ProgramMemberships struct {
	Edges []*GetProgramMembersByProgramID_ProgramMemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetProgramMembersByProgramID_ProgramMemberships) GetEdges() []*GetProgramMembersByProgramID_ProgramMemberships_Edges {
	if t == nil {
		t = &GetProgramMembersByProgramID_ProgramMemberships{}
	}
	return t.Edges
}

type RemoveUserFromProgram_DeleteProgramMembership struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *RemoveUserFromProgram_DeleteProgramMembership) GetDeletedID() string {
	if t == nil {
		t = &RemoveUserFromProgram_DeleteProgramMembership{}
	}
	return t.DeletedID
}

type UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership_Program struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership_Program) GetID() string {
	if t == nil {
		t = &UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership_Program{}
	}
	return t.ID
}
func (t *UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership_Program) GetName() string {
	if t == nil {
		t = &UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership_Program{}
	}
	return t.Name
}

type UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership_User) GetDisplayName() string {
	if t == nil {
		t = &UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership_User{}
	}
	return t.DisplayName
}
func (t *UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership_User) GetEmail() string {
	if t == nil {
		t = &UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership_User{}
	}
	return t.Email
}
func (t *UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership_User) GetFirstName() *string {
	if t == nil {
		t = &UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership_User{}
	}
	return t.FirstName
}
func (t *UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership_User) GetID() string {
	if t == nil {
		t = &UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership_User{}
	}
	return t.ID
}
func (t *UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership_User) GetLastName() *string {
	if t == nil {
		t = &UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership_User{}
	}
	return t.LastName
}

type UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership struct {
	ID        string                                                                    "json:\"id\" graphql:\"id\""
	Program   UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership_Program "json:\"program\" graphql:\"program\""
	ProgramID string                                                                    "json:\"programID\" graphql:\"programID\""
	Role      enums.Role                                                                "json:\"role\" graphql:\"role\""
	User      UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership_User    "json:\"user\" graphql:\"user\""
	UserID    string                                                                    "json:\"userID\" graphql:\"userID\""
}

func (t *UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership) GetID() string {
	if t == nil {
		t = &UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership{}
	}
	return t.ID
}
func (t *UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership) GetProgram() *UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership_Program {
	if t == nil {
		t = &UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership{}
	}
	return &t.Program
}
func (t *UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership) GetProgramID() string {
	if t == nil {
		t = &UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership{}
	}
	return t.ProgramID
}
func (t *UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership) GetRole() *enums.Role {
	if t == nil {
		t = &UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership{}
	}
	return &t.Role
}
func (t *UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership) GetUser() *UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership_User {
	if t == nil {
		t = &UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership{}
	}
	return &t.User
}
func (t *UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership) GetUserID() string {
	if t == nil {
		t = &UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership{}
	}
	return t.UserID
}

type UpdateUserRoleInProgram_UpdateProgramMembership struct {
	ProgramMembership UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership "json:\"programMembership\" graphql:\"programMembership\""
}

func (t *UpdateUserRoleInProgram_UpdateProgramMembership) GetProgramMembership() *UpdateUserRoleInProgram_UpdateProgramMembership_ProgramMembership {
	if t == nil {
		t = &UpdateUserRoleInProgram_UpdateProgramMembership{}
	}
	return &t.ProgramMembership
}

type GetAllProgramHistories_ProgramHistories_Edges_Node struct {
	AuditorReadComments  bool                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	CreatedAt            *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string             "json:\"description,omitempty\" graphql:\"description\""
	EndDate              *time.Time          "json:\"endDate,omitempty\" graphql:\"endDate\""
	HistoryTime          time.Time           "json:\"historyTime\" graphql:\"historyTime\""
	ID                   string              "json:\"id\" graphql:\"id\""
	Name                 string              "json:\"name\" graphql:\"name\""
	Operation            history.OpType      "json:\"operation\" graphql:\"operation\""
	OwnerID              *string             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                  *string             "json:\"ref,omitempty\" graphql:\"ref\""
	StartDate            *time.Time          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus "json:\"status\" graphql:\"status\""
	Tags                 []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetAuditorReadComments() bool {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.AuditorReadComments
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetAuditorReady() bool {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.AuditorReady
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetAuditorWriteComments() bool {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.AuditorWriteComments
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetEndDate() *time.Time {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.EndDate
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetStartDate() *time.Time {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.StartDate
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllProgramHistories_ProgramHistories_Edges struct {
	Node *GetAllProgramHistories_ProgramHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllProgramHistories_ProgramHistories_Edges) GetNode() *GetAllProgramHistories_ProgramHistories_Edges_Node {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges{}
	}
	return t.Node
}

type GetAllProgramHistories_ProgramHistories struct {
	Edges []*GetAllProgramHistories_ProgramHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllProgramHistories_ProgramHistories) GetEdges() []*GetAllProgramHistories_ProgramHistories_Edges {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories{}
	}
	return t.Edges
}

type GetProgramHistories_ProgramHistories_Edges_Node struct {
	AuditorReadComments  bool                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	CreatedAt            *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string             "json:\"description,omitempty\" graphql:\"description\""
	EndDate              *time.Time          "json:\"endDate,omitempty\" graphql:\"endDate\""
	HistoryTime          time.Time           "json:\"historyTime\" graphql:\"historyTime\""
	ID                   string              "json:\"id\" graphql:\"id\""
	Name                 string              "json:\"name\" graphql:\"name\""
	Operation            history.OpType      "json:\"operation\" graphql:\"operation\""
	OwnerID              *string             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                  *string             "json:\"ref,omitempty\" graphql:\"ref\""
	StartDate            *time.Time          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus "json:\"status\" graphql:\"status\""
	Tags                 []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetAuditorReadComments() bool {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.AuditorReadComments
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetAuditorReady() bool {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.AuditorReady
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetAuditorWriteComments() bool {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.AuditorWriteComments
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetEndDate() *time.Time {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.EndDate
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetStartDate() *time.Time {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.StartDate
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetProgramHistories_ProgramHistories_Edges struct {
	Node *GetProgramHistories_ProgramHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetProgramHistories_ProgramHistories_Edges) GetNode() *GetProgramHistories_ProgramHistories_Edges_Node {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges{}
	}
	return t.Node
}

type GetProgramHistories_ProgramHistories struct {
	Edges []*GetProgramHistories_ProgramHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetProgramHistories_ProgramHistories) GetEdges() []*GetProgramHistories_ProgramHistories_Edges {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories{}
	}
	return t.Edges
}

type CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	ProgramID string     "json:\"programID\" graphql:\"programID\""
	Role      enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID    string     "json:\"userID\" graphql:\"userID\""
}

func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.ID
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetProgramID() string {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.ProgramID
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetUserID() string {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.UserID
}

type CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership struct {
	ProgramMemberships []*CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships "json:\"programMemberships,omitempty\" graphql:\"programMemberships\""
}

func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership) GetProgramMemberships() []*CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership{}
	}
	return t.ProgramMemberships
}

type CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	ProgramID string     "json:\"programID\" graphql:\"programID\""
	Role      enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID    string     "json:\"userID\" graphql:\"userID\""
}

func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.CreatedAt
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.CreatedBy
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.ID
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetProgramID() string {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.ProgramID
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetUserID() string {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.UserID
}

type CreateBulkProgramMembership_CreateBulkProgramMembership struct {
	ProgramMemberships []*CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships "json:\"programMemberships,omitempty\" graphql:\"programMemberships\""
}

func (t *CreateBulkProgramMembership_CreateBulkProgramMembership) GetProgramMemberships() []*CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership{}
	}
	return t.ProgramMemberships
}

type CreateProgramMembership_CreateProgramMembership_ProgramMembership struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	ProgramID string     "json:\"programID\" graphql:\"programID\""
	Role      enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID    string     "json:\"userID\" graphql:\"userID\""
}

func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return t.CreatedAt
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetCreatedBy() *string {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return t.CreatedBy
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetID() string {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return t.ID
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetProgramID() string {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return t.ProgramID
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetRole() *enums.Role {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return &t.Role
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return t.UpdatedAt
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return t.UpdatedBy
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetUserID() string {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return t.UserID
}

type CreateProgramMembership_CreateProgramMembership struct {
	ProgramMembership CreateProgramMembership_CreateProgramMembership_ProgramMembership "json:\"programMembership\" graphql:\"programMembership\""
}

func (t *CreateProgramMembership_CreateProgramMembership) GetProgramMembership() *CreateProgramMembership_CreateProgramMembership_ProgramMembership {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership{}
	}
	return &t.ProgramMembership
}

type DeleteProgramMembership_DeleteProgramMembership struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteProgramMembership_DeleteProgramMembership) GetDeletedID() string {
	if t == nil {
		t = &DeleteProgramMembership_DeleteProgramMembership{}
	}
	return t.DeletedID
}

type GetAllProgramMemberships_ProgramMemberships_Edges_Node struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	ProgramID string     "json:\"programID\" graphql:\"programID\""
	Role      enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID    string     "json:\"userID\" graphql:\"userID\""
}

func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetProgramID() string {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.ProgramID
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return &t.Role
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.UserID
}

type GetAllProgramMemberships_ProgramMemberships_Edges struct {
	Node *GetAllProgramMemberships_ProgramMemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllProgramMemberships_ProgramMemberships_Edges) GetNode() *GetAllProgramMemberships_ProgramMemberships_Edges_Node {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges{}
	}
	return t.Node
}

type GetAllProgramMemberships_ProgramMemberships struct {
	Edges []*GetAllProgramMemberships_ProgramMemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllProgramMemberships_ProgramMemberships) GetEdges() []*GetAllProgramMemberships_ProgramMemberships_Edges {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships{}
	}
	return t.Edges
}

type GetProgramMembershipByID_ProgramMembership struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	ProgramID string     "json:\"programID\" graphql:\"programID\""
	Role      enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID    string     "json:\"userID\" graphql:\"userID\""
}

func (t *GetProgramMembershipByID_ProgramMembership) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return t.CreatedAt
}
func (t *GetProgramMembershipByID_ProgramMembership) GetCreatedBy() *string {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return t.CreatedBy
}
func (t *GetProgramMembershipByID_ProgramMembership) GetID() string {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return t.ID
}
func (t *GetProgramMembershipByID_ProgramMembership) GetProgramID() string {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return t.ProgramID
}
func (t *GetProgramMembershipByID_ProgramMembership) GetRole() *enums.Role {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return &t.Role
}
func (t *GetProgramMembershipByID_ProgramMembership) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return t.UpdatedAt
}
func (t *GetProgramMembershipByID_ProgramMembership) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return t.UpdatedBy
}
func (t *GetProgramMembershipByID_ProgramMembership) GetUserID() string {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return t.UserID
}

type GetProgramMemberships_ProgramMemberships_Edges_Node struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	ProgramID string     "json:\"programID\" graphql:\"programID\""
	Role      enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID    string     "json:\"userID\" graphql:\"userID\""
}

func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.ID
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetProgramID() string {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.ProgramID
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return &t.Role
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.UserID
}

type GetProgramMemberships_ProgramMemberships_Edges struct {
	Node *GetProgramMemberships_ProgramMemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetProgramMemberships_ProgramMemberships_Edges) GetNode() *GetProgramMemberships_ProgramMemberships_Edges_Node {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges{}
	}
	return t.Node
}

type GetProgramMemberships_ProgramMemberships struct {
	Edges []*GetProgramMemberships_ProgramMemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetProgramMemberships_ProgramMemberships) GetEdges() []*GetProgramMemberships_ProgramMemberships_Edges {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships{}
	}
	return t.Edges
}

type UpdateProgramMembership_UpdateProgramMembership_ProgramMembership struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	ProgramID string     "json:\"programID\" graphql:\"programID\""
	Role      enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID    string     "json:\"userID\" graphql:\"userID\""
}

func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return t.CreatedAt
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return t.CreatedBy
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetID() string {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return t.ID
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetProgramID() string {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return t.ProgramID
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetRole() *enums.Role {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return &t.Role
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return t.UpdatedAt
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return t.UpdatedBy
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetUserID() string {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return t.UserID
}

type UpdateProgramMembership_UpdateProgramMembership struct {
	ProgramMembership UpdateProgramMembership_UpdateProgramMembership_ProgramMembership "json:\"programMembership\" graphql:\"programMembership\""
}

func (t *UpdateProgramMembership_UpdateProgramMembership) GetProgramMembership() *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership{}
	}
	return &t.ProgramMembership
}

type GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	ProgramID   string         "json:\"programID\" graphql:\"programID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Role        enums.Role     "json:\"role\" graphql:\"role\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID      string         "json:\"userID\" graphql:\"userID\""
}

func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetProgramID() string {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.ProgramID
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return &t.Role
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.UserID
}

type GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges struct {
	Node *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges) GetNode() *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges{}
	}
	return t.Node
}

type GetAllProgramMembershipHistories_ProgramMembershipHistories struct {
	Edges []*GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories) GetEdges() []*GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories{}
	}
	return t.Edges
}

type GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	ProgramID   string         "json:\"programID\" graphql:\"programID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Role        enums.Role     "json:\"role\" graphql:\"role\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID      string         "json:\"userID\" graphql:\"userID\""
}

func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetProgramID() string {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.ProgramID
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return &t.Role
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.UserID
}

type GetProgramMembershipHistories_ProgramMembershipHistories_Edges struct {
	Node *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges) GetNode() *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges{}
	}
	return t.Node
}

type GetProgramMembershipHistories_ProgramMembershipHistories struct {
	Edges []*GetProgramMembershipHistories_ProgramMembershipHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetProgramMembershipHistories_ProgramMembershipHistories) GetEdges() []*GetProgramMembershipHistories_ProgramMembershipHistories_Edges {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories{}
	}
	return t.Edges
}

type CreateBulkCSVRisk_CreateBulkCSVRisk_Risks_Stakeholder struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks_Stakeholder) GetID() string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks_Stakeholder{}
	}
	return t.ID
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks_Stakeholder) GetName() string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks_Stakeholder{}
	}
	return t.Name
}

type CreateBulkCSVRisk_CreateBulkCSVRisk_Risks_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks_Delegate) GetID() string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks_Delegate{}
	}
	return t.ID
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks_Delegate) GetName() string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks_Delegate{}
	}
	return t.Name
}

type CreateBulkCSVRisk_CreateBulkCSVRisk_Risks struct {
	BusinessCosts *string                                                "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	CreatedAt     *time.Time                                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate      *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks_Delegate    "json:\"delegate,omitempty\" graphql:\"delegate\""
	Details       *string                                                "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                                                 "json:\"displayID\" graphql:\"displayID\""
	ID            string                                                 "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact                                      "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood                                  "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string                                                "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                                                 "json:\"name\" graphql:\"name\""
	RiskType      *string                                                "json:\"riskType,omitempty\" graphql:\"riskType\""
	Score         *int64                                                 "json:\"score,omitempty\" graphql:\"score\""
	Stakeholder   *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks_Stakeholder "json:\"stakeholder,omitempty\" graphql:\"stakeholder\""
	Status        *enums.RiskStatus                                      "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string                                               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time                                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetBusinessCosts() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.BusinessCosts
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetDelegate() *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks_Delegate {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Delegate
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetDetails() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Details
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.DisplayID
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetID() string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.ID
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Impact
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Likelihood
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetMitigation() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Mitigation
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetName() string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Name
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetRiskType() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.RiskType
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetScore() *int64 {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Score
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetStakeholder() *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks_Stakeholder {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Stakeholder
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetStatus() *enums.RiskStatus {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Status
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Tags
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVRisk_CreateBulkCSVRisk struct {
	Risks []*CreateBulkCSVRisk_CreateBulkCSVRisk_Risks "json:\"risks,omitempty\" graphql:\"risks\""
}

func (t *CreateBulkCSVRisk_CreateBulkCSVRisk) GetRisks() []*CreateBulkCSVRisk_CreateBulkCSVRisk_Risks {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk{}
	}
	return t.Risks
}

type CreateBulkRisk_CreateBulkRisk_Risks_Stakeholder struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkRisk_CreateBulkRisk_Risks_Stakeholder) GetID() string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks_Stakeholder{}
	}
	return t.ID
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks_Stakeholder) GetName() string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks_Stakeholder{}
	}
	return t.Name
}

type CreateBulkRisk_CreateBulkRisk_Risks_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkRisk_CreateBulkRisk_Risks_Delegate) GetID() string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks_Delegate{}
	}
	return t.ID
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks_Delegate) GetName() string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks_Delegate{}
	}
	return t.Name
}

type CreateBulkRisk_CreateBulkRisk_Risks struct {
	BusinessCosts *string                                          "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	CreatedAt     *time.Time                                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate      *CreateBulkRisk_CreateBulkRisk_Risks_Delegate    "json:\"delegate,omitempty\" graphql:\"delegate\""
	Details       *string                                          "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                                           "json:\"displayID\" graphql:\"displayID\""
	ID            string                                           "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact                                "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood                            "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string                                          "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                                           "json:\"name\" graphql:\"name\""
	RiskType      *string                                          "json:\"riskType,omitempty\" graphql:\"riskType\""
	Score         *int64                                           "json:\"score,omitempty\" graphql:\"score\""
	Stakeholder   *CreateBulkRisk_CreateBulkRisk_Risks_Stakeholder "json:\"stakeholder,omitempty\" graphql:\"stakeholder\""
	Status        *enums.RiskStatus                                "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string                                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time                                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetBusinessCosts() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.BusinessCosts
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.CreatedAt
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.CreatedBy
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetDelegate() *CreateBulkRisk_CreateBulkRisk_Risks_Delegate {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Delegate
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetDetails() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Details
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.DisplayID
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetID() string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.ID
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Impact
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Likelihood
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetMitigation() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Mitigation
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetName() string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Name
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetRiskType() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.RiskType
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetScore() *int64 {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Score
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetStakeholder() *CreateBulkRisk_CreateBulkRisk_Risks_Stakeholder {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Stakeholder
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetStatus() *enums.RiskStatus {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Status
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetTags() []string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Tags
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.UpdatedBy
}

type CreateBulkRisk_CreateBulkRisk struct {
	Risks []*CreateBulkRisk_CreateBulkRisk_Risks "json:\"risks,omitempty\" graphql:\"risks\""
}

func (t *CreateBulkRisk_CreateBulkRisk) GetRisks() []*CreateBulkRisk_CreateBulkRisk_Risks {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk{}
	}
	return t.Risks
}

type CreateRisk_CreateRisk_Risk_Programs_Edges_Node struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateRisk_CreateRisk_Risk_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *CreateRisk_CreateRisk_Risk_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk_Programs_Edges_Node{}
	}
	return t.Name
}

type CreateRisk_CreateRisk_Risk_Programs_Edges struct {
	Node *CreateRisk_CreateRisk_Risk_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateRisk_CreateRisk_Risk_Programs_Edges) GetNode() *CreateRisk_CreateRisk_Risk_Programs_Edges_Node {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk_Programs_Edges{}
	}
	return t.Node
}

type CreateRisk_CreateRisk_Risk_Programs struct {
	Edges []*CreateRisk_CreateRisk_Risk_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateRisk_CreateRisk_Risk_Programs) GetEdges() []*CreateRisk_CreateRisk_Risk_Programs_Edges {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk_Programs{}
	}
	return t.Edges
}

type CreateRisk_CreateRisk_Risk_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateRisk_CreateRisk_Risk_Editors) GetID() string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk_Editors{}
	}
	return t.ID
}
func (t *CreateRisk_CreateRisk_Risk_Editors) GetName() string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk_Editors{}
	}
	return t.Name
}

type CreateRisk_CreateRisk_Risk_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateRisk_CreateRisk_Risk_Viewers) GetID() string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk_Viewers{}
	}
	return t.ID
}
func (t *CreateRisk_CreateRisk_Risk_Viewers) GetName() string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk_Viewers{}
	}
	return t.Name
}

type CreateRisk_CreateRisk_Risk_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateRisk_CreateRisk_Risk_BlockedGroups) GetID() string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk_BlockedGroups{}
	}
	return t.ID
}
func (t *CreateRisk_CreateRisk_Risk_BlockedGroups) GetName() string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk_BlockedGroups{}
	}
	return t.Name
}

type CreateRisk_CreateRisk_Risk_Stakeholder struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateRisk_CreateRisk_Risk_Stakeholder) GetID() string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk_Stakeholder{}
	}
	return t.ID
}
func (t *CreateRisk_CreateRisk_Risk_Stakeholder) GetName() string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk_Stakeholder{}
	}
	return t.Name
}

type CreateRisk_CreateRisk_Risk_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateRisk_CreateRisk_Risk_Delegate) GetID() string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk_Delegate{}
	}
	return t.ID
}
func (t *CreateRisk_CreateRisk_Risk_Delegate) GetName() string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk_Delegate{}
	}
	return t.Name
}

type CreateRisk_CreateRisk_Risk struct {
	BlockedGroups []*CreateRisk_CreateRisk_Risk_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	BusinessCosts *string                                     "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	CreatedAt     *time.Time                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate      *CreateRisk_CreateRisk_Risk_Delegate        "json:\"delegate,omitempty\" graphql:\"delegate\""
	Details       *string                                     "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                                      "json:\"displayID\" graphql:\"displayID\""
	Editors       []*CreateRisk_CreateRisk_Risk_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID            string                                      "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact                           "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood                       "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string                                     "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                                      "json:\"name\" graphql:\"name\""
	Programs      CreateRisk_CreateRisk_Risk_Programs         "json:\"programs\" graphql:\"programs\""
	RiskType      *string                                     "json:\"riskType,omitempty\" graphql:\"riskType\""
	Score         *int64                                      "json:\"score,omitempty\" graphql:\"score\""
	Stakeholder   *CreateRisk_CreateRisk_Risk_Stakeholder     "json:\"stakeholder,omitempty\" graphql:\"stakeholder\""
	Status        *enums.RiskStatus                           "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string                                    "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers       []*CreateRisk_CreateRisk_Risk_Viewers       "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *CreateRisk_CreateRisk_Risk) GetBlockedGroups() []*CreateRisk_CreateRisk_Risk_BlockedGroups {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.BlockedGroups
}
func (t *CreateRisk_CreateRisk_Risk) GetBusinessCosts() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.BusinessCosts
}
func (t *CreateRisk_CreateRisk_Risk) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.CreatedAt
}
func (t *CreateRisk_CreateRisk_Risk) GetCreatedBy() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.CreatedBy
}
func (t *CreateRisk_CreateRisk_Risk) GetDelegate() *CreateRisk_CreateRisk_Risk_Delegate {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Delegate
}
func (t *CreateRisk_CreateRisk_Risk) GetDetails() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Details
}
func (t *CreateRisk_CreateRisk_Risk) GetDisplayID() string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.DisplayID
}
func (t *CreateRisk_CreateRisk_Risk) GetEditors() []*CreateRisk_CreateRisk_Risk_Editors {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Editors
}
func (t *CreateRisk_CreateRisk_Risk) GetID() string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.ID
}
func (t *CreateRisk_CreateRisk_Risk) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Impact
}
func (t *CreateRisk_CreateRisk_Risk) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Likelihood
}
func (t *CreateRisk_CreateRisk_Risk) GetMitigation() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Mitigation
}
func (t *CreateRisk_CreateRisk_Risk) GetName() string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Name
}
func (t *CreateRisk_CreateRisk_Risk) GetPrograms() *CreateRisk_CreateRisk_Risk_Programs {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return &t.Programs
}
func (t *CreateRisk_CreateRisk_Risk) GetRiskType() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.RiskType
}
func (t *CreateRisk_CreateRisk_Risk) GetScore() *int64 {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Score
}
func (t *CreateRisk_CreateRisk_Risk) GetStakeholder() *CreateRisk_CreateRisk_Risk_Stakeholder {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Stakeholder
}
func (t *CreateRisk_CreateRisk_Risk) GetStatus() *enums.RiskStatus {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Status
}
func (t *CreateRisk_CreateRisk_Risk) GetTags() []string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Tags
}
func (t *CreateRisk_CreateRisk_Risk) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.UpdatedAt
}
func (t *CreateRisk_CreateRisk_Risk) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.UpdatedBy
}
func (t *CreateRisk_CreateRisk_Risk) GetViewers() []*CreateRisk_CreateRisk_Risk_Viewers {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Viewers
}

type CreateRisk_CreateRisk struct {
	Risk CreateRisk_CreateRisk_Risk "json:\"risk\" graphql:\"risk\""
}

func (t *CreateRisk_CreateRisk) GetRisk() *CreateRisk_CreateRisk_Risk {
	if t == nil {
		t = &CreateRisk_CreateRisk{}
	}
	return &t.Risk
}

type DeleteRisk_DeleteRisk struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteRisk_DeleteRisk) GetDeletedID() string {
	if t == nil {
		t = &DeleteRisk_DeleteRisk{}
	}
	return t.DeletedID
}

type GetAllRisks_Risks_Edges_Node_Programs_Edges_Node struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllRisks_Risks_Edges_Node_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllRisks_Risks_Edges_Node_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node_Programs_Edges_Node{}
	}
	return t.Name
}

type GetAllRisks_Risks_Edges_Node_Programs_Edges struct {
	Node *GetAllRisks_Risks_Edges_Node_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllRisks_Risks_Edges_Node_Programs_Edges) GetNode() *GetAllRisks_Risks_Edges_Node_Programs_Edges_Node {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node_Programs_Edges{}
	}
	return t.Node
}

type GetAllRisks_Risks_Edges_Node_Programs struct {
	Edges []*GetAllRisks_Risks_Edges_Node_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllRisks_Risks_Edges_Node_Programs) GetEdges() []*GetAllRisks_Risks_Edges_Node_Programs_Edges {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node_Programs{}
	}
	return t.Edges
}

type GetAllRisks_Risks_Edges_Node_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllRisks_Risks_Edges_Node_Editors) GetID() string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node_Editors{}
	}
	return t.ID
}
func (t *GetAllRisks_Risks_Edges_Node_Editors) GetName() string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node_Editors{}
	}
	return t.Name
}

type GetAllRisks_Risks_Edges_Node_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllRisks_Risks_Edges_Node_Viewers) GetID() string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node_Viewers{}
	}
	return t.ID
}
func (t *GetAllRisks_Risks_Edges_Node_Viewers) GetName() string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node_Viewers{}
	}
	return t.Name
}

type GetAllRisks_Risks_Edges_Node_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllRisks_Risks_Edges_Node_BlockedGroups) GetID() string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node_BlockedGroups{}
	}
	return t.ID
}
func (t *GetAllRisks_Risks_Edges_Node_BlockedGroups) GetName() string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node_BlockedGroups{}
	}
	return t.Name
}

type GetAllRisks_Risks_Edges_Node_Stakeholder struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllRisks_Risks_Edges_Node_Stakeholder) GetID() string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node_Stakeholder{}
	}
	return t.ID
}
func (t *GetAllRisks_Risks_Edges_Node_Stakeholder) GetName() string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node_Stakeholder{}
	}
	return t.Name
}

type GetAllRisks_Risks_Edges_Node_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllRisks_Risks_Edges_Node_Delegate) GetID() string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node_Delegate{}
	}
	return t.ID
}
func (t *GetAllRisks_Risks_Edges_Node_Delegate) GetName() string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node_Delegate{}
	}
	return t.Name
}

type GetAllRisks_Risks_Edges_Node struct {
	BlockedGroups []*GetAllRisks_Risks_Edges_Node_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	BusinessCosts *string                                       "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	CreatedAt     *time.Time                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate      *GetAllRisks_Risks_Edges_Node_Delegate        "json:\"delegate,omitempty\" graphql:\"delegate\""
	Details       *string                                       "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                                        "json:\"displayID\" graphql:\"displayID\""
	Editors       []*GetAllRisks_Risks_Edges_Node_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID            string                                        "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact                             "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood                         "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string                                       "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                                        "json:\"name\" graphql:\"name\""
	Programs      GetAllRisks_Risks_Edges_Node_Programs         "json:\"programs\" graphql:\"programs\""
	RiskType      *string                                       "json:\"riskType,omitempty\" graphql:\"riskType\""
	Score         *int64                                        "json:\"score,omitempty\" graphql:\"score\""
	Stakeholder   *GetAllRisks_Risks_Edges_Node_Stakeholder     "json:\"stakeholder,omitempty\" graphql:\"stakeholder\""
	Status        *enums.RiskStatus                             "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string                                      "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers       []*GetAllRisks_Risks_Edges_Node_Viewers       "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *GetAllRisks_Risks_Edges_Node) GetBlockedGroups() []*GetAllRisks_Risks_Edges_Node_BlockedGroups {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.BlockedGroups
}
func (t *GetAllRisks_Risks_Edges_Node) GetBusinessCosts() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.BusinessCosts
}
func (t *GetAllRisks_Risks_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllRisks_Risks_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllRisks_Risks_Edges_Node) GetDelegate() *GetAllRisks_Risks_Edges_Node_Delegate {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Delegate
}
func (t *GetAllRisks_Risks_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllRisks_Risks_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllRisks_Risks_Edges_Node) GetEditors() []*GetAllRisks_Risks_Edges_Node_Editors {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Editors
}
func (t *GetAllRisks_Risks_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllRisks_Risks_Edges_Node) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Impact
}
func (t *GetAllRisks_Risks_Edges_Node) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Likelihood
}
func (t *GetAllRisks_Risks_Edges_Node) GetMitigation() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Mitigation
}
func (t *GetAllRisks_Risks_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllRisks_Risks_Edges_Node) GetPrograms() *GetAllRisks_Risks_Edges_Node_Programs {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return &t.Programs
}
func (t *GetAllRisks_Risks_Edges_Node) GetRiskType() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.RiskType
}
func (t *GetAllRisks_Risks_Edges_Node) GetScore() *int64 {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Score
}
func (t *GetAllRisks_Risks_Edges_Node) GetStakeholder() *GetAllRisks_Risks_Edges_Node_Stakeholder {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Stakeholder
}
func (t *GetAllRisks_Risks_Edges_Node) GetStatus() *enums.RiskStatus {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllRisks_Risks_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllRisks_Risks_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllRisks_Risks_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllRisks_Risks_Edges_Node) GetViewers() []*GetAllRisks_Risks_Edges_Node_Viewers {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Viewers
}

type GetAllRisks_Risks_Edges struct {
	Node *GetAllRisks_Risks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllRisks_Risks_Edges) GetNode() *GetAllRisks_Risks_Edges_Node {
	if t == nil {
		t = &GetAllRisks_Risks_Edges{}
	}
	return t.Node
}

type GetAllRisks_Risks struct {
	Edges []*GetAllRisks_Risks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllRisks_Risks) GetEdges() []*GetAllRisks_Risks_Edges {
	if t == nil {
		t = &GetAllRisks_Risks{}
	}
	return t.Edges
}

type GetRiskByID_Risk_Programs_Edges_Node struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRiskByID_Risk_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetRiskByID_Risk_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GetRiskByID_Risk_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GetRiskByID_Risk_Programs_Edges_Node{}
	}
	return t.Name
}

type GetRiskByID_Risk_Programs_Edges struct {
	Node *GetRiskByID_Risk_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetRiskByID_Risk_Programs_Edges) GetNode() *GetRiskByID_Risk_Programs_Edges_Node {
	if t == nil {
		t = &GetRiskByID_Risk_Programs_Edges{}
	}
	return t.Node
}

type GetRiskByID_Risk_Programs struct {
	Edges []*GetRiskByID_Risk_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetRiskByID_Risk_Programs) GetEdges() []*GetRiskByID_Risk_Programs_Edges {
	if t == nil {
		t = &GetRiskByID_Risk_Programs{}
	}
	return t.Edges
}

type GetRiskByID_Risk_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRiskByID_Risk_Editors) GetID() string {
	if t == nil {
		t = &GetRiskByID_Risk_Editors{}
	}
	return t.ID
}
func (t *GetRiskByID_Risk_Editors) GetName() string {
	if t == nil {
		t = &GetRiskByID_Risk_Editors{}
	}
	return t.Name
}

type GetRiskByID_Risk_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRiskByID_Risk_Viewers) GetID() string {
	if t == nil {
		t = &GetRiskByID_Risk_Viewers{}
	}
	return t.ID
}
func (t *GetRiskByID_Risk_Viewers) GetName() string {
	if t == nil {
		t = &GetRiskByID_Risk_Viewers{}
	}
	return t.Name
}

type GetRiskByID_Risk_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRiskByID_Risk_BlockedGroups) GetID() string {
	if t == nil {
		t = &GetRiskByID_Risk_BlockedGroups{}
	}
	return t.ID
}
func (t *GetRiskByID_Risk_BlockedGroups) GetName() string {
	if t == nil {
		t = &GetRiskByID_Risk_BlockedGroups{}
	}
	return t.Name
}

type GetRiskByID_Risk_Stakeholder struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRiskByID_Risk_Stakeholder) GetID() string {
	if t == nil {
		t = &GetRiskByID_Risk_Stakeholder{}
	}
	return t.ID
}
func (t *GetRiskByID_Risk_Stakeholder) GetName() string {
	if t == nil {
		t = &GetRiskByID_Risk_Stakeholder{}
	}
	return t.Name
}

type GetRiskByID_Risk_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRiskByID_Risk_Delegate) GetID() string {
	if t == nil {
		t = &GetRiskByID_Risk_Delegate{}
	}
	return t.ID
}
func (t *GetRiskByID_Risk_Delegate) GetName() string {
	if t == nil {
		t = &GetRiskByID_Risk_Delegate{}
	}
	return t.Name
}

type GetRiskByID_Risk struct {
	BlockedGroups []*GetRiskByID_Risk_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	BusinessCosts *string                           "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	CreatedAt     *time.Time                        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate      *GetRiskByID_Risk_Delegate        "json:\"delegate,omitempty\" graphql:\"delegate\""
	Details       *string                           "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                            "json:\"displayID\" graphql:\"displayID\""
	Editors       []*GetRiskByID_Risk_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID            string                            "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact                 "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood             "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string                           "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                            "json:\"name\" graphql:\"name\""
	Programs      GetRiskByID_Risk_Programs         "json:\"programs\" graphql:\"programs\""
	RiskType      *string                           "json:\"riskType,omitempty\" graphql:\"riskType\""
	Score         *int64                            "json:\"score,omitempty\" graphql:\"score\""
	Stakeholder   *GetRiskByID_Risk_Stakeholder     "json:\"stakeholder,omitempty\" graphql:\"stakeholder\""
	Status        *enums.RiskStatus                 "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string                          "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time                        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers       []*GetRiskByID_Risk_Viewers       "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *GetRiskByID_Risk) GetBlockedGroups() []*GetRiskByID_Risk_BlockedGroups {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.BlockedGroups
}
func (t *GetRiskByID_Risk) GetBusinessCosts() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.BusinessCosts
}
func (t *GetRiskByID_Risk) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.CreatedAt
}
func (t *GetRiskByID_Risk) GetCreatedBy() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.CreatedBy
}
func (t *GetRiskByID_Risk) GetDelegate() *GetRiskByID_Risk_Delegate {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Delegate
}
func (t *GetRiskByID_Risk) GetDetails() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Details
}
func (t *GetRiskByID_Risk) GetDisplayID() string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.DisplayID
}
func (t *GetRiskByID_Risk) GetEditors() []*GetRiskByID_Risk_Editors {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Editors
}
func (t *GetRiskByID_Risk) GetID() string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.ID
}
func (t *GetRiskByID_Risk) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Impact
}
func (t *GetRiskByID_Risk) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Likelihood
}
func (t *GetRiskByID_Risk) GetMitigation() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Mitigation
}
func (t *GetRiskByID_Risk) GetName() string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Name
}
func (t *GetRiskByID_Risk) GetPrograms() *GetRiskByID_Risk_Programs {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return &t.Programs
}
func (t *GetRiskByID_Risk) GetRiskType() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.RiskType
}
func (t *GetRiskByID_Risk) GetScore() *int64 {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Score
}
func (t *GetRiskByID_Risk) GetStakeholder() *GetRiskByID_Risk_Stakeholder {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Stakeholder
}
func (t *GetRiskByID_Risk) GetStatus() *enums.RiskStatus {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Status
}
func (t *GetRiskByID_Risk) GetTags() []string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Tags
}
func (t *GetRiskByID_Risk) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.UpdatedAt
}
func (t *GetRiskByID_Risk) GetUpdatedBy() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.UpdatedBy
}
func (t *GetRiskByID_Risk) GetViewers() []*GetRiskByID_Risk_Viewers {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Viewers
}

type GetRisks_Risks_Edges_Node_Programs_Edges_Node struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRisks_Risks_Edges_Node_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GetRisks_Risks_Edges_Node_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node_Programs_Edges_Node{}
	}
	return t.Name
}

type GetRisks_Risks_Edges_Node_Programs_Edges struct {
	Node *GetRisks_Risks_Edges_Node_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetRisks_Risks_Edges_Node_Programs_Edges) GetNode() *GetRisks_Risks_Edges_Node_Programs_Edges_Node {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node_Programs_Edges{}
	}
	return t.Node
}

type GetRisks_Risks_Edges_Node_Programs struct {
	Edges []*GetRisks_Risks_Edges_Node_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetRisks_Risks_Edges_Node_Programs) GetEdges() []*GetRisks_Risks_Edges_Node_Programs_Edges {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node_Programs{}
	}
	return t.Edges
}

type GetRisks_Risks_Edges_Node_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRisks_Risks_Edges_Node_Editors) GetID() string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node_Editors{}
	}
	return t.ID
}
func (t *GetRisks_Risks_Edges_Node_Editors) GetName() string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node_Editors{}
	}
	return t.Name
}

type GetRisks_Risks_Edges_Node_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRisks_Risks_Edges_Node_Viewers) GetID() string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node_Viewers{}
	}
	return t.ID
}
func (t *GetRisks_Risks_Edges_Node_Viewers) GetName() string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node_Viewers{}
	}
	return t.Name
}

type GetRisks_Risks_Edges_Node_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRisks_Risks_Edges_Node_BlockedGroups) GetID() string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node_BlockedGroups{}
	}
	return t.ID
}
func (t *GetRisks_Risks_Edges_Node_BlockedGroups) GetName() string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node_BlockedGroups{}
	}
	return t.Name
}

type GetRisks_Risks_Edges_Node_Stakeholder struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRisks_Risks_Edges_Node_Stakeholder) GetID() string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node_Stakeholder{}
	}
	return t.ID
}
func (t *GetRisks_Risks_Edges_Node_Stakeholder) GetName() string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node_Stakeholder{}
	}
	return t.Name
}

type GetRisks_Risks_Edges_Node_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRisks_Risks_Edges_Node_Delegate) GetID() string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node_Delegate{}
	}
	return t.ID
}
func (t *GetRisks_Risks_Edges_Node_Delegate) GetName() string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node_Delegate{}
	}
	return t.Name
}

type GetRisks_Risks_Edges_Node struct {
	BlockedGroups []*GetRisks_Risks_Edges_Node_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	BusinessCosts *string                                    "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	CreatedAt     *time.Time                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate      *GetRisks_Risks_Edges_Node_Delegate        "json:\"delegate,omitempty\" graphql:\"delegate\""
	Details       *string                                    "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                                     "json:\"displayID\" graphql:\"displayID\""
	Editors       []*GetRisks_Risks_Edges_Node_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID            string                                     "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact                          "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood                      "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string                                    "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                                     "json:\"name\" graphql:\"name\""
	Programs      GetRisks_Risks_Edges_Node_Programs         "json:\"programs\" graphql:\"programs\""
	RiskType      *string                                    "json:\"riskType,omitempty\" graphql:\"riskType\""
	Score         *int64                                     "json:\"score,omitempty\" graphql:\"score\""
	Stakeholder   *GetRisks_Risks_Edges_Node_Stakeholder     "json:\"stakeholder,omitempty\" graphql:\"stakeholder\""
	Status        *enums.RiskStatus                          "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string                                   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers       []*GetRisks_Risks_Edges_Node_Viewers       "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *GetRisks_Risks_Edges_Node) GetBlockedGroups() []*GetRisks_Risks_Edges_Node_BlockedGroups {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.BlockedGroups
}
func (t *GetRisks_Risks_Edges_Node) GetBusinessCosts() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.BusinessCosts
}
func (t *GetRisks_Risks_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetRisks_Risks_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetRisks_Risks_Edges_Node) GetDelegate() *GetRisks_Risks_Edges_Node_Delegate {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Delegate
}
func (t *GetRisks_Risks_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Details
}
func (t *GetRisks_Risks_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetRisks_Risks_Edges_Node) GetEditors() []*GetRisks_Risks_Edges_Node_Editors {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Editors
}
func (t *GetRisks_Risks_Edges_Node) GetID() string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.ID
}
func (t *GetRisks_Risks_Edges_Node) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Impact
}
func (t *GetRisks_Risks_Edges_Node) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Likelihood
}
func (t *GetRisks_Risks_Edges_Node) GetMitigation() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Mitigation
}
func (t *GetRisks_Risks_Edges_Node) GetName() string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Name
}
func (t *GetRisks_Risks_Edges_Node) GetPrograms() *GetRisks_Risks_Edges_Node_Programs {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return &t.Programs
}
func (t *GetRisks_Risks_Edges_Node) GetRiskType() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.RiskType
}
func (t *GetRisks_Risks_Edges_Node) GetScore() *int64 {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Score
}
func (t *GetRisks_Risks_Edges_Node) GetStakeholder() *GetRisks_Risks_Edges_Node_Stakeholder {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Stakeholder
}
func (t *GetRisks_Risks_Edges_Node) GetStatus() *enums.RiskStatus {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Status
}
func (t *GetRisks_Risks_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Tags
}
func (t *GetRisks_Risks_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetRisks_Risks_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetRisks_Risks_Edges_Node) GetViewers() []*GetRisks_Risks_Edges_Node_Viewers {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Viewers
}

type GetRisks_Risks_Edges struct {
	Node *GetRisks_Risks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetRisks_Risks_Edges) GetNode() *GetRisks_Risks_Edges_Node {
	if t == nil {
		t = &GetRisks_Risks_Edges{}
	}
	return t.Node
}

type GetRisks_Risks struct {
	Edges []*GetRisks_Risks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetRisks_Risks) GetEdges() []*GetRisks_Risks_Edges {
	if t == nil {
		t = &GetRisks_Risks{}
	}
	return t.Edges
}

type UpdateRisk_UpdateRisk_Risk_Programs_Edges_Node struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateRisk_UpdateRisk_Risk_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateRisk_UpdateRisk_Risk_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk_Programs_Edges_Node{}
	}
	return t.Name
}

type UpdateRisk_UpdateRisk_Risk_Programs_Edges struct {
	Node *UpdateRisk_UpdateRisk_Risk_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateRisk_UpdateRisk_Risk_Programs_Edges) GetNode() *UpdateRisk_UpdateRisk_Risk_Programs_Edges_Node {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk_Programs_Edges{}
	}
	return t.Node
}

type UpdateRisk_UpdateRisk_Risk_Programs struct {
	Edges []*UpdateRisk_UpdateRisk_Risk_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateRisk_UpdateRisk_Risk_Programs) GetEdges() []*UpdateRisk_UpdateRisk_Risk_Programs_Edges {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk_Programs{}
	}
	return t.Edges
}

type UpdateRisk_UpdateRisk_Risk_Editors struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateRisk_UpdateRisk_Risk_Editors) GetID() string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk_Editors{}
	}
	return t.ID
}
func (t *UpdateRisk_UpdateRisk_Risk_Editors) GetName() string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk_Editors{}
	}
	return t.Name
}

type UpdateRisk_UpdateRisk_Risk_Viewers struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateRisk_UpdateRisk_Risk_Viewers) GetID() string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk_Viewers{}
	}
	return t.ID
}
func (t *UpdateRisk_UpdateRisk_Risk_Viewers) GetName() string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk_Viewers{}
	}
	return t.Name
}

type UpdateRisk_UpdateRisk_Risk_BlockedGroups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateRisk_UpdateRisk_Risk_BlockedGroups) GetID() string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk_BlockedGroups{}
	}
	return t.ID
}
func (t *UpdateRisk_UpdateRisk_Risk_BlockedGroups) GetName() string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk_BlockedGroups{}
	}
	return t.Name
}

type UpdateRisk_UpdateRisk_Risk_Stakeholder struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateRisk_UpdateRisk_Risk_Stakeholder) GetID() string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk_Stakeholder{}
	}
	return t.ID
}
func (t *UpdateRisk_UpdateRisk_Risk_Stakeholder) GetName() string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk_Stakeholder{}
	}
	return t.Name
}

type UpdateRisk_UpdateRisk_Risk_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateRisk_UpdateRisk_Risk_Delegate) GetID() string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk_Delegate{}
	}
	return t.ID
}
func (t *UpdateRisk_UpdateRisk_Risk_Delegate) GetName() string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk_Delegate{}
	}
	return t.Name
}

type UpdateRisk_UpdateRisk_Risk struct {
	BlockedGroups []*UpdateRisk_UpdateRisk_Risk_BlockedGroups "json:\"blockedGroups,omitempty\" graphql:\"blockedGroups\""
	BusinessCosts *string                                     "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	CreatedAt     *time.Time                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate      *UpdateRisk_UpdateRisk_Risk_Delegate        "json:\"delegate,omitempty\" graphql:\"delegate\""
	Details       *string                                     "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                                      "json:\"displayID\" graphql:\"displayID\""
	Editors       []*UpdateRisk_UpdateRisk_Risk_Editors       "json:\"editors,omitempty\" graphql:\"editors\""
	ID            string                                      "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact                           "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood                       "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string                                     "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                                      "json:\"name\" graphql:\"name\""
	Programs      UpdateRisk_UpdateRisk_Risk_Programs         "json:\"programs\" graphql:\"programs\""
	RiskType      *string                                     "json:\"riskType,omitempty\" graphql:\"riskType\""
	Score         *int64                                      "json:\"score,omitempty\" graphql:\"score\""
	Stakeholder   *UpdateRisk_UpdateRisk_Risk_Stakeholder     "json:\"stakeholder,omitempty\" graphql:\"stakeholder\""
	Status        *enums.RiskStatus                           "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string                                    "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Viewers       []*UpdateRisk_UpdateRisk_Risk_Viewers       "json:\"viewers,omitempty\" graphql:\"viewers\""
}

func (t *UpdateRisk_UpdateRisk_Risk) GetBlockedGroups() []*UpdateRisk_UpdateRisk_Risk_BlockedGroups {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.BlockedGroups
}
func (t *UpdateRisk_UpdateRisk_Risk) GetBusinessCosts() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.BusinessCosts
}
func (t *UpdateRisk_UpdateRisk_Risk) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.CreatedAt
}
func (t *UpdateRisk_UpdateRisk_Risk) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.CreatedBy
}
func (t *UpdateRisk_UpdateRisk_Risk) GetDelegate() *UpdateRisk_UpdateRisk_Risk_Delegate {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Delegate
}
func (t *UpdateRisk_UpdateRisk_Risk) GetDetails() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Details
}
func (t *UpdateRisk_UpdateRisk_Risk) GetDisplayID() string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.DisplayID
}
func (t *UpdateRisk_UpdateRisk_Risk) GetEditors() []*UpdateRisk_UpdateRisk_Risk_Editors {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Editors
}
func (t *UpdateRisk_UpdateRisk_Risk) GetID() string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.ID
}
func (t *UpdateRisk_UpdateRisk_Risk) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Impact
}
func (t *UpdateRisk_UpdateRisk_Risk) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Likelihood
}
func (t *UpdateRisk_UpdateRisk_Risk) GetMitigation() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Mitigation
}
func (t *UpdateRisk_UpdateRisk_Risk) GetName() string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Name
}
func (t *UpdateRisk_UpdateRisk_Risk) GetPrograms() *UpdateRisk_UpdateRisk_Risk_Programs {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return &t.Programs
}
func (t *UpdateRisk_UpdateRisk_Risk) GetRiskType() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.RiskType
}
func (t *UpdateRisk_UpdateRisk_Risk) GetScore() *int64 {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Score
}
func (t *UpdateRisk_UpdateRisk_Risk) GetStakeholder() *UpdateRisk_UpdateRisk_Risk_Stakeholder {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Stakeholder
}
func (t *UpdateRisk_UpdateRisk_Risk) GetStatus() *enums.RiskStatus {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Status
}
func (t *UpdateRisk_UpdateRisk_Risk) GetTags() []string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Tags
}
func (t *UpdateRisk_UpdateRisk_Risk) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.UpdatedAt
}
func (t *UpdateRisk_UpdateRisk_Risk) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.UpdatedBy
}
func (t *UpdateRisk_UpdateRisk_Risk) GetViewers() []*UpdateRisk_UpdateRisk_Risk_Viewers {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Viewers
}

type UpdateRisk_UpdateRisk struct {
	Risk UpdateRisk_UpdateRisk_Risk "json:\"risk\" graphql:\"risk\""
}

func (t *UpdateRisk_UpdateRisk) GetRisk() *UpdateRisk_UpdateRisk_Risk {
	if t == nil {
		t = &UpdateRisk_UpdateRisk{}
	}
	return &t.Risk
}

type GetAllRiskHistories_RiskHistories_Edges_Node struct {
	BusinessCosts *string               "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	Category      *string               "json:\"category,omitempty\" graphql:\"category\""
	CreatedAt     *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details       *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                "json:\"displayID\" graphql:\"displayID\""
	HistoryTime   time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID            string                "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact     "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string               "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                "json:\"name\" graphql:\"name\""
	Operation     history.OpType        "json:\"operation\" graphql:\"operation\""
	OwnerID       *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref           *string               "json:\"ref,omitempty\" graphql:\"ref\""
	RiskType      *string               "json:\"riskType,omitempty\" graphql:\"riskType\""
	Score         *int64                "json:\"score,omitempty\" graphql:\"score\""
	Status        *enums.RiskStatus     "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetBusinessCosts() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.BusinessCosts
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Impact
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Likelihood
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetMitigation() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Mitigation
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetRiskType() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.RiskType
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetScore() *int64 {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Score
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetStatus() *enums.RiskStatus {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllRiskHistories_RiskHistories_Edges struct {
	Node *GetAllRiskHistories_RiskHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllRiskHistories_RiskHistories_Edges) GetNode() *GetAllRiskHistories_RiskHistories_Edges_Node {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges{}
	}
	return t.Node
}

type GetAllRiskHistories_RiskHistories struct {
	Edges []*GetAllRiskHistories_RiskHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllRiskHistories_RiskHistories) GetEdges() []*GetAllRiskHistories_RiskHistories_Edges {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories{}
	}
	return t.Edges
}

type GetRiskHistories_RiskHistories_Edges_Node struct {
	BusinessCosts *string               "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	Category      *string               "json:\"category,omitempty\" graphql:\"category\""
	CreatedAt     *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Details       *string               "json:\"details,omitempty\" graphql:\"details\""
	DisplayID     string                "json:\"displayID\" graphql:\"displayID\""
	HistoryTime   time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID            string                "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact     "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string               "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                "json:\"name\" graphql:\"name\""
	Operation     history.OpType        "json:\"operation\" graphql:\"operation\""
	OwnerID       *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref           *string               "json:\"ref,omitempty\" graphql:\"ref\""
	RiskType      *string               "json:\"riskType,omitempty\" graphql:\"riskType\""
	Score         *int64                "json:\"score,omitempty\" graphql:\"score\""
	Status        *enums.RiskStatus     "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetRiskHistories_RiskHistories_Edges_Node) GetBusinessCosts() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.BusinessCosts
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Category
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Impact
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Likelihood
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetMitigation() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Mitigation
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetRiskType() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.RiskType
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetScore() *int64 {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Score
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetStatus() *enums.RiskStatus {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetRiskHistories_RiskHistories_Edges struct {
	Node *GetRiskHistories_RiskHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetRiskHistories_RiskHistories_Edges) GetNode() *GetRiskHistories_RiskHistories_Edges_Node {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges{}
	}
	return t.Node
}

type GetRiskHistories_RiskHistories struct {
	Edges []*GetRiskHistories_RiskHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetRiskHistories_RiskHistories) GetEdges() []*GetRiskHistories_RiskHistories_Edges {
	if t == nil {
		t = &GetRiskHistories_RiskHistories{}
	}
	return t.Edges
}

type GlobalSearch_Search_APITokens_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_APITokens_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_APITokens_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_APITokens_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_APITokens_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_APITokens_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_APITokens_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_APITokens_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_APITokens_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_APITokens_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_APITokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_APITokens_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_APITokens_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_APITokens_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_APITokens_Edges struct {
	Node *GlobalSearch_Search_APITokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_APITokens_Edges) GetNode() *GlobalSearch_Search_APITokens_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_APITokens_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_APITokens struct {
	Edges      []*GlobalSearch_Search_APITokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_APITokens_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_APITokens) GetEdges() []*GlobalSearch_Search_APITokens_Edges {
	if t == nil {
		t = &GlobalSearch_Search_APITokens{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_APITokens) GetPageInfo() *GlobalSearch_Search_APITokens_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_APITokens{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_APITokens) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_APITokens{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_ActionPlans_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_ActionPlans_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_ActionPlans_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_ActionPlans_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_ActionPlans_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_ActionPlans_Edges_Node struct {
	Details *string  "json:\"details,omitempty\" graphql:\"details\""
	ID      string   "json:\"id\" graphql:\"id\""
	Name    string   "json:\"name\" graphql:\"name\""
	Tags    []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_ActionPlans_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans_Edges_Node{}
	}
	return t.Details
}
func (t *GlobalSearch_Search_ActionPlans_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_ActionPlans_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_ActionPlans_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_ActionPlans_Edges struct {
	Node *GlobalSearch_Search_ActionPlans_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_ActionPlans_Edges) GetNode() *GlobalSearch_Search_ActionPlans_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_ActionPlans struct {
	Edges      []*GlobalSearch_Search_ActionPlans_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_ActionPlans_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_ActionPlans) GetEdges() []*GlobalSearch_Search_ActionPlans_Edges {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_ActionPlans) GetPageInfo() *GlobalSearch_Search_ActionPlans_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_ActionPlans) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_ActionPlans{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Contacts_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Contacts_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Contacts_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Contacts_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Contacts_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Contacts_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Contacts_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Contacts_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Contacts_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Contacts_Edges_Node struct {
	Email    *string  "json:\"email,omitempty\" graphql:\"email\""
	FullName string   "json:\"fullName\" graphql:\"fullName\""
	ID       string   "json:\"id\" graphql:\"id\""
	Tags     []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Contacts_Edges_Node) GetEmail() *string {
	if t == nil {
		t = &GlobalSearch_Search_Contacts_Edges_Node{}
	}
	return t.Email
}
func (t *GlobalSearch_Search_Contacts_Edges_Node) GetFullName() string {
	if t == nil {
		t = &GlobalSearch_Search_Contacts_Edges_Node{}
	}
	return t.FullName
}
func (t *GlobalSearch_Search_Contacts_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Contacts_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Contacts_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Contacts_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Contacts_Edges struct {
	Node *GlobalSearch_Search_Contacts_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Contacts_Edges) GetNode() *GlobalSearch_Search_Contacts_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Contacts_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Contacts struct {
	Edges      []*GlobalSearch_Search_Contacts_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Contacts_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Contacts) GetEdges() []*GlobalSearch_Search_Contacts_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Contacts{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Contacts) GetPageInfo() *GlobalSearch_Search_Contacts_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Contacts{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Contacts) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Contacts{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Controls_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Controls_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Controls_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Controls_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Controls_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Controls_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Controls_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Controls_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Controls_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Controls_Edges_Node struct {
	Category         *string  "json:\"category,omitempty\" graphql:\"category\""
	Description      *string  "json:\"description,omitempty\" graphql:\"description\""
	DisplayID        string   "json:\"displayID\" graphql:\"displayID\""
	ID               string   "json:\"id\" graphql:\"id\""
	MappedCategories []string "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	RefCode          string   "json:\"refCode\" graphql:\"refCode\""
	Subcategory      *string  "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags             []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Controls_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GlobalSearch_Search_Controls_Edges_Node{}
	}
	return t.Category
}
func (t *GlobalSearch_Search_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GlobalSearch_Search_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *GlobalSearch_Search_Controls_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_Controls_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Controls_Edges_Node) GetMappedCategories() []string {
	if t == nil {
		t = &GlobalSearch_Search_Controls_Edges_Node{}
	}
	return t.MappedCategories
}
func (t *GlobalSearch_Search_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GlobalSearch_Search_Controls_Edges_Node{}
	}
	return t.RefCode
}
func (t *GlobalSearch_Search_Controls_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GlobalSearch_Search_Controls_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GlobalSearch_Search_Controls_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Controls_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Controls_Edges struct {
	Node *GlobalSearch_Search_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Controls_Edges) GetNode() *GlobalSearch_Search_Controls_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Controls_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Controls struct {
	Edges      []*GlobalSearch_Search_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Controls_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Controls) GetEdges() []*GlobalSearch_Search_Controls_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Controls{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Controls) GetPageInfo() *GlobalSearch_Search_Controls_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Controls{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Controls{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_ControlImplementations_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_ControlImplementations_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_ControlImplementations_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_ControlImplementations_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_ControlImplementations_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_ControlImplementations_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_ControlImplementations_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_ControlImplementations_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_ControlImplementations_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_ControlImplementations_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_ControlImplementations_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_ControlImplementations_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_ControlImplementations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_ControlImplementations_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_ControlImplementations_Edges struct {
	Node *GlobalSearch_Search_ControlImplementations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_ControlImplementations_Edges) GetNode() *GlobalSearch_Search_ControlImplementations_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_ControlImplementations_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_ControlImplementations struct {
	Edges      []*GlobalSearch_Search_ControlImplementations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_ControlImplementations_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_ControlImplementations) GetEdges() []*GlobalSearch_Search_ControlImplementations_Edges {
	if t == nil {
		t = &GlobalSearch_Search_ControlImplementations{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_ControlImplementations) GetPageInfo() *GlobalSearch_Search_ControlImplementations_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_ControlImplementations{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_ControlImplementations) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_ControlImplementations{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_ControlObjectives_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_ControlObjectives_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_ControlObjectives_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_ControlObjectives_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_ControlObjectives_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_ControlObjectives_Edges_Node struct {
	Category    *string  "json:\"category,omitempty\" graphql:\"category\""
	DisplayID   string   "json:\"displayID\" graphql:\"displayID\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	Subcategory *string  "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_ControlObjectives_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives_Edges_Node{}
	}
	return t.Category
}
func (t *GlobalSearch_Search_ControlObjectives_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_ControlObjectives_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_ControlObjectives_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_ControlObjectives_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GlobalSearch_Search_ControlObjectives_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_ControlObjectives_Edges struct {
	Node *GlobalSearch_Search_ControlObjectives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_ControlObjectives_Edges) GetNode() *GlobalSearch_Search_ControlObjectives_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_ControlObjectives struct {
	Edges      []*GlobalSearch_Search_ControlObjectives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_ControlObjectives_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                          "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_ControlObjectives) GetEdges() []*GlobalSearch_Search_ControlObjectives_Edges {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_ControlObjectives) GetPageInfo() *GlobalSearch_Search_ControlObjectives_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_ControlObjectives) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_ControlObjectives{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_DocumentData_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_DocumentData_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_DocumentData_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_DocumentData_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_DocumentData_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_DocumentData_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_DocumentData_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_DocumentData_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_DocumentData_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_DocumentData_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_DocumentData_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_DocumentData_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_DocumentData_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_DocumentData_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_DocumentData_Edges struct {
	Node *GlobalSearch_Search_DocumentData_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_DocumentData_Edges) GetNode() *GlobalSearch_Search_DocumentData_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_DocumentData_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_DocumentData struct {
	Edges      []*GlobalSearch_Search_DocumentData_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_DocumentData_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_DocumentData) GetEdges() []*GlobalSearch_Search_DocumentData_Edges {
	if t == nil {
		t = &GlobalSearch_Search_DocumentData{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_DocumentData) GetPageInfo() *GlobalSearch_Search_DocumentData_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_DocumentData{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_DocumentData) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_DocumentData{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Entities_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Entities_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Entities_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Entities_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Entities_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Entities_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Entities_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Entities_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Entities_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Entities_Edges_Node struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	DisplayName *string  "json:\"displayName,omitempty\" graphql:\"displayName\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        *string  "json:\"name,omitempty\" graphql:\"name\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Entities_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GlobalSearch_Search_Entities_Edges_Node{}
	}
	return t.Description
}
func (t *GlobalSearch_Search_Entities_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GlobalSearch_Search_Entities_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GlobalSearch_Search_Entities_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Entities_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Entities_Edges_Node) GetName() *string {
	if t == nil {
		t = &GlobalSearch_Search_Entities_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Entities_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Entities_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Entities_Edges struct {
	Node *GlobalSearch_Search_Entities_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Entities_Edges) GetNode() *GlobalSearch_Search_Entities_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Entities_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Entities struct {
	Edges      []*GlobalSearch_Search_Entities_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Entities_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Entities) GetEdges() []*GlobalSearch_Search_Entities_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Entities{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Entities) GetPageInfo() *GlobalSearch_Search_Entities_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Entities{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Entities) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Entities{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_EntityTypes_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_EntityTypes_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_EntityTypes_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_EntityTypes_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_EntityTypes_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_EntityTypes_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_EntityTypes_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_EntityTypes_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_EntityTypes_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_EntityTypes_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_EntityTypes_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_EntityTypes_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_EntityTypes_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_EntityTypes_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_EntityTypes_Edges struct {
	Node *GlobalSearch_Search_EntityTypes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_EntityTypes_Edges) GetNode() *GlobalSearch_Search_EntityTypes_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_EntityTypes_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_EntityTypes struct {
	Edges      []*GlobalSearch_Search_EntityTypes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_EntityTypes_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_EntityTypes) GetEdges() []*GlobalSearch_Search_EntityTypes_Edges {
	if t == nil {
		t = &GlobalSearch_Search_EntityTypes{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_EntityTypes) GetPageInfo() *GlobalSearch_Search_EntityTypes_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_EntityTypes{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_EntityTypes) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_EntityTypes{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Events_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Events_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Events_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Events_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Events_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Events_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Events_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Events_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Events_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Events_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Events_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Events_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Events_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Events_Edges struct {
	Node *GlobalSearch_Search_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Events_Edges) GetNode() *GlobalSearch_Search_Events_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Events_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Events struct {
	Edges      []*GlobalSearch_Search_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Events_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Events) GetEdges() []*GlobalSearch_Search_Events_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Events{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Events) GetPageInfo() *GlobalSearch_Search_Events_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Events{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Events) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Events{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Evidences_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Evidences_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Evidences_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Evidences_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Evidences_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Evidences_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Evidences_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Evidences_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Evidences_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Evidences_Edges_Node struct {
	DisplayID string   "json:\"displayID\" graphql:\"displayID\""
	ID        string   "json:\"id\" graphql:\"id\""
	Name      string   "json:\"name\" graphql:\"name\""
	Tags      []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Evidences_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_Evidences_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_Evidences_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Evidences_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Evidences_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Evidences_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Evidences_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Evidences_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Evidences_Edges struct {
	Node *GlobalSearch_Search_Evidences_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Evidences_Edges) GetNode() *GlobalSearch_Search_Evidences_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Evidences_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Evidences struct {
	Edges      []*GlobalSearch_Search_Evidences_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Evidences_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Evidences) GetEdges() []*GlobalSearch_Search_Evidences_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Evidences{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Evidences) GetPageInfo() *GlobalSearch_Search_Evidences_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Evidences{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Evidences) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Evidences{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Files_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Files_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Files_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Files_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Files_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Files_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Files_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Files_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Files_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Files_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Files_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Files_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Files_Edges struct {
	Node *GlobalSearch_Search_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Files_Edges) GetNode() *GlobalSearch_Search_Files_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Files_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Files struct {
	Edges      []*GlobalSearch_Search_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Files_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Files) GetEdges() []*GlobalSearch_Search_Files_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Files{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Files) GetPageInfo() *GlobalSearch_Search_Files_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Files{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Files) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Files{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Groups_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Groups_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Groups_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Groups_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Groups_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Groups_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Groups_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Groups_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Groups_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Groups_Edges_Node struct {
	DisplayID   string   "json:\"displayID\" graphql:\"displayID\""
	DisplayName string   "json:\"displayName\" graphql:\"displayName\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Groups_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_Groups_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_Groups_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GlobalSearch_Search_Groups_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GlobalSearch_Search_Groups_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Groups_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Groups_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Groups_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Groups_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Groups_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Groups_Edges struct {
	Node *GlobalSearch_Search_Groups_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Groups_Edges) GetNode() *GlobalSearch_Search_Groups_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Groups_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Groups struct {
	Edges      []*GlobalSearch_Search_Groups_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Groups_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Groups) GetEdges() []*GlobalSearch_Search_Groups_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Groups{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Groups) GetPageInfo() *GlobalSearch_Search_Groups_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Groups{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Groups) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Groups{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Integrations_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Integrations_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Integrations_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Integrations_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Integrations_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Integrations_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Integrations_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Integrations_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Integrations_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Integrations_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Integrations_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Integrations_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Integrations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Integrations_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Integrations_Edges struct {
	Node *GlobalSearch_Search_Integrations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Integrations_Edges) GetNode() *GlobalSearch_Search_Integrations_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Integrations_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Integrations struct {
	Edges      []*GlobalSearch_Search_Integrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Integrations_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Integrations) GetEdges() []*GlobalSearch_Search_Integrations_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Integrations{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Integrations) GetPageInfo() *GlobalSearch_Search_Integrations_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Integrations{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Integrations) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Integrations{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_InternalPolicies_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_InternalPolicies_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_InternalPolicies_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_InternalPolicies_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_InternalPolicies_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_InternalPolicies_Edges_Node struct {
	Details   *string  "json:\"details,omitempty\" graphql:\"details\""
	DisplayID string   "json:\"displayID\" graphql:\"displayID\""
	ID        string   "json:\"id\" graphql:\"id\""
	Name      string   "json:\"name\" graphql:\"name\""
	Tags      []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_InternalPolicies_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies_Edges_Node{}
	}
	return t.Details
}
func (t *GlobalSearch_Search_InternalPolicies_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_InternalPolicies_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_InternalPolicies_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_InternalPolicies_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_InternalPolicies_Edges struct {
	Node *GlobalSearch_Search_InternalPolicies_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_InternalPolicies_Edges) GetNode() *GlobalSearch_Search_InternalPolicies_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_InternalPolicies struct {
	Edges      []*GlobalSearch_Search_InternalPolicies_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_InternalPolicies_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_InternalPolicies) GetEdges() []*GlobalSearch_Search_InternalPolicies_Edges {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_InternalPolicies) GetPageInfo() *GlobalSearch_Search_InternalPolicies_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_InternalPolicies) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_InternalPolicies{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Invites_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Invites_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Invites_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Invites_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Invites_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Invites_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Invites_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Invites_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Invites_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Invites_Edges_Node struct {
	ID        string "json:\"id\" graphql:\"id\""
	Recipient string "json:\"recipient\" graphql:\"recipient\""
}

func (t *GlobalSearch_Search_Invites_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Invites_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Invites_Edges_Node) GetRecipient() string {
	if t == nil {
		t = &GlobalSearch_Search_Invites_Edges_Node{}
	}
	return t.Recipient
}

type GlobalSearch_Search_Invites_Edges struct {
	Node *GlobalSearch_Search_Invites_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Invites_Edges) GetNode() *GlobalSearch_Search_Invites_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Invites_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Invites struct {
	Edges      []*GlobalSearch_Search_Invites_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Invites_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Invites) GetEdges() []*GlobalSearch_Search_Invites_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Invites{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Invites) GetPageInfo() *GlobalSearch_Search_Invites_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Invites{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Invites) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Invites{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_MappedControls_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_MappedControls_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_MappedControls_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_MappedControls_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_MappedControls_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_MappedControls_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_MappedControls_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_MappedControls_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_MappedControls_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_MappedControls_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_MappedControls_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_MappedControls_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_MappedControls_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_MappedControls_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_MappedControls_Edges struct {
	Node *GlobalSearch_Search_MappedControls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_MappedControls_Edges) GetNode() *GlobalSearch_Search_MappedControls_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_MappedControls_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_MappedControls struct {
	Edges      []*GlobalSearch_Search_MappedControls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_MappedControls_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                       "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_MappedControls) GetEdges() []*GlobalSearch_Search_MappedControls_Edges {
	if t == nil {
		t = &GlobalSearch_Search_MappedControls{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_MappedControls) GetPageInfo() *GlobalSearch_Search_MappedControls_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_MappedControls{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_MappedControls) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_MappedControls{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Narratives_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Narratives_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Narratives_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Narratives_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Narratives_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Narratives_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Narratives_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Narratives_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Narratives_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Narratives_Edges_Node struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	DisplayID   string   "json:\"displayID\" graphql:\"displayID\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Narratives_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GlobalSearch_Search_Narratives_Edges_Node{}
	}
	return t.Description
}
func (t *GlobalSearch_Search_Narratives_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_Narratives_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_Narratives_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Narratives_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Narratives_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Narratives_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Narratives_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Narratives_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Narratives_Edges struct {
	Node *GlobalSearch_Search_Narratives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Narratives_Edges) GetNode() *GlobalSearch_Search_Narratives_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Narratives_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Narratives struct {
	Edges      []*GlobalSearch_Search_Narratives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Narratives_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Narratives) GetEdges() []*GlobalSearch_Search_Narratives_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Narratives{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Narratives) GetPageInfo() *GlobalSearch_Search_Narratives_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Narratives{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Narratives) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Narratives{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_OrgSubscriptions_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_OrgSubscriptions_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_OrgSubscriptions_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_OrgSubscriptions_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_OrgSubscriptions_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_OrgSubscriptions_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_OrgSubscriptions_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_OrgSubscriptions_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_OrgSubscriptions_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_OrgSubscriptions_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_OrgSubscriptions_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_OrgSubscriptions_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_OrgSubscriptions_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_OrgSubscriptions_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_OrgSubscriptions_Edges struct {
	Node *GlobalSearch_Search_OrgSubscriptions_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_OrgSubscriptions_Edges) GetNode() *GlobalSearch_Search_OrgSubscriptions_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_OrgSubscriptions_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_OrgSubscriptions struct {
	Edges      []*GlobalSearch_Search_OrgSubscriptions_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_OrgSubscriptions_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                         "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_OrgSubscriptions) GetEdges() []*GlobalSearch_Search_OrgSubscriptions_Edges {
	if t == nil {
		t = &GlobalSearch_Search_OrgSubscriptions{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_OrgSubscriptions) GetPageInfo() *GlobalSearch_Search_OrgSubscriptions_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_OrgSubscriptions{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_OrgSubscriptions) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_OrgSubscriptions{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Organizations_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Organizations_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Organizations_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Organizations_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Organizations_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Organizations_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Organizations_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Organizations_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Organizations_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Organizations_Edges_Node struct {
	DisplayName string   "json:\"displayName\" graphql:\"displayName\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Organizations_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GlobalSearch_Search_Organizations_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GlobalSearch_Search_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Organizations_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Organizations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Organizations_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Organizations_Edges struct {
	Node *GlobalSearch_Search_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Organizations_Edges) GetNode() *GlobalSearch_Search_Organizations_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Organizations_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Organizations struct {
	Edges      []*GlobalSearch_Search_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Organizations_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Organizations) GetEdges() []*GlobalSearch_Search_Organizations_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Organizations{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Organizations) GetPageInfo() *GlobalSearch_Search_Organizations_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Organizations{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Organizations) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Organizations{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_OrganizationSettings_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_OrganizationSettings_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_OrganizationSettings_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_OrganizationSettings_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_OrganizationSettings_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_OrganizationSettings_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_OrganizationSettings_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_OrganizationSettings_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_OrganizationSettings_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_OrganizationSettings_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_OrganizationSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_OrganizationSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_OrganizationSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_OrganizationSettings_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_OrganizationSettings_Edges struct {
	Node *GlobalSearch_Search_OrganizationSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_OrganizationSettings_Edges) GetNode() *GlobalSearch_Search_OrganizationSettings_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_OrganizationSettings_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_OrganizationSettings struct {
	Edges      []*GlobalSearch_Search_OrganizationSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_OrganizationSettings_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                             "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_OrganizationSettings) GetEdges() []*GlobalSearch_Search_OrganizationSettings_Edges {
	if t == nil {
		t = &GlobalSearch_Search_OrganizationSettings{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_OrganizationSettings) GetPageInfo() *GlobalSearch_Search_OrganizationSettings_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_OrganizationSettings{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_OrganizationSettings) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_OrganizationSettings{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_PersonalAccessTokens_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_PersonalAccessTokens_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_PersonalAccessTokens_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_PersonalAccessTokens_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_PersonalAccessTokens_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_PersonalAccessTokens_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_PersonalAccessTokens_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_PersonalAccessTokens_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_PersonalAccessTokens_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_PersonalAccessTokens_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_PersonalAccessTokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_PersonalAccessTokens_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_PersonalAccessTokens_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_PersonalAccessTokens_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_PersonalAccessTokens_Edges struct {
	Node *GlobalSearch_Search_PersonalAccessTokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_PersonalAccessTokens_Edges) GetNode() *GlobalSearch_Search_PersonalAccessTokens_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_PersonalAccessTokens_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_PersonalAccessTokens struct {
	Edges      []*GlobalSearch_Search_PersonalAccessTokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_PersonalAccessTokens_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                             "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_PersonalAccessTokens) GetEdges() []*GlobalSearch_Search_PersonalAccessTokens_Edges {
	if t == nil {
		t = &GlobalSearch_Search_PersonalAccessTokens{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_PersonalAccessTokens) GetPageInfo() *GlobalSearch_Search_PersonalAccessTokens_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_PersonalAccessTokens{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_PersonalAccessTokens) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_PersonalAccessTokens{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Procedures_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Procedures_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Procedures_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Procedures_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Procedures_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Procedures_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Procedures_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Procedures_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Procedures_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Procedures_Edges_Node struct {
	Details   *string  "json:\"details,omitempty\" graphql:\"details\""
	DisplayID string   "json:\"displayID\" graphql:\"displayID\""
	ID        string   "json:\"id\" graphql:\"id\""
	Name      string   "json:\"name\" graphql:\"name\""
	Tags      []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Procedures_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GlobalSearch_Search_Procedures_Edges_Node{}
	}
	return t.Details
}
func (t *GlobalSearch_Search_Procedures_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_Procedures_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_Procedures_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Procedures_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Procedures_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Procedures_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Procedures_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Procedures_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Procedures_Edges struct {
	Node *GlobalSearch_Search_Procedures_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Procedures_Edges) GetNode() *GlobalSearch_Search_Procedures_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Procedures_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Procedures struct {
	Edges      []*GlobalSearch_Search_Procedures_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Procedures_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                   "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Procedures) GetEdges() []*GlobalSearch_Search_Procedures_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Procedures{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Procedures) GetPageInfo() *GlobalSearch_Search_Procedures_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Procedures{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Procedures) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Procedures{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Programs_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Programs_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Programs_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Programs_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Programs_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Programs_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Programs_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Programs_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Programs_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Programs_Edges_Node struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	DisplayID   string   "json:\"displayID\" graphql:\"displayID\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Programs_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GlobalSearch_Search_Programs_Edges_Node{}
	}
	return t.Description
}
func (t *GlobalSearch_Search_Programs_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_Programs_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Programs_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Programs_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Programs_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Programs_Edges struct {
	Node *GlobalSearch_Search_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Programs_Edges) GetNode() *GlobalSearch_Search_Programs_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Programs_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Programs struct {
	Edges      []*GlobalSearch_Search_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Programs_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                 "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Programs) GetEdges() []*GlobalSearch_Search_Programs_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Programs{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Programs) GetPageInfo() *GlobalSearch_Search_Programs_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Programs{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Programs) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Programs{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Risks_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Risks_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Risks_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Risks_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Risks_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Risks_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Risks_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Risks_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Risks_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Risks_Edges_Node struct {
	DisplayID string   "json:\"displayID\" graphql:\"displayID\""
	ID        string   "json:\"id\" graphql:\"id\""
	Name      string   "json:\"name\" graphql:\"name\""
	Tags      []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Risks_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_Risks_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_Risks_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Risks_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Risks_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Risks_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Risks_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Risks_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Risks_Edges struct {
	Node *GlobalSearch_Search_Risks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Risks_Edges) GetNode() *GlobalSearch_Search_Risks_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Risks_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Risks struct {
	Edges      []*GlobalSearch_Search_Risks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Risks_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Risks) GetEdges() []*GlobalSearch_Search_Risks_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Risks{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Risks) GetPageInfo() *GlobalSearch_Search_Risks_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Risks{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Risks) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Risks{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Standards_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Standards_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Standards_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Standards_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Standards_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Standards_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Standards_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Standards_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Standards_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Standards_Edges_Node struct {
	Domains       []string "json:\"domains,omitempty\" graphql:\"domains\""
	Framework     *string  "json:\"framework,omitempty\" graphql:\"framework\""
	GoverningBody *string  "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	ID            string   "json:\"id\" graphql:\"id\""
	Name          string   "json:\"name\" graphql:\"name\""
	ShortName     *string  "json:\"shortName,omitempty\" graphql:\"shortName\""
	Tags          []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Standards_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GlobalSearch_Search_Standards_Edges_Node{}
	}
	return t.Domains
}
func (t *GlobalSearch_Search_Standards_Edges_Node) GetFramework() *string {
	if t == nil {
		t = &GlobalSearch_Search_Standards_Edges_Node{}
	}
	return t.Framework
}
func (t *GlobalSearch_Search_Standards_Edges_Node) GetGoverningBody() *string {
	if t == nil {
		t = &GlobalSearch_Search_Standards_Edges_Node{}
	}
	return t.GoverningBody
}
func (t *GlobalSearch_Search_Standards_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Standards_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Standards_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Standards_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Standards_Edges_Node) GetShortName() *string {
	if t == nil {
		t = &GlobalSearch_Search_Standards_Edges_Node{}
	}
	return t.ShortName
}
func (t *GlobalSearch_Search_Standards_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Standards_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Standards_Edges struct {
	Node *GlobalSearch_Search_Standards_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Standards_Edges) GetNode() *GlobalSearch_Search_Standards_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Standards_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Standards struct {
	Edges      []*GlobalSearch_Search_Standards_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Standards_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Standards) GetEdges() []*GlobalSearch_Search_Standards_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Standards{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Standards) GetPageInfo() *GlobalSearch_Search_Standards_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Standards{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Standards) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Standards{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Subcontrols_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Subcontrols_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Subcontrols_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Subcontrols_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Subcontrols_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Subcontrols_Edges_Node struct {
	Category         *string  "json:\"category,omitempty\" graphql:\"category\""
	Description      *string  "json:\"description,omitempty\" graphql:\"description\""
	DisplayID        string   "json:\"displayID\" graphql:\"displayID\""
	ID               string   "json:\"id\" graphql:\"id\""
	MappedCategories []string "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	RefCode          string   "json:\"refCode\" graphql:\"refCode\""
	Subcategory      *string  "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags             []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Subcontrols_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_Edges_Node{}
	}
	return t.Category
}
func (t *GlobalSearch_Search_Subcontrols_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_Edges_Node{}
	}
	return t.Description
}
func (t *GlobalSearch_Search_Subcontrols_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Subcontrols_Edges_Node) GetMappedCategories() []string {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_Edges_Node{}
	}
	return t.MappedCategories
}
func (t *GlobalSearch_Search_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}
func (t *GlobalSearch_Search_Subcontrols_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GlobalSearch_Search_Subcontrols_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Subcontrols_Edges struct {
	Node *GlobalSearch_Search_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Subcontrols_Edges) GetNode() *GlobalSearch_Search_Subcontrols_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Subcontrols struct {
	Edges      []*GlobalSearch_Search_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Subcontrols_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Subcontrols) GetEdges() []*GlobalSearch_Search_Subcontrols_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Subcontrols) GetPageInfo() *GlobalSearch_Search_Subcontrols_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Subcontrols) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Subcontrols{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Subscribers_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Subscribers_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Subscribers_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Subscribers_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Subscribers_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Subscribers_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Subscribers_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Subscribers_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Subscribers_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Subscribers_Edges_Node struct {
	Email string   "json:\"email\" graphql:\"email\""
	ID    string   "json:\"id\" graphql:\"id\""
	Tags  []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Subscribers_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GlobalSearch_Search_Subscribers_Edges_Node{}
	}
	return t.Email
}
func (t *GlobalSearch_Search_Subscribers_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Subscribers_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Subscribers_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Subscribers_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Subscribers_Edges struct {
	Node *GlobalSearch_Search_Subscribers_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Subscribers_Edges) GetNode() *GlobalSearch_Search_Subscribers_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Subscribers_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Subscribers struct {
	Edges      []*GlobalSearch_Search_Subscribers_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Subscribers_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Subscribers) GetEdges() []*GlobalSearch_Search_Subscribers_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Subscribers{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Subscribers) GetPageInfo() *GlobalSearch_Search_Subscribers_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Subscribers{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Subscribers) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Subscribers{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Tasks_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Tasks_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Tasks_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Tasks_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Tasks_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Tasks_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Tasks_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Tasks_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Tasks_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Tasks_Edges_Node struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	DisplayID   string   "json:\"displayID\" graphql:\"displayID\""
	ID          string   "json:\"id\" graphql:\"id\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string   "json:\"title\" graphql:\"title\""
}

func (t *GlobalSearch_Search_Tasks_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GlobalSearch_Search_Tasks_Edges_Node{}
	}
	return t.Description
}
func (t *GlobalSearch_Search_Tasks_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_Tasks_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_Tasks_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Tasks_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Tasks_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Tasks_Edges_Node{}
	}
	return t.Tags
}
func (t *GlobalSearch_Search_Tasks_Edges_Node) GetTitle() string {
	if t == nil {
		t = &GlobalSearch_Search_Tasks_Edges_Node{}
	}
	return t.Title
}

type GlobalSearch_Search_Tasks_Edges struct {
	Node *GlobalSearch_Search_Tasks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Tasks_Edges) GetNode() *GlobalSearch_Search_Tasks_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Tasks_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Tasks struct {
	Edges      []*GlobalSearch_Search_Tasks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Tasks_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Tasks) GetEdges() []*GlobalSearch_Search_Tasks_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Tasks{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Tasks) GetPageInfo() *GlobalSearch_Search_Tasks_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Tasks{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Tasks) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Tasks{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Templates_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Templates_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Templates_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Templates_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Templates_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Templates_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Templates_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Templates_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Templates_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Templates_Edges_Node struct {
	ID         string         "json:\"id\" graphql:\"id\""
	Jsonconfig map[string]any "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name       string         "json:\"name\" graphql:\"name\""
	Tags       []string       "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Templates_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Templates_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Templates_Edges_Node) GetJsonconfig() map[string]any {
	if t == nil {
		t = &GlobalSearch_Search_Templates_Edges_Node{}
	}
	return t.Jsonconfig
}
func (t *GlobalSearch_Search_Templates_Edges_Node) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Templates_Edges_Node{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Templates_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Templates_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Templates_Edges struct {
	Node *GlobalSearch_Search_Templates_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Templates_Edges) GetNode() *GlobalSearch_Search_Templates_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Templates_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Templates struct {
	Edges      []*GlobalSearch_Search_Templates_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Templates_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Templates) GetEdges() []*GlobalSearch_Search_Templates_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Templates{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Templates) GetPageInfo() *GlobalSearch_Search_Templates_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Templates{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Templates) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Templates{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_Users_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_Users_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Users_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_Users_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Users_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_Users_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_Users_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_Users_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_Users_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_Users_Edges_Node struct {
	DisplayID string   "json:\"displayID\" graphql:\"displayID\""
	ID        string   "json:\"id\" graphql:\"id\""
	Tags      []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Users_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GlobalSearch_Search_Users_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GlobalSearch_Search_Users_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Users_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Users_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Users_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_Users_Edges struct {
	Node *GlobalSearch_Search_Users_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_Users_Edges) GetNode() *GlobalSearch_Search_Users_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_Users_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_Users struct {
	Edges      []*GlobalSearch_Search_Users_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_Users_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_Users) GetEdges() []*GlobalSearch_Search_Users_Edges {
	if t == nil {
		t = &GlobalSearch_Search_Users{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_Users) GetPageInfo() *GlobalSearch_Search_Users_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_Users{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_Users) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_Users{}
	}
	return t.TotalCount
}

type GlobalSearch_Search_UserSettings_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GlobalSearch_Search_UserSettings_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_UserSettings_PageInfo{}
	}
	return t.EndCursor
}
func (t *GlobalSearch_Search_UserSettings_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_UserSettings_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GlobalSearch_Search_UserSettings_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GlobalSearch_Search_UserSettings_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GlobalSearch_Search_UserSettings_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GlobalSearch_Search_UserSettings_PageInfo{}
	}
	return t.StartCursor
}

type GlobalSearch_Search_UserSettings_Edges_Node struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_UserSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_UserSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_UserSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_UserSettings_Edges_Node{}
	}
	return t.Tags
}

type GlobalSearch_Search_UserSettings_Edges struct {
	Node *GlobalSearch_Search_UserSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GlobalSearch_Search_UserSettings_Edges) GetNode() *GlobalSearch_Search_UserSettings_Edges_Node {
	if t == nil {
		t = &GlobalSearch_Search_UserSettings_Edges{}
	}
	return t.Node
}

type GlobalSearch_Search_UserSettings struct {
	Edges      []*GlobalSearch_Search_UserSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GlobalSearch_Search_UserSettings_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                     "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GlobalSearch_Search_UserSettings) GetEdges() []*GlobalSearch_Search_UserSettings_Edges {
	if t == nil {
		t = &GlobalSearch_Search_UserSettings{}
	}
	return t.Edges
}
func (t *GlobalSearch_Search_UserSettings) GetPageInfo() *GlobalSearch_Search_UserSettings_PageInfo {
	if t == nil {
		t = &GlobalSearch_Search_UserSettings{}
	}
	return &t.PageInfo
}
func (t *GlobalSearch_Search_UserSettings) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search_UserSettings{}
	}
	return t.TotalCount
}

type GlobalSearch_Search struct {
	ActionPlans            *GlobalSearch_Search_ActionPlans            "json:\"actionPlans,omitempty\" graphql:\"actionPlans\""
	APITokens              *GlobalSearch_Search_APITokens              "json:\"apiTokens,omitempty\" graphql:\"apiTokens\""
	Contacts               *GlobalSearch_Search_Contacts               "json:\"contacts,omitempty\" graphql:\"contacts\""
	ControlImplementations *GlobalSearch_Search_ControlImplementations "json:\"controlImplementations,omitempty\" graphql:\"controlImplementations\""
	ControlObjectives      *GlobalSearch_Search_ControlObjectives      "json:\"controlObjectives,omitempty\" graphql:\"controlObjectives\""
	Controls               *GlobalSearch_Search_Controls               "json:\"controls,omitempty\" graphql:\"controls\""
	DocumentData           *GlobalSearch_Search_DocumentData           "json:\"documentData,omitempty\" graphql:\"documentData\""
	Entities               *GlobalSearch_Search_Entities               "json:\"entities,omitempty\" graphql:\"entities\""
	EntityTypes            *GlobalSearch_Search_EntityTypes            "json:\"entityTypes,omitempty\" graphql:\"entityTypes\""
	Events                 *GlobalSearch_Search_Events                 "json:\"events,omitempty\" graphql:\"events\""
	Evidences              *GlobalSearch_Search_Evidences              "json:\"evidences,omitempty\" graphql:\"evidences\""
	Files                  *GlobalSearch_Search_Files                  "json:\"files,omitempty\" graphql:\"files\""
	Groups                 *GlobalSearch_Search_Groups                 "json:\"groups,omitempty\" graphql:\"groups\""
	Integrations           *GlobalSearch_Search_Integrations           "json:\"integrations,omitempty\" graphql:\"integrations\""
	InternalPolicies       *GlobalSearch_Search_InternalPolicies       "json:\"internalPolicies,omitempty\" graphql:\"internalPolicies\""
	Invites                *GlobalSearch_Search_Invites                "json:\"invites,omitempty\" graphql:\"invites\""
	MappedControls         *GlobalSearch_Search_MappedControls         "json:\"mappedControls,omitempty\" graphql:\"mappedControls\""
	Narratives             *GlobalSearch_Search_Narratives             "json:\"narratives,omitempty\" graphql:\"narratives\""
	OrgSubscriptions       *GlobalSearch_Search_OrgSubscriptions       "json:\"orgSubscriptions,omitempty\" graphql:\"orgSubscriptions\""
	OrganizationSettings   *GlobalSearch_Search_OrganizationSettings   "json:\"organizationSettings,omitempty\" graphql:\"organizationSettings\""
	Organizations          *GlobalSearch_Search_Organizations          "json:\"organizations,omitempty\" graphql:\"organizations\""
	PersonalAccessTokens   *GlobalSearch_Search_PersonalAccessTokens   "json:\"personalAccessTokens,omitempty\" graphql:\"personalAccessTokens\""
	Procedures             *GlobalSearch_Search_Procedures             "json:\"procedures,omitempty\" graphql:\"procedures\""
	Programs               *GlobalSearch_Search_Programs               "json:\"programs,omitempty\" graphql:\"programs\""
	Risks                  *GlobalSearch_Search_Risks                  "json:\"risks,omitempty\" graphql:\"risks\""
	Standards              *GlobalSearch_Search_Standards              "json:\"standards,omitempty\" graphql:\"standards\""
	Subcontrols            *GlobalSearch_Search_Subcontrols            "json:\"subcontrols,omitempty\" graphql:\"subcontrols\""
	Subscribers            *GlobalSearch_Search_Subscribers            "json:\"subscribers,omitempty\" graphql:\"subscribers\""
	Tasks                  *GlobalSearch_Search_Tasks                  "json:\"tasks,omitempty\" graphql:\"tasks\""
	Templates              *GlobalSearch_Search_Templates              "json:\"templates,omitempty\" graphql:\"templates\""
	TotalCount             int64                                       "json:\"totalCount\" graphql:\"totalCount\""
	UserSettings           *GlobalSearch_Search_UserSettings           "json:\"userSettings,omitempty\" graphql:\"userSettings\""
	Users                  *GlobalSearch_Search_Users                  "json:\"users,omitempty\" graphql:\"users\""
}

func (t *GlobalSearch_Search) GetActionPlans() *GlobalSearch_Search_ActionPlans {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.ActionPlans
}
func (t *GlobalSearch_Search) GetAPITokens() *GlobalSearch_Search_APITokens {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.APITokens
}
func (t *GlobalSearch_Search) GetContacts() *GlobalSearch_Search_Contacts {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Contacts
}
func (t *GlobalSearch_Search) GetControlImplementations() *GlobalSearch_Search_ControlImplementations {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.ControlImplementations
}
func (t *GlobalSearch_Search) GetControlObjectives() *GlobalSearch_Search_ControlObjectives {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.ControlObjectives
}
func (t *GlobalSearch_Search) GetControls() *GlobalSearch_Search_Controls {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Controls
}
func (t *GlobalSearch_Search) GetDocumentData() *GlobalSearch_Search_DocumentData {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.DocumentData
}
func (t *GlobalSearch_Search) GetEntities() *GlobalSearch_Search_Entities {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Entities
}
func (t *GlobalSearch_Search) GetEntityTypes() *GlobalSearch_Search_EntityTypes {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.EntityTypes
}
func (t *GlobalSearch_Search) GetEvents() *GlobalSearch_Search_Events {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Events
}
func (t *GlobalSearch_Search) GetEvidences() *GlobalSearch_Search_Evidences {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Evidences
}
func (t *GlobalSearch_Search) GetFiles() *GlobalSearch_Search_Files {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Files
}
func (t *GlobalSearch_Search) GetGroups() *GlobalSearch_Search_Groups {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Groups
}
func (t *GlobalSearch_Search) GetIntegrations() *GlobalSearch_Search_Integrations {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Integrations
}
func (t *GlobalSearch_Search) GetInternalPolicies() *GlobalSearch_Search_InternalPolicies {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.InternalPolicies
}
func (t *GlobalSearch_Search) GetInvites() *GlobalSearch_Search_Invites {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Invites
}
func (t *GlobalSearch_Search) GetMappedControls() *GlobalSearch_Search_MappedControls {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.MappedControls
}
func (t *GlobalSearch_Search) GetNarratives() *GlobalSearch_Search_Narratives {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Narratives
}
func (t *GlobalSearch_Search) GetOrgSubscriptions() *GlobalSearch_Search_OrgSubscriptions {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.OrgSubscriptions
}
func (t *GlobalSearch_Search) GetOrganizationSettings() *GlobalSearch_Search_OrganizationSettings {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.OrganizationSettings
}
func (t *GlobalSearch_Search) GetOrganizations() *GlobalSearch_Search_Organizations {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Organizations
}
func (t *GlobalSearch_Search) GetPersonalAccessTokens() *GlobalSearch_Search_PersonalAccessTokens {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.PersonalAccessTokens
}
func (t *GlobalSearch_Search) GetProcedures() *GlobalSearch_Search_Procedures {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Procedures
}
func (t *GlobalSearch_Search) GetPrograms() *GlobalSearch_Search_Programs {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Programs
}
func (t *GlobalSearch_Search) GetRisks() *GlobalSearch_Search_Risks {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Risks
}
func (t *GlobalSearch_Search) GetStandards() *GlobalSearch_Search_Standards {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Standards
}
func (t *GlobalSearch_Search) GetSubcontrols() *GlobalSearch_Search_Subcontrols {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Subcontrols
}
func (t *GlobalSearch_Search) GetSubscribers() *GlobalSearch_Search_Subscribers {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Subscribers
}
func (t *GlobalSearch_Search) GetTasks() *GlobalSearch_Search_Tasks {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Tasks
}
func (t *GlobalSearch_Search) GetTemplates() *GlobalSearch_Search_Templates {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Templates
}
func (t *GlobalSearch_Search) GetTotalCount() int64 {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.TotalCount
}
func (t *GlobalSearch_Search) GetUserSettings() *GlobalSearch_Search_UserSettings {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.UserSettings
}
func (t *GlobalSearch_Search) GetUsers() *GlobalSearch_Search_Users {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Users
}

type CreateStandard_CreateStandard_Standard_Controls_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *CreateStandard_CreateStandard_Standard_Controls_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard_Controls_PageInfo{}
	}
	return t.EndCursor
}
func (t *CreateStandard_CreateStandard_Standard_Controls_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard_Controls_PageInfo{}
	}
	return t.HasNextPage
}
func (t *CreateStandard_CreateStandard_Standard_Controls_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard_Controls_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *CreateStandard_CreateStandard_Standard_Controls_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard_Controls_PageInfo{}
	}
	return t.StartCursor
}

type CreateStandard_CreateStandard_Standard_Controls_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *CreateStandard_CreateStandard_Standard_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *CreateStandard_CreateStandard_Standard_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *CreateStandard_CreateStandard_Standard_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard_Controls_Edges_Node{}
	}
	return t.RefCode
}

type CreateStandard_CreateStandard_Standard_Controls_Edges struct {
	Node *CreateStandard_CreateStandard_Standard_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateStandard_CreateStandard_Standard_Controls_Edges) GetNode() *CreateStandard_CreateStandard_Standard_Controls_Edges_Node {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard_Controls_Edges{}
	}
	return t.Node
}

type CreateStandard_CreateStandard_Standard_Controls struct {
	Edges      []*CreateStandard_CreateStandard_Standard_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   CreateStandard_CreateStandard_Standard_Controls_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *CreateStandard_CreateStandard_Standard_Controls) GetEdges() []*CreateStandard_CreateStandard_Standard_Controls_Edges {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard_Controls{}
	}
	return t.Edges
}
func (t *CreateStandard_CreateStandard_Standard_Controls) GetPageInfo() *CreateStandard_CreateStandard_Standard_Controls_PageInfo {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard_Controls{}
	}
	return &t.PageInfo
}
func (t *CreateStandard_CreateStandard_Standard_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard_Controls{}
	}
	return t.TotalCount
}

type CreateStandard_CreateStandard_Standard struct {
	Controls             CreateStandard_CreateStandard_Standard_Controls "json:\"controls\" graphql:\"controls\""
	CreatedAt            *time.Time                                      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                                         "json:\"description,omitempty\" graphql:\"description\""
	Domains              []string                                        "json:\"domains,omitempty\" graphql:\"domains\""
	Framework            *string                                         "json:\"framework,omitempty\" graphql:\"framework\""
	FreeToUse            *bool                                           "json:\"freeToUse,omitempty\" graphql:\"freeToUse\""
	GoverningBody        *string                                         "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	GoverningBodyLogoURL *string                                         "json:\"governingBodyLogoURL,omitempty\" graphql:\"governingBodyLogoURL\""
	ID                   string                                          "json:\"id\" graphql:\"id\""
	IsPublic             *bool                                           "json:\"isPublic,omitempty\" graphql:\"isPublic\""
	Link                 *string                                         "json:\"link,omitempty\" graphql:\"link\""
	Name                 string                                          "json:\"name\" graphql:\"name\""
	OwnerID              *string                                         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Revision             *string                                         "json:\"revision,omitempty\" graphql:\"revision\""
	ShortName            *string                                         "json:\"shortName,omitempty\" graphql:\"shortName\""
	StandardType         *string                                         "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status               *enums.StandardStatus                           "json:\"status,omitempty\" graphql:\"status\""
	SystemOwned          *bool                                           "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags                 []string                                        "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version              *string                                         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateStandard_CreateStandard_Standard) GetControls() *CreateStandard_CreateStandard_Standard_Controls {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return &t.Controls
}
func (t *CreateStandard_CreateStandard_Standard) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.CreatedAt
}
func (t *CreateStandard_CreateStandard_Standard) GetCreatedBy() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.CreatedBy
}
func (t *CreateStandard_CreateStandard_Standard) GetDescription() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Description
}
func (t *CreateStandard_CreateStandard_Standard) GetDomains() []string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Domains
}
func (t *CreateStandard_CreateStandard_Standard) GetFramework() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Framework
}
func (t *CreateStandard_CreateStandard_Standard) GetFreeToUse() *bool {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.FreeToUse
}
func (t *CreateStandard_CreateStandard_Standard) GetGoverningBody() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.GoverningBody
}
func (t *CreateStandard_CreateStandard_Standard) GetGoverningBodyLogoURL() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.GoverningBodyLogoURL
}
func (t *CreateStandard_CreateStandard_Standard) GetID() string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.ID
}
func (t *CreateStandard_CreateStandard_Standard) GetIsPublic() *bool {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.IsPublic
}
func (t *CreateStandard_CreateStandard_Standard) GetLink() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Link
}
func (t *CreateStandard_CreateStandard_Standard) GetName() string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Name
}
func (t *CreateStandard_CreateStandard_Standard) GetOwnerID() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.OwnerID
}
func (t *CreateStandard_CreateStandard_Standard) GetRevision() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Revision
}
func (t *CreateStandard_CreateStandard_Standard) GetShortName() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.ShortName
}
func (t *CreateStandard_CreateStandard_Standard) GetStandardType() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.StandardType
}
func (t *CreateStandard_CreateStandard_Standard) GetStatus() *enums.StandardStatus {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Status
}
func (t *CreateStandard_CreateStandard_Standard) GetSystemOwned() *bool {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.SystemOwned
}
func (t *CreateStandard_CreateStandard_Standard) GetTags() []string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Tags
}
func (t *CreateStandard_CreateStandard_Standard) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.UpdatedAt
}
func (t *CreateStandard_CreateStandard_Standard) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.UpdatedBy
}
func (t *CreateStandard_CreateStandard_Standard) GetVersion() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Version
}

type CreateStandard_CreateStandard struct {
	Standard CreateStandard_CreateStandard_Standard "json:\"standard\" graphql:\"standard\""
}

func (t *CreateStandard_CreateStandard) GetStandard() *CreateStandard_CreateStandard_Standard {
	if t == nil {
		t = &CreateStandard_CreateStandard{}
	}
	return &t.Standard
}

type DeleteStandard_DeleteStandard struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteStandard_DeleteStandard) GetDeletedID() string {
	if t == nil {
		t = &DeleteStandard_DeleteStandard{}
	}
	return t.DeletedID
}

type GetAllStandards_Standards_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllStandards_Standards_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllStandards_Standards_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllStandards_Standards_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllStandards_Standards_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllStandards_Standards_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllStandards_Standards_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllStandards_Standards_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllStandards_Standards_PageInfo{}
	}
	return t.StartCursor
}

type GetAllStandards_Standards_Edges_Node_Controls_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetAllStandards_Standards_Edges_Node_Controls_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node_Controls_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetAllStandards_Standards_Edges_Node_Controls_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node_Controls_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllStandards_Standards_Edges_Node_Controls_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node_Controls_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetAllStandards_Standards_Edges_Node_Controls_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node_Controls_PageInfo{}
	}
	return t.StartCursor
}

type GetAllStandards_Standards_Edges_Node_Controls_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetAllStandards_Standards_Edges_Node_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllStandards_Standards_Edges_Node_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllStandards_Standards_Edges_Node_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetAllStandards_Standards_Edges_Node_Controls_Edges struct {
	Node *GetAllStandards_Standards_Edges_Node_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllStandards_Standards_Edges_Node_Controls_Edges) GetNode() *GetAllStandards_Standards_Edges_Node_Controls_Edges_Node {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node_Controls_Edges{}
	}
	return t.Node
}

type GetAllStandards_Standards_Edges_Node_Controls struct {
	Edges      []*GetAllStandards_Standards_Edges_Node_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllStandards_Standards_Edges_Node_Controls_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                  "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllStandards_Standards_Edges_Node_Controls) GetEdges() []*GetAllStandards_Standards_Edges_Node_Controls_Edges {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node_Controls{}
	}
	return t.Edges
}
func (t *GetAllStandards_Standards_Edges_Node_Controls) GetPageInfo() *GetAllStandards_Standards_Edges_Node_Controls_PageInfo {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node_Controls{}
	}
	return &t.PageInfo
}
func (t *GetAllStandards_Standards_Edges_Node_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node_Controls{}
	}
	return t.TotalCount
}

type GetAllStandards_Standards_Edges_Node struct {
	Controls             GetAllStandards_Standards_Edges_Node_Controls "json:\"controls\" graphql:\"controls\""
	CreatedAt            *time.Time                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                                       "json:\"description,omitempty\" graphql:\"description\""
	Domains              []string                                      "json:\"domains,omitempty\" graphql:\"domains\""
	Framework            *string                                       "json:\"framework,omitempty\" graphql:\"framework\""
	FreeToUse            *bool                                         "json:\"freeToUse,omitempty\" graphql:\"freeToUse\""
	GoverningBody        *string                                       "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	GoverningBodyLogoURL *string                                       "json:\"governingBodyLogoURL,omitempty\" graphql:\"governingBodyLogoURL\""
	ID                   string                                        "json:\"id\" graphql:\"id\""
	IsPublic             *bool                                         "json:\"isPublic,omitempty\" graphql:\"isPublic\""
	Link                 *string                                       "json:\"link,omitempty\" graphql:\"link\""
	Name                 string                                        "json:\"name\" graphql:\"name\""
	OwnerID              *string                                       "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Revision             *string                                       "json:\"revision,omitempty\" graphql:\"revision\""
	ShortName            *string                                       "json:\"shortName,omitempty\" graphql:\"shortName\""
	StandardType         *string                                       "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status               *enums.StandardStatus                         "json:\"status,omitempty\" graphql:\"status\""
	SystemOwned          *bool                                         "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags                 []string                                      "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version              *string                                       "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetAllStandards_Standards_Edges_Node) GetControls() *GetAllStandards_Standards_Edges_Node_Controls {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return &t.Controls
}
func (t *GetAllStandards_Standards_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllStandards_Standards_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllStandards_Standards_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllStandards_Standards_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Domains
}
func (t *GetAllStandards_Standards_Edges_Node) GetFramework() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Framework
}
func (t *GetAllStandards_Standards_Edges_Node) GetFreeToUse() *bool {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.FreeToUse
}
func (t *GetAllStandards_Standards_Edges_Node) GetGoverningBody() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.GoverningBody
}
func (t *GetAllStandards_Standards_Edges_Node) GetGoverningBodyLogoURL() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.GoverningBodyLogoURL
}
func (t *GetAllStandards_Standards_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllStandards_Standards_Edges_Node) GetIsPublic() *bool {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.IsPublic
}
func (t *GetAllStandards_Standards_Edges_Node) GetLink() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Link
}
func (t *GetAllStandards_Standards_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllStandards_Standards_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllStandards_Standards_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Revision
}
func (t *GetAllStandards_Standards_Edges_Node) GetShortName() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.ShortName
}
func (t *GetAllStandards_Standards_Edges_Node) GetStandardType() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.StandardType
}
func (t *GetAllStandards_Standards_Edges_Node) GetStatus() *enums.StandardStatus {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllStandards_Standards_Edges_Node) GetSystemOwned() *bool {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.SystemOwned
}
func (t *GetAllStandards_Standards_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllStandards_Standards_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllStandards_Standards_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllStandards_Standards_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Version
}

type GetAllStandards_Standards_Edges struct {
	Node *GetAllStandards_Standards_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllStandards_Standards_Edges) GetNode() *GetAllStandards_Standards_Edges_Node {
	if t == nil {
		t = &GetAllStandards_Standards_Edges{}
	}
	return t.Node
}

type GetAllStandards_Standards struct {
	Edges      []*GetAllStandards_Standards_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetAllStandards_Standards_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                              "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetAllStandards_Standards) GetEdges() []*GetAllStandards_Standards_Edges {
	if t == nil {
		t = &GetAllStandards_Standards{}
	}
	return t.Edges
}
func (t *GetAllStandards_Standards) GetPageInfo() *GetAllStandards_Standards_PageInfo {
	if t == nil {
		t = &GetAllStandards_Standards{}
	}
	return &t.PageInfo
}
func (t *GetAllStandards_Standards) GetTotalCount() int64 {
	if t == nil {
		t = &GetAllStandards_Standards{}
	}
	return t.TotalCount
}

type GetStandardByID_Standard_Controls_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetStandardByID_Standard_Controls_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetStandardByID_Standard_Controls_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetStandardByID_Standard_Controls_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetStandardByID_Standard_Controls_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetStandardByID_Standard_Controls_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetStandardByID_Standard_Controls_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetStandardByID_Standard_Controls_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetStandardByID_Standard_Controls_PageInfo{}
	}
	return t.StartCursor
}

type GetStandardByID_Standard_Controls_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetStandardByID_Standard_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetStandardByID_Standard_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *GetStandardByID_Standard_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetStandardByID_Standard_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetStandardByID_Standard_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetStandardByID_Standard_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetStandardByID_Standard_Controls_Edges struct {
	Node *GetStandardByID_Standard_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetStandardByID_Standard_Controls_Edges) GetNode() *GetStandardByID_Standard_Controls_Edges_Node {
	if t == nil {
		t = &GetStandardByID_Standard_Controls_Edges{}
	}
	return t.Node
}

type GetStandardByID_Standard_Controls struct {
	Edges      []*GetStandardByID_Standard_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetStandardByID_Standard_Controls_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                      "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetStandardByID_Standard_Controls) GetEdges() []*GetStandardByID_Standard_Controls_Edges {
	if t == nil {
		t = &GetStandardByID_Standard_Controls{}
	}
	return t.Edges
}
func (t *GetStandardByID_Standard_Controls) GetPageInfo() *GetStandardByID_Standard_Controls_PageInfo {
	if t == nil {
		t = &GetStandardByID_Standard_Controls{}
	}
	return &t.PageInfo
}
func (t *GetStandardByID_Standard_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &GetStandardByID_Standard_Controls{}
	}
	return t.TotalCount
}

type GetStandardByID_Standard struct {
	Controls             GetStandardByID_Standard_Controls "json:\"controls\" graphql:\"controls\""
	CreatedAt            *time.Time                        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                           "json:\"description,omitempty\" graphql:\"description\""
	Domains              []string                          "json:\"domains,omitempty\" graphql:\"domains\""
	Framework            *string                           "json:\"framework,omitempty\" graphql:\"framework\""
	FreeToUse            *bool                             "json:\"freeToUse,omitempty\" graphql:\"freeToUse\""
	GoverningBody        *string                           "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	GoverningBodyLogoURL *string                           "json:\"governingBodyLogoURL,omitempty\" graphql:\"governingBodyLogoURL\""
	ID                   string                            "json:\"id\" graphql:\"id\""
	IsPublic             *bool                             "json:\"isPublic,omitempty\" graphql:\"isPublic\""
	Link                 *string                           "json:\"link,omitempty\" graphql:\"link\""
	Name                 string                            "json:\"name\" graphql:\"name\""
	OwnerID              *string                           "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Revision             *string                           "json:\"revision,omitempty\" graphql:\"revision\""
	ShortName            *string                           "json:\"shortName,omitempty\" graphql:\"shortName\""
	StandardType         *string                           "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status               *enums.StandardStatus             "json:\"status,omitempty\" graphql:\"status\""
	SystemOwned          *bool                             "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags                 []string                          "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version              *string                           "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetStandardByID_Standard) GetControls() *GetStandardByID_Standard_Controls {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return &t.Controls
}
func (t *GetStandardByID_Standard) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.CreatedAt
}
func (t *GetStandardByID_Standard) GetCreatedBy() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.CreatedBy
}
func (t *GetStandardByID_Standard) GetDescription() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Description
}
func (t *GetStandardByID_Standard) GetDomains() []string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Domains
}
func (t *GetStandardByID_Standard) GetFramework() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Framework
}
func (t *GetStandardByID_Standard) GetFreeToUse() *bool {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.FreeToUse
}
func (t *GetStandardByID_Standard) GetGoverningBody() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.GoverningBody
}
func (t *GetStandardByID_Standard) GetGoverningBodyLogoURL() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.GoverningBodyLogoURL
}
func (t *GetStandardByID_Standard) GetID() string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.ID
}
func (t *GetStandardByID_Standard) GetIsPublic() *bool {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.IsPublic
}
func (t *GetStandardByID_Standard) GetLink() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Link
}
func (t *GetStandardByID_Standard) GetName() string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Name
}
func (t *GetStandardByID_Standard) GetOwnerID() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.OwnerID
}
func (t *GetStandardByID_Standard) GetRevision() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Revision
}
func (t *GetStandardByID_Standard) GetShortName() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.ShortName
}
func (t *GetStandardByID_Standard) GetStandardType() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.StandardType
}
func (t *GetStandardByID_Standard) GetStatus() *enums.StandardStatus {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Status
}
func (t *GetStandardByID_Standard) GetSystemOwned() *bool {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.SystemOwned
}
func (t *GetStandardByID_Standard) GetTags() []string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Tags
}
func (t *GetStandardByID_Standard) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.UpdatedAt
}
func (t *GetStandardByID_Standard) GetUpdatedBy() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.UpdatedBy
}
func (t *GetStandardByID_Standard) GetVersion() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Version
}

type GetStandards_Standards_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetStandards_Standards_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetStandards_Standards_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetStandards_Standards_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetStandards_Standards_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetStandards_Standards_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetStandards_Standards_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetStandards_Standards_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetStandards_Standards_PageInfo{}
	}
	return t.StartCursor
}

type GetStandards_Standards_Edges_Node_Controls_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *GetStandards_Standards_Edges_Node_Controls_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node_Controls_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetStandards_Standards_Edges_Node_Controls_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node_Controls_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetStandards_Standards_Edges_Node_Controls_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node_Controls_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *GetStandards_Standards_Edges_Node_Controls_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node_Controls_PageInfo{}
	}
	return t.StartCursor
}

type GetStandards_Standards_Edges_Node_Controls_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetStandards_Standards_Edges_Node_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *GetStandards_Standards_Edges_Node_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetStandards_Standards_Edges_Node_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node_Controls_Edges_Node{}
	}
	return t.RefCode
}

type GetStandards_Standards_Edges_Node_Controls_Edges struct {
	Node *GetStandards_Standards_Edges_Node_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetStandards_Standards_Edges_Node_Controls_Edges) GetNode() *GetStandards_Standards_Edges_Node_Controls_Edges_Node {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node_Controls_Edges{}
	}
	return t.Node
}

type GetStandards_Standards_Edges_Node_Controls struct {
	Edges      []*GetStandards_Standards_Edges_Node_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetStandards_Standards_Edges_Node_Controls_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                               "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetStandards_Standards_Edges_Node_Controls) GetEdges() []*GetStandards_Standards_Edges_Node_Controls_Edges {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node_Controls{}
	}
	return t.Edges
}
func (t *GetStandards_Standards_Edges_Node_Controls) GetPageInfo() *GetStandards_Standards_Edges_Node_Controls_PageInfo {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node_Controls{}
	}
	return &t.PageInfo
}
func (t *GetStandards_Standards_Edges_Node_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node_Controls{}
	}
	return t.TotalCount
}

type GetStandards_Standards_Edges_Node struct {
	Controls             GetStandards_Standards_Edges_Node_Controls "json:\"controls\" graphql:\"controls\""
	CreatedAt            *time.Time                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                                    "json:\"description,omitempty\" graphql:\"description\""
	Domains              []string                                   "json:\"domains,omitempty\" graphql:\"domains\""
	Framework            *string                                    "json:\"framework,omitempty\" graphql:\"framework\""
	FreeToUse            *bool                                      "json:\"freeToUse,omitempty\" graphql:\"freeToUse\""
	GoverningBody        *string                                    "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	GoverningBodyLogoURL *string                                    "json:\"governingBodyLogoURL,omitempty\" graphql:\"governingBodyLogoURL\""
	ID                   string                                     "json:\"id\" graphql:\"id\""
	IsPublic             *bool                                      "json:\"isPublic,omitempty\" graphql:\"isPublic\""
	Link                 *string                                    "json:\"link,omitempty\" graphql:\"link\""
	Name                 string                                     "json:\"name\" graphql:\"name\""
	OwnerID              *string                                    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Revision             *string                                    "json:\"revision,omitempty\" graphql:\"revision\""
	ShortName            *string                                    "json:\"shortName,omitempty\" graphql:\"shortName\""
	StandardType         *string                                    "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status               *enums.StandardStatus                      "json:\"status,omitempty\" graphql:\"status\""
	SystemOwned          *bool                                      "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags                 []string                                   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version              *string                                    "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetStandards_Standards_Edges_Node) GetControls() *GetStandards_Standards_Edges_Node_Controls {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return &t.Controls
}
func (t *GetStandards_Standards_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetStandards_Standards_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetStandards_Standards_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Description
}
func (t *GetStandards_Standards_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Domains
}
func (t *GetStandards_Standards_Edges_Node) GetFramework() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Framework
}
func (t *GetStandards_Standards_Edges_Node) GetFreeToUse() *bool {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.FreeToUse
}
func (t *GetStandards_Standards_Edges_Node) GetGoverningBody() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.GoverningBody
}
func (t *GetStandards_Standards_Edges_Node) GetGoverningBodyLogoURL() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.GoverningBodyLogoURL
}
func (t *GetStandards_Standards_Edges_Node) GetID() string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.ID
}
func (t *GetStandards_Standards_Edges_Node) GetIsPublic() *bool {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.IsPublic
}
func (t *GetStandards_Standards_Edges_Node) GetLink() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Link
}
func (t *GetStandards_Standards_Edges_Node) GetName() string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Name
}
func (t *GetStandards_Standards_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetStandards_Standards_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Revision
}
func (t *GetStandards_Standards_Edges_Node) GetShortName() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.ShortName
}
func (t *GetStandards_Standards_Edges_Node) GetStandardType() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.StandardType
}
func (t *GetStandards_Standards_Edges_Node) GetStatus() *enums.StandardStatus {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Status
}
func (t *GetStandards_Standards_Edges_Node) GetSystemOwned() *bool {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.SystemOwned
}
func (t *GetStandards_Standards_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Tags
}
func (t *GetStandards_Standards_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetStandards_Standards_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetStandards_Standards_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Version
}

type GetStandards_Standards_Edges struct {
	Node *GetStandards_Standards_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetStandards_Standards_Edges) GetNode() *GetStandards_Standards_Edges_Node {
	if t == nil {
		t = &GetStandards_Standards_Edges{}
	}
	return t.Node
}

type GetStandards_Standards struct {
	Edges      []*GetStandards_Standards_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   GetStandards_Standards_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                           "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *GetStandards_Standards) GetEdges() []*GetStandards_Standards_Edges {
	if t == nil {
		t = &GetStandards_Standards{}
	}
	return t.Edges
}
func (t *GetStandards_Standards) GetPageInfo() *GetStandards_Standards_PageInfo {
	if t == nil {
		t = &GetStandards_Standards{}
	}
	return &t.PageInfo
}
func (t *GetStandards_Standards) GetTotalCount() int64 {
	if t == nil {
		t = &GetStandards_Standards{}
	}
	return t.TotalCount
}

type UpdateStandard_UpdateStandard_Standard_Controls_PageInfo struct {
	EndCursor       *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor,omitempty\" graphql:\"startCursor\""
}

func (t *UpdateStandard_UpdateStandard_Standard_Controls_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard_Controls_PageInfo{}
	}
	return t.EndCursor
}
func (t *UpdateStandard_UpdateStandard_Standard_Controls_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard_Controls_PageInfo{}
	}
	return t.HasNextPage
}
func (t *UpdateStandard_UpdateStandard_Standard_Controls_PageInfo) GetHasPreviousPage() bool {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard_Controls_PageInfo{}
	}
	return t.HasPreviousPage
}
func (t *UpdateStandard_UpdateStandard_Standard_Controls_PageInfo) GetStartCursor() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard_Controls_PageInfo{}
	}
	return t.StartCursor
}

type UpdateStandard_UpdateStandard_Standard_Controls_Edges_Node struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *UpdateStandard_UpdateStandard_Standard_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *UpdateStandard_UpdateStandard_Standard_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateStandard_UpdateStandard_Standard_Controls_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard_Controls_Edges_Node{}
	}
	return t.RefCode
}

type UpdateStandard_UpdateStandard_Standard_Controls_Edges struct {
	Node *UpdateStandard_UpdateStandard_Standard_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateStandard_UpdateStandard_Standard_Controls_Edges) GetNode() *UpdateStandard_UpdateStandard_Standard_Controls_Edges_Node {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard_Controls_Edges{}
	}
	return t.Node
}

type UpdateStandard_UpdateStandard_Standard_Controls struct {
	Edges      []*UpdateStandard_UpdateStandard_Standard_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo   UpdateStandard_UpdateStandard_Standard_Controls_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	TotalCount int64                                                    "json:\"totalCount\" graphql:\"totalCount\""
}

func (t *UpdateStandard_UpdateStandard_Standard_Controls) GetEdges() []*UpdateStandard_UpdateStandard_Standard_Controls_Edges {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard_Controls{}
	}
	return t.Edges
}
func (t *UpdateStandard_UpdateStandard_Standard_Controls) GetPageInfo() *UpdateStandard_UpdateStandard_Standard_Controls_PageInfo {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard_Controls{}
	}
	return &t.PageInfo
}
func (t *UpdateStandard_UpdateStandard_Standard_Controls) GetTotalCount() int64 {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard_Controls{}
	}
	return t.TotalCount
}

type UpdateStandard_UpdateStandard_Standard struct {
	Controls             UpdateStandard_UpdateStandard_Standard_Controls "json:\"controls\" graphql:\"controls\""
	CreatedAt            *time.Time                                      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                                         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                                         "json:\"description,omitempty\" graphql:\"description\""
	Domains              []string                                        "json:\"domains,omitempty\" graphql:\"domains\""
	Framework            *string                                         "json:\"framework,omitempty\" graphql:\"framework\""
	FreeToUse            *bool                                           "json:\"freeToUse,omitempty\" graphql:\"freeToUse\""
	GoverningBody        *string                                         "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	GoverningBodyLogoURL *string                                         "json:\"governingBodyLogoURL,omitempty\" graphql:\"governingBodyLogoURL\""
	ID                   string                                          "json:\"id\" graphql:\"id\""
	IsPublic             *bool                                           "json:\"isPublic,omitempty\" graphql:\"isPublic\""
	Link                 *string                                         "json:\"link,omitempty\" graphql:\"link\""
	Name                 string                                          "json:\"name\" graphql:\"name\""
	OwnerID              *string                                         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Revision             *string                                         "json:\"revision,omitempty\" graphql:\"revision\""
	ShortName            *string                                         "json:\"shortName,omitempty\" graphql:\"shortName\""
	StandardType         *string                                         "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status               *enums.StandardStatus                           "json:\"status,omitempty\" graphql:\"status\""
	SystemOwned          *bool                                           "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags                 []string                                        "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time                                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                                         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version              *string                                         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *UpdateStandard_UpdateStandard_Standard) GetControls() *UpdateStandard_UpdateStandard_Standard_Controls {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return &t.Controls
}
func (t *UpdateStandard_UpdateStandard_Standard) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.CreatedAt
}
func (t *UpdateStandard_UpdateStandard_Standard) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.CreatedBy
}
func (t *UpdateStandard_UpdateStandard_Standard) GetDescription() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Description
}
func (t *UpdateStandard_UpdateStandard_Standard) GetDomains() []string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Domains
}
func (t *UpdateStandard_UpdateStandard_Standard) GetFramework() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Framework
}
func (t *UpdateStandard_UpdateStandard_Standard) GetFreeToUse() *bool {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.FreeToUse
}
func (t *UpdateStandard_UpdateStandard_Standard) GetGoverningBody() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.GoverningBody
}
func (t *UpdateStandard_UpdateStandard_Standard) GetGoverningBodyLogoURL() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.GoverningBodyLogoURL
}
func (t *UpdateStandard_UpdateStandard_Standard) GetID() string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.ID
}
func (t *UpdateStandard_UpdateStandard_Standard) GetIsPublic() *bool {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.IsPublic
}
func (t *UpdateStandard_UpdateStandard_Standard) GetLink() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Link
}
func (t *UpdateStandard_UpdateStandard_Standard) GetName() string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Name
}
func (t *UpdateStandard_UpdateStandard_Standard) GetOwnerID() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.OwnerID
}
func (t *UpdateStandard_UpdateStandard_Standard) GetRevision() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Revision
}
func (t *UpdateStandard_UpdateStandard_Standard) GetShortName() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.ShortName
}
func (t *UpdateStandard_UpdateStandard_Standard) GetStandardType() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.StandardType
}
func (t *UpdateStandard_UpdateStandard_Standard) GetStatus() *enums.StandardStatus {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Status
}
func (t *UpdateStandard_UpdateStandard_Standard) GetSystemOwned() *bool {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.SystemOwned
}
func (t *UpdateStandard_UpdateStandard_Standard) GetTags() []string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Tags
}
func (t *UpdateStandard_UpdateStandard_Standard) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.UpdatedAt
}
func (t *UpdateStandard_UpdateStandard_Standard) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.UpdatedBy
}
func (t *UpdateStandard_UpdateStandard_Standard) GetVersion() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Version
}

type UpdateStandard_UpdateStandard struct {
	Standard UpdateStandard_UpdateStandard_Standard "json:\"standard\" graphql:\"standard\""
}

func (t *UpdateStandard_UpdateStandard) GetStandard() *UpdateStandard_UpdateStandard_Standard {
	if t == nil {
		t = &UpdateStandard_UpdateStandard{}
	}
	return &t.Standard
}

type GetAllStandardHistories_StandardHistories_Edges_Node struct {
	CreatedAt     *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string               "json:\"description,omitempty\" graphql:\"description\""
	Domains       []string              "json:\"domains,omitempty\" graphql:\"domains\""
	Framework     *string               "json:\"framework,omitempty\" graphql:\"framework\""
	FreeToUse     *bool                 "json:\"freeToUse,omitempty\" graphql:\"freeToUse\""
	GoverningBody *string               "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	HistoryTime   time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID            string                "json:\"id\" graphql:\"id\""
	IsPublic      *bool                 "json:\"isPublic,omitempty\" graphql:\"isPublic\""
	Link          *string               "json:\"link,omitempty\" graphql:\"link\""
	Name          string                "json:\"name\" graphql:\"name\""
	Operation     history.OpType        "json:\"operation\" graphql:\"operation\""
	OwnerID       *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref           *string               "json:\"ref,omitempty\" graphql:\"ref\""
	Revision      *string               "json:\"revision,omitempty\" graphql:\"revision\""
	ShortName     *string               "json:\"shortName,omitempty\" graphql:\"shortName\""
	StandardType  *string               "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status        *enums.StandardStatus "json:\"status,omitempty\" graphql:\"status\""
	SystemOwned   *bool                 "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags          []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version       *string               "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Domains
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetFramework() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Framework
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetFreeToUse() *bool {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.FreeToUse
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetGoverningBody() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.GoverningBody
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetIsPublic() *bool {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.IsPublic
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetLink() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Link
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Revision
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetShortName() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.ShortName
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetStandardType() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.StandardType
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetStatus() *enums.StandardStatus {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetSystemOwned() *bool {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.SystemOwned
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Version
}

type GetAllStandardHistories_StandardHistories_Edges struct {
	Node *GetAllStandardHistories_StandardHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllStandardHistories_StandardHistories_Edges) GetNode() *GetAllStandardHistories_StandardHistories_Edges_Node {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges{}
	}
	return t.Node
}

type GetAllStandardHistories_StandardHistories struct {
	Edges []*GetAllStandardHistories_StandardHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllStandardHistories_StandardHistories) GetEdges() []*GetAllStandardHistories_StandardHistories_Edges {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories{}
	}
	return t.Edges
}

type GetStandardHistories_StandardHistories_Edges_Node struct {
	CreatedAt     *time.Time            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string               "json:\"description,omitempty\" graphql:\"description\""
	Domains       []string              "json:\"domains,omitempty\" graphql:\"domains\""
	Framework     *string               "json:\"framework,omitempty\" graphql:\"framework\""
	FreeToUse     *bool                 "json:\"freeToUse,omitempty\" graphql:\"freeToUse\""
	GoverningBody *string               "json:\"governingBody,omitempty\" graphql:\"governingBody\""
	HistoryTime   time.Time             "json:\"historyTime\" graphql:\"historyTime\""
	ID            string                "json:\"id\" graphql:\"id\""
	IsPublic      *bool                 "json:\"isPublic,omitempty\" graphql:\"isPublic\""
	Link          *string               "json:\"link,omitempty\" graphql:\"link\""
	Name          string                "json:\"name\" graphql:\"name\""
	Operation     history.OpType        "json:\"operation\" graphql:\"operation\""
	OwnerID       *string               "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref           *string               "json:\"ref,omitempty\" graphql:\"ref\""
	Revision      *string               "json:\"revision,omitempty\" graphql:\"revision\""
	ShortName     *string               "json:\"shortName,omitempty\" graphql:\"shortName\""
	StandardType  *string               "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status        *enums.StandardStatus "json:\"status,omitempty\" graphql:\"status\""
	SystemOwned   *bool                 "json:\"systemOwned,omitempty\" graphql:\"systemOwned\""
	Tags          []string              "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version       *string               "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetStandardHistories_StandardHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Domains
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetFramework() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Framework
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetFreeToUse() *bool {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.FreeToUse
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetGoverningBody() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.GoverningBody
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetIsPublic() *bool {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.IsPublic
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetLink() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Link
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetRevision() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Revision
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetShortName() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.ShortName
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetStandardType() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.StandardType
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetStatus() *enums.StandardStatus {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetSystemOwned() *bool {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.SystemOwned
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Version
}

type GetStandardHistories_StandardHistories_Edges struct {
	Node *GetStandardHistories_StandardHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetStandardHistories_StandardHistories_Edges) GetNode() *GetStandardHistories_StandardHistories_Edges_Node {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges{}
	}
	return t.Node
}

type GetStandardHistories_StandardHistories struct {
	Edges []*GetStandardHistories_StandardHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetStandardHistories_StandardHistories) GetEdges() []*GetStandardHistories_StandardHistories_Edges {
	if t == nil {
		t = &GetStandardHistories_StandardHistories{}
	}
	return t.Edges
}

type CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols_ControlOwner struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols_ControlOwner) GetID() string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols_ControlOwner{}
	}
	return t.ID
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols_ControlOwner) GetName() string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols_ControlOwner{}
	}
	return t.Name
}

type CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols_Delegate) GetID() string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols_Delegate{}
	}
	return t.ID
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols_Delegate) GetName() string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols_Delegate{}
	}
	return t.Name
}

type CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols struct {
	AssessmentMethods      []*models.AssessmentMethod                                                "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective                                             "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	Category               *string                                                                   "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                                                                   "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlID              string                                                                    "json:\"controlID\" graphql:\"controlID\""
	ControlOwner           *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols_ControlOwner "json:\"controlOwner,omitempty\" graphql:\"controlOwner\""
	ControlQuestions       []string                                                                  "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType                                                        "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                                                                "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                                                                   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate               *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols_Delegate     "json:\"delegate,omitempty\" graphql:\"delegate\""
	Description            *string                                                                   "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                                                                    "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence                                                 "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                                                                    "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance                                          "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                                                                  "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                                                                   "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                                                                    "json:\"refCode\" graphql:\"refCode\""
	References             []*models.Reference                                                       "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource                                                      "json:\"source,omitempty\" graphql:\"source\""
	Status                 *enums.ControlStatus                                                      "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                                                                   "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                                                                  "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                                                                "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                                                                   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.AssessmentMethods
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.AssessmentObjectives
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetCategory() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.Category
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetCategoryID() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.CategoryID
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetControlID() string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.ControlID
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetControlOwner() *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols_ControlOwner {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.ControlOwner
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetControlQuestions() []string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.ControlQuestions
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetControlType() *enums.ControlType {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.ControlType
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetDelegate() *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols_Delegate {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.Delegate
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.Description
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.DisplayID
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.ExampleEvidence
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetID() string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.ID
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.ImplementationGuidance
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetMappedCategories() []string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.MappedCategories
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetRefCode() string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.RefCode
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetReferences() []*models.Reference {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.References
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetSource() *enums.ControlSource {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.Source
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.Status
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetSubcategory() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.Subcategory
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.Tags
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol struct {
	Subcontrols []*CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols "json:\"subcontrols,omitempty\" graphql:\"subcontrols\""
}

func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol) GetSubcontrols() []*CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol{}
	}
	return t.Subcontrols
}

type CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols_ControlOwner struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols_ControlOwner) GetID() string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols_ControlOwner{}
	}
	return t.ID
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols_ControlOwner) GetName() string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols_ControlOwner{}
	}
	return t.Name
}

type CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols_Delegate) GetID() string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols_Delegate{}
	}
	return t.ID
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols_Delegate) GetName() string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols_Delegate{}
	}
	return t.Name
}

type CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols struct {
	AssessmentMethods      []*models.AssessmentMethod                                          "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective                                       "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	Category               *string                                                             "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                                                             "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlID              string                                                              "json:\"controlID\" graphql:\"controlID\""
	ControlOwner           *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols_ControlOwner "json:\"controlOwner,omitempty\" graphql:\"controlOwner\""
	ControlQuestions       []string                                                            "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType                                                  "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                                                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                                                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate               *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols_Delegate     "json:\"delegate,omitempty\" graphql:\"delegate\""
	Description            *string                                                             "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                                                              "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence                                           "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                                                              "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance                                    "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                                                            "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                                                             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                                                              "json:\"refCode\" graphql:\"refCode\""
	References             []*models.Reference                                                 "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource                                                "json:\"source,omitempty\" graphql:\"source\""
	Status                 *enums.ControlStatus                                                "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                                                             "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                                                            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                                                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                                                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.AssessmentMethods
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.AssessmentObjectives
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetCategory() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.Category
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetCategoryID() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.CategoryID
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetControlID() string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.ControlID
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetControlOwner() *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols_ControlOwner {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.ControlOwner
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetControlQuestions() []string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.ControlQuestions
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetControlType() *enums.ControlType {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.ControlType
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.CreatedAt
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.CreatedBy
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetDelegate() *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols_Delegate {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.Delegate
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetDescription() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.Description
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.DisplayID
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.ExampleEvidence
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetID() string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.ID
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.ImplementationGuidance
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetMappedCategories() []string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.MappedCategories
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.OwnerID
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetRefCode() string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.RefCode
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetReferences() []*models.Reference {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.References
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetSource() *enums.ControlSource {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.Source
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.Status
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetSubcategory() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.Subcategory
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetTags() []string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.Tags
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.UpdatedBy
}

type CreateBulkSubcontrol_CreateBulkSubcontrol struct {
	Subcontrols []*CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols "json:\"subcontrols,omitempty\" graphql:\"subcontrols\""
}

func (t *CreateBulkSubcontrol_CreateBulkSubcontrol) GetSubcontrols() []*CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol{}
	}
	return t.Subcontrols
}

type CreateSubcontrol_CreateSubcontrol_Subcontrol_ControlOwner struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol_ControlOwner) GetID() string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol_ControlOwner{}
	}
	return t.ID
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol_ControlOwner) GetName() string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol_ControlOwner{}
	}
	return t.Name
}

type CreateSubcontrol_CreateSubcontrol_Subcontrol_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol_Delegate) GetID() string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol_Delegate{}
	}
	return t.ID
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol_Delegate) GetName() string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol_Delegate{}
	}
	return t.Name
}

type CreateSubcontrol_CreateSubcontrol_Subcontrol struct {
	AssessmentMethods      []*models.AssessmentMethod                                 "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective                              "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	Category               *string                                                    "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                                                    "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlID              string                                                     "json:\"controlID\" graphql:\"controlID\""
	ControlOwner           *CreateSubcontrol_CreateSubcontrol_Subcontrol_ControlOwner "json:\"controlOwner,omitempty\" graphql:\"controlOwner\""
	ControlQuestions       []string                                                   "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType                                         "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate               *CreateSubcontrol_CreateSubcontrol_Subcontrol_Delegate     "json:\"delegate,omitempty\" graphql:\"delegate\""
	Description            *string                                                    "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                                                     "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence                                  "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                                                     "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance                           "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                                                   "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                                                    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                                                     "json:\"refCode\" graphql:\"refCode\""
	References             []*models.Reference                                        "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource                                       "json:\"source,omitempty\" graphql:\"source\""
	Status                 *enums.ControlStatus                                       "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                                                    "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                                                   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.AssessmentMethods
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.AssessmentObjectives
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetCategory() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.Category
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetCategoryID() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.CategoryID
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetControlID() string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.ControlID
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetControlOwner() *CreateSubcontrol_CreateSubcontrol_Subcontrol_ControlOwner {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.ControlOwner
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetControlQuestions() []string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.ControlQuestions
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetControlType() *enums.ControlType {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.ControlType
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.CreatedAt
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetCreatedBy() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.CreatedBy
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetDelegate() *CreateSubcontrol_CreateSubcontrol_Subcontrol_Delegate {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.Delegate
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetDescription() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.Description
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetDisplayID() string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.DisplayID
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.ExampleEvidence
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetID() string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.ID
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.ImplementationGuidance
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetMappedCategories() []string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.MappedCategories
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetOwnerID() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.OwnerID
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetRefCode() string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.RefCode
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetReferences() []*models.Reference {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.References
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetSource() *enums.ControlSource {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.Source
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.Status
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetSubcategory() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.Subcategory
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetTags() []string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.Tags
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.UpdatedAt
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.UpdatedBy
}

type CreateSubcontrol_CreateSubcontrol struct {
	Subcontrol CreateSubcontrol_CreateSubcontrol_Subcontrol "json:\"subcontrol\" graphql:\"subcontrol\""
}

func (t *CreateSubcontrol_CreateSubcontrol) GetSubcontrol() *CreateSubcontrol_CreateSubcontrol_Subcontrol {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol{}
	}
	return &t.Subcontrol
}

type DeleteSubcontrol_DeleteSubcontrol struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteSubcontrol_DeleteSubcontrol) GetDeletedID() string {
	if t == nil {
		t = &DeleteSubcontrol_DeleteSubcontrol{}
	}
	return t.DeletedID
}

type GetAllSubcontrols_Subcontrols_Edges_Node_Control struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	DisplayID   string  "json:\"displayID\" graphql:\"displayID\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetAllSubcontrols_Subcontrols_Edges_Node_Control) GetDescription() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node_Control{}
	}
	return t.Description
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node_Control) GetDisplayID() string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node_Control{}
	}
	return t.DisplayID
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node_Control) GetID() string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node_Control{}
	}
	return t.ID
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node_Control) GetRefCode() string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node_Control{}
	}
	return t.RefCode
}

type GetAllSubcontrols_Subcontrols_Edges_Node_ControlOwner struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllSubcontrols_Subcontrols_Edges_Node_ControlOwner) GetID() string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node_ControlOwner{}
	}
	return t.ID
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node_ControlOwner) GetName() string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node_ControlOwner{}
	}
	return t.Name
}

type GetAllSubcontrols_Subcontrols_Edges_Node_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllSubcontrols_Subcontrols_Edges_Node_Delegate) GetID() string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node_Delegate{}
	}
	return t.ID
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node_Delegate) GetName() string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node_Delegate{}
	}
	return t.Name
}

type GetAllSubcontrols_Subcontrols_Edges_Node struct {
	AssessmentMethods      []*models.AssessmentMethod                             "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective                          "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	Category               *string                                                "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                                                "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	Control                GetAllSubcontrols_Subcontrols_Edges_Node_Control       "json:\"control\" graphql:\"control\""
	ControlID              string                                                 "json:\"controlID\" graphql:\"controlID\""
	ControlOwner           *GetAllSubcontrols_Subcontrols_Edges_Node_ControlOwner "json:\"controlOwner,omitempty\" graphql:\"controlOwner\""
	ControlQuestions       []string                                               "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType                                     "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate               *GetAllSubcontrols_Subcontrols_Edges_Node_Delegate     "json:\"delegate,omitempty\" graphql:\"delegate\""
	Description            *string                                                "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                                                 "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence                              "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                                                 "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance                       "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                                               "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                                                "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                                                 "json:\"refCode\" graphql:\"refCode\""
	References             []*models.Reference                                    "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource                                   "json:\"source,omitempty\" graphql:\"source\""
	Status                 *enums.ControlStatus                                   "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                                                "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                                               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.AssessmentMethods
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.AssessmentObjectives
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetCategoryID() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.CategoryID
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetControl() *GetAllSubcontrols_Subcontrols_Edges_Node_Control {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return &t.Control
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetControlID() string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ControlID
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetControlOwner() *GetAllSubcontrols_Subcontrols_Edges_Node_ControlOwner {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ControlOwner
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetControlQuestions() []string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ControlQuestions
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetControlType() *enums.ControlType {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ControlType
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetDelegate() *GetAllSubcontrols_Subcontrols_Edges_Node_Delegate {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Delegate
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ExampleEvidence
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ImplementationGuidance
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetMappedCategories() []string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.MappedCategories
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetReferences() []*models.Reference {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.References
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllSubcontrols_Subcontrols_Edges struct {
	Node *GetAllSubcontrols_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllSubcontrols_Subcontrols_Edges) GetNode() *GetAllSubcontrols_Subcontrols_Edges_Node {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges{}
	}
	return t.Node
}

type GetAllSubcontrols_Subcontrols struct {
	Edges []*GetAllSubcontrols_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllSubcontrols_Subcontrols) GetEdges() []*GetAllSubcontrols_Subcontrols_Edges {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols{}
	}
	return t.Edges
}

type GetSubcontrolByID_Subcontrol_Control struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	DisplayID   string  "json:\"displayID\" graphql:\"displayID\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetSubcontrolByID_Subcontrol_Control) GetDescription() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol_Control{}
	}
	return t.Description
}
func (t *GetSubcontrolByID_Subcontrol_Control) GetDisplayID() string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol_Control{}
	}
	return t.DisplayID
}
func (t *GetSubcontrolByID_Subcontrol_Control) GetID() string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol_Control{}
	}
	return t.ID
}
func (t *GetSubcontrolByID_Subcontrol_Control) GetRefCode() string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol_Control{}
	}
	return t.RefCode
}

type GetSubcontrolByID_Subcontrol_ControlOwner struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetSubcontrolByID_Subcontrol_ControlOwner) GetID() string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol_ControlOwner{}
	}
	return t.ID
}
func (t *GetSubcontrolByID_Subcontrol_ControlOwner) GetName() string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol_ControlOwner{}
	}
	return t.Name
}

type GetSubcontrolByID_Subcontrol_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetSubcontrolByID_Subcontrol_Delegate) GetID() string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol_Delegate{}
	}
	return t.ID
}
func (t *GetSubcontrolByID_Subcontrol_Delegate) GetName() string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol_Delegate{}
	}
	return t.Name
}

type GetSubcontrolByID_Subcontrol struct {
	AssessmentMethods      []*models.AssessmentMethod                 "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective              "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	Category               *string                                    "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                                    "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	Control                GetSubcontrolByID_Subcontrol_Control       "json:\"control\" graphql:\"control\""
	ControlID              string                                     "json:\"controlID\" graphql:\"controlID\""
	ControlOwner           *GetSubcontrolByID_Subcontrol_ControlOwner "json:\"controlOwner,omitempty\" graphql:\"controlOwner\""
	ControlQuestions       []string                                   "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType                         "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate               *GetSubcontrolByID_Subcontrol_Delegate     "json:\"delegate,omitempty\" graphql:\"delegate\""
	Description            *string                                    "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                                     "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence                  "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                                     "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance           "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                                   "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                                    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                                     "json:\"refCode\" graphql:\"refCode\""
	References             []*models.Reference                        "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource                       "json:\"source,omitempty\" graphql:\"source\""
	Status                 *enums.ControlStatus                       "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                                    "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                                   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetSubcontrolByID_Subcontrol) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.AssessmentMethods
}
func (t *GetSubcontrolByID_Subcontrol) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.AssessmentObjectives
}
func (t *GetSubcontrolByID_Subcontrol) GetCategory() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.Category
}
func (t *GetSubcontrolByID_Subcontrol) GetCategoryID() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.CategoryID
}
func (t *GetSubcontrolByID_Subcontrol) GetControl() *GetSubcontrolByID_Subcontrol_Control {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return &t.Control
}
func (t *GetSubcontrolByID_Subcontrol) GetControlID() string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.ControlID
}
func (t *GetSubcontrolByID_Subcontrol) GetControlOwner() *GetSubcontrolByID_Subcontrol_ControlOwner {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.ControlOwner
}
func (t *GetSubcontrolByID_Subcontrol) GetControlQuestions() []string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.ControlQuestions
}
func (t *GetSubcontrolByID_Subcontrol) GetControlType() *enums.ControlType {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.ControlType
}
func (t *GetSubcontrolByID_Subcontrol) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.CreatedAt
}
func (t *GetSubcontrolByID_Subcontrol) GetCreatedBy() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.CreatedBy
}
func (t *GetSubcontrolByID_Subcontrol) GetDelegate() *GetSubcontrolByID_Subcontrol_Delegate {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.Delegate
}
func (t *GetSubcontrolByID_Subcontrol) GetDescription() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.Description
}
func (t *GetSubcontrolByID_Subcontrol) GetDisplayID() string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.DisplayID
}
func (t *GetSubcontrolByID_Subcontrol) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.ExampleEvidence
}
func (t *GetSubcontrolByID_Subcontrol) GetID() string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.ID
}
func (t *GetSubcontrolByID_Subcontrol) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.ImplementationGuidance
}
func (t *GetSubcontrolByID_Subcontrol) GetMappedCategories() []string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.MappedCategories
}
func (t *GetSubcontrolByID_Subcontrol) GetOwnerID() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.OwnerID
}
func (t *GetSubcontrolByID_Subcontrol) GetRefCode() string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.RefCode
}
func (t *GetSubcontrolByID_Subcontrol) GetReferences() []*models.Reference {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.References
}
func (t *GetSubcontrolByID_Subcontrol) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.Source
}
func (t *GetSubcontrolByID_Subcontrol) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.Status
}
func (t *GetSubcontrolByID_Subcontrol) GetSubcategory() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.Subcategory
}
func (t *GetSubcontrolByID_Subcontrol) GetTags() []string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.Tags
}
func (t *GetSubcontrolByID_Subcontrol) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.UpdatedAt
}
func (t *GetSubcontrolByID_Subcontrol) GetUpdatedBy() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.UpdatedBy
}

type GetSubcontrols_Subcontrols_Edges_Node_Control struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	DisplayID   string  "json:\"displayID\" graphql:\"displayID\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *GetSubcontrols_Subcontrols_Edges_Node_Control) GetDescription() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node_Control{}
	}
	return t.Description
}
func (t *GetSubcontrols_Subcontrols_Edges_Node_Control) GetDisplayID() string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node_Control{}
	}
	return t.DisplayID
}
func (t *GetSubcontrols_Subcontrols_Edges_Node_Control) GetID() string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node_Control{}
	}
	return t.ID
}
func (t *GetSubcontrols_Subcontrols_Edges_Node_Control) GetRefCode() string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node_Control{}
	}
	return t.RefCode
}

type GetSubcontrols_Subcontrols_Edges_Node_ControlOwner struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetSubcontrols_Subcontrols_Edges_Node_ControlOwner) GetID() string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node_ControlOwner{}
	}
	return t.ID
}
func (t *GetSubcontrols_Subcontrols_Edges_Node_ControlOwner) GetName() string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node_ControlOwner{}
	}
	return t.Name
}

type GetSubcontrols_Subcontrols_Edges_Node_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetSubcontrols_Subcontrols_Edges_Node_Delegate) GetID() string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node_Delegate{}
	}
	return t.ID
}
func (t *GetSubcontrols_Subcontrols_Edges_Node_Delegate) GetName() string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node_Delegate{}
	}
	return t.Name
}

type GetSubcontrols_Subcontrols_Edges_Node struct {
	AssessmentMethods      []*models.AssessmentMethod                          "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective                       "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	Category               *string                                             "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                                             "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	Control                GetSubcontrols_Subcontrols_Edges_Node_Control       "json:\"control\" graphql:\"control\""
	ControlID              string                                              "json:\"controlID\" graphql:\"controlID\""
	ControlOwner           *GetSubcontrols_Subcontrols_Edges_Node_ControlOwner "json:\"controlOwner,omitempty\" graphql:\"controlOwner\""
	ControlQuestions       []string                                            "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType                                  "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate               *GetSubcontrols_Subcontrols_Edges_Node_Delegate     "json:\"delegate,omitempty\" graphql:\"delegate\""
	Description            *string                                             "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                                              "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence                           "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                                              "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance                    "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                                            "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                                             "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                                              "json:\"refCode\" graphql:\"refCode\""
	References             []*models.Reference                                 "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource                                "json:\"source,omitempty\" graphql:\"source\""
	Status                 *enums.ControlStatus                                "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                                             "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                                            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetSubcontrols_Subcontrols_Edges_Node) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.AssessmentMethods
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.AssessmentObjectives
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Category
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetCategoryID() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.CategoryID
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetControl() *GetSubcontrols_Subcontrols_Edges_Node_Control {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return &t.Control
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetControlID() string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ControlID
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetControlOwner() *GetSubcontrols_Subcontrols_Edges_Node_ControlOwner {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ControlOwner
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetControlQuestions() []string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ControlQuestions
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetControlType() *enums.ControlType {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ControlType
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetDelegate() *GetSubcontrols_Subcontrols_Edges_Node_Delegate {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Delegate
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Description
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ExampleEvidence
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ImplementationGuidance
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetMappedCategories() []string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.MappedCategories
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.RefCode
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetReferences() []*models.Reference {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.References
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Source
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Status
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Tags
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetSubcontrols_Subcontrols_Edges struct {
	Node *GetSubcontrols_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetSubcontrols_Subcontrols_Edges) GetNode() *GetSubcontrols_Subcontrols_Edges_Node {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges{}
	}
	return t.Node
}

type GetSubcontrols_Subcontrols struct {
	Edges []*GetSubcontrols_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetSubcontrols_Subcontrols) GetEdges() []*GetSubcontrols_Subcontrols_Edges {
	if t == nil {
		t = &GetSubcontrols_Subcontrols{}
	}
	return t.Edges
}

type UpdateSubcontrol_UpdateSubcontrol_Subcontrol_Control struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	DisplayID   string  "json:\"displayID\" graphql:\"displayID\""
	ID          string  "json:\"id\" graphql:\"id\""
	RefCode     string  "json:\"refCode\" graphql:\"refCode\""
}

func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol_Control) GetDescription() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol_Control{}
	}
	return t.Description
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol_Control) GetDisplayID() string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol_Control{}
	}
	return t.DisplayID
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol_Control) GetID() string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol_Control{}
	}
	return t.ID
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol_Control) GetRefCode() string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol_Control{}
	}
	return t.RefCode
}

type UpdateSubcontrol_UpdateSubcontrol_Subcontrol_ControlOwner struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol_ControlOwner) GetID() string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol_ControlOwner{}
	}
	return t.ID
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol_ControlOwner) GetName() string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol_ControlOwner{}
	}
	return t.Name
}

type UpdateSubcontrol_UpdateSubcontrol_Subcontrol_Delegate struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol_Delegate) GetID() string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol_Delegate{}
	}
	return t.ID
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol_Delegate) GetName() string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol_Delegate{}
	}
	return t.Name
}

type UpdateSubcontrol_UpdateSubcontrol_Subcontrol struct {
	AssessmentMethods      []*models.AssessmentMethod                                 "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective                              "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	Category               *string                                                    "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                                                    "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	Control                UpdateSubcontrol_UpdateSubcontrol_Subcontrol_Control       "json:\"control\" graphql:\"control\""
	ControlID              string                                                     "json:\"controlID\" graphql:\"controlID\""
	ControlOwner           *UpdateSubcontrol_UpdateSubcontrol_Subcontrol_ControlOwner "json:\"controlOwner,omitempty\" graphql:\"controlOwner\""
	ControlQuestions       []string                                                   "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType                                         "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Delegate               *UpdateSubcontrol_UpdateSubcontrol_Subcontrol_Delegate     "json:\"delegate,omitempty\" graphql:\"delegate\""
	Description            *string                                                    "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                                                     "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence                                  "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	ID                     string                                                     "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance                           "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                                                   "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	OwnerID                *string                                                    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RefCode                string                                                     "json:\"refCode\" graphql:\"refCode\""
	References             []*models.Reference                                        "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource                                       "json:\"source,omitempty\" graphql:\"source\""
	Status                 *enums.ControlStatus                                       "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                                                    "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                                                   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.AssessmentMethods
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.AssessmentObjectives
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetCategory() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.Category
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetCategoryID() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.CategoryID
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetControl() *UpdateSubcontrol_UpdateSubcontrol_Subcontrol_Control {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return &t.Control
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetControlID() string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.ControlID
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetControlOwner() *UpdateSubcontrol_UpdateSubcontrol_Subcontrol_ControlOwner {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.ControlOwner
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetControlQuestions() []string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.ControlQuestions
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetControlType() *enums.ControlType {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.ControlType
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.CreatedAt
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.CreatedBy
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetDelegate() *UpdateSubcontrol_UpdateSubcontrol_Subcontrol_Delegate {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.Delegate
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetDescription() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.Description
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetDisplayID() string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.DisplayID
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.ExampleEvidence
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetID() string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.ID
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.ImplementationGuidance
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetMappedCategories() []string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.MappedCategories
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetOwnerID() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.OwnerID
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetRefCode() string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.RefCode
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetReferences() []*models.Reference {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.References
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetSource() *enums.ControlSource {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.Source
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.Status
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetSubcategory() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.Subcategory
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetTags() []string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.Tags
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.UpdatedAt
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.UpdatedBy
}

type UpdateSubcontrol_UpdateSubcontrol struct {
	Subcontrol UpdateSubcontrol_UpdateSubcontrol_Subcontrol "json:\"subcontrol\" graphql:\"subcontrol\""
}

func (t *UpdateSubcontrol_UpdateSubcontrol) GetSubcontrol() *UpdateSubcontrol_UpdateSubcontrol_Subcontrol {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol{}
	}
	return &t.Subcontrol
}

type GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlID              string                           "json:\"controlID\" graphql:\"controlID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	HistoryTime            time.Time                        "json:\"historyTime\" graphql:\"historyTime\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	Operation              history.OpType                   "json:\"operation\" graphql:\"operation\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                    *string                          "json:\"ref,omitempty\" graphql:\"ref\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.AssessmentMethods
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.AssessmentObjectives
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetCategoryID() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.CategoryID
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetControlID() string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ControlID
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetControlQuestions() []string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ControlQuestions
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetControlType() *enums.ControlType {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ControlType
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ExampleEvidence
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ImplementationGuidance
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetMappedCategories() []string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.MappedCategories
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.RefCode
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetReferences() []*models.Reference {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.References
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllSubcontrolHistories_SubcontrolHistories_Edges struct {
	Node *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges) GetNode() *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges{}
	}
	return t.Node
}

type GetAllSubcontrolHistories_SubcontrolHistories struct {
	Edges []*GetAllSubcontrolHistories_SubcontrolHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllSubcontrolHistories_SubcontrolHistories) GetEdges() []*GetAllSubcontrolHistories_SubcontrolHistories_Edges {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories{}
	}
	return t.Edges
}

type GetSubcontrolHistories_SubcontrolHistories_Edges_Node struct {
	AssessmentMethods      []*models.AssessmentMethod       "json:\"assessmentMethods,omitempty\" graphql:\"assessmentMethods\""
	AssessmentObjectives   []*models.AssessmentObjective    "json:\"assessmentObjectives,omitempty\" graphql:\"assessmentObjectives\""
	Category               *string                          "json:\"category,omitempty\" graphql:\"category\""
	CategoryID             *string                          "json:\"categoryID,omitempty\" graphql:\"categoryID\""
	ControlID              string                           "json:\"controlID\" graphql:\"controlID\""
	ControlQuestions       []string                         "json:\"controlQuestions,omitempty\" graphql:\"controlQuestions\""
	ControlType            *enums.ControlType               "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt              *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description            *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayID              string                           "json:\"displayID\" graphql:\"displayID\""
	ExampleEvidence        []*models.ExampleEvidence        "json:\"exampleEvidence,omitempty\" graphql:\"exampleEvidence\""
	HistoryTime            time.Time                        "json:\"historyTime\" graphql:\"historyTime\""
	ID                     string                           "json:\"id\" graphql:\"id\""
	ImplementationGuidance []*models.ImplementationGuidance "json:\"implementationGuidance,omitempty\" graphql:\"implementationGuidance\""
	MappedCategories       []string                         "json:\"mappedCategories,omitempty\" graphql:\"mappedCategories\""
	Operation              history.OpType                   "json:\"operation\" graphql:\"operation\""
	OwnerID                *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref                    *string                          "json:\"ref,omitempty\" graphql:\"ref\""
	RefCode                string                           "json:\"refCode\" graphql:\"refCode\""
	References             []*models.Reference              "json:\"references,omitempty\" graphql:\"references\""
	Source                 *enums.ControlSource             "json:\"source,omitempty\" graphql:\"source\""
	Status                 *enums.ControlStatus             "json:\"status,omitempty\" graphql:\"status\""
	Subcategory            *string                          "json:\"subcategory,omitempty\" graphql:\"subcategory\""
	Tags                   []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetAssessmentMethods() []*models.AssessmentMethod {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.AssessmentMethods
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetAssessmentObjectives() []*models.AssessmentObjective {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.AssessmentObjectives
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Category
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetCategoryID() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.CategoryID
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetControlID() string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ControlID
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetControlQuestions() []string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ControlQuestions
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetControlType() *enums.ControlType {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ControlType
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetExampleEvidence() []*models.ExampleEvidence {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ExampleEvidence
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetImplementationGuidance() []*models.ImplementationGuidance {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ImplementationGuidance
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetMappedCategories() []string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.MappedCategories
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetRefCode() string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.RefCode
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetReferences() []*models.Reference {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.References
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetSource() *enums.ControlSource {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetStatus() *enums.ControlStatus {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetSubcategory() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Subcategory
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetSubcontrolHistories_SubcontrolHistories_Edges struct {
	Node *GetSubcontrolHistories_SubcontrolHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetSubcontrolHistories_SubcontrolHistories_Edges) GetNode() *GetSubcontrolHistories_SubcontrolHistories_Edges_Node {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges{}
	}
	return t.Node
}

type GetSubcontrolHistories_SubcontrolHistories struct {
	Edges []*GetSubcontrolHistories_SubcontrolHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetSubcontrolHistories_SubcontrolHistories) GetEdges() []*GetSubcontrolHistories_SubcontrolHistories_Edges {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories{}
	}
	return t.Edges
}

type CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers struct {
	Active        bool   "json:\"active\" graphql:\"active\""
	Email         string "json:\"email\" graphql:\"email\""
	ID            string "json:\"id\" graphql:\"id\""
	Unsubscribed  bool   "json:\"unsubscribed\" graphql:\"unsubscribed\""
	VerifiedEmail bool   "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers) GetActive() bool {
	if t == nil {
		t = &CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers{}
	}
	return t.Active
}
func (t *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers) GetEmail() string {
	if t == nil {
		t = &CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers{}
	}
	return t.Email
}
func (t *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers) GetID() string {
	if t == nil {
		t = &CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers{}
	}
	return t.ID
}
func (t *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers) GetUnsubscribed() bool {
	if t == nil {
		t = &CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers{}
	}
	return t.Unsubscribed
}
func (t *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers) GetVerifiedEmail() bool {
	if t == nil {
		t = &CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers{}
	}
	return t.VerifiedEmail
}

type CreateBulkCSVSubscriber_CreateBulkCSVSubscriber struct {
	Subscribers []*CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers "json:\"subscribers,omitempty\" graphql:\"subscribers\""
}

func (t *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber) GetSubscribers() []*CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers {
	if t == nil {
		t = &CreateBulkCSVSubscriber_CreateBulkCSVSubscriber{}
	}
	return t.Subscribers
}

type CreateBulkSubscriber_CreateBulkSubscriber_Subscribers struct {
	Active        bool   "json:\"active\" graphql:\"active\""
	Email         string "json:\"email\" graphql:\"email\""
	ID            string "json:\"id\" graphql:\"id\""
	Unsubscribed  bool   "json:\"unsubscribed\" graphql:\"unsubscribed\""
	VerifiedEmail bool   "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *CreateBulkSubscriber_CreateBulkSubscriber_Subscribers) GetActive() bool {
	if t == nil {
		t = &CreateBulkSubscriber_CreateBulkSubscriber_Subscribers{}
	}
	return t.Active
}
func (t *CreateBulkSubscriber_CreateBulkSubscriber_Subscribers) GetEmail() string {
	if t == nil {
		t = &CreateBulkSubscriber_CreateBulkSubscriber_Subscribers{}
	}
	return t.Email
}
func (t *CreateBulkSubscriber_CreateBulkSubscriber_Subscribers) GetID() string {
	if t == nil {
		t = &CreateBulkSubscriber_CreateBulkSubscriber_Subscribers{}
	}
	return t.ID
}
func (t *CreateBulkSubscriber_CreateBulkSubscriber_Subscribers) GetUnsubscribed() bool {
	if t == nil {
		t = &CreateBulkSubscriber_CreateBulkSubscriber_Subscribers{}
	}
	return t.Unsubscribed
}
func (t *CreateBulkSubscriber_CreateBulkSubscriber_Subscribers) GetVerifiedEmail() bool {
	if t == nil {
		t = &CreateBulkSubscriber_CreateBulkSubscriber_Subscribers{}
	}
	return t.VerifiedEmail
}

type CreateBulkSubscriber_CreateBulkSubscriber struct {
	Subscribers []*CreateBulkSubscriber_CreateBulkSubscriber_Subscribers "json:\"subscribers,omitempty\" graphql:\"subscribers\""
}

func (t *CreateBulkSubscriber_CreateBulkSubscriber) GetSubscribers() []*CreateBulkSubscriber_CreateBulkSubscriber_Subscribers {
	if t == nil {
		t = &CreateBulkSubscriber_CreateBulkSubscriber{}
	}
	return t.Subscribers
}

type CreateSubscriber_CreateSubscriber_Subscriber struct {
	Active        bool       "json:\"active\" graphql:\"active\""
	CreatedAt     *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email         string     "json:\"email\" graphql:\"email\""
	ID            string     "json:\"id\" graphql:\"id\""
	Unsubscribed  bool       "json:\"unsubscribed\" graphql:\"unsubscribed\""
	UpdatedAt     *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerifiedEmail bool       "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetActive() bool {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.Active
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.CreatedAt
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetCreatedBy() *string {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.CreatedBy
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetEmail() string {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.Email
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetID() string {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.ID
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetUnsubscribed() bool {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.Unsubscribed
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.UpdatedAt
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.UpdatedBy
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetVerifiedEmail() bool {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.VerifiedEmail
}

type CreateSubscriber_CreateSubscriber struct {
	Subscriber CreateSubscriber_CreateSubscriber_Subscriber "json:\"subscriber\" graphql:\"subscriber\""
}

func (t *CreateSubscriber_CreateSubscriber) GetSubscriber() *CreateSubscriber_CreateSubscriber_Subscriber {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber{}
	}
	return &t.Subscriber
}

type DeleteSubscriber_DeleteSubscriber struct {
	Email string "json:\"email\" graphql:\"email\""
}

func (t *DeleteSubscriber_DeleteSubscriber) GetEmail() string {
	if t == nil {
		t = &DeleteSubscriber_DeleteSubscriber{}
	}
	return t.Email
}

type GetAllSubscribers_Subscribers_Edges_Node struct {
	Active        bool    "json:\"active\" graphql:\"active\""
	Email         string  "json:\"email\" graphql:\"email\""
	ID            string  "json:\"id\" graphql:\"id\""
	OwnerID       *string "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SendAttempts  int64   "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Unsubscribed  bool    "json:\"unsubscribed\" graphql:\"unsubscribed\""
	VerifiedEmail bool    "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *GetAllSubscribers_Subscribers_Edges_Node) GetActive() bool {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.Active
}
func (t *GetAllSubscribers_Subscribers_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.Email
}
func (t *GetAllSubscribers_Subscribers_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllSubscribers_Subscribers_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllSubscribers_Subscribers_Edges_Node) GetSendAttempts() int64 {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.SendAttempts
}
func (t *GetAllSubscribers_Subscribers_Edges_Node) GetUnsubscribed() bool {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.Unsubscribed
}
func (t *GetAllSubscribers_Subscribers_Edges_Node) GetVerifiedEmail() bool {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.VerifiedEmail
}

type GetAllSubscribers_Subscribers_Edges struct {
	Node *GetAllSubscribers_Subscribers_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllSubscribers_Subscribers_Edges) GetNode() *GetAllSubscribers_Subscribers_Edges_Node {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges{}
	}
	return t.Node
}

type GetAllSubscribers_Subscribers struct {
	Edges []*GetAllSubscribers_Subscribers_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllSubscribers_Subscribers) GetEdges() []*GetAllSubscribers_Subscribers_Edges {
	if t == nil {
		t = &GetAllSubscribers_Subscribers{}
	}
	return t.Edges
}

type GetSubscriberByEmail_Subscriber struct {
	Active        bool    "json:\"active\" graphql:\"active\""
	Email         string  "json:\"email\" graphql:\"email\""
	ID            string  "json:\"id\" graphql:\"id\""
	OwnerID       *string "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SendAttempts  int64   "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Unsubscribed  bool    "json:\"unsubscribed\" graphql:\"unsubscribed\""
	VerifiedEmail bool    "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *GetSubscriberByEmail_Subscriber) GetActive() bool {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.Active
}
func (t *GetSubscriberByEmail_Subscriber) GetEmail() string {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.Email
}
func (t *GetSubscriberByEmail_Subscriber) GetID() string {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.ID
}
func (t *GetSubscriberByEmail_Subscriber) GetOwnerID() *string {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.OwnerID
}
func (t *GetSubscriberByEmail_Subscriber) GetSendAttempts() int64 {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.SendAttempts
}
func (t *GetSubscriberByEmail_Subscriber) GetUnsubscribed() bool {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.Unsubscribed
}
func (t *GetSubscriberByEmail_Subscriber) GetVerifiedEmail() bool {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.VerifiedEmail
}

type GetSubscribers_Subscribers_Edges_Node struct {
	Active        bool    "json:\"active\" graphql:\"active\""
	Email         string  "json:\"email\" graphql:\"email\""
	ID            string  "json:\"id\" graphql:\"id\""
	OwnerID       *string "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	SendAttempts  int64   "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Unsubscribed  bool    "json:\"unsubscribed\" graphql:\"unsubscribed\""
	VerifiedEmail bool    "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *GetSubscribers_Subscribers_Edges_Node) GetActive() bool {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.Active
}
func (t *GetSubscribers_Subscribers_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.Email
}
func (t *GetSubscribers_Subscribers_Edges_Node) GetID() string {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.ID
}
func (t *GetSubscribers_Subscribers_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetSubscribers_Subscribers_Edges_Node) GetSendAttempts() int64 {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.SendAttempts
}
func (t *GetSubscribers_Subscribers_Edges_Node) GetUnsubscribed() bool {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.Unsubscribed
}
func (t *GetSubscribers_Subscribers_Edges_Node) GetVerifiedEmail() bool {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.VerifiedEmail
}

type GetSubscribers_Subscribers_Edges struct {
	Node *GetSubscribers_Subscribers_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetSubscribers_Subscribers_Edges) GetNode() *GetSubscribers_Subscribers_Edges_Node {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges{}
	}
	return t.Node
}

type GetSubscribers_Subscribers struct {
	Edges []*GetSubscribers_Subscribers_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetSubscribers_Subscribers) GetEdges() []*GetSubscribers_Subscribers_Edges {
	if t == nil {
		t = &GetSubscribers_Subscribers{}
	}
	return t.Edges
}

type UpdateSubscriber_UpdateSubscriber_Subscriber struct {
	Active        bool       "json:\"active\" graphql:\"active\""
	CreatedAt     *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email         string     "json:\"email\" graphql:\"email\""
	ID            string     "json:\"id\" graphql:\"id\""
	PhoneNumber   *string    "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Unsubscribed  bool       "json:\"unsubscribed\" graphql:\"unsubscribed\""
	UpdatedAt     *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerifiedEmail bool       "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
	VerifiedPhone bool       "json:\"verifiedPhone\" graphql:\"verifiedPhone\""
}

func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetActive() bool {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.Active
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.CreatedAt
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.CreatedBy
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetEmail() string {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.Email
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetID() string {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.ID
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetPhoneNumber() *string {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.PhoneNumber
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetUnsubscribed() bool {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.Unsubscribed
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.UpdatedAt
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.UpdatedBy
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetVerifiedEmail() bool {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.VerifiedEmail
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetVerifiedPhone() bool {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.VerifiedPhone
}

type UpdateSubscriber_UpdateSubscriber struct {
	Subscriber UpdateSubscriber_UpdateSubscriber_Subscriber "json:\"subscriber\" graphql:\"subscriber\""
}

func (t *UpdateSubscriber_UpdateSubscriber) GetSubscriber() *UpdateSubscriber_UpdateSubscriber_Subscriber {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber{}
	}
	return &t.Subscriber
}

type CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee) GetFirstName() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee{}
	}
	return t.FirstName
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee) GetID() string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee{}
	}
	return t.ID
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee) GetLastName() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee{}
	}
	return t.LastName
}

type CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner) GetFirstName() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner{}
	}
	return t.FirstName
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner) GetID() string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner{}
	}
	return t.ID
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner) GetLastName() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner{}
	}
	return t.LastName
}

type CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments_Edges_Node struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID string     "json:\"displayID\" graphql:\"displayID\""
	ID        string     "json:\"id\" graphql:\"id\""
	Text      string     "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments_Edges_Node{}
	}
	return t.DisplayID
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments_Edges_Node{}
	}
	return t.ID
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments_Edges_Node) GetText() string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments_Edges_Node{}
	}
	return t.Text
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments_Edges_Node{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments_Edges struct {
	Node *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments_Edges) GetNode() *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments_Edges_Node {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments_Edges{}
	}
	return t.Node
}

type CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments struct {
	Edges []*CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments) GetEdges() []*CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments_Edges {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments{}
	}
	return t.Edges
}

type CreateBulkCSVTask_CreateBulkCSVTask_Tasks struct {
	Assignee    *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	Assigner    *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner "json:\"assigner,omitempty\" graphql:\"assigner\""
	Category    *string                                             "json:\"category,omitempty\" graphql:\"category\""
	Comments    CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments  "json:\"comments\" graphql:\"comments\""
	Completed   *time.Time                                          "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt   *time.Time                                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                             "json:\"description,omitempty\" graphql:\"description\""
	Details     *string                                             "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string                                              "json:\"displayID\" graphql:\"displayID\""
	Due         *time.Time                                          "json:\"due,omitempty\" graphql:\"due\""
	ID          string                                              "json:\"id\" graphql:\"id\""
	Status      enums.TaskStatus                                    "json:\"status\" graphql:\"status\""
	Tags        []string                                            "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string                                              "json:\"title\" graphql:\"title\""
	UpdatedAt   *time.Time                                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetAssignee() *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Assignee
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetAssigner() *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Assigner
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetCategory() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Category
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetComments() *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Comments {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return &t.Comments
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetCompleted() *time.Time {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Completed
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Description
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetDetails() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Details
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.DisplayID
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetDue() *time.Time {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Due
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetID() string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.ID
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return &t.Status
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Tags
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetTitle() string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Title
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVTask_CreateBulkCSVTask struct {
	Tasks []*CreateBulkCSVTask_CreateBulkCSVTask_Tasks "json:\"tasks,omitempty\" graphql:\"tasks\""
}

func (t *CreateBulkCSVTask_CreateBulkCSVTask) GetTasks() []*CreateBulkCSVTask_CreateBulkCSVTask_Tasks {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask{}
	}
	return t.Tasks
}

type CreateBulkTask_CreateBulkTask_Tasks_Assignee struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateBulkTask_CreateBulkTask_Tasks_Assignee) GetFirstName() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Assignee{}
	}
	return t.FirstName
}
func (t *CreateBulkTask_CreateBulkTask_Tasks_Assignee) GetID() string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Assignee{}
	}
	return t.ID
}
func (t *CreateBulkTask_CreateBulkTask_Tasks_Assignee) GetLastName() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Assignee{}
	}
	return t.LastName
}

type CreateBulkTask_CreateBulkTask_Tasks_Assigner struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateBulkTask_CreateBulkTask_Tasks_Assigner) GetFirstName() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Assigner{}
	}
	return t.FirstName
}
func (t *CreateBulkTask_CreateBulkTask_Tasks_Assigner) GetID() string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Assigner{}
	}
	return t.ID
}
func (t *CreateBulkTask_CreateBulkTask_Tasks_Assigner) GetLastName() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Assigner{}
	}
	return t.LastName
}

type CreateBulkTask_CreateBulkTask_Tasks_Comments_Edges_Node struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID string     "json:\"displayID\" graphql:\"displayID\""
	ID        string     "json:\"id\" graphql:\"id\""
	Text      string     "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkTask_CreateBulkTask_Tasks_Comments_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Comments_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *CreateBulkTask_CreateBulkTask_Tasks_Comments_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Comments_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *CreateBulkTask_CreateBulkTask_Tasks_Comments_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Comments_Edges_Node{}
	}
	return t.DisplayID
}
func (t *CreateBulkTask_CreateBulkTask_Tasks_Comments_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Comments_Edges_Node{}
	}
	return t.ID
}
func (t *CreateBulkTask_CreateBulkTask_Tasks_Comments_Edges_Node) GetText() string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Comments_Edges_Node{}
	}
	return t.Text
}
func (t *CreateBulkTask_CreateBulkTask_Tasks_Comments_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Comments_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkTask_CreateBulkTask_Tasks_Comments_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Comments_Edges_Node{}
	}
	return t.UpdatedBy
}

type CreateBulkTask_CreateBulkTask_Tasks_Comments_Edges struct {
	Node *CreateBulkTask_CreateBulkTask_Tasks_Comments_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateBulkTask_CreateBulkTask_Tasks_Comments_Edges) GetNode() *CreateBulkTask_CreateBulkTask_Tasks_Comments_Edges_Node {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Comments_Edges{}
	}
	return t.Node
}

type CreateBulkTask_CreateBulkTask_Tasks_Comments struct {
	Edges []*CreateBulkTask_CreateBulkTask_Tasks_Comments_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateBulkTask_CreateBulkTask_Tasks_Comments) GetEdges() []*CreateBulkTask_CreateBulkTask_Tasks_Comments_Edges {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Comments{}
	}
	return t.Edges
}

type CreateBulkTask_CreateBulkTask_Tasks struct {
	Assignee    *CreateBulkTask_CreateBulkTask_Tasks_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	Assigner    *CreateBulkTask_CreateBulkTask_Tasks_Assigner "json:\"assigner,omitempty\" graphql:\"assigner\""
	Category    *string                                       "json:\"category,omitempty\" graphql:\"category\""
	Comments    CreateBulkTask_CreateBulkTask_Tasks_Comments  "json:\"comments\" graphql:\"comments\""
	Completed   *time.Time                                    "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt   *time.Time                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                       "json:\"description,omitempty\" graphql:\"description\""
	Details     *string                                       "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string                                        "json:\"displayID\" graphql:\"displayID\""
	Due         *time.Time                                    "json:\"due,omitempty\" graphql:\"due\""
	ID          string                                        "json:\"id\" graphql:\"id\""
	Status      enums.TaskStatus                              "json:\"status\" graphql:\"status\""
	Tags        []string                                      "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string                                        "json:\"title\" graphql:\"title\""
	UpdatedAt   *time.Time                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkTask_CreateBulkTask_Tasks) GetAssignee() *CreateBulkTask_CreateBulkTask_Tasks_Assignee {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Assignee
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetAssigner() *CreateBulkTask_CreateBulkTask_Tasks_Assigner {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Assigner
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetCategory() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Category
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetComments() *CreateBulkTask_CreateBulkTask_Tasks_Comments {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return &t.Comments
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetCompleted() *time.Time {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Completed
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.CreatedAt
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.CreatedBy
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetDescription() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Description
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetDetails() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Details
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetDisplayID() string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.DisplayID
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetDue() *time.Time {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Due
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetID() string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.ID
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return &t.Status
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetTags() []string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Tags
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetTitle() string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Title
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.UpdatedBy
}

type CreateBulkTask_CreateBulkTask struct {
	Tasks []*CreateBulkTask_CreateBulkTask_Tasks "json:\"tasks,omitempty\" graphql:\"tasks\""
}

func (t *CreateBulkTask_CreateBulkTask) GetTasks() []*CreateBulkTask_CreateBulkTask_Tasks {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask{}
	}
	return t.Tasks
}

type CreateTask_CreateTask_Task_Assignee struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateTask_CreateTask_Task_Assignee) GetFirstName() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Assignee{}
	}
	return t.FirstName
}
func (t *CreateTask_CreateTask_Task_Assignee) GetID() string {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Assignee{}
	}
	return t.ID
}
func (t *CreateTask_CreateTask_Task_Assignee) GetLastName() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Assignee{}
	}
	return t.LastName
}

type CreateTask_CreateTask_Task_Assigner struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateTask_CreateTask_Task_Assigner) GetFirstName() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Assigner{}
	}
	return t.FirstName
}
func (t *CreateTask_CreateTask_Task_Assigner) GetID() string {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Assigner{}
	}
	return t.ID
}
func (t *CreateTask_CreateTask_Task_Assigner) GetLastName() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Assigner{}
	}
	return t.LastName
}

type CreateTask_CreateTask_Task_Comments_Edges_Node struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID string     "json:\"displayID\" graphql:\"displayID\""
	ID        string     "json:\"id\" graphql:\"id\""
	Text      string     "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateTask_CreateTask_Task_Comments_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Comments_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *CreateTask_CreateTask_Task_Comments_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Comments_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *CreateTask_CreateTask_Task_Comments_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Comments_Edges_Node{}
	}
	return t.DisplayID
}
func (t *CreateTask_CreateTask_Task_Comments_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Comments_Edges_Node{}
	}
	return t.ID
}
func (t *CreateTask_CreateTask_Task_Comments_Edges_Node) GetText() string {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Comments_Edges_Node{}
	}
	return t.Text
}
func (t *CreateTask_CreateTask_Task_Comments_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Comments_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *CreateTask_CreateTask_Task_Comments_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Comments_Edges_Node{}
	}
	return t.UpdatedBy
}

type CreateTask_CreateTask_Task_Comments_Edges struct {
	Node *CreateTask_CreateTask_Task_Comments_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateTask_CreateTask_Task_Comments_Edges) GetNode() *CreateTask_CreateTask_Task_Comments_Edges_Node {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Comments_Edges{}
	}
	return t.Node
}

type CreateTask_CreateTask_Task_Comments struct {
	Edges []*CreateTask_CreateTask_Task_Comments_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateTask_CreateTask_Task_Comments) GetEdges() []*CreateTask_CreateTask_Task_Comments_Edges {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Comments{}
	}
	return t.Edges
}

type CreateTask_CreateTask_Task struct {
	Assignee    *CreateTask_CreateTask_Task_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	Assigner    *CreateTask_CreateTask_Task_Assigner "json:\"assigner,omitempty\" graphql:\"assigner\""
	Category    *string                              "json:\"category,omitempty\" graphql:\"category\""
	Comments    CreateTask_CreateTask_Task_Comments  "json:\"comments\" graphql:\"comments\""
	Completed   *time.Time                           "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt   *time.Time                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                              "json:\"description,omitempty\" graphql:\"description\""
	Details     *string                              "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string                               "json:\"displayID\" graphql:\"displayID\""
	Due         *time.Time                           "json:\"due,omitempty\" graphql:\"due\""
	ID          string                               "json:\"id\" graphql:\"id\""
	OwnerID     *string                              "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Status      enums.TaskStatus                     "json:\"status\" graphql:\"status\""
	Tags        []string                             "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string                               "json:\"title\" graphql:\"title\""
	UpdatedAt   *time.Time                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateTask_CreateTask_Task) GetAssignee() *CreateTask_CreateTask_Task_Assignee {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Assignee
}
func (t *CreateTask_CreateTask_Task) GetAssigner() *CreateTask_CreateTask_Task_Assigner {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Assigner
}
func (t *CreateTask_CreateTask_Task) GetCategory() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Category
}
func (t *CreateTask_CreateTask_Task) GetComments() *CreateTask_CreateTask_Task_Comments {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return &t.Comments
}
func (t *CreateTask_CreateTask_Task) GetCompleted() *time.Time {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Completed
}
func (t *CreateTask_CreateTask_Task) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.CreatedAt
}
func (t *CreateTask_CreateTask_Task) GetCreatedBy() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.CreatedBy
}
func (t *CreateTask_CreateTask_Task) GetDescription() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Description
}
func (t *CreateTask_CreateTask_Task) GetDetails() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Details
}
func (t *CreateTask_CreateTask_Task) GetDisplayID() string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.DisplayID
}
func (t *CreateTask_CreateTask_Task) GetDue() *time.Time {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Due
}
func (t *CreateTask_CreateTask_Task) GetID() string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.ID
}
func (t *CreateTask_CreateTask_Task) GetOwnerID() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.OwnerID
}
func (t *CreateTask_CreateTask_Task) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return &t.Status
}
func (t *CreateTask_CreateTask_Task) GetTags() []string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Tags
}
func (t *CreateTask_CreateTask_Task) GetTitle() string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Title
}
func (t *CreateTask_CreateTask_Task) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.UpdatedAt
}
func (t *CreateTask_CreateTask_Task) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.UpdatedBy
}

type CreateTask_CreateTask struct {
	Task CreateTask_CreateTask_Task "json:\"task\" graphql:\"task\""
}

func (t *CreateTask_CreateTask) GetTask() *CreateTask_CreateTask_Task {
	if t == nil {
		t = &CreateTask_CreateTask{}
	}
	return &t.Task
}

type DeleteTask_DeleteTask struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteTask_DeleteTask) GetDeletedID() string {
	if t == nil {
		t = &DeleteTask_DeleteTask{}
	}
	return t.DeletedID
}

type GetAllTasks_Tasks_Edges_Node_Assignee struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetAllTasks_Tasks_Edges_Node_Assignee) GetFirstName() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Assignee{}
	}
	return t.FirstName
}
func (t *GetAllTasks_Tasks_Edges_Node_Assignee) GetID() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Assignee{}
	}
	return t.ID
}
func (t *GetAllTasks_Tasks_Edges_Node_Assignee) GetLastName() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Assignee{}
	}
	return t.LastName
}

type GetAllTasks_Tasks_Edges_Node_Assigner struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetAllTasks_Tasks_Edges_Node_Assigner) GetFirstName() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Assigner{}
	}
	return t.FirstName
}
func (t *GetAllTasks_Tasks_Edges_Node_Assigner) GetID() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Assigner{}
	}
	return t.ID
}
func (t *GetAllTasks_Tasks_Edges_Node_Assigner) GetLastName() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Assigner{}
	}
	return t.LastName
}

type GetAllTasks_Tasks_Edges_Node_Owner struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllTasks_Tasks_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Owner{}
	}
	return t.ID
}
func (t *GetAllTasks_Tasks_Edges_Node_Owner) GetName() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Owner{}
	}
	return t.Name
}

type GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges_Node struct {
	ID            string  "json:\"id\" graphql:\"id\""
	StoragePath   *string "json:\"storagePath,omitempty\" graphql:\"storagePath\""
	StorageScheme *string "json:\"storageScheme,omitempty\" graphql:\"storageScheme\""
	StorageVolume *string "json:\"storageVolume,omitempty\" graphql:\"storageVolume\""
}

func (t *GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges_Node) GetStoragePath() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges_Node{}
	}
	return t.StoragePath
}
func (t *GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges_Node) GetStorageScheme() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges_Node{}
	}
	return t.StorageScheme
}
func (t *GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges_Node) GetStorageVolume() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges_Node{}
	}
	return t.StorageVolume
}

type GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges struct {
	Node *GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges) GetNode() *GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges_Node {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges{}
	}
	return t.Node
}

type GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node_Files struct {
	Edges []*GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node_Files) GetEdges() []*GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node_Files{}
	}
	return t.Edges
}

type GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node struct {
	CreatedAt *time.Time                                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID string                                                 "json:\"displayID\" graphql:\"displayID\""
	Files     GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node_Files "json:\"files\" graphql:\"files\""
	ID        string                                                 "json:\"id\" graphql:\"id\""
	Text      string                                                 "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time                                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node) GetFiles() *GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node_Files {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node{}
	}
	return &t.Files
}
func (t *GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node) GetText() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node{}
	}
	return t.Text
}
func (t *GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTasks_Tasks_Edges_Node_Comments_Edges struct {
	Node *GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTasks_Tasks_Edges_Node_Comments_Edges) GetNode() *GetAllTasks_Tasks_Edges_Node_Comments_Edges_Node {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Comments_Edges{}
	}
	return t.Node
}

type GetAllTasks_Tasks_Edges_Node_Comments struct {
	Edges []*GetAllTasks_Tasks_Edges_Node_Comments_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllTasks_Tasks_Edges_Node_Comments) GetEdges() []*GetAllTasks_Tasks_Edges_Node_Comments_Edges {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Comments{}
	}
	return t.Edges
}

type GetAllTasks_Tasks_Edges_Node struct {
	Assignee    *GetAllTasks_Tasks_Edges_Node_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	Assigner    *GetAllTasks_Tasks_Edges_Node_Assigner "json:\"assigner,omitempty\" graphql:\"assigner\""
	Category    *string                                "json:\"category,omitempty\" graphql:\"category\""
	Comments    GetAllTasks_Tasks_Edges_Node_Comments  "json:\"comments\" graphql:\"comments\""
	Completed   *time.Time                             "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt   *time.Time                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                "json:\"description,omitempty\" graphql:\"description\""
	Details     *string                                "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string                                 "json:\"displayID\" graphql:\"displayID\""
	Due         *time.Time                             "json:\"due,omitempty\" graphql:\"due\""
	ID          string                                 "json:\"id\" graphql:\"id\""
	Owner       *GetAllTasks_Tasks_Edges_Node_Owner    "json:\"owner,omitempty\" graphql:\"owner\""
	Status      enums.TaskStatus                       "json:\"status\" graphql:\"status\""
	Tags        []string                               "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string                                 "json:\"title\" graphql:\"title\""
	UpdatedAt   *time.Time                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTasks_Tasks_Edges_Node) GetAssignee() *GetAllTasks_Tasks_Edges_Node_Assignee {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Assignee
}
func (t *GetAllTasks_Tasks_Edges_Node) GetAssigner() *GetAllTasks_Tasks_Edges_Node_Assigner {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Assigner
}
func (t *GetAllTasks_Tasks_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllTasks_Tasks_Edges_Node) GetComments() *GetAllTasks_Tasks_Edges_Node_Comments {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return &t.Comments
}
func (t *GetAllTasks_Tasks_Edges_Node) GetCompleted() *time.Time {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Completed
}
func (t *GetAllTasks_Tasks_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTasks_Tasks_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTasks_Tasks_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllTasks_Tasks_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllTasks_Tasks_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllTasks_Tasks_Edges_Node) GetDue() *time.Time {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Due
}
func (t *GetAllTasks_Tasks_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTasks_Tasks_Edges_Node) GetOwner() *GetAllTasks_Tasks_Edges_Node_Owner {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Owner
}
func (t *GetAllTasks_Tasks_Edges_Node) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllTasks_Tasks_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllTasks_Tasks_Edges_Node) GetTitle() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Title
}
func (t *GetAllTasks_Tasks_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTasks_Tasks_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTasks_Tasks_Edges struct {
	Node *GetAllTasks_Tasks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTasks_Tasks_Edges) GetNode() *GetAllTasks_Tasks_Edges_Node {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges{}
	}
	return t.Node
}

type GetAllTasks_Tasks struct {
	Edges []*GetAllTasks_Tasks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllTasks_Tasks) GetEdges() []*GetAllTasks_Tasks_Edges {
	if t == nil {
		t = &GetAllTasks_Tasks{}
	}
	return t.Edges
}

type GetTaskByID_Task_Assignee struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetTaskByID_Task_Assignee) GetFirstName() *string {
	if t == nil {
		t = &GetTaskByID_Task_Assignee{}
	}
	return t.FirstName
}
func (t *GetTaskByID_Task_Assignee) GetID() string {
	if t == nil {
		t = &GetTaskByID_Task_Assignee{}
	}
	return t.ID
}
func (t *GetTaskByID_Task_Assignee) GetLastName() *string {
	if t == nil {
		t = &GetTaskByID_Task_Assignee{}
	}
	return t.LastName
}

type GetTaskByID_Task_Assigner struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetTaskByID_Task_Assigner) GetFirstName() *string {
	if t == nil {
		t = &GetTaskByID_Task_Assigner{}
	}
	return t.FirstName
}
func (t *GetTaskByID_Task_Assigner) GetID() string {
	if t == nil {
		t = &GetTaskByID_Task_Assigner{}
	}
	return t.ID
}
func (t *GetTaskByID_Task_Assigner) GetLastName() *string {
	if t == nil {
		t = &GetTaskByID_Task_Assigner{}
	}
	return t.LastName
}

type GetTaskByID_Task_Owner struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetTaskByID_Task_Owner) GetID() string {
	if t == nil {
		t = &GetTaskByID_Task_Owner{}
	}
	return t.ID
}
func (t *GetTaskByID_Task_Owner) GetName() string {
	if t == nil {
		t = &GetTaskByID_Task_Owner{}
	}
	return t.Name
}

type GetTaskByID_Task_Comments_Edges_Node_Files_Edges_Node struct {
	ID            string  "json:\"id\" graphql:\"id\""
	StoragePath   *string "json:\"storagePath,omitempty\" graphql:\"storagePath\""
	StorageScheme *string "json:\"storageScheme,omitempty\" graphql:\"storageScheme\""
	StorageVolume *string "json:\"storageVolume,omitempty\" graphql:\"storageVolume\""
}

func (t *GetTaskByID_Task_Comments_Edges_Node_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTaskByID_Task_Comments_Edges_Node_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GetTaskByID_Task_Comments_Edges_Node_Files_Edges_Node) GetStoragePath() *string {
	if t == nil {
		t = &GetTaskByID_Task_Comments_Edges_Node_Files_Edges_Node{}
	}
	return t.StoragePath
}
func (t *GetTaskByID_Task_Comments_Edges_Node_Files_Edges_Node) GetStorageScheme() *string {
	if t == nil {
		t = &GetTaskByID_Task_Comments_Edges_Node_Files_Edges_Node{}
	}
	return t.StorageScheme
}
func (t *GetTaskByID_Task_Comments_Edges_Node_Files_Edges_Node) GetStorageVolume() *string {
	if t == nil {
		t = &GetTaskByID_Task_Comments_Edges_Node_Files_Edges_Node{}
	}
	return t.StorageVolume
}

type GetTaskByID_Task_Comments_Edges_Node_Files_Edges struct {
	Node *GetTaskByID_Task_Comments_Edges_Node_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTaskByID_Task_Comments_Edges_Node_Files_Edges) GetNode() *GetTaskByID_Task_Comments_Edges_Node_Files_Edges_Node {
	if t == nil {
		t = &GetTaskByID_Task_Comments_Edges_Node_Files_Edges{}
	}
	return t.Node
}

type GetTaskByID_Task_Comments_Edges_Node_Files struct {
	Edges []*GetTaskByID_Task_Comments_Edges_Node_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetTaskByID_Task_Comments_Edges_Node_Files) GetEdges() []*GetTaskByID_Task_Comments_Edges_Node_Files_Edges {
	if t == nil {
		t = &GetTaskByID_Task_Comments_Edges_Node_Files{}
	}
	return t.Edges
}

type GetTaskByID_Task_Comments_Edges_Node struct {
	CreatedAt *time.Time                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID string                                     "json:\"displayID\" graphql:\"displayID\""
	Files     GetTaskByID_Task_Comments_Edges_Node_Files "json:\"files\" graphql:\"files\""
	ID        string                                     "json:\"id\" graphql:\"id\""
	Text      string                                     "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTaskByID_Task_Comments_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTaskByID_Task_Comments_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTaskByID_Task_Comments_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTaskByID_Task_Comments_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTaskByID_Task_Comments_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetTaskByID_Task_Comments_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetTaskByID_Task_Comments_Edges_Node) GetFiles() *GetTaskByID_Task_Comments_Edges_Node_Files {
	if t == nil {
		t = &GetTaskByID_Task_Comments_Edges_Node{}
	}
	return &t.Files
}
func (t *GetTaskByID_Task_Comments_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTaskByID_Task_Comments_Edges_Node{}
	}
	return t.ID
}
func (t *GetTaskByID_Task_Comments_Edges_Node) GetText() string {
	if t == nil {
		t = &GetTaskByID_Task_Comments_Edges_Node{}
	}
	return t.Text
}
func (t *GetTaskByID_Task_Comments_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTaskByID_Task_Comments_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTaskByID_Task_Comments_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTaskByID_Task_Comments_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTaskByID_Task_Comments_Edges struct {
	Node *GetTaskByID_Task_Comments_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTaskByID_Task_Comments_Edges) GetNode() *GetTaskByID_Task_Comments_Edges_Node {
	if t == nil {
		t = &GetTaskByID_Task_Comments_Edges{}
	}
	return t.Node
}

type GetTaskByID_Task_Comments struct {
	Edges []*GetTaskByID_Task_Comments_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetTaskByID_Task_Comments) GetEdges() []*GetTaskByID_Task_Comments_Edges {
	if t == nil {
		t = &GetTaskByID_Task_Comments{}
	}
	return t.Edges
}

type GetTaskByID_Task struct {
	Assignee    *GetTaskByID_Task_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	Assigner    *GetTaskByID_Task_Assigner "json:\"assigner,omitempty\" graphql:\"assigner\""
	Category    *string                    "json:\"category,omitempty\" graphql:\"category\""
	Comments    GetTaskByID_Task_Comments  "json:\"comments\" graphql:\"comments\""
	Completed   *time.Time                 "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt   *time.Time                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                    "json:\"description,omitempty\" graphql:\"description\""
	Details     *string                    "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string                     "json:\"displayID\" graphql:\"displayID\""
	Due         *time.Time                 "json:\"due,omitempty\" graphql:\"due\""
	ID          string                     "json:\"id\" graphql:\"id\""
	Owner       *GetTaskByID_Task_Owner    "json:\"owner,omitempty\" graphql:\"owner\""
	Status      enums.TaskStatus           "json:\"status\" graphql:\"status\""
	Tags        []string                   "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string                     "json:\"title\" graphql:\"title\""
	UpdatedAt   *time.Time                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTaskByID_Task) GetAssignee() *GetTaskByID_Task_Assignee {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Assignee
}
func (t *GetTaskByID_Task) GetAssigner() *GetTaskByID_Task_Assigner {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Assigner
}
func (t *GetTaskByID_Task) GetCategory() *string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Category
}
func (t *GetTaskByID_Task) GetComments() *GetTaskByID_Task_Comments {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return &t.Comments
}
func (t *GetTaskByID_Task) GetCompleted() *time.Time {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Completed
}
func (t *GetTaskByID_Task) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.CreatedAt
}
func (t *GetTaskByID_Task) GetCreatedBy() *string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.CreatedBy
}
func (t *GetTaskByID_Task) GetDescription() *string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Description
}
func (t *GetTaskByID_Task) GetDetails() *string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Details
}
func (t *GetTaskByID_Task) GetDisplayID() string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.DisplayID
}
func (t *GetTaskByID_Task) GetDue() *time.Time {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Due
}
func (t *GetTaskByID_Task) GetID() string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.ID
}
func (t *GetTaskByID_Task) GetOwner() *GetTaskByID_Task_Owner {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Owner
}
func (t *GetTaskByID_Task) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return &t.Status
}
func (t *GetTaskByID_Task) GetTags() []string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Tags
}
func (t *GetTaskByID_Task) GetTitle() string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Title
}
func (t *GetTaskByID_Task) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.UpdatedAt
}
func (t *GetTaskByID_Task) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.UpdatedBy
}

type GetTasks_Tasks_Edges_Node_Assignee struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetTasks_Tasks_Edges_Node_Assignee) GetFirstName() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Assignee{}
	}
	return t.FirstName
}
func (t *GetTasks_Tasks_Edges_Node_Assignee) GetID() string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Assignee{}
	}
	return t.ID
}
func (t *GetTasks_Tasks_Edges_Node_Assignee) GetLastName() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Assignee{}
	}
	return t.LastName
}

type GetTasks_Tasks_Edges_Node_Assigner struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetTasks_Tasks_Edges_Node_Assigner) GetFirstName() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Assigner{}
	}
	return t.FirstName
}
func (t *GetTasks_Tasks_Edges_Node_Assigner) GetID() string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Assigner{}
	}
	return t.ID
}
func (t *GetTasks_Tasks_Edges_Node_Assigner) GetLastName() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Assigner{}
	}
	return t.LastName
}

type GetTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges_Node struct {
	ID            string  "json:\"id\" graphql:\"id\""
	StoragePath   *string "json:\"storagePath,omitempty\" graphql:\"storagePath\""
	StorageScheme *string "json:\"storageScheme,omitempty\" graphql:\"storageScheme\""
	StorageVolume *string "json:\"storageVolume,omitempty\" graphql:\"storageVolume\""
}

func (t *GetTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GetTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges_Node) GetStoragePath() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges_Node{}
	}
	return t.StoragePath
}
func (t *GetTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges_Node) GetStorageScheme() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges_Node{}
	}
	return t.StorageScheme
}
func (t *GetTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges_Node) GetStorageVolume() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges_Node{}
	}
	return t.StorageVolume
}

type GetTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges struct {
	Node *GetTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges) GetNode() *GetTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges_Node {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges{}
	}
	return t.Node
}

type GetTasks_Tasks_Edges_Node_Comments_Edges_Node_Files struct {
	Edges []*GetTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetTasks_Tasks_Edges_Node_Comments_Edges_Node_Files) GetEdges() []*GetTasks_Tasks_Edges_Node_Comments_Edges_Node_Files_Edges {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Comments_Edges_Node_Files{}
	}
	return t.Edges
}

type GetTasks_Tasks_Edges_Node_Comments_Edges_Node struct {
	CreatedAt *time.Time                                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID string                                              "json:\"displayID\" graphql:\"displayID\""
	Files     GetTasks_Tasks_Edges_Node_Comments_Edges_Node_Files "json:\"files\" graphql:\"files\""
	ID        string                                              "json:\"id\" graphql:\"id\""
	Text      string                                              "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time                                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTasks_Tasks_Edges_Node_Comments_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Comments_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTasks_Tasks_Edges_Node_Comments_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Comments_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTasks_Tasks_Edges_Node_Comments_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Comments_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetTasks_Tasks_Edges_Node_Comments_Edges_Node) GetFiles() *GetTasks_Tasks_Edges_Node_Comments_Edges_Node_Files {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Comments_Edges_Node{}
	}
	return &t.Files
}
func (t *GetTasks_Tasks_Edges_Node_Comments_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Comments_Edges_Node{}
	}
	return t.ID
}
func (t *GetTasks_Tasks_Edges_Node_Comments_Edges_Node) GetText() string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Comments_Edges_Node{}
	}
	return t.Text
}
func (t *GetTasks_Tasks_Edges_Node_Comments_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Comments_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTasks_Tasks_Edges_Node_Comments_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Comments_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTasks_Tasks_Edges_Node_Comments_Edges struct {
	Node *GetTasks_Tasks_Edges_Node_Comments_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTasks_Tasks_Edges_Node_Comments_Edges) GetNode() *GetTasks_Tasks_Edges_Node_Comments_Edges_Node {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Comments_Edges{}
	}
	return t.Node
}

type GetTasks_Tasks_Edges_Node_Comments struct {
	Edges []*GetTasks_Tasks_Edges_Node_Comments_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetTasks_Tasks_Edges_Node_Comments) GetEdges() []*GetTasks_Tasks_Edges_Node_Comments_Edges {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Comments{}
	}
	return t.Edges
}

type GetTasks_Tasks_Edges_Node struct {
	Assignee    *GetTasks_Tasks_Edges_Node_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	Assigner    *GetTasks_Tasks_Edges_Node_Assigner "json:\"assigner,omitempty\" graphql:\"assigner\""
	Category    *string                             "json:\"category,omitempty\" graphql:\"category\""
	Comments    GetTasks_Tasks_Edges_Node_Comments  "json:\"comments\" graphql:\"comments\""
	Completed   *time.Time                          "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt   *time.Time                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                             "json:\"description,omitempty\" graphql:\"description\""
	Details     *string                             "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string                              "json:\"displayID\" graphql:\"displayID\""
	Due         *time.Time                          "json:\"due,omitempty\" graphql:\"due\""
	ID          string                              "json:\"id\" graphql:\"id\""
	Status      enums.TaskStatus                    "json:\"status\" graphql:\"status\""
	Tags        []string                            "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string                              "json:\"title\" graphql:\"title\""
	UpdatedAt   *time.Time                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTasks_Tasks_Edges_Node) GetAssignee() *GetTasks_Tasks_Edges_Node_Assignee {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Assignee
}
func (t *GetTasks_Tasks_Edges_Node) GetAssigner() *GetTasks_Tasks_Edges_Node_Assigner {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Assigner
}
func (t *GetTasks_Tasks_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Category
}
func (t *GetTasks_Tasks_Edges_Node) GetComments() *GetTasks_Tasks_Edges_Node_Comments {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return &t.Comments
}
func (t *GetTasks_Tasks_Edges_Node) GetCompleted() *time.Time {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Completed
}
func (t *GetTasks_Tasks_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTasks_Tasks_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTasks_Tasks_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Description
}
func (t *GetTasks_Tasks_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Details
}
func (t *GetTasks_Tasks_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetTasks_Tasks_Edges_Node) GetDue() *time.Time {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Due
}
func (t *GetTasks_Tasks_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.ID
}
func (t *GetTasks_Tasks_Edges_Node) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return &t.Status
}
func (t *GetTasks_Tasks_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Tags
}
func (t *GetTasks_Tasks_Edges_Node) GetTitle() string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Title
}
func (t *GetTasks_Tasks_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTasks_Tasks_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTasks_Tasks_Edges struct {
	Node *GetTasks_Tasks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTasks_Tasks_Edges) GetNode() *GetTasks_Tasks_Edges_Node {
	if t == nil {
		t = &GetTasks_Tasks_Edges{}
	}
	return t.Node
}

type GetTasks_Tasks struct {
	Edges []*GetTasks_Tasks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetTasks_Tasks) GetEdges() []*GetTasks_Tasks_Edges {
	if t == nil {
		t = &GetTasks_Tasks{}
	}
	return t.Edges
}

type UpdateTask_UpdateTask_Task_Assignee struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *UpdateTask_UpdateTask_Task_Assignee) GetFirstName() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Assignee{}
	}
	return t.FirstName
}
func (t *UpdateTask_UpdateTask_Task_Assignee) GetID() string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Assignee{}
	}
	return t.ID
}
func (t *UpdateTask_UpdateTask_Task_Assignee) GetLastName() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Assignee{}
	}
	return t.LastName
}

type UpdateTask_UpdateTask_Task_Assigner struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *UpdateTask_UpdateTask_Task_Assigner) GetFirstName() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Assigner{}
	}
	return t.FirstName
}
func (t *UpdateTask_UpdateTask_Task_Assigner) GetID() string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Assigner{}
	}
	return t.ID
}
func (t *UpdateTask_UpdateTask_Task_Assigner) GetLastName() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Assigner{}
	}
	return t.LastName
}

type UpdateTask_UpdateTask_Task_Comments_Edges_Node struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID string     "json:\"displayID\" graphql:\"displayID\""
	ID        string     "json:\"id\" graphql:\"id\""
	Text      string     "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateTask_UpdateTask_Task_Comments_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Comments_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *UpdateTask_UpdateTask_Task_Comments_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Comments_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *UpdateTask_UpdateTask_Task_Comments_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Comments_Edges_Node{}
	}
	return t.DisplayID
}
func (t *UpdateTask_UpdateTask_Task_Comments_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Comments_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateTask_UpdateTask_Task_Comments_Edges_Node) GetText() string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Comments_Edges_Node{}
	}
	return t.Text
}
func (t *UpdateTask_UpdateTask_Task_Comments_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Comments_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *UpdateTask_UpdateTask_Task_Comments_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Comments_Edges_Node{}
	}
	return t.UpdatedBy
}

type UpdateTask_UpdateTask_Task_Comments_Edges struct {
	Node *UpdateTask_UpdateTask_Task_Comments_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateTask_UpdateTask_Task_Comments_Edges) GetNode() *UpdateTask_UpdateTask_Task_Comments_Edges_Node {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Comments_Edges{}
	}
	return t.Node
}

type UpdateTask_UpdateTask_Task_Comments struct {
	Edges []*UpdateTask_UpdateTask_Task_Comments_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateTask_UpdateTask_Task_Comments) GetEdges() []*UpdateTask_UpdateTask_Task_Comments_Edges {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Comments{}
	}
	return t.Edges
}

type UpdateTask_UpdateTask_Task struct {
	Assignee    *UpdateTask_UpdateTask_Task_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	Assigner    *UpdateTask_UpdateTask_Task_Assigner "json:\"assigner,omitempty\" graphql:\"assigner\""
	Category    *string                              "json:\"category,omitempty\" graphql:\"category\""
	Comments    UpdateTask_UpdateTask_Task_Comments  "json:\"comments\" graphql:\"comments\""
	Completed   *time.Time                           "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt   *time.Time                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                              "json:\"description,omitempty\" graphql:\"description\""
	Details     *string                              "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string                               "json:\"displayID\" graphql:\"displayID\""
	Due         *time.Time                           "json:\"due,omitempty\" graphql:\"due\""
	ID          string                               "json:\"id\" graphql:\"id\""
	Status      enums.TaskStatus                     "json:\"status\" graphql:\"status\""
	Tags        []string                             "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string                               "json:\"title\" graphql:\"title\""
	UpdatedAt   *time.Time                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateTask_UpdateTask_Task) GetAssignee() *UpdateTask_UpdateTask_Task_Assignee {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Assignee
}
func (t *UpdateTask_UpdateTask_Task) GetAssigner() *UpdateTask_UpdateTask_Task_Assigner {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Assigner
}
func (t *UpdateTask_UpdateTask_Task) GetCategory() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Category
}
func (t *UpdateTask_UpdateTask_Task) GetComments() *UpdateTask_UpdateTask_Task_Comments {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return &t.Comments
}
func (t *UpdateTask_UpdateTask_Task) GetCompleted() *time.Time {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Completed
}
func (t *UpdateTask_UpdateTask_Task) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.CreatedAt
}
func (t *UpdateTask_UpdateTask_Task) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.CreatedBy
}
func (t *UpdateTask_UpdateTask_Task) GetDescription() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Description
}
func (t *UpdateTask_UpdateTask_Task) GetDetails() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Details
}
func (t *UpdateTask_UpdateTask_Task) GetDisplayID() string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.DisplayID
}
func (t *UpdateTask_UpdateTask_Task) GetDue() *time.Time {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Due
}
func (t *UpdateTask_UpdateTask_Task) GetID() string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.ID
}
func (t *UpdateTask_UpdateTask_Task) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return &t.Status
}
func (t *UpdateTask_UpdateTask_Task) GetTags() []string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Tags
}
func (t *UpdateTask_UpdateTask_Task) GetTitle() string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Title
}
func (t *UpdateTask_UpdateTask_Task) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.UpdatedAt
}
func (t *UpdateTask_UpdateTask_Task) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.UpdatedBy
}

type UpdateTask_UpdateTask struct {
	Task UpdateTask_UpdateTask_Task "json:\"task\" graphql:\"task\""
}

func (t *UpdateTask_UpdateTask) GetTask() *UpdateTask_UpdateTask_Task {
	if t == nil {
		t = &UpdateTask_UpdateTask{}
	}
	return &t.Task
}

type UpdateTaskComment_UpdateTaskComment_Task_Assignee struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *UpdateTaskComment_UpdateTaskComment_Task_Assignee) GetFirstName() *string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task_Assignee{}
	}
	return t.FirstName
}
func (t *UpdateTaskComment_UpdateTaskComment_Task_Assignee) GetID() string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task_Assignee{}
	}
	return t.ID
}
func (t *UpdateTaskComment_UpdateTaskComment_Task_Assignee) GetLastName() *string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task_Assignee{}
	}
	return t.LastName
}

type UpdateTaskComment_UpdateTaskComment_Task_Assigner struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID        string  "json:\"id\" graphql:\"id\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *UpdateTaskComment_UpdateTaskComment_Task_Assigner) GetFirstName() *string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task_Assigner{}
	}
	return t.FirstName
}
func (t *UpdateTaskComment_UpdateTaskComment_Task_Assigner) GetID() string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task_Assigner{}
	}
	return t.ID
}
func (t *UpdateTaskComment_UpdateTaskComment_Task_Assigner) GetLastName() *string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task_Assigner{}
	}
	return t.LastName
}

type UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node_Files_Edges_Node struct {
	ID            string  "json:\"id\" graphql:\"id\""
	StoragePath   *string "json:\"storagePath,omitempty\" graphql:\"storagePath\""
	StorageScheme *string "json:\"storageScheme,omitempty\" graphql:\"storageScheme\""
	StorageVolume *string "json:\"storageVolume,omitempty\" graphql:\"storageVolume\""
}

func (t *UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node_Files_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node_Files_Edges_Node) GetStoragePath() *string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node_Files_Edges_Node{}
	}
	return t.StoragePath
}
func (t *UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node_Files_Edges_Node) GetStorageScheme() *string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node_Files_Edges_Node{}
	}
	return t.StorageScheme
}
func (t *UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node_Files_Edges_Node) GetStorageVolume() *string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node_Files_Edges_Node{}
	}
	return t.StorageVolume
}

type UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node_Files_Edges struct {
	Node *UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node_Files_Edges) GetNode() *UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node_Files_Edges_Node {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node_Files_Edges{}
	}
	return t.Node
}

type UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node_Files struct {
	Edges []*UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node_Files) GetEdges() []*UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node_Files_Edges {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node_Files{}
	}
	return t.Edges
}

type UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node struct {
	CreatedAt *time.Time                                                         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string                                                            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID string                                                             "json:\"displayID\" graphql:\"displayID\""
	Files     UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node_Files "json:\"files\" graphql:\"files\""
	ID        string                                                             "json:\"id\" graphql:\"id\""
	Text      string                                                             "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time                                                         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string                                                            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node{}
	}
	return t.DisplayID
}
func (t *UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node) GetFiles() *UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node_Files {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node{}
	}
	return &t.Files
}
func (t *UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node) GetText() string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node{}
	}
	return t.Text
}
func (t *UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node{}
	}
	return t.UpdatedBy
}

type UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges struct {
	Node *UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges) GetNode() *UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges_Node {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges{}
	}
	return t.Node
}

type UpdateTaskComment_UpdateTaskComment_Task_Comments struct {
	Edges []*UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateTaskComment_UpdateTaskComment_Task_Comments) GetEdges() []*UpdateTaskComment_UpdateTaskComment_Task_Comments_Edges {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task_Comments{}
	}
	return t.Edges
}

type UpdateTaskComment_UpdateTaskComment_Task struct {
	Assignee    *UpdateTaskComment_UpdateTaskComment_Task_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	Assigner    *UpdateTaskComment_UpdateTaskComment_Task_Assigner "json:\"assigner,omitempty\" graphql:\"assigner\""
	Category    *string                                            "json:\"category,omitempty\" graphql:\"category\""
	Comments    UpdateTaskComment_UpdateTaskComment_Task_Comments  "json:\"comments\" graphql:\"comments\""
	Completed   *time.Time                                         "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt   *time.Time                                         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                            "json:\"description,omitempty\" graphql:\"description\""
	Details     *string                                            "json:\"details,omitempty\" graphql:\"details\""
	DisplayID   string                                             "json:\"displayID\" graphql:\"displayID\""
	Due         *time.Time                                         "json:\"due,omitempty\" graphql:\"due\""
	ID          string                                             "json:\"id\" graphql:\"id\""
	Status      enums.TaskStatus                                   "json:\"status\" graphql:\"status\""
	Tags        []string                                           "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string                                             "json:\"title\" graphql:\"title\""
	UpdatedAt   *time.Time                                         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateTaskComment_UpdateTaskComment_Task) GetAssignee() *UpdateTaskComment_UpdateTaskComment_Task_Assignee {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task{}
	}
	return t.Assignee
}
func (t *UpdateTaskComment_UpdateTaskComment_Task) GetAssigner() *UpdateTaskComment_UpdateTaskComment_Task_Assigner {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task{}
	}
	return t.Assigner
}
func (t *UpdateTaskComment_UpdateTaskComment_Task) GetCategory() *string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task{}
	}
	return t.Category
}
func (t *UpdateTaskComment_UpdateTaskComment_Task) GetComments() *UpdateTaskComment_UpdateTaskComment_Task_Comments {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task{}
	}
	return &t.Comments
}
func (t *UpdateTaskComment_UpdateTaskComment_Task) GetCompleted() *time.Time {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task{}
	}
	return t.Completed
}
func (t *UpdateTaskComment_UpdateTaskComment_Task) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task{}
	}
	return t.CreatedAt
}
func (t *UpdateTaskComment_UpdateTaskComment_Task) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task{}
	}
	return t.CreatedBy
}
func (t *UpdateTaskComment_UpdateTaskComment_Task) GetDescription() *string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task{}
	}
	return t.Description
}
func (t *UpdateTaskComment_UpdateTaskComment_Task) GetDetails() *string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task{}
	}
	return t.Details
}
func (t *UpdateTaskComment_UpdateTaskComment_Task) GetDisplayID() string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task{}
	}
	return t.DisplayID
}
func (t *UpdateTaskComment_UpdateTaskComment_Task) GetDue() *time.Time {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task{}
	}
	return t.Due
}
func (t *UpdateTaskComment_UpdateTaskComment_Task) GetID() string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task{}
	}
	return t.ID
}
func (t *UpdateTaskComment_UpdateTaskComment_Task) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task{}
	}
	return &t.Status
}
func (t *UpdateTaskComment_UpdateTaskComment_Task) GetTags() []string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task{}
	}
	return t.Tags
}
func (t *UpdateTaskComment_UpdateTaskComment_Task) GetTitle() string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task{}
	}
	return t.Title
}
func (t *UpdateTaskComment_UpdateTaskComment_Task) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task{}
	}
	return t.UpdatedAt
}
func (t *UpdateTaskComment_UpdateTaskComment_Task) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment_Task{}
	}
	return t.UpdatedBy
}

type UpdateTaskComment_UpdateTaskComment struct {
	Task UpdateTaskComment_UpdateTaskComment_Task "json:\"task\" graphql:\"task\""
}

func (t *UpdateTaskComment_UpdateTaskComment) GetTask() *UpdateTaskComment_UpdateTaskComment_Task {
	if t == nil {
		t = &UpdateTaskComment_UpdateTaskComment{}
	}
	return &t.Task
}

type GetAllTaskHistories_TaskHistories_Edges_Node struct {
	Completed   *time.Time       "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string          "json:\"description,omitempty\" graphql:\"description\""
	Details     *string          "json:\"details,omitempty\" graphql:\"details\""
	Due         *time.Time       "json:\"due,omitempty\" graphql:\"due\""
	HistoryTime time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID          string           "json:\"id\" graphql:\"id\""
	Operation   history.OpType   "json:\"operation\" graphql:\"operation\""
	Ref         *string          "json:\"ref,omitempty\" graphql:\"ref\""
	Status      enums.TaskStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string           "json:\"title\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetCompleted() *time.Time {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Completed
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetDue() *time.Time {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Due
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetTitle() string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Title
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTaskHistories_TaskHistories_Edges struct {
	Node *GetAllTaskHistories_TaskHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTaskHistories_TaskHistories_Edges) GetNode() *GetAllTaskHistories_TaskHistories_Edges_Node {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges{}
	}
	return t.Node
}

type GetAllTaskHistories_TaskHistories struct {
	Edges []*GetAllTaskHistories_TaskHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllTaskHistories_TaskHistories) GetEdges() []*GetAllTaskHistories_TaskHistories_Edges {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories{}
	}
	return t.Edges
}

type GetTaskHistories_TaskHistories_Edges_Node struct {
	Completed   *time.Time       "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string          "json:\"description,omitempty\" graphql:\"description\""
	Details     *string          "json:\"details,omitempty\" graphql:\"details\""
	Due         *time.Time       "json:\"due,omitempty\" graphql:\"due\""
	HistoryTime time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID          string           "json:\"id\" graphql:\"id\""
	Operation   history.OpType   "json:\"operation\" graphql:\"operation\""
	Ref         *string          "json:\"ref,omitempty\" graphql:\"ref\""
	Status      enums.TaskStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string           "json:\"title\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTaskHistories_TaskHistories_Edges_Node) GetCompleted() *time.Time {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Completed
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetDetails() *string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetDue() *time.Time {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Due
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetTitle() string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Title
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTaskHistories_TaskHistories_Edges struct {
	Node *GetTaskHistories_TaskHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTaskHistories_TaskHistories_Edges) GetNode() *GetTaskHistories_TaskHistories_Edges_Node {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges{}
	}
	return t.Node
}

type GetTaskHistories_TaskHistories struct {
	Edges []*GetTaskHistories_TaskHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetTaskHistories_TaskHistories) GetEdges() []*GetTaskHistories_TaskHistories_Edges {
	if t == nil {
		t = &GetTaskHistories_TaskHistories{}
	}
	return t.Edges
}

type CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates_Owner) GetID() string {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates_Owner{}
	}
	return t.ID
}

type CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates struct {
	Description *string                                                      "json:\"description,omitempty\" graphql:\"description\""
	ID          string                                                       "json:\"id\" graphql:\"id\""
	Jsonconfig  map[string]any                                               "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name        string                                                       "json:\"name\" graphql:\"name\""
	Owner       *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates_Owner "json:\"owner,omitempty\" graphql:\"owner\""
	Uischema    map[string]any                                               "json:\"uischema,omitempty\" graphql:\"uischema\""
}

func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.Description
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetID() string {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.ID
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetJsonconfig() map[string]any {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.Jsonconfig
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetName() string {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.Name
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetOwner() *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates_Owner {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.Owner
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetUischema() map[string]any {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.Uischema
}

type CreateBulkCSVTemplate_CreateBulkCSVTemplate struct {
	Templates []*CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates "json:\"templates,omitempty\" graphql:\"templates\""
}

func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate) GetTemplates() []*CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate{}
	}
	return t.Templates
}

type CreateBulkTemplate_CreateBulkTemplate_Templates_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkTemplate_CreateBulkTemplate_Templates_Owner) GetID() string {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates_Owner{}
	}
	return t.ID
}

type CreateBulkTemplate_CreateBulkTemplate_Templates struct {
	Description *string                                                "json:\"description,omitempty\" graphql:\"description\""
	ID          string                                                 "json:\"id\" graphql:\"id\""
	Jsonconfig  map[string]any                                         "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name        string                                                 "json:\"name\" graphql:\"name\""
	Owner       *CreateBulkTemplate_CreateBulkTemplate_Templates_Owner "json:\"owner,omitempty\" graphql:\"owner\""
	Uischema    map[string]any                                         "json:\"uischema,omitempty\" graphql:\"uischema\""
}

func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetDescription() *string {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.Description
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetID() string {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.ID
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetJsonconfig() map[string]any {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.Jsonconfig
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetName() string {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.Name
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetOwner() *CreateBulkTemplate_CreateBulkTemplate_Templates_Owner {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.Owner
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetUischema() map[string]any {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.Uischema
}

type CreateBulkTemplate_CreateBulkTemplate struct {
	Templates []*CreateBulkTemplate_CreateBulkTemplate_Templates "json:\"templates,omitempty\" graphql:\"templates\""
}

func (t *CreateBulkTemplate_CreateBulkTemplate) GetTemplates() []*CreateBulkTemplate_CreateBulkTemplate_Templates {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate{}
	}
	return t.Templates
}

type CreateTemplate_CreateTemplate_Template_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateTemplate_CreateTemplate_Template_Owner) GetID() string {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template_Owner{}
	}
	return t.ID
}

type CreateTemplate_CreateTemplate_Template struct {
	Description *string                                       "json:\"description,omitempty\" graphql:\"description\""
	ID          string                                        "json:\"id\" graphql:\"id\""
	Jsonconfig  map[string]any                                "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name        string                                        "json:\"name\" graphql:\"name\""
	Owner       *CreateTemplate_CreateTemplate_Template_Owner "json:\"owner,omitempty\" graphql:\"owner\""
	Uischema    map[string]any                                "json:\"uischema,omitempty\" graphql:\"uischema\""
}

func (t *CreateTemplate_CreateTemplate_Template) GetDescription() *string {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.Description
}
func (t *CreateTemplate_CreateTemplate_Template) GetID() string {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.ID
}
func (t *CreateTemplate_CreateTemplate_Template) GetJsonconfig() map[string]any {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.Jsonconfig
}
func (t *CreateTemplate_CreateTemplate_Template) GetName() string {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.Name
}
func (t *CreateTemplate_CreateTemplate_Template) GetOwner() *CreateTemplate_CreateTemplate_Template_Owner {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.Owner
}
func (t *CreateTemplate_CreateTemplate_Template) GetUischema() map[string]any {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.Uischema
}

type CreateTemplate_CreateTemplate struct {
	Template CreateTemplate_CreateTemplate_Template "json:\"template\" graphql:\"template\""
}

func (t *CreateTemplate_CreateTemplate) GetTemplate() *CreateTemplate_CreateTemplate_Template {
	if t == nil {
		t = &CreateTemplate_CreateTemplate{}
	}
	return &t.Template
}

type GetAllTemplates_Templates_Edges_Node_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllTemplates_Templates_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node_Owner{}
	}
	return t.ID
}

type GetAllTemplates_Templates_Edges_Node struct {
	CreatedAt   *time.Time                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                     "json:\"description,omitempty\" graphql:\"description\""
	ID          string                                      "json:\"id\" graphql:\"id\""
	Jsonconfig  map[string]any                              "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name        string                                      "json:\"name\" graphql:\"name\""
	Owner       *GetAllTemplates_Templates_Edges_Node_Owner "json:\"owner,omitempty\" graphql:\"owner\""
	Uischema    map[string]any                              "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt   *time.Time                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTemplates_Templates_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTemplates_Templates_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTemplates_Templates_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllTemplates_Templates_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTemplates_Templates_Edges_Node) GetJsonconfig() map[string]any {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.Jsonconfig
}
func (t *GetAllTemplates_Templates_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllTemplates_Templates_Edges_Node) GetOwner() *GetAllTemplates_Templates_Edges_Node_Owner {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.Owner
}
func (t *GetAllTemplates_Templates_Edges_Node) GetUischema() map[string]any {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.Uischema
}
func (t *GetAllTemplates_Templates_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTemplates_Templates_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTemplates_Templates_Edges struct {
	Node *GetAllTemplates_Templates_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTemplates_Templates_Edges) GetNode() *GetAllTemplates_Templates_Edges_Node {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges{}
	}
	return t.Node
}

type GetAllTemplates_Templates struct {
	Edges []*GetAllTemplates_Templates_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllTemplates_Templates) GetEdges() []*GetAllTemplates_Templates_Edges {
	if t == nil {
		t = &GetAllTemplates_Templates{}
	}
	return t.Edges
}

type GetTemplateByID_Template_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetTemplateByID_Template_Owner) GetID() string {
	if t == nil {
		t = &GetTemplateByID_Template_Owner{}
	}
	return t.ID
}

type GetTemplateByID_Template struct {
	CreatedAt   *time.Time                      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                         "json:\"description,omitempty\" graphql:\"description\""
	ID          string                          "json:\"id\" graphql:\"id\""
	Jsonconfig  map[string]any                  "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name        string                          "json:\"name\" graphql:\"name\""
	Owner       *GetTemplateByID_Template_Owner "json:\"owner,omitempty\" graphql:\"owner\""
	Uischema    map[string]any                  "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt   *time.Time                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTemplateByID_Template) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.CreatedAt
}
func (t *GetTemplateByID_Template) GetCreatedBy() *string {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.CreatedBy
}
func (t *GetTemplateByID_Template) GetDescription() *string {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.Description
}
func (t *GetTemplateByID_Template) GetID() string {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.ID
}
func (t *GetTemplateByID_Template) GetJsonconfig() map[string]any {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.Jsonconfig
}
func (t *GetTemplateByID_Template) GetName() string {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.Name
}
func (t *GetTemplateByID_Template) GetOwner() *GetTemplateByID_Template_Owner {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.Owner
}
func (t *GetTemplateByID_Template) GetUischema() map[string]any {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.Uischema
}
func (t *GetTemplateByID_Template) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.UpdatedAt
}
func (t *GetTemplateByID_Template) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.UpdatedBy
}

type UpdateTemplate_UpdateTemplate_Template_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateTemplate_UpdateTemplate_Template_Owner) GetID() string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template_Owner{}
	}
	return t.ID
}

type UpdateTemplate_UpdateTemplate_Template struct {
	CreatedAt   *time.Time                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                       "json:\"description,omitempty\" graphql:\"description\""
	ID          string                                        "json:\"id\" graphql:\"id\""
	Jsonconfig  map[string]any                                "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name        string                                        "json:\"name\" graphql:\"name\""
	Owner       *UpdateTemplate_UpdateTemplate_Template_Owner "json:\"owner,omitempty\" graphql:\"owner\""
	Uischema    map[string]any                                "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt   *time.Time                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateTemplate_UpdateTemplate_Template) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.CreatedAt
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.CreatedBy
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetDescription() *string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.Description
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetID() string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.ID
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetJsonconfig() map[string]any {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.Jsonconfig
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetName() string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.Name
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetOwner() *UpdateTemplate_UpdateTemplate_Template_Owner {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.Owner
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetUischema() map[string]any {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.Uischema
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.UpdatedAt
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.UpdatedBy
}

type UpdateTemplate_UpdateTemplate struct {
	Template UpdateTemplate_UpdateTemplate_Template "json:\"template\" graphql:\"template\""
}

func (t *UpdateTemplate_UpdateTemplate) GetTemplate() *UpdateTemplate_UpdateTemplate_Template {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate{}
	}
	return &t.Template
}

type GetAllTemplateHistories_TemplateHistories_Edges_Node struct {
	CreatedAt    *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string            "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime  time.Time          "json:\"historyTime\" graphql:\"historyTime\""
	ID           string             "json:\"id\" graphql:\"id\""
	Jsonconfig   map[string]any     "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name         string             "json:\"name\" graphql:\"name\""
	Operation    history.OpType     "json:\"operation\" graphql:\"operation\""
	OwnerID      *string            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref          *string            "json:\"ref,omitempty\" graphql:\"ref\""
	Tags         []string           "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateType enums.DocumentType "json:\"templateType\" graphql:\"templateType\""
	Uischema     map[string]any     "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt    *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetJsonconfig() map[string]any {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Jsonconfig
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetTemplateType() *enums.DocumentType {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.TemplateType
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetUischema() map[string]any {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Uischema
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTemplateHistories_TemplateHistories_Edges struct {
	Node *GetAllTemplateHistories_TemplateHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTemplateHistories_TemplateHistories_Edges) GetNode() *GetAllTemplateHistories_TemplateHistories_Edges_Node {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges{}
	}
	return t.Node
}

type GetAllTemplateHistories_TemplateHistories struct {
	Edges []*GetAllTemplateHistories_TemplateHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllTemplateHistories_TemplateHistories) GetEdges() []*GetAllTemplateHistories_TemplateHistories_Edges {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories{}
	}
	return t.Edges
}

type GetTemplateHistories_TemplateHistories_Edges_Node struct {
	CreatedAt    *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string            "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime  time.Time          "json:\"historyTime\" graphql:\"historyTime\""
	ID           string             "json:\"id\" graphql:\"id\""
	Jsonconfig   map[string]any     "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name         string             "json:\"name\" graphql:\"name\""
	Operation    history.OpType     "json:\"operation\" graphql:\"operation\""
	OwnerID      *string            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref          *string            "json:\"ref,omitempty\" graphql:\"ref\""
	Tags         []string           "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateType enums.DocumentType "json:\"templateType\" graphql:\"templateType\""
	Uischema     map[string]any     "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt    *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetJsonconfig() map[string]any {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Jsonconfig
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetTemplateType() *enums.DocumentType {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.TemplateType
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetUischema() map[string]any {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Uischema
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTemplateHistories_TemplateHistories_Edges struct {
	Node *GetTemplateHistories_TemplateHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTemplateHistories_TemplateHistories_Edges) GetNode() *GetTemplateHistories_TemplateHistories_Edges_Node {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges{}
	}
	return t.Node
}

type GetTemplateHistories_TemplateHistories struct {
	Edges []*GetTemplateHistories_TemplateHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetTemplateHistories_TemplateHistories) GetEdges() []*GetTemplateHistories_TemplateHistories_Edges {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories{}
	}
	return t.Edges
}

type CreateTFASetting_CreateTFASetting_TfaSetting_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateTFASetting_CreateTFASetting_TfaSetting_Owner) GetID() string {
	if t == nil {
		t = &CreateTFASetting_CreateTFASetting_TfaSetting_Owner{}
	}
	return t.ID
}

type CreateTFASetting_CreateTFASetting_TfaSetting struct {
	Owner       *CreateTFASetting_CreateTFASetting_TfaSetting_Owner "json:\"owner,omitempty\" graphql:\"owner\""
	TotpAllowed *bool                                               "json:\"totpAllowed,omitempty\" graphql:\"totpAllowed\""
	Verified    bool                                                "json:\"verified\" graphql:\"verified\""
}

func (t *CreateTFASetting_CreateTFASetting_TfaSetting) GetOwner() *CreateTFASetting_CreateTFASetting_TfaSetting_Owner {
	if t == nil {
		t = &CreateTFASetting_CreateTFASetting_TfaSetting{}
	}
	return t.Owner
}
func (t *CreateTFASetting_CreateTFASetting_TfaSetting) GetTotpAllowed() *bool {
	if t == nil {
		t = &CreateTFASetting_CreateTFASetting_TfaSetting{}
	}
	return t.TotpAllowed
}
func (t *CreateTFASetting_CreateTFASetting_TfaSetting) GetVerified() bool {
	if t == nil {
		t = &CreateTFASetting_CreateTFASetting_TfaSetting{}
	}
	return t.Verified
}

type CreateTFASetting_CreateTFASetting struct {
	QRCode     *string                                      "json:\"qrCode,omitempty\" graphql:\"qrCode\""
	TfaSecret  *string                                      "json:\"tfaSecret,omitempty\" graphql:\"tfaSecret\""
	TfaSetting CreateTFASetting_CreateTFASetting_TfaSetting "json:\"tfaSetting\" graphql:\"tfaSetting\""
}

func (t *CreateTFASetting_CreateTFASetting) GetQRCode() *string {
	if t == nil {
		t = &CreateTFASetting_CreateTFASetting{}
	}
	return t.QRCode
}
func (t *CreateTFASetting_CreateTFASetting) GetTfaSecret() *string {
	if t == nil {
		t = &CreateTFASetting_CreateTFASetting{}
	}
	return t.TfaSecret
}
func (t *CreateTFASetting_CreateTFASetting) GetTfaSetting() *CreateTFASetting_CreateTFASetting_TfaSetting {
	if t == nil {
		t = &CreateTFASetting_CreateTFASetting{}
	}
	return &t.TfaSetting
}

type GetAllTFASettings_TfaSettings_Edges_Node_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllTFASettings_TfaSettings_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges_Node_Owner{}
	}
	return t.ID
}

type GetAllTFASettings_TfaSettings_Edges_Node struct {
	Owner       *GetAllTFASettings_TfaSettings_Edges_Node_Owner "json:\"owner,omitempty\" graphql:\"owner\""
	TotpAllowed *bool                                           "json:\"totpAllowed,omitempty\" graphql:\"totpAllowed\""
	Verified    bool                                            "json:\"verified\" graphql:\"verified\""
}

func (t *GetAllTFASettings_TfaSettings_Edges_Node) GetOwner() *GetAllTFASettings_TfaSettings_Edges_Node_Owner {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges_Node{}
	}
	return t.Owner
}
func (t *GetAllTFASettings_TfaSettings_Edges_Node) GetTotpAllowed() *bool {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges_Node{}
	}
	return t.TotpAllowed
}
func (t *GetAllTFASettings_TfaSettings_Edges_Node) GetVerified() bool {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges_Node{}
	}
	return t.Verified
}

type GetAllTFASettings_TfaSettings_Edges struct {
	Node *GetAllTFASettings_TfaSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTFASettings_TfaSettings_Edges) GetNode() *GetAllTFASettings_TfaSettings_Edges_Node {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges{}
	}
	return t.Node
}

type GetAllTFASettings_TfaSettings struct {
	Edges []*GetAllTFASettings_TfaSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllTFASettings_TfaSettings) GetEdges() []*GetAllTFASettings_TfaSettings_Edges {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings{}
	}
	return t.Edges
}

type GetTFASetting_TfaSetting_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetTFASetting_TfaSetting_Owner) GetID() string {
	if t == nil {
		t = &GetTFASetting_TfaSetting_Owner{}
	}
	return t.ID
}

type GetTFASetting_TfaSetting struct {
	Owner       *GetTFASetting_TfaSetting_Owner "json:\"owner,omitempty\" graphql:\"owner\""
	TotpAllowed *bool                           "json:\"totpAllowed,omitempty\" graphql:\"totpAllowed\""
	Verified    bool                            "json:\"verified\" graphql:\"verified\""
}

func (t *GetTFASetting_TfaSetting) GetOwner() *GetTFASetting_TfaSetting_Owner {
	if t == nil {
		t = &GetTFASetting_TfaSetting{}
	}
	return t.Owner
}
func (t *GetTFASetting_TfaSetting) GetTotpAllowed() *bool {
	if t == nil {
		t = &GetTFASetting_TfaSetting{}
	}
	return t.TotpAllowed
}
func (t *GetTFASetting_TfaSetting) GetVerified() bool {
	if t == nil {
		t = &GetTFASetting_TfaSetting{}
	}
	return t.Verified
}

type UpdateTFASetting_UpdateTFASetting_TfaSetting struct {
	TotpAllowed *bool "json:\"totpAllowed,omitempty\" graphql:\"totpAllowed\""
	Verified    bool  "json:\"verified\" graphql:\"verified\""
}

func (t *UpdateTFASetting_UpdateTFASetting_TfaSetting) GetTotpAllowed() *bool {
	if t == nil {
		t = &UpdateTFASetting_UpdateTFASetting_TfaSetting{}
	}
	return t.TotpAllowed
}
func (t *UpdateTFASetting_UpdateTFASetting_TfaSetting) GetVerified() bool {
	if t == nil {
		t = &UpdateTFASetting_UpdateTFASetting_TfaSetting{}
	}
	return t.Verified
}

type UpdateTFASetting_UpdateTFASetting struct {
	QRCode        *string                                      "json:\"qrCode,omitempty\" graphql:\"qrCode\""
	RecoveryCodes []string                                     "json:\"recoveryCodes,omitempty\" graphql:\"recoveryCodes\""
	TfaSecret     *string                                      "json:\"tfaSecret,omitempty\" graphql:\"tfaSecret\""
	TfaSetting    UpdateTFASetting_UpdateTFASetting_TfaSetting "json:\"tfaSetting\" graphql:\"tfaSetting\""
}

func (t *UpdateTFASetting_UpdateTFASetting) GetQRCode() *string {
	if t == nil {
		t = &UpdateTFASetting_UpdateTFASetting{}
	}
	return t.QRCode
}
func (t *UpdateTFASetting_UpdateTFASetting) GetRecoveryCodes() []string {
	if t == nil {
		t = &UpdateTFASetting_UpdateTFASetting{}
	}
	return t.RecoveryCodes
}
func (t *UpdateTFASetting_UpdateTFASetting) GetTfaSecret() *string {
	if t == nil {
		t = &UpdateTFASetting_UpdateTFASetting{}
	}
	return t.TfaSecret
}
func (t *UpdateTFASetting_UpdateTFASetting) GetTfaSetting() *UpdateTFASetting_UpdateTFASetting_TfaSetting {
	if t == nil {
		t = &UpdateTFASetting_UpdateTFASetting{}
	}
	return &t.TfaSetting
}

type CreateUser_CreateUser_User_AvatarFile struct {
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *CreateUser_CreateUser_User_AvatarFile) GetPresignedURL() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User_AvatarFile{}
	}
	return t.PresignedURL
}

type CreateUser_CreateUser_User_OrgMemberships_Edges_Node struct {
	ID             string "json:\"id\" graphql:\"id\""
	OrganizationID string "json:\"organizationID\" graphql:\"organizationID\""
}

func (t *CreateUser_CreateUser_User_OrgMemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User_OrgMemberships_Edges_Node{}
	}
	return t.ID
}
func (t *CreateUser_CreateUser_User_OrgMemberships_Edges_Node) GetOrganizationID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User_OrgMemberships_Edges_Node{}
	}
	return t.OrganizationID
}

type CreateUser_CreateUser_User_OrgMemberships_Edges struct {
	Node *CreateUser_CreateUser_User_OrgMemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateUser_CreateUser_User_OrgMemberships_Edges) GetNode() *CreateUser_CreateUser_User_OrgMemberships_Edges_Node {
	if t == nil {
		t = &CreateUser_CreateUser_User_OrgMemberships_Edges{}
	}
	return t.Node
}

type CreateUser_CreateUser_User_OrgMemberships struct {
	Edges []*CreateUser_CreateUser_User_OrgMemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateUser_CreateUser_User_OrgMemberships) GetEdges() []*CreateUser_CreateUser_User_OrgMemberships_Edges {
	if t == nil {
		t = &CreateUser_CreateUser_User_OrgMemberships{}
	}
	return t.Edges
}

type CreateUser_CreateUser_User_GroupMemberships_Edges_Node struct {
	GroupID string "json:\"groupID\" graphql:\"groupID\""
	ID      string "json:\"id\" graphql:\"id\""
}

func (t *CreateUser_CreateUser_User_GroupMemberships_Edges_Node) GetGroupID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User_GroupMemberships_Edges_Node{}
	}
	return t.GroupID
}
func (t *CreateUser_CreateUser_User_GroupMemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User_GroupMemberships_Edges_Node{}
	}
	return t.ID
}

type CreateUser_CreateUser_User_GroupMemberships_Edges struct {
	Node *CreateUser_CreateUser_User_GroupMemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateUser_CreateUser_User_GroupMemberships_Edges) GetNode() *CreateUser_CreateUser_User_GroupMemberships_Edges_Node {
	if t == nil {
		t = &CreateUser_CreateUser_User_GroupMemberships_Edges{}
	}
	return t.Node
}

type CreateUser_CreateUser_User_GroupMemberships struct {
	Edges []*CreateUser_CreateUser_User_GroupMemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateUser_CreateUser_User_GroupMemberships) GetEdges() []*CreateUser_CreateUser_User_GroupMemberships_Edges {
	if t == nil {
		t = &CreateUser_CreateUser_User_GroupMemberships{}
	}
	return t.Edges
}

type CreateUser_CreateUser_User_Setting_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *CreateUser_CreateUser_User_Setting_DefaultOrg) GetID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting_DefaultOrg{}
	}
	return t.ID
}
func (t *CreateUser_CreateUser_User_Setting_DefaultOrg) GetName() string {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting_DefaultOrg{}
	}
	return t.Name
}
func (t *CreateUser_CreateUser_User_Setting_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting_DefaultOrg{}
	}
	return t.PersonalOrg
}

type CreateUser_CreateUser_User_Setting struct {
	CreatedAt      *time.Time                                     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DefaultOrg     *CreateUser_CreateUser_User_Setting_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	EmailConfirmed bool                                           "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	Locked         bool                                           "json:\"locked\" graphql:\"locked\""
	SilencedAt     *time.Time                                     "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                               "json:\"status\" graphql:\"status\""
	SuspendedAt    *time.Time                                     "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags           []string                                       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateUser_CreateUser_User_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.CreatedAt
}
func (t *CreateUser_CreateUser_User_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.CreatedBy
}
func (t *CreateUser_CreateUser_User_Setting) GetDefaultOrg() *CreateUser_CreateUser_User_Setting_DefaultOrg {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.DefaultOrg
}
func (t *CreateUser_CreateUser_User_Setting) GetEmailConfirmed() bool {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.EmailConfirmed
}
func (t *CreateUser_CreateUser_User_Setting) GetLocked() bool {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.Locked
}
func (t *CreateUser_CreateUser_User_Setting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.SilencedAt
}
func (t *CreateUser_CreateUser_User_Setting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return &t.Status
}
func (t *CreateUser_CreateUser_User_Setting) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.SuspendedAt
}
func (t *CreateUser_CreateUser_User_Setting) GetTags() []string {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.Tags
}
func (t *CreateUser_CreateUser_User_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.UpdatedAt
}
func (t *CreateUser_CreateUser_User_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.UpdatedBy
}

type CreateUser_CreateUser_User struct {
	AuthProvider      enums.AuthProvider                          "json:\"authProvider\" graphql:\"authProvider\""
	AvatarFile        *CreateUser_CreateUser_User_AvatarFile      "json:\"avatarFile,omitempty\" graphql:\"avatarFile\""
	AvatarLocalFileID *string                                     "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string                                     "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	DisplayID         string                                      "json:\"displayID\" graphql:\"displayID\""
	DisplayName       string                                      "json:\"displayName\" graphql:\"displayName\""
	Email             string                                      "json:\"email\" graphql:\"email\""
	FirstName         *string                                     "json:\"firstName,omitempty\" graphql:\"firstName\""
	GroupMemberships  CreateUser_CreateUser_User_GroupMemberships "json:\"groupMemberships\" graphql:\"groupMemberships\""
	ID                string                                      "json:\"id\" graphql:\"id\""
	LastName          *string                                     "json:\"lastName,omitempty\" graphql:\"lastName\""
	OrgMemberships    CreateUser_CreateUser_User_OrgMemberships   "json:\"orgMemberships\" graphql:\"orgMemberships\""
	Setting           CreateUser_CreateUser_User_Setting          "json:\"setting\" graphql:\"setting\""
	Sub               *string                                     "json:\"sub,omitempty\" graphql:\"sub\""
	Tags              []string                                    "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *CreateUser_CreateUser_User) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return &t.AuthProvider
}
func (t *CreateUser_CreateUser_User) GetAvatarFile() *CreateUser_CreateUser_User_AvatarFile {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.AvatarFile
}
func (t *CreateUser_CreateUser_User) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.AvatarLocalFileID
}
func (t *CreateUser_CreateUser_User) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.AvatarRemoteURL
}
func (t *CreateUser_CreateUser_User) GetDisplayID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.DisplayID
}
func (t *CreateUser_CreateUser_User) GetDisplayName() string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.DisplayName
}
func (t *CreateUser_CreateUser_User) GetEmail() string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.Email
}
func (t *CreateUser_CreateUser_User) GetFirstName() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.FirstName
}
func (t *CreateUser_CreateUser_User) GetGroupMemberships() *CreateUser_CreateUser_User_GroupMemberships {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return &t.GroupMemberships
}
func (t *CreateUser_CreateUser_User) GetID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.ID
}
func (t *CreateUser_CreateUser_User) GetLastName() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.LastName
}
func (t *CreateUser_CreateUser_User) GetOrgMemberships() *CreateUser_CreateUser_User_OrgMemberships {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return &t.OrgMemberships
}
func (t *CreateUser_CreateUser_User) GetSetting() *CreateUser_CreateUser_User_Setting {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return &t.Setting
}
func (t *CreateUser_CreateUser_User) GetSub() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.Sub
}
func (t *CreateUser_CreateUser_User) GetTags() []string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.Tags
}

type CreateUser_CreateUser struct {
	User CreateUser_CreateUser_User "json:\"user\" graphql:\"user\""
}

func (t *CreateUser_CreateUser) GetUser() *CreateUser_CreateUser_User {
	if t == nil {
		t = &CreateUser_CreateUser{}
	}
	return &t.User
}

type DeleteUser_DeleteUser struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteUser_DeleteUser) GetDeletedID() string {
	if t == nil {
		t = &DeleteUser_DeleteUser{}
	}
	return t.DeletedID
}

type GetAllUsers_Users_Edges_Node_AvatarFile struct {
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetAllUsers_Users_Edges_Node_AvatarFile) GetPresignedURL() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_AvatarFile{}
	}
	return t.PresignedURL
}

type GetAllUsers_Users_Edges_Node struct {
	AuthProvider      enums.AuthProvider                       "json:\"authProvider\" graphql:\"authProvider\""
	AvatarFile        *GetAllUsers_Users_Edges_Node_AvatarFile "json:\"avatarFile,omitempty\" graphql:\"avatarFile\""
	AvatarLocalFileID *string                                  "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string                                  "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	CreatedAt         *time.Time                               "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string                                  "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID         string                                   "json:\"displayID\" graphql:\"displayID\""
	DisplayName       string                                   "json:\"displayName\" graphql:\"displayName\""
	Email             string                                   "json:\"email\" graphql:\"email\""
	FirstName         *string                                  "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID                string                                   "json:\"id\" graphql:\"id\""
	LastName          *string                                  "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen          *time.Time                               "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Sub               *string                                  "json:\"sub,omitempty\" graphql:\"sub\""
	Tags              []string                                 "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time                               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string                                  "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllUsers_Users_Edges_Node) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return &t.AuthProvider
}
func (t *GetAllUsers_Users_Edges_Node) GetAvatarFile() *GetAllUsers_Users_Edges_Node_AvatarFile {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.AvatarFile
}
func (t *GetAllUsers_Users_Edges_Node) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.AvatarLocalFileID
}
func (t *GetAllUsers_Users_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *GetAllUsers_Users_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllUsers_Users_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllUsers_Users_Edges_Node) GetDisplayID() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.DisplayID
}
func (t *GetAllUsers_Users_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllUsers_Users_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.Email
}
func (t *GetAllUsers_Users_Edges_Node) GetFirstName() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.FirstName
}
func (t *GetAllUsers_Users_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllUsers_Users_Edges_Node) GetLastName() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.LastName
}
func (t *GetAllUsers_Users_Edges_Node) GetLastSeen() *time.Time {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.LastSeen
}
func (t *GetAllUsers_Users_Edges_Node) GetSub() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.Sub
}
func (t *GetAllUsers_Users_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllUsers_Users_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllUsers_Users_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllUsers_Users_Edges struct {
	Node *GetAllUsers_Users_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllUsers_Users_Edges) GetNode() *GetAllUsers_Users_Edges_Node {
	if t == nil {
		t = &GetAllUsers_Users_Edges{}
	}
	return t.Node
}

type GetAllUsers_Users struct {
	Edges []*GetAllUsers_Users_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllUsers_Users) GetEdges() []*GetAllUsers_Users_Edges {
	if t == nil {
		t = &GetAllUsers_Users{}
	}
	return t.Edges
}

type GetSelf_Self_AvatarFile struct {
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetSelf_Self_AvatarFile) GetPresignedURL() *string {
	if t == nil {
		t = &GetSelf_Self_AvatarFile{}
	}
	return t.PresignedURL
}

type GetSelf_Self_Setting_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *GetSelf_Self_Setting_DefaultOrg) GetID() string {
	if t == nil {
		t = &GetSelf_Self_Setting_DefaultOrg{}
	}
	return t.ID
}
func (t *GetSelf_Self_Setting_DefaultOrg) GetName() string {
	if t == nil {
		t = &GetSelf_Self_Setting_DefaultOrg{}
	}
	return t.Name
}
func (t *GetSelf_Self_Setting_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetSelf_Self_Setting_DefaultOrg{}
	}
	return t.PersonalOrg
}

type GetSelf_Self_Setting struct {
	CreatedAt      *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DefaultOrg     *GetSelf_Self_Setting_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	EmailConfirmed bool                             "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	Locked         bool                             "json:\"locked\" graphql:\"locked\""
	SilencedAt     *time.Time                       "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                 "json:\"status\" graphql:\"status\""
	SuspendedAt    *time.Time                       "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags           []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetSelf_Self_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetSelf_Self_Setting{}
	}
	return t.CreatedAt
}
func (t *GetSelf_Self_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetSelf_Self_Setting{}
	}
	return t.CreatedBy
}
func (t *GetSelf_Self_Setting) GetDefaultOrg() *GetSelf_Self_Setting_DefaultOrg {
	if t == nil {
		t = &GetSelf_Self_Setting{}
	}
	return t.DefaultOrg
}
func (t *GetSelf_Self_Setting) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetSelf_Self_Setting{}
	}
	return t.EmailConfirmed
}
func (t *GetSelf_Self_Setting) GetLocked() bool {
	if t == nil {
		t = &GetSelf_Self_Setting{}
	}
	return t.Locked
}
func (t *GetSelf_Self_Setting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetSelf_Self_Setting{}
	}
	return t.SilencedAt
}
func (t *GetSelf_Self_Setting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetSelf_Self_Setting{}
	}
	return &t.Status
}
func (t *GetSelf_Self_Setting) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &GetSelf_Self_Setting{}
	}
	return t.SuspendedAt
}
func (t *GetSelf_Self_Setting) GetTags() []string {
	if t == nil {
		t = &GetSelf_Self_Setting{}
	}
	return t.Tags
}
func (t *GetSelf_Self_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetSelf_Self_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetSelf_Self_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetSelf_Self_Setting{}
	}
	return t.UpdatedBy
}

type GetSelf_Self_TfaSettings_Edges_Node struct {
	TotpAllowed *bool "json:\"totpAllowed,omitempty\" graphql:\"totpAllowed\""
	Verified    bool  "json:\"verified\" graphql:\"verified\""
}

func (t *GetSelf_Self_TfaSettings_Edges_Node) GetTotpAllowed() *bool {
	if t == nil {
		t = &GetSelf_Self_TfaSettings_Edges_Node{}
	}
	return t.TotpAllowed
}
func (t *GetSelf_Self_TfaSettings_Edges_Node) GetVerified() bool {
	if t == nil {
		t = &GetSelf_Self_TfaSettings_Edges_Node{}
	}
	return t.Verified
}

type GetSelf_Self_TfaSettings_Edges struct {
	Node *GetSelf_Self_TfaSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetSelf_Self_TfaSettings_Edges) GetNode() *GetSelf_Self_TfaSettings_Edges_Node {
	if t == nil {
		t = &GetSelf_Self_TfaSettings_Edges{}
	}
	return t.Node
}

type GetSelf_Self_TfaSettings struct {
	Edges []*GetSelf_Self_TfaSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetSelf_Self_TfaSettings) GetEdges() []*GetSelf_Self_TfaSettings_Edges {
	if t == nil {
		t = &GetSelf_Self_TfaSettings{}
	}
	return t.Edges
}

type GetSelf_Self struct {
	AuthProvider      enums.AuthProvider       "json:\"authProvider\" graphql:\"authProvider\""
	AvatarFile        *GetSelf_Self_AvatarFile "json:\"avatarFile,omitempty\" graphql:\"avatarFile\""
	AvatarLocalFileID *string                  "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string                  "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	CreatedAt         *time.Time               "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string                  "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID         string                   "json:\"displayID\" graphql:\"displayID\""
	DisplayName       string                   "json:\"displayName\" graphql:\"displayName\""
	Email             string                   "json:\"email\" graphql:\"email\""
	FirstName         *string                  "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID                string                   "json:\"id\" graphql:\"id\""
	LastName          *string                  "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen          *time.Time               "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Setting           GetSelf_Self_Setting     "json:\"setting\" graphql:\"setting\""
	Sub               *string                  "json:\"sub,omitempty\" graphql:\"sub\""
	Tags              []string                 "json:\"tags,omitempty\" graphql:\"tags\""
	TfaSettings       GetSelf_Self_TfaSettings "json:\"tfaSettings\" graphql:\"tfaSettings\""
	UpdatedAt         *time.Time               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string                  "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetSelf_Self) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return &t.AuthProvider
}
func (t *GetSelf_Self) GetAvatarFile() *GetSelf_Self_AvatarFile {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.AvatarFile
}
func (t *GetSelf_Self) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.AvatarLocalFileID
}
func (t *GetSelf_Self) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.AvatarRemoteURL
}
func (t *GetSelf_Self) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.CreatedAt
}
func (t *GetSelf_Self) GetCreatedBy() *string {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.CreatedBy
}
func (t *GetSelf_Self) GetDisplayID() string {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.DisplayID
}
func (t *GetSelf_Self) GetDisplayName() string {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.DisplayName
}
func (t *GetSelf_Self) GetEmail() string {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.Email
}
func (t *GetSelf_Self) GetFirstName() *string {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.FirstName
}
func (t *GetSelf_Self) GetID() string {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.ID
}
func (t *GetSelf_Self) GetLastName() *string {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.LastName
}
func (t *GetSelf_Self) GetLastSeen() *time.Time {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.LastSeen
}
func (t *GetSelf_Self) GetSetting() *GetSelf_Self_Setting {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return &t.Setting
}
func (t *GetSelf_Self) GetSub() *string {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.Sub
}
func (t *GetSelf_Self) GetTags() []string {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.Tags
}
func (t *GetSelf_Self) GetTfaSettings() *GetSelf_Self_TfaSettings {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return &t.TfaSettings
}
func (t *GetSelf_Self) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.UpdatedAt
}
func (t *GetSelf_Self) GetUpdatedBy() *string {
	if t == nil {
		t = &GetSelf_Self{}
	}
	return t.UpdatedBy
}

type GetUserByID_User_AvatarFile struct {
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetUserByID_User_AvatarFile) GetPresignedURL() *string {
	if t == nil {
		t = &GetUserByID_User_AvatarFile{}
	}
	return t.PresignedURL
}

type GetUserByID_User_Setting_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *GetUserByID_User_Setting_DefaultOrg) GetID() string {
	if t == nil {
		t = &GetUserByID_User_Setting_DefaultOrg{}
	}
	return t.ID
}
func (t *GetUserByID_User_Setting_DefaultOrg) GetName() string {
	if t == nil {
		t = &GetUserByID_User_Setting_DefaultOrg{}
	}
	return t.Name
}
func (t *GetUserByID_User_Setting_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetUserByID_User_Setting_DefaultOrg{}
	}
	return t.PersonalOrg
}

type GetUserByID_User_Setting struct {
	CreatedAt      *time.Time                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DefaultOrg     *GetUserByID_User_Setting_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	EmailConfirmed bool                                 "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	Locked         bool                                 "json:\"locked\" graphql:\"locked\""
	SilencedAt     *time.Time                           "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                     "json:\"status\" graphql:\"status\""
	SuspendedAt    *time.Time                           "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags           []string                             "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetUserByID_User_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.CreatedAt
}
func (t *GetUserByID_User_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.CreatedBy
}
func (t *GetUserByID_User_Setting) GetDefaultOrg() *GetUserByID_User_Setting_DefaultOrg {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.DefaultOrg
}
func (t *GetUserByID_User_Setting) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.EmailConfirmed
}
func (t *GetUserByID_User_Setting) GetLocked() bool {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.Locked
}
func (t *GetUserByID_User_Setting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.SilencedAt
}
func (t *GetUserByID_User_Setting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return &t.Status
}
func (t *GetUserByID_User_Setting) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.SuspendedAt
}
func (t *GetUserByID_User_Setting) GetTags() []string {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.Tags
}
func (t *GetUserByID_User_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetUserByID_User_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.UpdatedBy
}

type GetUserByID_User_Organizations_Edges_Node_Members_Edges_Node struct {
	ID   string     "json:\"id\" graphql:\"id\""
	Role enums.Role "json:\"role\" graphql:\"role\""
}

func (t *GetUserByID_User_Organizations_Edges_Node_Members_Edges_Node) GetID() string {
	if t == nil {
		t = &GetUserByID_User_Organizations_Edges_Node_Members_Edges_Node{}
	}
	return t.ID
}
func (t *GetUserByID_User_Organizations_Edges_Node_Members_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetUserByID_User_Organizations_Edges_Node_Members_Edges_Node{}
	}
	return &t.Role
}

type GetUserByID_User_Organizations_Edges_Node_Members_Edges struct {
	Node *GetUserByID_User_Organizations_Edges_Node_Members_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetUserByID_User_Organizations_Edges_Node_Members_Edges) GetNode() *GetUserByID_User_Organizations_Edges_Node_Members_Edges_Node {
	if t == nil {
		t = &GetUserByID_User_Organizations_Edges_Node_Members_Edges{}
	}
	return t.Node
}

type GetUserByID_User_Organizations_Edges_Node_Members struct {
	Edges []*GetUserByID_User_Organizations_Edges_Node_Members_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetUserByID_User_Organizations_Edges_Node_Members) GetEdges() []*GetUserByID_User_Organizations_Edges_Node_Members_Edges {
	if t == nil {
		t = &GetUserByID_User_Organizations_Edges_Node_Members{}
	}
	return t.Edges
}

type GetUserByID_User_Organizations_Edges_Node struct {
	ID          string                                            "json:\"id\" graphql:\"id\""
	Members     GetUserByID_User_Organizations_Edges_Node_Members "json:\"members\" graphql:\"members\""
	Name        string                                            "json:\"name\" graphql:\"name\""
	PersonalOrg *bool                                             "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *GetUserByID_User_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetUserByID_User_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *GetUserByID_User_Organizations_Edges_Node) GetMembers() *GetUserByID_User_Organizations_Edges_Node_Members {
	if t == nil {
		t = &GetUserByID_User_Organizations_Edges_Node{}
	}
	return &t.Members
}
func (t *GetUserByID_User_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetUserByID_User_Organizations_Edges_Node{}
	}
	return t.Name
}
func (t *GetUserByID_User_Organizations_Edges_Node) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetUserByID_User_Organizations_Edges_Node{}
	}
	return t.PersonalOrg
}

type GetUserByID_User_Organizations_Edges struct {
	Node *GetUserByID_User_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetUserByID_User_Organizations_Edges) GetNode() *GetUserByID_User_Organizations_Edges_Node {
	if t == nil {
		t = &GetUserByID_User_Organizations_Edges{}
	}
	return t.Node
}

type GetUserByID_User_Organizations struct {
	Edges []*GetUserByID_User_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetUserByID_User_Organizations) GetEdges() []*GetUserByID_User_Organizations_Edges {
	if t == nil {
		t = &GetUserByID_User_Organizations{}
	}
	return t.Edges
}

type GetUserByID_User struct {
	AuthProvider      enums.AuthProvider             "json:\"authProvider\" graphql:\"authProvider\""
	AvatarFile        *GetUserByID_User_AvatarFile   "json:\"avatarFile,omitempty\" graphql:\"avatarFile\""
	AvatarLocalFileID *string                        "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string                        "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	CreatedAt         *time.Time                     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string                        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID         string                         "json:\"displayID\" graphql:\"displayID\""
	DisplayName       string                         "json:\"displayName\" graphql:\"displayName\""
	Email             string                         "json:\"email\" graphql:\"email\""
	FirstName         *string                        "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID                string                         "json:\"id\" graphql:\"id\""
	LastName          *string                        "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen          *time.Time                     "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Organizations     GetUserByID_User_Organizations "json:\"organizations\" graphql:\"organizations\""
	Setting           GetUserByID_User_Setting       "json:\"setting\" graphql:\"setting\""
	Sub               *string                        "json:\"sub,omitempty\" graphql:\"sub\""
	Tags              []string                       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string                        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetUserByID_User) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return &t.AuthProvider
}
func (t *GetUserByID_User) GetAvatarFile() *GetUserByID_User_AvatarFile {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.AvatarFile
}
func (t *GetUserByID_User) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.AvatarLocalFileID
}
func (t *GetUserByID_User) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.AvatarRemoteURL
}
func (t *GetUserByID_User) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.CreatedAt
}
func (t *GetUserByID_User) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.CreatedBy
}
func (t *GetUserByID_User) GetDisplayID() string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.DisplayID
}
func (t *GetUserByID_User) GetDisplayName() string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.DisplayName
}
func (t *GetUserByID_User) GetEmail() string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.Email
}
func (t *GetUserByID_User) GetFirstName() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.FirstName
}
func (t *GetUserByID_User) GetID() string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.ID
}
func (t *GetUserByID_User) GetLastName() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.LastName
}
func (t *GetUserByID_User) GetLastSeen() *time.Time {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.LastSeen
}
func (t *GetUserByID_User) GetOrganizations() *GetUserByID_User_Organizations {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return &t.Organizations
}
func (t *GetUserByID_User) GetSetting() *GetUserByID_User_Setting {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return &t.Setting
}
func (t *GetUserByID_User) GetSub() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.Sub
}
func (t *GetUserByID_User) GetTags() []string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.Tags
}
func (t *GetUserByID_User) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.UpdatedAt
}
func (t *GetUserByID_User) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.UpdatedBy
}

type GetUserByIDWithOrgs_User_AvatarFile struct {
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *GetUserByIDWithOrgs_User_AvatarFile) GetPresignedURL() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_AvatarFile{}
	}
	return t.PresignedURL
}

type GetUserByIDWithOrgs_User_Setting_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *GetUserByIDWithOrgs_User_Setting_DefaultOrg) GetID() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting_DefaultOrg{}
	}
	return t.ID
}
func (t *GetUserByIDWithOrgs_User_Setting_DefaultOrg) GetName() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting_DefaultOrg{}
	}
	return t.Name
}
func (t *GetUserByIDWithOrgs_User_Setting_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting_DefaultOrg{}
	}
	return t.PersonalOrg
}

type GetUserByIDWithOrgs_User_Setting struct {
	CreatedAt      *time.Time                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DefaultOrg     *GetUserByIDWithOrgs_User_Setting_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	EmailConfirmed bool                                         "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	Locked         bool                                         "json:\"locked\" graphql:\"locked\""
	SilencedAt     *time.Time                                   "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                             "json:\"status\" graphql:\"status\""
	SuspendedAt    *time.Time                                   "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags           []string                                     "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetUserByIDWithOrgs_User_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.CreatedAt
}
func (t *GetUserByIDWithOrgs_User_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.CreatedBy
}
func (t *GetUserByIDWithOrgs_User_Setting) GetDefaultOrg() *GetUserByIDWithOrgs_User_Setting_DefaultOrg {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.DefaultOrg
}
func (t *GetUserByIDWithOrgs_User_Setting) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.EmailConfirmed
}
func (t *GetUserByIDWithOrgs_User_Setting) GetLocked() bool {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.Locked
}
func (t *GetUserByIDWithOrgs_User_Setting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.SilencedAt
}
func (t *GetUserByIDWithOrgs_User_Setting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return &t.Status
}
func (t *GetUserByIDWithOrgs_User_Setting) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.SuspendedAt
}
func (t *GetUserByIDWithOrgs_User_Setting) GetTags() []string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.Tags
}
func (t *GetUserByIDWithOrgs_User_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetUserByIDWithOrgs_User_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.UpdatedBy
}

type GetUserByIDWithOrgs_User_OrgMemberships_Edges_Node_User struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetUserByIDWithOrgs_User_OrgMemberships_Edges_Node_User) GetFirstName() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_OrgMemberships_Edges_Node_User{}
	}
	return t.FirstName
}
func (t *GetUserByIDWithOrgs_User_OrgMemberships_Edges_Node_User) GetLastName() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_OrgMemberships_Edges_Node_User{}
	}
	return t.LastName
}

type GetUserByIDWithOrgs_User_OrgMemberships_Edges_Node struct {
	ID   string                                                  "json:\"id\" graphql:\"id\""
	Role enums.Role                                              "json:\"role\" graphql:\"role\""
	User GetUserByIDWithOrgs_User_OrgMemberships_Edges_Node_User "json:\"user\" graphql:\"user\""
}

func (t *GetUserByIDWithOrgs_User_OrgMemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_OrgMemberships_Edges_Node{}
	}
	return t.ID
}
func (t *GetUserByIDWithOrgs_User_OrgMemberships_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_OrgMemberships_Edges_Node{}
	}
	return &t.Role
}
func (t *GetUserByIDWithOrgs_User_OrgMemberships_Edges_Node) GetUser() *GetUserByIDWithOrgs_User_OrgMemberships_Edges_Node_User {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_OrgMemberships_Edges_Node{}
	}
	return &t.User
}

type GetUserByIDWithOrgs_User_OrgMemberships_Edges struct {
	Node *GetUserByIDWithOrgs_User_OrgMemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetUserByIDWithOrgs_User_OrgMemberships_Edges) GetNode() *GetUserByIDWithOrgs_User_OrgMemberships_Edges_Node {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_OrgMemberships_Edges{}
	}
	return t.Node
}

type GetUserByIDWithOrgs_User_OrgMemberships struct {
	Edges []*GetUserByIDWithOrgs_User_OrgMemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetUserByIDWithOrgs_User_OrgMemberships) GetEdges() []*GetUserByIDWithOrgs_User_OrgMemberships_Edges {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_OrgMemberships{}
	}
	return t.Edges
}

type GetUserByIDWithOrgs_User struct {
	AuthProvider      enums.AuthProvider                      "json:\"authProvider\" graphql:\"authProvider\""
	AvatarFile        *GetUserByIDWithOrgs_User_AvatarFile    "json:\"avatarFile,omitempty\" graphql:\"avatarFile\""
	AvatarLocalFileID *string                                 "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string                                 "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	CreatedAt         *time.Time                              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string                                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayID         string                                  "json:\"displayID\" graphql:\"displayID\""
	DisplayName       string                                  "json:\"displayName\" graphql:\"displayName\""
	Email             string                                  "json:\"email\" graphql:\"email\""
	FirstName         *string                                 "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID                string                                  "json:\"id\" graphql:\"id\""
	LastName          *string                                 "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen          *time.Time                              "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	OrgMemberships    GetUserByIDWithOrgs_User_OrgMemberships "json:\"orgMemberships\" graphql:\"orgMemberships\""
	Setting           GetUserByIDWithOrgs_User_Setting        "json:\"setting\" graphql:\"setting\""
	Sub               *string                                 "json:\"sub,omitempty\" graphql:\"sub\""
	Tags              []string                                "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time                              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string                                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetUserByIDWithOrgs_User) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return &t.AuthProvider
}
func (t *GetUserByIDWithOrgs_User) GetAvatarFile() *GetUserByIDWithOrgs_User_AvatarFile {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.AvatarFile
}
func (t *GetUserByIDWithOrgs_User) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.AvatarLocalFileID
}
func (t *GetUserByIDWithOrgs_User) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.AvatarRemoteURL
}
func (t *GetUserByIDWithOrgs_User) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.CreatedAt
}
func (t *GetUserByIDWithOrgs_User) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.CreatedBy
}
func (t *GetUserByIDWithOrgs_User) GetDisplayID() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.DisplayID
}
func (t *GetUserByIDWithOrgs_User) GetDisplayName() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.DisplayName
}
func (t *GetUserByIDWithOrgs_User) GetEmail() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.Email
}
func (t *GetUserByIDWithOrgs_User) GetFirstName() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.FirstName
}
func (t *GetUserByIDWithOrgs_User) GetID() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.ID
}
func (t *GetUserByIDWithOrgs_User) GetLastName() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.LastName
}
func (t *GetUserByIDWithOrgs_User) GetLastSeen() *time.Time {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.LastSeen
}
func (t *GetUserByIDWithOrgs_User) GetOrgMemberships() *GetUserByIDWithOrgs_User_OrgMemberships {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return &t.OrgMemberships
}
func (t *GetUserByIDWithOrgs_User) GetSetting() *GetUserByIDWithOrgs_User_Setting {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return &t.Setting
}
func (t *GetUserByIDWithOrgs_User) GetSub() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.Sub
}
func (t *GetUserByIDWithOrgs_User) GetTags() []string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.Tags
}
func (t *GetUserByIDWithOrgs_User) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.UpdatedAt
}
func (t *GetUserByIDWithOrgs_User) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.UpdatedBy
}

type UpdateUser_UpdateUser_User_AvatarFile struct {
	PresignedURL *string "json:\"presignedURL,omitempty\" graphql:\"presignedURL\""
}

func (t *UpdateUser_UpdateUser_User_AvatarFile) GetPresignedURL() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_AvatarFile{}
	}
	return t.PresignedURL
}

type UpdateUser_UpdateUser_User_GroupMemberships_Edges_Node struct {
	GroupID string "json:\"groupID\" graphql:\"groupID\""
	ID      string "json:\"id\" graphql:\"id\""
}

func (t *UpdateUser_UpdateUser_User_GroupMemberships_Edges_Node) GetGroupID() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_GroupMemberships_Edges_Node{}
	}
	return t.GroupID
}
func (t *UpdateUser_UpdateUser_User_GroupMemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_GroupMemberships_Edges_Node{}
	}
	return t.ID
}

type UpdateUser_UpdateUser_User_GroupMemberships_Edges struct {
	Node *UpdateUser_UpdateUser_User_GroupMemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateUser_UpdateUser_User_GroupMemberships_Edges) GetNode() *UpdateUser_UpdateUser_User_GroupMemberships_Edges_Node {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_GroupMemberships_Edges{}
	}
	return t.Node
}

type UpdateUser_UpdateUser_User_GroupMemberships struct {
	Edges []*UpdateUser_UpdateUser_User_GroupMemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateUser_UpdateUser_User_GroupMemberships) GetEdges() []*UpdateUser_UpdateUser_User_GroupMemberships_Edges {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_GroupMemberships{}
	}
	return t.Edges
}

type UpdateUser_UpdateUser_User_OrgMemberships_Edges_Node struct {
	ID             string "json:\"id\" graphql:\"id\""
	OrganizationID string "json:\"organizationID\" graphql:\"organizationID\""
}

func (t *UpdateUser_UpdateUser_User_OrgMemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_OrgMemberships_Edges_Node{}
	}
	return t.ID
}
func (t *UpdateUser_UpdateUser_User_OrgMemberships_Edges_Node) GetOrganizationID() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_OrgMemberships_Edges_Node{}
	}
	return t.OrganizationID
}

type UpdateUser_UpdateUser_User_OrgMemberships_Edges struct {
	Node *UpdateUser_UpdateUser_User_OrgMemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *UpdateUser_UpdateUser_User_OrgMemberships_Edges) GetNode() *UpdateUser_UpdateUser_User_OrgMemberships_Edges_Node {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_OrgMemberships_Edges{}
	}
	return t.Node
}

type UpdateUser_UpdateUser_User_OrgMemberships struct {
	Edges []*UpdateUser_UpdateUser_User_OrgMemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *UpdateUser_UpdateUser_User_OrgMemberships) GetEdges() []*UpdateUser_UpdateUser_User_OrgMemberships_Edges {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_OrgMemberships{}
	}
	return t.Edges
}

type UpdateUser_UpdateUser_User_Setting_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *UpdateUser_UpdateUser_User_Setting_DefaultOrg) GetID() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting_DefaultOrg{}
	}
	return t.ID
}
func (t *UpdateUser_UpdateUser_User_Setting_DefaultOrg) GetName() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting_DefaultOrg{}
	}
	return t.Name
}
func (t *UpdateUser_UpdateUser_User_Setting_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting_DefaultOrg{}
	}
	return t.PersonalOrg
}

type UpdateUser_UpdateUser_User_Setting struct {
	CreatedAt      *time.Time                                     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DefaultOrg     *UpdateUser_UpdateUser_User_Setting_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	EmailConfirmed bool                                           "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	Locked         bool                                           "json:\"locked\" graphql:\"locked\""
	SilencedAt     *time.Time                                     "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                               "json:\"status\" graphql:\"status\""
	SuspendedAt    *time.Time                                     "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags           []string                                       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateUser_UpdateUser_User_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.CreatedAt
}
func (t *UpdateUser_UpdateUser_User_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.CreatedBy
}
func (t *UpdateUser_UpdateUser_User_Setting) GetDefaultOrg() *UpdateUser_UpdateUser_User_Setting_DefaultOrg {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.DefaultOrg
}
func (t *UpdateUser_UpdateUser_User_Setting) GetEmailConfirmed() bool {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.EmailConfirmed
}
func (t *UpdateUser_UpdateUser_User_Setting) GetLocked() bool {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.Locked
}
func (t *UpdateUser_UpdateUser_User_Setting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.SilencedAt
}
func (t *UpdateUser_UpdateUser_User_Setting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return &t.Status
}
func (t *UpdateUser_UpdateUser_User_Setting) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.SuspendedAt
}
func (t *UpdateUser_UpdateUser_User_Setting) GetTags() []string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.Tags
}
func (t *UpdateUser_UpdateUser_User_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.UpdatedAt
}
func (t *UpdateUser_UpdateUser_User_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.UpdatedBy
}

type UpdateUser_UpdateUser_User struct {
	AuthProvider      enums.AuthProvider                          "json:\"authProvider\" graphql:\"authProvider\""
	AvatarFile        *UpdateUser_UpdateUser_User_AvatarFile      "json:\"avatarFile,omitempty\" graphql:\"avatarFile\""
	AvatarLocalFileID *string                                     "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string                                     "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	DisplayID         string                                      "json:\"displayID\" graphql:\"displayID\""
	DisplayName       string                                      "json:\"displayName\" graphql:\"displayName\""
	Email             string                                      "json:\"email\" graphql:\"email\""
	FirstName         *string                                     "json:\"firstName,omitempty\" graphql:\"firstName\""
	GroupMemberships  UpdateUser_UpdateUser_User_GroupMemberships "json:\"groupMemberships\" graphql:\"groupMemberships\""
	ID                string                                      "json:\"id\" graphql:\"id\""
	LastName          *string                                     "json:\"lastName,omitempty\" graphql:\"lastName\""
	OrgMemberships    UpdateUser_UpdateUser_User_OrgMemberships   "json:\"orgMemberships\" graphql:\"orgMemberships\""
	Setting           UpdateUser_UpdateUser_User_Setting          "json:\"setting\" graphql:\"setting\""
	Sub               *string                                     "json:\"sub,omitempty\" graphql:\"sub\""
	Tags              []string                                    "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *UpdateUser_UpdateUser_User) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return &t.AuthProvider
}
func (t *UpdateUser_UpdateUser_User) GetAvatarFile() *UpdateUser_UpdateUser_User_AvatarFile {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.AvatarFile
}
func (t *UpdateUser_UpdateUser_User) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.AvatarLocalFileID
}
func (t *UpdateUser_UpdateUser_User) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.AvatarRemoteURL
}
func (t *UpdateUser_UpdateUser_User) GetDisplayID() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.DisplayID
}
func (t *UpdateUser_UpdateUser_User) GetDisplayName() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.DisplayName
}
func (t *UpdateUser_UpdateUser_User) GetEmail() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.Email
}
func (t *UpdateUser_UpdateUser_User) GetFirstName() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.FirstName
}
func (t *UpdateUser_UpdateUser_User) GetGroupMemberships() *UpdateUser_UpdateUser_User_GroupMemberships {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return &t.GroupMemberships
}
func (t *UpdateUser_UpdateUser_User) GetID() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.ID
}
func (t *UpdateUser_UpdateUser_User) GetLastName() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.LastName
}
func (t *UpdateUser_UpdateUser_User) GetOrgMemberships() *UpdateUser_UpdateUser_User_OrgMemberships {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return &t.OrgMemberships
}
func (t *UpdateUser_UpdateUser_User) GetSetting() *UpdateUser_UpdateUser_User_Setting {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return &t.Setting
}
func (t *UpdateUser_UpdateUser_User) GetSub() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.Sub
}
func (t *UpdateUser_UpdateUser_User) GetTags() []string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.Tags
}

type UpdateUser_UpdateUser struct {
	User UpdateUser_UpdateUser_User "json:\"user\" graphql:\"user\""
}

func (t *UpdateUser_UpdateUser) GetUser() *UpdateUser_UpdateUser_User {
	if t == nil {
		t = &UpdateUser_UpdateUser{}
	}
	return &t.User
}

type GetAllUserHistories_UserHistories_Edges_Node struct {
	AuthProvider      enums.AuthProvider "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFileID *string            "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string            "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarUpdatedAt   *time.Time         "json:\"avatarUpdatedAt,omitempty\" graphql:\"avatarUpdatedAt\""
	CreatedAt         *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayName       string             "json:\"displayName\" graphql:\"displayName\""
	Email             string             "json:\"email\" graphql:\"email\""
	FirstName         *string            "json:\"firstName,omitempty\" graphql:\"firstName\""
	HistoryTime       time.Time          "json:\"historyTime\" graphql:\"historyTime\""
	ID                string             "json:\"id\" graphql:\"id\""
	LastName          *string            "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen          *time.Time         "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Operation         history.OpType     "json:\"operation\" graphql:\"operation\""
	Ref               *string            "json:\"ref,omitempty\" graphql:\"ref\""
	Role              *enums.Role        "json:\"role,omitempty\" graphql:\"role\""
	Sub               *string            "json:\"sub,omitempty\" graphql:\"sub\""
	Tags              []string           "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllUserHistories_UserHistories_Edges_Node) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return &t.AuthProvider
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarLocalFileID
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetAvatarUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarUpdatedAt
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.Email
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetFirstName() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.FirstName
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetLastName() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.LastName
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetLastSeen() *time.Time {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.LastSeen
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.Role
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetSub() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.Sub
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllUserHistories_UserHistories_Edges struct {
	Node *GetAllUserHistories_UserHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllUserHistories_UserHistories_Edges) GetNode() *GetAllUserHistories_UserHistories_Edges_Node {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges{}
	}
	return t.Node
}

type GetAllUserHistories_UserHistories struct {
	Edges []*GetAllUserHistories_UserHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllUserHistories_UserHistories) GetEdges() []*GetAllUserHistories_UserHistories_Edges {
	if t == nil {
		t = &GetAllUserHistories_UserHistories{}
	}
	return t.Edges
}

type GetUserHistories_UserHistories_Edges_Node struct {
	AuthProvider      enums.AuthProvider "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFileID *string            "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	AvatarRemoteURL   *string            "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarUpdatedAt   *time.Time         "json:\"avatarUpdatedAt,omitempty\" graphql:\"avatarUpdatedAt\""
	CreatedAt         *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayName       string             "json:\"displayName\" graphql:\"displayName\""
	Email             string             "json:\"email\" graphql:\"email\""
	FirstName         *string            "json:\"firstName,omitempty\" graphql:\"firstName\""
	HistoryTime       time.Time          "json:\"historyTime\" graphql:\"historyTime\""
	ID                string             "json:\"id\" graphql:\"id\""
	LastName          *string            "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen          *time.Time         "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Operation         history.OpType     "json:\"operation\" graphql:\"operation\""
	Ref               *string            "json:\"ref,omitempty\" graphql:\"ref\""
	Role              *enums.Role        "json:\"role,omitempty\" graphql:\"role\""
	Sub               *string            "json:\"sub,omitempty\" graphql:\"sub\""
	Tags              []string           "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetUserHistories_UserHistories_Edges_Node) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return &t.AuthProvider
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarLocalFileID
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetAvatarUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarUpdatedAt
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.Email
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetFirstName() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.FirstName
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetLastName() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.LastName
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetLastSeen() *time.Time {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.LastSeen
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.Role
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetSub() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.Sub
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetUserHistories_UserHistories_Edges struct {
	Node *GetUserHistories_UserHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetUserHistories_UserHistories_Edges) GetNode() *GetUserHistories_UserHistories_Edges_Node {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges{}
	}
	return t.Node
}

type GetUserHistories_UserHistories struct {
	Edges []*GetUserHistories_UserHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetUserHistories_UserHistories) GetEdges() []*GetUserHistories_UserHistories_Edges {
	if t == nil {
		t = &GetUserHistories_UserHistories{}
	}
	return t.Edges
}

type GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg) GetID() string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg{}
	}
	return t.ID
}
func (t *GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg) GetName() string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg{}
	}
	return t.Name
}
func (t *GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg{}
	}
	return t.PersonalOrg
}

type GetAllUserSettings_UserSettings_Edges_Node struct {
	CreatedAt      *time.Time                                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DefaultOrg     *GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	DeletedAt      *time.Time                                             "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	DeletedBy      *string                                                "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	EmailConfirmed bool                                                   "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	ID             string                                                 "json:\"id\" graphql:\"id\""
	IsTfaEnabled   *bool                                                  "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	Locked         bool                                                   "json:\"locked\" graphql:\"locked\""
	SilencedAt     *time.Time                                             "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                                       "json:\"status\" graphql:\"status\""
	Tags           []string                                               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllUserSettings_UserSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetDefaultOrg() *GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.DefaultOrg
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetDeletedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.DeletedAt
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.EmailConfirmed
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.IsTfaEnabled
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetLocked() bool {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.Locked
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.SilencedAt
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllUserSettings_UserSettings_Edges struct {
	Node *GetAllUserSettings_UserSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllUserSettings_UserSettings_Edges) GetNode() *GetAllUserSettings_UserSettings_Edges_Node {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges{}
	}
	return t.Node
}

type GetAllUserSettings_UserSettings struct {
	Edges []*GetAllUserSettings_UserSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllUserSettings_UserSettings) GetEdges() []*GetAllUserSettings_UserSettings_Edges {
	if t == nil {
		t = &GetAllUserSettings_UserSettings{}
	}
	return t.Edges
}

type GetUserSettingByID_UserSetting_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *GetUserSettingByID_UserSetting_DefaultOrg) GetID() string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting_DefaultOrg{}
	}
	return t.ID
}
func (t *GetUserSettingByID_UserSetting_DefaultOrg) GetName() string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting_DefaultOrg{}
	}
	return t.Name
}
func (t *GetUserSettingByID_UserSetting_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetUserSettingByID_UserSetting_DefaultOrg{}
	}
	return t.PersonalOrg
}

type GetUserSettingByID_UserSetting struct {
	CreatedAt      *time.Time                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DefaultOrg     *GetUserSettingByID_UserSetting_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	DeletedAt      *time.Time                                 "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	DeletedBy      *string                                    "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	EmailConfirmed bool                                       "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	ID             string                                     "json:\"id\" graphql:\"id\""
	IsTfaEnabled   *bool                                      "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	Locked         bool                                       "json:\"locked\" graphql:\"locked\""
	SilencedAt     *time.Time                                 "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                           "json:\"status\" graphql:\"status\""
	Tags           []string                                   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetUserSettingByID_UserSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.CreatedAt
}
func (t *GetUserSettingByID_UserSetting) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.CreatedBy
}
func (t *GetUserSettingByID_UserSetting) GetDefaultOrg() *GetUserSettingByID_UserSetting_DefaultOrg {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.DefaultOrg
}
func (t *GetUserSettingByID_UserSetting) GetDeletedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.DeletedAt
}
func (t *GetUserSettingByID_UserSetting) GetDeletedBy() *string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.DeletedBy
}
func (t *GetUserSettingByID_UserSetting) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.EmailConfirmed
}
func (t *GetUserSettingByID_UserSetting) GetID() string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.ID
}
func (t *GetUserSettingByID_UserSetting) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.IsTfaEnabled
}
func (t *GetUserSettingByID_UserSetting) GetLocked() bool {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.Locked
}
func (t *GetUserSettingByID_UserSetting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.SilencedAt
}
func (t *GetUserSettingByID_UserSetting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return &t.Status
}
func (t *GetUserSettingByID_UserSetting) GetTags() []string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.Tags
}
func (t *GetUserSettingByID_UserSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.UpdatedAt
}
func (t *GetUserSettingByID_UserSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.UpdatedBy
}

type GetUserSettings_UserSettings_Edges_Node_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *GetUserSettings_UserSettings_Edges_Node_DefaultOrg) GetID() string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node_DefaultOrg{}
	}
	return t.ID
}
func (t *GetUserSettings_UserSettings_Edges_Node_DefaultOrg) GetName() string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node_DefaultOrg{}
	}
	return t.Name
}
func (t *GetUserSettings_UserSettings_Edges_Node_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node_DefaultOrg{}
	}
	return t.PersonalOrg
}

type GetUserSettings_UserSettings_Edges_Node struct {
	CreatedAt      *time.Time                                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DefaultOrg     *GetUserSettings_UserSettings_Edges_Node_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	DeletedAt      *time.Time                                          "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	DeletedBy      *string                                             "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	EmailConfirmed bool                                                "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	ID             string                                              "json:\"id\" graphql:\"id\""
	IsTfaEnabled   *bool                                               "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	Locked         bool                                                "json:\"locked\" graphql:\"locked\""
	SilencedAt     *time.Time                                          "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                                    "json:\"status\" graphql:\"status\""
	Tags           []string                                            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetUserSettings_UserSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetDefaultOrg() *GetUserSettings_UserSettings_Edges_Node_DefaultOrg {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.DefaultOrg
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetDeletedAt() *time.Time {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.DeletedAt
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.EmailConfirmed
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.IsTfaEnabled
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetLocked() bool {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.Locked
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.SilencedAt
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return &t.Status
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.Tags
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetUserSettings_UserSettings_Edges struct {
	Node *GetUserSettings_UserSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetUserSettings_UserSettings_Edges) GetNode() *GetUserSettings_UserSettings_Edges_Node {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges{}
	}
	return t.Node
}

type GetUserSettings_UserSettings struct {
	Edges []*GetUserSettings_UserSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetUserSettings_UserSettings) GetEdges() []*GetUserSettings_UserSettings_Edges {
	if t == nil {
		t = &GetUserSettings_UserSettings{}
	}
	return t.Edges
}

type UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg) GetID() string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg{}
	}
	return t.ID
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg) GetName() string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg{}
	}
	return t.Name
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg{}
	}
	return t.PersonalOrg
}

type UpdateUserSetting_UpdateUserSetting_UserSetting struct {
	CreatedAt      *time.Time                                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DefaultOrg     *UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	DeletedAt      *time.Time                                                  "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	DeletedBy      *string                                                     "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	EmailConfirmed bool                                                        "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	ID             string                                                      "json:\"id\" graphql:\"id\""
	IsTfaEnabled   *bool                                                       "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	Locked         bool                                                        "json:\"locked\" graphql:\"locked\""
	SilencedAt     *time.Time                                                  "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                                            "json:\"status\" graphql:\"status\""
	Tags           []string                                                    "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.CreatedAt
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.CreatedBy
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetDefaultOrg() *UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.DefaultOrg
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetDeletedAt() *time.Time {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.DeletedAt
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetDeletedBy() *string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.DeletedBy
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetEmailConfirmed() bool {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.EmailConfirmed
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetID() string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.ID
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.IsTfaEnabled
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetLocked() bool {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.Locked
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.SilencedAt
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return &t.Status
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetTags() []string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.Tags
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.UpdatedAt
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.UpdatedBy
}

type UpdateUserSetting_UpdateUserSetting struct {
	UserSetting UpdateUserSetting_UpdateUserSetting_UserSetting "json:\"userSetting\" graphql:\"userSetting\""
}

func (t *UpdateUserSetting_UpdateUserSetting) GetUserSetting() *UpdateUserSetting_UpdateUserSetting_UserSetting {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting{}
	}
	return &t.UserSetting
}

type GetAllUserSettingHistories_UserSettingHistories_Edges_Node struct {
	CreatedAt         *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed    bool             "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	HistoryTime       time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID                string           "json:\"id\" graphql:\"id\""
	IsTfaEnabled      *bool            "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	IsWebauthnAllowed *bool            "json:\"isWebauthnAllowed,omitempty\" graphql:\"isWebauthnAllowed\""
	Locked            bool             "json:\"locked\" graphql:\"locked\""
	Operation         history.OpType   "json:\"operation\" graphql:\"operation\""
	Ref               *string          "json:\"ref,omitempty\" graphql:\"ref\""
	SilencedAt        *time.Time       "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status            enums.UserStatus "json:\"status\" graphql:\"status\""
	SuspendedAt       *time.Time       "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags              []string         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID            *string          "json:\"userID,omitempty\" graphql:\"userID\""
}

func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.EmailConfirmed
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.IsTfaEnabled
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetIsWebauthnAllowed() *bool {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.IsWebauthnAllowed
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetLocked() bool {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Locked
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.SilencedAt
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.SuspendedAt
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetUserID() *string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UserID
}

type GetAllUserSettingHistories_UserSettingHistories_Edges struct {
	Node *GetAllUserSettingHistories_UserSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllUserSettingHistories_UserSettingHistories_Edges) GetNode() *GetAllUserSettingHistories_UserSettingHistories_Edges_Node {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges{}
	}
	return t.Node
}

type GetAllUserSettingHistories_UserSettingHistories struct {
	Edges []*GetAllUserSettingHistories_UserSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllUserSettingHistories_UserSettingHistories) GetEdges() []*GetAllUserSettingHistories_UserSettingHistories_Edges {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories{}
	}
	return t.Edges
}

type GetUserSettingHistories_UserSettingHistories_Edges_Node struct {
	CreatedAt         *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed    bool             "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	HistoryTime       time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID                string           "json:\"id\" graphql:\"id\""
	IsTfaEnabled      *bool            "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	IsWebauthnAllowed *bool            "json:\"isWebauthnAllowed,omitempty\" graphql:\"isWebauthnAllowed\""
	Locked            bool             "json:\"locked\" graphql:\"locked\""
	Operation         history.OpType   "json:\"operation\" graphql:\"operation\""
	Ref               *string          "json:\"ref,omitempty\" graphql:\"ref\""
	SilencedAt        *time.Time       "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status            enums.UserStatus "json:\"status\" graphql:\"status\""
	SuspendedAt       *time.Time       "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags              []string         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID            *string          "json:\"userID,omitempty\" graphql:\"userID\""
}

func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.EmailConfirmed
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.IsTfaEnabled
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetIsWebauthnAllowed() *bool {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.IsWebauthnAllowed
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetLocked() bool {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Locked
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.SilencedAt
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.SuspendedAt
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetUserID() *string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UserID
}

type GetUserSettingHistories_UserSettingHistories_Edges struct {
	Node *GetUserSettingHistories_UserSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetUserSettingHistories_UserSettingHistories_Edges) GetNode() *GetUserSettingHistories_UserSettingHistories_Edges_Node {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges{}
	}
	return t.Node
}

type GetUserSettingHistories_UserSettingHistories struct {
	Edges []*GetUserSettingHistories_UserSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetUserSettingHistories_UserSettingHistories) GetEdges() []*GetUserSettingHistories_UserSettingHistories_Edges {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories{}
	}
	return t.Edges
}

type CreateBulkCSVActionPlan struct {
	CreateBulkCSVActionPlan CreateBulkCSVActionPlan_CreateBulkCSVActionPlan "json:\"createBulkCSVActionPlan\" graphql:\"createBulkCSVActionPlan\""
}

func (t *CreateBulkCSVActionPlan) GetCreateBulkCSVActionPlan() *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan {
	if t == nil {
		t = &CreateBulkCSVActionPlan{}
	}
	return &t.CreateBulkCSVActionPlan
}

type CreateBulkActionPlan struct {
	CreateBulkActionPlan CreateBulkActionPlan_CreateBulkActionPlan "json:\"createBulkActionPlan\" graphql:\"createBulkActionPlan\""
}

func (t *CreateBulkActionPlan) GetCreateBulkActionPlan() *CreateBulkActionPlan_CreateBulkActionPlan {
	if t == nil {
		t = &CreateBulkActionPlan{}
	}
	return &t.CreateBulkActionPlan
}

type CreateActionPlan struct {
	CreateActionPlan CreateActionPlan_CreateActionPlan "json:\"createActionPlan\" graphql:\"createActionPlan\""
}

func (t *CreateActionPlan) GetCreateActionPlan() *CreateActionPlan_CreateActionPlan {
	if t == nil {
		t = &CreateActionPlan{}
	}
	return &t.CreateActionPlan
}

type DeleteActionPlan struct {
	DeleteActionPlan DeleteActionPlan_DeleteActionPlan "json:\"deleteActionPlan\" graphql:\"deleteActionPlan\""
}

func (t *DeleteActionPlan) GetDeleteActionPlan() *DeleteActionPlan_DeleteActionPlan {
	if t == nil {
		t = &DeleteActionPlan{}
	}
	return &t.DeleteActionPlan
}

type GetAllActionPlans struct {
	ActionPlans GetAllActionPlans_ActionPlans "json:\"actionPlans\" graphql:\"actionPlans\""
}

func (t *GetAllActionPlans) GetActionPlans() *GetAllActionPlans_ActionPlans {
	if t == nil {
		t = &GetAllActionPlans{}
	}
	return &t.ActionPlans
}

type GetActionPlanByID struct {
	ActionPlan GetActionPlanByID_ActionPlan "json:\"actionPlan\" graphql:\"actionPlan\""
}

func (t *GetActionPlanByID) GetActionPlan() *GetActionPlanByID_ActionPlan {
	if t == nil {
		t = &GetActionPlanByID{}
	}
	return &t.ActionPlan
}

type GetActionPlans struct {
	ActionPlans GetActionPlans_ActionPlans "json:\"actionPlans\" graphql:\"actionPlans\""
}

func (t *GetActionPlans) GetActionPlans() *GetActionPlans_ActionPlans {
	if t == nil {
		t = &GetActionPlans{}
	}
	return &t.ActionPlans
}

type UpdateActionPlan struct {
	UpdateActionPlan UpdateActionPlan_UpdateActionPlan "json:\"updateActionPlan\" graphql:\"updateActionPlan\""
}

func (t *UpdateActionPlan) GetUpdateActionPlan() *UpdateActionPlan_UpdateActionPlan {
	if t == nil {
		t = &UpdateActionPlan{}
	}
	return &t.UpdateActionPlan
}

type GetAllActionPlanHistories struct {
	ActionPlanHistories GetAllActionPlanHistories_ActionPlanHistories "json:\"actionPlanHistories\" graphql:\"actionPlanHistories\""
}

func (t *GetAllActionPlanHistories) GetActionPlanHistories() *GetAllActionPlanHistories_ActionPlanHistories {
	if t == nil {
		t = &GetAllActionPlanHistories{}
	}
	return &t.ActionPlanHistories
}

type GetActionPlanHistories struct {
	ActionPlanHistories GetActionPlanHistories_ActionPlanHistories "json:\"actionPlanHistories\" graphql:\"actionPlanHistories\""
}

func (t *GetActionPlanHistories) GetActionPlanHistories() *GetActionPlanHistories_ActionPlanHistories {
	if t == nil {
		t = &GetActionPlanHistories{}
	}
	return &t.ActionPlanHistories
}

type AdminSearch struct {
	AdminSearch *AdminSearch_AdminSearch "json:\"adminSearch,omitempty\" graphql:\"adminSearch\""
}

func (t *AdminSearch) GetAdminSearch() *AdminSearch_AdminSearch {
	if t == nil {
		t = &AdminSearch{}
	}
	return t.AdminSearch
}

type CreateAPIToken struct {
	CreateAPIToken CreateAPIToken_CreateAPIToken "json:\"createAPIToken\" graphql:\"createAPIToken\""
}

func (t *CreateAPIToken) GetCreateAPIToken() *CreateAPIToken_CreateAPIToken {
	if t == nil {
		t = &CreateAPIToken{}
	}
	return &t.CreateAPIToken
}

type DeleteAPIToken struct {
	DeleteAPIToken DeleteAPIToken_DeleteAPIToken "json:\"deleteAPIToken\" graphql:\"deleteAPIToken\""
}

func (t *DeleteAPIToken) GetDeleteAPIToken() *DeleteAPIToken_DeleteAPIToken {
	if t == nil {
		t = &DeleteAPIToken{}
	}
	return &t.DeleteAPIToken
}

type GetAllAPITokens struct {
	APITokens GetAllAPITokens_APITokens "json:\"apiTokens\" graphql:\"apiTokens\""
}

func (t *GetAllAPITokens) GetAPITokens() *GetAllAPITokens_APITokens {
	if t == nil {
		t = &GetAllAPITokens{}
	}
	return &t.APITokens
}

type GetAPITokenByID struct {
	APIToken GetAPITokenByID_APIToken "json:\"apiToken\" graphql:\"apiToken\""
}

func (t *GetAPITokenByID) GetAPIToken() *GetAPITokenByID_APIToken {
	if t == nil {
		t = &GetAPITokenByID{}
	}
	return &t.APIToken
}

type GetAPITokens struct {
	APITokens GetAPITokens_APITokens "json:\"apiTokens\" graphql:\"apiTokens\""
}

func (t *GetAPITokens) GetAPITokens() *GetAPITokens_APITokens {
	if t == nil {
		t = &GetAPITokens{}
	}
	return &t.APITokens
}

type UpdateAPIToken struct {
	UpdateAPIToken UpdateAPIToken_UpdateAPIToken "json:\"updateAPIToken\" graphql:\"updateAPIToken\""
}

func (t *UpdateAPIToken) GetUpdateAPIToken() *UpdateAPIToken_UpdateAPIToken {
	if t == nil {
		t = &UpdateAPIToken{}
	}
	return &t.UpdateAPIToken
}

type CreateBulkContact struct {
	CreateBulkContact CreateBulkContact_CreateBulkContact "json:\"createBulkContact\" graphql:\"createBulkContact\""
}

func (t *CreateBulkContact) GetCreateBulkContact() *CreateBulkContact_CreateBulkContact {
	if t == nil {
		t = &CreateBulkContact{}
	}
	return &t.CreateBulkContact
}

type CreateBulkCSVContact struct {
	CreateBulkCSVContact CreateBulkCSVContact_CreateBulkCSVContact "json:\"createBulkCSVContact\" graphql:\"createBulkCSVContact\""
}

func (t *CreateBulkCSVContact) GetCreateBulkCSVContact() *CreateBulkCSVContact_CreateBulkCSVContact {
	if t == nil {
		t = &CreateBulkCSVContact{}
	}
	return &t.CreateBulkCSVContact
}

type CreateContact struct {
	CreateContact CreateContact_CreateContact "json:\"createContact\" graphql:\"createContact\""
}

func (t *CreateContact) GetCreateContact() *CreateContact_CreateContact {
	if t == nil {
		t = &CreateContact{}
	}
	return &t.CreateContact
}

type DeleteContact struct {
	DeleteContact DeleteContact_DeleteContact "json:\"deleteContact\" graphql:\"deleteContact\""
}

func (t *DeleteContact) GetDeleteContact() *DeleteContact_DeleteContact {
	if t == nil {
		t = &DeleteContact{}
	}
	return &t.DeleteContact
}

type GetAllContacts struct {
	Contacts GetAllContacts_Contacts "json:\"contacts\" graphql:\"contacts\""
}

func (t *GetAllContacts) GetContacts() *GetAllContacts_Contacts {
	if t == nil {
		t = &GetAllContacts{}
	}
	return &t.Contacts
}

type GetContactByID struct {
	Contact GetContactByID_Contact "json:\"contact\" graphql:\"contact\""
}

func (t *GetContactByID) GetContact() *GetContactByID_Contact {
	if t == nil {
		t = &GetContactByID{}
	}
	return &t.Contact
}

type GetContacts struct {
	Contacts GetContacts_Contacts "json:\"contacts\" graphql:\"contacts\""
}

func (t *GetContacts) GetContacts() *GetContacts_Contacts {
	if t == nil {
		t = &GetContacts{}
	}
	return &t.Contacts
}

type UpdateContact struct {
	UpdateContact UpdateContact_UpdateContact "json:\"updateContact\" graphql:\"updateContact\""
}

func (t *UpdateContact) GetUpdateContact() *UpdateContact_UpdateContact {
	if t == nil {
		t = &UpdateContact{}
	}
	return &t.UpdateContact
}

type GetAllContactHistories struct {
	ContactHistories GetAllContactHistories_ContactHistories "json:\"contactHistories\" graphql:\"contactHistories\""
}

func (t *GetAllContactHistories) GetContactHistories() *GetAllContactHistories_ContactHistories {
	if t == nil {
		t = &GetAllContactHistories{}
	}
	return &t.ContactHistories
}

type GetContactHistories struct {
	ContactHistories GetContactHistories_ContactHistories "json:\"contactHistories\" graphql:\"contactHistories\""
}

func (t *GetContactHistories) GetContactHistories() *GetContactHistories_ContactHistories {
	if t == nil {
		t = &GetContactHistories{}
	}
	return &t.ContactHistories
}

type CreateBulkControl struct {
	CreateBulkControl CreateBulkControl_CreateBulkControl "json:\"createBulkControl\" graphql:\"createBulkControl\""
}

func (t *CreateBulkControl) GetCreateBulkControl() *CreateBulkControl_CreateBulkControl {
	if t == nil {
		t = &CreateBulkControl{}
	}
	return &t.CreateBulkControl
}

type CreateBulkCSVControl struct {
	CreateBulkCSVControl CreateBulkCSVControl_CreateBulkCSVControl "json:\"createBulkCSVControl\" graphql:\"createBulkCSVControl\""
}

func (t *CreateBulkCSVControl) GetCreateBulkCSVControl() *CreateBulkCSVControl_CreateBulkCSVControl {
	if t == nil {
		t = &CreateBulkCSVControl{}
	}
	return &t.CreateBulkCSVControl
}

type CreateControl struct {
	CreateControl CreateControl_CreateControl "json:\"createControl\" graphql:\"createControl\""
}

func (t *CreateControl) GetCreateControl() *CreateControl_CreateControl {
	if t == nil {
		t = &CreateControl{}
	}
	return &t.CreateControl
}

type DeleteControl struct {
	DeleteControl DeleteControl_DeleteControl "json:\"deleteControl\" graphql:\"deleteControl\""
}

func (t *DeleteControl) GetDeleteControl() *DeleteControl_DeleteControl {
	if t == nil {
		t = &DeleteControl{}
	}
	return &t.DeleteControl
}

type GetAllControls struct {
	Controls GetAllControls_Controls "json:\"controls\" graphql:\"controls\""
}

func (t *GetAllControls) GetControls() *GetAllControls_Controls {
	if t == nil {
		t = &GetAllControls{}
	}
	return &t.Controls
}

type GetControlByID struct {
	Control GetControlByID_Control "json:\"control\" graphql:\"control\""
}

func (t *GetControlByID) GetControl() *GetControlByID_Control {
	if t == nil {
		t = &GetControlByID{}
	}
	return &t.Control
}

type GetControls struct {
	Controls GetControls_Controls "json:\"controls\" graphql:\"controls\""
}

func (t *GetControls) GetControls() *GetControls_Controls {
	if t == nil {
		t = &GetControls{}
	}
	return &t.Controls
}

type UpdateControl struct {
	UpdateControl UpdateControl_UpdateControl "json:\"updateControl\" graphql:\"updateControl\""
}

func (t *UpdateControl) GetUpdateControl() *UpdateControl_UpdateControl {
	if t == nil {
		t = &UpdateControl{}
	}
	return &t.UpdateControl
}

type CreateControlsByClone struct {
	CreateControlsByClone CreateControlsByClone_CreateControlsByClone "json:\"createControlsByClone\" graphql:\"createControlsByClone\""
}

func (t *CreateControlsByClone) GetCreateControlsByClone() *CreateControlsByClone_CreateControlsByClone {
	if t == nil {
		t = &CreateControlsByClone{}
	}
	return &t.CreateControlsByClone
}

type GetAllControlHistories struct {
	ControlHistories GetAllControlHistories_ControlHistories "json:\"controlHistories\" graphql:\"controlHistories\""
}

func (t *GetAllControlHistories) GetControlHistories() *GetAllControlHistories_ControlHistories {
	if t == nil {
		t = &GetAllControlHistories{}
	}
	return &t.ControlHistories
}

type GetControlHistories struct {
	ControlHistories GetControlHistories_ControlHistories "json:\"controlHistories\" graphql:\"controlHistories\""
}

func (t *GetControlHistories) GetControlHistories() *GetControlHistories_ControlHistories {
	if t == nil {
		t = &GetControlHistories{}
	}
	return &t.ControlHistories
}

type CreateBulkControlImplementation struct {
	CreateBulkControlImplementation CreateBulkControlImplementation_CreateBulkControlImplementation "json:\"createBulkControlImplementation\" graphql:\"createBulkControlImplementation\""
}

func (t *CreateBulkControlImplementation) GetCreateBulkControlImplementation() *CreateBulkControlImplementation_CreateBulkControlImplementation {
	if t == nil {
		t = &CreateBulkControlImplementation{}
	}
	return &t.CreateBulkControlImplementation
}

type CreateBulkCSVControlImplementation struct {
	CreateBulkCSVControlImplementation CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation "json:\"createBulkCSVControlImplementation\" graphql:\"createBulkCSVControlImplementation\""
}

func (t *CreateBulkCSVControlImplementation) GetCreateBulkCSVControlImplementation() *CreateBulkCSVControlImplementation_CreateBulkCSVControlImplementation {
	if t == nil {
		t = &CreateBulkCSVControlImplementation{}
	}
	return &t.CreateBulkCSVControlImplementation
}

type CreateControlImplementation struct {
	CreateControlImplementation CreateControlImplementation_CreateControlImplementation "json:\"createControlImplementation\" graphql:\"createControlImplementation\""
}

func (t *CreateControlImplementation) GetCreateControlImplementation() *CreateControlImplementation_CreateControlImplementation {
	if t == nil {
		t = &CreateControlImplementation{}
	}
	return &t.CreateControlImplementation
}

type DeleteControlImplementation struct {
	DeleteControlImplementation DeleteControlImplementation_DeleteControlImplementation "json:\"deleteControlImplementation\" graphql:\"deleteControlImplementation\""
}

func (t *DeleteControlImplementation) GetDeleteControlImplementation() *DeleteControlImplementation_DeleteControlImplementation {
	if t == nil {
		t = &DeleteControlImplementation{}
	}
	return &t.DeleteControlImplementation
}

type GetAllControlImplementations struct {
	ControlImplementations GetAllControlImplementations_ControlImplementations "json:\"controlImplementations\" graphql:\"controlImplementations\""
}

func (t *GetAllControlImplementations) GetControlImplementations() *GetAllControlImplementations_ControlImplementations {
	if t == nil {
		t = &GetAllControlImplementations{}
	}
	return &t.ControlImplementations
}

type GetControlImplementationByID struct {
	ControlImplementation GetControlImplementationByID_ControlImplementation "json:\"controlImplementation\" graphql:\"controlImplementation\""
}

func (t *GetControlImplementationByID) GetControlImplementation() *GetControlImplementationByID_ControlImplementation {
	if t == nil {
		t = &GetControlImplementationByID{}
	}
	return &t.ControlImplementation
}

type GetControlImplementations struct {
	ControlImplementations GetControlImplementations_ControlImplementations "json:\"controlImplementations\" graphql:\"controlImplementations\""
}

func (t *GetControlImplementations) GetControlImplementations() *GetControlImplementations_ControlImplementations {
	if t == nil {
		t = &GetControlImplementations{}
	}
	return &t.ControlImplementations
}

type UpdateControlImplementation struct {
	UpdateControlImplementation UpdateControlImplementation_UpdateControlImplementation "json:\"updateControlImplementation\" graphql:\"updateControlImplementation\""
}

func (t *UpdateControlImplementation) GetUpdateControlImplementation() *UpdateControlImplementation_UpdateControlImplementation {
	if t == nil {
		t = &UpdateControlImplementation{}
	}
	return &t.UpdateControlImplementation
}

type GetAllControlImplementationHistories struct {
	ControlImplementationHistories GetAllControlImplementationHistories_ControlImplementationHistories "json:\"controlImplementationHistories\" graphql:\"controlImplementationHistories\""
}

func (t *GetAllControlImplementationHistories) GetControlImplementationHistories() *GetAllControlImplementationHistories_ControlImplementationHistories {
	if t == nil {
		t = &GetAllControlImplementationHistories{}
	}
	return &t.ControlImplementationHistories
}

type GetControlImplementationHistories struct {
	ControlImplementationHistories GetControlImplementationHistories_ControlImplementationHistories "json:\"controlImplementationHistories\" graphql:\"controlImplementationHistories\""
}

func (t *GetControlImplementationHistories) GetControlImplementationHistories() *GetControlImplementationHistories_ControlImplementationHistories {
	if t == nil {
		t = &GetControlImplementationHistories{}
	}
	return &t.ControlImplementationHistories
}

type CreateBulkCSVControlObjective struct {
	CreateBulkCSVControlObjective CreateBulkCSVControlObjective_CreateBulkCSVControlObjective "json:\"createBulkCSVControlObjective\" graphql:\"createBulkCSVControlObjective\""
}

func (t *CreateBulkCSVControlObjective) GetCreateBulkCSVControlObjective() *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective {
	if t == nil {
		t = &CreateBulkCSVControlObjective{}
	}
	return &t.CreateBulkCSVControlObjective
}

type CreateBulkControlObjective struct {
	CreateBulkControlObjective CreateBulkControlObjective_CreateBulkControlObjective "json:\"createBulkControlObjective\" graphql:\"createBulkControlObjective\""
}

func (t *CreateBulkControlObjective) GetCreateBulkControlObjective() *CreateBulkControlObjective_CreateBulkControlObjective {
	if t == nil {
		t = &CreateBulkControlObjective{}
	}
	return &t.CreateBulkControlObjective
}

type CreateControlObjective struct {
	CreateControlObjective CreateControlObjective_CreateControlObjective "json:\"createControlObjective\" graphql:\"createControlObjective\""
}

func (t *CreateControlObjective) GetCreateControlObjective() *CreateControlObjective_CreateControlObjective {
	if t == nil {
		t = &CreateControlObjective{}
	}
	return &t.CreateControlObjective
}

type DeleteControlObjective struct {
	DeleteControlObjective DeleteControlObjective_DeleteControlObjective "json:\"deleteControlObjective\" graphql:\"deleteControlObjective\""
}

func (t *DeleteControlObjective) GetDeleteControlObjective() *DeleteControlObjective_DeleteControlObjective {
	if t == nil {
		t = &DeleteControlObjective{}
	}
	return &t.DeleteControlObjective
}

type GetAllControlObjectives struct {
	ControlObjectives GetAllControlObjectives_ControlObjectives "json:\"controlObjectives\" graphql:\"controlObjectives\""
}

func (t *GetAllControlObjectives) GetControlObjectives() *GetAllControlObjectives_ControlObjectives {
	if t == nil {
		t = &GetAllControlObjectives{}
	}
	return &t.ControlObjectives
}

type GetControlObjectiveByID struct {
	ControlObjective GetControlObjectiveByID_ControlObjective "json:\"controlObjective\" graphql:\"controlObjective\""
}

func (t *GetControlObjectiveByID) GetControlObjective() *GetControlObjectiveByID_ControlObjective {
	if t == nil {
		t = &GetControlObjectiveByID{}
	}
	return &t.ControlObjective
}

type GetControlObjectives struct {
	ControlObjectives GetControlObjectives_ControlObjectives "json:\"controlObjectives\" graphql:\"controlObjectives\""
}

func (t *GetControlObjectives) GetControlObjectives() *GetControlObjectives_ControlObjectives {
	if t == nil {
		t = &GetControlObjectives{}
	}
	return &t.ControlObjectives
}

type UpdateControlObjective struct {
	UpdateControlObjective UpdateControlObjective_UpdateControlObjective "json:\"updateControlObjective\" graphql:\"updateControlObjective\""
}

func (t *UpdateControlObjective) GetUpdateControlObjective() *UpdateControlObjective_UpdateControlObjective {
	if t == nil {
		t = &UpdateControlObjective{}
	}
	return &t.UpdateControlObjective
}

type GetAllControlObjectiveHistories struct {
	ControlObjectiveHistories GetAllControlObjectiveHistories_ControlObjectiveHistories "json:\"controlObjectiveHistories\" graphql:\"controlObjectiveHistories\""
}

func (t *GetAllControlObjectiveHistories) GetControlObjectiveHistories() *GetAllControlObjectiveHistories_ControlObjectiveHistories {
	if t == nil {
		t = &GetAllControlObjectiveHistories{}
	}
	return &t.ControlObjectiveHistories
}

type GetControlObjectiveHistories struct {
	ControlObjectiveHistories GetControlObjectiveHistories_ControlObjectiveHistories "json:\"controlObjectiveHistories\" graphql:\"controlObjectiveHistories\""
}

func (t *GetControlObjectiveHistories) GetControlObjectiveHistories() *GetControlObjectiveHistories_ControlObjectiveHistories {
	if t == nil {
		t = &GetControlObjectiveHistories{}
	}
	return &t.ControlObjectiveHistories
}

type CreateDocumentData struct {
	CreateDocumentData CreateDocumentData_CreateDocumentData "json:\"createDocumentData\" graphql:\"createDocumentData\""
}

func (t *CreateDocumentData) GetCreateDocumentData() *CreateDocumentData_CreateDocumentData {
	if t == nil {
		t = &CreateDocumentData{}
	}
	return &t.CreateDocumentData
}

type DeleteDocumentData struct {
	DeleteDocumentData DeleteDocumentData_DeleteDocumentData "json:\"deleteDocumentData\" graphql:\"deleteDocumentData\""
}

func (t *DeleteDocumentData) GetDeleteDocumentData() *DeleteDocumentData_DeleteDocumentData {
	if t == nil {
		t = &DeleteDocumentData{}
	}
	return &t.DeleteDocumentData
}

type GetDocumentDataByID struct {
	DocumentData GetDocumentDataByID_DocumentData "json:\"documentData\" graphql:\"documentData\""
}

func (t *GetDocumentDataByID) GetDocumentData() *GetDocumentDataByID_DocumentData {
	if t == nil {
		t = &GetDocumentDataByID{}
	}
	return &t.DocumentData
}

type UpdateDocumentData struct {
	UpdateDocumentData UpdateDocumentData_UpdateDocumentData "json:\"updateDocumentData\" graphql:\"updateDocumentData\""
}

func (t *UpdateDocumentData) GetUpdateDocumentData() *UpdateDocumentData_UpdateDocumentData {
	if t == nil {
		t = &UpdateDocumentData{}
	}
	return &t.UpdateDocumentData
}

type GetAllDocumentDataHistories struct {
	DocumentDataHistories GetAllDocumentDataHistories_DocumentDataHistories "json:\"documentDataHistories\" graphql:\"documentDataHistories\""
}

func (t *GetAllDocumentDataHistories) GetDocumentDataHistories() *GetAllDocumentDataHistories_DocumentDataHistories {
	if t == nil {
		t = &GetAllDocumentDataHistories{}
	}
	return &t.DocumentDataHistories
}

type GetDocumentDataHistories struct {
	DocumentDataHistories GetDocumentDataHistories_DocumentDataHistories "json:\"documentDataHistories\" graphql:\"documentDataHistories\""
}

func (t *GetDocumentDataHistories) GetDocumentDataHistories() *GetDocumentDataHistories_DocumentDataHistories {
	if t == nil {
		t = &GetDocumentDataHistories{}
	}
	return &t.DocumentDataHistories
}

type CreateBulkCSVEntity struct {
	CreateBulkCSVEntity CreateBulkCSVEntity_CreateBulkCSVEntity "json:\"createBulkCSVEntity\" graphql:\"createBulkCSVEntity\""
}

func (t *CreateBulkCSVEntity) GetCreateBulkCSVEntity() *CreateBulkCSVEntity_CreateBulkCSVEntity {
	if t == nil {
		t = &CreateBulkCSVEntity{}
	}
	return &t.CreateBulkCSVEntity
}

type CreateBulkEntity struct {
	CreateBulkEntity CreateBulkEntity_CreateBulkEntity "json:\"createBulkEntity\" graphql:\"createBulkEntity\""
}

func (t *CreateBulkEntity) GetCreateBulkEntity() *CreateBulkEntity_CreateBulkEntity {
	if t == nil {
		t = &CreateBulkEntity{}
	}
	return &t.CreateBulkEntity
}

type CreateEntity struct {
	CreateEntity CreateEntity_CreateEntity "json:\"createEntity\" graphql:\"createEntity\""
}

func (t *CreateEntity) GetCreateEntity() *CreateEntity_CreateEntity {
	if t == nil {
		t = &CreateEntity{}
	}
	return &t.CreateEntity
}

type DeleteEntity struct {
	DeleteEntity DeleteEntity_DeleteEntity "json:\"deleteEntity\" graphql:\"deleteEntity\""
}

func (t *DeleteEntity) GetDeleteEntity() *DeleteEntity_DeleteEntity {
	if t == nil {
		t = &DeleteEntity{}
	}
	return &t.DeleteEntity
}

type GetAllEntities struct {
	Entities GetAllEntities_Entities "json:\"entities\" graphql:\"entities\""
}

func (t *GetAllEntities) GetEntities() *GetAllEntities_Entities {
	if t == nil {
		t = &GetAllEntities{}
	}
	return &t.Entities
}

type GetEntities struct {
	Entities GetEntities_Entities "json:\"entities\" graphql:\"entities\""
}

func (t *GetEntities) GetEntities() *GetEntities_Entities {
	if t == nil {
		t = &GetEntities{}
	}
	return &t.Entities
}

type GetEntityByID struct {
	Entity GetEntityByID_Entity "json:\"entity\" graphql:\"entity\""
}

func (t *GetEntityByID) GetEntity() *GetEntityByID_Entity {
	if t == nil {
		t = &GetEntityByID{}
	}
	return &t.Entity
}

type UpdateEntity struct {
	UpdateEntity UpdateEntity_UpdateEntity "json:\"updateEntity\" graphql:\"updateEntity\""
}

func (t *UpdateEntity) GetUpdateEntity() *UpdateEntity_UpdateEntity {
	if t == nil {
		t = &UpdateEntity{}
	}
	return &t.UpdateEntity
}

type GetAllEntityHistories struct {
	EntityHistories GetAllEntityHistories_EntityHistories "json:\"entityHistories\" graphql:\"entityHistories\""
}

func (t *GetAllEntityHistories) GetEntityHistories() *GetAllEntityHistories_EntityHistories {
	if t == nil {
		t = &GetAllEntityHistories{}
	}
	return &t.EntityHistories
}

type GetEntityHistories struct {
	EntityHistories GetEntityHistories_EntityHistories "json:\"entityHistories\" graphql:\"entityHistories\""
}

func (t *GetEntityHistories) GetEntityHistories() *GetEntityHistories_EntityHistories {
	if t == nil {
		t = &GetEntityHistories{}
	}
	return &t.EntityHistories
}

type CreateBulkCSVEntityType struct {
	CreateBulkCSVEntityType CreateBulkCSVEntityType_CreateBulkCSVEntityType "json:\"createBulkCSVEntityType\" graphql:\"createBulkCSVEntityType\""
}

func (t *CreateBulkCSVEntityType) GetCreateBulkCSVEntityType() *CreateBulkCSVEntityType_CreateBulkCSVEntityType {
	if t == nil {
		t = &CreateBulkCSVEntityType{}
	}
	return &t.CreateBulkCSVEntityType
}

type CreateBulkEntityType struct {
	CreateBulkEntityType CreateBulkEntityType_CreateBulkEntityType "json:\"createBulkEntityType\" graphql:\"createBulkEntityType\""
}

func (t *CreateBulkEntityType) GetCreateBulkEntityType() *CreateBulkEntityType_CreateBulkEntityType {
	if t == nil {
		t = &CreateBulkEntityType{}
	}
	return &t.CreateBulkEntityType
}

type CreateEntityType struct {
	CreateEntityType CreateEntityType_CreateEntityType "json:\"createEntityType\" graphql:\"createEntityType\""
}

func (t *CreateEntityType) GetCreateEntityType() *CreateEntityType_CreateEntityType {
	if t == nil {
		t = &CreateEntityType{}
	}
	return &t.CreateEntityType
}

type DeleteEntityType struct {
	DeleteEntityType DeleteEntityType_DeleteEntityType "json:\"deleteEntityType\" graphql:\"deleteEntityType\""
}

func (t *DeleteEntityType) GetDeleteEntityType() *DeleteEntityType_DeleteEntityType {
	if t == nil {
		t = &DeleteEntityType{}
	}
	return &t.DeleteEntityType
}

type GetAllEntityTypes struct {
	EntityTypes GetAllEntityTypes_EntityTypes "json:\"entityTypes\" graphql:\"entityTypes\""
}

func (t *GetAllEntityTypes) GetEntityTypes() *GetAllEntityTypes_EntityTypes {
	if t == nil {
		t = &GetAllEntityTypes{}
	}
	return &t.EntityTypes
}

type GetEntityTypeByID struct {
	EntityType GetEntityTypeByID_EntityType "json:\"entityType\" graphql:\"entityType\""
}

func (t *GetEntityTypeByID) GetEntityType() *GetEntityTypeByID_EntityType {
	if t == nil {
		t = &GetEntityTypeByID{}
	}
	return &t.EntityType
}

type GetEntityTypes struct {
	EntityTypes GetEntityTypes_EntityTypes "json:\"entityTypes\" graphql:\"entityTypes\""
}

func (t *GetEntityTypes) GetEntityTypes() *GetEntityTypes_EntityTypes {
	if t == nil {
		t = &GetEntityTypes{}
	}
	return &t.EntityTypes
}

type UpdateEntityType struct {
	UpdateEntityType UpdateEntityType_UpdateEntityType "json:\"updateEntityType\" graphql:\"updateEntityType\""
}

func (t *UpdateEntityType) GetUpdateEntityType() *UpdateEntityType_UpdateEntityType {
	if t == nil {
		t = &UpdateEntityType{}
	}
	return &t.UpdateEntityType
}

type GetAllEntityTypeHistories struct {
	EntityTypeHistories GetAllEntityTypeHistories_EntityTypeHistories "json:\"entityTypeHistories\" graphql:\"entityTypeHistories\""
}

func (t *GetAllEntityTypeHistories) GetEntityTypeHistories() *GetAllEntityTypeHistories_EntityTypeHistories {
	if t == nil {
		t = &GetAllEntityTypeHistories{}
	}
	return &t.EntityTypeHistories
}

type GetEntityTypeHistories struct {
	EntityTypeHistories GetEntityTypeHistories_EntityTypeHistories "json:\"entityTypeHistories\" graphql:\"entityTypeHistories\""
}

func (t *GetEntityTypeHistories) GetEntityTypeHistories() *GetEntityTypeHistories_EntityTypeHistories {
	if t == nil {
		t = &GetEntityTypeHistories{}
	}
	return &t.EntityTypeHistories
}

type CreateBulkCSVEvent struct {
	CreateBulkCSVEvent CreateBulkCSVEvent_CreateBulkCSVEvent "json:\"createBulkCSVEvent\" graphql:\"createBulkCSVEvent\""
}

func (t *CreateBulkCSVEvent) GetCreateBulkCSVEvent() *CreateBulkCSVEvent_CreateBulkCSVEvent {
	if t == nil {
		t = &CreateBulkCSVEvent{}
	}
	return &t.CreateBulkCSVEvent
}

type CreateBulkEvent struct {
	CreateBulkEvent CreateBulkEvent_CreateBulkEvent "json:\"createBulkEvent\" graphql:\"createBulkEvent\""
}

func (t *CreateBulkEvent) GetCreateBulkEvent() *CreateBulkEvent_CreateBulkEvent {
	if t == nil {
		t = &CreateBulkEvent{}
	}
	return &t.CreateBulkEvent
}

type CreateEvent struct {
	CreateEvent CreateEvent_CreateEvent "json:\"createEvent\" graphql:\"createEvent\""
}

func (t *CreateEvent) GetCreateEvent() *CreateEvent_CreateEvent {
	if t == nil {
		t = &CreateEvent{}
	}
	return &t.CreateEvent
}

type DeleteEvent struct {
	DeleteEvent DeleteEvent_DeleteEvent "json:\"deleteEvent\" graphql:\"deleteEvent\""
}

func (t *DeleteEvent) GetDeleteEvent() *DeleteEvent_DeleteEvent {
	if t == nil {
		t = &DeleteEvent{}
	}
	return &t.DeleteEvent
}

type GetAllEvents struct {
	Events GetAllEvents_Events "json:\"events\" graphql:\"events\""
}

func (t *GetAllEvents) GetEvents() *GetAllEvents_Events {
	if t == nil {
		t = &GetAllEvents{}
	}
	return &t.Events
}

type GetEventByID struct {
	Event GetEventByID_Event "json:\"event\" graphql:\"event\""
}

func (t *GetEventByID) GetEvent() *GetEventByID_Event {
	if t == nil {
		t = &GetEventByID{}
	}
	return &t.Event
}

type GetEvents struct {
	Events GetEvents_Events "json:\"events\" graphql:\"events\""
}

func (t *GetEvents) GetEvents() *GetEvents_Events {
	if t == nil {
		t = &GetEvents{}
	}
	return &t.Events
}

type UpdateEvent struct {
	UpdateEvent UpdateEvent_UpdateEvent "json:\"updateEvent\" graphql:\"updateEvent\""
}

func (t *UpdateEvent) GetUpdateEvent() *UpdateEvent_UpdateEvent {
	if t == nil {
		t = &UpdateEvent{}
	}
	return &t.UpdateEvent
}

type GetAllEventHistories struct {
	EventHistories GetAllEventHistories_EventHistories "json:\"eventHistories\" graphql:\"eventHistories\""
}

func (t *GetAllEventHistories) GetEventHistories() *GetAllEventHistories_EventHistories {
	if t == nil {
		t = &GetAllEventHistories{}
	}
	return &t.EventHistories
}

type GetEventHistories struct {
	EventHistories GetEventHistories_EventHistories "json:\"eventHistories\" graphql:\"eventHistories\""
}

func (t *GetEventHistories) GetEventHistories() *GetEventHistories_EventHistories {
	if t == nil {
		t = &GetEventHistories{}
	}
	return &t.EventHistories
}

type CreateEvidence struct {
	CreateEvidence CreateEvidence_CreateEvidence "json:\"createEvidence\" graphql:\"createEvidence\""
}

func (t *CreateEvidence) GetCreateEvidence() *CreateEvidence_CreateEvidence {
	if t == nil {
		t = &CreateEvidence{}
	}
	return &t.CreateEvidence
}

type DeleteEvidence struct {
	DeleteEvidence DeleteEvidence_DeleteEvidence "json:\"deleteEvidence\" graphql:\"deleteEvidence\""
}

func (t *DeleteEvidence) GetDeleteEvidence() *DeleteEvidence_DeleteEvidence {
	if t == nil {
		t = &DeleteEvidence{}
	}
	return &t.DeleteEvidence
}

type GetAllEvidences struct {
	Evidences GetAllEvidences_Evidences "json:\"evidences\" graphql:\"evidences\""
}

func (t *GetAllEvidences) GetEvidences() *GetAllEvidences_Evidences {
	if t == nil {
		t = &GetAllEvidences{}
	}
	return &t.Evidences
}

type GetEvidenceByID struct {
	Evidence GetEvidenceByID_Evidence "json:\"evidence\" graphql:\"evidence\""
}

func (t *GetEvidenceByID) GetEvidence() *GetEvidenceByID_Evidence {
	if t == nil {
		t = &GetEvidenceByID{}
	}
	return &t.Evidence
}

type GetEvidences struct {
	Evidences GetEvidences_Evidences "json:\"evidences\" graphql:\"evidences\""
}

func (t *GetEvidences) GetEvidences() *GetEvidences_Evidences {
	if t == nil {
		t = &GetEvidences{}
	}
	return &t.Evidences
}

type UpdateEvidence struct {
	UpdateEvidence UpdateEvidence_UpdateEvidence "json:\"updateEvidence\" graphql:\"updateEvidence\""
}

func (t *UpdateEvidence) GetUpdateEvidence() *UpdateEvidence_UpdateEvidence {
	if t == nil {
		t = &UpdateEvidence{}
	}
	return &t.UpdateEvidence
}

type GetAllEvidenceHistories struct {
	EvidenceHistories GetAllEvidenceHistories_EvidenceHistories "json:\"evidenceHistories\" graphql:\"evidenceHistories\""
}

func (t *GetAllEvidenceHistories) GetEvidenceHistories() *GetAllEvidenceHistories_EvidenceHistories {
	if t == nil {
		t = &GetAllEvidenceHistories{}
	}
	return &t.EvidenceHistories
}

type GetEvidenceHistories struct {
	EvidenceHistories GetEvidenceHistories_EvidenceHistories "json:\"evidenceHistories\" graphql:\"evidenceHistories\""
}

func (t *GetEvidenceHistories) GetEvidenceHistories() *GetEvidenceHistories_EvidenceHistories {
	if t == nil {
		t = &GetEvidenceHistories{}
	}
	return &t.EvidenceHistories
}

type DeleteFile struct {
	DeleteFile DeleteFile_DeleteFile "json:\"deleteFile\" graphql:\"deleteFile\""
}

func (t *DeleteFile) GetDeleteFile() *DeleteFile_DeleteFile {
	if t == nil {
		t = &DeleteFile{}
	}
	return &t.DeleteFile
}

type GetAllFiles struct {
	Files GetAllFiles_Files "json:\"files\" graphql:\"files\""
}

func (t *GetAllFiles) GetFiles() *GetAllFiles_Files {
	if t == nil {
		t = &GetAllFiles{}
	}
	return &t.Files
}

type GetFileByID struct {
	File GetFileByID_File "json:\"file\" graphql:\"file\""
}

func (t *GetFileByID) GetFile() *GetFileByID_File {
	if t == nil {
		t = &GetFileByID{}
	}
	return &t.File
}

type GetFiles struct {
	Files GetFiles_Files "json:\"files\" graphql:\"files\""
}

func (t *GetFiles) GetFiles() *GetFiles_Files {
	if t == nil {
		t = &GetFiles{}
	}
	return &t.Files
}

type GetAllFileHistories struct {
	FileHistories GetAllFileHistories_FileHistories "json:\"fileHistories\" graphql:\"fileHistories\""
}

func (t *GetAllFileHistories) GetFileHistories() *GetAllFileHistories_FileHistories {
	if t == nil {
		t = &GetAllFileHistories{}
	}
	return &t.FileHistories
}

type GetFileHistories struct {
	FileHistories GetFileHistories_FileHistories "json:\"fileHistories\" graphql:\"fileHistories\""
}

func (t *GetFileHistories) GetFileHistories() *GetFileHistories_FileHistories {
	if t == nil {
		t = &GetFileHistories{}
	}
	return &t.FileHistories
}

type CreateBulkCSVGroup struct {
	CreateBulkCSVGroup CreateBulkCSVGroup_CreateBulkCSVGroup "json:\"createBulkCSVGroup\" graphql:\"createBulkCSVGroup\""
}

func (t *CreateBulkCSVGroup) GetCreateBulkCSVGroup() *CreateBulkCSVGroup_CreateBulkCSVGroup {
	if t == nil {
		t = &CreateBulkCSVGroup{}
	}
	return &t.CreateBulkCSVGroup
}

type CreateBulkGroup struct {
	CreateBulkGroup CreateBulkGroup_CreateBulkGroup "json:\"createBulkGroup\" graphql:\"createBulkGroup\""
}

func (t *CreateBulkGroup) GetCreateBulkGroup() *CreateBulkGroup_CreateBulkGroup {
	if t == nil {
		t = &CreateBulkGroup{}
	}
	return &t.CreateBulkGroup
}

type CreateGroup struct {
	CreateGroup CreateGroup_CreateGroup "json:\"createGroup\" graphql:\"createGroup\""
}

func (t *CreateGroup) GetCreateGroup() *CreateGroup_CreateGroup {
	if t == nil {
		t = &CreateGroup{}
	}
	return &t.CreateGroup
}

type CreateGroupByClone struct {
	CreateGroupByClone CreateGroupByClone_CreateGroupByClone "json:\"createGroupByClone\" graphql:\"createGroupByClone\""
}

func (t *CreateGroupByClone) GetCreateGroupByClone() *CreateGroupByClone_CreateGroupByClone {
	if t == nil {
		t = &CreateGroupByClone{}
	}
	return &t.CreateGroupByClone
}

type CreateGroupWithMembers struct {
	CreateGroupWithMembers CreateGroupWithMembers_CreateGroupWithMembers "json:\"createGroupWithMembers\" graphql:\"createGroupWithMembers\""
}

func (t *CreateGroupWithMembers) GetCreateGroupWithMembers() *CreateGroupWithMembers_CreateGroupWithMembers {
	if t == nil {
		t = &CreateGroupWithMembers{}
	}
	return &t.CreateGroupWithMembers
}

type DeleteGroup struct {
	DeleteGroup DeleteGroup_DeleteGroup "json:\"deleteGroup\" graphql:\"deleteGroup\""
}

func (t *DeleteGroup) GetDeleteGroup() *DeleteGroup_DeleteGroup {
	if t == nil {
		t = &DeleteGroup{}
	}
	return &t.DeleteGroup
}

type GetAllGroups struct {
	Groups GetAllGroups_Groups "json:\"groups\" graphql:\"groups\""
}

func (t *GetAllGroups) GetGroups() *GetAllGroups_Groups {
	if t == nil {
		t = &GetAllGroups{}
	}
	return &t.Groups
}

type GetGroupByID struct {
	Group GetGroupByID_Group "json:\"group\" graphql:\"group\""
}

func (t *GetGroupByID) GetGroup() *GetGroupByID_Group {
	if t == nil {
		t = &GetGroupByID{}
	}
	return &t.Group
}

type GetGroups struct {
	Groups GetGroups_Groups "json:\"groups\" graphql:\"groups\""
}

func (t *GetGroups) GetGroups() *GetGroups_Groups {
	if t == nil {
		t = &GetGroups{}
	}
	return &t.Groups
}

type UpdateGroup struct {
	UpdateGroup UpdateGroup_UpdateGroup "json:\"updateGroup\" graphql:\"updateGroup\""
}

func (t *UpdateGroup) GetUpdateGroup() *UpdateGroup_UpdateGroup {
	if t == nil {
		t = &UpdateGroup{}
	}
	return &t.UpdateGroup
}

type GetAllGroupHistories struct {
	GroupHistories GetAllGroupHistories_GroupHistories "json:\"groupHistories\" graphql:\"groupHistories\""
}

func (t *GetAllGroupHistories) GetGroupHistories() *GetAllGroupHistories_GroupHistories {
	if t == nil {
		t = &GetAllGroupHistories{}
	}
	return &t.GroupHistories
}

type GetGroupHistories struct {
	GroupHistories GetGroupHistories_GroupHistories "json:\"groupHistories\" graphql:\"groupHistories\""
}

func (t *GetGroupHistories) GetGroupHistories() *GetGroupHistories_GroupHistories {
	if t == nil {
		t = &GetGroupHistories{}
	}
	return &t.GroupHistories
}

type AddUserToGroupWithRole struct {
	CreateGroupMembership AddUserToGroupWithRole_CreateGroupMembership "json:\"createGroupMembership\" graphql:\"createGroupMembership\""
}

func (t *AddUserToGroupWithRole) GetCreateGroupMembership() *AddUserToGroupWithRole_CreateGroupMembership {
	if t == nil {
		t = &AddUserToGroupWithRole{}
	}
	return &t.CreateGroupMembership
}

type CreateBulkCSVGroupMembers struct {
	CreateBulkCSVGroupMembership CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership "json:\"createBulkCSVGroupMembership\" graphql:\"createBulkCSVGroupMembership\""
}

func (t *CreateBulkCSVGroupMembers) GetCreateBulkCSVGroupMembership() *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership {
	if t == nil {
		t = &CreateBulkCSVGroupMembers{}
	}
	return &t.CreateBulkCSVGroupMembership
}

type CreateBulkGroupMembers struct {
	CreateBulkGroupMembership CreateBulkGroupMembers_CreateBulkGroupMembership "json:\"createBulkGroupMembership\" graphql:\"createBulkGroupMembership\""
}

func (t *CreateBulkGroupMembers) GetCreateBulkGroupMembership() *CreateBulkGroupMembers_CreateBulkGroupMembership {
	if t == nil {
		t = &CreateBulkGroupMembers{}
	}
	return &t.CreateBulkGroupMembership
}

type GetGroupMembersByGroupID struct {
	GroupMemberships GetGroupMembersByGroupID_GroupMemberships "json:\"groupMemberships\" graphql:\"groupMemberships\""
}

func (t *GetGroupMembersByGroupID) GetGroupMemberships() *GetGroupMembersByGroupID_GroupMemberships {
	if t == nil {
		t = &GetGroupMembersByGroupID{}
	}
	return &t.GroupMemberships
}

type RemoveUserFromGroup struct {
	DeleteGroupMembership RemoveUserFromGroup_DeleteGroupMembership "json:\"deleteGroupMembership\" graphql:\"deleteGroupMembership\""
}

func (t *RemoveUserFromGroup) GetDeleteGroupMembership() *RemoveUserFromGroup_DeleteGroupMembership {
	if t == nil {
		t = &RemoveUserFromGroup{}
	}
	return &t.DeleteGroupMembership
}

type UpdateUserRoleInGroup struct {
	UpdateGroupMembership UpdateUserRoleInGroup_UpdateGroupMembership "json:\"updateGroupMembership\" graphql:\"updateGroupMembership\""
}

func (t *UpdateUserRoleInGroup) GetUpdateGroupMembership() *UpdateUserRoleInGroup_UpdateGroupMembership {
	if t == nil {
		t = &UpdateUserRoleInGroup{}
	}
	return &t.UpdateGroupMembership
}

type GetAllGroupMembershipHistories struct {
	GroupMembershipHistories GetAllGroupMembershipHistories_GroupMembershipHistories "json:\"groupMembershipHistories\" graphql:\"groupMembershipHistories\""
}

func (t *GetAllGroupMembershipHistories) GetGroupMembershipHistories() *GetAllGroupMembershipHistories_GroupMembershipHistories {
	if t == nil {
		t = &GetAllGroupMembershipHistories{}
	}
	return &t.GroupMembershipHistories
}

type GetGroupMembershipHistories struct {
	GroupMembershipHistories GetGroupMembershipHistories_GroupMembershipHistories "json:\"groupMembershipHistories\" graphql:\"groupMembershipHistories\""
}

func (t *GetGroupMembershipHistories) GetGroupMembershipHistories() *GetGroupMembershipHistories_GroupMembershipHistories {
	if t == nil {
		t = &GetGroupMembershipHistories{}
	}
	return &t.GroupMembershipHistories
}

type GetAllGroupSettings struct {
	GroupSettings GetAllGroupSettings_GroupSettings "json:\"groupSettings\" graphql:\"groupSettings\""
}

func (t *GetAllGroupSettings) GetGroupSettings() *GetAllGroupSettings_GroupSettings {
	if t == nil {
		t = &GetAllGroupSettings{}
	}
	return &t.GroupSettings
}

type GetGroupSettingByID struct {
	GroupSetting GetGroupSettingByID_GroupSetting "json:\"groupSetting\" graphql:\"groupSetting\""
}

func (t *GetGroupSettingByID) GetGroupSetting() *GetGroupSettingByID_GroupSetting {
	if t == nil {
		t = &GetGroupSettingByID{}
	}
	return &t.GroupSetting
}

type GetGroupSettings struct {
	GroupSettings GetGroupSettings_GroupSettings "json:\"groupSettings\" graphql:\"groupSettings\""
}

func (t *GetGroupSettings) GetGroupSettings() *GetGroupSettings_GroupSettings {
	if t == nil {
		t = &GetGroupSettings{}
	}
	return &t.GroupSettings
}

type UpdateGroupSetting struct {
	UpdateGroupSetting UpdateGroupSetting_UpdateGroupSetting "json:\"updateGroupSetting\" graphql:\"updateGroupSetting\""
}

func (t *UpdateGroupSetting) GetUpdateGroupSetting() *UpdateGroupSetting_UpdateGroupSetting {
	if t == nil {
		t = &UpdateGroupSetting{}
	}
	return &t.UpdateGroupSetting
}

type GetAllGroupSettingHistories struct {
	GroupSettingHistories GetAllGroupSettingHistories_GroupSettingHistories "json:\"groupSettingHistories\" graphql:\"groupSettingHistories\""
}

func (t *GetAllGroupSettingHistories) GetGroupSettingHistories() *GetAllGroupSettingHistories_GroupSettingHistories {
	if t == nil {
		t = &GetAllGroupSettingHistories{}
	}
	return &t.GroupSettingHistories
}

type GetGroupSettingHistories struct {
	GroupSettingHistories GetGroupSettingHistories_GroupSettingHistories "json:\"groupSettingHistories\" graphql:\"groupSettingHistories\""
}

func (t *GetGroupSettingHistories) GetGroupSettingHistories() *GetGroupSettingHistories_GroupSettingHistories {
	if t == nil {
		t = &GetGroupSettingHistories{}
	}
	return &t.GroupSettingHistories
}

type CreateBulkCSVHush struct {
	CreateBulkCSVHush CreateBulkCSVHush_CreateBulkCSVHush "json:\"createBulkCSVHush\" graphql:\"createBulkCSVHush\""
}

func (t *CreateBulkCSVHush) GetCreateBulkCSVHush() *CreateBulkCSVHush_CreateBulkCSVHush {
	if t == nil {
		t = &CreateBulkCSVHush{}
	}
	return &t.CreateBulkCSVHush
}

type CreateBulkHush struct {
	CreateBulkHush CreateBulkHush_CreateBulkHush "json:\"createBulkHush\" graphql:\"createBulkHush\""
}

func (t *CreateBulkHush) GetCreateBulkHush() *CreateBulkHush_CreateBulkHush {
	if t == nil {
		t = &CreateBulkHush{}
	}
	return &t.CreateBulkHush
}

type CreateHush struct {
	CreateHush CreateHush_CreateHush "json:\"createHush\" graphql:\"createHush\""
}

func (t *CreateHush) GetCreateHush() *CreateHush_CreateHush {
	if t == nil {
		t = &CreateHush{}
	}
	return &t.CreateHush
}

type GetAllHushes struct {
	Hushes GetAllHushes_Hushes "json:\"hushes\" graphql:\"hushes\""
}

func (t *GetAllHushes) GetHushes() *GetAllHushes_Hushes {
	if t == nil {
		t = &GetAllHushes{}
	}
	return &t.Hushes
}

type GetHushByID struct {
	Hush GetHushByID_Hush "json:\"hush\" graphql:\"hush\""
}

func (t *GetHushByID) GetHush() *GetHushByID_Hush {
	if t == nil {
		t = &GetHushByID{}
	}
	return &t.Hush
}

type GetHushes struct {
	Hushes GetHushes_Hushes "json:\"hushes\" graphql:\"hushes\""
}

func (t *GetHushes) GetHushes() *GetHushes_Hushes {
	if t == nil {
		t = &GetHushes{}
	}
	return &t.Hushes
}

type UpdateHush struct {
	UpdateHush UpdateHush_UpdateHush "json:\"updateHush\" graphql:\"updateHush\""
}

func (t *UpdateHush) GetUpdateHush() *UpdateHush_UpdateHush {
	if t == nil {
		t = &UpdateHush{}
	}
	return &t.UpdateHush
}

type GetAllHushHistories struct {
	HushHistories GetAllHushHistories_HushHistories "json:\"hushHistories\" graphql:\"hushHistories\""
}

func (t *GetAllHushHistories) GetHushHistories() *GetAllHushHistories_HushHistories {
	if t == nil {
		t = &GetAllHushHistories{}
	}
	return &t.HushHistories
}

type GetHushHistories struct {
	HushHistories GetHushHistories_HushHistories "json:\"hushHistories\" graphql:\"hushHistories\""
}

func (t *GetHushHistories) GetHushHistories() *GetHushHistories_HushHistories {
	if t == nil {
		t = &GetHushHistories{}
	}
	return &t.HushHistories
}

type CreateBulkCSVIntegration struct {
	CreateBulkCSVIntegration CreateBulkCSVIntegration_CreateBulkCSVIntegration "json:\"createBulkCSVIntegration\" graphql:\"createBulkCSVIntegration\""
}

func (t *CreateBulkCSVIntegration) GetCreateBulkCSVIntegration() *CreateBulkCSVIntegration_CreateBulkCSVIntegration {
	if t == nil {
		t = &CreateBulkCSVIntegration{}
	}
	return &t.CreateBulkCSVIntegration
}

type CreateBulkIntegration struct {
	CreateBulkIntegration CreateBulkIntegration_CreateBulkIntegration "json:\"createBulkIntegration\" graphql:\"createBulkIntegration\""
}

func (t *CreateBulkIntegration) GetCreateBulkIntegration() *CreateBulkIntegration_CreateBulkIntegration {
	if t == nil {
		t = &CreateBulkIntegration{}
	}
	return &t.CreateBulkIntegration
}

type CreateIntegration struct {
	CreateIntegration CreateIntegration_CreateIntegration "json:\"createIntegration\" graphql:\"createIntegration\""
}

func (t *CreateIntegration) GetCreateIntegration() *CreateIntegration_CreateIntegration {
	if t == nil {
		t = &CreateIntegration{}
	}
	return &t.CreateIntegration
}

type DeleteIntegration struct {
	DeleteIntegration DeleteIntegration_DeleteIntegration "json:\"deleteIntegration\" graphql:\"deleteIntegration\""
}

func (t *DeleteIntegration) GetDeleteIntegration() *DeleteIntegration_DeleteIntegration {
	if t == nil {
		t = &DeleteIntegration{}
	}
	return &t.DeleteIntegration
}

type GetAllIntegrations struct {
	Integrations GetAllIntegrations_Integrations "json:\"integrations\" graphql:\"integrations\""
}

func (t *GetAllIntegrations) GetIntegrations() *GetAllIntegrations_Integrations {
	if t == nil {
		t = &GetAllIntegrations{}
	}
	return &t.Integrations
}

type GetIntegrationByID struct {
	Integration GetIntegrationByID_Integration "json:\"integration\" graphql:\"integration\""
}

func (t *GetIntegrationByID) GetIntegration() *GetIntegrationByID_Integration {
	if t == nil {
		t = &GetIntegrationByID{}
	}
	return &t.Integration
}

type GetIntegrations struct {
	Integrations GetIntegrations_Integrations "json:\"integrations\" graphql:\"integrations\""
}

func (t *GetIntegrations) GetIntegrations() *GetIntegrations_Integrations {
	if t == nil {
		t = &GetIntegrations{}
	}
	return &t.Integrations
}

type UpdateIntegration struct {
	UpdateIntegration UpdateIntegration_UpdateIntegration "json:\"updateIntegration\" graphql:\"updateIntegration\""
}

func (t *UpdateIntegration) GetUpdateIntegration() *UpdateIntegration_UpdateIntegration {
	if t == nil {
		t = &UpdateIntegration{}
	}
	return &t.UpdateIntegration
}

type GetAllIntegrationHistories struct {
	IntegrationHistories GetAllIntegrationHistories_IntegrationHistories "json:\"integrationHistories\" graphql:\"integrationHistories\""
}

func (t *GetAllIntegrationHistories) GetIntegrationHistories() *GetAllIntegrationHistories_IntegrationHistories {
	if t == nil {
		t = &GetAllIntegrationHistories{}
	}
	return &t.IntegrationHistories
}

type GetIntegrationHistories struct {
	IntegrationHistories GetIntegrationHistories_IntegrationHistories "json:\"integrationHistories\" graphql:\"integrationHistories\""
}

func (t *GetIntegrationHistories) GetIntegrationHistories() *GetIntegrationHistories_IntegrationHistories {
	if t == nil {
		t = &GetIntegrationHistories{}
	}
	return &t.IntegrationHistories
}

type CreateBulkCSVInternalPolicy struct {
	CreateBulkCSVInternalPolicy CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy "json:\"createBulkCSVInternalPolicy\" graphql:\"createBulkCSVInternalPolicy\""
}

func (t *CreateBulkCSVInternalPolicy) GetCreateBulkCSVInternalPolicy() *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy{}
	}
	return &t.CreateBulkCSVInternalPolicy
}

type CreateBulkInternalPolicy struct {
	CreateBulkInternalPolicy CreateBulkInternalPolicy_CreateBulkInternalPolicy "json:\"createBulkInternalPolicy\" graphql:\"createBulkInternalPolicy\""
}

func (t *CreateBulkInternalPolicy) GetCreateBulkInternalPolicy() *CreateBulkInternalPolicy_CreateBulkInternalPolicy {
	if t == nil {
		t = &CreateBulkInternalPolicy{}
	}
	return &t.CreateBulkInternalPolicy
}

type CreateInternalPolicy struct {
	CreateInternalPolicy CreateInternalPolicy_CreateInternalPolicy "json:\"createInternalPolicy\" graphql:\"createInternalPolicy\""
}

func (t *CreateInternalPolicy) GetCreateInternalPolicy() *CreateInternalPolicy_CreateInternalPolicy {
	if t == nil {
		t = &CreateInternalPolicy{}
	}
	return &t.CreateInternalPolicy
}

type DeleteInternalPolicy struct {
	DeleteInternalPolicy DeleteInternalPolicy_DeleteInternalPolicy "json:\"deleteInternalPolicy\" graphql:\"deleteInternalPolicy\""
}

func (t *DeleteInternalPolicy) GetDeleteInternalPolicy() *DeleteInternalPolicy_DeleteInternalPolicy {
	if t == nil {
		t = &DeleteInternalPolicy{}
	}
	return &t.DeleteInternalPolicy
}

type GetAllInternalPolicies struct {
	InternalPolicies GetAllInternalPolicies_InternalPolicies "json:\"internalPolicies\" graphql:\"internalPolicies\""
}

func (t *GetAllInternalPolicies) GetInternalPolicies() *GetAllInternalPolicies_InternalPolicies {
	if t == nil {
		t = &GetAllInternalPolicies{}
	}
	return &t.InternalPolicies
}

type GetInternalPolicies struct {
	InternalPolicies GetInternalPolicies_InternalPolicies "json:\"internalPolicies\" graphql:\"internalPolicies\""
}

func (t *GetInternalPolicies) GetInternalPolicies() *GetInternalPolicies_InternalPolicies {
	if t == nil {
		t = &GetInternalPolicies{}
	}
	return &t.InternalPolicies
}

type GetInternalPolicyByID struct {
	InternalPolicy GetInternalPolicyByID_InternalPolicy "json:\"internalPolicy\" graphql:\"internalPolicy\""
}

func (t *GetInternalPolicyByID) GetInternalPolicy() *GetInternalPolicyByID_InternalPolicy {
	if t == nil {
		t = &GetInternalPolicyByID{}
	}
	return &t.InternalPolicy
}

type UpdateInternalPolicy struct {
	UpdateInternalPolicy UpdateInternalPolicy_UpdateInternalPolicy "json:\"updateInternalPolicy\" graphql:\"updateInternalPolicy\""
}

func (t *UpdateInternalPolicy) GetUpdateInternalPolicy() *UpdateInternalPolicy_UpdateInternalPolicy {
	if t == nil {
		t = &UpdateInternalPolicy{}
	}
	return &t.UpdateInternalPolicy
}

type GetAllInternalPolicyHistories struct {
	InternalPolicyHistories GetAllInternalPolicyHistories_InternalPolicyHistories "json:\"internalPolicyHistories\" graphql:\"internalPolicyHistories\""
}

func (t *GetAllInternalPolicyHistories) GetInternalPolicyHistories() *GetAllInternalPolicyHistories_InternalPolicyHistories {
	if t == nil {
		t = &GetAllInternalPolicyHistories{}
	}
	return &t.InternalPolicyHistories
}

type GetInternalPolicyHistories struct {
	InternalPolicyHistories GetInternalPolicyHistories_InternalPolicyHistories "json:\"internalPolicyHistories\" graphql:\"internalPolicyHistories\""
}

func (t *GetInternalPolicyHistories) GetInternalPolicyHistories() *GetInternalPolicyHistories_InternalPolicyHistories {
	if t == nil {
		t = &GetInternalPolicyHistories{}
	}
	return &t.InternalPolicyHistories
}

type CreateBulkCSVInvite struct {
	CreateBulkCSVInvite CreateBulkCSVInvite_CreateBulkCSVInvite "json:\"createBulkCSVInvite\" graphql:\"createBulkCSVInvite\""
}

func (t *CreateBulkCSVInvite) GetCreateBulkCSVInvite() *CreateBulkCSVInvite_CreateBulkCSVInvite {
	if t == nil {
		t = &CreateBulkCSVInvite{}
	}
	return &t.CreateBulkCSVInvite
}

type CreateBulkInvite struct {
	CreateBulkInvite CreateBulkInvite_CreateBulkInvite "json:\"createBulkInvite\" graphql:\"createBulkInvite\""
}

func (t *CreateBulkInvite) GetCreateBulkInvite() *CreateBulkInvite_CreateBulkInvite {
	if t == nil {
		t = &CreateBulkInvite{}
	}
	return &t.CreateBulkInvite
}

type CreateInvite struct {
	CreateInvite CreateInvite_CreateInvite "json:\"createInvite\" graphql:\"createInvite\""
}

func (t *CreateInvite) GetCreateInvite() *CreateInvite_CreateInvite {
	if t == nil {
		t = &CreateInvite{}
	}
	return &t.CreateInvite
}

type DeleteInvite struct {
	DeleteInvite DeleteInvite_DeleteInvite "json:\"deleteInvite\" graphql:\"deleteInvite\""
}

func (t *DeleteInvite) GetDeleteInvite() *DeleteInvite_DeleteInvite {
	if t == nil {
		t = &DeleteInvite{}
	}
	return &t.DeleteInvite
}

type GetAllInvites struct {
	Invites GetAllInvites_Invites "json:\"invites\" graphql:\"invites\""
}

func (t *GetAllInvites) GetInvites() *GetAllInvites_Invites {
	if t == nil {
		t = &GetAllInvites{}
	}
	return &t.Invites
}

type GetInviteByID struct {
	Invite GetInviteByID_Invite "json:\"invite\" graphql:\"invite\""
}

func (t *GetInviteByID) GetInvite() *GetInviteByID_Invite {
	if t == nil {
		t = &GetInviteByID{}
	}
	return &t.Invite
}

type InvitesByOrgID struct {
	Invites InvitesByOrgID_Invites "json:\"invites\" graphql:\"invites\""
}

func (t *InvitesByOrgID) GetInvites() *InvitesByOrgID_Invites {
	if t == nil {
		t = &InvitesByOrgID{}
	}
	return &t.Invites
}

type CreateBulkCSVMappedControl struct {
	CreateBulkCSVMappedControl CreateBulkCSVMappedControl_CreateBulkCSVMappedControl "json:\"createBulkCSVMappedControl\" graphql:\"createBulkCSVMappedControl\""
}

func (t *CreateBulkCSVMappedControl) GetCreateBulkCSVMappedControl() *CreateBulkCSVMappedControl_CreateBulkCSVMappedControl {
	if t == nil {
		t = &CreateBulkCSVMappedControl{}
	}
	return &t.CreateBulkCSVMappedControl
}

type CreateBulkMappedControl struct {
	CreateBulkMappedControl CreateBulkMappedControl_CreateBulkMappedControl "json:\"createBulkMappedControl\" graphql:\"createBulkMappedControl\""
}

func (t *CreateBulkMappedControl) GetCreateBulkMappedControl() *CreateBulkMappedControl_CreateBulkMappedControl {
	if t == nil {
		t = &CreateBulkMappedControl{}
	}
	return &t.CreateBulkMappedControl
}

type CreateMappedControl struct {
	CreateMappedControl CreateMappedControl_CreateMappedControl "json:\"createMappedControl\" graphql:\"createMappedControl\""
}

func (t *CreateMappedControl) GetCreateMappedControl() *CreateMappedControl_CreateMappedControl {
	if t == nil {
		t = &CreateMappedControl{}
	}
	return &t.CreateMappedControl
}

type DeleteMappedControl struct {
	DeleteMappedControl DeleteMappedControl_DeleteMappedControl "json:\"deleteMappedControl\" graphql:\"deleteMappedControl\""
}

func (t *DeleteMappedControl) GetDeleteMappedControl() *DeleteMappedControl_DeleteMappedControl {
	if t == nil {
		t = &DeleteMappedControl{}
	}
	return &t.DeleteMappedControl
}

type GetAllMappedControls struct {
	MappedControls GetAllMappedControls_MappedControls "json:\"mappedControls\" graphql:\"mappedControls\""
}

func (t *GetAllMappedControls) GetMappedControls() *GetAllMappedControls_MappedControls {
	if t == nil {
		t = &GetAllMappedControls{}
	}
	return &t.MappedControls
}

type GetMappedControlByID struct {
	MappedControl GetMappedControlByID_MappedControl "json:\"mappedControl\" graphql:\"mappedControl\""
}

func (t *GetMappedControlByID) GetMappedControl() *GetMappedControlByID_MappedControl {
	if t == nil {
		t = &GetMappedControlByID{}
	}
	return &t.MappedControl
}

type GetMappedControls struct {
	MappedControls GetMappedControls_MappedControls "json:\"mappedControls\" graphql:\"mappedControls\""
}

func (t *GetMappedControls) GetMappedControls() *GetMappedControls_MappedControls {
	if t == nil {
		t = &GetMappedControls{}
	}
	return &t.MappedControls
}

type UpdateMappedControl struct {
	UpdateMappedControl UpdateMappedControl_UpdateMappedControl "json:\"updateMappedControl\" graphql:\"updateMappedControl\""
}

func (t *UpdateMappedControl) GetUpdateMappedControl() *UpdateMappedControl_UpdateMappedControl {
	if t == nil {
		t = &UpdateMappedControl{}
	}
	return &t.UpdateMappedControl
}

type GetAllMappedControlHistories struct {
	MappedControlHistories GetAllMappedControlHistories_MappedControlHistories "json:\"mappedControlHistories\" graphql:\"mappedControlHistories\""
}

func (t *GetAllMappedControlHistories) GetMappedControlHistories() *GetAllMappedControlHistories_MappedControlHistories {
	if t == nil {
		t = &GetAllMappedControlHistories{}
	}
	return &t.MappedControlHistories
}

type GetMappedControlHistories struct {
	MappedControlHistories GetMappedControlHistories_MappedControlHistories "json:\"mappedControlHistories\" graphql:\"mappedControlHistories\""
}

func (t *GetMappedControlHistories) GetMappedControlHistories() *GetMappedControlHistories_MappedControlHistories {
	if t == nil {
		t = &GetMappedControlHistories{}
	}
	return &t.MappedControlHistories
}

type CreateBulkCSVNarrative struct {
	CreateBulkCSVNarrative CreateBulkCSVNarrative_CreateBulkCSVNarrative "json:\"createBulkCSVNarrative\" graphql:\"createBulkCSVNarrative\""
}

func (t *CreateBulkCSVNarrative) GetCreateBulkCSVNarrative() *CreateBulkCSVNarrative_CreateBulkCSVNarrative {
	if t == nil {
		t = &CreateBulkCSVNarrative{}
	}
	return &t.CreateBulkCSVNarrative
}

type CreateBulkNarrative struct {
	CreateBulkNarrative CreateBulkNarrative_CreateBulkNarrative "json:\"createBulkNarrative\" graphql:\"createBulkNarrative\""
}

func (t *CreateBulkNarrative) GetCreateBulkNarrative() *CreateBulkNarrative_CreateBulkNarrative {
	if t == nil {
		t = &CreateBulkNarrative{}
	}
	return &t.CreateBulkNarrative
}

type CreateNarrative struct {
	CreateNarrative CreateNarrative_CreateNarrative "json:\"createNarrative\" graphql:\"createNarrative\""
}

func (t *CreateNarrative) GetCreateNarrative() *CreateNarrative_CreateNarrative {
	if t == nil {
		t = &CreateNarrative{}
	}
	return &t.CreateNarrative
}

type DeleteNarrative struct {
	DeleteNarrative DeleteNarrative_DeleteNarrative "json:\"deleteNarrative\" graphql:\"deleteNarrative\""
}

func (t *DeleteNarrative) GetDeleteNarrative() *DeleteNarrative_DeleteNarrative {
	if t == nil {
		t = &DeleteNarrative{}
	}
	return &t.DeleteNarrative
}

type GetAllNarratives struct {
	Narratives GetAllNarratives_Narratives "json:\"narratives\" graphql:\"narratives\""
}

func (t *GetAllNarratives) GetNarratives() *GetAllNarratives_Narratives {
	if t == nil {
		t = &GetAllNarratives{}
	}
	return &t.Narratives
}

type GetNarrativeByID struct {
	Narrative GetNarrativeByID_Narrative "json:\"narrative\" graphql:\"narrative\""
}

func (t *GetNarrativeByID) GetNarrative() *GetNarrativeByID_Narrative {
	if t == nil {
		t = &GetNarrativeByID{}
	}
	return &t.Narrative
}

type GetNarratives struct {
	Narratives GetNarratives_Narratives "json:\"narratives\" graphql:\"narratives\""
}

func (t *GetNarratives) GetNarratives() *GetNarratives_Narratives {
	if t == nil {
		t = &GetNarratives{}
	}
	return &t.Narratives
}

type UpdateNarrative struct {
	UpdateNarrative UpdateNarrative_UpdateNarrative "json:\"updateNarrative\" graphql:\"updateNarrative\""
}

func (t *UpdateNarrative) GetUpdateNarrative() *UpdateNarrative_UpdateNarrative {
	if t == nil {
		t = &UpdateNarrative{}
	}
	return &t.UpdateNarrative
}

type GetAllNarrativeHistories struct {
	NarrativeHistories GetAllNarrativeHistories_NarrativeHistories "json:\"narrativeHistories\" graphql:\"narrativeHistories\""
}

func (t *GetAllNarrativeHistories) GetNarrativeHistories() *GetAllNarrativeHistories_NarrativeHistories {
	if t == nil {
		t = &GetAllNarrativeHistories{}
	}
	return &t.NarrativeHistories
}

type GetNarrativeHistories struct {
	NarrativeHistories GetNarrativeHistories_NarrativeHistories "json:\"narrativeHistories\" graphql:\"narrativeHistories\""
}

func (t *GetNarrativeHistories) GetNarrativeHistories() *GetNarrativeHistories_NarrativeHistories {
	if t == nil {
		t = &GetNarrativeHistories{}
	}
	return &t.NarrativeHistories
}

type GetNoteByID struct {
	Note GetNoteByID_Note "json:\"note\" graphql:\"note\""
}

func (t *GetNoteByID) GetNote() *GetNoteByID_Note {
	if t == nil {
		t = &GetNoteByID{}
	}
	return &t.Note
}

type GetAllNoteHistories struct {
	NoteHistories GetAllNoteHistories_NoteHistories "json:\"noteHistories\" graphql:\"noteHistories\""
}

func (t *GetAllNoteHistories) GetNoteHistories() *GetAllNoteHistories_NoteHistories {
	if t == nil {
		t = &GetAllNoteHistories{}
	}
	return &t.NoteHistories
}

type GetNoteHistories struct {
	NoteHistories GetNoteHistories_NoteHistories "json:\"noteHistories\" graphql:\"noteHistories\""
}

func (t *GetNoteHistories) GetNoteHistories() *GetNoteHistories_NoteHistories {
	if t == nil {
		t = &GetNoteHistories{}
	}
	return &t.NoteHistories
}

type CreateOnboarding struct {
	CreateOnboarding CreateOnboarding_CreateOnboarding "json:\"createOnboarding\" graphql:\"createOnboarding\""
}

func (t *CreateOnboarding) GetCreateOnboarding() *CreateOnboarding_CreateOnboarding {
	if t == nil {
		t = &CreateOnboarding{}
	}
	return &t.CreateOnboarding
}

type CreateOrganization struct {
	CreateOrganization CreateOrganization_CreateOrganization "json:\"createOrganization\" graphql:\"createOrganization\""
}

func (t *CreateOrganization) GetCreateOrganization() *CreateOrganization_CreateOrganization {
	if t == nil {
		t = &CreateOrganization{}
	}
	return &t.CreateOrganization
}

type CreateOrganizationWithMembers struct {
	CreateOrganizationWithMembers CreateOrganizationWithMembers_CreateOrganizationWithMembers "json:\"createOrganizationWithMembers\" graphql:\"createOrganizationWithMembers\""
}

func (t *CreateOrganizationWithMembers) GetCreateOrganizationWithMembers() *CreateOrganizationWithMembers_CreateOrganizationWithMembers {
	if t == nil {
		t = &CreateOrganizationWithMembers{}
	}
	return &t.CreateOrganizationWithMembers
}

type DeleteOrganization struct {
	DeleteOrganization DeleteOrganization_DeleteOrganization "json:\"deleteOrganization\" graphql:\"deleteOrganization\""
}

func (t *DeleteOrganization) GetDeleteOrganization() *DeleteOrganization_DeleteOrganization {
	if t == nil {
		t = &DeleteOrganization{}
	}
	return &t.DeleteOrganization
}

type GetAllOrganizations struct {
	Organizations GetAllOrganizations_Organizations "json:\"organizations\" graphql:\"organizations\""
}

func (t *GetAllOrganizations) GetOrganizations() *GetAllOrganizations_Organizations {
	if t == nil {
		t = &GetAllOrganizations{}
	}
	return &t.Organizations
}

type GetOrganizationByID struct {
	Organization GetOrganizationByID_Organization "json:\"organization\" graphql:\"organization\""
}

func (t *GetOrganizationByID) GetOrganization() *GetOrganizationByID_Organization {
	if t == nil {
		t = &GetOrganizationByID{}
	}
	return &t.Organization
}

type GetOrganizations struct {
	Organizations GetOrganizations_Organizations "json:\"organizations\" graphql:\"organizations\""
}

func (t *GetOrganizations) GetOrganizations() *GetOrganizations_Organizations {
	if t == nil {
		t = &GetOrganizations{}
	}
	return &t.Organizations
}

type UpdateOrganization struct {
	UpdateOrganization UpdateOrganization_UpdateOrganization "json:\"updateOrganization\" graphql:\"updateOrganization\""
}

func (t *UpdateOrganization) GetUpdateOrganization() *UpdateOrganization_UpdateOrganization {
	if t == nil {
		t = &UpdateOrganization{}
	}
	return &t.UpdateOrganization
}

type GetAllOrganizationHistories struct {
	OrganizationHistories GetAllOrganizationHistories_OrganizationHistories "json:\"organizationHistories\" graphql:\"organizationHistories\""
}

func (t *GetAllOrganizationHistories) GetOrganizationHistories() *GetAllOrganizationHistories_OrganizationHistories {
	if t == nil {
		t = &GetAllOrganizationHistories{}
	}
	return &t.OrganizationHistories
}

type GetOrganizationHistories struct {
	OrganizationHistories GetOrganizationHistories_OrganizationHistories "json:\"organizationHistories\" graphql:\"organizationHistories\""
}

func (t *GetOrganizationHistories) GetOrganizationHistories() *GetOrganizationHistories_OrganizationHistories {
	if t == nil {
		t = &GetOrganizationHistories{}
	}
	return &t.OrganizationHistories
}

type GetAllOrganizationSettings struct {
	OrganizationSettings GetAllOrganizationSettings_OrganizationSettings "json:\"organizationSettings\" graphql:\"organizationSettings\""
}

func (t *GetAllOrganizationSettings) GetOrganizationSettings() *GetAllOrganizationSettings_OrganizationSettings {
	if t == nil {
		t = &GetAllOrganizationSettings{}
	}
	return &t.OrganizationSettings
}

type GetOrganizationSettingByID struct {
	OrganizationSetting GetOrganizationSettingByID_OrganizationSetting "json:\"organizationSetting\" graphql:\"organizationSetting\""
}

func (t *GetOrganizationSettingByID) GetOrganizationSetting() *GetOrganizationSettingByID_OrganizationSetting {
	if t == nil {
		t = &GetOrganizationSettingByID{}
	}
	return &t.OrganizationSetting
}

type GetOrganizationSettings struct {
	OrganizationSettings GetOrganizationSettings_OrganizationSettings "json:\"organizationSettings\" graphql:\"organizationSettings\""
}

func (t *GetOrganizationSettings) GetOrganizationSettings() *GetOrganizationSettings_OrganizationSettings {
	if t == nil {
		t = &GetOrganizationSettings{}
	}
	return &t.OrganizationSettings
}

type UpdateOrganizationSetting struct {
	UpdateOrganizationSetting UpdateOrganizationSetting_UpdateOrganizationSetting "json:\"updateOrganizationSetting\" graphql:\"updateOrganizationSetting\""
}

func (t *UpdateOrganizationSetting) GetUpdateOrganizationSetting() *UpdateOrganizationSetting_UpdateOrganizationSetting {
	if t == nil {
		t = &UpdateOrganizationSetting{}
	}
	return &t.UpdateOrganizationSetting
}

type GetAllOrganizationSettingHistories struct {
	OrganizationSettingHistories GetAllOrganizationSettingHistories_OrganizationSettingHistories "json:\"organizationSettingHistories\" graphql:\"organizationSettingHistories\""
}

func (t *GetAllOrganizationSettingHistories) GetOrganizationSettingHistories() *GetAllOrganizationSettingHistories_OrganizationSettingHistories {
	if t == nil {
		t = &GetAllOrganizationSettingHistories{}
	}
	return &t.OrganizationSettingHistories
}

type GetOrganizationSettingHistories struct {
	OrganizationSettingHistories GetOrganizationSettingHistories_OrganizationSettingHistories "json:\"organizationSettingHistories\" graphql:\"organizationSettingHistories\""
}

func (t *GetOrganizationSettingHistories) GetOrganizationSettingHistories() *GetOrganizationSettingHistories_OrganizationSettingHistories {
	if t == nil {
		t = &GetOrganizationSettingHistories{}
	}
	return &t.OrganizationSettingHistories
}

type AddUserToOrgWithRole struct {
	CreateOrgMembership AddUserToOrgWithRole_CreateOrgMembership "json:\"createOrgMembership\" graphql:\"createOrgMembership\""
}

func (t *AddUserToOrgWithRole) GetCreateOrgMembership() *AddUserToOrgWithRole_CreateOrgMembership {
	if t == nil {
		t = &AddUserToOrgWithRole{}
	}
	return &t.CreateOrgMembership
}

type CreateBulkCSVOrgMembers struct {
	CreateBulkCSVOrgMembership CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership "json:\"createBulkCSVOrgMembership\" graphql:\"createBulkCSVOrgMembership\""
}

func (t *CreateBulkCSVOrgMembers) GetCreateBulkCSVOrgMembership() *CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership {
	if t == nil {
		t = &CreateBulkCSVOrgMembers{}
	}
	return &t.CreateBulkCSVOrgMembership
}

type CreateBulkOrgMembers struct {
	CreateBulkOrgMembership CreateBulkOrgMembers_CreateBulkOrgMembership "json:\"createBulkOrgMembership\" graphql:\"createBulkOrgMembership\""
}

func (t *CreateBulkOrgMembers) GetCreateBulkOrgMembership() *CreateBulkOrgMembers_CreateBulkOrgMembership {
	if t == nil {
		t = &CreateBulkOrgMembers{}
	}
	return &t.CreateBulkOrgMembership
}

type GetOrgMembersByOrgID struct {
	OrgMemberships GetOrgMembersByOrgID_OrgMemberships "json:\"orgMemberships\" graphql:\"orgMemberships\""
}

func (t *GetOrgMembersByOrgID) GetOrgMemberships() *GetOrgMembersByOrgID_OrgMemberships {
	if t == nil {
		t = &GetOrgMembersByOrgID{}
	}
	return &t.OrgMemberships
}

type RemoveUserFromOrg struct {
	DeleteOrgMembership RemoveUserFromOrg_DeleteOrgMembership "json:\"deleteOrgMembership\" graphql:\"deleteOrgMembership\""
}

func (t *RemoveUserFromOrg) GetDeleteOrgMembership() *RemoveUserFromOrg_DeleteOrgMembership {
	if t == nil {
		t = &RemoveUserFromOrg{}
	}
	return &t.DeleteOrgMembership
}

type UpdateUserRoleInOrg struct {
	UpdateOrgMembership UpdateUserRoleInOrg_UpdateOrgMembership "json:\"updateOrgMembership\" graphql:\"updateOrgMembership\""
}

func (t *UpdateUserRoleInOrg) GetUpdateOrgMembership() *UpdateUserRoleInOrg_UpdateOrgMembership {
	if t == nil {
		t = &UpdateUserRoleInOrg{}
	}
	return &t.UpdateOrgMembership
}

type GetAllOrgMembershipHistories struct {
	OrgMembershipHistories GetAllOrgMembershipHistories_OrgMembershipHistories "json:\"orgMembershipHistories\" graphql:\"orgMembershipHistories\""
}

func (t *GetAllOrgMembershipHistories) GetOrgMembershipHistories() *GetAllOrgMembershipHistories_OrgMembershipHistories {
	if t == nil {
		t = &GetAllOrgMembershipHistories{}
	}
	return &t.OrgMembershipHistories
}

type GetOrgMembershipHistories struct {
	OrgMembershipHistories GetOrgMembershipHistories_OrgMembershipHistories "json:\"orgMembershipHistories\" graphql:\"orgMembershipHistories\""
}

func (t *GetOrgMembershipHistories) GetOrgMembershipHistories() *GetOrgMembershipHistories_OrgMembershipHistories {
	if t == nil {
		t = &GetOrgMembershipHistories{}
	}
	return &t.OrgMembershipHistories
}

type GetAllOrgSubscriptions struct {
	OrgSubscriptions GetAllOrgSubscriptions_OrgSubscriptions "json:\"orgSubscriptions\" graphql:\"orgSubscriptions\""
}

func (t *GetAllOrgSubscriptions) GetOrgSubscriptions() *GetAllOrgSubscriptions_OrgSubscriptions {
	if t == nil {
		t = &GetAllOrgSubscriptions{}
	}
	return &t.OrgSubscriptions
}

type GetOrgSubscriptionByID struct {
	OrgSubscription GetOrgSubscriptionByID_OrgSubscription "json:\"orgSubscription\" graphql:\"orgSubscription\""
}

func (t *GetOrgSubscriptionByID) GetOrgSubscription() *GetOrgSubscriptionByID_OrgSubscription {
	if t == nil {
		t = &GetOrgSubscriptionByID{}
	}
	return &t.OrgSubscription
}

type GetOrgSubscriptions struct {
	OrgSubscriptions GetOrgSubscriptions_OrgSubscriptions "json:\"orgSubscriptions\" graphql:\"orgSubscriptions\""
}

func (t *GetOrgSubscriptions) GetOrgSubscriptions() *GetOrgSubscriptions_OrgSubscriptions {
	if t == nil {
		t = &GetOrgSubscriptions{}
	}
	return &t.OrgSubscriptions
}

type GetAllOrgSubscriptionHistories struct {
	OrgSubscriptionHistories GetAllOrgSubscriptionHistories_OrgSubscriptionHistories "json:\"orgSubscriptionHistories\" graphql:\"orgSubscriptionHistories\""
}

func (t *GetAllOrgSubscriptionHistories) GetOrgSubscriptionHistories() *GetAllOrgSubscriptionHistories_OrgSubscriptionHistories {
	if t == nil {
		t = &GetAllOrgSubscriptionHistories{}
	}
	return &t.OrgSubscriptionHistories
}

type GetOrgSubscriptionHistories struct {
	OrgSubscriptionHistories GetOrgSubscriptionHistories_OrgSubscriptionHistories "json:\"orgSubscriptionHistories\" graphql:\"orgSubscriptionHistories\""
}

func (t *GetOrgSubscriptionHistories) GetOrgSubscriptionHistories() *GetOrgSubscriptionHistories_OrgSubscriptionHistories {
	if t == nil {
		t = &GetOrgSubscriptionHistories{}
	}
	return &t.OrgSubscriptionHistories
}

type CreatePersonalAccessToken struct {
	CreatePersonalAccessToken CreatePersonalAccessToken_CreatePersonalAccessToken "json:\"createPersonalAccessToken\" graphql:\"createPersonalAccessToken\""
}

func (t *CreatePersonalAccessToken) GetCreatePersonalAccessToken() *CreatePersonalAccessToken_CreatePersonalAccessToken {
	if t == nil {
		t = &CreatePersonalAccessToken{}
	}
	return &t.CreatePersonalAccessToken
}

type DeletePersonalAccessToken struct {
	DeletePersonalAccessToken DeletePersonalAccessToken_DeletePersonalAccessToken "json:\"deletePersonalAccessToken\" graphql:\"deletePersonalAccessToken\""
}

func (t *DeletePersonalAccessToken) GetDeletePersonalAccessToken() *DeletePersonalAccessToken_DeletePersonalAccessToken {
	if t == nil {
		t = &DeletePersonalAccessToken{}
	}
	return &t.DeletePersonalAccessToken
}

type GetAllPersonalAccessTokens struct {
	PersonalAccessTokens GetAllPersonalAccessTokens_PersonalAccessTokens "json:\"personalAccessTokens\" graphql:\"personalAccessTokens\""
}

func (t *GetAllPersonalAccessTokens) GetPersonalAccessTokens() *GetAllPersonalAccessTokens_PersonalAccessTokens {
	if t == nil {
		t = &GetAllPersonalAccessTokens{}
	}
	return &t.PersonalAccessTokens
}

type GetPersonalAccessTokenByID struct {
	PersonalAccessToken GetPersonalAccessTokenByID_PersonalAccessToken "json:\"personalAccessToken\" graphql:\"personalAccessToken\""
}

func (t *GetPersonalAccessTokenByID) GetPersonalAccessToken() *GetPersonalAccessTokenByID_PersonalAccessToken {
	if t == nil {
		t = &GetPersonalAccessTokenByID{}
	}
	return &t.PersonalAccessToken
}

type GetPersonalAccessTokens struct {
	PersonalAccessTokens GetPersonalAccessTokens_PersonalAccessTokens "json:\"personalAccessTokens\" graphql:\"personalAccessTokens\""
}

func (t *GetPersonalAccessTokens) GetPersonalAccessTokens() *GetPersonalAccessTokens_PersonalAccessTokens {
	if t == nil {
		t = &GetPersonalAccessTokens{}
	}
	return &t.PersonalAccessTokens
}

type UpdatePersonalAccessToken struct {
	UpdatePersonalAccessToken UpdatePersonalAccessToken_UpdatePersonalAccessToken "json:\"updatePersonalAccessToken\" graphql:\"updatePersonalAccessToken\""
}

func (t *UpdatePersonalAccessToken) GetUpdatePersonalAccessToken() *UpdatePersonalAccessToken_UpdatePersonalAccessToken {
	if t == nil {
		t = &UpdatePersonalAccessToken{}
	}
	return &t.UpdatePersonalAccessToken
}

type CreateBulkCSVProcedure struct {
	CreateBulkCSVProcedure CreateBulkCSVProcedure_CreateBulkCSVProcedure "json:\"createBulkCSVProcedure\" graphql:\"createBulkCSVProcedure\""
}

func (t *CreateBulkCSVProcedure) GetCreateBulkCSVProcedure() *CreateBulkCSVProcedure_CreateBulkCSVProcedure {
	if t == nil {
		t = &CreateBulkCSVProcedure{}
	}
	return &t.CreateBulkCSVProcedure
}

type CreateBulkProcedure struct {
	CreateBulkProcedure CreateBulkProcedure_CreateBulkProcedure "json:\"createBulkProcedure\" graphql:\"createBulkProcedure\""
}

func (t *CreateBulkProcedure) GetCreateBulkProcedure() *CreateBulkProcedure_CreateBulkProcedure {
	if t == nil {
		t = &CreateBulkProcedure{}
	}
	return &t.CreateBulkProcedure
}

type CreateProcedure struct {
	CreateProcedure CreateProcedure_CreateProcedure "json:\"createProcedure\" graphql:\"createProcedure\""
}

func (t *CreateProcedure) GetCreateProcedure() *CreateProcedure_CreateProcedure {
	if t == nil {
		t = &CreateProcedure{}
	}
	return &t.CreateProcedure
}

type DeleteProcedure struct {
	DeleteProcedure DeleteProcedure_DeleteProcedure "json:\"deleteProcedure\" graphql:\"deleteProcedure\""
}

func (t *DeleteProcedure) GetDeleteProcedure() *DeleteProcedure_DeleteProcedure {
	if t == nil {
		t = &DeleteProcedure{}
	}
	return &t.DeleteProcedure
}

type GetAllProcedures struct {
	Procedures GetAllProcedures_Procedures "json:\"procedures\" graphql:\"procedures\""
}

func (t *GetAllProcedures) GetProcedures() *GetAllProcedures_Procedures {
	if t == nil {
		t = &GetAllProcedures{}
	}
	return &t.Procedures
}

type GetProcedureByID struct {
	Procedure GetProcedureByID_Procedure "json:\"procedure\" graphql:\"procedure\""
}

func (t *GetProcedureByID) GetProcedure() *GetProcedureByID_Procedure {
	if t == nil {
		t = &GetProcedureByID{}
	}
	return &t.Procedure
}

type GetProcedures struct {
	Procedures GetProcedures_Procedures "json:\"procedures\" graphql:\"procedures\""
}

func (t *GetProcedures) GetProcedures() *GetProcedures_Procedures {
	if t == nil {
		t = &GetProcedures{}
	}
	return &t.Procedures
}

type UpdateProcedure struct {
	UpdateProcedure UpdateProcedure_UpdateProcedure "json:\"updateProcedure\" graphql:\"updateProcedure\""
}

func (t *UpdateProcedure) GetUpdateProcedure() *UpdateProcedure_UpdateProcedure {
	if t == nil {
		t = &UpdateProcedure{}
	}
	return &t.UpdateProcedure
}

type GetAllProcedureHistories struct {
	ProcedureHistories GetAllProcedureHistories_ProcedureHistories "json:\"procedureHistories\" graphql:\"procedureHistories\""
}

func (t *GetAllProcedureHistories) GetProcedureHistories() *GetAllProcedureHistories_ProcedureHistories {
	if t == nil {
		t = &GetAllProcedureHistories{}
	}
	return &t.ProcedureHistories
}

type GetProcedureHistories struct {
	ProcedureHistories GetProcedureHistories_ProcedureHistories "json:\"procedureHistories\" graphql:\"procedureHistories\""
}

func (t *GetProcedureHistories) GetProcedureHistories() *GetProcedureHistories_ProcedureHistories {
	if t == nil {
		t = &GetProcedureHistories{}
	}
	return &t.ProcedureHistories
}

type CreateBulkCSVProgram struct {
	CreateBulkCSVProgram CreateBulkCSVProgram_CreateBulkCSVProgram "json:\"createBulkCSVProgram\" graphql:\"createBulkCSVProgram\""
}

func (t *CreateBulkCSVProgram) GetCreateBulkCSVProgram() *CreateBulkCSVProgram_CreateBulkCSVProgram {
	if t == nil {
		t = &CreateBulkCSVProgram{}
	}
	return &t.CreateBulkCSVProgram
}

type CreateBulkProgram struct {
	CreateBulkProgram CreateBulkProgram_CreateBulkProgram "json:\"createBulkProgram\" graphql:\"createBulkProgram\""
}

func (t *CreateBulkProgram) GetCreateBulkProgram() *CreateBulkProgram_CreateBulkProgram {
	if t == nil {
		t = &CreateBulkProgram{}
	}
	return &t.CreateBulkProgram
}

type CreateControlWithSubcontrols struct {
	CreateControlWithSubcontrols CreateControlWithSubcontrols_CreateControlWithSubcontrols "json:\"createControlWithSubcontrols\" graphql:\"createControlWithSubcontrols\""
}

func (t *CreateControlWithSubcontrols) GetCreateControlWithSubcontrols() *CreateControlWithSubcontrols_CreateControlWithSubcontrols {
	if t == nil {
		t = &CreateControlWithSubcontrols{}
	}
	return &t.CreateControlWithSubcontrols
}

type CreateFullProgram struct {
	CreateFullProgram CreateFullProgram_CreateFullProgram "json:\"createFullProgram\" graphql:\"createFullProgram\""
}

func (t *CreateFullProgram) GetCreateFullProgram() *CreateFullProgram_CreateFullProgram {
	if t == nil {
		t = &CreateFullProgram{}
	}
	return &t.CreateFullProgram
}

type CreateProgram struct {
	CreateProgram CreateProgram_CreateProgram "json:\"createProgram\" graphql:\"createProgram\""
}

func (t *CreateProgram) GetCreateProgram() *CreateProgram_CreateProgram {
	if t == nil {
		t = &CreateProgram{}
	}
	return &t.CreateProgram
}

type CreateProgramWithMembers struct {
	CreateProgramWithMembers CreateProgramWithMembers_CreateProgramWithMembers "json:\"createProgramWithMembers\" graphql:\"createProgramWithMembers\""
}

func (t *CreateProgramWithMembers) GetCreateProgramWithMembers() *CreateProgramWithMembers_CreateProgramWithMembers {
	if t == nil {
		t = &CreateProgramWithMembers{}
	}
	return &t.CreateProgramWithMembers
}

type DeleteProgram struct {
	DeleteProgram DeleteProgram_DeleteProgram "json:\"deleteProgram\" graphql:\"deleteProgram\""
}

func (t *DeleteProgram) GetDeleteProgram() *DeleteProgram_DeleteProgram {
	if t == nil {
		t = &DeleteProgram{}
	}
	return &t.DeleteProgram
}

type GetAllPrograms struct {
	Programs GetAllPrograms_Programs "json:\"programs\" graphql:\"programs\""
}

func (t *GetAllPrograms) GetPrograms() *GetAllPrograms_Programs {
	if t == nil {
		t = &GetAllPrograms{}
	}
	return &t.Programs
}

type GetProgramByID struct {
	Program GetProgramByID_Program "json:\"program\" graphql:\"program\""
}

func (t *GetProgramByID) GetProgram() *GetProgramByID_Program {
	if t == nil {
		t = &GetProgramByID{}
	}
	return &t.Program
}

type GetPrograms struct {
	Programs GetPrograms_Programs "json:\"programs\" graphql:\"programs\""
}

func (t *GetPrograms) GetPrograms() *GetPrograms_Programs {
	if t == nil {
		t = &GetPrograms{}
	}
	return &t.Programs
}

type UpdateProgram struct {
	UpdateProgram UpdateProgram_UpdateProgram "json:\"updateProgram\" graphql:\"updateProgram\""
}

func (t *UpdateProgram) GetUpdateProgram() *UpdateProgram_UpdateProgram {
	if t == nil {
		t = &UpdateProgram{}
	}
	return &t.UpdateProgram
}

type AddUserToProgramWithRole struct {
	CreateProgramMembership AddUserToProgramWithRole_CreateProgramMembership "json:\"createProgramMembership\" graphql:\"createProgramMembership\""
}

func (t *AddUserToProgramWithRole) GetCreateProgramMembership() *AddUserToProgramWithRole_CreateProgramMembership {
	if t == nil {
		t = &AddUserToProgramWithRole{}
	}
	return &t.CreateProgramMembership
}

type CreateBulkCSVProgramMembers struct {
	CreateBulkCSVProgramMembership CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership "json:\"createBulkCSVProgramMembership\" graphql:\"createBulkCSVProgramMembership\""
}

func (t *CreateBulkCSVProgramMembers) GetCreateBulkCSVProgramMembership() *CreateBulkCSVProgramMembers_CreateBulkCSVProgramMembership {
	if t == nil {
		t = &CreateBulkCSVProgramMembers{}
	}
	return &t.CreateBulkCSVProgramMembership
}

type CreateBulkProgramMembers struct {
	CreateBulkProgramMembership CreateBulkProgramMembers_CreateBulkProgramMembership "json:\"createBulkProgramMembership\" graphql:\"createBulkProgramMembership\""
}

func (t *CreateBulkProgramMembers) GetCreateBulkProgramMembership() *CreateBulkProgramMembers_CreateBulkProgramMembership {
	if t == nil {
		t = &CreateBulkProgramMembers{}
	}
	return &t.CreateBulkProgramMembership
}

type GetProgramMembersByProgramID struct {
	ProgramMemberships GetProgramMembersByProgramID_ProgramMemberships "json:\"programMemberships\" graphql:\"programMemberships\""
}

func (t *GetProgramMembersByProgramID) GetProgramMemberships() *GetProgramMembersByProgramID_ProgramMemberships {
	if t == nil {
		t = &GetProgramMembersByProgramID{}
	}
	return &t.ProgramMemberships
}

type RemoveUserFromProgram struct {
	DeleteProgramMembership RemoveUserFromProgram_DeleteProgramMembership "json:\"deleteProgramMembership\" graphql:\"deleteProgramMembership\""
}

func (t *RemoveUserFromProgram) GetDeleteProgramMembership() *RemoveUserFromProgram_DeleteProgramMembership {
	if t == nil {
		t = &RemoveUserFromProgram{}
	}
	return &t.DeleteProgramMembership
}

type UpdateUserRoleInProgram struct {
	UpdateProgramMembership UpdateUserRoleInProgram_UpdateProgramMembership "json:\"updateProgramMembership\" graphql:\"updateProgramMembership\""
}

func (t *UpdateUserRoleInProgram) GetUpdateProgramMembership() *UpdateUserRoleInProgram_UpdateProgramMembership {
	if t == nil {
		t = &UpdateUserRoleInProgram{}
	}
	return &t.UpdateProgramMembership
}

type GetAllProgramHistories struct {
	ProgramHistories GetAllProgramHistories_ProgramHistories "json:\"programHistories\" graphql:\"programHistories\""
}

func (t *GetAllProgramHistories) GetProgramHistories() *GetAllProgramHistories_ProgramHistories {
	if t == nil {
		t = &GetAllProgramHistories{}
	}
	return &t.ProgramHistories
}

type GetProgramHistories struct {
	ProgramHistories GetProgramHistories_ProgramHistories "json:\"programHistories\" graphql:\"programHistories\""
}

func (t *GetProgramHistories) GetProgramHistories() *GetProgramHistories_ProgramHistories {
	if t == nil {
		t = &GetProgramHistories{}
	}
	return &t.ProgramHistories
}

type CreateBulkCSVProgramMembership struct {
	CreateBulkCSVProgramMembership CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership "json:\"createBulkCSVProgramMembership\" graphql:\"createBulkCSVProgramMembership\""
}

func (t *CreateBulkCSVProgramMembership) GetCreateBulkCSVProgramMembership() *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership {
	if t == nil {
		t = &CreateBulkCSVProgramMembership{}
	}
	return &t.CreateBulkCSVProgramMembership
}

type CreateBulkProgramMembership struct {
	CreateBulkProgramMembership CreateBulkProgramMembership_CreateBulkProgramMembership "json:\"createBulkProgramMembership\" graphql:\"createBulkProgramMembership\""
}

func (t *CreateBulkProgramMembership) GetCreateBulkProgramMembership() *CreateBulkProgramMembership_CreateBulkProgramMembership {
	if t == nil {
		t = &CreateBulkProgramMembership{}
	}
	return &t.CreateBulkProgramMembership
}

type CreateProgramMembership struct {
	CreateProgramMembership CreateProgramMembership_CreateProgramMembership "json:\"createProgramMembership\" graphql:\"createProgramMembership\""
}

func (t *CreateProgramMembership) GetCreateProgramMembership() *CreateProgramMembership_CreateProgramMembership {
	if t == nil {
		t = &CreateProgramMembership{}
	}
	return &t.CreateProgramMembership
}

type DeleteProgramMembership struct {
	DeleteProgramMembership DeleteProgramMembership_DeleteProgramMembership "json:\"deleteProgramMembership\" graphql:\"deleteProgramMembership\""
}

func (t *DeleteProgramMembership) GetDeleteProgramMembership() *DeleteProgramMembership_DeleteProgramMembership {
	if t == nil {
		t = &DeleteProgramMembership{}
	}
	return &t.DeleteProgramMembership
}

type GetAllProgramMemberships struct {
	ProgramMemberships GetAllProgramMemberships_ProgramMemberships "json:\"programMemberships\" graphql:\"programMemberships\""
}

func (t *GetAllProgramMemberships) GetProgramMemberships() *GetAllProgramMemberships_ProgramMemberships {
	if t == nil {
		t = &GetAllProgramMemberships{}
	}
	return &t.ProgramMemberships
}

type GetProgramMembershipByID struct {
	ProgramMembership GetProgramMembershipByID_ProgramMembership "json:\"programMembership\" graphql:\"programMembership\""
}

func (t *GetProgramMembershipByID) GetProgramMembership() *GetProgramMembershipByID_ProgramMembership {
	if t == nil {
		t = &GetProgramMembershipByID{}
	}
	return &t.ProgramMembership
}

type GetProgramMemberships struct {
	ProgramMemberships GetProgramMemberships_ProgramMemberships "json:\"programMemberships\" graphql:\"programMemberships\""
}

func (t *GetProgramMemberships) GetProgramMemberships() *GetProgramMemberships_ProgramMemberships {
	if t == nil {
		t = &GetProgramMemberships{}
	}
	return &t.ProgramMemberships
}

type UpdateProgramMembership struct {
	UpdateProgramMembership UpdateProgramMembership_UpdateProgramMembership "json:\"updateProgramMembership\" graphql:\"updateProgramMembership\""
}

func (t *UpdateProgramMembership) GetUpdateProgramMembership() *UpdateProgramMembership_UpdateProgramMembership {
	if t == nil {
		t = &UpdateProgramMembership{}
	}
	return &t.UpdateProgramMembership
}

type GetAllProgramMembershipHistories struct {
	ProgramMembershipHistories GetAllProgramMembershipHistories_ProgramMembershipHistories "json:\"programMembershipHistories\" graphql:\"programMembershipHistories\""
}

func (t *GetAllProgramMembershipHistories) GetProgramMembershipHistories() *GetAllProgramMembershipHistories_ProgramMembershipHistories {
	if t == nil {
		t = &GetAllProgramMembershipHistories{}
	}
	return &t.ProgramMembershipHistories
}

type GetProgramMembershipHistories struct {
	ProgramMembershipHistories GetProgramMembershipHistories_ProgramMembershipHistories "json:\"programMembershipHistories\" graphql:\"programMembershipHistories\""
}

func (t *GetProgramMembershipHistories) GetProgramMembershipHistories() *GetProgramMembershipHistories_ProgramMembershipHistories {
	if t == nil {
		t = &GetProgramMembershipHistories{}
	}
	return &t.ProgramMembershipHistories
}

type CreateBulkCSVRisk struct {
	CreateBulkCSVRisk CreateBulkCSVRisk_CreateBulkCSVRisk "json:\"createBulkCSVRisk\" graphql:\"createBulkCSVRisk\""
}

func (t *CreateBulkCSVRisk) GetCreateBulkCSVRisk() *CreateBulkCSVRisk_CreateBulkCSVRisk {
	if t == nil {
		t = &CreateBulkCSVRisk{}
	}
	return &t.CreateBulkCSVRisk
}

type CreateBulkRisk struct {
	CreateBulkRisk CreateBulkRisk_CreateBulkRisk "json:\"createBulkRisk\" graphql:\"createBulkRisk\""
}

func (t *CreateBulkRisk) GetCreateBulkRisk() *CreateBulkRisk_CreateBulkRisk {
	if t == nil {
		t = &CreateBulkRisk{}
	}
	return &t.CreateBulkRisk
}

type CreateRisk struct {
	CreateRisk CreateRisk_CreateRisk "json:\"createRisk\" graphql:\"createRisk\""
}

func (t *CreateRisk) GetCreateRisk() *CreateRisk_CreateRisk {
	if t == nil {
		t = &CreateRisk{}
	}
	return &t.CreateRisk
}

type DeleteRisk struct {
	DeleteRisk DeleteRisk_DeleteRisk "json:\"deleteRisk\" graphql:\"deleteRisk\""
}

func (t *DeleteRisk) GetDeleteRisk() *DeleteRisk_DeleteRisk {
	if t == nil {
		t = &DeleteRisk{}
	}
	return &t.DeleteRisk
}

type GetAllRisks struct {
	Risks GetAllRisks_Risks "json:\"risks\" graphql:\"risks\""
}

func (t *GetAllRisks) GetRisks() *GetAllRisks_Risks {
	if t == nil {
		t = &GetAllRisks{}
	}
	return &t.Risks
}

type GetRiskByID struct {
	Risk GetRiskByID_Risk "json:\"risk\" graphql:\"risk\""
}

func (t *GetRiskByID) GetRisk() *GetRiskByID_Risk {
	if t == nil {
		t = &GetRiskByID{}
	}
	return &t.Risk
}

type GetRisks struct {
	Risks GetRisks_Risks "json:\"risks\" graphql:\"risks\""
}

func (t *GetRisks) GetRisks() *GetRisks_Risks {
	if t == nil {
		t = &GetRisks{}
	}
	return &t.Risks
}

type UpdateRisk struct {
	UpdateRisk UpdateRisk_UpdateRisk "json:\"updateRisk\" graphql:\"updateRisk\""
}

func (t *UpdateRisk) GetUpdateRisk() *UpdateRisk_UpdateRisk {
	if t == nil {
		t = &UpdateRisk{}
	}
	return &t.UpdateRisk
}

type GetAllRiskHistories struct {
	RiskHistories GetAllRiskHistories_RiskHistories "json:\"riskHistories\" graphql:\"riskHistories\""
}

func (t *GetAllRiskHistories) GetRiskHistories() *GetAllRiskHistories_RiskHistories {
	if t == nil {
		t = &GetAllRiskHistories{}
	}
	return &t.RiskHistories
}

type GetRiskHistories struct {
	RiskHistories GetRiskHistories_RiskHistories "json:\"riskHistories\" graphql:\"riskHistories\""
}

func (t *GetRiskHistories) GetRiskHistories() *GetRiskHistories_RiskHistories {
	if t == nil {
		t = &GetRiskHistories{}
	}
	return &t.RiskHistories
}

type GlobalSearch struct {
	Search *GlobalSearch_Search "json:\"search,omitempty\" graphql:\"search\""
}

func (t *GlobalSearch) GetSearch() *GlobalSearch_Search {
	if t == nil {
		t = &GlobalSearch{}
	}
	return t.Search
}

type CreateStandard struct {
	CreateStandard CreateStandard_CreateStandard "json:\"createStandard\" graphql:\"createStandard\""
}

func (t *CreateStandard) GetCreateStandard() *CreateStandard_CreateStandard {
	if t == nil {
		t = &CreateStandard{}
	}
	return &t.CreateStandard
}

type DeleteStandard struct {
	DeleteStandard DeleteStandard_DeleteStandard "json:\"deleteStandard\" graphql:\"deleteStandard\""
}

func (t *DeleteStandard) GetDeleteStandard() *DeleteStandard_DeleteStandard {
	if t == nil {
		t = &DeleteStandard{}
	}
	return &t.DeleteStandard
}

type GetAllStandards struct {
	Standards GetAllStandards_Standards "json:\"standards\" graphql:\"standards\""
}

func (t *GetAllStandards) GetStandards() *GetAllStandards_Standards {
	if t == nil {
		t = &GetAllStandards{}
	}
	return &t.Standards
}

type GetStandardByID struct {
	Standard GetStandardByID_Standard "json:\"standard\" graphql:\"standard\""
}

func (t *GetStandardByID) GetStandard() *GetStandardByID_Standard {
	if t == nil {
		t = &GetStandardByID{}
	}
	return &t.Standard
}

type GetStandards struct {
	Standards GetStandards_Standards "json:\"standards\" graphql:\"standards\""
}

func (t *GetStandards) GetStandards() *GetStandards_Standards {
	if t == nil {
		t = &GetStandards{}
	}
	return &t.Standards
}

type UpdateStandard struct {
	UpdateStandard UpdateStandard_UpdateStandard "json:\"updateStandard\" graphql:\"updateStandard\""
}

func (t *UpdateStandard) GetUpdateStandard() *UpdateStandard_UpdateStandard {
	if t == nil {
		t = &UpdateStandard{}
	}
	return &t.UpdateStandard
}

type GetAllStandardHistories struct {
	StandardHistories GetAllStandardHistories_StandardHistories "json:\"standardHistories\" graphql:\"standardHistories\""
}

func (t *GetAllStandardHistories) GetStandardHistories() *GetAllStandardHistories_StandardHistories {
	if t == nil {
		t = &GetAllStandardHistories{}
	}
	return &t.StandardHistories
}

type GetStandardHistories struct {
	StandardHistories GetStandardHistories_StandardHistories "json:\"standardHistories\" graphql:\"standardHistories\""
}

func (t *GetStandardHistories) GetStandardHistories() *GetStandardHistories_StandardHistories {
	if t == nil {
		t = &GetStandardHistories{}
	}
	return &t.StandardHistories
}

type CreateBulkCSVSubcontrol struct {
	CreateBulkCSVSubcontrol CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol "json:\"createBulkCSVSubcontrol\" graphql:\"createBulkCSVSubcontrol\""
}

func (t *CreateBulkCSVSubcontrol) GetCreateBulkCSVSubcontrol() *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol {
	if t == nil {
		t = &CreateBulkCSVSubcontrol{}
	}
	return &t.CreateBulkCSVSubcontrol
}

type CreateBulkSubcontrol struct {
	CreateBulkSubcontrol CreateBulkSubcontrol_CreateBulkSubcontrol "json:\"createBulkSubcontrol\" graphql:\"createBulkSubcontrol\""
}

func (t *CreateBulkSubcontrol) GetCreateBulkSubcontrol() *CreateBulkSubcontrol_CreateBulkSubcontrol {
	if t == nil {
		t = &CreateBulkSubcontrol{}
	}
	return &t.CreateBulkSubcontrol
}

type CreateSubcontrol struct {
	CreateSubcontrol CreateSubcontrol_CreateSubcontrol "json:\"createSubcontrol\" graphql:\"createSubcontrol\""
}

func (t *CreateSubcontrol) GetCreateSubcontrol() *CreateSubcontrol_CreateSubcontrol {
	if t == nil {
		t = &CreateSubcontrol{}
	}
	return &t.CreateSubcontrol
}

type DeleteSubcontrol struct {
	DeleteSubcontrol DeleteSubcontrol_DeleteSubcontrol "json:\"deleteSubcontrol\" graphql:\"deleteSubcontrol\""
}

func (t *DeleteSubcontrol) GetDeleteSubcontrol() *DeleteSubcontrol_DeleteSubcontrol {
	if t == nil {
		t = &DeleteSubcontrol{}
	}
	return &t.DeleteSubcontrol
}

type GetAllSubcontrols struct {
	Subcontrols GetAllSubcontrols_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
}

func (t *GetAllSubcontrols) GetSubcontrols() *GetAllSubcontrols_Subcontrols {
	if t == nil {
		t = &GetAllSubcontrols{}
	}
	return &t.Subcontrols
}

type GetSubcontrolByID struct {
	Subcontrol GetSubcontrolByID_Subcontrol "json:\"subcontrol\" graphql:\"subcontrol\""
}

func (t *GetSubcontrolByID) GetSubcontrol() *GetSubcontrolByID_Subcontrol {
	if t == nil {
		t = &GetSubcontrolByID{}
	}
	return &t.Subcontrol
}

type GetSubcontrols struct {
	Subcontrols GetSubcontrols_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
}

func (t *GetSubcontrols) GetSubcontrols() *GetSubcontrols_Subcontrols {
	if t == nil {
		t = &GetSubcontrols{}
	}
	return &t.Subcontrols
}

type UpdateSubcontrol struct {
	UpdateSubcontrol UpdateSubcontrol_UpdateSubcontrol "json:\"updateSubcontrol\" graphql:\"updateSubcontrol\""
}

func (t *UpdateSubcontrol) GetUpdateSubcontrol() *UpdateSubcontrol_UpdateSubcontrol {
	if t == nil {
		t = &UpdateSubcontrol{}
	}
	return &t.UpdateSubcontrol
}

type GetAllSubcontrolHistories struct {
	SubcontrolHistories GetAllSubcontrolHistories_SubcontrolHistories "json:\"subcontrolHistories\" graphql:\"subcontrolHistories\""
}

func (t *GetAllSubcontrolHistories) GetSubcontrolHistories() *GetAllSubcontrolHistories_SubcontrolHistories {
	if t == nil {
		t = &GetAllSubcontrolHistories{}
	}
	return &t.SubcontrolHistories
}

type GetSubcontrolHistories struct {
	SubcontrolHistories GetSubcontrolHistories_SubcontrolHistories "json:\"subcontrolHistories\" graphql:\"subcontrolHistories\""
}

func (t *GetSubcontrolHistories) GetSubcontrolHistories() *GetSubcontrolHistories_SubcontrolHistories {
	if t == nil {
		t = &GetSubcontrolHistories{}
	}
	return &t.SubcontrolHistories
}

type CreateBulkCSVSubscriber struct {
	CreateBulkCSVSubscriber CreateBulkCSVSubscriber_CreateBulkCSVSubscriber "json:\"createBulkCSVSubscriber\" graphql:\"createBulkCSVSubscriber\""
}

func (t *CreateBulkCSVSubscriber) GetCreateBulkCSVSubscriber() *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber {
	if t == nil {
		t = &CreateBulkCSVSubscriber{}
	}
	return &t.CreateBulkCSVSubscriber
}

type CreateBulkSubscriber struct {
	CreateBulkSubscriber CreateBulkSubscriber_CreateBulkSubscriber "json:\"createBulkSubscriber\" graphql:\"createBulkSubscriber\""
}

func (t *CreateBulkSubscriber) GetCreateBulkSubscriber() *CreateBulkSubscriber_CreateBulkSubscriber {
	if t == nil {
		t = &CreateBulkSubscriber{}
	}
	return &t.CreateBulkSubscriber
}

type CreateSubscriber struct {
	CreateSubscriber CreateSubscriber_CreateSubscriber "json:\"createSubscriber\" graphql:\"createSubscriber\""
}

func (t *CreateSubscriber) GetCreateSubscriber() *CreateSubscriber_CreateSubscriber {
	if t == nil {
		t = &CreateSubscriber{}
	}
	return &t.CreateSubscriber
}

type DeleteSubscriber struct {
	DeleteSubscriber DeleteSubscriber_DeleteSubscriber "json:\"deleteSubscriber\" graphql:\"deleteSubscriber\""
}

func (t *DeleteSubscriber) GetDeleteSubscriber() *DeleteSubscriber_DeleteSubscriber {
	if t == nil {
		t = &DeleteSubscriber{}
	}
	return &t.DeleteSubscriber
}

type GetAllSubscribers struct {
	Subscribers GetAllSubscribers_Subscribers "json:\"subscribers\" graphql:\"subscribers\""
}

func (t *GetAllSubscribers) GetSubscribers() *GetAllSubscribers_Subscribers {
	if t == nil {
		t = &GetAllSubscribers{}
	}
	return &t.Subscribers
}

type GetSubscriberByEmail struct {
	Subscriber GetSubscriberByEmail_Subscriber "json:\"subscriber\" graphql:\"subscriber\""
}

func (t *GetSubscriberByEmail) GetSubscriber() *GetSubscriberByEmail_Subscriber {
	if t == nil {
		t = &GetSubscriberByEmail{}
	}
	return &t.Subscriber
}

type GetSubscribers struct {
	Subscribers GetSubscribers_Subscribers "json:\"subscribers\" graphql:\"subscribers\""
}

func (t *GetSubscribers) GetSubscribers() *GetSubscribers_Subscribers {
	if t == nil {
		t = &GetSubscribers{}
	}
	return &t.Subscribers
}

type UpdateSubscriber struct {
	UpdateSubscriber UpdateSubscriber_UpdateSubscriber "json:\"updateSubscriber\" graphql:\"updateSubscriber\""
}

func (t *UpdateSubscriber) GetUpdateSubscriber() *UpdateSubscriber_UpdateSubscriber {
	if t == nil {
		t = &UpdateSubscriber{}
	}
	return &t.UpdateSubscriber
}

type CreateBulkCSVTask struct {
	CreateBulkCSVTask CreateBulkCSVTask_CreateBulkCSVTask "json:\"createBulkCSVTask\" graphql:\"createBulkCSVTask\""
}

func (t *CreateBulkCSVTask) GetCreateBulkCSVTask() *CreateBulkCSVTask_CreateBulkCSVTask {
	if t == nil {
		t = &CreateBulkCSVTask{}
	}
	return &t.CreateBulkCSVTask
}

type CreateBulkTask struct {
	CreateBulkTask CreateBulkTask_CreateBulkTask "json:\"createBulkTask\" graphql:\"createBulkTask\""
}

func (t *CreateBulkTask) GetCreateBulkTask() *CreateBulkTask_CreateBulkTask {
	if t == nil {
		t = &CreateBulkTask{}
	}
	return &t.CreateBulkTask
}

type CreateTask struct {
	CreateTask CreateTask_CreateTask "json:\"createTask\" graphql:\"createTask\""
}

func (t *CreateTask) GetCreateTask() *CreateTask_CreateTask {
	if t == nil {
		t = &CreateTask{}
	}
	return &t.CreateTask
}

type DeleteTask struct {
	DeleteTask DeleteTask_DeleteTask "json:\"deleteTask\" graphql:\"deleteTask\""
}

func (t *DeleteTask) GetDeleteTask() *DeleteTask_DeleteTask {
	if t == nil {
		t = &DeleteTask{}
	}
	return &t.DeleteTask
}

type GetAllTasks struct {
	Tasks GetAllTasks_Tasks "json:\"tasks\" graphql:\"tasks\""
}

func (t *GetAllTasks) GetTasks() *GetAllTasks_Tasks {
	if t == nil {
		t = &GetAllTasks{}
	}
	return &t.Tasks
}

type GetTaskByID struct {
	Task GetTaskByID_Task "json:\"task\" graphql:\"task\""
}

func (t *GetTaskByID) GetTask() *GetTaskByID_Task {
	if t == nil {
		t = &GetTaskByID{}
	}
	return &t.Task
}

type GetTasks struct {
	Tasks GetTasks_Tasks "json:\"tasks\" graphql:\"tasks\""
}

func (t *GetTasks) GetTasks() *GetTasks_Tasks {
	if t == nil {
		t = &GetTasks{}
	}
	return &t.Tasks
}

type UpdateTask struct {
	UpdateTask UpdateTask_UpdateTask "json:\"updateTask\" graphql:\"updateTask\""
}

func (t *UpdateTask) GetUpdateTask() *UpdateTask_UpdateTask {
	if t == nil {
		t = &UpdateTask{}
	}
	return &t.UpdateTask
}

type UpdateTaskComment struct {
	UpdateTaskComment UpdateTaskComment_UpdateTaskComment "json:\"updateTaskComment\" graphql:\"updateTaskComment\""
}

func (t *UpdateTaskComment) GetUpdateTaskComment() *UpdateTaskComment_UpdateTaskComment {
	if t == nil {
		t = &UpdateTaskComment{}
	}
	return &t.UpdateTaskComment
}

type GetAllTaskHistories struct {
	TaskHistories GetAllTaskHistories_TaskHistories "json:\"taskHistories\" graphql:\"taskHistories\""
}

func (t *GetAllTaskHistories) GetTaskHistories() *GetAllTaskHistories_TaskHistories {
	if t == nil {
		t = &GetAllTaskHistories{}
	}
	return &t.TaskHistories
}

type GetTaskHistories struct {
	TaskHistories GetTaskHistories_TaskHistories "json:\"taskHistories\" graphql:\"taskHistories\""
}

func (t *GetTaskHistories) GetTaskHistories() *GetTaskHistories_TaskHistories {
	if t == nil {
		t = &GetTaskHistories{}
	}
	return &t.TaskHistories
}

type CreateBulkCSVTemplate struct {
	CreateBulkCSVTemplate CreateBulkCSVTemplate_CreateBulkCSVTemplate "json:\"createBulkCSVTemplate\" graphql:\"createBulkCSVTemplate\""
}

func (t *CreateBulkCSVTemplate) GetCreateBulkCSVTemplate() *CreateBulkCSVTemplate_CreateBulkCSVTemplate {
	if t == nil {
		t = &CreateBulkCSVTemplate{}
	}
	return &t.CreateBulkCSVTemplate
}

type CreateBulkTemplate struct {
	CreateBulkTemplate CreateBulkTemplate_CreateBulkTemplate "json:\"createBulkTemplate\" graphql:\"createBulkTemplate\""
}

func (t *CreateBulkTemplate) GetCreateBulkTemplate() *CreateBulkTemplate_CreateBulkTemplate {
	if t == nil {
		t = &CreateBulkTemplate{}
	}
	return &t.CreateBulkTemplate
}

type CreateTemplate struct {
	CreateTemplate CreateTemplate_CreateTemplate "json:\"createTemplate\" graphql:\"createTemplate\""
}

func (t *CreateTemplate) GetCreateTemplate() *CreateTemplate_CreateTemplate {
	if t == nil {
		t = &CreateTemplate{}
	}
	return &t.CreateTemplate
}

type GetAllTemplates struct {
	Templates GetAllTemplates_Templates "json:\"templates\" graphql:\"templates\""
}

func (t *GetAllTemplates) GetTemplates() *GetAllTemplates_Templates {
	if t == nil {
		t = &GetAllTemplates{}
	}
	return &t.Templates
}

type GetTemplateByID struct {
	Template GetTemplateByID_Template "json:\"template\" graphql:\"template\""
}

func (t *GetTemplateByID) GetTemplate() *GetTemplateByID_Template {
	if t == nil {
		t = &GetTemplateByID{}
	}
	return &t.Template
}

type UpdateTemplate struct {
	UpdateTemplate UpdateTemplate_UpdateTemplate "json:\"updateTemplate\" graphql:\"updateTemplate\""
}

func (t *UpdateTemplate) GetUpdateTemplate() *UpdateTemplate_UpdateTemplate {
	if t == nil {
		t = &UpdateTemplate{}
	}
	return &t.UpdateTemplate
}

type GetAllTemplateHistories struct {
	TemplateHistories GetAllTemplateHistories_TemplateHistories "json:\"templateHistories\" graphql:\"templateHistories\""
}

func (t *GetAllTemplateHistories) GetTemplateHistories() *GetAllTemplateHistories_TemplateHistories {
	if t == nil {
		t = &GetAllTemplateHistories{}
	}
	return &t.TemplateHistories
}

type GetTemplateHistories struct {
	TemplateHistories GetTemplateHistories_TemplateHistories "json:\"templateHistories\" graphql:\"templateHistories\""
}

func (t *GetTemplateHistories) GetTemplateHistories() *GetTemplateHistories_TemplateHistories {
	if t == nil {
		t = &GetTemplateHistories{}
	}
	return &t.TemplateHistories
}

type CreateTFASetting struct {
	CreateTFASetting CreateTFASetting_CreateTFASetting "json:\"createTFASetting\" graphql:\"createTFASetting\""
}

func (t *CreateTFASetting) GetCreateTFASetting() *CreateTFASetting_CreateTFASetting {
	if t == nil {
		t = &CreateTFASetting{}
	}
	return &t.CreateTFASetting
}

type GetAllTFASettings struct {
	TfaSettings GetAllTFASettings_TfaSettings "json:\"tfaSettings\" graphql:\"tfaSettings\""
}

func (t *GetAllTFASettings) GetTfaSettings() *GetAllTFASettings_TfaSettings {
	if t == nil {
		t = &GetAllTFASettings{}
	}
	return &t.TfaSettings
}

type GetTFASetting struct {
	TfaSetting GetTFASetting_TfaSetting "json:\"tfaSetting\" graphql:\"tfaSetting\""
}

func (t *GetTFASetting) GetTfaSetting() *GetTFASetting_TfaSetting {
	if t == nil {
		t = &GetTFASetting{}
	}
	return &t.TfaSetting
}

type UpdateTFASetting struct {
	UpdateTFASetting UpdateTFASetting_UpdateTFASetting "json:\"updateTFASetting\" graphql:\"updateTFASetting\""
}

func (t *UpdateTFASetting) GetUpdateTFASetting() *UpdateTFASetting_UpdateTFASetting {
	if t == nil {
		t = &UpdateTFASetting{}
	}
	return &t.UpdateTFASetting
}

type CreateUser struct {
	CreateUser CreateUser_CreateUser "json:\"createUser\" graphql:\"createUser\""
}

func (t *CreateUser) GetCreateUser() *CreateUser_CreateUser {
	if t == nil {
		t = &CreateUser{}
	}
	return &t.CreateUser
}

type DeleteUser struct {
	DeleteUser DeleteUser_DeleteUser "json:\"deleteUser\" graphql:\"deleteUser\""
}

func (t *DeleteUser) GetDeleteUser() *DeleteUser_DeleteUser {
	if t == nil {
		t = &DeleteUser{}
	}
	return &t.DeleteUser
}

type GetAllUsers struct {
	Users GetAllUsers_Users "json:\"users\" graphql:\"users\""
}

func (t *GetAllUsers) GetUsers() *GetAllUsers_Users {
	if t == nil {
		t = &GetAllUsers{}
	}
	return &t.Users
}

type GetSelf struct {
	Self GetSelf_Self "json:\"self\" graphql:\"self\""
}

func (t *GetSelf) GetSelf() *GetSelf_Self {
	if t == nil {
		t = &GetSelf{}
	}
	return &t.Self
}

type GetUserByID struct {
	User GetUserByID_User "json:\"user\" graphql:\"user\""
}

func (t *GetUserByID) GetUser() *GetUserByID_User {
	if t == nil {
		t = &GetUserByID{}
	}
	return &t.User
}

type GetUserByIDWithOrgs struct {
	User GetUserByIDWithOrgs_User "json:\"user\" graphql:\"user\""
}

func (t *GetUserByIDWithOrgs) GetUser() *GetUserByIDWithOrgs_User {
	if t == nil {
		t = &GetUserByIDWithOrgs{}
	}
	return &t.User
}

type UpdateUser struct {
	UpdateUser UpdateUser_UpdateUser "json:\"updateUser\" graphql:\"updateUser\""
}

func (t *UpdateUser) GetUpdateUser() *UpdateUser_UpdateUser {
	if t == nil {
		t = &UpdateUser{}
	}
	return &t.UpdateUser
}

type GetAllUserHistories struct {
	UserHistories GetAllUserHistories_UserHistories "json:\"userHistories\" graphql:\"userHistories\""
}

func (t *GetAllUserHistories) GetUserHistories() *GetAllUserHistories_UserHistories {
	if t == nil {
		t = &GetAllUserHistories{}
	}
	return &t.UserHistories
}

type GetUserHistories struct {
	UserHistories GetUserHistories_UserHistories "json:\"userHistories\" graphql:\"userHistories\""
}

func (t *GetUserHistories) GetUserHistories() *GetUserHistories_UserHistories {
	if t == nil {
		t = &GetUserHistories{}
	}
	return &t.UserHistories
}

type GetAllUserSettings struct {
	UserSettings GetAllUserSettings_UserSettings "json:\"userSettings\" graphql:\"userSettings\""
}

func (t *GetAllUserSettings) GetUserSettings() *GetAllUserSettings_UserSettings {
	if t == nil {
		t = &GetAllUserSettings{}
	}
	return &t.UserSettings
}

type GetUserSettingByID struct {
	UserSetting GetUserSettingByID_UserSetting "json:\"userSetting\" graphql:\"userSetting\""
}

func (t *GetUserSettingByID) GetUserSetting() *GetUserSettingByID_UserSetting {
	if t == nil {
		t = &GetUserSettingByID{}
	}
	return &t.UserSetting
}

type GetUserSettings struct {
	UserSettings GetUserSettings_UserSettings "json:\"userSettings\" graphql:\"userSettings\""
}

func (t *GetUserSettings) GetUserSettings() *GetUserSettings_UserSettings {
	if t == nil {
		t = &GetUserSettings{}
	}
	return &t.UserSettings
}

type UpdateUserSetting struct {
	UpdateUserSetting UpdateUserSetting_UpdateUserSetting "json:\"updateUserSetting\" graphql:\"updateUserSetting\""
}

func (t *UpdateUserSetting) GetUpdateUserSetting() *UpdateUserSetting_UpdateUserSetting {
	if t == nil {
		t = &UpdateUserSetting{}
	}
	return &t.UpdateUserSetting
}

type GetAllUserSettingHistories struct {
	UserSettingHistories GetAllUserSettingHistories_UserSettingHistories "json:\"userSettingHistories\" graphql:\"userSettingHistories\""
}

func (t *GetAllUserSettingHistories) GetUserSettingHistories() *GetAllUserSettingHistories_UserSettingHistories {
	if t == nil {
		t = &GetAllUserSettingHistories{}
	}
	return &t.UserSettingHistories
}

type GetUserSettingHistories struct {
	UserSettingHistories GetUserSettingHistories_UserSettingHistories "json:\"userSettingHistories\" graphql:\"userSettingHistories\""
}

func (t *GetUserSettingHistories) GetUserSettingHistories() *GetUserSettingHistories_UserSettingHistories {
	if t == nil {
		t = &GetUserSettingHistories{}
	}
	return &t.UserSettingHistories
}

const CreateBulkCSVActionPlanDocument = `mutation CreateBulkCSVActionPlan ($input: Upload!) {
	createBulkCSVActionPlan(input: $input) {
		actionPlans {
			actionPlanType
			approvalRequired
			createdAt
			createdBy
			details
			dueDate
			id
			name
			priority
			reviewDue
			reviewFrequency
			revision
			source
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVActionPlan(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVActionPlan, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVActionPlan
	if err := c.Client.Post(ctx, "CreateBulkCSVActionPlan", CreateBulkCSVActionPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkActionPlanDocument = `mutation CreateBulkActionPlan ($input: [CreateActionPlanInput!]) {
	createBulkActionPlan(input: $input) {
		actionPlans {
			actionPlanType
			approvalRequired
			createdAt
			createdBy
			details
			dueDate
			id
			name
			priority
			reviewDue
			reviewFrequency
			revision
			source
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkActionPlan(ctx context.Context, input []*CreateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkActionPlan, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkActionPlan
	if err := c.Client.Post(ctx, "CreateBulkActionPlan", CreateBulkActionPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateActionPlanDocument = `mutation CreateActionPlan ($input: CreateActionPlanInput!) {
	createActionPlan(input: $input) {
		actionPlan {
			actionPlanType
			approvalRequired
			createdAt
			createdBy
			details
			dueDate
			id
			name
			priority
			reviewDue
			reviewFrequency
			revision
			source
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateActionPlan(ctx context.Context, input CreateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*CreateActionPlan, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateActionPlan
	if err := c.Client.Post(ctx, "CreateActionPlan", CreateActionPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteActionPlanDocument = `mutation DeleteActionPlan ($deleteActionPlanId: ID!) {
	deleteActionPlan(id: $deleteActionPlanId) {
		deletedID
	}
}
`

func (c *Client) DeleteActionPlan(ctx context.Context, deleteActionPlanID string, interceptors ...clientv2.RequestInterceptor) (*DeleteActionPlan, error) {
	vars := map[string]any{
		"deleteActionPlanId": deleteActionPlanID,
	}

	var res DeleteActionPlan
	if err := c.Client.Post(ctx, "DeleteActionPlan", DeleteActionPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllActionPlansDocument = `query GetAllActionPlans {
	actionPlans {
		edges {
			node {
				actionPlanType
				approvalRequired
				createdAt
				createdBy
				details
				dueDate
				id
				name
				priority
				reviewDue
				reviewFrequency
				revision
				source
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllActionPlans(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllActionPlans, error) {
	vars := map[string]any{}

	var res GetAllActionPlans
	if err := c.Client.Post(ctx, "GetAllActionPlans", GetAllActionPlansDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetActionPlanByIDDocument = `query GetActionPlanByID ($actionPlanId: ID!) {
	actionPlan(id: $actionPlanId) {
		actionPlanType
		approvalRequired
		createdAt
		createdBy
		details
		dueDate
		id
		name
		priority
		reviewDue
		reviewFrequency
		revision
		source
		status
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetActionPlanByID(ctx context.Context, actionPlanID string, interceptors ...clientv2.RequestInterceptor) (*GetActionPlanByID, error) {
	vars := map[string]any{
		"actionPlanId": actionPlanID,
	}

	var res GetActionPlanByID
	if err := c.Client.Post(ctx, "GetActionPlanByID", GetActionPlanByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetActionPlansDocument = `query GetActionPlans ($where: ActionPlanWhereInput) {
	actionPlans(where: $where) {
		edges {
			node {
				actionPlanType
				approvalRequired
				createdAt
				createdBy
				details
				dueDate
				id
				name
				priority
				reviewDue
				reviewFrequency
				revision
				source
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetActionPlans(ctx context.Context, where *ActionPlanWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetActionPlans, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetActionPlans
	if err := c.Client.Post(ctx, "GetActionPlans", GetActionPlansDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateActionPlanDocument = `mutation UpdateActionPlan ($updateActionPlanId: ID!, $input: UpdateActionPlanInput!) {
	updateActionPlan(id: $updateActionPlanId, input: $input) {
		actionPlan {
			actionPlanType
			approvalRequired
			createdAt
			createdBy
			details
			dueDate
			id
			name
			priority
			reviewDue
			reviewFrequency
			revision
			source
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateActionPlan(ctx context.Context, updateActionPlanID string, input UpdateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*UpdateActionPlan, error) {
	vars := map[string]any{
		"updateActionPlanId": updateActionPlanID,
		"input":              input,
	}

	var res UpdateActionPlan
	if err := c.Client.Post(ctx, "UpdateActionPlan", UpdateActionPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllActionPlanHistoriesDocument = `query GetAllActionPlanHistories {
	actionPlanHistories {
		edges {
			node {
				actionPlanType
				approvalRequired
				createdAt
				createdBy
				details
				dueDate
				historyTime
				id
				name
				operation
				priority
				ref
				reviewDue
				reviewFrequency
				revision
				source
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllActionPlanHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllActionPlanHistories, error) {
	vars := map[string]any{}

	var res GetAllActionPlanHistories
	if err := c.Client.Post(ctx, "GetAllActionPlanHistories", GetAllActionPlanHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetActionPlanHistoriesDocument = `query GetActionPlanHistories ($where: ActionPlanHistoryWhereInput) {
	actionPlanHistories(where: $where) {
		edges {
			node {
				actionPlanType
				approvalRequired
				createdAt
				createdBy
				details
				dueDate
				historyTime
				id
				name
				operation
				priority
				ref
				reviewDue
				reviewFrequency
				revision
				source
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetActionPlanHistories(ctx context.Context, where *ActionPlanHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetActionPlanHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetActionPlanHistories
	if err := c.Client.Post(ctx, "GetActionPlanHistories", GetActionPlanHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const AdminSearchDocument = `query AdminSearch ($query: String!) {
	adminSearch(query: $query) {
		totalCount
		apiTokens {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					tags
					ownerID
					name
					scopes
					revokedReason
					revokedBy
				}
			}
		}
		actionPlans {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					tags
					revision
					name
					actionPlanType
					details
					approverID
					delegateID
					ownerID
					source
				}
			}
		}
		contacts {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					tags
					ownerID
					fullName
					title
					company
					email
					phoneNumber
					address
				}
			}
		}
		controls {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					displayID
					tags
					description
					referenceID
					auditorReferenceID
					category
					categoryID
					subcategory
					mappedCategories
					assessmentObjectives
					assessmentMethods
					controlQuestions
					implementationGuidance
					exampleEvidence
					references
					controlOwnerID
					delegateID
					ownerID
					refCode
					standardID
				}
			}
		}
		controlImplementations {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					tags
					ownerID
					details
				}
			}
		}
		controlObjectives {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					displayID
					tags
					revision
					ownerID
					name
					desiredOutcome
					status
					controlObjectiveType
					category
					subcategory
				}
			}
		}
		documentData {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					tags
					ownerID
					templateID
					data
				}
			}
		}
		entities {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					tags
					ownerID
					name
					displayName
					description
					domains
					entityTypeID
					status
				}
			}
		}
		entityTypes {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					tags
					ownerID
					name
				}
			}
		}
		events {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
					eventID
					correlationID
					eventType
					metadata
				}
			}
		}
		evidences {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					displayID
					tags
					ownerID
					name
					description
					collectionProcedure
					source
					url
				}
			}
		}
		files {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					tags
					providedFileName
					providedFileExtension
					detectedMimeType
					md5Hash
					detectedContentType
					storeKey
					categoryType
					uri
					storageScheme
					storageVolume
					storagePath
				}
			}
		}
		groups {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					displayID
					tags
					ownerID
					name
					displayName
				}
			}
		}
		integrations {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					tags
					ownerID
					name
					kind
				}
			}
		}
		internalPolicies {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					displayID
					tags
					revision
					ownerID
					name
					policyType
					details
					approverID
					delegateID
				}
			}
		}
		invites {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					ownerID
					recipient
					requestorID
				}
			}
		}
		mappedControls {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					tags
					mappingType
					relation
				}
			}
		}
		narratives {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					displayID
					tags
					ownerID
					name
					description
					details
				}
			}
		}
		orgSubscriptions {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					tags
					ownerID
					stripeSubscriptionID
					productTier
					productPrice
					stripeProductTierID
					stripeSubscriptionStatus
					stripeCustomerID
					daysUntilDue
					features
					featureLookupKeys
				}
			}
		}
		organizations {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					tags
					name
					displayName
					avatarRemoteURL
					avatarLocalFileID
				}
			}
		}
		organizationSettings {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					tags
					domains
					billingContact
					billingEmail
					billingPhone
					billingAddress
					taxIdentifier
					organizationID
					allowedEmailDomains
				}
			}
		}
		personalAccessTokens {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					tags
					name
					scopes
					revokedReason
					revokedBy
				}
			}
		}
		procedures {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					displayID
					tags
					revision
					ownerID
					name
					procedureType
					details
					approverID
					delegateID
				}
			}
		}
		programs {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					displayID
					tags
					ownerID
					name
					description
				}
			}
		}
		risks {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					displayID
					tags
					ownerID
					name
					riskType
					category
					mitigation
					details
					businessCosts
					stakeholderID
					delegateID
				}
			}
		}
		standards {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					tags
					revision
					ownerID
					name
					shortName
					framework
					description
					governingBodyLogoURL
					governingBody
					domains
					link
					standardType
					version
				}
			}
		}
		subcontrols {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					displayID
					tags
					description
					referenceID
					auditorReferenceID
					category
					categoryID
					subcategory
					mappedCategories
					assessmentObjectives
					assessmentMethods
					controlQuestions
					implementationGuidance
					exampleEvidence
					references
					controlOwnerID
					delegateID
					ownerID
					refCode
					controlID
				}
			}
		}
		subscribers {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					tags
					ownerID
					email
					phoneNumber
				}
			}
		}
		tasks {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					displayID
					tags
					ownerID
					title
					description
					details
					category
					assigneeID
					assignerID
				}
			}
		}
		templates {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					tags
					ownerID
					name
					description
					jsonconfig
					uischema
				}
			}
		}
		users {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					displayID
					tags
					email
					firstName
					lastName
					displayName
					avatarRemoteURL
					avatarLocalFileID
					sub
				}
			}
		}
		userSettings {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					deletedBy
					id
					tags
					userID
				}
			}
		}
	}
}
`

func (c *Client) AdminSearch(ctx context.Context, query string, interceptors ...clientv2.RequestInterceptor) (*AdminSearch, error) {
	vars := map[string]any{
		"query": query,
	}

	var res AdminSearch
	if err := c.Client.Post(ctx, "AdminSearch", AdminSearchDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateAPITokenDocument = `mutation CreateAPIToken ($input: CreateAPITokenInput!) {
	createAPIToken(input: $input) {
		apiToken {
			createdAt
			createdBy
			description
			expiresAt
			id
			isActive
			lastUsedAt
			name
			ownerID
			revokedAt
			revokedBy
			revokedReason
			scopes
			tags
			token
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateAPIToken(ctx context.Context, input CreateAPITokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateAPIToken, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateAPIToken
	if err := c.Client.Post(ctx, "CreateAPIToken", CreateAPITokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteAPITokenDocument = `mutation DeleteAPIToken ($deleteAPITokenId: ID!) {
	deleteAPIToken(id: $deleteAPITokenId) {
		deletedID
	}
}
`

func (c *Client) DeleteAPIToken(ctx context.Context, deleteAPITokenID string, interceptors ...clientv2.RequestInterceptor) (*DeleteAPIToken, error) {
	vars := map[string]any{
		"deleteAPITokenId": deleteAPITokenID,
	}

	var res DeleteAPIToken
	if err := c.Client.Post(ctx, "DeleteAPIToken", DeleteAPITokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllAPITokensDocument = `query GetAllAPITokens {
	apiTokens {
		edges {
			node {
				createdAt
				createdBy
				description
				expiresAt
				id
				isActive
				lastUsedAt
				name
				ownerID
				revokedAt
				revokedBy
				revokedReason
				scopes
				tags
				token
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllAPITokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllAPITokens, error) {
	vars := map[string]any{}

	var res GetAllAPITokens
	if err := c.Client.Post(ctx, "GetAllAPITokens", GetAllAPITokensDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAPITokenByIDDocument = `query GetAPITokenByID ($apiTokenId: ID!) {
	apiToken(id: $apiTokenId) {
		createdAt
		createdBy
		description
		expiresAt
		id
		isActive
		lastUsedAt
		name
		owner {
			id
			displayName
		}
		revokedAt
		revokedBy
		revokedReason
		scopes
		tags
		token
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetAPITokenByID(ctx context.Context, apiTokenID string, interceptors ...clientv2.RequestInterceptor) (*GetAPITokenByID, error) {
	vars := map[string]any{
		"apiTokenId": apiTokenID,
	}

	var res GetAPITokenByID
	if err := c.Client.Post(ctx, "GetAPITokenByID", GetAPITokenByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAPITokensDocument = `query GetAPITokens ($where: APITokenWhereInput) {
	apiTokens(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				expiresAt
				id
				isActive
				lastUsedAt
				name
				ownerID
				revokedAt
				revokedBy
				revokedReason
				scopes
				tags
				token
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAPITokens(ctx context.Context, where *APITokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetAPITokens, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetAPITokens
	if err := c.Client.Post(ctx, "GetAPITokens", GetAPITokensDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateAPITokenDocument = `mutation UpdateAPIToken ($updateAPITokenId: ID!, $input: UpdateAPITokenInput!) {
	updateAPIToken(id: $updateAPITokenId, input: $input) {
		apiToken {
			createdAt
			createdBy
			description
			expiresAt
			id
			isActive
			lastUsedAt
			name
			ownerID
			revokedAt
			revokedBy
			revokedReason
			scopes
			tags
			token
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateAPIToken(ctx context.Context, updateAPITokenID string, input UpdateAPITokenInput, interceptors ...clientv2.RequestInterceptor) (*UpdateAPIToken, error) {
	vars := map[string]any{
		"updateAPITokenId": updateAPITokenID,
		"input":            input,
	}

	var res UpdateAPIToken
	if err := c.Client.Post(ctx, "UpdateAPIToken", UpdateAPITokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkContactDocument = `mutation CreateBulkContact ($input: [CreateContactInput!]) {
	createBulkContact(input: $input) {
		contacts {
			address
			company
			createdAt
			createdBy
			email
			fullName
			id
			ownerID
			phoneNumber
			status
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkContact(ctx context.Context, input []*CreateContactInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkContact, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkContact
	if err := c.Client.Post(ctx, "CreateBulkContact", CreateBulkContactDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVContactDocument = `mutation CreateBulkCSVContact ($input: Upload!) {
	createBulkCSVContact(input: $input) {
		contacts {
			address
			company
			createdAt
			createdBy
			email
			fullName
			id
			ownerID
			phoneNumber
			status
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVContact(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVContact, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVContact
	if err := c.Client.Post(ctx, "CreateBulkCSVContact", CreateBulkCSVContactDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateContactDocument = `mutation CreateContact ($input: CreateContactInput!) {
	createContact(input: $input) {
		contact {
			address
			company
			createdAt
			createdBy
			email
			fullName
			id
			ownerID
			phoneNumber
			status
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateContact(ctx context.Context, input CreateContactInput, interceptors ...clientv2.RequestInterceptor) (*CreateContact, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateContact
	if err := c.Client.Post(ctx, "CreateContact", CreateContactDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteContactDocument = `mutation DeleteContact ($deleteContactId: ID!) {
	deleteContact(id: $deleteContactId) {
		deletedID
	}
}
`

func (c *Client) DeleteContact(ctx context.Context, deleteContactID string, interceptors ...clientv2.RequestInterceptor) (*DeleteContact, error) {
	vars := map[string]any{
		"deleteContactId": deleteContactID,
	}

	var res DeleteContact
	if err := c.Client.Post(ctx, "DeleteContact", DeleteContactDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllContactsDocument = `query GetAllContacts {
	contacts {
		edges {
			node {
				address
				company
				createdAt
				createdBy
				email
				fullName
				id
				ownerID
				phoneNumber
				status
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllContacts(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllContacts, error) {
	vars := map[string]any{}

	var res GetAllContacts
	if err := c.Client.Post(ctx, "GetAllContacts", GetAllContactsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetContactByIDDocument = `query GetContactByID ($contactId: ID!) {
	contact(id: $contactId) {
		address
		company
		createdAt
		createdBy
		email
		fullName
		id
		ownerID
		phoneNumber
		status
		tags
		title
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetContactByID(ctx context.Context, contactID string, interceptors ...clientv2.RequestInterceptor) (*GetContactByID, error) {
	vars := map[string]any{
		"contactId": contactID,
	}

	var res GetContactByID
	if err := c.Client.Post(ctx, "GetContactByID", GetContactByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetContactsDocument = `query GetContacts ($where: ContactWhereInput) {
	contacts(where: $where) {
		edges {
			node {
				address
				company
				createdAt
				createdBy
				email
				fullName
				id
				ownerID
				phoneNumber
				status
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetContacts(ctx context.Context, where *ContactWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetContacts, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetContacts
	if err := c.Client.Post(ctx, "GetContacts", GetContactsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateContactDocument = `mutation UpdateContact ($updateContactId: ID!, $input: UpdateContactInput!) {
	updateContact(id: $updateContactId, input: $input) {
		contact {
			address
			company
			createdAt
			createdBy
			email
			fullName
			id
			ownerID
			phoneNumber
			status
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateContact(ctx context.Context, updateContactID string, input UpdateContactInput, interceptors ...clientv2.RequestInterceptor) (*UpdateContact, error) {
	vars := map[string]any{
		"updateContactId": updateContactID,
		"input":           input,
	}

	var res UpdateContact
	if err := c.Client.Post(ctx, "UpdateContact", UpdateContactDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllContactHistoriesDocument = `query GetAllContactHistories {
	contactHistories {
		edges {
			node {
				address
				company
				createdAt
				createdBy
				email
				fullName
				historyTime
				id
				operation
				ownerID
				phoneNumber
				ref
				status
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllContactHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllContactHistories, error) {
	vars := map[string]any{}

	var res GetAllContactHistories
	if err := c.Client.Post(ctx, "GetAllContactHistories", GetAllContactHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetContactHistoriesDocument = `query GetContactHistories ($where: ContactHistoryWhereInput) {
	contactHistories(where: $where) {
		edges {
			node {
				address
				company
				createdAt
				createdBy
				email
				fullName
				historyTime
				id
				operation
				ownerID
				phoneNumber
				ref
				status
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetContactHistories(ctx context.Context, where *ContactHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetContactHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetContactHistories
	if err := c.Client.Post(ctx, "GetContactHistories", GetContactHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkControlDocument = `mutation CreateBulkControl ($input: [CreateControlInput!]) {
	createBulkControl(input: $input) {
		controls {
			assessmentMethods
			assessmentObjectives
			category
			categoryID
			controlQuestions
			controlType
			createdAt
			createdBy
			description
			displayID
			exampleEvidence
			id
			implementationGuidance
			mappedCategories
			ownerID
			refCode
			references
			source
			standardID
			status
			subcategory
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkControl(ctx context.Context, input []*CreateControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkControl, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkControl
	if err := c.Client.Post(ctx, "CreateBulkControl", CreateBulkControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVControlDocument = `mutation CreateBulkCSVControl ($input: Upload!) {
	createBulkCSVControl(input: $input) {
		controls {
			assessmentMethods
			assessmentObjectives
			category
			categoryID
			controlQuestions
			controlType
			createdAt
			createdBy
			description
			displayID
			exampleEvidence
			id
			implementationGuidance
			mappedCategories
			ownerID
			refCode
			references
			source
			standardID
			status
			subcategory
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVControl(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVControl, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVControl
	if err := c.Client.Post(ctx, "CreateBulkCSVControl", CreateBulkCSVControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateControlDocument = `mutation CreateControl ($input: CreateControlInput!) {
	createControl(input: $input) {
		control {
			assessmentMethods
			assessmentObjectives
			category
			categoryID
			controlQuestions
			controlType
			createdAt
			createdBy
			description
			displayID
			exampleEvidence
			id
			implementationGuidance
			mappedCategories
			ownerID
			refCode
			references
			source
			standardID
			status
			subcategory
			tags
			updatedAt
			updatedBy
			controlOwner {
				id
				name
			}
			delegate {
				id
				name
			}
			programs {
				edges {
					node {
						id
						displayID
						name
					}
				}
			}
			controlImplementations {
				edges {
					node {
						id
						details
						status
					}
				}
			}
			editors {
				id
				name
			}
			viewers {
				id
				name
			}
			blockedGroups {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateControl(ctx context.Context, input CreateControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateControl, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateControl
	if err := c.Client.Post(ctx, "CreateControl", CreateControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteControlDocument = `mutation DeleteControl ($deleteControlId: ID!) {
	deleteControl(id: $deleteControlId) {
		deletedID
	}
}
`

func (c *Client) DeleteControl(ctx context.Context, deleteControlID string, interceptors ...clientv2.RequestInterceptor) (*DeleteControl, error) {
	vars := map[string]any{
		"deleteControlId": deleteControlID,
	}

	var res DeleteControl
	if err := c.Client.Post(ctx, "DeleteControl", DeleteControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllControlsDocument = `query GetAllControls {
	controls {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				assessmentMethods
				assessmentObjectives
				category
				categoryID
				controlQuestions
				controlType
				createdAt
				createdBy
				description
				displayID
				exampleEvidence
				id
				implementationGuidance
				mappedCategories
				ownerID
				refCode
				references
				source
				standardID
				status
				subcategory
				tags
				updatedAt
				updatedBy
				controlOwner {
					id
					name
				}
				delegate {
					id
					name
				}
				standard {
					id
					name
					shortName
					governingBody
				}
				controlImplementations {
					edges {
						node {
							id
							details
							status
						}
					}
				}
				programs {
					edges {
						node {
							id
							displayID
							name
						}
					}
				}
				editors {
					id
					name
				}
				viewers {
					id
					name
				}
				blockedGroups {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetAllControls(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControls, error) {
	vars := map[string]any{}

	var res GetAllControls
	if err := c.Client.Post(ctx, "GetAllControls", GetAllControlsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlByIDDocument = `query GetControlByID ($controlId: ID!) {
	control(id: $controlId) {
		assessmentMethods
		assessmentObjectives
		category
		categoryID
		controlQuestions
		controlType
		createdAt
		createdBy
		description
		displayID
		exampleEvidence
		id
		implementationGuidance
		mappedCategories
		ownerID
		refCode
		references
		source
		standardID
		status
		subcategory
		tags
		updatedAt
		updatedBy
		controlOwner {
			id
			name
		}
		delegate {
			id
			name
		}
		standard {
			id
			name
			shortName
			governingBody
		}
		controlImplementations {
			edges {
				node {
					id
					details
					status
				}
			}
		}
		programs {
			edges {
				node {
					id
					displayID
					name
				}
			}
		}
		editors {
			id
			name
		}
		viewers {
			id
			name
		}
		blockedGroups {
			id
			name
		}
	}
}
`

func (c *Client) GetControlByID(ctx context.Context, controlID string, interceptors ...clientv2.RequestInterceptor) (*GetControlByID, error) {
	vars := map[string]any{
		"controlId": controlID,
	}

	var res GetControlByID
	if err := c.Client.Post(ctx, "GetControlByID", GetControlByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlsDocument = `query GetControls ($first: Int, $last: Int, $where: ControlWhereInput) {
	controls(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				assessmentMethods
				assessmentObjectives
				category
				categoryID
				controlQuestions
				controlType
				createdAt
				createdBy
				description
				displayID
				exampleEvidence
				id
				implementationGuidance
				mappedCategories
				ownerID
				refCode
				references
				source
				standardID
				status
				subcategory
				tags
				updatedAt
				updatedBy
				controlOwner {
					id
					name
				}
				delegate {
					id
					name
				}
				standard {
					id
					name
					shortName
					governingBody
				}
				controlImplementations {
					edges {
						node {
							id
							details
							status
						}
					}
				}
				programs {
					edges {
						node {
							id
							displayID
							name
						}
					}
				}
				editors {
					id
					name
				}
				viewers {
					id
					name
				}
				blockedGroups {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetControls(ctx context.Context, first *int64, last *int64, where *ControlWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControls, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetControls
	if err := c.Client.Post(ctx, "GetControls", GetControlsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateControlDocument = `mutation UpdateControl ($updateControlId: ID!, $input: UpdateControlInput!) {
	updateControl(id: $updateControlId, input: $input) {
		control {
			assessmentMethods
			assessmentObjectives
			category
			categoryID
			controlQuestions
			controlType
			createdAt
			createdBy
			description
			displayID
			exampleEvidence
			id
			implementationGuidance
			mappedCategories
			ownerID
			refCode
			references
			source
			standardID
			status
			subcategory
			tags
			updatedAt
			updatedBy
			controlOwner {
				id
				name
			}
			delegate {
				id
				name
			}
			standard {
				id
				name
				shortName
				governingBody
			}
			controlImplementations {
				edges {
					node {
						id
						details
						status
					}
				}
			}
			programs {
				edges {
					node {
						id
						displayID
						name
					}
				}
			}
			editors {
				id
				name
			}
			viewers {
				id
				name
			}
			blockedGroups {
				id
				name
			}
		}
	}
}
`

func (c *Client) UpdateControl(ctx context.Context, updateControlID string, input UpdateControlInput, interceptors ...clientv2.RequestInterceptor) (*UpdateControl, error) {
	vars := map[string]any{
		"updateControlId": updateControlID,
		"input":           input,
	}

	var res UpdateControl
	if err := c.Client.Post(ctx, "UpdateControl", UpdateControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateControlsByCloneDocument = `mutation CreateControlsByClone ($input: CloneControlInput!) {
	createControlsByClone(input: $input) {
		controls {
			assessmentMethods
			assessmentObjectives
			category
			categoryID
			controlQuestions
			controlType
			createdAt
			createdBy
			description
			displayID
			exampleEvidence
			id
			implementationGuidance
			mappedCategories
			ownerID
			refCode
			references
			source
			standardID
			status
			subcategory
			tags
			updatedAt
			updatedBy
			programs {
				edges {
					node {
						id
						displayID
						name
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateControlsByClone(ctx context.Context, input CloneControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateControlsByClone, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateControlsByClone
	if err := c.Client.Post(ctx, "CreateControlsByClone", CreateControlsByCloneDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllControlHistoriesDocument = `query GetAllControlHistories {
	controlHistories {
		edges {
			node {
				assessmentMethods
				assessmentObjectives
				category
				categoryID
				controlQuestions
				controlType
				createdAt
				createdBy
				description
				displayID
				exampleEvidence
				historyTime
				id
				implementationGuidance
				mappedCategories
				operation
				ownerID
				ref
				refCode
				references
				source
				standardID
				status
				subcategory
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllControlHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlHistories, error) {
	vars := map[string]any{}

	var res GetAllControlHistories
	if err := c.Client.Post(ctx, "GetAllControlHistories", GetAllControlHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlHistoriesDocument = `query GetControlHistories ($where: ControlHistoryWhereInput) {
	controlHistories(where: $where) {
		edges {
			node {
				assessmentMethods
				assessmentObjectives
				category
				categoryID
				controlQuestions
				controlType
				createdAt
				createdBy
				description
				displayID
				exampleEvidence
				historyTime
				id
				implementationGuidance
				mappedCategories
				operation
				ownerID
				ref
				refCode
				references
				source
				standardID
				status
				subcategory
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetControlHistories(ctx context.Context, where *ControlHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetControlHistories
	if err := c.Client.Post(ctx, "GetControlHistories", GetControlHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkControlImplementationDocument = `mutation CreateBulkControlImplementation ($input: [CreateControlImplementationInput!]) {
	createBulkControlImplementation(input: $input) {
		controlImplementations {
			createdAt
			createdBy
			details
			id
			implementationDate
			status
			tags
			updatedAt
			updatedBy
			verificationDate
			verified
			controls {
				totalCount
				edges {
					node {
						id
						refCode
					}
				}
			}
			subcontrols {
				totalCount
				edges {
					node {
						id
						refCode
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateBulkControlImplementation(ctx context.Context, input []*CreateControlImplementationInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkControlImplementation, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkControlImplementation
	if err := c.Client.Post(ctx, "CreateBulkControlImplementation", CreateBulkControlImplementationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVControlImplementationDocument = `mutation CreateBulkCSVControlImplementation ($input: Upload!) {
	createBulkCSVControlImplementation(input: $input) {
		controlImplementations {
			createdAt
			createdBy
			details
			id
			implementationDate
			status
			tags
			updatedAt
			updatedBy
			verificationDate
			verified
			controls {
				totalCount
				edges {
					node {
						id
						refCode
					}
				}
			}
			subcontrols {
				totalCount
				edges {
					node {
						id
						refCode
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVControlImplementation(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVControlImplementation, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVControlImplementation
	if err := c.Client.Post(ctx, "CreateBulkCSVControlImplementation", CreateBulkCSVControlImplementationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateControlImplementationDocument = `mutation CreateControlImplementation ($input: CreateControlImplementationInput!) {
	createControlImplementation(input: $input) {
		controlImplementation {
			createdAt
			createdBy
			details
			id
			implementationDate
			status
			tags
			updatedAt
			updatedBy
			verificationDate
			verified
			controls {
				totalCount
				edges {
					node {
						id
						refCode
					}
				}
			}
			subcontrols {
				totalCount
				edges {
					node {
						id
						refCode
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateControlImplementation(ctx context.Context, input CreateControlImplementationInput, interceptors ...clientv2.RequestInterceptor) (*CreateControlImplementation, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateControlImplementation
	if err := c.Client.Post(ctx, "CreateControlImplementation", CreateControlImplementationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteControlImplementationDocument = `mutation DeleteControlImplementation ($deleteControlImplementationId: ID!) {
	deleteControlImplementation(id: $deleteControlImplementationId) {
		deletedID
	}
}
`

func (c *Client) DeleteControlImplementation(ctx context.Context, deleteControlImplementationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteControlImplementation, error) {
	vars := map[string]any{
		"deleteControlImplementationId": deleteControlImplementationID,
	}

	var res DeleteControlImplementation
	if err := c.Client.Post(ctx, "DeleteControlImplementation", DeleteControlImplementationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllControlImplementationsDocument = `query GetAllControlImplementations {
	controlImplementations {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				details
				id
				implementationDate
				status
				tags
				updatedAt
				updatedBy
				verificationDate
				verified
				controls {
					totalCount
					edges {
						node {
							id
							refCode
						}
					}
				}
				subcontrols {
					totalCount
					edges {
						node {
							id
							refCode
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetAllControlImplementations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlImplementations, error) {
	vars := map[string]any{}

	var res GetAllControlImplementations
	if err := c.Client.Post(ctx, "GetAllControlImplementations", GetAllControlImplementationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlImplementationByIDDocument = `query GetControlImplementationByID ($controlImplementationId: ID!) {
	controlImplementation(id: $controlImplementationId) {
		createdAt
		createdBy
		details
		id
		implementationDate
		status
		tags
		updatedAt
		updatedBy
		verificationDate
		verified
		controls {
			totalCount
			edges {
				node {
					id
					refCode
				}
			}
		}
		subcontrols {
			totalCount
			edges {
				node {
					id
					refCode
				}
			}
		}
	}
}
`

func (c *Client) GetControlImplementationByID(ctx context.Context, controlImplementationID string, interceptors ...clientv2.RequestInterceptor) (*GetControlImplementationByID, error) {
	vars := map[string]any{
		"controlImplementationId": controlImplementationID,
	}

	var res GetControlImplementationByID
	if err := c.Client.Post(ctx, "GetControlImplementationByID", GetControlImplementationByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlImplementationsDocument = `query GetControlImplementations ($where: ControlImplementationWhereInput) {
	controlImplementations(where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				details
				id
				implementationDate
				status
				tags
				updatedAt
				updatedBy
				verificationDate
				verified
				controls {
					totalCount
					edges {
						node {
							id
							refCode
						}
					}
				}
				subcontrols {
					totalCount
					edges {
						node {
							id
							refCode
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetControlImplementations(ctx context.Context, where *ControlImplementationWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlImplementations, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetControlImplementations
	if err := c.Client.Post(ctx, "GetControlImplementations", GetControlImplementationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateControlImplementationDocument = `mutation UpdateControlImplementation ($updateControlImplementationId: ID!, $input: UpdateControlImplementationInput!) {
	updateControlImplementation(id: $updateControlImplementationId, input: $input) {
		controlImplementation {
			createdAt
			createdBy
			details
			id
			implementationDate
			status
			tags
			updatedAt
			updatedBy
			verificationDate
			verified
			controls {
				totalCount
				edges {
					node {
						id
						refCode
					}
				}
			}
			subcontrols {
				totalCount
				edges {
					node {
						id
						refCode
					}
				}
			}
		}
	}
}
`

func (c *Client) UpdateControlImplementation(ctx context.Context, updateControlImplementationID string, input UpdateControlImplementationInput, interceptors ...clientv2.RequestInterceptor) (*UpdateControlImplementation, error) {
	vars := map[string]any{
		"updateControlImplementationId": updateControlImplementationID,
		"input":                         input,
	}

	var res UpdateControlImplementation
	if err := c.Client.Post(ctx, "UpdateControlImplementation", UpdateControlImplementationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllControlImplementationHistoriesDocument = `query GetAllControlImplementationHistories {
	controlImplementationHistories {
		edges {
			node {
				createdAt
				createdBy
				details
				historyTime
				id
				implementationDate
				operation
				ref
				status
				tags
				updatedAt
				updatedBy
				verificationDate
				verified
			}
		}
	}
}
`

func (c *Client) GetAllControlImplementationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlImplementationHistories, error) {
	vars := map[string]any{}

	var res GetAllControlImplementationHistories
	if err := c.Client.Post(ctx, "GetAllControlImplementationHistories", GetAllControlImplementationHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlImplementationHistoriesDocument = `query GetControlImplementationHistories ($where: ControlImplementationHistoryWhereInput) {
	controlImplementationHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				details
				historyTime
				id
				implementationDate
				operation
				ref
				status
				tags
				updatedAt
				updatedBy
				verificationDate
				verified
			}
		}
	}
}
`

func (c *Client) GetControlImplementationHistories(ctx context.Context, where *ControlImplementationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlImplementationHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetControlImplementationHistories
	if err := c.Client.Post(ctx, "GetControlImplementationHistories", GetControlImplementationHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVControlObjectiveDocument = `mutation CreateBulkCSVControlObjective ($input: Upload!) {
	createBulkCSVControlObjective(input: $input) {
		controlObjectives {
			category
			controlObjectiveType
			createdAt
			createdBy
			desiredOutcome
			displayID
			id
			name
			ownerID
			source
			status
			subcategory
			tags
			updatedAt
			updatedBy
			revision
		}
	}
}
`

func (c *Client) CreateBulkCSVControlObjective(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVControlObjective, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVControlObjective
	if err := c.Client.Post(ctx, "CreateBulkCSVControlObjective", CreateBulkCSVControlObjectiveDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkControlObjectiveDocument = `mutation CreateBulkControlObjective ($input: [CreateControlObjectiveInput!]) {
	createBulkControlObjective(input: $input) {
		controlObjectives {
			category
			controlObjectiveType
			createdAt
			createdBy
			desiredOutcome
			displayID
			id
			name
			ownerID
			source
			status
			subcategory
			tags
			updatedAt
			updatedBy
			revision
		}
	}
}
`

func (c *Client) CreateBulkControlObjective(ctx context.Context, input []*CreateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkControlObjective, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkControlObjective
	if err := c.Client.Post(ctx, "CreateBulkControlObjective", CreateBulkControlObjectiveDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateControlObjectiveDocument = `mutation CreateControlObjective ($input: CreateControlObjectiveInput!) {
	createControlObjective(input: $input) {
		controlObjective {
			category
			controlObjectiveType
			createdAt
			createdBy
			desiredOutcome
			displayID
			id
			name
			ownerID
			source
			status
			subcategory
			tags
			updatedAt
			updatedBy
			revision
			controls {
				edges {
					node {
						id
						displayID
						refCode
						description
					}
				}
			}
			programs {
				edges {
					node {
						id
						displayID
						name
					}
				}
			}
			editors {
				id
				name
			}
			viewers {
				id
				name
			}
			blockedGroups {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateControlObjective(ctx context.Context, input CreateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*CreateControlObjective, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateControlObjective
	if err := c.Client.Post(ctx, "CreateControlObjective", CreateControlObjectiveDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteControlObjectiveDocument = `mutation DeleteControlObjective ($deleteControlObjectiveId: ID!) {
	deleteControlObjective(id: $deleteControlObjectiveId) {
		deletedID
	}
}
`

func (c *Client) DeleteControlObjective(ctx context.Context, deleteControlObjectiveID string, interceptors ...clientv2.RequestInterceptor) (*DeleteControlObjective, error) {
	vars := map[string]any{
		"deleteControlObjectiveId": deleteControlObjectiveID,
	}

	var res DeleteControlObjective
	if err := c.Client.Post(ctx, "DeleteControlObjective", DeleteControlObjectiveDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllControlObjectivesDocument = `query GetAllControlObjectives {
	controlObjectives {
		edges {
			node {
				category
				controlObjectiveType
				createdAt
				createdBy
				desiredOutcome
				displayID
				id
				name
				ownerID
				source
				status
				subcategory
				tags
				updatedAt
				updatedBy
				revision
				controls {
					edges {
						node {
							id
							displayID
							refCode
							description
						}
					}
				}
				programs {
					edges {
						node {
							id
							displayID
							name
						}
					}
				}
				editors {
					id
					name
				}
				viewers {
					id
					name
				}
				blockedGroups {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetAllControlObjectives(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlObjectives, error) {
	vars := map[string]any{}

	var res GetAllControlObjectives
	if err := c.Client.Post(ctx, "GetAllControlObjectives", GetAllControlObjectivesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlObjectiveByIDDocument = `query GetControlObjectiveByID ($controlObjectiveId: ID!) {
	controlObjective(id: $controlObjectiveId) {
		category
		controlObjectiveType
		createdAt
		createdBy
		desiredOutcome
		displayID
		id
		name
		ownerID
		source
		status
		subcategory
		tags
		updatedAt
		updatedBy
		revision
		controls {
			edges {
				node {
					id
					displayID
					refCode
					description
				}
			}
		}
		programs {
			edges {
				node {
					id
					displayID
					name
				}
			}
		}
		editors {
			id
			name
		}
		viewers {
			id
			name
		}
		blockedGroups {
			id
			name
		}
	}
}
`

func (c *Client) GetControlObjectiveByID(ctx context.Context, controlObjectiveID string, interceptors ...clientv2.RequestInterceptor) (*GetControlObjectiveByID, error) {
	vars := map[string]any{
		"controlObjectiveId": controlObjectiveID,
	}

	var res GetControlObjectiveByID
	if err := c.Client.Post(ctx, "GetControlObjectiveByID", GetControlObjectiveByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlObjectivesDocument = `query GetControlObjectives ($where: ControlObjectiveWhereInput) {
	controlObjectives(where: $where) {
		edges {
			node {
				category
				controlObjectiveType
				createdAt
				createdBy
				desiredOutcome
				displayID
				id
				name
				ownerID
				source
				status
				subcategory
				tags
				updatedAt
				updatedBy
				revision
				controls {
					edges {
						node {
							id
							displayID
							refCode
							description
						}
					}
				}
				programs {
					edges {
						node {
							id
							displayID
							name
						}
					}
				}
				editors {
					id
					name
				}
				viewers {
					id
					name
				}
				blockedGroups {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetControlObjectives(ctx context.Context, where *ControlObjectiveWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlObjectives, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetControlObjectives
	if err := c.Client.Post(ctx, "GetControlObjectives", GetControlObjectivesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateControlObjectiveDocument = `mutation UpdateControlObjective ($updateControlObjectiveId: ID!, $input: UpdateControlObjectiveInput!) {
	updateControlObjective(id: $updateControlObjectiveId, input: $input) {
		controlObjective {
			category
			controlObjectiveType
			createdAt
			createdBy
			desiredOutcome
			displayID
			id
			name
			ownerID
			source
			status
			subcategory
			tags
			updatedAt
			updatedBy
			revision
			controls {
				edges {
					node {
						id
						displayID
						refCode
						description
					}
				}
			}
			programs {
				edges {
					node {
						id
						displayID
						name
					}
				}
			}
			editors {
				id
				name
			}
			viewers {
				id
				name
			}
			blockedGroups {
				id
				name
			}
		}
	}
}
`

func (c *Client) UpdateControlObjective(ctx context.Context, updateControlObjectiveID string, input UpdateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*UpdateControlObjective, error) {
	vars := map[string]any{
		"updateControlObjectiveId": updateControlObjectiveID,
		"input":                    input,
	}

	var res UpdateControlObjective
	if err := c.Client.Post(ctx, "UpdateControlObjective", UpdateControlObjectiveDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllControlObjectiveHistoriesDocument = `query GetAllControlObjectiveHistories {
	controlObjectiveHistories {
		edges {
			node {
				category
				controlObjectiveType
				createdAt
				createdBy
				desiredOutcome
				displayID
				historyTime
				id
				name
				operation
				ownerID
				ref
				revision
				source
				status
				subcategory
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllControlObjectiveHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlObjectiveHistories, error) {
	vars := map[string]any{}

	var res GetAllControlObjectiveHistories
	if err := c.Client.Post(ctx, "GetAllControlObjectiveHistories", GetAllControlObjectiveHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlObjectiveHistoriesDocument = `query GetControlObjectiveHistories ($where: ControlObjectiveHistoryWhereInput) {
	controlObjectiveHistories(where: $where) {
		edges {
			node {
				category
				controlObjectiveType
				createdAt
				createdBy
				desiredOutcome
				displayID
				historyTime
				id
				name
				operation
				ownerID
				ref
				revision
				source
				status
				subcategory
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetControlObjectiveHistories(ctx context.Context, where *ControlObjectiveHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlObjectiveHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetControlObjectiveHistories
	if err := c.Client.Post(ctx, "GetControlObjectiveHistories", GetControlObjectiveHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateDocumentDataDocument = `mutation CreateDocumentData ($input: CreateDocumentDataInput!) {
	createDocumentData(input: $input) {
		documentData {
			id
			templateID
			data
			createdAt
			createdBy
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateDocumentData(ctx context.Context, input CreateDocumentDataInput, interceptors ...clientv2.RequestInterceptor) (*CreateDocumentData, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateDocumentData
	if err := c.Client.Post(ctx, "CreateDocumentData", CreateDocumentDataDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteDocumentDataDocument = `mutation DeleteDocumentData ($deleteDocumentDataId: ID!) {
	deleteDocumentData(id: $deleteDocumentDataId) {
		deletedID
	}
}
`

func (c *Client) DeleteDocumentData(ctx context.Context, deleteDocumentDataID string, interceptors ...clientv2.RequestInterceptor) (*DeleteDocumentData, error) {
	vars := map[string]any{
		"deleteDocumentDataId": deleteDocumentDataID,
	}

	var res DeleteDocumentData
	if err := c.Client.Post(ctx, "DeleteDocumentData", DeleteDocumentDataDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetDocumentDataByIDDocument = `query GetDocumentDataByID ($documentDataId: ID!) {
	documentData(id: $documentDataId) {
		id
		templateID
		data
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetDocumentDataByID(ctx context.Context, documentDataID string, interceptors ...clientv2.RequestInterceptor) (*GetDocumentDataByID, error) {
	vars := map[string]any{
		"documentDataId": documentDataID,
	}

	var res GetDocumentDataByID
	if err := c.Client.Post(ctx, "GetDocumentDataByID", GetDocumentDataByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateDocumentDataDocument = `mutation UpdateDocumentData ($updateDocumentDataId: ID!, $input: UpdateDocumentDataInput!) {
	updateDocumentData(id: $updateDocumentDataId, input: $input) {
		documentData {
			id
			templateID
			data
			createdAt
			createdBy
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateDocumentData(ctx context.Context, updateDocumentDataID string, input UpdateDocumentDataInput, interceptors ...clientv2.RequestInterceptor) (*UpdateDocumentData, error) {
	vars := map[string]any{
		"updateDocumentDataId": updateDocumentDataID,
		"input":                input,
	}

	var res UpdateDocumentData
	if err := c.Client.Post(ctx, "UpdateDocumentData", UpdateDocumentDataDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllDocumentDataHistoriesDocument = `query GetAllDocumentDataHistories {
	documentDataHistories {
		edges {
			node {
				createdAt
				createdBy
				data
				historyTime
				id
				operation
				ownerID
				ref
				tags
				templateID
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllDocumentDataHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllDocumentDataHistories, error) {
	vars := map[string]any{}

	var res GetAllDocumentDataHistories
	if err := c.Client.Post(ctx, "GetAllDocumentDataHistories", GetAllDocumentDataHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetDocumentDataHistoriesDocument = `query GetDocumentDataHistories ($where: DocumentDataHistoryWhereInput) {
	documentDataHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				data
				historyTime
				id
				operation
				ownerID
				ref
				tags
				templateID
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetDocumentDataHistories(ctx context.Context, where *DocumentDataHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetDocumentDataHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetDocumentDataHistories
	if err := c.Client.Post(ctx, "GetDocumentDataHistories", GetDocumentDataHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVEntityDocument = `mutation CreateBulkCSVEntity ($input: Upload!) {
	createBulkCSVEntity(input: $input) {
		entities {
			createdAt
			createdBy
			description
			displayName
			status
			domains
			notes {
				edges {
					node {
						text
						updatedAt
						updatedBy
					}
				}
			}
			entityType {
				name
			}
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVEntity(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntity, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVEntity
	if err := c.Client.Post(ctx, "CreateBulkCSVEntity", CreateBulkCSVEntityDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkEntityDocument = `mutation CreateBulkEntity ($input: [CreateEntityInput!]) {
	createBulkEntity(input: $input) {
		entities {
			createdAt
			createdBy
			description
			displayName
			status
			domains
			notes {
				edges {
					node {
						text
						updatedAt
						updatedBy
					}
				}
			}
			entityType {
				name
			}
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkEntity(ctx context.Context, input []*CreateEntityInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntity, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkEntity
	if err := c.Client.Post(ctx, "CreateBulkEntity", CreateBulkEntityDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateEntityDocument = `mutation CreateEntity ($input: CreateEntityInput!) {
	createEntity(input: $input) {
		entity {
			createdAt
			createdBy
			description
			displayName
			status
			domains
			notes {
				edges {
					node {
						text
						updatedAt
						updatedBy
					}
				}
			}
			entityType {
				name
			}
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateEntity(ctx context.Context, input CreateEntityInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntity, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateEntity
	if err := c.Client.Post(ctx, "CreateEntity", CreateEntityDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteEntityDocument = `mutation DeleteEntity ($deleteEntityId: ID!) {
	deleteEntity(id: $deleteEntityId) {
		deletedID
	}
}
`

func (c *Client) DeleteEntity(ctx context.Context, deleteEntityID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntity, error) {
	vars := map[string]any{
		"deleteEntityId": deleteEntityID,
	}

	var res DeleteEntity
	if err := c.Client.Post(ctx, "DeleteEntity", DeleteEntityDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEntitiesDocument = `query GetAllEntities {
	entities {
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				status
				domains
				notes {
					edges {
						node {
							text
							updatedAt
							updatedBy
						}
					}
				}
				entityType {
					name
				}
				id
				name
				ownerID
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllEntities(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntities, error) {
	vars := map[string]any{}

	var res GetAllEntities
	if err := c.Client.Post(ctx, "GetAllEntities", GetAllEntitiesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntitiesDocument = `query GetEntities ($where: EntityWhereInput) {
	entities(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				status
				domains
				notes {
					edges {
						node {
							text
							updatedAt
							updatedBy
						}
					}
				}
				entityType {
					name
				}
				id
				name
				ownerID
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetEntities(ctx context.Context, where *EntityWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntities, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEntities
	if err := c.Client.Post(ctx, "GetEntities", GetEntitiesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntityByIDDocument = `query GetEntityByID ($entityId: ID!) {
	entity(id: $entityId) {
		createdAt
		createdBy
		description
		displayName
		status
		domains
		notes {
			edges {
				node {
					text
					updatedAt
					updatedBy
				}
			}
		}
		entityType {
			name
		}
		id
		name
		ownerID
		contacts {
			edges {
				node {
					id
					fullName
					email
					title
					company
					address
					phoneNumber
				}
			}
		}
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetEntityByID(ctx context.Context, entityID string, interceptors ...clientv2.RequestInterceptor) (*GetEntityByID, error) {
	vars := map[string]any{
		"entityId": entityID,
	}

	var res GetEntityByID
	if err := c.Client.Post(ctx, "GetEntityByID", GetEntityByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateEntityDocument = `mutation UpdateEntity ($updateEntityId: ID!, $input: UpdateEntityInput!) {
	updateEntity(id: $updateEntityId, input: $input) {
		entity {
			createdAt
			createdBy
			description
			displayName
			status
			domains
			notes {
				edges {
					node {
						text
						updatedAt
						updatedBy
					}
				}
			}
			entityType {
				name
			}
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateEntity(ctx context.Context, updateEntityID string, input UpdateEntityInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntity, error) {
	vars := map[string]any{
		"updateEntityId": updateEntityID,
		"input":          input,
	}

	var res UpdateEntity
	if err := c.Client.Post(ctx, "UpdateEntity", UpdateEntityDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEntityHistoriesDocument = `query GetAllEntityHistories {
	entityHistories {
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				domains
				entityTypeID
				historyTime
				id
				name
				operation
				ownerID
				ref
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllEntityHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntityHistories, error) {
	vars := map[string]any{}

	var res GetAllEntityHistories
	if err := c.Client.Post(ctx, "GetAllEntityHistories", GetAllEntityHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntityHistoriesDocument = `query GetEntityHistories ($where: EntityHistoryWhereInput) {
	entityHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				domains
				entityTypeID
				historyTime
				id
				name
				operation
				ownerID
				ref
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetEntityHistories(ctx context.Context, where *EntityHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntityHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEntityHistories
	if err := c.Client.Post(ctx, "GetEntityHistories", GetEntityHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVEntityTypeDocument = `mutation CreateBulkCSVEntityType ($input: Upload!) {
	createBulkCSVEntityType(input: $input) {
		entityTypes {
			createdAt
			createdBy
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVEntityType(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntityType, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVEntityType
	if err := c.Client.Post(ctx, "CreateBulkCSVEntityType", CreateBulkCSVEntityTypeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkEntityTypeDocument = `mutation CreateBulkEntityType ($input: [CreateEntityTypeInput!]) {
	createBulkEntityType(input: $input) {
		entityTypes {
			createdAt
			createdBy
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkEntityType(ctx context.Context, input []*CreateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntityType, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkEntityType
	if err := c.Client.Post(ctx, "CreateBulkEntityType", CreateBulkEntityTypeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateEntityTypeDocument = `mutation CreateEntityType ($input: CreateEntityTypeInput!) {
	createEntityType(input: $input) {
		entityType {
			createdAt
			createdBy
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateEntityType(ctx context.Context, input CreateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntityType, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateEntityType
	if err := c.Client.Post(ctx, "CreateEntityType", CreateEntityTypeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteEntityTypeDocument = `mutation DeleteEntityType ($deleteEntityTypeId: ID!) {
	deleteEntityType(id: $deleteEntityTypeId) {
		deletedID
	}
}
`

func (c *Client) DeleteEntityType(ctx context.Context, deleteEntityTypeID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntityType, error) {
	vars := map[string]any{
		"deleteEntityTypeId": deleteEntityTypeID,
	}

	var res DeleteEntityType
	if err := c.Client.Post(ctx, "DeleteEntityType", DeleteEntityTypeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEntityTypesDocument = `query GetAllEntityTypes {
	entityTypes {
		edges {
			node {
				createdAt
				createdBy
				id
				name
				ownerID
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllEntityTypes(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntityTypes, error) {
	vars := map[string]any{}

	var res GetAllEntityTypes
	if err := c.Client.Post(ctx, "GetAllEntityTypes", GetAllEntityTypesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntityTypeByIDDocument = `query GetEntityTypeByID ($entityTypeId: ID!) {
	entityType(id: $entityTypeId) {
		createdAt
		createdBy
		id
		name
		ownerID
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetEntityTypeByID(ctx context.Context, entityTypeID string, interceptors ...clientv2.RequestInterceptor) (*GetEntityTypeByID, error) {
	vars := map[string]any{
		"entityTypeId": entityTypeID,
	}

	var res GetEntityTypeByID
	if err := c.Client.Post(ctx, "GetEntityTypeByID", GetEntityTypeByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntityTypesDocument = `query GetEntityTypes ($where: EntityTypeWhereInput) {
	entityTypes(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				id
				name
				ownerID
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetEntityTypes(ctx context.Context, where *EntityTypeWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntityTypes, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEntityTypes
	if err := c.Client.Post(ctx, "GetEntityTypes", GetEntityTypesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateEntityTypeDocument = `mutation UpdateEntityType ($updateEntityTypeId: ID!, $input: UpdateEntityTypeInput!) {
	updateEntityType(id: $updateEntityTypeId, input: $input) {
		entityType {
			createdAt
			createdBy
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateEntityType(ctx context.Context, updateEntityTypeID string, input UpdateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntityType, error) {
	vars := map[string]any{
		"updateEntityTypeId": updateEntityTypeID,
		"input":              input,
	}

	var res UpdateEntityType
	if err := c.Client.Post(ctx, "UpdateEntityType", UpdateEntityTypeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEntityTypeHistoriesDocument = `query GetAllEntityTypeHistories {
	entityTypeHistories {
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllEntityTypeHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntityTypeHistories, error) {
	vars := map[string]any{}

	var res GetAllEntityTypeHistories
	if err := c.Client.Post(ctx, "GetAllEntityTypeHistories", GetAllEntityTypeHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntityTypeHistoriesDocument = `query GetEntityTypeHistories ($where: EntityTypeHistoryWhereInput) {
	entityTypeHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetEntityTypeHistories(ctx context.Context, where *EntityTypeHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntityTypeHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEntityTypeHistories
	if err := c.Client.Post(ctx, "GetEntityTypeHistories", GetEntityTypeHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVEventDocument = `mutation CreateBulkCSVEvent ($input: Upload!) {
	createBulkCSVEvent(input: $input) {
		events {
			id
			eventID
			correlationID
			eventType
			metadata
			users {
				edges {
					node {
						id
					}
				}
			}
			groups {
				edges {
					node {
						id
					}
				}
			}
			integrations {
				edges {
					node {
						id
					}
				}
			}
			organizations {
				edges {
					node {
						id
					}
				}
			}
			invites {
				edges {
					node {
						id
					}
				}
			}
			personalAccessTokens {
				edges {
					node {
						id
					}
				}
			}
			secrets {
				edges {
					node {
						id
					}
				}
			}
			orgmemberships {
				edges {
					node {
						id
					}
				}
			}
			groupmemberships {
				edges {
					node {
						id
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVEvent(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEvent, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVEvent
	if err := c.Client.Post(ctx, "CreateBulkCSVEvent", CreateBulkCSVEventDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkEventDocument = `mutation CreateBulkEvent ($input: [CreateEventInput!]) {
	createBulkEvent(input: $input) {
		events {
			id
			eventID
			correlationID
			eventType
			metadata
			users {
				edges {
					node {
						id
					}
				}
			}
			groups {
				edges {
					node {
						id
					}
				}
			}
			integrations {
				edges {
					node {
						id
					}
				}
			}
			organizations {
				edges {
					node {
						id
					}
				}
			}
			invites {
				edges {
					node {
						id
					}
				}
			}
			personalAccessTokens {
				edges {
					node {
						id
					}
				}
			}
			secrets {
				edges {
					node {
						id
					}
				}
			}
			orgmemberships {
				edges {
					node {
						id
					}
				}
			}
			groupmemberships {
				edges {
					node {
						id
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateBulkEvent(ctx context.Context, input []*CreateEventInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEvent, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkEvent
	if err := c.Client.Post(ctx, "CreateBulkEvent", CreateBulkEventDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateEventDocument = `mutation CreateEvent ($input: CreateEventInput!) {
	createEvent(input: $input) {
		event {
			id
			eventID
			correlationID
			eventType
			metadata
		}
	}
}
`

func (c *Client) CreateEvent(ctx context.Context, input CreateEventInput, interceptors ...clientv2.RequestInterceptor) (*CreateEvent, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateEvent
	if err := c.Client.Post(ctx, "CreateEvent", CreateEventDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteEventDocument = `mutation DeleteEvent ($deleteEventId: ID!) {
	deleteEvent(id: $deleteEventId) {
		deletedID
	}
}
`

func (c *Client) DeleteEvent(ctx context.Context, deleteEventID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEvent, error) {
	vars := map[string]any{
		"deleteEventId": deleteEventID,
	}

	var res DeleteEvent
	if err := c.Client.Post(ctx, "DeleteEvent", DeleteEventDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEventsDocument = `query GetAllEvents {
	events {
		edges {
			node {
				id
				createdAt
				updatedAt
				createdBy
				updatedBy
				eventID
				correlationID
				eventType
				metadata
				users {
					edges {
						node {
							id
						}
					}
				}
				groups {
					edges {
						node {
							id
						}
					}
				}
				integrations {
					edges {
						node {
							id
						}
					}
				}
				organizations {
					edges {
						node {
							id
						}
					}
				}
				invites {
					edges {
						node {
							id
						}
					}
				}
				personalAccessTokens {
					edges {
						node {
							id
						}
					}
				}
				secrets {
					edges {
						node {
							id
						}
					}
				}
				orgmemberships {
					edges {
						node {
							id
						}
					}
				}
				groupmemberships {
					edges {
						node {
							id
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetAllEvents(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEvents, error) {
	vars := map[string]any{}

	var res GetAllEvents
	if err := c.Client.Post(ctx, "GetAllEvents", GetAllEventsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEventByIDDocument = `query GetEventByID ($eventId: ID!) {
	event(id: $eventId) {
		id
		createdAt
		updatedAt
		createdBy
		updatedBy
		eventID
		correlationID
		eventType
		metadata
		users {
			edges {
				node {
					id
				}
			}
		}
		groups {
			edges {
				node {
					id
				}
			}
		}
		integrations {
			edges {
				node {
					id
				}
			}
		}
		organizations {
			edges {
				node {
					id
				}
			}
		}
		invites {
			edges {
				node {
					id
				}
			}
		}
		personalAccessTokens {
			edges {
				node {
					id
				}
			}
		}
		secrets {
			edges {
				node {
					id
				}
			}
		}
		orgmemberships {
			edges {
				node {
					id
				}
			}
		}
		groupmemberships {
			edges {
				node {
					id
				}
			}
		}
	}
}
`

func (c *Client) GetEventByID(ctx context.Context, eventID string, interceptors ...clientv2.RequestInterceptor) (*GetEventByID, error) {
	vars := map[string]any{
		"eventId": eventID,
	}

	var res GetEventByID
	if err := c.Client.Post(ctx, "GetEventByID", GetEventByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEventsDocument = `query GetEvents ($where: EventWhereInput) {
	events(where: $where) {
		edges {
			node {
				eventID
				id
				correlationID
				eventType
				metadata
			}
		}
	}
}
`

func (c *Client) GetEvents(ctx context.Context, where *EventWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEvents, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEvents
	if err := c.Client.Post(ctx, "GetEvents", GetEventsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateEventDocument = `mutation UpdateEvent ($updateEventId: ID!, $input: UpdateEventInput!) {
	updateEvent(id: $updateEventId, input: $input) {
		event {
			id
			createdAt
			updatedAt
			createdBy
			updatedBy
			eventID
			correlationID
			eventType
			metadata
		}
	}
}
`

func (c *Client) UpdateEvent(ctx context.Context, updateEventID string, input UpdateEventInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEvent, error) {
	vars := map[string]any{
		"updateEventId": updateEventID,
		"input":         input,
	}

	var res UpdateEvent
	if err := c.Client.Post(ctx, "UpdateEvent", UpdateEventDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEventHistoriesDocument = `query GetAllEventHistories {
	eventHistories {
		edges {
			node {
				correlationID
				createdAt
				createdBy
				eventID
				eventType
				historyTime
				id
				metadata
				operation
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllEventHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEventHistories, error) {
	vars := map[string]any{}

	var res GetAllEventHistories
	if err := c.Client.Post(ctx, "GetAllEventHistories", GetAllEventHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEventHistoriesDocument = `query GetEventHistories ($where: EventHistoryWhereInput) {
	eventHistories(where: $where) {
		edges {
			node {
				correlationID
				createdAt
				createdBy
				eventID
				eventType
				historyTime
				id
				metadata
				operation
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetEventHistories(ctx context.Context, where *EventHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEventHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEventHistories
	if err := c.Client.Post(ctx, "GetEventHistories", GetEventHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateEvidenceDocument = `mutation CreateEvidence ($input: CreateEvidenceInput!, $evidenceFiles: [Upload!]) {
	createEvidence(input: $input, evidenceFiles: $evidenceFiles) {
		evidence {
			collectionProcedure
			createdAt
			createdBy
			creationDate
			description
			displayID
			id
			isAutomated
			name
			ownerID
			renewalDate
			source
			status
			tags
			updatedAt
			updatedBy
			url
			files {
				edges {
					node {
						id
						presignedURL
					}
				}
			}
			programs {
				edges {
					node {
						id
						displayID
						name
					}
				}
			}
			tasks {
				edges {
					node {
						id
						displayID
					}
				}
			}
			controls {
				edges {
					node {
						id
						displayID
						refCode
					}
				}
			}
			subcontrols {
				edges {
					node {
						id
						displayID
						refCode
					}
				}
			}
			controlObjectives {
				edges {
					node {
						id
						displayID
						name
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateEvidence(ctx context.Context, input CreateEvidenceInput, evidenceFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateEvidence, error) {
	vars := map[string]any{
		"input":         input,
		"evidenceFiles": evidenceFiles,
	}

	var res CreateEvidence
	if err := c.Client.Post(ctx, "CreateEvidence", CreateEvidenceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteEvidenceDocument = `mutation DeleteEvidence ($deleteEvidenceId: ID!) {
	deleteEvidence(id: $deleteEvidenceId) {
		deletedID
	}
}
`

func (c *Client) DeleteEvidence(ctx context.Context, deleteEvidenceID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEvidence, error) {
	vars := map[string]any{
		"deleteEvidenceId": deleteEvidenceID,
	}

	var res DeleteEvidence
	if err := c.Client.Post(ctx, "DeleteEvidence", DeleteEvidenceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEvidencesDocument = `query GetAllEvidences {
	evidences {
		edges {
			node {
				collectionProcedure
				createdAt
				createdBy
				creationDate
				description
				displayID
				id
				isAutomated
				name
				ownerID
				renewalDate
				source
				status
				tags
				updatedAt
				updatedBy
				url
				files {
					edges {
						node {
							id
							presignedURL
						}
					}
				}
				programs {
					edges {
						node {
							id
							displayID
							name
						}
					}
				}
				tasks {
					edges {
						node {
							id
							displayID
						}
					}
				}
				controls {
					edges {
						node {
							id
							displayID
							refCode
						}
					}
				}
				subcontrols {
					edges {
						node {
							id
							displayID
							refCode
						}
					}
				}
				controlObjectives {
					edges {
						node {
							id
							displayID
							name
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetAllEvidences(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEvidences, error) {
	vars := map[string]any{}

	var res GetAllEvidences
	if err := c.Client.Post(ctx, "GetAllEvidences", GetAllEvidencesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEvidenceByIDDocument = `query GetEvidenceByID ($evidenceId: ID!) {
	evidence(id: $evidenceId) {
		collectionProcedure
		createdAt
		createdBy
		creationDate
		description
		displayID
		id
		isAutomated
		name
		ownerID
		renewalDate
		source
		status
		tags
		updatedAt
		updatedBy
		url
		files {
			edges {
				node {
					id
					presignedURL
				}
			}
		}
		programs {
			edges {
				node {
					id
					displayID
					name
				}
			}
		}
		tasks {
			edges {
				node {
					id
					displayID
				}
			}
		}
		controls {
			edges {
				node {
					id
					displayID
					refCode
				}
			}
		}
		subcontrols {
			edges {
				node {
					id
					displayID
					refCode
				}
			}
		}
		controlObjectives {
			edges {
				node {
					id
					displayID
					name
				}
			}
		}
	}
}
`

func (c *Client) GetEvidenceByID(ctx context.Context, evidenceID string, interceptors ...clientv2.RequestInterceptor) (*GetEvidenceByID, error) {
	vars := map[string]any{
		"evidenceId": evidenceID,
	}

	var res GetEvidenceByID
	if err := c.Client.Post(ctx, "GetEvidenceByID", GetEvidenceByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEvidencesDocument = `query GetEvidences ($where: EvidenceWhereInput) {
	evidences(where: $where) {
		edges {
			node {
				collectionProcedure
				createdAt
				createdBy
				creationDate
				description
				displayID
				id
				isAutomated
				name
				ownerID
				renewalDate
				source
				status
				tags
				updatedAt
				updatedBy
				url
				files {
					edges {
						node {
							id
							presignedURL
						}
					}
				}
				programs {
					edges {
						node {
							id
							displayID
							name
						}
					}
				}
				tasks {
					edges {
						node {
							id
							displayID
						}
					}
				}
				controls {
					edges {
						node {
							id
							displayID
							refCode
						}
					}
				}
				subcontrols {
					edges {
						node {
							id
							displayID
							refCode
						}
					}
				}
				controlObjectives {
					edges {
						node {
							id
							displayID
							name
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetEvidences(ctx context.Context, where *EvidenceWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEvidences, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEvidences
	if err := c.Client.Post(ctx, "GetEvidences", GetEvidencesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateEvidenceDocument = `mutation UpdateEvidence ($updateEvidenceId: ID!, $input: UpdateEvidenceInput!, $evidenceFiles: [Upload!]) {
	updateEvidence(id: $updateEvidenceId, input: $input, evidenceFiles: $evidenceFiles) {
		evidence {
			collectionProcedure
			createdAt
			createdBy
			creationDate
			description
			displayID
			id
			isAutomated
			name
			ownerID
			renewalDate
			source
			status
			tags
			updatedAt
			updatedBy
			url
			files {
				edges {
					node {
						id
						presignedURL
					}
				}
			}
			programs {
				edges {
					node {
						id
						displayID
						name
					}
				}
			}
			tasks {
				edges {
					node {
						id
						displayID
					}
				}
			}
			controls {
				edges {
					node {
						id
						displayID
						refCode
					}
				}
			}
			subcontrols {
				edges {
					node {
						id
						displayID
						refCode
					}
				}
			}
			controlObjectives {
				edges {
					node {
						id
						displayID
						name
					}
				}
			}
		}
	}
}
`

func (c *Client) UpdateEvidence(ctx context.Context, updateEvidenceID string, input UpdateEvidenceInput, evidenceFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateEvidence, error) {
	vars := map[string]any{
		"updateEvidenceId": updateEvidenceID,
		"input":            input,
		"evidenceFiles":    evidenceFiles,
	}

	var res UpdateEvidence
	if err := c.Client.Post(ctx, "UpdateEvidence", UpdateEvidenceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEvidenceHistoriesDocument = `query GetAllEvidenceHistories {
	evidenceHistories {
		edges {
			node {
				collectionProcedure
				createdAt
				createdBy
				creationDate
				description
				displayID
				historyTime
				id
				isAutomated
				name
				operation
				ownerID
				ref
				renewalDate
				source
				tags
				updatedAt
				updatedBy
				url
			}
		}
	}
}
`

func (c *Client) GetAllEvidenceHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEvidenceHistories, error) {
	vars := map[string]any{}

	var res GetAllEvidenceHistories
	if err := c.Client.Post(ctx, "GetAllEvidenceHistories", GetAllEvidenceHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEvidenceHistoriesDocument = `query GetEvidenceHistories ($where: EvidenceHistoryWhereInput) {
	evidenceHistories(where: $where) {
		edges {
			node {
				collectionProcedure
				createdAt
				createdBy
				creationDate
				description
				displayID
				historyTime
				id
				isAutomated
				name
				operation
				ownerID
				ref
				renewalDate
				source
				tags
				updatedAt
				updatedBy
				url
			}
		}
	}
}
`

func (c *Client) GetEvidenceHistories(ctx context.Context, where *EvidenceHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEvidenceHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEvidenceHistories
	if err := c.Client.Post(ctx, "GetEvidenceHistories", GetEvidenceHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteFileDocument = `mutation DeleteFile ($deleteFileId: ID!) {
	deleteFile(id: $deleteFileId) {
		deletedID
	}
}
`

func (c *Client) DeleteFile(ctx context.Context, deleteFileID string, interceptors ...clientv2.RequestInterceptor) (*DeleteFile, error) {
	vars := map[string]any{
		"deleteFileId": deleteFileID,
	}

	var res DeleteFile
	if err := c.Client.Post(ctx, "DeleteFile", DeleteFileDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllFilesDocument = `query GetAllFiles {
	files {
		edges {
			node {
				categoryType
				createdAt
				createdBy
				detectedContentType
				detectedMimeType
				id
				md5Hash
				persistedFileSize
				providedFileExtension
				providedFileName
				providedFileSize
				storagePath
				storageScheme
				storageVolume
				storeKey
				tags
				updatedAt
				updatedBy
				uri
			}
		}
	}
}
`

func (c *Client) GetAllFiles(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllFiles, error) {
	vars := map[string]any{}

	var res GetAllFiles
	if err := c.Client.Post(ctx, "GetAllFiles", GetAllFilesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetFileByIDDocument = `query GetFileByID ($fileId: ID!) {
	file(id: $fileId) {
		categoryType
		createdAt
		createdBy
		detectedContentType
		detectedMimeType
		id
		md5Hash
		persistedFileSize
		providedFileExtension
		providedFileName
		providedFileSize
		storagePath
		storageScheme
		storageVolume
		storeKey
		tags
		updatedAt
		updatedBy
		uri
	}
}
`

func (c *Client) GetFileByID(ctx context.Context, fileID string, interceptors ...clientv2.RequestInterceptor) (*GetFileByID, error) {
	vars := map[string]any{
		"fileId": fileID,
	}

	var res GetFileByID
	if err := c.Client.Post(ctx, "GetFileByID", GetFileByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetFilesDocument = `query GetFiles ($where: FileWhereInput) {
	files(where: $where) {
		edges {
			node {
				categoryType
				createdAt
				createdBy
				detectedContentType
				detectedMimeType
				id
				md5Hash
				persistedFileSize
				providedFileExtension
				providedFileName
				providedFileSize
				storagePath
				storageScheme
				storageVolume
				storeKey
				tags
				updatedAt
				updatedBy
				uri
			}
		}
	}
}
`

func (c *Client) GetFiles(ctx context.Context, where *FileWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetFiles, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetFiles
	if err := c.Client.Post(ctx, "GetFiles", GetFilesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllFileHistoriesDocument = `query GetAllFileHistories {
	fileHistories {
		edges {
			node {
				categoryType
				createdAt
				createdBy
				detectedContentType
				detectedMimeType
				historyTime
				id
				md5Hash
				operation
				persistedFileSize
				providedFileExtension
				providedFileName
				providedFileSize
				ref
				storagePath
				storageScheme
				storageVolume
				storeKey
				tags
				updatedAt
				updatedBy
				uri
			}
		}
	}
}
`

func (c *Client) GetAllFileHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllFileHistories, error) {
	vars := map[string]any{}

	var res GetAllFileHistories
	if err := c.Client.Post(ctx, "GetAllFileHistories", GetAllFileHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetFileHistoriesDocument = `query GetFileHistories ($where: FileHistoryWhereInput) {
	fileHistories(where: $where) {
		edges {
			node {
				categoryType
				createdAt
				createdBy
				detectedContentType
				detectedMimeType
				historyTime
				id
				md5Hash
				operation
				persistedFileSize
				providedFileExtension
				providedFileName
				providedFileSize
				ref
				storagePath
				storageScheme
				storageVolume
				storeKey
				tags
				updatedAt
				updatedBy
				uri
			}
		}
	}
}
`

func (c *Client) GetFileHistories(ctx context.Context, where *FileHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetFileHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetFileHistories
	if err := c.Client.Post(ctx, "GetFileHistories", GetFileHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVGroupDocument = `mutation CreateBulkCSVGroup ($input: Upload!) {
	createBulkCSVGroup(input: $input) {
		groups {
			description
			displayName
			id
			logoURL
			name
			tags
			owner {
				id
				displayName
			}
			setting {
				id
				joinPolicy
				syncToGithub
				syncToSlack
				visibility
			}
			members {
				id
				role
				user {
					id
					firstName
					lastName
				}
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVGroup(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVGroup, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVGroup
	if err := c.Client.Post(ctx, "CreateBulkCSVGroup", CreateBulkCSVGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkGroupDocument = `mutation CreateBulkGroup ($input: [CreateGroupInput!]) {
	createBulkGroup(input: $input) {
		groups {
			description
			displayName
			id
			logoURL
			name
			tags
			owner {
				id
				displayName
			}
			setting {
				id
				joinPolicy
				syncToGithub
				syncToSlack
				visibility
			}
			members {
				id
				role
				user {
					id
					firstName
					lastName
				}
			}
		}
	}
}
`

func (c *Client) CreateBulkGroup(ctx context.Context, input []*CreateGroupInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkGroup, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkGroup
	if err := c.Client.Post(ctx, "CreateBulkGroup", CreateBulkGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateGroupDocument = `mutation CreateGroup ($input: CreateGroupInput!) {
	createGroup(input: $input) {
		group {
			description
			displayName
			id
			logoURL
			name
			tags
			owner {
				id
				displayName
			}
			setting {
				id
				joinPolicy
				syncToGithub
				syncToSlack
				visibility
			}
			permissions {
				displayID
				id
				name
				objectType
				permissions
			}
			members {
				id
				role
				user {
					id
					firstName
					lastName
				}
			}
		}
	}
}
`

func (c *Client) CreateGroup(ctx context.Context, input CreateGroupInput, interceptors ...clientv2.RequestInterceptor) (*CreateGroup, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateGroup
	if err := c.Client.Post(ctx, "CreateGroup", CreateGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateGroupByCloneDocument = `mutation CreateGroupByClone ($groupInput: CreateGroupInput!, $inheritGroupPermissions: ID, $cloneGroupMembers: ID) {
	createGroupByClone(groupInput: $groupInput, inheritGroupPermissions: $inheritGroupPermissions, cloneGroupMembers: $cloneGroupMembers) {
		group {
			id
			displayID
			members {
				id
				user {
					firstName
					lastName
				}
			}
			permissions {
				id
				displayID
				name
				objectType
				permissions
			}
		}
	}
}
`

func (c *Client) CreateGroupByClone(ctx context.Context, groupInput CreateGroupInput, inheritGroupPermissions *string, cloneGroupMembers *string, interceptors ...clientv2.RequestInterceptor) (*CreateGroupByClone, error) {
	vars := map[string]any{
		"groupInput":              groupInput,
		"inheritGroupPermissions": inheritGroupPermissions,
		"cloneGroupMembers":       cloneGroupMembers,
	}

	var res CreateGroupByClone
	if err := c.Client.Post(ctx, "CreateGroupByClone", CreateGroupByCloneDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateGroupWithMembersDocument = `mutation CreateGroupWithMembers ($groupInput: CreateGroupInput!, $members: [GroupMembersInput!]) {
	createGroupWithMembers(groupInput: $groupInput, members: $members) {
		group {
			id
			displayID
			name
			setting {
				visibility
			}
			members {
				id
				role
				user {
					id
					firstName
					lastName
				}
			}
		}
	}
}
`

func (c *Client) CreateGroupWithMembers(ctx context.Context, groupInput CreateGroupInput, members []*GroupMembersInput, interceptors ...clientv2.RequestInterceptor) (*CreateGroupWithMembers, error) {
	vars := map[string]any{
		"groupInput": groupInput,
		"members":    members,
	}

	var res CreateGroupWithMembers
	if err := c.Client.Post(ctx, "CreateGroupWithMembers", CreateGroupWithMembersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteGroupDocument = `mutation DeleteGroup ($deleteGroupId: ID!) {
	deleteGroup(id: $deleteGroupId) {
		deletedID
	}
}
`

func (c *Client) DeleteGroup(ctx context.Context, deleteGroupID string, interceptors ...clientv2.RequestInterceptor) (*DeleteGroup, error) {
	vars := map[string]any{
		"deleteGroupId": deleteGroupID,
	}

	var res DeleteGroup
	if err := c.Client.Post(ctx, "DeleteGroup", DeleteGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllGroupsDocument = `query GetAllGroups {
	groups {
		edges {
			node {
				description
				displayName
				id
				logoURL
				name
				tags
				isManaged
				owner {
					id
					displayName
				}
				setting {
					createdAt
					createdBy
					id
					joinPolicy
					syncToGithub
					syncToSlack
					updatedAt
					updatedBy
					visibility
				}
				members {
					id
					role
					user {
						id
						firstName
						lastName
					}
				}
				createdAt
				createdBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllGroups(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroups, error) {
	vars := map[string]any{}

	var res GetAllGroups
	if err := c.Client.Post(ctx, "GetAllGroups", GetAllGroupsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupByIDDocument = `query GetGroupByID ($groupId: ID!) {
	group(id: $groupId) {
		description
		displayName
		id
		logoURL
		name
		tags
		isManaged
		owner {
			id
			displayName
		}
		setting {
			createdAt
			createdBy
			id
			joinPolicy
			syncToGithub
			syncToSlack
			updatedAt
			updatedBy
			visibility
		}
		permissions {
			displayID
			id
			name
			objectType
			permissions
		}
		members {
			id
			role
			user {
				id
				firstName
				lastName
			}
		}
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetGroupByID(ctx context.Context, groupID string, interceptors ...clientv2.RequestInterceptor) (*GetGroupByID, error) {
	vars := map[string]any{
		"groupId": groupID,
	}

	var res GetGroupByID
	if err := c.Client.Post(ctx, "GetGroupByID", GetGroupByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupsDocument = `query GetGroups ($where: GroupWhereInput) {
	groups(where: $where) {
		edges {
			node {
				description
				displayName
				id
				logoURL
				name
				tags
				isManaged
				owner {
					id
					displayName
				}
				setting {
					createdAt
					createdBy
					id
					joinPolicy
					syncToGithub
					syncToSlack
					updatedAt
					updatedBy
					visibility
				}
				permissions {
					displayID
					id
					name
					objectType
					permissions
				}
				members {
					id
					role
					user {
						id
						firstName
						lastName
					}
				}
				createdAt
				createdBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetGroups(ctx context.Context, where *GroupWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroups, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetGroups
	if err := c.Client.Post(ctx, "GetGroups", GetGroupsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateGroupDocument = `mutation UpdateGroup ($updateGroupId: ID!, $input: UpdateGroupInput!) {
	updateGroup(id: $updateGroupId, input: $input) {
		group {
			description
			displayName
			id
			logoURL
			name
			tags
			owner {
				id
				displayName
			}
			setting {
				createdAt
				createdBy
				id
				joinPolicy
				syncToGithub
				syncToSlack
				updatedAt
				updatedBy
				visibility
			}
			permissions {
				displayID
				id
				name
				objectType
				permissions
			}
			members {
				id
				role
				user {
					id
					firstName
					lastName
				}
			}
		}
	}
}
`

func (c *Client) UpdateGroup(ctx context.Context, updateGroupID string, input UpdateGroupInput, interceptors ...clientv2.RequestInterceptor) (*UpdateGroup, error) {
	vars := map[string]any{
		"updateGroupId": updateGroupID,
		"input":         input,
	}

	var res UpdateGroup
	if err := c.Client.Post(ctx, "UpdateGroup", UpdateGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllGroupHistoriesDocument = `query GetAllGroupHistories {
	groupHistories {
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				gravatarLogoURL
				historyTime
				id
				logoURL
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllGroupHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupHistories, error) {
	vars := map[string]any{}

	var res GetAllGroupHistories
	if err := c.Client.Post(ctx, "GetAllGroupHistories", GetAllGroupHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupHistoriesDocument = `query GetGroupHistories ($where: GroupHistoryWhereInput) {
	groupHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				gravatarLogoURL
				historyTime
				id
				logoURL
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetGroupHistories(ctx context.Context, where *GroupHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetGroupHistories
	if err := c.Client.Post(ctx, "GetGroupHistories", GetGroupHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const AddUserToGroupWithRoleDocument = `mutation AddUserToGroupWithRole ($input: CreateGroupMembershipInput!) {
	createGroupMembership(input: $input) {
		groupMembership {
			groupID
			group {
				id
				name
			}
			id
			role
			userID
			user {
				displayName
				email
				firstName
				id
				lastName
			}
		}
	}
}
`

func (c *Client) AddUserToGroupWithRole(ctx context.Context, input CreateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*AddUserToGroupWithRole, error) {
	vars := map[string]any{
		"input": input,
	}

	var res AddUserToGroupWithRole
	if err := c.Client.Post(ctx, "AddUserToGroupWithRole", AddUserToGroupWithRoleDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVGroupMembersDocument = `mutation CreateBulkCSVGroupMembers ($input: Upload!) {
	createBulkCSVGroupMembership(input: $input) {
		groupMemberships {
			groupID
			group {
				id
				name
			}
			id
			role
			userID
			user {
				displayName
				email
				firstName
				id
				lastName
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVGroupMembers(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVGroupMembers, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVGroupMembers
	if err := c.Client.Post(ctx, "CreateBulkCSVGroupMembers", CreateBulkCSVGroupMembersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkGroupMembersDocument = `mutation CreateBulkGroupMembers ($input: [CreateGroupMembershipInput!]) {
	createBulkGroupMembership(input: $input) {
		groupMemberships {
			groupID
			group {
				id
				name
			}
			id
			role
			userID
			user {
				displayName
				email
				firstName
				id
				lastName
			}
		}
	}
}
`

func (c *Client) CreateBulkGroupMembers(ctx context.Context, input []*CreateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkGroupMembers, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkGroupMembers
	if err := c.Client.Post(ctx, "CreateBulkGroupMembers", CreateBulkGroupMembersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupMembersByGroupIDDocument = `query GetGroupMembersByGroupID ($where: GroupMembershipWhereInput) {
	groupMemberships(where: $where) {
		edges {
			node {
				groupID
				group {
					id
					name
				}
				id
				role
				userID
				user {
					displayName
					email
					firstName
					id
					lastName
				}
			}
		}
	}
}
`

func (c *Client) GetGroupMembersByGroupID(ctx context.Context, where *GroupMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupMembersByGroupID, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetGroupMembersByGroupID
	if err := c.Client.Post(ctx, "GetGroupMembersByGroupID", GetGroupMembersByGroupIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const RemoveUserFromGroupDocument = `mutation RemoveUserFromGroup ($deleteGroupMembershipId: ID!) {
	deleteGroupMembership(id: $deleteGroupMembershipId) {
		deletedID
	}
}
`

func (c *Client) RemoveUserFromGroup(ctx context.Context, deleteGroupMembershipID string, interceptors ...clientv2.RequestInterceptor) (*RemoveUserFromGroup, error) {
	vars := map[string]any{
		"deleteGroupMembershipId": deleteGroupMembershipID,
	}

	var res RemoveUserFromGroup
	if err := c.Client.Post(ctx, "RemoveUserFromGroup", RemoveUserFromGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateUserRoleInGroupDocument = `mutation UpdateUserRoleInGroup ($updateGroupMemberId: ID!, $input: UpdateGroupMembershipInput!) {
	updateGroupMembership(id: $updateGroupMemberId, input: $input) {
		groupMembership {
			groupID
			group {
				id
				name
			}
			id
			role
			userID
			user {
				displayName
				email
				firstName
				id
				lastName
			}
		}
	}
}
`

func (c *Client) UpdateUserRoleInGroup(ctx context.Context, updateGroupMemberID string, input UpdateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUserRoleInGroup, error) {
	vars := map[string]any{
		"updateGroupMemberId": updateGroupMemberID,
		"input":               input,
	}

	var res UpdateUserRoleInGroup
	if err := c.Client.Post(ctx, "UpdateUserRoleInGroup", UpdateUserRoleInGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllGroupMembershipHistoriesDocument = `query GetAllGroupMembershipHistories {
	groupMembershipHistories {
		edges {
			node {
				createdAt
				createdBy
				groupID
				historyTime
				id
				operation
				ref
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetAllGroupMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupMembershipHistories, error) {
	vars := map[string]any{}

	var res GetAllGroupMembershipHistories
	if err := c.Client.Post(ctx, "GetAllGroupMembershipHistories", GetAllGroupMembershipHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupMembershipHistoriesDocument = `query GetGroupMembershipHistories ($where: GroupMembershipHistoryWhereInput) {
	groupMembershipHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				groupID
				historyTime
				id
				operation
				ref
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetGroupMembershipHistories(ctx context.Context, where *GroupMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupMembershipHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetGroupMembershipHistories
	if err := c.Client.Post(ctx, "GetGroupMembershipHistories", GetGroupMembershipHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllGroupSettingsDocument = `query GetAllGroupSettings {
	groupSettings {
		edges {
			node {
				id
				joinPolicy
				syncToGithub
				syncToSlack
				visibility
				group {
					id
					name
				}
				createdAt
				createdBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllGroupSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupSettings, error) {
	vars := map[string]any{}

	var res GetAllGroupSettings
	if err := c.Client.Post(ctx, "GetAllGroupSettings", GetAllGroupSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupSettingByIDDocument = `query GetGroupSettingByID ($groupSettingId: ID!) {
	groupSetting(id: $groupSettingId) {
		id
		joinPolicy
		syncToGithub
		syncToSlack
		visibility
		group {
			id
			name
		}
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetGroupSettingByID(ctx context.Context, groupSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetGroupSettingByID, error) {
	vars := map[string]any{
		"groupSettingId": groupSettingID,
	}

	var res GetGroupSettingByID
	if err := c.Client.Post(ctx, "GetGroupSettingByID", GetGroupSettingByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupSettingsDocument = `query GetGroupSettings ($where: GroupSettingWhereInput!) {
	groupSettings(where: $where) {
		edges {
			node {
				id
				joinPolicy
				syncToGithub
				syncToSlack
				visibility
				group {
					id
					name
				}
				createdAt
				createdBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetGroupSettings(ctx context.Context, where GroupSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupSettings, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetGroupSettings
	if err := c.Client.Post(ctx, "GetGroupSettings", GetGroupSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateGroupSettingDocument = `mutation UpdateGroupSetting ($updateGroupSettingId: ID!, $input: UpdateGroupSettingInput!) {
	updateGroupSetting(id: $updateGroupSettingId, input: $input) {
		groupSetting {
			id
			joinPolicy
			syncToGithub
			syncToSlack
			visibility
			group {
				id
				name
			}
			createdAt
			createdBy
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateGroupSetting(ctx context.Context, updateGroupSettingID string, input UpdateGroupSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateGroupSetting, error) {
	vars := map[string]any{
		"updateGroupSettingId": updateGroupSettingID,
		"input":                input,
	}

	var res UpdateGroupSetting
	if err := c.Client.Post(ctx, "UpdateGroupSetting", UpdateGroupSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllGroupSettingHistoriesDocument = `query GetAllGroupSettingHistories {
	groupSettingHistories {
		edges {
			node {
				createdAt
				createdBy
				groupID
				historyTime
				id
				joinPolicy
				operation
				ref
				syncToGithub
				syncToSlack
				updatedAt
				updatedBy
				visibility
			}
		}
	}
}
`

func (c *Client) GetAllGroupSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupSettingHistories, error) {
	vars := map[string]any{}

	var res GetAllGroupSettingHistories
	if err := c.Client.Post(ctx, "GetAllGroupSettingHistories", GetAllGroupSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupSettingHistoriesDocument = `query GetGroupSettingHistories ($where: GroupSettingHistoryWhereInput) {
	groupSettingHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				groupID
				historyTime
				id
				joinPolicy
				operation
				ref
				syncToGithub
				syncToSlack
				updatedAt
				updatedBy
				visibility
			}
		}
	}
}
`

func (c *Client) GetGroupSettingHistories(ctx context.Context, where *GroupSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupSettingHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetGroupSettingHistories
	if err := c.Client.Post(ctx, "GetGroupSettingHistories", GetGroupSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVHushDocument = `mutation CreateBulkCSVHush ($input: Upload!) {
	createBulkCSVHush(input: $input) {
		hushes {
			description
			id
			kind
			name
			secretName
			integrations {
				edges {
					node {
						id
					}
				}
			}
			ownerID
			events {
				edges {
					node {
						id
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVHush(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVHush, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVHush
	if err := c.Client.Post(ctx, "CreateBulkCSVHush", CreateBulkCSVHushDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkHushDocument = `mutation CreateBulkHush ($input: [CreateHushInput!]) {
	createBulkHush(input: $input) {
		hushes {
			description
			id
			kind
			name
			secretName
			integrations {
				edges {
					node {
						id
					}
				}
			}
			ownerID
			events {
				edges {
					node {
						id
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateBulkHush(ctx context.Context, input []*CreateHushInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkHush, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkHush
	if err := c.Client.Post(ctx, "CreateBulkHush", CreateBulkHushDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateHushDocument = `mutation CreateHush ($input: CreateHushInput!) {
	createHush(input: $input) {
		hush {
			description
			id
			kind
			name
			secretName
			integrations {
				edges {
					node {
						id
					}
				}
			}
			ownerID
			events {
				edges {
					node {
						id
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateHush(ctx context.Context, input CreateHushInput, interceptors ...clientv2.RequestInterceptor) (*CreateHush, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateHush
	if err := c.Client.Post(ctx, "CreateHush", CreateHushDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllHushesDocument = `query GetAllHushes {
	hushes {
		edges {
			node {
				description
				id
				kind
				name
				secretName
				integrations {
					edges {
						node {
							id
						}
					}
				}
				ownerID
				events {
					edges {
						node {
							id
						}
					}
				}
				createdAt
				updatedAt
				createdBy
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllHushes(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllHushes, error) {
	vars := map[string]any{}

	var res GetAllHushes
	if err := c.Client.Post(ctx, "GetAllHushes", GetAllHushesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetHushByIDDocument = `query GetHushByID ($hushId: ID!) {
	hush(id: $hushId) {
		description
		id
		kind
		name
		secretName
		integrations {
			edges {
				node {
					id
				}
			}
		}
		ownerID
		events {
			edges {
				node {
					id
				}
			}
		}
		createdAt
		updatedAt
		createdBy
		updatedBy
	}
}
`

func (c *Client) GetHushByID(ctx context.Context, hushID string, interceptors ...clientv2.RequestInterceptor) (*GetHushByID, error) {
	vars := map[string]any{
		"hushId": hushID,
	}

	var res GetHushByID
	if err := c.Client.Post(ctx, "GetHushByID", GetHushByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetHushesDocument = `query GetHushes ($where: HushWhereInput) {
	hushes(where: $where) {
		edges {
			node {
				description
				id
				kind
				name
				secretName
				integrations {
					edges {
						node {
							id
						}
					}
				}
				ownerID
				events {
					edges {
						node {
							id
						}
					}
				}
				createdAt
				updatedAt
				createdBy
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetHushes(ctx context.Context, where *HushWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetHushes, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetHushes
	if err := c.Client.Post(ctx, "GetHushes", GetHushesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateHushDocument = `mutation UpdateHush ($updateHushId: ID!, $input: UpdateHushInput!) {
	updateHush(id: $updateHushId, input: $input) {
		hush {
			description
			id
			kind
			name
			secretName
			integrations {
				edges {
					node {
						id
					}
				}
			}
			ownerID
			events {
				edges {
					node {
						id
					}
				}
			}
		}
	}
}
`

func (c *Client) UpdateHush(ctx context.Context, updateHushID string, input UpdateHushInput, interceptors ...clientv2.RequestInterceptor) (*UpdateHush, error) {
	vars := map[string]any{
		"updateHushId": updateHushID,
		"input":        input,
	}

	var res UpdateHush
	if err := c.Client.Post(ctx, "UpdateHush", UpdateHushDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllHushHistoriesDocument = `query GetAllHushHistories {
	hushHistories {
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				kind
				name
				operation
				ref
				secretName
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllHushHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllHushHistories, error) {
	vars := map[string]any{}

	var res GetAllHushHistories
	if err := c.Client.Post(ctx, "GetAllHushHistories", GetAllHushHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetHushHistoriesDocument = `query GetHushHistories ($where: HushHistoryWhereInput) {
	hushHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				kind
				name
				operation
				ref
				secretName
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetHushHistories(ctx context.Context, where *HushHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetHushHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetHushHistories
	if err := c.Client.Post(ctx, "GetHushHistories", GetHushHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVIntegrationDocument = `mutation CreateBulkCSVIntegration ($input: Upload!) {
	createBulkCSVIntegration(input: $input) {
		integrations {
			description
			id
			kind
			name
			ownerID
			owner {
				id
			}
			secrets {
				edges {
					node {
						id
					}
				}
			}
			events {
				edges {
					node {
						id
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVIntegration(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVIntegration, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVIntegration
	if err := c.Client.Post(ctx, "CreateBulkCSVIntegration", CreateBulkCSVIntegrationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkIntegrationDocument = `mutation CreateBulkIntegration ($input: [CreateIntegrationInput!]) {
	createBulkIntegration(input: $input) {
		integrations {
			description
			id
			kind
			name
			ownerID
			owner {
				id
			}
			secrets {
				edges {
					node {
						id
					}
				}
			}
			events {
				edges {
					node {
						id
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateBulkIntegration(ctx context.Context, input []*CreateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkIntegration, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkIntegration
	if err := c.Client.Post(ctx, "CreateBulkIntegration", CreateBulkIntegrationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateIntegrationDocument = `mutation CreateIntegration ($input: CreateIntegrationInput!) {
	createIntegration(input: $input) {
		integration {
			description
			id
			kind
			name
			ownerID
			owner {
				id
			}
			secrets {
				edges {
					node {
						id
					}
				}
			}
			events {
				edges {
					node {
						id
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateIntegration(ctx context.Context, input CreateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*CreateIntegration, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateIntegration
	if err := c.Client.Post(ctx, "CreateIntegration", CreateIntegrationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteIntegrationDocument = `mutation DeleteIntegration ($deleteIntegrationId: ID!) {
	deleteIntegration(id: $deleteIntegrationId) {
		deletedID
	}
}
`

func (c *Client) DeleteIntegration(ctx context.Context, deleteIntegrationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteIntegration, error) {
	vars := map[string]any{
		"deleteIntegrationId": deleteIntegrationID,
	}

	var res DeleteIntegration
	if err := c.Client.Post(ctx, "DeleteIntegration", DeleteIntegrationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllIntegrationsDocument = `query GetAllIntegrations {
	integrations {
		edges {
			node {
				description
				id
				kind
				name
				ownerID
				owner {
					id
				}
				secrets {
					edges {
						node {
							id
						}
					}
				}
				events {
					edges {
						node {
							id
						}
					}
				}
				createdAt
				createdBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllIntegrations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllIntegrations, error) {
	vars := map[string]any{}

	var res GetAllIntegrations
	if err := c.Client.Post(ctx, "GetAllIntegrations", GetAllIntegrationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetIntegrationByIDDocument = `query GetIntegrationByID ($integrationId: ID!) {
	integration(id: $integrationId) {
		description
		id
		kind
		name
		ownerID
		owner {
			id
		}
		secrets {
			edges {
				node {
					id
				}
			}
		}
		events {
			edges {
				node {
					id
				}
			}
		}
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetIntegrationByID(ctx context.Context, integrationID string, interceptors ...clientv2.RequestInterceptor) (*GetIntegrationByID, error) {
	vars := map[string]any{
		"integrationId": integrationID,
	}

	var res GetIntegrationByID
	if err := c.Client.Post(ctx, "GetIntegrationByID", GetIntegrationByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetIntegrationsDocument = `query GetIntegrations ($where: IntegrationWhereInput) {
	integrations(where: $where) {
		edges {
			node {
				description
				id
				kind
				name
				ownerID
				owner {
					id
				}
				secrets {
					edges {
						node {
							id
						}
					}
				}
				events {
					edges {
						node {
							id
						}
					}
				}
				createdAt
				createdBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetIntegrations(ctx context.Context, where *IntegrationWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetIntegrations, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetIntegrations
	if err := c.Client.Post(ctx, "GetIntegrations", GetIntegrationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateIntegrationDocument = `mutation UpdateIntegration ($updateIntegrationId: ID!, $input: UpdateIntegrationInput!) {
	updateIntegration(id: $updateIntegrationId, input: $input) {
		integration {
			description
			id
			kind
			name
			ownerID
			owner {
				id
			}
			secrets {
				edges {
					node {
						id
					}
				}
			}
			events {
				edges {
					node {
						id
					}
				}
			}
		}
	}
}
`

func (c *Client) UpdateIntegration(ctx context.Context, updateIntegrationID string, input UpdateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*UpdateIntegration, error) {
	vars := map[string]any{
		"updateIntegrationId": updateIntegrationID,
		"input":               input,
	}

	var res UpdateIntegration
	if err := c.Client.Post(ctx, "UpdateIntegration", UpdateIntegrationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllIntegrationHistoriesDocument = `query GetAllIntegrationHistories {
	integrationHistories {
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				kind
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllIntegrationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllIntegrationHistories, error) {
	vars := map[string]any{}

	var res GetAllIntegrationHistories
	if err := c.Client.Post(ctx, "GetAllIntegrationHistories", GetAllIntegrationHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetIntegrationHistoriesDocument = `query GetIntegrationHistories ($where: IntegrationHistoryWhereInput) {
	integrationHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				kind
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetIntegrationHistories(ctx context.Context, where *IntegrationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetIntegrationHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetIntegrationHistories
	if err := c.Client.Post(ctx, "GetIntegrationHistories", GetIntegrationHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVInternalPolicyDocument = `mutation CreateBulkCSVInternalPolicy ($input: Upload!) {
	createBulkCSVInternalPolicy(input: $input) {
		internalPolicies {
			approvalRequired
			createdAt
			createdBy
			details
			displayID
			id
			name
			ownerID
			policyType
			reviewDue
			reviewFrequency
			revision
			status
			tags
			updatedAt
			updatedBy
			approver {
				id
				name
			}
			delegate {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVInternalPolicy(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVInternalPolicy, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVInternalPolicy
	if err := c.Client.Post(ctx, "CreateBulkCSVInternalPolicy", CreateBulkCSVInternalPolicyDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkInternalPolicyDocument = `mutation CreateBulkInternalPolicy ($input: [CreateInternalPolicyInput!]) {
	createBulkInternalPolicy(input: $input) {
		internalPolicies {
			approvalRequired
			createdAt
			createdBy
			details
			displayID
			id
			name
			ownerID
			policyType
			reviewDue
			reviewFrequency
			revision
			status
			tags
			updatedAt
			updatedBy
			approver {
				id
				name
			}
			delegate {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateBulkInternalPolicy(ctx context.Context, input []*CreateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkInternalPolicy, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkInternalPolicy
	if err := c.Client.Post(ctx, "CreateBulkInternalPolicy", CreateBulkInternalPolicyDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateInternalPolicyDocument = `mutation CreateInternalPolicy ($input: CreateInternalPolicyInput!) {
	createInternalPolicy(input: $input) {
		internalPolicy {
			approvalRequired
			createdAt
			createdBy
			details
			displayID
			id
			name
			ownerID
			policyType
			reviewDue
			reviewFrequency
			revision
			status
			tags
			updatedAt
			updatedBy
			editors {
				id
				name
			}
			blockedGroups {
				id
				name
			}
			approver {
				id
				name
			}
			delegate {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateInternalPolicy(ctx context.Context, input CreateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*CreateInternalPolicy, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateInternalPolicy
	if err := c.Client.Post(ctx, "CreateInternalPolicy", CreateInternalPolicyDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteInternalPolicyDocument = `mutation DeleteInternalPolicy ($deleteInternalPolicyId: ID!) {
	deleteInternalPolicy(id: $deleteInternalPolicyId) {
		deletedID
	}
}
`

func (c *Client) DeleteInternalPolicy(ctx context.Context, deleteInternalPolicyID string, interceptors ...clientv2.RequestInterceptor) (*DeleteInternalPolicy, error) {
	vars := map[string]any{
		"deleteInternalPolicyId": deleteInternalPolicyID,
	}

	var res DeleteInternalPolicy
	if err := c.Client.Post(ctx, "DeleteInternalPolicy", DeleteInternalPolicyDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllInternalPoliciesDocument = `query GetAllInternalPolicies {
	internalPolicies {
		edges {
			node {
				approvalRequired
				createdAt
				createdBy
				details
				displayID
				id
				name
				ownerID
				policyType
				reviewDue
				reviewFrequency
				revision
				status
				tags
				updatedAt
				updatedBy
				editors {
					id
					name
				}
				blockedGroups {
					id
					name
				}
				approver {
					id
					name
				}
				delegate {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetAllInternalPolicies(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllInternalPolicies, error) {
	vars := map[string]any{}

	var res GetAllInternalPolicies
	if err := c.Client.Post(ctx, "GetAllInternalPolicies", GetAllInternalPoliciesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetInternalPoliciesDocument = `query GetInternalPolicies ($where: InternalPolicyWhereInput) {
	internalPolicies(where: $where) {
		edges {
			node {
				approvalRequired
				createdAt
				createdBy
				details
				displayID
				id
				name
				ownerID
				policyType
				reviewDue
				reviewFrequency
				revision
				status
				tags
				updatedAt
				updatedBy
				editors {
					id
					name
				}
				blockedGroups {
					id
					name
				}
				approver {
					id
					name
				}
				delegate {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetInternalPolicies(ctx context.Context, where *InternalPolicyWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetInternalPolicies, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetInternalPolicies
	if err := c.Client.Post(ctx, "GetInternalPolicies", GetInternalPoliciesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetInternalPolicyByIDDocument = `query GetInternalPolicyByID ($internalPolicyId: ID!) {
	internalPolicy(id: $internalPolicyId) {
		approvalRequired
		createdAt
		createdBy
		details
		displayID
		id
		name
		ownerID
		policyType
		reviewDue
		reviewFrequency
		revision
		status
		tags
		updatedAt
		updatedBy
		editors {
			id
			name
		}
		blockedGroups {
			id
			name
		}
		approver {
			id
			name
		}
		delegate {
			id
			name
		}
	}
}
`

func (c *Client) GetInternalPolicyByID(ctx context.Context, internalPolicyID string, interceptors ...clientv2.RequestInterceptor) (*GetInternalPolicyByID, error) {
	vars := map[string]any{
		"internalPolicyId": internalPolicyID,
	}

	var res GetInternalPolicyByID
	if err := c.Client.Post(ctx, "GetInternalPolicyByID", GetInternalPolicyByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateInternalPolicyDocument = `mutation UpdateInternalPolicy ($updateInternalPolicyId: ID!, $input: UpdateInternalPolicyInput!) {
	updateInternalPolicy(id: $updateInternalPolicyId, input: $input) {
		internalPolicy {
			approvalRequired
			createdAt
			createdBy
			details
			displayID
			id
			name
			ownerID
			policyType
			reviewDue
			reviewFrequency
			revision
			status
			tags
			updatedAt
			updatedBy
			editors {
				id
				name
			}
			blockedGroups {
				id
				name
			}
			approver {
				id
				name
			}
			delegate {
				id
				name
			}
		}
	}
}
`

func (c *Client) UpdateInternalPolicy(ctx context.Context, updateInternalPolicyID string, input UpdateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*UpdateInternalPolicy, error) {
	vars := map[string]any{
		"updateInternalPolicyId": updateInternalPolicyID,
		"input":                  input,
	}

	var res UpdateInternalPolicy
	if err := c.Client.Post(ctx, "UpdateInternalPolicy", UpdateInternalPolicyDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllInternalPolicyHistoriesDocument = `query GetAllInternalPolicyHistories {
	internalPolicyHistories {
		edges {
			node {
				approvalRequired
				createdAt
				createdBy
				details
				displayID
				historyTime
				id
				name
				operation
				ownerID
				policyType
				ref
				reviewDue
				reviewFrequency
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllInternalPolicyHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllInternalPolicyHistories, error) {
	vars := map[string]any{}

	var res GetAllInternalPolicyHistories
	if err := c.Client.Post(ctx, "GetAllInternalPolicyHistories", GetAllInternalPolicyHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetInternalPolicyHistoriesDocument = `query GetInternalPolicyHistories ($where: InternalPolicyHistoryWhereInput) {
	internalPolicyHistories(where: $where) {
		edges {
			node {
				approvalRequired
				createdAt
				createdBy
				details
				displayID
				historyTime
				id
				name
				operation
				ownerID
				policyType
				ref
				reviewDue
				reviewFrequency
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetInternalPolicyHistories(ctx context.Context, where *InternalPolicyHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetInternalPolicyHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetInternalPolicyHistories
	if err := c.Client.Post(ctx, "GetInternalPolicyHistories", GetInternalPolicyHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVInviteDocument = `mutation CreateBulkCSVInvite ($input: Upload!) {
	createBulkCSVInvite(input: $input) {
		invites {
			expires
			id
			recipient
			requestorID
			role
			sendAttempts
			status
		}
	}
}
`

func (c *Client) CreateBulkCSVInvite(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVInvite, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVInvite
	if err := c.Client.Post(ctx, "CreateBulkCSVInvite", CreateBulkCSVInviteDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkInviteDocument = `mutation CreateBulkInvite ($input: [CreateInviteInput!]) {
	createBulkInvite(input: $input) {
		invites {
			expires
			id
			recipient
			requestorID
			role
			sendAttempts
			status
		}
	}
}
`

func (c *Client) CreateBulkInvite(ctx context.Context, input []*CreateInviteInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkInvite, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkInvite
	if err := c.Client.Post(ctx, "CreateBulkInvite", CreateBulkInviteDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateInviteDocument = `mutation CreateInvite ($input: CreateInviteInput!) {
	createInvite(input: $input) {
		invite {
			expires
			id
			recipient
			requestorID
			role
			sendAttempts
			status
			owner {
				id
			}
		}
	}
}
`

func (c *Client) CreateInvite(ctx context.Context, input CreateInviteInput, interceptors ...clientv2.RequestInterceptor) (*CreateInvite, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateInvite
	if err := c.Client.Post(ctx, "CreateInvite", CreateInviteDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteInviteDocument = `mutation DeleteInvite ($deleteInviteId: ID!) {
	deleteInvite(id: $deleteInviteId) {
		deletedID
	}
}
`

func (c *Client) DeleteInvite(ctx context.Context, deleteInviteID string, interceptors ...clientv2.RequestInterceptor) (*DeleteInvite, error) {
	vars := map[string]any{
		"deleteInviteId": deleteInviteID,
	}

	var res DeleteInvite
	if err := c.Client.Post(ctx, "DeleteInvite", DeleteInviteDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllInvitesDocument = `query GetAllInvites {
	invites {
		edges {
			node {
				id
				recipient
				role
				status
			}
		}
	}
}
`

func (c *Client) GetAllInvites(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllInvites, error) {
	vars := map[string]any{}

	var res GetAllInvites
	if err := c.Client.Post(ctx, "GetAllInvites", GetAllInvitesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetInviteByIDDocument = `query GetInviteByID ($inviteId: ID!) {
	invite(id: $inviteId) {
		expires
		id
		recipient
		requestorID
		role
		sendAttempts
		status
		owner {
			displayName
			id
			name
		}
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetInviteByID(ctx context.Context, inviteID string, interceptors ...clientv2.RequestInterceptor) (*GetInviteByID, error) {
	vars := map[string]any{
		"inviteId": inviteID,
	}

	var res GetInviteByID
	if err := c.Client.Post(ctx, "GetInviteByID", GetInviteByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const InvitesByOrgIDDocument = `query InvitesByOrgID ($where: InviteWhereInput) {
	invites(where: $where) {
		edges {
			node {
				owner {
					id
					invites {
						edges {
							node {
								recipient
								requestorID
								role
								sendAttempts
								status
							}
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) InvitesByOrgID(ctx context.Context, where *InviteWhereInput, interceptors ...clientv2.RequestInterceptor) (*InvitesByOrgID, error) {
	vars := map[string]any{
		"where": where,
	}

	var res InvitesByOrgID
	if err := c.Client.Post(ctx, "InvitesByOrgID", InvitesByOrgIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVMappedControlDocument = `mutation CreateBulkCSVMappedControl ($input: Upload!) {
	createBulkCSVMappedControl(input: $input) {
		mappedControls {
			createdAt
			createdBy
			id
			mappingType
			relation
			controls {
				edges {
					node {
						id
						refCode
						description
					}
				}
			}
			subcontrols {
				edges {
					node {
						id
						refCode
						description
					}
				}
			}
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVMappedControl(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVMappedControl, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVMappedControl
	if err := c.Client.Post(ctx, "CreateBulkCSVMappedControl", CreateBulkCSVMappedControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkMappedControlDocument = `mutation CreateBulkMappedControl ($input: [CreateMappedControlInput!]) {
	createBulkMappedControl(input: $input) {
		mappedControls {
			createdAt
			createdBy
			id
			mappingType
			relation
			tags
			controls {
				edges {
					node {
						id
						refCode
						description
					}
				}
			}
			subcontrols {
				edges {
					node {
						id
						refCode
						description
					}
				}
			}
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkMappedControl(ctx context.Context, input []*CreateMappedControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkMappedControl, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkMappedControl
	if err := c.Client.Post(ctx, "CreateBulkMappedControl", CreateBulkMappedControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateMappedControlDocument = `mutation CreateMappedControl ($input: CreateMappedControlInput!) {
	createMappedControl(input: $input) {
		mappedControl {
			createdAt
			createdBy
			id
			mappingType
			relation
			controls {
				edges {
					node {
						id
						refCode
						description
					}
				}
			}
			subcontrols {
				edges {
					node {
						id
						refCode
						description
					}
				}
			}
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateMappedControl(ctx context.Context, input CreateMappedControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateMappedControl, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateMappedControl
	if err := c.Client.Post(ctx, "CreateMappedControl", CreateMappedControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteMappedControlDocument = `mutation DeleteMappedControl ($deleteMappedControlId: ID!) {
	deleteMappedControl(id: $deleteMappedControlId) {
		deletedID
	}
}
`

func (c *Client) DeleteMappedControl(ctx context.Context, deleteMappedControlID string, interceptors ...clientv2.RequestInterceptor) (*DeleteMappedControl, error) {
	vars := map[string]any{
		"deleteMappedControlId": deleteMappedControlID,
	}

	var res DeleteMappedControl
	if err := c.Client.Post(ctx, "DeleteMappedControl", DeleteMappedControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllMappedControlsDocument = `query GetAllMappedControls {
	mappedControls {
		edges {
			node {
				createdAt
				createdBy
				id
				mappingType
				relation
				controls {
					edges {
						node {
							id
							refCode
							description
						}
					}
				}
				subcontrols {
					edges {
						node {
							id
							refCode
							description
						}
					}
				}
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllMappedControls(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllMappedControls, error) {
	vars := map[string]any{}

	var res GetAllMappedControls
	if err := c.Client.Post(ctx, "GetAllMappedControls", GetAllMappedControlsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetMappedControlByIDDocument = `query GetMappedControlByID ($mappedControlId: ID!) {
	mappedControl(id: $mappedControlId) {
		createdAt
		createdBy
		id
		mappingType
		relation
		controls {
			edges {
				node {
					id
					refCode
					description
				}
			}
		}
		subcontrols {
			edges {
				node {
					id
					refCode
					description
				}
			}
		}
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetMappedControlByID(ctx context.Context, mappedControlID string, interceptors ...clientv2.RequestInterceptor) (*GetMappedControlByID, error) {
	vars := map[string]any{
		"mappedControlId": mappedControlID,
	}

	var res GetMappedControlByID
	if err := c.Client.Post(ctx, "GetMappedControlByID", GetMappedControlByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetMappedControlsDocument = `query GetMappedControls ($where: MappedControlWhereInput) {
	mappedControls(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				id
				mappingType
				relation
				controls {
					edges {
						node {
							id
							refCode
							description
						}
					}
				}
				subcontrols {
					edges {
						node {
							id
							refCode
							description
						}
					}
				}
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetMappedControls(ctx context.Context, where *MappedControlWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetMappedControls, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetMappedControls
	if err := c.Client.Post(ctx, "GetMappedControls", GetMappedControlsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateMappedControlDocument = `mutation UpdateMappedControl ($updateMappedControlId: ID!, $input: UpdateMappedControlInput!) {
	updateMappedControl(id: $updateMappedControlId, input: $input) {
		mappedControl {
			createdAt
			createdBy
			id
			mappingType
			relation
			controls {
				edges {
					node {
						id
						refCode
						description
					}
				}
			}
			subcontrols {
				edges {
					node {
						id
						refCode
						description
					}
				}
			}
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateMappedControl(ctx context.Context, updateMappedControlID string, input UpdateMappedControlInput, interceptors ...clientv2.RequestInterceptor) (*UpdateMappedControl, error) {
	vars := map[string]any{
		"updateMappedControlId": updateMappedControlID,
		"input":                 input,
	}

	var res UpdateMappedControl
	if err := c.Client.Post(ctx, "UpdateMappedControl", UpdateMappedControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllMappedControlHistoriesDocument = `query GetAllMappedControlHistories {
	mappedControlHistories {
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				mappingType
				operation
				ref
				relation
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllMappedControlHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllMappedControlHistories, error) {
	vars := map[string]any{}

	var res GetAllMappedControlHistories
	if err := c.Client.Post(ctx, "GetAllMappedControlHistories", GetAllMappedControlHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetMappedControlHistoriesDocument = `query GetMappedControlHistories ($where: MappedControlHistoryWhereInput) {
	mappedControlHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				mappingType
				operation
				ref
				relation
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetMappedControlHistories(ctx context.Context, where *MappedControlHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetMappedControlHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetMappedControlHistories
	if err := c.Client.Post(ctx, "GetMappedControlHistories", GetMappedControlHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVNarrativeDocument = `mutation CreateBulkCSVNarrative ($input: Upload!) {
	createBulkCSVNarrative(input: $input) {
		narratives {
			createdAt
			createdBy
			description
			details
			displayID
			id
			name
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVNarrative(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVNarrative, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVNarrative
	if err := c.Client.Post(ctx, "CreateBulkCSVNarrative", CreateBulkCSVNarrativeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkNarrativeDocument = `mutation CreateBulkNarrative ($input: [CreateNarrativeInput!]) {
	createBulkNarrative(input: $input) {
		narratives {
			createdAt
			createdBy
			description
			details
			displayID
			id
			name
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkNarrative(ctx context.Context, input []*CreateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkNarrative, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkNarrative
	if err := c.Client.Post(ctx, "CreateBulkNarrative", CreateBulkNarrativeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateNarrativeDocument = `mutation CreateNarrative ($input: CreateNarrativeInput!) {
	createNarrative(input: $input) {
		narrative {
			createdAt
			createdBy
			description
			details
			displayID
			id
			name
			tags
			updatedAt
			updatedBy
			programs {
				edges {
					node {
						id
						name
					}
				}
			}
			editors {
				id
				name
			}
			viewers {
				id
				name
			}
			blockedGroups {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateNarrative(ctx context.Context, input CreateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*CreateNarrative, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateNarrative
	if err := c.Client.Post(ctx, "CreateNarrative", CreateNarrativeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteNarrativeDocument = `mutation DeleteNarrative ($deleteNarrativeId: ID!) {
	deleteNarrative(id: $deleteNarrativeId) {
		deletedID
	}
}
`

func (c *Client) DeleteNarrative(ctx context.Context, deleteNarrativeID string, interceptors ...clientv2.RequestInterceptor) (*DeleteNarrative, error) {
	vars := map[string]any{
		"deleteNarrativeId": deleteNarrativeID,
	}

	var res DeleteNarrative
	if err := c.Client.Post(ctx, "DeleteNarrative", DeleteNarrativeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllNarrativesDocument = `query GetAllNarratives {
	narratives {
		edges {
			node {
				createdAt
				createdBy
				description
				details
				displayID
				id
				name
				tags
				updatedAt
				updatedBy
				programs {
					edges {
						node {
							id
							name
						}
					}
				}
				editors {
					id
					name
				}
				viewers {
					id
					name
				}
				blockedGroups {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetAllNarratives(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllNarratives, error) {
	vars := map[string]any{}

	var res GetAllNarratives
	if err := c.Client.Post(ctx, "GetAllNarratives", GetAllNarrativesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetNarrativeByIDDocument = `query GetNarrativeByID ($narrativeId: ID!) {
	narrative(id: $narrativeId) {
		createdAt
		createdBy
		description
		details
		displayID
		id
		name
		tags
		updatedAt
		updatedBy
		programs {
			edges {
				node {
					id
					name
				}
			}
		}
		editors {
			id
			name
		}
		viewers {
			id
			name
		}
		blockedGroups {
			id
			name
		}
	}
}
`

func (c *Client) GetNarrativeByID(ctx context.Context, narrativeID string, interceptors ...clientv2.RequestInterceptor) (*GetNarrativeByID, error) {
	vars := map[string]any{
		"narrativeId": narrativeID,
	}

	var res GetNarrativeByID
	if err := c.Client.Post(ctx, "GetNarrativeByID", GetNarrativeByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetNarrativesDocument = `query GetNarratives ($where: NarrativeWhereInput) {
	narratives(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				details
				displayID
				id
				name
				tags
				updatedAt
				updatedBy
				programs {
					edges {
						node {
							id
							name
						}
					}
				}
				editors {
					id
					name
				}
				viewers {
					id
					name
				}
				blockedGroups {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetNarratives(ctx context.Context, where *NarrativeWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetNarratives, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetNarratives
	if err := c.Client.Post(ctx, "GetNarratives", GetNarrativesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateNarrativeDocument = `mutation UpdateNarrative ($updateNarrativeId: ID!, $input: UpdateNarrativeInput!) {
	updateNarrative(id: $updateNarrativeId, input: $input) {
		narrative {
			createdAt
			createdBy
			description
			details
			displayID
			id
			name
			tags
			updatedAt
			updatedBy
			programs {
				edges {
					node {
						id
						name
					}
				}
			}
			editors {
				id
				name
			}
			viewers {
				id
				name
			}
			blockedGroups {
				id
				name
			}
		}
	}
}
`

func (c *Client) UpdateNarrative(ctx context.Context, updateNarrativeID string, input UpdateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*UpdateNarrative, error) {
	vars := map[string]any{
		"updateNarrativeId": updateNarrativeID,
		"input":             input,
	}

	var res UpdateNarrative
	if err := c.Client.Post(ctx, "UpdateNarrative", UpdateNarrativeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllNarrativeHistoriesDocument = `query GetAllNarrativeHistories {
	narrativeHistories {
		edges {
			node {
				createdAt
				createdBy
				description
				details
				historyTime
				id
				name
				operation
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllNarrativeHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllNarrativeHistories, error) {
	vars := map[string]any{}

	var res GetAllNarrativeHistories
	if err := c.Client.Post(ctx, "GetAllNarrativeHistories", GetAllNarrativeHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetNarrativeHistoriesDocument = `query GetNarrativeHistories ($where: NarrativeHistoryWhereInput) {
	narrativeHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				details
				historyTime
				id
				name
				operation
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetNarrativeHistories(ctx context.Context, where *NarrativeHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetNarrativeHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetNarrativeHistories
	if err := c.Client.Post(ctx, "GetNarrativeHistories", GetNarrativeHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetNoteByIDDocument = `query GetNoteByID ($noteId: ID!) {
	note(id: $noteId) {
		id
		displayID
		text
		createdAt
		createdBy
		updatedAt
		updatedBy
		files {
			edges {
				node {
					id
					storagePath
					storageScheme
					storageVolume
				}
			}
		}
	}
}
`

func (c *Client) GetNoteByID(ctx context.Context, noteID string, interceptors ...clientv2.RequestInterceptor) (*GetNoteByID, error) {
	vars := map[string]any{
		"noteId": noteID,
	}

	var res GetNoteByID
	if err := c.Client.Post(ctx, "GetNoteByID", GetNoteByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllNoteHistoriesDocument = `query GetAllNoteHistories {
	noteHistories {
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				ownerID
				ref
				text
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllNoteHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllNoteHistories, error) {
	vars := map[string]any{}

	var res GetAllNoteHistories
	if err := c.Client.Post(ctx, "GetAllNoteHistories", GetAllNoteHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetNoteHistoriesDocument = `query GetNoteHistories ($where: NoteHistoryWhereInput) {
	noteHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				ownerID
				ref
				text
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetNoteHistories(ctx context.Context, where *NoteHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetNoteHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetNoteHistories
	if err := c.Client.Post(ctx, "GetNoteHistories", GetNoteHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateOnboardingDocument = `mutation CreateOnboarding ($input: CreateOnboardingInput!) {
	createOnboarding(input: $input) {
		onboarding {
			companyDetails
			companyName
			domains
			compliance
			id
			organizationID
			userDetails
		}
	}
}
`

func (c *Client) CreateOnboarding(ctx context.Context, input CreateOnboardingInput, interceptors ...clientv2.RequestInterceptor) (*CreateOnboarding, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateOnboarding
	if err := c.Client.Post(ctx, "CreateOnboarding", CreateOnboardingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateOrganizationDocument = `mutation CreateOrganization ($input: CreateOrganizationInput!, $avatarFile: Upload) {
	createOrganization(input: $input, avatarFile: $avatarFile) {
		organization {
			id
			name
			displayName
			description
			personalOrg
			tags
			avatarRemoteURL
			avatarLocalFileID
			avatarFile {
				presignedURL
			}
			createdAt
			updatedAt
			setting {
				id
				allowedEmailDomains
				createdAt
				updatedAt
				createdBy
				updatedBy
				domains
				billingContact
				billingEmail
				billingPhone
				billingAddress
				taxIdentifier
				geoLocation
				tags
			}
			parent {
				id
				name
			}
			children {
				edges {
					node {
						id
						name
						displayName
						description
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateOrganization(ctx context.Context, input CreateOrganizationInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateOrganization, error) {
	vars := map[string]any{
		"input":      input,
		"avatarFile": avatarFile,
	}

	var res CreateOrganization
	if err := c.Client.Post(ctx, "CreateOrganization", CreateOrganizationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateOrganizationWithMembersDocument = `mutation CreateOrganizationWithMembers ($organizationInput: CreateOrganizationInput!, $members: [OrgMembersInput!]) {
	createOrganizationWithMembers(organizationInput: $organizationInput, members: $members) {
		organization {
			id
			name
			displayName
			setting {
				id
				allowedEmailDomains
				createdAt
				updatedAt
				createdBy
				updatedBy
				domains
				billingContact
				billingEmail
				billingPhone
				billingAddress
				taxIdentifier
				geoLocation
				tags
			}
			members {
				totalCount
				edges {
					node {
						id
						role
						user {
							id
							firstName
							lastName
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateOrganizationWithMembers(ctx context.Context, organizationInput CreateOrganizationInput, members []*OrgMembersInput, interceptors ...clientv2.RequestInterceptor) (*CreateOrganizationWithMembers, error) {
	vars := map[string]any{
		"organizationInput": organizationInput,
		"members":           members,
	}

	var res CreateOrganizationWithMembers
	if err := c.Client.Post(ctx, "CreateOrganizationWithMembers", CreateOrganizationWithMembersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteOrganizationDocument = `mutation DeleteOrganization ($deleteOrganizationId: ID!) {
	deleteOrganization(id: $deleteOrganizationId) {
		deletedID
	}
}
`

func (c *Client) DeleteOrganization(ctx context.Context, deleteOrganizationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteOrganization, error) {
	vars := map[string]any{
		"deleteOrganizationId": deleteOrganizationID,
	}

	var res DeleteOrganization
	if err := c.Client.Post(ctx, "DeleteOrganization", DeleteOrganizationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrganizationsDocument = `query GetAllOrganizations {
	organizations {
		edges {
			node {
				id
				name
				displayName
				description
				personalOrg
				tags
				parent {
					id
					name
				}
				children {
					edges {
						node {
							id
							name
							displayName
							description
						}
					}
				}
				members {
					totalCount
					edges {
						node {
							id
							role
							user {
								id
								firstName
								lastName
							}
						}
					}
				}
				setting {
					id
					allowedEmailDomains
					createdAt
					updatedAt
					createdBy
					updatedBy
					domains
					billingContact
					billingEmail
					billingPhone
					billingAddress
					taxIdentifier
					geoLocation
					tags
				}
				orgSubscriptions {
					stripeCustomerID
					stripeSubscriptionStatus
					active
					productTier
					features
					id
				}
				controlCreators {
					id
					displayID
					name
					displayName
				}
				programCreators {
					id
					displayID
					name
					displayName
				}
				procedureCreators {
					id
					displayID
					name
					displayName
				}
				internalPolicyCreators {
					id
					displayID
					name
					displayName
				}
				controlObjectiveCreators {
					id
					displayID
					name
					displayName
				}
				narrativeCreators {
					id
					displayID
					name
					displayName
				}
				riskCreators {
					id
					displayID
					name
					displayName
				}
				templateCreators {
					id
					displayID
					name
					displayName
				}
				createdAt
				updatedAt
			}
		}
	}
}
`

func (c *Client) GetAllOrganizations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizations, error) {
	vars := map[string]any{}

	var res GetAllOrganizations
	if err := c.Client.Post(ctx, "GetAllOrganizations", GetAllOrganizationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationByIDDocument = `query GetOrganizationByID ($organizationId: ID!) {
	organization(id: $organizationId) {
		id
		name
		displayName
		description
		personalOrg
		tags
		avatarRemoteURL
		avatarLocalFileID
		parent {
			id
			name
		}
		children {
			edges {
				node {
					id
					name
					displayName
					description
				}
			}
		}
		members {
			totalCount
			edges {
				node {
					id
					role
					user {
						id
						firstName
						lastName
					}
				}
			}
		}
		setting {
			id
			allowedEmailDomains
			createdAt
			updatedAt
			createdBy
			updatedBy
			domains
			billingContact
			billingEmail
			billingPhone
			billingAddress
			taxIdentifier
			geoLocation
			tags
		}
		orgSubscriptions {
			stripeCustomerID
			stripeSubscriptionStatus
			active
			productTier
			features
			id
		}
		controlCreators {
			id
			displayID
			name
			displayName
		}
		programCreators {
			id
			displayID
			name
			displayName
		}
		procedureCreators {
			id
			displayID
			name
			displayName
		}
		internalPolicyCreators {
			id
			displayID
			name
			displayName
		}
		controlObjectiveCreators {
			id
			displayID
			name
			displayName
		}
		narrativeCreators {
			id
			displayID
			name
			displayName
		}
		riskCreators {
			id
			displayID
			name
			displayName
		}
		templateCreators {
			id
			displayID
			name
			displayName
		}
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetOrganizationByID(ctx context.Context, organizationID string, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationByID, error) {
	vars := map[string]any{
		"organizationId": organizationID,
	}

	var res GetOrganizationByID
	if err := c.Client.Post(ctx, "GetOrganizationByID", GetOrganizationByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationsDocument = `query GetOrganizations ($where: OrganizationWhereInput) {
	organizations(where: $where) {
		edges {
			node {
				id
				name
				displayName
				description
				personalOrg
				tags
				parent {
					id
					name
				}
				children {
					edges {
						node {
							id
							name
							displayName
							description
						}
					}
				}
				members {
					totalCount
					edges {
						node {
							id
							role
							user {
								id
								firstName
								lastName
							}
						}
					}
				}
				setting {
					id
					allowedEmailDomains
					createdAt
					updatedAt
					createdBy
					updatedBy
					domains
					billingContact
					billingEmail
					billingPhone
					billingAddress
					taxIdentifier
					geoLocation
					tags
				}
				orgSubscriptions {
					stripeCustomerID
					stripeSubscriptionStatus
					active
					productTier
					features
					id
				}
				controlCreators {
					id
					displayID
					name
					displayName
				}
				programCreators {
					id
					displayID
					name
					displayName
				}
				procedureCreators {
					id
					displayID
					name
					displayName
				}
				internalPolicyCreators {
					id
					displayID
					name
					displayName
				}
				controlObjectiveCreators {
					id
					displayID
					name
					displayName
				}
				narrativeCreators {
					id
					displayID
					name
					displayName
				}
				riskCreators {
					id
					displayID
					name
					displayName
				}
				templateCreators {
					id
					displayID
					name
					displayName
				}
				createdAt
				updatedAt
			}
		}
	}
}
`

func (c *Client) GetOrganizations(ctx context.Context, where *OrganizationWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizations, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOrganizations
	if err := c.Client.Post(ctx, "GetOrganizations", GetOrganizationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateOrganizationDocument = `mutation UpdateOrganization ($updateOrganizationId: ID!, $input: UpdateOrganizationInput!, $avatarFile: Upload) {
	updateOrganization(id: $updateOrganizationId, input: $input, avatarFile: $avatarFile) {
		organization {
			id
			name
			displayName
			description
			personalOrg
			avatarLocalFileID
			avatarRemoteURL
			avatarFile {
				presignedURL
			}
			tags
			members {
				totalCount
				edges {
					node {
						id
						role
						userID
					}
				}
			}
			setting {
				id
				allowedEmailDomains
				createdAt
				updatedAt
				createdBy
				updatedBy
				domains
				billingContact
				billingEmail
				billingPhone
				billingAddress
				taxIdentifier
				geoLocation
				tags
			}
			orgSubscriptions {
				stripeCustomerID
				stripeSubscriptionStatus
				active
				productTier
				features
				id
			}
			controlCreators {
				id
				displayID
				name
				displayName
			}
			programCreators {
				id
				displayID
				name
				displayName
			}
			procedureCreators {
				id
				displayID
				name
				displayName
			}
			internalPolicyCreators {
				id
				displayID
				name
				displayName
			}
			controlObjectiveCreators {
				id
				displayID
				name
				displayName
			}
			narrativeCreators {
				id
				displayID
				name
				displayName
			}
			riskCreators {
				id
				displayID
				name
				displayName
			}
			templateCreators {
				id
				displayID
				name
				displayName
			}
		}
	}
}
`

func (c *Client) UpdateOrganization(ctx context.Context, updateOrganizationID string, input UpdateOrganizationInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateOrganization, error) {
	vars := map[string]any{
		"updateOrganizationId": updateOrganizationID,
		"input":                input,
		"avatarFile":           avatarFile,
	}

	var res UpdateOrganization
	if err := c.Client.Post(ctx, "UpdateOrganization", UpdateOrganizationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrganizationHistoriesDocument = `query GetAllOrganizationHistories {
	organizationHistories {
		edges {
			node {
				avatarRemoteURL
				createdAt
				createdBy
				dedicatedDb
				description
				displayName
				historyTime
				id
				name
				operation
				personalOrg
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllOrganizationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizationHistories, error) {
	vars := map[string]any{}

	var res GetAllOrganizationHistories
	if err := c.Client.Post(ctx, "GetAllOrganizationHistories", GetAllOrganizationHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationHistoriesDocument = `query GetOrganizationHistories ($where: OrganizationHistoryWhereInput) {
	organizationHistories(where: $where) {
		edges {
			node {
				avatarRemoteURL
				createdAt
				createdBy
				dedicatedDb
				description
				displayName
				historyTime
				id
				name
				operation
				personalOrg
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetOrganizationHistories(ctx context.Context, where *OrganizationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOrganizationHistories
	if err := c.Client.Post(ctx, "GetOrganizationHistories", GetOrganizationHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrganizationSettingsDocument = `query GetAllOrganizationSettings {
	organizationSettings {
		edges {
			node {
				allowedEmailDomains
				billingAddress
				billingContact
				billingEmail
				billingPhone
				createdAt
				createdBy
				domains
				geoLocation
				id
				tags
				taxIdentifier
				updatedAt
				updatedBy
				organization {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetAllOrganizationSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizationSettings, error) {
	vars := map[string]any{}

	var res GetAllOrganizationSettings
	if err := c.Client.Post(ctx, "GetAllOrganizationSettings", GetAllOrganizationSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationSettingByIDDocument = `query GetOrganizationSettingByID ($organizationSettingId: ID!) {
	organizationSetting(id: $organizationSettingId) {
		allowedEmailDomains
		billingAddress
		billingContact
		billingEmail
		billingPhone
		createdAt
		createdBy
		domains
		geoLocation
		id
		tags
		taxIdentifier
		updatedAt
		updatedBy
		organization {
			id
			name
		}
	}
}
`

func (c *Client) GetOrganizationSettingByID(ctx context.Context, organizationSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettingByID, error) {
	vars := map[string]any{
		"organizationSettingId": organizationSettingID,
	}

	var res GetOrganizationSettingByID
	if err := c.Client.Post(ctx, "GetOrganizationSettingByID", GetOrganizationSettingByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationSettingsDocument = `query GetOrganizationSettings ($where: OrganizationSettingWhereInput!) {
	organizationSettings(where: $where) {
		edges {
			node {
				allowedEmailDomains
				billingAddress
				billingContact
				billingEmail
				billingPhone
				createdAt
				createdBy
				domains
				geoLocation
				id
				tags
				taxIdentifier
				updatedAt
				updatedBy
				organization {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetOrganizationSettings(ctx context.Context, where OrganizationSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettings, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOrganizationSettings
	if err := c.Client.Post(ctx, "GetOrganizationSettings", GetOrganizationSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateOrganizationSettingDocument = `mutation UpdateOrganizationSetting ($updateOrganizationSettingId: ID!, $input: UpdateOrganizationSettingInput!) {
	updateOrganizationSetting(id: $updateOrganizationSettingId, input: $input) {
		organizationSetting {
			allowedEmailDomains
			billingAddress
			billingContact
			billingEmail
			billingPhone
			createdAt
			createdBy
			domains
			geoLocation
			id
			tags
			taxIdentifier
			updatedAt
			updatedBy
			organization {
				id
				name
			}
		}
	}
}
`

func (c *Client) UpdateOrganizationSetting(ctx context.Context, updateOrganizationSettingID string, input UpdateOrganizationSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateOrganizationSetting, error) {
	vars := map[string]any{
		"updateOrganizationSettingId": updateOrganizationSettingID,
		"input":                       input,
	}

	var res UpdateOrganizationSetting
	if err := c.Client.Post(ctx, "UpdateOrganizationSetting", UpdateOrganizationSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrganizationSettingHistoriesDocument = `query GetAllOrganizationSettingHistories {
	organizationSettingHistories {
		edges {
			node {
				billingAddress
				billingContact
				billingEmail
				billingPhone
				createdAt
				createdBy
				domains
				geoLocation
				historyTime
				id
				operation
				organizationID
				ref
				tags
				taxIdentifier
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllOrganizationSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizationSettingHistories, error) {
	vars := map[string]any{}

	var res GetAllOrganizationSettingHistories
	if err := c.Client.Post(ctx, "GetAllOrganizationSettingHistories", GetAllOrganizationSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationSettingHistoriesDocument = `query GetOrganizationSettingHistories ($where: OrganizationSettingHistoryWhereInput) {
	organizationSettingHistories(where: $where) {
		edges {
			node {
				billingAddress
				billingContact
				billingEmail
				billingPhone
				createdAt
				createdBy
				domains
				geoLocation
				historyTime
				id
				operation
				organizationID
				ref
				tags
				taxIdentifier
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetOrganizationSettingHistories(ctx context.Context, where *OrganizationSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettingHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOrganizationSettingHistories
	if err := c.Client.Post(ctx, "GetOrganizationSettingHistories", GetOrganizationSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const AddUserToOrgWithRoleDocument = `mutation AddUserToOrgWithRole ($input: CreateOrgMembershipInput!) {
	createOrgMembership(input: $input) {
		orgMembership {
			id
			role
			userID
			organizationID
		}
	}
}
`

func (c *Client) AddUserToOrgWithRole(ctx context.Context, input CreateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*AddUserToOrgWithRole, error) {
	vars := map[string]any{
		"input": input,
	}

	var res AddUserToOrgWithRole
	if err := c.Client.Post(ctx, "AddUserToOrgWithRole", AddUserToOrgWithRoleDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVOrgMembersDocument = `mutation CreateBulkCSVOrgMembers ($input: Upload!) {
	createBulkCSVOrgMembership(input: $input) {
		orgMemberships {
			id
			organizationID
			role
			userID
		}
	}
}
`

func (c *Client) CreateBulkCSVOrgMembers(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVOrgMembers, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVOrgMembers
	if err := c.Client.Post(ctx, "CreateBulkCSVOrgMembers", CreateBulkCSVOrgMembersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkOrgMembersDocument = `mutation CreateBulkOrgMembers ($input: [CreateOrgMembershipInput!]) {
	createBulkOrgMembership(input: $input) {
		orgMemberships {
			id
			organizationID
			role
			userID
		}
	}
}
`

func (c *Client) CreateBulkOrgMembers(ctx context.Context, input []*CreateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkOrgMembers, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkOrgMembers
	if err := c.Client.Post(ctx, "CreateBulkOrgMembers", CreateBulkOrgMembersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrgMembersByOrgIDDocument = `query GetOrgMembersByOrgID ($where: OrgMembershipWhereInput) {
	orgMemberships(where: $where) {
		edges {
			node {
				id
				organizationID
				userID
				role
				user {
					firstName
					lastName
					id
					displayName
					email
				}
			}
		}
	}
}
`

func (c *Client) GetOrgMembersByOrgID(ctx context.Context, where *OrgMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgMembersByOrgID, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOrgMembersByOrgID
	if err := c.Client.Post(ctx, "GetOrgMembersByOrgID", GetOrgMembersByOrgIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const RemoveUserFromOrgDocument = `mutation RemoveUserFromOrg ($deleteOrgMembershipId: ID!) {
	deleteOrgMembership(id: $deleteOrgMembershipId) {
		deletedID
	}
}
`

func (c *Client) RemoveUserFromOrg(ctx context.Context, deleteOrgMembershipID string, interceptors ...clientv2.RequestInterceptor) (*RemoveUserFromOrg, error) {
	vars := map[string]any{
		"deleteOrgMembershipId": deleteOrgMembershipID,
	}

	var res RemoveUserFromOrg
	if err := c.Client.Post(ctx, "RemoveUserFromOrg", RemoveUserFromOrgDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateUserRoleInOrgDocument = `mutation UpdateUserRoleInOrg ($updateOrgMemberId: ID!, $input: UpdateOrgMembershipInput!) {
	updateOrgMembership(id: $updateOrgMemberId, input: $input) {
		orgMembership {
			id
			role
			userID
			organizationID
		}
	}
}
`

func (c *Client) UpdateUserRoleInOrg(ctx context.Context, updateOrgMemberID string, input UpdateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUserRoleInOrg, error) {
	vars := map[string]any{
		"updateOrgMemberId": updateOrgMemberID,
		"input":             input,
	}

	var res UpdateUserRoleInOrg
	if err := c.Client.Post(ctx, "UpdateUserRoleInOrg", UpdateUserRoleInOrgDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrgMembershipHistoriesDocument = `query GetAllOrgMembershipHistories {
	orgMembershipHistories {
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				organizationID
				ref
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetAllOrgMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrgMembershipHistories, error) {
	vars := map[string]any{}

	var res GetAllOrgMembershipHistories
	if err := c.Client.Post(ctx, "GetAllOrgMembershipHistories", GetAllOrgMembershipHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrgMembershipHistoriesDocument = `query GetOrgMembershipHistories ($where: OrgMembershipHistoryWhereInput) {
	orgMembershipHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				organizationID
				ref
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetOrgMembershipHistories(ctx context.Context, where *OrgMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgMembershipHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOrgMembershipHistories
	if err := c.Client.Post(ctx, "GetOrgMembershipHistories", GetOrgMembershipHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrgSubscriptionsDocument = `query GetAllOrgSubscriptions {
	orgSubscriptions {
		edges {
			node {
				active
				createdAt
				createdBy
				daysUntilDue
				expiresAt
				featureLookupKeys
				features
				id
				ownerID
				paymentMethodAdded
				productPrice
				productTier
				stripeCustomerID
				stripeProductTierID
				stripeSubscriptionID
				stripeSubscriptionStatus
				tags
				trialExpiresAt
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllOrgSubscriptions(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrgSubscriptions, error) {
	vars := map[string]any{}

	var res GetAllOrgSubscriptions
	if err := c.Client.Post(ctx, "GetAllOrgSubscriptions", GetAllOrgSubscriptionsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrgSubscriptionByIDDocument = `query GetOrgSubscriptionByID ($orgSubscriptionId: ID!) {
	orgSubscription(id: $orgSubscriptionId) {
		active
		createdAt
		createdBy
		daysUntilDue
		expiresAt
		featureLookupKeys
		features
		id
		ownerID
		paymentMethodAdded
		productPrice
		productTier
		stripeCustomerID
		stripeProductTierID
		stripeSubscriptionID
		stripeSubscriptionStatus
		tags
		trialExpiresAt
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetOrgSubscriptionByID(ctx context.Context, orgSubscriptionID string, interceptors ...clientv2.RequestInterceptor) (*GetOrgSubscriptionByID, error) {
	vars := map[string]any{
		"orgSubscriptionId": orgSubscriptionID,
	}

	var res GetOrgSubscriptionByID
	if err := c.Client.Post(ctx, "GetOrgSubscriptionByID", GetOrgSubscriptionByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrgSubscriptionsDocument = `query GetOrgSubscriptions ($where: OrgSubscriptionWhereInput) {
	orgSubscriptions(where: $where) {
		edges {
			node {
				active
				createdAt
				createdBy
				daysUntilDue
				expiresAt
				featureLookupKeys
				features
				id
				ownerID
				paymentMethodAdded
				productPrice
				productTier
				stripeCustomerID
				stripeProductTierID
				stripeSubscriptionID
				stripeSubscriptionStatus
				tags
				trialExpiresAt
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetOrgSubscriptions(ctx context.Context, where *OrgSubscriptionWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgSubscriptions, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOrgSubscriptions
	if err := c.Client.Post(ctx, "GetOrgSubscriptions", GetOrgSubscriptionsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrgSubscriptionHistoriesDocument = `query GetAllOrgSubscriptionHistories {
	orgSubscriptionHistories {
		edges {
			node {
				active
				createdAt
				createdBy
				expiresAt
				features
				historyTime
				id
				operation
				ownerID
				productTier
				ref
				stripeCustomerID
				stripeProductTierID
				stripeSubscriptionID
				stripeSubscriptionStatus
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllOrgSubscriptionHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrgSubscriptionHistories, error) {
	vars := map[string]any{}

	var res GetAllOrgSubscriptionHistories
	if err := c.Client.Post(ctx, "GetAllOrgSubscriptionHistories", GetAllOrgSubscriptionHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrgSubscriptionHistoriesDocument = `query GetOrgSubscriptionHistories ($where: OrgSubscriptionHistoryWhereInput) {
	orgSubscriptionHistories(where: $where) {
		edges {
			node {
				active
				createdAt
				createdBy
				expiresAt
				features
				historyTime
				id
				operation
				ownerID
				productTier
				ref
				stripeCustomerID
				stripeProductTierID
				stripeSubscriptionID
				stripeSubscriptionStatus
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetOrgSubscriptionHistories(ctx context.Context, where *OrgSubscriptionHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgSubscriptionHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOrgSubscriptionHistories
	if err := c.Client.Post(ctx, "GetOrgSubscriptionHistories", GetOrgSubscriptionHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreatePersonalAccessTokenDocument = `mutation CreatePersonalAccessToken ($input: CreatePersonalAccessTokenInput!) {
	createPersonalAccessToken(input: $input) {
		personalAccessToken {
			createdAt
			createdBy
			description
			expiresAt
			id
			isActive
			lastUsedAt
			name
			revokedAt
			revokedBy
			revokedReason
			scopes
			tags
			token
			updatedAt
			updatedBy
			organizations {
				edges {
					node {
						id
						name
					}
				}
			}
			owner {
				id
			}
		}
	}
}
`

func (c *Client) CreatePersonalAccessToken(ctx context.Context, input CreatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreatePersonalAccessToken, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreatePersonalAccessToken
	if err := c.Client.Post(ctx, "CreatePersonalAccessToken", CreatePersonalAccessTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeletePersonalAccessTokenDocument = `mutation DeletePersonalAccessToken ($deletePersonalAccessTokenId: ID!) {
	deletePersonalAccessToken(id: $deletePersonalAccessTokenId) {
		deletedID
	}
}
`

func (c *Client) DeletePersonalAccessToken(ctx context.Context, deletePersonalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*DeletePersonalAccessToken, error) {
	vars := map[string]any{
		"deletePersonalAccessTokenId": deletePersonalAccessTokenID,
	}

	var res DeletePersonalAccessToken
	if err := c.Client.Post(ctx, "DeletePersonalAccessToken", DeletePersonalAccessTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllPersonalAccessTokensDocument = `query GetAllPersonalAccessTokens {
	personalAccessTokens {
		edges {
			node {
				createdAt
				createdBy
				description
				expiresAt
				id
				isActive
				lastUsedAt
				name
				revokedAt
				revokedBy
				revokedReason
				scopes
				tags
				token
				updatedAt
				updatedBy
				organizations {
					edges {
						node {
							id
							name
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetAllPersonalAccessTokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllPersonalAccessTokens, error) {
	vars := map[string]any{}

	var res GetAllPersonalAccessTokens
	if err := c.Client.Post(ctx, "GetAllPersonalAccessTokens", GetAllPersonalAccessTokensDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetPersonalAccessTokenByIDDocument = `query GetPersonalAccessTokenByID ($personalAccessTokenId: ID!) {
	personalAccessToken(id: $personalAccessTokenId) {
		createdAt
		createdBy
		description
		expiresAt
		id
		isActive
		lastUsedAt
		name
		revokedAt
		revokedBy
		revokedReason
		scopes
		tags
		token
		updatedAt
		updatedBy
		organizations {
			edges {
				node {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetPersonalAccessTokenByID(ctx context.Context, personalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*GetPersonalAccessTokenByID, error) {
	vars := map[string]any{
		"personalAccessTokenId": personalAccessTokenID,
	}

	var res GetPersonalAccessTokenByID
	if err := c.Client.Post(ctx, "GetPersonalAccessTokenByID", GetPersonalAccessTokenByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetPersonalAccessTokensDocument = `query GetPersonalAccessTokens ($where: PersonalAccessTokenWhereInput) {
	personalAccessTokens(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				expiresAt
				id
				isActive
				lastUsedAt
				name
				revokedAt
				revokedBy
				revokedReason
				scopes
				tags
				token
				updatedAt
				updatedBy
				organizations {
					edges {
						node {
							id
							name
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetPersonalAccessTokens(ctx context.Context, where *PersonalAccessTokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetPersonalAccessTokens, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetPersonalAccessTokens
	if err := c.Client.Post(ctx, "GetPersonalAccessTokens", GetPersonalAccessTokensDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdatePersonalAccessTokenDocument = `mutation UpdatePersonalAccessToken ($updatePersonalAccessTokenId: ID!, $input: UpdatePersonalAccessTokenInput!) {
	updatePersonalAccessToken(id: $updatePersonalAccessTokenId, input: $input) {
		personalAccessToken {
			createdAt
			createdBy
			description
			expiresAt
			id
			isActive
			lastUsedAt
			name
			revokedAt
			revokedBy
			revokedReason
			scopes
			tags
			token
			updatedAt
			updatedBy
			organizations {
				edges {
					node {
						id
						name
					}
				}
			}
			owner {
				id
			}
		}
	}
}
`

func (c *Client) UpdatePersonalAccessToken(ctx context.Context, updatePersonalAccessTokenID string, input UpdatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*UpdatePersonalAccessToken, error) {
	vars := map[string]any{
		"updatePersonalAccessTokenId": updatePersonalAccessTokenID,
		"input":                       input,
	}

	var res UpdatePersonalAccessToken
	if err := c.Client.Post(ctx, "UpdatePersonalAccessToken", UpdatePersonalAccessTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVProcedureDocument = `mutation CreateBulkCSVProcedure ($input: Upload!) {
	createBulkCSVProcedure(input: $input) {
		procedures {
			approvalRequired
			createdAt
			createdBy
			details
			displayID
			id
			name
			ownerID
			procedureType
			reviewDue
			reviewFrequency
			revision
			status
			tags
			updatedAt
			updatedBy
			approver {
				id
				name
			}
			delegate {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVProcedure(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVProcedure, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVProcedure
	if err := c.Client.Post(ctx, "CreateBulkCSVProcedure", CreateBulkCSVProcedureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkProcedureDocument = `mutation CreateBulkProcedure ($input: [CreateProcedureInput!]) {
	createBulkProcedure(input: $input) {
		procedures {
			approvalRequired
			createdAt
			createdBy
			details
			displayID
			id
			name
			ownerID
			procedureType
			reviewDue
			reviewFrequency
			revision
			status
			tags
			updatedAt
			updatedBy
			approver {
				id
				name
			}
			delegate {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateBulkProcedure(ctx context.Context, input []*CreateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkProcedure, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkProcedure
	if err := c.Client.Post(ctx, "CreateBulkProcedure", CreateBulkProcedureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateProcedureDocument = `mutation CreateProcedure ($input: CreateProcedureInput!) {
	createProcedure(input: $input) {
		procedure {
			approvalRequired
			createdAt
			createdBy
			details
			displayID
			id
			name
			ownerID
			procedureType
			reviewDue
			reviewFrequency
			revision
			status
			tags
			updatedAt
			updatedBy
			editors {
				id
				name
			}
			blockedGroups {
				id
				name
			}
			approver {
				id
				name
			}
			delegate {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateProcedure(ctx context.Context, input CreateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*CreateProcedure, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateProcedure
	if err := c.Client.Post(ctx, "CreateProcedure", CreateProcedureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteProcedureDocument = `mutation DeleteProcedure ($deleteProcedureId: ID!) {
	deleteProcedure(id: $deleteProcedureId) {
		deletedID
	}
}
`

func (c *Client) DeleteProcedure(ctx context.Context, deleteProcedureID string, interceptors ...clientv2.RequestInterceptor) (*DeleteProcedure, error) {
	vars := map[string]any{
		"deleteProcedureId": deleteProcedureID,
	}

	var res DeleteProcedure
	if err := c.Client.Post(ctx, "DeleteProcedure", DeleteProcedureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllProceduresDocument = `query GetAllProcedures {
	procedures {
		edges {
			node {
				approvalRequired
				createdAt
				createdBy
				details
				displayID
				id
				name
				ownerID
				procedureType
				reviewDue
				reviewFrequency
				revision
				status
				tags
				updatedAt
				updatedBy
				editors {
					id
					name
				}
				blockedGroups {
					id
					name
				}
				approver {
					id
					name
				}
				delegate {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetAllProcedures(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProcedures, error) {
	vars := map[string]any{}

	var res GetAllProcedures
	if err := c.Client.Post(ctx, "GetAllProcedures", GetAllProceduresDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProcedureByIDDocument = `query GetProcedureByID ($procedureId: ID!) {
	procedure(id: $procedureId) {
		approvalRequired
		createdAt
		createdBy
		details
		displayID
		id
		name
		ownerID
		procedureType
		reviewDue
		reviewFrequency
		revision
		status
		tags
		updatedAt
		updatedBy
		editors {
			id
			name
		}
		blockedGroups {
			id
			name
		}
		approver {
			id
			name
		}
		delegate {
			id
			name
		}
	}
}
`

func (c *Client) GetProcedureByID(ctx context.Context, procedureID string, interceptors ...clientv2.RequestInterceptor) (*GetProcedureByID, error) {
	vars := map[string]any{
		"procedureId": procedureID,
	}

	var res GetProcedureByID
	if err := c.Client.Post(ctx, "GetProcedureByID", GetProcedureByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProceduresDocument = `query GetProcedures ($where: ProcedureWhereInput) {
	procedures(where: $where) {
		edges {
			node {
				approvalRequired
				createdAt
				createdBy
				details
				displayID
				id
				name
				ownerID
				procedureType
				reviewDue
				reviewFrequency
				revision
				status
				tags
				updatedAt
				updatedBy
				editors {
					id
					name
				}
				blockedGroups {
					id
					name
				}
				approver {
					id
					name
				}
				delegate {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetProcedures(ctx context.Context, where *ProcedureWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProcedures, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetProcedures
	if err := c.Client.Post(ctx, "GetProcedures", GetProceduresDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateProcedureDocument = `mutation UpdateProcedure ($updateProcedureId: ID!, $input: UpdateProcedureInput!) {
	updateProcedure(id: $updateProcedureId, input: $input) {
		procedure {
			approvalRequired
			createdAt
			createdBy
			details
			displayID
			id
			name
			ownerID
			procedureType
			reviewDue
			reviewFrequency
			revision
			status
			tags
			updatedAt
			updatedBy
			editors {
				id
				name
			}
			blockedGroups {
				id
				name
			}
			approver {
				id
				name
			}
			delegate {
				id
				name
			}
		}
	}
}
`

func (c *Client) UpdateProcedure(ctx context.Context, updateProcedureID string, input UpdateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*UpdateProcedure, error) {
	vars := map[string]any{
		"updateProcedureId": updateProcedureID,
		"input":             input,
	}

	var res UpdateProcedure
	if err := c.Client.Post(ctx, "UpdateProcedure", UpdateProcedureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllProcedureHistoriesDocument = `query GetAllProcedureHistories {
	procedureHistories {
		edges {
			node {
				approvalRequired
				createdAt
				createdBy
				details
				displayID
				historyTime
				id
				name
				operation
				ownerID
				procedureType
				ref
				reviewDue
				reviewFrequency
				revision
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllProcedureHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProcedureHistories, error) {
	vars := map[string]any{}

	var res GetAllProcedureHistories
	if err := c.Client.Post(ctx, "GetAllProcedureHistories", GetAllProcedureHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProcedureHistoriesDocument = `query GetProcedureHistories ($where: ProcedureHistoryWhereInput) {
	procedureHistories(where: $where) {
		edges {
			node {
				approvalRequired
				createdAt
				createdBy
				details
				displayID
				historyTime
				id
				name
				operation
				ownerID
				procedureType
				ref
				reviewDue
				reviewFrequency
				revision
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetProcedureHistories(ctx context.Context, where *ProcedureHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProcedureHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetProcedureHistories
	if err := c.Client.Post(ctx, "GetProcedureHistories", GetProcedureHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVProgramDocument = `mutation CreateBulkCSVProgram ($input: Upload!) {
	createBulkCSVProgram(input: $input) {
		programs {
			auditorReadComments
			auditorReady
			auditorWriteComments
			createdAt
			createdBy
			description
			endDate
			id
			displayID
			name
			ownerID
			startDate
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVProgram(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVProgram, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVProgram
	if err := c.Client.Post(ctx, "CreateBulkCSVProgram", CreateBulkCSVProgramDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkProgramDocument = `mutation CreateBulkProgram ($input: [CreateProgramInput!]) {
	createBulkProgram(input: $input) {
		programs {
			auditorReadComments
			auditorReady
			auditorWriteComments
			createdAt
			createdBy
			description
			endDate
			id
			displayID
			name
			ownerID
			startDate
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkProgram(ctx context.Context, input []*CreateProgramInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkProgram, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkProgram
	if err := c.Client.Post(ctx, "CreateBulkProgram", CreateBulkProgramDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateControlWithSubcontrolsDocument = `mutation CreateControlWithSubcontrols ($input: CreateControlWithSubcontrolsInput!) {
	createControlWithSubcontrols(input: $input) {
		control {
			id
			refCode
			subcontrols {
				edges {
					node {
						id
						refCode
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateControlWithSubcontrols(ctx context.Context, input CreateControlWithSubcontrolsInput, interceptors ...clientv2.RequestInterceptor) (*CreateControlWithSubcontrols, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateControlWithSubcontrols
	if err := c.Client.Post(ctx, "CreateControlWithSubcontrols", CreateControlWithSubcontrolsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateFullProgramDocument = `mutation CreateFullProgram ($input: CreateFullProgramInput!) {
	createFullProgram(input: $input) {
		program {
			name
			id
			displayID
			members {
				edges {
					node {
						id
					}
				}
			}
			controls {
				edges {
					node {
						id
						refCode
						subcontrols {
							edges {
								node {
									id
									refCode
								}
							}
						}
					}
				}
			}
			risks {
				edges {
					node {
						id
						displayID
						name
					}
				}
			}
			internalPolicies {
				edges {
					node {
						id
						displayID
						name
					}
				}
			}
			procedures {
				edges {
					node {
						id
						displayID
						name
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateFullProgram(ctx context.Context, input CreateFullProgramInput, interceptors ...clientv2.RequestInterceptor) (*CreateFullProgram, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateFullProgram
	if err := c.Client.Post(ctx, "CreateFullProgram", CreateFullProgramDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateProgramDocument = `mutation CreateProgram ($input: CreateProgramInput!) {
	createProgram(input: $input) {
		program {
			auditorReadComments
			auditorReady
			auditorWriteComments
			createdAt
			createdBy
			description
			endDate
			id
			displayID
			name
			ownerID
			startDate
			status
			tags
			updatedAt
			updatedBy
			procedures {
				edges {
					node {
						createdAt
						createdBy
						details
						id
						displayID
						name
						procedureType
						status
						tags
						updatedAt
						updatedBy
						revision
					}
				}
			}
			internalPolicies {
				edges {
					node {
						createdAt
						createdBy
						details
						id
						displayID
						name
						policyType
						status
						tags
						updatedAt
						updatedBy
						revision
					}
				}
			}
			editors {
				id
				name
			}
			viewers {
				id
				name
			}
			blockedGroups {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateProgram(ctx context.Context, input CreateProgramInput, interceptors ...clientv2.RequestInterceptor) (*CreateProgram, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateProgram
	if err := c.Client.Post(ctx, "CreateProgram", CreateProgramDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateProgramWithMembersDocument = `mutation CreateProgramWithMembers ($input: CreateProgramWithMembersInput!) {
	createProgramWithMembers(input: $input) {
		program {
			name
			id
			displayID
			members {
				edges {
					node {
						id
						user {
							id
							firstName
							lastName
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateProgramWithMembers(ctx context.Context, input CreateProgramWithMembersInput, interceptors ...clientv2.RequestInterceptor) (*CreateProgramWithMembers, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateProgramWithMembers
	if err := c.Client.Post(ctx, "CreateProgramWithMembers", CreateProgramWithMembersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteProgramDocument = `mutation DeleteProgram ($deleteProgramId: ID!) {
	deleteProgram(id: $deleteProgramId) {
		deletedID
	}
}
`

func (c *Client) DeleteProgram(ctx context.Context, deleteProgramID string, interceptors ...clientv2.RequestInterceptor) (*DeleteProgram, error) {
	vars := map[string]any{
		"deleteProgramId": deleteProgramID,
	}

	var res DeleteProgram
	if err := c.Client.Post(ctx, "DeleteProgram", DeleteProgramDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllProgramsDocument = `query GetAllPrograms {
	programs {
		edges {
			node {
				auditorReadComments
				auditorReady
				auditorWriteComments
				createdAt
				createdBy
				description
				endDate
				id
				displayID
				name
				ownerID
				startDate
				status
				tags
				updatedAt
				updatedBy
				procedures {
					edges {
						node {
							createdAt
							createdBy
							details
							id
							displayID
							name
							procedureType
							status
							tags
							updatedAt
							updatedBy
							revision
						}
					}
				}
				internalPolicies {
					edges {
						node {
							createdAt
							createdBy
							details
							id
							displayID
							name
							policyType
							status
							tags
							updatedAt
							updatedBy
							revision
						}
					}
				}
				editors {
					id
					name
				}
				viewers {
					id
					name
				}
				blockedGroups {
					id
					name
				}
				members {
					edges {
						node {
							id
							user {
								id
								firstName
								lastName
							}
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetAllPrograms(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllPrograms, error) {
	vars := map[string]any{}

	var res GetAllPrograms
	if err := c.Client.Post(ctx, "GetAllPrograms", GetAllProgramsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProgramByIDDocument = `query GetProgramByID ($programId: ID!) {
	program(id: $programId) {
		auditorReadComments
		auditorReady
		auditorWriteComments
		createdAt
		createdBy
		description
		endDate
		id
		displayID
		name
		ownerID
		startDate
		status
		tags
		updatedAt
		updatedBy
		procedures {
			edges {
				node {
					createdAt
					createdBy
					details
					id
					displayID
					name
					procedureType
					status
					tags
					updatedAt
					updatedBy
					revision
				}
			}
		}
		internalPolicies {
			edges {
				node {
					createdAt
					createdBy
					details
					id
					displayID
					name
					policyType
					status
					tags
					updatedAt
					updatedBy
					revision
				}
			}
		}
		editors {
			id
			name
		}
		viewers {
			id
			name
		}
		blockedGroups {
			id
			name
		}
		members {
			edges {
				node {
					id
					user {
						id
						firstName
						lastName
					}
				}
			}
		}
	}
}
`

func (c *Client) GetProgramByID(ctx context.Context, programID string, interceptors ...clientv2.RequestInterceptor) (*GetProgramByID, error) {
	vars := map[string]any{
		"programId": programID,
	}

	var res GetProgramByID
	if err := c.Client.Post(ctx, "GetProgramByID", GetProgramByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProgramsDocument = `query GetPrograms ($where: ProgramWhereInput) {
	programs(where: $where) {
		edges {
			node {
				auditorReadComments
				auditorReady
				auditorWriteComments
				createdAt
				createdBy
				description
				endDate
				id
				displayID
				name
				ownerID
				startDate
				status
				tags
				updatedAt
				updatedBy
				procedures {
					edges {
						node {
							createdAt
							createdBy
							details
							id
							displayID
							name
							procedureType
							status
							tags
							updatedAt
							updatedBy
							revision
						}
					}
				}
				internalPolicies {
					edges {
						node {
							createdAt
							createdBy
							details
							id
							displayID
							name
							policyType
							status
							tags
							updatedAt
							updatedBy
							revision
						}
					}
				}
				editors {
					id
					name
				}
				viewers {
					id
					name
				}
				blockedGroups {
					id
					name
				}
				members {
					edges {
						node {
							id
							user {
								id
								firstName
								lastName
							}
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetPrograms(ctx context.Context, where *ProgramWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetPrograms, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetPrograms
	if err := c.Client.Post(ctx, "GetPrograms", GetProgramsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateProgramDocument = `mutation UpdateProgram ($updateProgramId: ID!, $input: UpdateProgramInput!) {
	updateProgram(id: $updateProgramId, input: $input) {
		program {
			auditorReadComments
			auditorReady
			auditorWriteComments
			createdAt
			createdBy
			description
			endDate
			id
			name
			ownerID
			startDate
			status
			tags
			updatedAt
			updatedBy
			procedures {
				edges {
					node {
						createdAt
						createdBy
						details
						id
						displayID
						name
						procedureType
						status
						tags
						updatedAt
						updatedBy
						revision
					}
				}
			}
			internalPolicies {
				edges {
					node {
						createdAt
						createdBy
						details
						id
						displayID
						name
						policyType
						status
						tags
						updatedAt
						updatedBy
						revision
					}
				}
			}
			editors {
				id
				name
			}
			viewers {
				id
				name
			}
			blockedGroups {
				id
				name
			}
			members {
				edges {
					node {
						id
						user {
							id
							firstName
							lastName
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) UpdateProgram(ctx context.Context, updateProgramID string, input UpdateProgramInput, interceptors ...clientv2.RequestInterceptor) (*UpdateProgram, error) {
	vars := map[string]any{
		"updateProgramId": updateProgramID,
		"input":           input,
	}

	var res UpdateProgram
	if err := c.Client.Post(ctx, "UpdateProgram", UpdateProgramDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const AddUserToProgramWithRoleDocument = `mutation AddUserToProgramWithRole ($input: CreateProgramMembershipInput!) {
	createProgramMembership(input: $input) {
		programMembership {
			programID
			program {
				id
				name
			}
			id
			role
			userID
			user {
				displayName
				email
				firstName
				id
				lastName
			}
		}
	}
}
`

func (c *Client) AddUserToProgramWithRole(ctx context.Context, input CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*AddUserToProgramWithRole, error) {
	vars := map[string]any{
		"input": input,
	}

	var res AddUserToProgramWithRole
	if err := c.Client.Post(ctx, "AddUserToProgramWithRole", AddUserToProgramWithRoleDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVProgramMembersDocument = `mutation CreateBulkCSVProgramMembers ($input: Upload!) {
	createBulkCSVProgramMembership(input: $input) {
		programMemberships {
			programID
			program {
				id
				name
			}
			id
			role
			userID
			user {
				displayName
				email
				firstName
				id
				lastName
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVProgramMembers(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVProgramMembers, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVProgramMembers
	if err := c.Client.Post(ctx, "CreateBulkCSVProgramMembers", CreateBulkCSVProgramMembersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkProgramMembersDocument = `mutation CreateBulkProgramMembers ($input: [CreateProgramMembershipInput!]) {
	createBulkProgramMembership(input: $input) {
		programMemberships {
			programID
			program {
				id
				name
			}
			id
			role
			userID
			user {
				displayName
				email
				firstName
				id
				lastName
			}
		}
	}
}
`

func (c *Client) CreateBulkProgramMembers(ctx context.Context, input []*CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkProgramMembers, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkProgramMembers
	if err := c.Client.Post(ctx, "CreateBulkProgramMembers", CreateBulkProgramMembersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProgramMembersByProgramIDDocument = `query GetProgramMembersByProgramID ($where: ProgramMembershipWhereInput) {
	programMemberships(where: $where) {
		edges {
			node {
				programID
				program {
					id
					name
				}
				id
				role
				userID
				user {
					displayName
					email
					firstName
					id
					lastName
				}
			}
		}
	}
}
`

func (c *Client) GetProgramMembersByProgramID(ctx context.Context, where *ProgramMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProgramMembersByProgramID, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetProgramMembersByProgramID
	if err := c.Client.Post(ctx, "GetProgramMembersByProgramID", GetProgramMembersByProgramIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const RemoveUserFromProgramDocument = `mutation RemoveUserFromProgram ($deleteProgramMembershipId: ID!) {
	deleteProgramMembership(id: $deleteProgramMembershipId) {
		deletedID
	}
}
`

func (c *Client) RemoveUserFromProgram(ctx context.Context, deleteProgramMembershipID string, interceptors ...clientv2.RequestInterceptor) (*RemoveUserFromProgram, error) {
	vars := map[string]any{
		"deleteProgramMembershipId": deleteProgramMembershipID,
	}

	var res RemoveUserFromProgram
	if err := c.Client.Post(ctx, "RemoveUserFromProgram", RemoveUserFromProgramDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateUserRoleInProgramDocument = `mutation UpdateUserRoleInProgram ($updateProgramMemberId: ID!, $input: UpdateProgramMembershipInput!) {
	updateProgramMembership(id: $updateProgramMemberId, input: $input) {
		programMembership {
			programID
			program {
				id
				name
			}
			id
			role
			userID
			user {
				displayName
				email
				firstName
				id
				lastName
			}
		}
	}
}
`

func (c *Client) UpdateUserRoleInProgram(ctx context.Context, updateProgramMemberID string, input UpdateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUserRoleInProgram, error) {
	vars := map[string]any{
		"updateProgramMemberId": updateProgramMemberID,
		"input":                 input,
	}

	var res UpdateUserRoleInProgram
	if err := c.Client.Post(ctx, "UpdateUserRoleInProgram", UpdateUserRoleInProgramDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllProgramHistoriesDocument = `query GetAllProgramHistories {
	programHistories {
		edges {
			node {
				auditorReadComments
				auditorReady
				auditorWriteComments
				createdAt
				createdBy
				description
				endDate
				historyTime
				id
				name
				operation
				ownerID
				ref
				startDate
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllProgramHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProgramHistories, error) {
	vars := map[string]any{}

	var res GetAllProgramHistories
	if err := c.Client.Post(ctx, "GetAllProgramHistories", GetAllProgramHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProgramHistoriesDocument = `query GetProgramHistories ($where: ProgramHistoryWhereInput) {
	programHistories(where: $where) {
		edges {
			node {
				auditorReadComments
				auditorReady
				auditorWriteComments
				createdAt
				createdBy
				description
				endDate
				historyTime
				id
				name
				operation
				ownerID
				ref
				startDate
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetProgramHistories(ctx context.Context, where *ProgramHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProgramHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetProgramHistories
	if err := c.Client.Post(ctx, "GetProgramHistories", GetProgramHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVProgramMembershipDocument = `mutation CreateBulkCSVProgramMembership ($input: Upload!) {
	createBulkCSVProgramMembership(input: $input) {
		programMemberships {
			createdAt
			createdBy
			id
			programID
			role
			updatedAt
			updatedBy
			userID
		}
	}
}
`

func (c *Client) CreateBulkCSVProgramMembership(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVProgramMembership, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVProgramMembership
	if err := c.Client.Post(ctx, "CreateBulkCSVProgramMembership", CreateBulkCSVProgramMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkProgramMembershipDocument = `mutation CreateBulkProgramMembership ($input: [CreateProgramMembershipInput!]) {
	createBulkProgramMembership(input: $input) {
		programMemberships {
			createdAt
			createdBy
			id
			programID
			role
			updatedAt
			updatedBy
			userID
		}
	}
}
`

func (c *Client) CreateBulkProgramMembership(ctx context.Context, input []*CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkProgramMembership, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkProgramMembership
	if err := c.Client.Post(ctx, "CreateBulkProgramMembership", CreateBulkProgramMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateProgramMembershipDocument = `mutation CreateProgramMembership ($input: CreateProgramMembershipInput!) {
	createProgramMembership(input: $input) {
		programMembership {
			createdAt
			createdBy
			id
			programID
			role
			updatedAt
			updatedBy
			userID
		}
	}
}
`

func (c *Client) CreateProgramMembership(ctx context.Context, input CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateProgramMembership, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateProgramMembership
	if err := c.Client.Post(ctx, "CreateProgramMembership", CreateProgramMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteProgramMembershipDocument = `mutation DeleteProgramMembership ($deleteProgramMembershipId: ID!) {
	deleteProgramMembership(id: $deleteProgramMembershipId) {
		deletedID
	}
}
`

func (c *Client) DeleteProgramMembership(ctx context.Context, deleteProgramMembershipID string, interceptors ...clientv2.RequestInterceptor) (*DeleteProgramMembership, error) {
	vars := map[string]any{
		"deleteProgramMembershipId": deleteProgramMembershipID,
	}

	var res DeleteProgramMembership
	if err := c.Client.Post(ctx, "DeleteProgramMembership", DeleteProgramMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllProgramMembershipsDocument = `query GetAllProgramMemberships {
	programMemberships {
		edges {
			node {
				createdAt
				createdBy
				id
				programID
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetAllProgramMemberships(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProgramMemberships, error) {
	vars := map[string]any{}

	var res GetAllProgramMemberships
	if err := c.Client.Post(ctx, "GetAllProgramMemberships", GetAllProgramMembershipsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProgramMembershipByIDDocument = `query GetProgramMembershipByID ($programMembershipId: ID!) {
	programMembership(id: $programMembershipId) {
		createdAt
		createdBy
		id
		programID
		role
		updatedAt
		updatedBy
		userID
	}
}
`

func (c *Client) GetProgramMembershipByID(ctx context.Context, programMembershipID string, interceptors ...clientv2.RequestInterceptor) (*GetProgramMembershipByID, error) {
	vars := map[string]any{
		"programMembershipId": programMembershipID,
	}

	var res GetProgramMembershipByID
	if err := c.Client.Post(ctx, "GetProgramMembershipByID", GetProgramMembershipByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProgramMembershipsDocument = `query GetProgramMemberships ($where: ProgramMembershipWhereInput) {
	programMemberships(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				id
				programID
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetProgramMemberships(ctx context.Context, where *ProgramMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProgramMemberships, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetProgramMemberships
	if err := c.Client.Post(ctx, "GetProgramMemberships", GetProgramMembershipsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateProgramMembershipDocument = `mutation UpdateProgramMembership ($updateProgramMembershipId: ID!, $input: UpdateProgramMembershipInput!) {
	updateProgramMembership(id: $updateProgramMembershipId, input: $input) {
		programMembership {
			createdAt
			createdBy
			id
			programID
			role
			updatedAt
			updatedBy
			userID
		}
	}
}
`

func (c *Client) UpdateProgramMembership(ctx context.Context, updateProgramMembershipID string, input UpdateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateProgramMembership, error) {
	vars := map[string]any{
		"updateProgramMembershipId": updateProgramMembershipID,
		"input":                     input,
	}

	var res UpdateProgramMembership
	if err := c.Client.Post(ctx, "UpdateProgramMembership", UpdateProgramMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllProgramMembershipHistoriesDocument = `query GetAllProgramMembershipHistories {
	programMembershipHistories {
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				programID
				ref
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetAllProgramMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProgramMembershipHistories, error) {
	vars := map[string]any{}

	var res GetAllProgramMembershipHistories
	if err := c.Client.Post(ctx, "GetAllProgramMembershipHistories", GetAllProgramMembershipHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProgramMembershipHistoriesDocument = `query GetProgramMembershipHistories ($where: ProgramMembershipHistoryWhereInput) {
	programMembershipHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				programID
				ref
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetProgramMembershipHistories(ctx context.Context, where *ProgramMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProgramMembershipHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetProgramMembershipHistories
	if err := c.Client.Post(ctx, "GetProgramMembershipHistories", GetProgramMembershipHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVRiskDocument = `mutation CreateBulkCSVRisk ($input: Upload!) {
	createBulkCSVRisk(input: $input) {
		risks {
			businessCosts
			createdAt
			createdBy
			details
			id
			displayID
			impact
			likelihood
			mitigation
			name
			riskType
			status
			score
			tags
			updatedAt
			updatedBy
			stakeholder {
				id
				name
			}
			delegate {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVRisk(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVRisk, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVRisk
	if err := c.Client.Post(ctx, "CreateBulkCSVRisk", CreateBulkCSVRiskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkRiskDocument = `mutation CreateBulkRisk ($input: [CreateRiskInput!]) {
	createBulkRisk(input: $input) {
		risks {
			businessCosts
			createdAt
			createdBy
			details
			id
			displayID
			impact
			likelihood
			mitigation
			name
			riskType
			status
			score
			tags
			updatedAt
			updatedBy
			stakeholder {
				id
				name
			}
			delegate {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateBulkRisk(ctx context.Context, input []*CreateRiskInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkRisk, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkRisk
	if err := c.Client.Post(ctx, "CreateBulkRisk", CreateBulkRiskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateRiskDocument = `mutation CreateRisk ($input: CreateRiskInput!) {
	createRisk(input: $input) {
		risk {
			businessCosts
			createdAt
			createdBy
			details
			id
			displayID
			impact
			likelihood
			mitigation
			name
			riskType
			status
			score
			tags
			updatedAt
			updatedBy
			programs {
				edges {
					node {
						id
						name
					}
				}
			}
			editors {
				id
				name
			}
			viewers {
				id
				name
			}
			blockedGroups {
				id
				name
			}
			stakeholder {
				id
				name
			}
			delegate {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateRisk(ctx context.Context, input CreateRiskInput, interceptors ...clientv2.RequestInterceptor) (*CreateRisk, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateRisk
	if err := c.Client.Post(ctx, "CreateRisk", CreateRiskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteRiskDocument = `mutation DeleteRisk ($deleteRiskId: ID!) {
	deleteRisk(id: $deleteRiskId) {
		deletedID
	}
}
`

func (c *Client) DeleteRisk(ctx context.Context, deleteRiskID string, interceptors ...clientv2.RequestInterceptor) (*DeleteRisk, error) {
	vars := map[string]any{
		"deleteRiskId": deleteRiskID,
	}

	var res DeleteRisk
	if err := c.Client.Post(ctx, "DeleteRisk", DeleteRiskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllRisksDocument = `query GetAllRisks {
	risks {
		edges {
			node {
				businessCosts
				createdAt
				createdBy
				details
				id
				displayID
				impact
				likelihood
				score
				mitigation
				name
				riskType
				status
				score
				tags
				updatedAt
				updatedBy
				programs {
					edges {
						node {
							id
							name
						}
					}
				}
				editors {
					id
					name
				}
				viewers {
					id
					name
				}
				blockedGroups {
					id
					name
				}
				stakeholder {
					id
					name
				}
				delegate {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetAllRisks(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllRisks, error) {
	vars := map[string]any{}

	var res GetAllRisks
	if err := c.Client.Post(ctx, "GetAllRisks", GetAllRisksDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetRiskByIDDocument = `query GetRiskByID ($riskId: ID!) {
	risk(id: $riskId) {
		businessCosts
		createdAt
		createdBy
		score
		details
		id
		displayID
		impact
		likelihood
		mitigation
		name
		riskType
		status
		score
		tags
		updatedAt
		updatedBy
		programs {
			edges {
				node {
					id
					name
				}
			}
		}
		editors {
			id
			name
		}
		viewers {
			id
			name
		}
		blockedGroups {
			id
			name
		}
		stakeholder {
			id
			name
		}
		delegate {
			id
			name
		}
	}
}
`

func (c *Client) GetRiskByID(ctx context.Context, riskID string, interceptors ...clientv2.RequestInterceptor) (*GetRiskByID, error) {
	vars := map[string]any{
		"riskId": riskID,
	}

	var res GetRiskByID
	if err := c.Client.Post(ctx, "GetRiskByID", GetRiskByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetRisksDocument = `query GetRisks ($where: RiskWhereInput) {
	risks(where: $where) {
		edges {
			node {
				businessCosts
				createdAt
				createdBy
				score
				details
				id
				displayID
				impact
				likelihood
				mitigation
				name
				riskType
				status
				score
				tags
				updatedAt
				updatedBy
				programs {
					edges {
						node {
							id
							name
						}
					}
				}
				editors {
					id
					name
				}
				viewers {
					id
					name
				}
				blockedGroups {
					id
					name
				}
				stakeholder {
					id
					name
				}
				delegate {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetRisks(ctx context.Context, where *RiskWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetRisks, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetRisks
	if err := c.Client.Post(ctx, "GetRisks", GetRisksDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateRiskDocument = `mutation UpdateRisk ($updateRiskId: ID!, $input: UpdateRiskInput!) {
	updateRisk(id: $updateRiskId, input: $input) {
		risk {
			businessCosts
			createdAt
			createdBy
			score
			details
			id
			displayID
			impact
			likelihood
			mitigation
			name
			riskType
			status
			score
			tags
			updatedAt
			updatedBy
			programs {
				edges {
					node {
						id
						name
					}
				}
			}
			editors {
				id
				name
			}
			viewers {
				id
				name
			}
			blockedGroups {
				id
				name
			}
			stakeholder {
				id
				name
			}
			delegate {
				id
				name
			}
		}
	}
}
`

func (c *Client) UpdateRisk(ctx context.Context, updateRiskID string, input UpdateRiskInput, interceptors ...clientv2.RequestInterceptor) (*UpdateRisk, error) {
	vars := map[string]any{
		"updateRiskId": updateRiskID,
		"input":        input,
	}

	var res UpdateRisk
	if err := c.Client.Post(ctx, "UpdateRisk", UpdateRiskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllRiskHistoriesDocument = `query GetAllRiskHistories {
	riskHistories {
		edges {
			node {
				businessCosts
				category
				createdAt
				createdBy
				details
				displayID
				historyTime
				id
				impact
				likelihood
				mitigation
				name
				operation
				ownerID
				ref
				riskType
				score
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllRiskHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllRiskHistories, error) {
	vars := map[string]any{}

	var res GetAllRiskHistories
	if err := c.Client.Post(ctx, "GetAllRiskHistories", GetAllRiskHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetRiskHistoriesDocument = `query GetRiskHistories ($where: RiskHistoryWhereInput) {
	riskHistories(where: $where) {
		edges {
			node {
				businessCosts
				category
				createdAt
				createdBy
				details
				displayID
				historyTime
				id
				impact
				likelihood
				mitigation
				name
				operation
				ownerID
				ref
				riskType
				score
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetRiskHistories(ctx context.Context, where *RiskHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetRiskHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetRiskHistories
	if err := c.Client.Post(ctx, "GetRiskHistories", GetRiskHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GlobalSearchDocument = `query GlobalSearch ($query: String!) {
	search(query: $query) {
		totalCount
		apiTokens {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		actionPlans {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					details
					id
					name
					tags
				}
			}
		}
		contacts {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					email
					fullName
					id
					tags
				}
			}
		}
		controls {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					category
					description
					displayID
					id
					mappedCategories
					refCode
					subcategory
					tags
				}
			}
		}
		controlImplementations {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		controlObjectives {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					category
					displayID
					id
					name
					subcategory
					tags
				}
			}
		}
		documentData {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		entities {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					description
					displayName
					id
					name
					tags
				}
			}
		}
		entityTypes {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		events {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		evidences {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					displayID
					id
					name
					tags
				}
			}
		}
		files {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		groups {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					displayID
					displayName
					id
					name
					tags
				}
			}
		}
		integrations {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		internalPolicies {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					details
					displayID
					id
					name
					tags
				}
			}
		}
		invites {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					recipient
				}
			}
		}
		mappedControls {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		narratives {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					description
					displayID
					id
					name
					tags
				}
			}
		}
		orgSubscriptions {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		organizations {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					displayName
					id
					name
					tags
				}
			}
		}
		organizationSettings {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		personalAccessTokens {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
		procedures {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					details
					displayID
					id
					name
					tags
				}
			}
		}
		programs {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					description
					displayID
					id
					name
					tags
				}
			}
		}
		risks {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					displayID
					id
					name
					tags
				}
			}
		}
		standards {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					domains
					framework
					governingBody
					id
					name
					shortName
					tags
				}
			}
		}
		subcontrols {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					category
					description
					displayID
					id
					mappedCategories
					refCode
					subcategory
					tags
				}
			}
		}
		subscribers {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					email
					id
					tags
				}
			}
		}
		tasks {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					description
					displayID
					id
					tags
					title
				}
			}
		}
		templates {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					jsonconfig
					name
					tags
				}
			}
		}
		users {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					displayID
					id
					tags
				}
			}
		}
		userSettings {
			totalCount
			pageInfo {
				hasNextPage
				hasPreviousPage
				startCursor
				endCursor
			}
			edges {
				node {
					id
					tags
				}
			}
		}
	}
}
`

func (c *Client) GlobalSearch(ctx context.Context, query string, interceptors ...clientv2.RequestInterceptor) (*GlobalSearch, error) {
	vars := map[string]any{
		"query": query,
	}

	var res GlobalSearch
	if err := c.Client.Post(ctx, "GlobalSearch", GlobalSearchDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateStandardDocument = `mutation CreateStandard ($input: CreateStandardInput!) {
	createStandard(input: $input) {
		standard {
			createdAt
			createdBy
			description
			domains
			framework
			freeToUse
			governingBody
			governingBodyLogoURL
			id
			isPublic
			link
			name
			ownerID
			revision
			shortName
			standardType
			status
			systemOwned
			tags
			updatedAt
			updatedBy
			version
			controls {
				totalCount
				pageInfo {
					startCursor
					endCursor
					hasPreviousPage
					hasNextPage
				}
				edges {
					node {
						id
						refCode
						description
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateStandard(ctx context.Context, input CreateStandardInput, interceptors ...clientv2.RequestInterceptor) (*CreateStandard, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateStandard
	if err := c.Client.Post(ctx, "CreateStandard", CreateStandardDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteStandardDocument = `mutation DeleteStandard ($deleteStandardId: ID!) {
	deleteStandard(id: $deleteStandardId) {
		deletedID
	}
}
`

func (c *Client) DeleteStandard(ctx context.Context, deleteStandardID string, interceptors ...clientv2.RequestInterceptor) (*DeleteStandard, error) {
	vars := map[string]any{
		"deleteStandardId": deleteStandardID,
	}

	var res DeleteStandard
	if err := c.Client.Post(ctx, "DeleteStandard", DeleteStandardDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllStandardsDocument = `query GetAllStandards {
	standards {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				domains
				framework
				freeToUse
				governingBody
				governingBodyLogoURL
				id
				isPublic
				link
				name
				ownerID
				revision
				shortName
				standardType
				status
				systemOwned
				tags
				updatedAt
				updatedBy
				version
				controls {
					totalCount
					pageInfo {
						startCursor
						endCursor
						hasPreviousPage
						hasNextPage
					}
					edges {
						node {
							id
							refCode
							description
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetAllStandards(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllStandards, error) {
	vars := map[string]any{}

	var res GetAllStandards
	if err := c.Client.Post(ctx, "GetAllStandards", GetAllStandardsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetStandardByIDDocument = `query GetStandardByID ($standardId: ID!) {
	standard(id: $standardId) {
		createdAt
		createdBy
		description
		domains
		framework
		freeToUse
		governingBody
		governingBodyLogoURL
		id
		isPublic
		link
		name
		ownerID
		revision
		shortName
		standardType
		status
		systemOwned
		tags
		updatedAt
		updatedBy
		version
		controls {
			totalCount
			pageInfo {
				startCursor
				endCursor
				hasPreviousPage
				hasNextPage
			}
			edges {
				node {
					id
					refCode
					description
				}
			}
		}
	}
}
`

func (c *Client) GetStandardByID(ctx context.Context, standardID string, interceptors ...clientv2.RequestInterceptor) (*GetStandardByID, error) {
	vars := map[string]any{
		"standardId": standardID,
	}

	var res GetStandardByID
	if err := c.Client.Post(ctx, "GetStandardByID", GetStandardByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetStandardsDocument = `query GetStandards ($first: Int, $last: Int, $where: StandardWhereInput) {
	standards(first: $first, last: $last, where: $where) {
		totalCount
		pageInfo {
			startCursor
			endCursor
			hasPreviousPage
			hasNextPage
		}
		edges {
			node {
				createdAt
				createdBy
				description
				domains
				framework
				freeToUse
				governingBody
				governingBodyLogoURL
				id
				isPublic
				link
				name
				ownerID
				revision
				shortName
				standardType
				status
				systemOwned
				tags
				updatedAt
				updatedBy
				version
				controls {
					totalCount
					pageInfo {
						startCursor
						endCursor
						hasPreviousPage
						hasNextPage
					}
					edges {
						node {
							id
							refCode
							description
						}
					}
				}
			}
		}
	}
}
`

func (c *Client) GetStandards(ctx context.Context, first *int64, last *int64, where *StandardWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetStandards, error) {
	vars := map[string]any{
		"first": first,
		"last":  last,
		"where": where,
	}

	var res GetStandards
	if err := c.Client.Post(ctx, "GetStandards", GetStandardsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateStandardDocument = `mutation UpdateStandard ($updateStandardId: ID!, $input: UpdateStandardInput!) {
	updateStandard(id: $updateStandardId, input: $input) {
		standard {
			createdAt
			createdBy
			description
			domains
			framework
			freeToUse
			governingBody
			governingBodyLogoURL
			id
			isPublic
			link
			name
			ownerID
			revision
			shortName
			standardType
			status
			systemOwned
			tags
			updatedAt
			updatedBy
			version
			controls {
				totalCount
				pageInfo {
					startCursor
					endCursor
					hasPreviousPage
					hasNextPage
				}
				edges {
					node {
						id
						refCode
						description
					}
				}
			}
		}
	}
}
`

func (c *Client) UpdateStandard(ctx context.Context, updateStandardID string, input UpdateStandardInput, interceptors ...clientv2.RequestInterceptor) (*UpdateStandard, error) {
	vars := map[string]any{
		"updateStandardId": updateStandardID,
		"input":            input,
	}

	var res UpdateStandard
	if err := c.Client.Post(ctx, "UpdateStandard", UpdateStandardDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllStandardHistoriesDocument = `query GetAllStandardHistories {
	standardHistories {
		edges {
			node {
				createdAt
				createdBy
				description
				domains
				framework
				freeToUse
				governingBody
				historyTime
				id
				isPublic
				link
				name
				operation
				ownerID
				ref
				revision
				shortName
				standardType
				status
				systemOwned
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetAllStandardHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllStandardHistories, error) {
	vars := map[string]any{}

	var res GetAllStandardHistories
	if err := c.Client.Post(ctx, "GetAllStandardHistories", GetAllStandardHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetStandardHistoriesDocument = `query GetStandardHistories ($where: StandardHistoryWhereInput) {
	standardHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				domains
				framework
				freeToUse
				governingBody
				historyTime
				id
				isPublic
				link
				name
				operation
				ownerID
				ref
				revision
				shortName
				standardType
				status
				systemOwned
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetStandardHistories(ctx context.Context, where *StandardHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetStandardHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetStandardHistories
	if err := c.Client.Post(ctx, "GetStandardHistories", GetStandardHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVSubcontrolDocument = `mutation CreateBulkCSVSubcontrol ($input: Upload!) {
	createBulkCSVSubcontrol(input: $input) {
		subcontrols {
			assessmentMethods
			assessmentObjectives
			category
			categoryID
			controlID
			controlQuestions
			controlType
			createdAt
			createdBy
			description
			displayID
			exampleEvidence
			id
			implementationGuidance
			mappedCategories
			ownerID
			refCode
			references
			source
			status
			subcategory
			tags
			updatedAt
			updatedBy
			controlOwner {
				id
				name
			}
			delegate {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVSubcontrol(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVSubcontrol, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVSubcontrol
	if err := c.Client.Post(ctx, "CreateBulkCSVSubcontrol", CreateBulkCSVSubcontrolDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkSubcontrolDocument = `mutation CreateBulkSubcontrol ($input: [CreateSubcontrolInput!]) {
	createBulkSubcontrol(input: $input) {
		subcontrols {
			assessmentMethods
			assessmentObjectives
			category
			categoryID
			controlID
			controlQuestions
			controlType
			createdAt
			createdBy
			description
			displayID
			exampleEvidence
			id
			implementationGuidance
			mappedCategories
			ownerID
			refCode
			references
			source
			status
			subcategory
			tags
			updatedAt
			updatedBy
			controlOwner {
				id
				name
			}
			delegate {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateBulkSubcontrol(ctx context.Context, input []*CreateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkSubcontrol, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkSubcontrol
	if err := c.Client.Post(ctx, "CreateBulkSubcontrol", CreateBulkSubcontrolDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateSubcontrolDocument = `mutation CreateSubcontrol ($input: CreateSubcontrolInput!) {
	createSubcontrol(input: $input) {
		subcontrol {
			assessmentMethods
			assessmentObjectives
			category
			categoryID
			controlID
			controlQuestions
			controlType
			createdAt
			createdBy
			description
			displayID
			exampleEvidence
			id
			implementationGuidance
			mappedCategories
			ownerID
			refCode
			references
			source
			status
			subcategory
			tags
			updatedAt
			updatedBy
			controlOwner {
				id
				name
			}
			delegate {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateSubcontrol(ctx context.Context, input CreateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*CreateSubcontrol, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateSubcontrol
	if err := c.Client.Post(ctx, "CreateSubcontrol", CreateSubcontrolDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteSubcontrolDocument = `mutation DeleteSubcontrol ($deleteSubcontrolId: ID!) {
	deleteSubcontrol(id: $deleteSubcontrolId) {
		deletedID
	}
}
`

func (c *Client) DeleteSubcontrol(ctx context.Context, deleteSubcontrolID string, interceptors ...clientv2.RequestInterceptor) (*DeleteSubcontrol, error) {
	vars := map[string]any{
		"deleteSubcontrolId": deleteSubcontrolID,
	}

	var res DeleteSubcontrol
	if err := c.Client.Post(ctx, "DeleteSubcontrol", DeleteSubcontrolDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllSubcontrolsDocument = `query GetAllSubcontrols {
	subcontrols {
		edges {
			node {
				assessmentMethods
				assessmentObjectives
				category
				categoryID
				controlID
				controlQuestions
				controlType
				createdAt
				createdBy
				description
				displayID
				exampleEvidence
				id
				implementationGuidance
				mappedCategories
				ownerID
				refCode
				references
				source
				status
				subcategory
				tags
				updatedAt
				updatedBy
				control {
					id
					displayID
					refCode
					description
				}
				controlOwner {
					id
					name
				}
				delegate {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetAllSubcontrols(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllSubcontrols, error) {
	vars := map[string]any{}

	var res GetAllSubcontrols
	if err := c.Client.Post(ctx, "GetAllSubcontrols", GetAllSubcontrolsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSubcontrolByIDDocument = `query GetSubcontrolByID ($subcontrolId: ID!) {
	subcontrol(id: $subcontrolId) {
		assessmentMethods
		assessmentObjectives
		category
		categoryID
		controlID
		controlQuestions
		controlType
		createdAt
		createdBy
		description
		displayID
		exampleEvidence
		id
		implementationGuidance
		mappedCategories
		ownerID
		refCode
		references
		source
		status
		subcategory
		tags
		updatedAt
		updatedBy
		control {
			id
			displayID
			refCode
			description
		}
		controlOwner {
			id
			name
		}
		delegate {
			id
			name
		}
	}
}
`

func (c *Client) GetSubcontrolByID(ctx context.Context, subcontrolID string, interceptors ...clientv2.RequestInterceptor) (*GetSubcontrolByID, error) {
	vars := map[string]any{
		"subcontrolId": subcontrolID,
	}

	var res GetSubcontrolByID
	if err := c.Client.Post(ctx, "GetSubcontrolByID", GetSubcontrolByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSubcontrolsDocument = `query GetSubcontrols ($where: SubcontrolWhereInput) {
	subcontrols(where: $where) {
		edges {
			node {
				assessmentMethods
				assessmentObjectives
				category
				categoryID
				controlID
				controlQuestions
				controlType
				createdAt
				createdBy
				description
				displayID
				exampleEvidence
				id
				implementationGuidance
				mappedCategories
				ownerID
				refCode
				references
				source
				status
				subcategory
				tags
				updatedAt
				updatedBy
				control {
					id
					displayID
					refCode
					description
				}
				controlOwner {
					id
					name
				}
				delegate {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetSubcontrols(ctx context.Context, where *SubcontrolWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetSubcontrols, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetSubcontrols
	if err := c.Client.Post(ctx, "GetSubcontrols", GetSubcontrolsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateSubcontrolDocument = `mutation UpdateSubcontrol ($updateSubcontrolId: ID!, $input: UpdateSubcontrolInput!) {
	updateSubcontrol(id: $updateSubcontrolId, input: $input) {
		subcontrol {
			assessmentMethods
			assessmentObjectives
			category
			categoryID
			controlID
			controlQuestions
			controlType
			createdAt
			createdBy
			description
			displayID
			exampleEvidence
			id
			implementationGuidance
			mappedCategories
			ownerID
			refCode
			references
			source
			status
			subcategory
			tags
			updatedAt
			updatedBy
			control {
				id
				displayID
				refCode
				description
			}
			controlOwner {
				id
				name
			}
			delegate {
				id
				name
			}
		}
	}
}
`

func (c *Client) UpdateSubcontrol(ctx context.Context, updateSubcontrolID string, input UpdateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*UpdateSubcontrol, error) {
	vars := map[string]any{
		"updateSubcontrolId": updateSubcontrolID,
		"input":              input,
	}

	var res UpdateSubcontrol
	if err := c.Client.Post(ctx, "UpdateSubcontrol", UpdateSubcontrolDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllSubcontrolHistoriesDocument = `query GetAllSubcontrolHistories {
	subcontrolHistories {
		edges {
			node {
				assessmentMethods
				assessmentObjectives
				category
				categoryID
				controlID
				controlQuestions
				controlType
				createdAt
				createdBy
				description
				displayID
				exampleEvidence
				historyTime
				id
				implementationGuidance
				mappedCategories
				operation
				ownerID
				ref
				refCode
				references
				source
				status
				subcategory
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllSubcontrolHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllSubcontrolHistories, error) {
	vars := map[string]any{}

	var res GetAllSubcontrolHistories
	if err := c.Client.Post(ctx, "GetAllSubcontrolHistories", GetAllSubcontrolHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSubcontrolHistoriesDocument = `query GetSubcontrolHistories ($where: SubcontrolHistoryWhereInput) {
	subcontrolHistories(where: $where) {
		edges {
			node {
				assessmentMethods
				assessmentObjectives
				category
				categoryID
				controlID
				controlQuestions
				controlType
				createdAt
				createdBy
				description
				displayID
				exampleEvidence
				historyTime
				id
				implementationGuidance
				mappedCategories
				operation
				ownerID
				ref
				refCode
				references
				source
				status
				subcategory
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetSubcontrolHistories(ctx context.Context, where *SubcontrolHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetSubcontrolHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetSubcontrolHistories
	if err := c.Client.Post(ctx, "GetSubcontrolHistories", GetSubcontrolHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVSubscriberDocument = `mutation CreateBulkCSVSubscriber ($input: Upload!) {
	createBulkCSVSubscriber(input: $input) {
		subscribers {
			active
			email
			id
			verifiedEmail
			unsubscribed
		}
	}
}
`

func (c *Client) CreateBulkCSVSubscriber(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVSubscriber, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVSubscriber
	if err := c.Client.Post(ctx, "CreateBulkCSVSubscriber", CreateBulkCSVSubscriberDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkSubscriberDocument = `mutation CreateBulkSubscriber ($input: [CreateSubscriberInput!]) {
	createBulkSubscriber(input: $input) {
		subscribers {
			active
			email
			id
			verifiedEmail
			unsubscribed
		}
	}
}
`

func (c *Client) CreateBulkSubscriber(ctx context.Context, input []*CreateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkSubscriber, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkSubscriber
	if err := c.Client.Post(ctx, "CreateBulkSubscriber", CreateBulkSubscriberDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateSubscriberDocument = `mutation CreateSubscriber ($input: CreateSubscriberInput!) {
	createSubscriber(input: $input) {
		subscriber {
			active
			createdAt
			createdBy
			email
			id
			updatedAt
			updatedBy
			verifiedEmail
			unsubscribed
		}
	}
}
`

func (c *Client) CreateSubscriber(ctx context.Context, input CreateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*CreateSubscriber, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateSubscriber
	if err := c.Client.Post(ctx, "CreateSubscriber", CreateSubscriberDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteSubscriberDocument = `mutation DeleteSubscriber ($deleteSubscriberEmail: String!, $subscriberOrganization: ID) {
	deleteSubscriber(email: $deleteSubscriberEmail, ownerID: $subscriberOrganization) {
		email
	}
}
`

func (c *Client) DeleteSubscriber(ctx context.Context, deleteSubscriberEmail string, subscriberOrganization *string, interceptors ...clientv2.RequestInterceptor) (*DeleteSubscriber, error) {
	vars := map[string]any{
		"deleteSubscriberEmail":  deleteSubscriberEmail,
		"subscriberOrganization": subscriberOrganization,
	}

	var res DeleteSubscriber
	if err := c.Client.Post(ctx, "DeleteSubscriber", DeleteSubscriberDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllSubscribersDocument = `query GetAllSubscribers {
	subscribers {
		edges {
			node {
				active
				email
				id
				ownerID
				verifiedEmail
				unsubscribed
				sendAttempts
			}
		}
	}
}
`

func (c *Client) GetAllSubscribers(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllSubscribers, error) {
	vars := map[string]any{}

	var res GetAllSubscribers
	if err := c.Client.Post(ctx, "GetAllSubscribers", GetAllSubscribersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSubscriberByEmailDocument = `query GetSubscriberByEmail ($email: String!) {
	subscriber(email: $email) {
		active
		email
		id
		ownerID
		verifiedEmail
		unsubscribed
		sendAttempts
	}
}
`

func (c *Client) GetSubscriberByEmail(ctx context.Context, email string, interceptors ...clientv2.RequestInterceptor) (*GetSubscriberByEmail, error) {
	vars := map[string]any{
		"email": email,
	}

	var res GetSubscriberByEmail
	if err := c.Client.Post(ctx, "GetSubscriberByEmail", GetSubscriberByEmailDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSubscribersDocument = `query GetSubscribers ($where: SubscriberWhereInput) {
	subscribers(where: $where) {
		edges {
			node {
				active
				email
				id
				ownerID
				verifiedEmail
				unsubscribed
				sendAttempts
			}
		}
	}
}
`

func (c *Client) GetSubscribers(ctx context.Context, where *SubscriberWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetSubscribers, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetSubscribers
	if err := c.Client.Post(ctx, "GetSubscribers", GetSubscribersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateSubscriberDocument = `mutation UpdateSubscriber ($email: String!, $input: UpdateSubscriberInput!) {
	updateSubscriber(email: $email, input: $input) {
		subscriber {
			active
			createdAt
			createdBy
			email
			id
			phoneNumber
			updatedAt
			updatedBy
			verifiedEmail
			verifiedPhone
			unsubscribed
		}
	}
}
`

func (c *Client) UpdateSubscriber(ctx context.Context, email string, input UpdateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*UpdateSubscriber, error) {
	vars := map[string]any{
		"email": email,
		"input": input,
	}

	var res UpdateSubscriber
	if err := c.Client.Post(ctx, "UpdateSubscriber", UpdateSubscriberDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVTaskDocument = `mutation CreateBulkCSVTask ($input: Upload!) {
	createBulkCSVTask(input: $input) {
		tasks {
			assignee {
				id
				firstName
				lastName
			}
			assigner {
				id
				firstName
				lastName
			}
			completed
			createdAt
			createdBy
			description
			details
			category
			comments {
				edges {
					node {
						id
						displayID
						text
						createdAt
						createdBy
						updatedAt
						updatedBy
					}
				}
			}
			due
			id
			displayID
			status
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVTask(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVTask, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVTask
	if err := c.Client.Post(ctx, "CreateBulkCSVTask", CreateBulkCSVTaskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkTaskDocument = `mutation CreateBulkTask ($input: [CreateTaskInput!]) {
	createBulkTask(input: $input) {
		tasks {
			assignee {
				id
				firstName
				lastName
			}
			assigner {
				id
				firstName
				lastName
			}
			completed
			createdAt
			createdBy
			description
			details
			category
			comments {
				edges {
					node {
						id
						displayID
						text
						createdAt
						createdBy
						updatedAt
						updatedBy
					}
				}
			}
			due
			id
			displayID
			status
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkTask(ctx context.Context, input []*CreateTaskInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkTask, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkTask
	if err := c.Client.Post(ctx, "CreateBulkTask", CreateBulkTaskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateTaskDocument = `mutation CreateTask ($input: CreateTaskInput!) {
	createTask(input: $input) {
		task {
			assignee {
				id
				firstName
				lastName
			}
			assigner {
				id
				firstName
				lastName
			}
			completed
			createdAt
			createdBy
			description
			details
			category
			comments {
				edges {
					node {
						id
						displayID
						text
						createdAt
						createdBy
						updatedAt
						updatedBy
					}
				}
			}
			due
			id
			ownerID
			displayID
			status
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateTask(ctx context.Context, input CreateTaskInput, interceptors ...clientv2.RequestInterceptor) (*CreateTask, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateTask
	if err := c.Client.Post(ctx, "CreateTask", CreateTaskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteTaskDocument = `mutation DeleteTask ($deleteTaskId: ID!) {
	deleteTask(id: $deleteTaskId) {
		deletedID
	}
}
`

func (c *Client) DeleteTask(ctx context.Context, deleteTaskID string, interceptors ...clientv2.RequestInterceptor) (*DeleteTask, error) {
	vars := map[string]any{
		"deleteTaskId": deleteTaskID,
	}

	var res DeleteTask
	if err := c.Client.Post(ctx, "DeleteTask", DeleteTaskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTasksDocument = `query GetAllTasks {
	tasks {
		edges {
			node {
				assignee {
					id
					firstName
					lastName
				}
				assigner {
					id
					firstName
					lastName
				}
				owner {
					id
					name
				}
				completed
				createdAt
				createdBy
				description
				details
				category
				comments {
					edges {
						node {
							id
							displayID
							text
							createdAt
							createdBy
							updatedAt
							updatedBy
							files {
								edges {
									node {
										id
										storagePath
										storageScheme
										storageVolume
									}
								}
							}
						}
					}
				}
				due
				id
				displayID
				status
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllTasks(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTasks, error) {
	vars := map[string]any{}

	var res GetAllTasks
	if err := c.Client.Post(ctx, "GetAllTasks", GetAllTasksDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTaskByIDDocument = `query GetTaskByID ($taskId: ID!) {
	task(id: $taskId) {
		assignee {
			id
			firstName
			lastName
		}
		assigner {
			id
			firstName
			lastName
		}
		owner {
			id
			name
		}
		completed
		createdAt
		createdBy
		description
		details
		category
		comments {
			edges {
				node {
					id
					displayID
					text
					createdAt
					createdBy
					updatedAt
					updatedBy
					files {
						edges {
							node {
								id
								storagePath
								storageScheme
								storageVolume
							}
						}
					}
				}
			}
		}
		due
		id
		displayID
		status
		tags
		title
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetTaskByID(ctx context.Context, taskID string, interceptors ...clientv2.RequestInterceptor) (*GetTaskByID, error) {
	vars := map[string]any{
		"taskId": taskID,
	}

	var res GetTaskByID
	if err := c.Client.Post(ctx, "GetTaskByID", GetTaskByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTasksDocument = `query GetTasks ($where: TaskWhereInput) {
	tasks(where: $where) {
		edges {
			node {
				assignee {
					id
					firstName
					lastName
				}
				assigner {
					id
					firstName
					lastName
				}
				completed
				createdAt
				createdBy
				description
				details
				category
				comments {
					edges {
						node {
							id
							displayID
							text
							createdAt
							createdBy
							updatedAt
							updatedBy
							files {
								edges {
									node {
										id
										storagePath
										storageScheme
										storageVolume
									}
								}
							}
						}
					}
				}
				due
				id
				displayID
				status
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetTasks(ctx context.Context, where *TaskWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTasks, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetTasks
	if err := c.Client.Post(ctx, "GetTasks", GetTasksDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateTaskDocument = `mutation UpdateTask ($updateTaskId: ID!, $input: UpdateTaskInput!) {
	updateTask(id: $updateTaskId, input: $input) {
		task {
			assignee {
				id
				firstName
				lastName
			}
			assigner {
				id
				firstName
				lastName
			}
			completed
			createdAt
			createdBy
			description
			details
			category
			comments {
				edges {
					node {
						id
						displayID
						text
						createdAt
						createdBy
						updatedAt
						updatedBy
					}
				}
			}
			due
			id
			displayID
			status
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateTask(ctx context.Context, updateTaskID string, input UpdateTaskInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTask, error) {
	vars := map[string]any{
		"updateTaskId": updateTaskID,
		"input":        input,
	}

	var res UpdateTask
	if err := c.Client.Post(ctx, "UpdateTask", UpdateTaskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateTaskCommentDocument = `mutation UpdateTaskComment ($updateTaskCommentId: ID!, $input: UpdateNoteInput!, $noteFiles: [Upload!]) {
	updateTaskComment(id: $updateTaskCommentId, input: $input, noteFiles: $noteFiles) {
		task {
			assignee {
				id
				firstName
				lastName
			}
			assigner {
				id
				firstName
				lastName
			}
			completed
			createdAt
			createdBy
			description
			details
			category
			comments {
				edges {
					node {
						id
						displayID
						text
						createdAt
						createdBy
						updatedAt
						updatedBy
						files {
							edges {
								node {
									id
									storagePath
									storageScheme
									storageVolume
								}
							}
						}
					}
				}
			}
			due
			id
			displayID
			status
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateTaskComment(ctx context.Context, updateTaskCommentID string, input UpdateNoteInput, noteFiles []*graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateTaskComment, error) {
	vars := map[string]any{
		"updateTaskCommentId": updateTaskCommentID,
		"input":               input,
		"noteFiles":           noteFiles,
	}

	var res UpdateTaskComment
	if err := c.Client.Post(ctx, "UpdateTaskComment", UpdateTaskCommentDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTaskHistoriesDocument = `query GetAllTaskHistories {
	taskHistories {
		edges {
			node {
				completed
				createdAt
				createdBy
				description
				details
				due
				historyTime
				id
				operation
				ref
				status
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllTaskHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTaskHistories, error) {
	vars := map[string]any{}

	var res GetAllTaskHistories
	if err := c.Client.Post(ctx, "GetAllTaskHistories", GetAllTaskHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTaskHistoriesDocument = `query GetTaskHistories ($where: TaskHistoryWhereInput) {
	taskHistories(where: $where) {
		edges {
			node {
				completed
				createdAt
				createdBy
				description
				details
				due
				historyTime
				id
				operation
				ref
				status
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetTaskHistories(ctx context.Context, where *TaskHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTaskHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetTaskHistories
	if err := c.Client.Post(ctx, "GetTaskHistories", GetTaskHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVTemplateDocument = `mutation CreateBulkCSVTemplate ($input: Upload!) {
	createBulkCSVTemplate(input: $input) {
		templates {
			description
			id
			jsonconfig
			name
			uischema
			owner {
				id
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVTemplate(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVTemplate, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVTemplate
	if err := c.Client.Post(ctx, "CreateBulkCSVTemplate", CreateBulkCSVTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkTemplateDocument = `mutation CreateBulkTemplate ($input: [CreateTemplateInput!]) {
	createBulkTemplate(input: $input) {
		templates {
			description
			id
			jsonconfig
			name
			uischema
			owner {
				id
			}
		}
	}
}
`

func (c *Client) CreateBulkTemplate(ctx context.Context, input []*CreateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkTemplate, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkTemplate
	if err := c.Client.Post(ctx, "CreateBulkTemplate", CreateBulkTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateTemplateDocument = `mutation CreateTemplate ($input: CreateTemplateInput!) {
	createTemplate(input: $input) {
		template {
			description
			id
			jsonconfig
			name
			uischema
			owner {
				id
			}
		}
	}
}
`

func (c *Client) CreateTemplate(ctx context.Context, input CreateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*CreateTemplate, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateTemplate
	if err := c.Client.Post(ctx, "CreateTemplate", CreateTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTemplatesDocument = `query GetAllTemplates {
	templates {
		edges {
			node {
				createdAt
				createdBy
				description
				id
				jsonconfig
				name
				uischema
				updatedAt
				updatedBy
				owner {
					id
				}
			}
		}
	}
}
`

func (c *Client) GetAllTemplates(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTemplates, error) {
	vars := map[string]any{}

	var res GetAllTemplates
	if err := c.Client.Post(ctx, "GetAllTemplates", GetAllTemplatesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTemplateByIDDocument = `query GetTemplateByID ($getTemplateId: ID!) {
	template(id: $getTemplateId) {
		createdAt
		createdBy
		description
		id
		jsonconfig
		name
		uischema
		updatedAt
		updatedBy
		owner {
			id
		}
	}
}
`

func (c *Client) GetTemplateByID(ctx context.Context, getTemplateID string, interceptors ...clientv2.RequestInterceptor) (*GetTemplateByID, error) {
	vars := map[string]any{
		"getTemplateId": getTemplateID,
	}

	var res GetTemplateByID
	if err := c.Client.Post(ctx, "GetTemplateByID", GetTemplateByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateTemplateDocument = `mutation UpdateTemplate ($updateTemplateId: ID!, $input: UpdateTemplateInput!) {
	updateTemplate(id: $updateTemplateId, input: $input) {
		template {
			createdAt
			createdBy
			description
			id
			jsonconfig
			name
			uischema
			updatedAt
			updatedBy
			owner {
				id
			}
		}
	}
}
`

func (c *Client) UpdateTemplate(ctx context.Context, updateTemplateID string, input UpdateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTemplate, error) {
	vars := map[string]any{
		"updateTemplateId": updateTemplateID,
		"input":            input,
	}

	var res UpdateTemplate
	if err := c.Client.Post(ctx, "UpdateTemplate", UpdateTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTemplateHistoriesDocument = `query GetAllTemplateHistories {
	templateHistories {
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				jsonconfig
				name
				operation
				ownerID
				ref
				tags
				templateType
				uischema
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllTemplateHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTemplateHistories, error) {
	vars := map[string]any{}

	var res GetAllTemplateHistories
	if err := c.Client.Post(ctx, "GetAllTemplateHistories", GetAllTemplateHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTemplateHistoriesDocument = `query GetTemplateHistories ($where: TemplateHistoryWhereInput) {
	templateHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				jsonconfig
				name
				operation
				ownerID
				ref
				tags
				templateType
				uischema
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetTemplateHistories(ctx context.Context, where *TemplateHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTemplateHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetTemplateHistories
	if err := c.Client.Post(ctx, "GetTemplateHistories", GetTemplateHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateTFASettingDocument = `mutation CreateTFASetting ($input: CreateTFASettingInput!) {
	createTFASetting(input: $input) {
		tfaSetting {
			totpAllowed
			verified
			owner {
				id
			}
		}
		qrCode
		tfaSecret
	}
}
`

func (c *Client) CreateTFASetting(ctx context.Context, input CreateTFASettingInput, interceptors ...clientv2.RequestInterceptor) (*CreateTFASetting, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateTFASetting
	if err := c.Client.Post(ctx, "CreateTFASetting", CreateTFASettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTFASettingsDocument = `query GetAllTFASettings {
	tfaSettings {
		edges {
			node {
				totpAllowed
				verified
				owner {
					id
				}
			}
		}
	}
}
`

func (c *Client) GetAllTFASettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTFASettings, error) {
	vars := map[string]any{}

	var res GetAllTFASettings
	if err := c.Client.Post(ctx, "GetAllTFASettings", GetAllTFASettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTFASettingDocument = `query GetTFASetting {
	tfaSetting {
		totpAllowed
		verified
		owner {
			id
		}
	}
}
`

func (c *Client) GetTFASetting(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetTFASetting, error) {
	vars := map[string]any{}

	var res GetTFASetting
	if err := c.Client.Post(ctx, "GetTFASetting", GetTFASettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateTFASettingDocument = `mutation UpdateTFASetting ($input: UpdateTFASettingInput!) {
	updateTFASetting(input: $input) {
		tfaSetting {
			totpAllowed
			verified
		}
		qrCode
		tfaSecret
		recoveryCodes
	}
}
`

func (c *Client) UpdateTFASetting(ctx context.Context, input UpdateTFASettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTFASetting, error) {
	vars := map[string]any{
		"input": input,
	}

	var res UpdateTFASetting
	if err := c.Client.Post(ctx, "UpdateTFASetting", UpdateTFASettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateUserDocument = `mutation CreateUser ($input: CreateUserInput!, $avatarFile: Upload) {
	createUser(input: $input, avatarFile: $avatarFile) {
		user {
			authProvider
			avatarRemoteURL
			avatarLocalFileID
			avatarFile {
				presignedURL
			}
			displayID
			displayName
			email
			firstName
			id
			lastName
			sub
			tags
			orgMemberships {
				edges {
					node {
						id
						organizationID
					}
				}
			}
			groupMemberships {
				edges {
					node {
						id
						groupID
					}
				}
			}
			setting {
				defaultOrg {
					id
					name
					personalOrg
				}
				createdAt
				createdBy
				emailConfirmed
				locked
				silencedAt
				status
				suspendedAt
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) CreateUser(ctx context.Context, input CreateUserInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateUser, error) {
	vars := map[string]any{
		"input":      input,
		"avatarFile": avatarFile,
	}

	var res CreateUser
	if err := c.Client.Post(ctx, "CreateUser", CreateUserDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteUserDocument = `mutation DeleteUser ($deleteUserId: ID!) {
	deleteUser(id: $deleteUserId) {
		deletedID
	}
}
`

func (c *Client) DeleteUser(ctx context.Context, deleteUserID string, interceptors ...clientv2.RequestInterceptor) (*DeleteUser, error) {
	vars := map[string]any{
		"deleteUserId": deleteUserID,
	}

	var res DeleteUser
	if err := c.Client.Post(ctx, "DeleteUser", DeleteUserDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllUsersDocument = `query GetAllUsers {
	users {
		edges {
			node {
				authProvider
				avatarRemoteURL
				avatarLocalFileID
				avatarFile {
					presignedURL
				}
				displayID
				displayName
				email
				firstName
				id
				lastName
				lastSeen
				sub
				tags
				createdAt
				createdBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllUsers(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUsers, error) {
	vars := map[string]any{}

	var res GetAllUsers
	if err := c.Client.Post(ctx, "GetAllUsers", GetAllUsersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSelfDocument = `query GetSelf {
	self {
		authProvider
		avatarRemoteURL
		avatarLocalFileID
		avatarFile {
			presignedURL
		}
		displayID
		displayName
		email
		firstName
		id
		lastName
		lastSeen
		sub
		tags
		setting {
			defaultOrg {
				id
				name
				personalOrg
			}
			createdAt
			createdBy
			emailConfirmed
			locked
			silencedAt
			status
			suspendedAt
			tags
			updatedAt
			updatedBy
		}
		tfaSettings {
			edges {
				node {
					totpAllowed
					verified
				}
			}
		}
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetSelf(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetSelf, error) {
	vars := map[string]any{}

	var res GetSelf
	if err := c.Client.Post(ctx, "GetSelf", GetSelfDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserByIDDocument = `query GetUserByID ($userId: ID!) {
	user(id: $userId) {
		authProvider
		avatarRemoteURL
		avatarLocalFileID
		avatarFile {
			presignedURL
		}
		displayID
		displayName
		email
		firstName
		id
		lastName
		lastSeen
		sub
		tags
		setting {
			defaultOrg {
				id
				name
				personalOrg
			}
			createdAt
			createdBy
			emailConfirmed
			locked
			silencedAt
			status
			suspendedAt
			tags
			updatedAt
			updatedBy
		}
		organizations {
			edges {
				node {
					id
					name
					personalOrg
					members {
						edges {
							node {
								id
								role
							}
						}
					}
				}
			}
		}
		updatedAt
		updatedBy
		createdAt
		createdBy
	}
}
`

func (c *Client) GetUserByID(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor) (*GetUserByID, error) {
	vars := map[string]any{
		"userId": userID,
	}

	var res GetUserByID
	if err := c.Client.Post(ctx, "GetUserByID", GetUserByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserByIDWithOrgsDocument = `query GetUserByIDWithOrgs ($userId: ID!) {
	user(id: $userId) {
		authProvider
		avatarRemoteURL
		avatarLocalFileID
		avatarFile {
			presignedURL
		}
		displayID
		displayName
		email
		firstName
		id
		lastName
		lastSeen
		sub
		tags
		setting {
			defaultOrg {
				id
				name
				personalOrg
			}
			createdAt
			createdBy
			emailConfirmed
			locked
			silencedAt
			status
			suspendedAt
			tags
			updatedAt
			updatedBy
		}
		orgMemberships {
			edges {
				node {
					id
					role
					user {
						firstName
						lastName
					}
				}
			}
		}
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetUserByIDWithOrgs(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor) (*GetUserByIDWithOrgs, error) {
	vars := map[string]any{
		"userId": userID,
	}

	var res GetUserByIDWithOrgs
	if err := c.Client.Post(ctx, "GetUserByIDWithOrgs", GetUserByIDWithOrgsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateUserDocument = `mutation UpdateUser ($updateUserId: ID!, $input: UpdateUserInput!, $avatarFile: Upload) {
	updateUser(id: $updateUserId, input: $input, avatarFile: $avatarFile) {
		user {
			authProvider
			avatarRemoteURL
			avatarLocalFileID
			avatarFile {
				presignedURL
			}
			displayID
			displayName
			email
			firstName
			id
			lastName
			sub
			tags
			groupMemberships {
				edges {
					node {
						id
						groupID
					}
				}
			}
			orgMemberships {
				edges {
					node {
						id
						organizationID
					}
				}
			}
			setting {
				defaultOrg {
					id
					name
					personalOrg
				}
				createdAt
				createdBy
				emailConfirmed
				locked
				silencedAt
				status
				suspendedAt
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) UpdateUser(ctx context.Context, updateUserID string, input UpdateUserInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateUser, error) {
	vars := map[string]any{
		"updateUserId": updateUserID,
		"input":        input,
		"avatarFile":   avatarFile,
	}

	var res UpdateUser
	if err := c.Client.Post(ctx, "UpdateUser", UpdateUserDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllUserHistoriesDocument = `query GetAllUserHistories {
	userHistories {
		edges {
			node {
				authProvider
				avatarLocalFileID
				avatarRemoteURL
				avatarUpdatedAt
				createdAt
				createdBy
				displayName
				email
				firstName
				historyTime
				id
				lastName
				lastSeen
				operation
				ref
				role
				sub
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllUserHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserHistories, error) {
	vars := map[string]any{}

	var res GetAllUserHistories
	if err := c.Client.Post(ctx, "GetAllUserHistories", GetAllUserHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserHistoriesDocument = `query GetUserHistories ($where: UserHistoryWhereInput) {
	userHistories(where: $where) {
		edges {
			node {
				authProvider
				avatarLocalFileID
				avatarRemoteURL
				avatarUpdatedAt
				createdAt
				createdBy
				displayName
				email
				firstName
				historyTime
				id
				lastName
				lastSeen
				operation
				ref
				role
				sub
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetUserHistories(ctx context.Context, where *UserHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetUserHistories
	if err := c.Client.Post(ctx, "GetUserHistories", GetUserHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllUserSettingsDocument = `query GetAllUserSettings {
	userSettings {
		edges {
			node {
				id
				silencedAt
				status
				defaultOrg {
					id
					name
					personalOrg
				}
				tags
				locked
				isTfaEnabled
				emailConfirmed
				createdAt
				createdBy
				deletedAt
				deletedBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllUserSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserSettings, error) {
	vars := map[string]any{}

	var res GetAllUserSettings
	if err := c.Client.Post(ctx, "GetAllUserSettings", GetAllUserSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserSettingByIDDocument = `query GetUserSettingByID ($userSettingId: ID!) {
	userSetting(id: $userSettingId) {
		id
		silencedAt
		status
		defaultOrg {
			id
			name
			personalOrg
		}
		tags
		locked
		isTfaEnabled
		emailConfirmed
		createdAt
		createdBy
		deletedAt
		deletedBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetUserSettingByID(ctx context.Context, userSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetUserSettingByID, error) {
	vars := map[string]any{
		"userSettingId": userSettingID,
	}

	var res GetUserSettingByID
	if err := c.Client.Post(ctx, "GetUserSettingByID", GetUserSettingByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserSettingsDocument = `query GetUserSettings ($where: UserSettingWhereInput!) {
	userSettings(where: $where) {
		edges {
			node {
				id
				silencedAt
				status
				defaultOrg {
					id
					name
					personalOrg
				}
				tags
				locked
				isTfaEnabled
				emailConfirmed
				createdAt
				createdBy
				deletedAt
				deletedBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetUserSettings(ctx context.Context, where UserSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserSettings, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetUserSettings
	if err := c.Client.Post(ctx, "GetUserSettings", GetUserSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateUserSettingDocument = `mutation UpdateUserSetting ($updateUserSettingId: ID!, $input: UpdateUserSettingInput!) {
	updateUserSetting(id: $updateUserSettingId, input: $input) {
		userSetting {
			id
			silencedAt
			status
			defaultOrg {
				id
				name
				personalOrg
			}
			tags
			locked
			isTfaEnabled
			emailConfirmed
			createdAt
			createdBy
			deletedAt
			deletedBy
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateUserSetting(ctx context.Context, updateUserSettingID string, input UpdateUserSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUserSetting, error) {
	vars := map[string]any{
		"updateUserSettingId": updateUserSettingID,
		"input":               input,
	}

	var res UpdateUserSetting
	if err := c.Client.Post(ctx, "UpdateUserSetting", UpdateUserSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllUserSettingHistoriesDocument = `query GetAllUserSettingHistories {
	userSettingHistories {
		edges {
			node {
				createdAt
				createdBy
				emailConfirmed
				historyTime
				id
				isTfaEnabled
				isWebauthnAllowed
				locked
				operation
				ref
				silencedAt
				status
				suspendedAt
				tags
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetAllUserSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserSettingHistories, error) {
	vars := map[string]any{}

	var res GetAllUserSettingHistories
	if err := c.Client.Post(ctx, "GetAllUserSettingHistories", GetAllUserSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserSettingHistoriesDocument = `query GetUserSettingHistories ($where: UserSettingHistoryWhereInput) {
	userSettingHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				emailConfirmed
				historyTime
				id
				isTfaEnabled
				isWebauthnAllowed
				locked
				operation
				ref
				silencedAt
				status
				suspendedAt
				tags
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetUserSettingHistories(ctx context.Context, where *UserSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserSettingHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetUserSettingHistories
	if err := c.Client.Post(ctx, "GetUserSettingHistories", GetUserSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	CreateBulkCSVActionPlanDocument:              "CreateBulkCSVActionPlan",
	CreateBulkActionPlanDocument:                 "CreateBulkActionPlan",
	CreateActionPlanDocument:                     "CreateActionPlan",
	DeleteActionPlanDocument:                     "DeleteActionPlan",
	GetAllActionPlansDocument:                    "GetAllActionPlans",
	GetActionPlanByIDDocument:                    "GetActionPlanByID",
	GetActionPlansDocument:                       "GetActionPlans",
	UpdateActionPlanDocument:                     "UpdateActionPlan",
	GetAllActionPlanHistoriesDocument:            "GetAllActionPlanHistories",
	GetActionPlanHistoriesDocument:               "GetActionPlanHistories",
	AdminSearchDocument:                          "AdminSearch",
	CreateAPITokenDocument:                       "CreateAPIToken",
	DeleteAPITokenDocument:                       "DeleteAPIToken",
	GetAllAPITokensDocument:                      "GetAllAPITokens",
	GetAPITokenByIDDocument:                      "GetAPITokenByID",
	GetAPITokensDocument:                         "GetAPITokens",
	UpdateAPITokenDocument:                       "UpdateAPIToken",
	CreateBulkContactDocument:                    "CreateBulkContact",
	CreateBulkCSVContactDocument:                 "CreateBulkCSVContact",
	CreateContactDocument:                        "CreateContact",
	DeleteContactDocument:                        "DeleteContact",
	GetAllContactsDocument:                       "GetAllContacts",
	GetContactByIDDocument:                       "GetContactByID",
	GetContactsDocument:                          "GetContacts",
	UpdateContactDocument:                        "UpdateContact",
	GetAllContactHistoriesDocument:               "GetAllContactHistories",
	GetContactHistoriesDocument:                  "GetContactHistories",
	CreateBulkControlDocument:                    "CreateBulkControl",
	CreateBulkCSVControlDocument:                 "CreateBulkCSVControl",
	CreateControlDocument:                        "CreateControl",
	DeleteControlDocument:                        "DeleteControl",
	GetAllControlsDocument:                       "GetAllControls",
	GetControlByIDDocument:                       "GetControlByID",
	GetControlsDocument:                          "GetControls",
	UpdateControlDocument:                        "UpdateControl",
	CreateControlsByCloneDocument:                "CreateControlsByClone",
	GetAllControlHistoriesDocument:               "GetAllControlHistories",
	GetControlHistoriesDocument:                  "GetControlHistories",
	CreateBulkControlImplementationDocument:      "CreateBulkControlImplementation",
	CreateBulkCSVControlImplementationDocument:   "CreateBulkCSVControlImplementation",
	CreateControlImplementationDocument:          "CreateControlImplementation",
	DeleteControlImplementationDocument:          "DeleteControlImplementation",
	GetAllControlImplementationsDocument:         "GetAllControlImplementations",
	GetControlImplementationByIDDocument:         "GetControlImplementationByID",
	GetControlImplementationsDocument:            "GetControlImplementations",
	UpdateControlImplementationDocument:          "UpdateControlImplementation",
	GetAllControlImplementationHistoriesDocument: "GetAllControlImplementationHistories",
	GetControlImplementationHistoriesDocument:    "GetControlImplementationHistories",
	CreateBulkCSVControlObjectiveDocument:        "CreateBulkCSVControlObjective",
	CreateBulkControlObjectiveDocument:           "CreateBulkControlObjective",
	CreateControlObjectiveDocument:               "CreateControlObjective",
	DeleteControlObjectiveDocument:               "DeleteControlObjective",
	GetAllControlObjectivesDocument:              "GetAllControlObjectives",
	GetControlObjectiveByIDDocument:              "GetControlObjectiveByID",
	GetControlObjectivesDocument:                 "GetControlObjectives",
	UpdateControlObjectiveDocument:               "UpdateControlObjective",
	GetAllControlObjectiveHistoriesDocument:      "GetAllControlObjectiveHistories",
	GetControlObjectiveHistoriesDocument:         "GetControlObjectiveHistories",
	CreateDocumentDataDocument:                   "CreateDocumentData",
	DeleteDocumentDataDocument:                   "DeleteDocumentData",
	GetDocumentDataByIDDocument:                  "GetDocumentDataByID",
	UpdateDocumentDataDocument:                   "UpdateDocumentData",
	GetAllDocumentDataHistoriesDocument:          "GetAllDocumentDataHistories",
	GetDocumentDataHistoriesDocument:             "GetDocumentDataHistories",
	CreateBulkCSVEntityDocument:                  "CreateBulkCSVEntity",
	CreateBulkEntityDocument:                     "CreateBulkEntity",
	CreateEntityDocument:                         "CreateEntity",
	DeleteEntityDocument:                         "DeleteEntity",
	GetAllEntitiesDocument:                       "GetAllEntities",
	GetEntitiesDocument:                          "GetEntities",
	GetEntityByIDDocument:                        "GetEntityByID",
	UpdateEntityDocument:                         "UpdateEntity",
	GetAllEntityHistoriesDocument:                "GetAllEntityHistories",
	GetEntityHistoriesDocument:                   "GetEntityHistories",
	CreateBulkCSVEntityTypeDocument:              "CreateBulkCSVEntityType",
	CreateBulkEntityTypeDocument:                 "CreateBulkEntityType",
	CreateEntityTypeDocument:                     "CreateEntityType",
	DeleteEntityTypeDocument:                     "DeleteEntityType",
	GetAllEntityTypesDocument:                    "GetAllEntityTypes",
	GetEntityTypeByIDDocument:                    "GetEntityTypeByID",
	GetEntityTypesDocument:                       "GetEntityTypes",
	UpdateEntityTypeDocument:                     "UpdateEntityType",
	GetAllEntityTypeHistoriesDocument:            "GetAllEntityTypeHistories",
	GetEntityTypeHistoriesDocument:               "GetEntityTypeHistories",
	CreateBulkCSVEventDocument:                   "CreateBulkCSVEvent",
	CreateBulkEventDocument:                      "CreateBulkEvent",
	CreateEventDocument:                          "CreateEvent",
	DeleteEventDocument:                          "DeleteEvent",
	GetAllEventsDocument:                         "GetAllEvents",
	GetEventByIDDocument:                         "GetEventByID",
	GetEventsDocument:                            "GetEvents",
	UpdateEventDocument:                          "UpdateEvent",
	GetAllEventHistoriesDocument:                 "GetAllEventHistories",
	GetEventHistoriesDocument:                    "GetEventHistories",
	CreateEvidenceDocument:                       "CreateEvidence",
	DeleteEvidenceDocument:                       "DeleteEvidence",
	GetAllEvidencesDocument:                      "GetAllEvidences",
	GetEvidenceByIDDocument:                      "GetEvidenceByID",
	GetEvidencesDocument:                         "GetEvidences",
	UpdateEvidenceDocument:                       "UpdateEvidence",
	GetAllEvidenceHistoriesDocument:              "GetAllEvidenceHistories",
	GetEvidenceHistoriesDocument:                 "GetEvidenceHistories",
	DeleteFileDocument:                           "DeleteFile",
	GetAllFilesDocument:                          "GetAllFiles",
	GetFileByIDDocument:                          "GetFileByID",
	GetFilesDocument:                             "GetFiles",
	GetAllFileHistoriesDocument:                  "GetAllFileHistories",
	GetFileHistoriesDocument:                     "GetFileHistories",
	CreateBulkCSVGroupDocument:                   "CreateBulkCSVGroup",
	CreateBulkGroupDocument:                      "CreateBulkGroup",
	CreateGroupDocument:                          "CreateGroup",
	CreateGroupByCloneDocument:                   "CreateGroupByClone",
	CreateGroupWithMembersDocument:               "CreateGroupWithMembers",
	DeleteGroupDocument:                          "DeleteGroup",
	GetAllGroupsDocument:                         "GetAllGroups",
	GetGroupByIDDocument:                         "GetGroupByID",
	GetGroupsDocument:                            "GetGroups",
	UpdateGroupDocument:                          "UpdateGroup",
	GetAllGroupHistoriesDocument:                 "GetAllGroupHistories",
	GetGroupHistoriesDocument:                    "GetGroupHistories",
	AddUserToGroupWithRoleDocument:               "AddUserToGroupWithRole",
	CreateBulkCSVGroupMembersDocument:            "CreateBulkCSVGroupMembers",
	CreateBulkGroupMembersDocument:               "CreateBulkGroupMembers",
	GetGroupMembersByGroupIDDocument:             "GetGroupMembersByGroupID",
	RemoveUserFromGroupDocument:                  "RemoveUserFromGroup",
	UpdateUserRoleInGroupDocument:                "UpdateUserRoleInGroup",
	GetAllGroupMembershipHistoriesDocument:       "GetAllGroupMembershipHistories",
	GetGroupMembershipHistoriesDocument:          "GetGroupMembershipHistories",
	GetAllGroupSettingsDocument:                  "GetAllGroupSettings",
	GetGroupSettingByIDDocument:                  "GetGroupSettingByID",
	GetGroupSettingsDocument:                     "GetGroupSettings",
	UpdateGroupSettingDocument:                   "UpdateGroupSetting",
	GetAllGroupSettingHistoriesDocument:          "GetAllGroupSettingHistories",
	GetGroupSettingHistoriesDocument:             "GetGroupSettingHistories",
	CreateBulkCSVHushDocument:                    "CreateBulkCSVHush",
	CreateBulkHushDocument:                       "CreateBulkHush",
	CreateHushDocument:                           "CreateHush",
	GetAllHushesDocument:                         "GetAllHushes",
	GetHushByIDDocument:                          "GetHushByID",
	GetHushesDocument:                            "GetHushes",
	UpdateHushDocument:                           "UpdateHush",
	GetAllHushHistoriesDocument:                  "GetAllHushHistories",
	GetHushHistoriesDocument:                     "GetHushHistories",
	CreateBulkCSVIntegrationDocument:             "CreateBulkCSVIntegration",
	CreateBulkIntegrationDocument:                "CreateBulkIntegration",
	CreateIntegrationDocument:                    "CreateIntegration",
	DeleteIntegrationDocument:                    "DeleteIntegration",
	GetAllIntegrationsDocument:                   "GetAllIntegrations",
	GetIntegrationByIDDocument:                   "GetIntegrationByID",
	GetIntegrationsDocument:                      "GetIntegrations",
	UpdateIntegrationDocument:                    "UpdateIntegration",
	GetAllIntegrationHistoriesDocument:           "GetAllIntegrationHistories",
	GetIntegrationHistoriesDocument:              "GetIntegrationHistories",
	CreateBulkCSVInternalPolicyDocument:          "CreateBulkCSVInternalPolicy",
	CreateBulkInternalPolicyDocument:             "CreateBulkInternalPolicy",
	CreateInternalPolicyDocument:                 "CreateInternalPolicy",
	DeleteInternalPolicyDocument:                 "DeleteInternalPolicy",
	GetAllInternalPoliciesDocument:               "GetAllInternalPolicies",
	GetInternalPoliciesDocument:                  "GetInternalPolicies",
	GetInternalPolicyByIDDocument:                "GetInternalPolicyByID",
	UpdateInternalPolicyDocument:                 "UpdateInternalPolicy",
	GetAllInternalPolicyHistoriesDocument:        "GetAllInternalPolicyHistories",
	GetInternalPolicyHistoriesDocument:           "GetInternalPolicyHistories",
	CreateBulkCSVInviteDocument:                  "CreateBulkCSVInvite",
	CreateBulkInviteDocument:                     "CreateBulkInvite",
	CreateInviteDocument:                         "CreateInvite",
	DeleteInviteDocument:                         "DeleteInvite",
	GetAllInvitesDocument:                        "GetAllInvites",
	GetInviteByIDDocument:                        "GetInviteByID",
	InvitesByOrgIDDocument:                       "InvitesByOrgID",
	CreateBulkCSVMappedControlDocument:           "CreateBulkCSVMappedControl",
	CreateBulkMappedControlDocument:              "CreateBulkMappedControl",
	CreateMappedControlDocument:                  "CreateMappedControl",
	DeleteMappedControlDocument:                  "DeleteMappedControl",
	GetAllMappedControlsDocument:                 "GetAllMappedControls",
	GetMappedControlByIDDocument:                 "GetMappedControlByID",
	GetMappedControlsDocument:                    "GetMappedControls",
	UpdateMappedControlDocument:                  "UpdateMappedControl",
	GetAllMappedControlHistoriesDocument:         "GetAllMappedControlHistories",
	GetMappedControlHistoriesDocument:            "GetMappedControlHistories",
	CreateBulkCSVNarrativeDocument:               "CreateBulkCSVNarrative",
	CreateBulkNarrativeDocument:                  "CreateBulkNarrative",
	CreateNarrativeDocument:                      "CreateNarrative",
	DeleteNarrativeDocument:                      "DeleteNarrative",
	GetAllNarrativesDocument:                     "GetAllNarratives",
	GetNarrativeByIDDocument:                     "GetNarrativeByID",
	GetNarrativesDocument:                        "GetNarratives",
	UpdateNarrativeDocument:                      "UpdateNarrative",
	GetAllNarrativeHistoriesDocument:             "GetAllNarrativeHistories",
	GetNarrativeHistoriesDocument:                "GetNarrativeHistories",
	GetNoteByIDDocument:                          "GetNoteByID",
	GetAllNoteHistoriesDocument:                  "GetAllNoteHistories",
	GetNoteHistoriesDocument:                     "GetNoteHistories",
	CreateOnboardingDocument:                     "CreateOnboarding",
	CreateOrganizationDocument:                   "CreateOrganization",
	CreateOrganizationWithMembersDocument:        "CreateOrganizationWithMembers",
	DeleteOrganizationDocument:                   "DeleteOrganization",
	GetAllOrganizationsDocument:                  "GetAllOrganizations",
	GetOrganizationByIDDocument:                  "GetOrganizationByID",
	GetOrganizationsDocument:                     "GetOrganizations",
	UpdateOrganizationDocument:                   "UpdateOrganization",
	GetAllOrganizationHistoriesDocument:          "GetAllOrganizationHistories",
	GetOrganizationHistoriesDocument:             "GetOrganizationHistories",
	GetAllOrganizationSettingsDocument:           "GetAllOrganizationSettings",
	GetOrganizationSettingByIDDocument:           "GetOrganizationSettingByID",
	GetOrganizationSettingsDocument:              "GetOrganizationSettings",
	UpdateOrganizationSettingDocument:            "UpdateOrganizationSetting",
	GetAllOrganizationSettingHistoriesDocument:   "GetAllOrganizationSettingHistories",
	GetOrganizationSettingHistoriesDocument:      "GetOrganizationSettingHistories",
	AddUserToOrgWithRoleDocument:                 "AddUserToOrgWithRole",
	CreateBulkCSVOrgMembersDocument:              "CreateBulkCSVOrgMembers",
	CreateBulkOrgMembersDocument:                 "CreateBulkOrgMembers",
	GetOrgMembersByOrgIDDocument:                 "GetOrgMembersByOrgID",
	RemoveUserFromOrgDocument:                    "RemoveUserFromOrg",
	UpdateUserRoleInOrgDocument:                  "UpdateUserRoleInOrg",
	GetAllOrgMembershipHistoriesDocument:         "GetAllOrgMembershipHistories",
	GetOrgMembershipHistoriesDocument:            "GetOrgMembershipHistories",
	GetAllOrgSubscriptionsDocument:               "GetAllOrgSubscriptions",
	GetOrgSubscriptionByIDDocument:               "GetOrgSubscriptionByID",
	GetOrgSubscriptionsDocument:                  "GetOrgSubscriptions",
	GetAllOrgSubscriptionHistoriesDocument:       "GetAllOrgSubscriptionHistories",
	GetOrgSubscriptionHistoriesDocument:          "GetOrgSubscriptionHistories",
	CreatePersonalAccessTokenDocument:            "CreatePersonalAccessToken",
	DeletePersonalAccessTokenDocument:            "DeletePersonalAccessToken",
	GetAllPersonalAccessTokensDocument:           "GetAllPersonalAccessTokens",
	GetPersonalAccessTokenByIDDocument:           "GetPersonalAccessTokenByID",
	GetPersonalAccessTokensDocument:              "GetPersonalAccessTokens",
	UpdatePersonalAccessTokenDocument:            "UpdatePersonalAccessToken",
	CreateBulkCSVProcedureDocument:               "CreateBulkCSVProcedure",
	CreateBulkProcedureDocument:                  "CreateBulkProcedure",
	CreateProcedureDocument:                      "CreateProcedure",
	DeleteProcedureDocument:                      "DeleteProcedure",
	GetAllProceduresDocument:                     "GetAllProcedures",
	GetProcedureByIDDocument:                     "GetProcedureByID",
	GetProceduresDocument:                        "GetProcedures",
	UpdateProcedureDocument:                      "UpdateProcedure",
	GetAllProcedureHistoriesDocument:             "GetAllProcedureHistories",
	GetProcedureHistoriesDocument:                "GetProcedureHistories",
	CreateBulkCSVProgramDocument:                 "CreateBulkCSVProgram",
	CreateBulkProgramDocument:                    "CreateBulkProgram",
	CreateControlWithSubcontrolsDocument:         "CreateControlWithSubcontrols",
	CreateFullProgramDocument:                    "CreateFullProgram",
	CreateProgramDocument:                        "CreateProgram",
	CreateProgramWithMembersDocument:             "CreateProgramWithMembers",
	DeleteProgramDocument:                        "DeleteProgram",
	GetAllProgramsDocument:                       "GetAllPrograms",
	GetProgramByIDDocument:                       "GetProgramByID",
	GetProgramsDocument:                          "GetPrograms",
	UpdateProgramDocument:                        "UpdateProgram",
	AddUserToProgramWithRoleDocument:             "AddUserToProgramWithRole",
	CreateBulkCSVProgramMembersDocument:          "CreateBulkCSVProgramMembers",
	CreateBulkProgramMembersDocument:             "CreateBulkProgramMembers",
	GetProgramMembersByProgramIDDocument:         "GetProgramMembersByProgramID",
	RemoveUserFromProgramDocument:                "RemoveUserFromProgram",
	UpdateUserRoleInProgramDocument:              "UpdateUserRoleInProgram",
	GetAllProgramHistoriesDocument:               "GetAllProgramHistories",
	GetProgramHistoriesDocument:                  "GetProgramHistories",
	CreateBulkCSVProgramMembershipDocument:       "CreateBulkCSVProgramMembership",
	CreateBulkProgramMembershipDocument:          "CreateBulkProgramMembership",
	CreateProgramMembershipDocument:              "CreateProgramMembership",
	DeleteProgramMembershipDocument:              "DeleteProgramMembership",
	GetAllProgramMembershipsDocument:             "GetAllProgramMemberships",
	GetProgramMembershipByIDDocument:             "GetProgramMembershipByID",
	GetProgramMembershipsDocument:                "GetProgramMemberships",
	UpdateProgramMembershipDocument:              "UpdateProgramMembership",
	GetAllProgramMembershipHistoriesDocument:     "GetAllProgramMembershipHistories",
	GetProgramMembershipHistoriesDocument:        "GetProgramMembershipHistories",
	CreateBulkCSVRiskDocument:                    "CreateBulkCSVRisk",
	CreateBulkRiskDocument:                       "CreateBulkRisk",
	CreateRiskDocument:                           "CreateRisk",
	DeleteRiskDocument:                           "DeleteRisk",
	GetAllRisksDocument:                          "GetAllRisks",
	GetRiskByIDDocument:                          "GetRiskByID",
	GetRisksDocument:                             "GetRisks",
	UpdateRiskDocument:                           "UpdateRisk",
	GetAllRiskHistoriesDocument:                  "GetAllRiskHistories",
	GetRiskHistoriesDocument:                     "GetRiskHistories",
	GlobalSearchDocument:                         "GlobalSearch",
	CreateStandardDocument:                       "CreateStandard",
	DeleteStandardDocument:                       "DeleteStandard",
	GetAllStandardsDocument:                      "GetAllStandards",
	GetStandardByIDDocument:                      "GetStandardByID",
	GetStandardsDocument:                         "GetStandards",
	UpdateStandardDocument:                       "UpdateStandard",
	GetAllStandardHistoriesDocument:              "GetAllStandardHistories",
	GetStandardHistoriesDocument:                 "GetStandardHistories",
	CreateBulkCSVSubcontrolDocument:              "CreateBulkCSVSubcontrol",
	CreateBulkSubcontrolDocument:                 "CreateBulkSubcontrol",
	CreateSubcontrolDocument:                     "CreateSubcontrol",
	DeleteSubcontrolDocument:                     "DeleteSubcontrol",
	GetAllSubcontrolsDocument:                    "GetAllSubcontrols",
	GetSubcontrolByIDDocument:                    "GetSubcontrolByID",
	GetSubcontrolsDocument:                       "GetSubcontrols",
	UpdateSubcontrolDocument:                     "UpdateSubcontrol",
	GetAllSubcontrolHistoriesDocument:            "GetAllSubcontrolHistories",
	GetSubcontrolHistoriesDocument:               "GetSubcontrolHistories",
	CreateBulkCSVSubscriberDocument:              "CreateBulkCSVSubscriber",
	CreateBulkSubscriberDocument:                 "CreateBulkSubscriber",
	CreateSubscriberDocument:                     "CreateSubscriber",
	DeleteSubscriberDocument:                     "DeleteSubscriber",
	GetAllSubscribersDocument:                    "GetAllSubscribers",
	GetSubscriberByEmailDocument:                 "GetSubscriberByEmail",
	GetSubscribersDocument:                       "GetSubscribers",
	UpdateSubscriberDocument:                     "UpdateSubscriber",
	CreateBulkCSVTaskDocument:                    "CreateBulkCSVTask",
	CreateBulkTaskDocument:                       "CreateBulkTask",
	CreateTaskDocument:                           "CreateTask",
	DeleteTaskDocument:                           "DeleteTask",
	GetAllTasksDocument:                          "GetAllTasks",
	GetTaskByIDDocument:                          "GetTaskByID",
	GetTasksDocument:                             "GetTasks",
	UpdateTaskDocument:                           "UpdateTask",
	UpdateTaskCommentDocument:                    "UpdateTaskComment",
	GetAllTaskHistoriesDocument:                  "GetAllTaskHistories",
	GetTaskHistoriesDocument:                     "GetTaskHistories",
	CreateBulkCSVTemplateDocument:                "CreateBulkCSVTemplate",
	CreateBulkTemplateDocument:                   "CreateBulkTemplate",
	CreateTemplateDocument:                       "CreateTemplate",
	GetAllTemplatesDocument:                      "GetAllTemplates",
	GetTemplateByIDDocument:                      "GetTemplateByID",
	UpdateTemplateDocument:                       "UpdateTemplate",
	GetAllTemplateHistoriesDocument:              "GetAllTemplateHistories",
	GetTemplateHistoriesDocument:                 "GetTemplateHistories",
	CreateTFASettingDocument:                     "CreateTFASetting",
	GetAllTFASettingsDocument:                    "GetAllTFASettings",
	GetTFASettingDocument:                        "GetTFASetting",
	UpdateTFASettingDocument:                     "UpdateTFASetting",
	CreateUserDocument:                           "CreateUser",
	DeleteUserDocument:                           "DeleteUser",
	GetAllUsersDocument:                          "GetAllUsers",
	GetSelfDocument:                              "GetSelf",
	GetUserByIDDocument:                          "GetUserByID",
	GetUserByIDWithOrgsDocument:                  "GetUserByIDWithOrgs",
	UpdateUserDocument:                           "UpdateUser",
	GetAllUserHistoriesDocument:                  "GetAllUserHistories",
	GetUserHistoriesDocument:                     "GetUserHistories",
	GetAllUserSettingsDocument:                   "GetAllUserSettings",
	GetUserSettingByIDDocument:                   "GetUserSettingByID",
	GetUserSettingsDocument:                      "GetUserSettings",
	UpdateUserSettingDocument:                    "UpdateUserSetting",
	GetAllUserSettingHistoriesDocument:           "GetAllUserSettingHistories",
	GetUserSettingHistoriesDocument:              "GetUserSettingHistories",
}
