// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package openlaneclient

import (
	"context"
	"encoding/json"
	"net/http"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/Yamashou/gqlgenc/clientv2"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

type OpenlaneGraphClient interface {
	CreateBulkCSVActionPlan(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVActionPlan, error)
	CreateBulkActionPlan(ctx context.Context, input []*CreateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkActionPlan, error)
	CreateActionPlan(ctx context.Context, input CreateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*CreateActionPlan, error)
	DeleteActionPlan(ctx context.Context, deleteActionPlanID string, interceptors ...clientv2.RequestInterceptor) (*DeleteActionPlan, error)
	GetAllActionPlans(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllActionPlans, error)
	GetActionPlanByID(ctx context.Context, actionPlanID string, interceptors ...clientv2.RequestInterceptor) (*GetActionPlanByID, error)
	GetActionPlans(ctx context.Context, where *ActionPlanWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetActionPlans, error)
	UpdateActionPlan(ctx context.Context, updateActionPlanID string, input UpdateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*UpdateActionPlan, error)
	GetAllActionPlanHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllActionPlanHistories, error)
	GetActionPlanHistories(ctx context.Context, where *ActionPlanHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetActionPlanHistories, error)
	AdminSearch(ctx context.Context, query string, interceptors ...clientv2.RequestInterceptor) (*AdminSearch, error)
	CreateAPIToken(ctx context.Context, input CreateAPITokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateAPIToken, error)
	UpdateAPIToken(ctx context.Context, updateAPITokenID string, input UpdateAPITokenInput, interceptors ...clientv2.RequestInterceptor) (*UpdateAPIToken, error)
	GetAllAPITokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllAPITokens, error)
	GetAPITokenByID(ctx context.Context, apiTokenID string, interceptors ...clientv2.RequestInterceptor) (*GetAPITokenByID, error)
	DeleteAPIToken(ctx context.Context, deleteAPITokenID string, interceptors ...clientv2.RequestInterceptor) (*DeleteAPIToken, error)
	CreateBulkContact(ctx context.Context, input []*CreateContactInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkContact, error)
	CreateBulkCSVContact(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVContact, error)
	CreateContact(ctx context.Context, input CreateContactInput, interceptors ...clientv2.RequestInterceptor) (*CreateContact, error)
	DeleteContact(ctx context.Context, deleteContactID string, interceptors ...clientv2.RequestInterceptor) (*DeleteContact, error)
	GetAllContacts(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllContacts, error)
	GetContactByID(ctx context.Context, contactID string, interceptors ...clientv2.RequestInterceptor) (*GetContactByID, error)
	GetContacts(ctx context.Context, where *ContactWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetContacts, error)
	UpdateContact(ctx context.Context, updateContactID string, input UpdateContactInput, interceptors ...clientv2.RequestInterceptor) (*UpdateContact, error)
	GetAllContactHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllContactHistories, error)
	GetContactHistories(ctx context.Context, where *ContactHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetContactHistories, error)
	CreateBulkCSVControl(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVControl, error)
	CreateBulkControl(ctx context.Context, input []*CreateControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkControl, error)
	CreateControl(ctx context.Context, input CreateControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateControl, error)
	DeleteControl(ctx context.Context, deleteControlID string, interceptors ...clientv2.RequestInterceptor) (*DeleteControl, error)
	GetAllControls(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControls, error)
	GetControlByID(ctx context.Context, controlID string, interceptors ...clientv2.RequestInterceptor) (*GetControlByID, error)
	GetControls(ctx context.Context, where *ControlWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControls, error)
	UpdateControl(ctx context.Context, updateControlID string, input UpdateControlInput, interceptors ...clientv2.RequestInterceptor) (*UpdateControl, error)
	GetAllControlHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlHistories, error)
	GetControlHistories(ctx context.Context, where *ControlHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlHistories, error)
	CreateBulkCSVControlObjective(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVControlObjective, error)
	CreateBulkControlObjective(ctx context.Context, input []*CreateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkControlObjective, error)
	CreateControlObjective(ctx context.Context, input CreateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*CreateControlObjective, error)
	DeleteControlObjective(ctx context.Context, deleteControlObjectiveID string, interceptors ...clientv2.RequestInterceptor) (*DeleteControlObjective, error)
	GetAllControlObjectives(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlObjectives, error)
	GetControlObjectiveByID(ctx context.Context, controlObjectiveID string, interceptors ...clientv2.RequestInterceptor) (*GetControlObjectiveByID, error)
	GetControlObjectives(ctx context.Context, where *ControlObjectiveWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlObjectives, error)
	UpdateControlObjective(ctx context.Context, updateControlObjectiveID string, input UpdateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*UpdateControlObjective, error)
	GetAllControlObjectiveHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlObjectiveHistories, error)
	GetControlObjectiveHistories(ctx context.Context, where *ControlObjectiveHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlObjectiveHistories, error)
	CreateDocumentData(ctx context.Context, input CreateDocumentDataInput, interceptors ...clientv2.RequestInterceptor) (*CreateDocumentData, error)
	DeleteDocumentData(ctx context.Context, deleteDocumentDataID string, interceptors ...clientv2.RequestInterceptor) (*DeleteDocumentData, error)
	GetDocumentDataByID(ctx context.Context, documentDataID string, interceptors ...clientv2.RequestInterceptor) (*GetDocumentDataByID, error)
	UpdateDocumentData(ctx context.Context, updateDocumentDataID string, input UpdateDocumentDataInput, interceptors ...clientv2.RequestInterceptor) (*UpdateDocumentData, error)
	GetAllDocumentDataHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllDocumentDataHistories, error)
	GetDocumentDataHistories(ctx context.Context, where *DocumentDataHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetDocumentDataHistories, error)
	CreateBulkCSVEntitlement(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntitlement, error)
	CreateBulkEntitlement(ctx context.Context, input []*CreateEntitlementInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntitlement, error)
	CreateEntitlement(ctx context.Context, input CreateEntitlementInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntitlement, error)
	DeleteEntitlement(ctx context.Context, deleteEntitlementID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntitlement, error)
	GetAllEntitlements(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntitlements, error)
	GetEntitlementByID(ctx context.Context, entitlementID string, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementByID, error)
	GetEntitlements(ctx context.Context, where *EntitlementWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntitlements, error)
	UpdateEntitlement(ctx context.Context, updateEntitlementID string, input UpdateEntitlementInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntitlement, error)
	GetAllEntitlementHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntitlementHistories, error)
	GetEntitlementHistories(ctx context.Context, where *EntitlementHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementHistories, error)
	CreateBulkCSVEntitlementPlan(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntitlementPlan, error)
	CreateBulkEntitlementPlan(ctx context.Context, input []*CreateEntitlementPlanInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntitlementPlan, error)
	CreateEntitlementPlan(ctx context.Context, input CreateEntitlementPlanInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntitlementPlan, error)
	DeleteEntitlementPlan(ctx context.Context, deleteEntitlementPlanID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntitlementPlan, error)
	GetAllEntitlementPlans(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntitlementPlans, error)
	GetEntitlementPlanByID(ctx context.Context, entitlementPlanID string, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementPlanByID, error)
	GetEntitlementPlans(ctx context.Context, where *EntitlementPlanWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementPlans, error)
	UpdateEntitlementPlan(ctx context.Context, updateEntitlementPlanID string, input UpdateEntitlementPlanInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntitlementPlan, error)
	CreateBulkCSVEntitlementPlanFeature(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntitlementPlanFeature, error)
	CreateBulkEntitlementPlanFeature(ctx context.Context, input []*CreateEntitlementPlanFeatureInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntitlementPlanFeature, error)
	CreateEntitlementPlanFeature(ctx context.Context, input CreateEntitlementPlanFeatureInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntitlementPlanFeature, error)
	DeleteEntitlementPlanFeature(ctx context.Context, deleteEntitlementPlanFeatureID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntitlementPlanFeature, error)
	GetAllEntitlementPlanFeatures(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntitlementPlanFeatures, error)
	GetEntitlementPlanFeatureByID(ctx context.Context, entitlementPlanFeatureID string, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementPlanFeatureByID, error)
	GetEntitlementPlanFeatures(ctx context.Context, where *EntitlementPlanFeatureWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementPlanFeatures, error)
	UpdateEntitlementPlanFeature(ctx context.Context, updateEntitlementPlanFeatureID string, input UpdateEntitlementPlanFeatureInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntitlementPlanFeature, error)
	GetAllEntitlementPlanFeatureHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntitlementPlanFeatureHistories, error)
	GetEntitlementPlanFeatureHistories(ctx context.Context, where *EntitlementPlanFeatureHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementPlanFeatureHistories, error)
	GetAllEntitlementPlanHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntitlementPlanHistories, error)
	GetEntitlementPlanHistories(ctx context.Context, where *EntitlementPlanHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementPlanHistories, error)
	CreateBulkCSVEntity(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntity, error)
	CreateBulkEntity(ctx context.Context, input []*CreateEntityInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntity, error)
	CreateEntity(ctx context.Context, input CreateEntityInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntity, error)
	DeleteEntity(ctx context.Context, deleteEntityID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntity, error)
	GetAllEntities(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntities, error)
	GetEntities(ctx context.Context, where *EntityWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntities, error)
	GetEntityByID(ctx context.Context, entityID string, interceptors ...clientv2.RequestInterceptor) (*GetEntityByID, error)
	UpdateEntity(ctx context.Context, updateEntityID string, input UpdateEntityInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntity, error)
	GetAllEntityHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntityHistories, error)
	GetEntityHistories(ctx context.Context, where *EntityHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntityHistories, error)
	CreateBulkCSVEntityType(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntityType, error)
	CreateBulkEntityType(ctx context.Context, input []*CreateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntityType, error)
	CreateEntityType(ctx context.Context, input CreateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntityType, error)
	DeleteEntityType(ctx context.Context, deleteEntityTypeID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntityType, error)
	GetAllEntityTypes(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntityTypes, error)
	GetEntityTypeByID(ctx context.Context, entityTypeID string, interceptors ...clientv2.RequestInterceptor) (*GetEntityTypeByID, error)
	GetEntityTypes(ctx context.Context, where *EntityTypeWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntityTypes, error)
	UpdateEntityType(ctx context.Context, updateEntityTypeID string, input UpdateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntityType, error)
	GetAllEntityTypeHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntityTypeHistories, error)
	GetEntityTypeHistories(ctx context.Context, where *EntityTypeHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntityTypeHistories, error)
	CreateBulkCSVEvent(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEvent, error)
	CreateBulkEvent(ctx context.Context, input []*CreateEventInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEvent, error)
	CreateEvent(ctx context.Context, input CreateEventInput, interceptors ...clientv2.RequestInterceptor) (*CreateEvent, error)
	DeleteEvent(ctx context.Context, deleteEventID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEvent, error)
	GetAllEvents(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEvents, error)
	GetEventByID(ctx context.Context, eventID string, interceptors ...clientv2.RequestInterceptor) (*GetEventByID, error)
	GetEvents(ctx context.Context, where *EventWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEvents, error)
	UpdateEvent(ctx context.Context, updateEventID string, input UpdateEventInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEvent, error)
	GetAllEventHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEventHistories, error)
	GetEventHistories(ctx context.Context, where *EventHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEventHistories, error)
	CreateBulkCSVFeature(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVFeature, error)
	CreateBulkFeature(ctx context.Context, input []*CreateFeatureInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkFeature, error)
	CreateFeature(ctx context.Context, input CreateFeatureInput, interceptors ...clientv2.RequestInterceptor) (*CreateFeature, error)
	DeleteFeature(ctx context.Context, deleteFeatureID string, interceptors ...clientv2.RequestInterceptor) (*DeleteFeature, error)
	GetAllFeatures(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllFeatures, error)
	GetFeatureByID(ctx context.Context, featureID string, interceptors ...clientv2.RequestInterceptor) (*GetFeatureByID, error)
	GetFeatures(ctx context.Context, where *FeatureWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetFeatures, error)
	UpdateFeature(ctx context.Context, updateFeatureID string, input UpdateFeatureInput, interceptors ...clientv2.RequestInterceptor) (*UpdateFeature, error)
	GetAllFeatureHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllFeatureHistories, error)
	GetFeatureHistories(ctx context.Context, where *FeatureHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetFeatureHistories, error)
	DeleteFile(ctx context.Context, deleteFileID string, interceptors ...clientv2.RequestInterceptor) (*DeleteFile, error)
	GetAllFiles(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllFiles, error)
	GetFileByID(ctx context.Context, fileID string, interceptors ...clientv2.RequestInterceptor) (*GetFileByID, error)
	GetFiles(ctx context.Context, where *FileWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetFiles, error)
	GetAllFileHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllFileHistories, error)
	GetFileHistories(ctx context.Context, where *FileHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetFileHistories, error)
	CreateBulkCSVGroup(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVGroup, error)
	CreateBulkGroup(ctx context.Context, input []*CreateGroupInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkGroup, error)
	CreateGroup(ctx context.Context, input CreateGroupInput, interceptors ...clientv2.RequestInterceptor) (*CreateGroup, error)
	DeleteGroup(ctx context.Context, deleteGroupID string, interceptors ...clientv2.RequestInterceptor) (*DeleteGroup, error)
	GetAllGroups(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroups, error)
	GetGroupByID(ctx context.Context, groupID string, interceptors ...clientv2.RequestInterceptor) (*GetGroupByID, error)
	GetGroups(ctx context.Context, where *GroupWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroups, error)
	UpdateGroup(ctx context.Context, updateGroupID string, input UpdateGroupInput, interceptors ...clientv2.RequestInterceptor) (*UpdateGroup, error)
	GetAllGroupHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupHistories, error)
	GetGroupHistories(ctx context.Context, where *GroupHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupHistories, error)
	AddUserToGroupWithRole(ctx context.Context, input CreateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*AddUserToGroupWithRole, error)
	CreateBulkCSVGroupMembers(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVGroupMembers, error)
	CreateBulkGroupMembers(ctx context.Context, input []*CreateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkGroupMembers, error)
	GetGroupMembersByGroupID(ctx context.Context, where *GroupMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupMembersByGroupID, error)
	RemoveUserFromGroup(ctx context.Context, deleteGroupMembershipID string, interceptors ...clientv2.RequestInterceptor) (*RemoveUserFromGroup, error)
	UpdateUserRoleInGroup(ctx context.Context, updateGroupMemberID string, input UpdateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUserRoleInGroup, error)
	GetAllGroupMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupMembershipHistories, error)
	GetGroupMembershipHistories(ctx context.Context, where *GroupMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupMembershipHistories, error)
	GetAllGroupSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupSettings, error)
	GetGroupSettingByID(ctx context.Context, groupSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetGroupSettingByID, error)
	GetGroupSettings(ctx context.Context, where GroupSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupSettings, error)
	UpdateGroupSetting(ctx context.Context, updateGroupSettingID string, input UpdateGroupSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateGroupSetting, error)
	GetAllGroupSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupSettingHistories, error)
	GetGroupSettingHistories(ctx context.Context, where *GroupSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupSettingHistories, error)
	CreateBulkCSVHush(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVHush, error)
	CreateBulkHush(ctx context.Context, input []*CreateHushInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkHush, error)
	CreateHush(ctx context.Context, input CreateHushInput, interceptors ...clientv2.RequestInterceptor) (*CreateHush, error)
	GetAllHushes(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllHushes, error)
	GetHushByID(ctx context.Context, hushID string, interceptors ...clientv2.RequestInterceptor) (*GetHushByID, error)
	GetHushes(ctx context.Context, where *HushWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetHushes, error)
	UpdateHush(ctx context.Context, updateHushID string, input UpdateHushInput, interceptors ...clientv2.RequestInterceptor) (*UpdateHush, error)
	GetAllHushHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllHushHistories, error)
	GetHushHistories(ctx context.Context, where *HushHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetHushHistories, error)
	CreateBulkCSVIntegration(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVIntegration, error)
	CreateBulkIntegration(ctx context.Context, input []*CreateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkIntegration, error)
	CreateIntegration(ctx context.Context, input CreateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*CreateIntegration, error)
	DeleteIntegration(ctx context.Context, deleteIntegrationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteIntegration, error)
	GetAllIntegrations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllIntegrations, error)
	GetIntegrationByID(ctx context.Context, integrationID string, interceptors ...clientv2.RequestInterceptor) (*GetIntegrationByID, error)
	GetIntegrations(ctx context.Context, where *IntegrationWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetIntegrations, error)
	UpdateIntegration(ctx context.Context, updateIntegrationID string, input UpdateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*UpdateIntegration, error)
	GetAllIntegrationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllIntegrationHistories, error)
	GetIntegrationHistories(ctx context.Context, where *IntegrationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetIntegrationHistories, error)
	CreateBulkCSVInternalPolicy(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVInternalPolicy, error)
	CreateBulkInternalPolicy(ctx context.Context, input []*CreateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkInternalPolicy, error)
	CreateInternalPolicy(ctx context.Context, input CreateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*CreateInternalPolicy, error)
	DeleteInternalPolicy(ctx context.Context, deleteInternalPolicyID string, interceptors ...clientv2.RequestInterceptor) (*DeleteInternalPolicy, error)
	GetAllInternalPolicies(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllInternalPolicies, error)
	GetInternalPolicyByID(ctx context.Context, internalPolicyID string, interceptors ...clientv2.RequestInterceptor) (*GetInternalPolicyByID, error)
	GetInternalPolicies(ctx context.Context, where *InternalPolicyWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetInternalPolicies, error)
	UpdateInternalPolicy(ctx context.Context, updateInternalPolicyID string, input UpdateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*UpdateInternalPolicy, error)
	GetAllInternalPolicyHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllInternalPolicyHistories, error)
	GetInternalPolicyHistories(ctx context.Context, where *InternalPolicyHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetInternalPolicyHistories, error)
	CreateBulkCSVInvite(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVInvite, error)
	CreateBulkInvite(ctx context.Context, input []*CreateInviteInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkInvite, error)
	CreateInvite(ctx context.Context, input CreateInviteInput, interceptors ...clientv2.RequestInterceptor) (*CreateInvite, error)
	DeleteInvite(ctx context.Context, deleteInviteID string, interceptors ...clientv2.RequestInterceptor) (*DeleteInvite, error)
	GetInviteByID(ctx context.Context, inviteID string, interceptors ...clientv2.RequestInterceptor) (*GetInviteByID, error)
	GetAllInvites(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllInvites, error)
	InvitesByOrgID(ctx context.Context, where *InviteWhereInput, interceptors ...clientv2.RequestInterceptor) (*InvitesByOrgID, error)
	CreateBulkCSVNarrative(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVNarrative, error)
	CreateBulkNarrative(ctx context.Context, input []*CreateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkNarrative, error)
	CreateNarrative(ctx context.Context, input CreateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*CreateNarrative, error)
	DeleteNarrative(ctx context.Context, deleteNarrativeID string, interceptors ...clientv2.RequestInterceptor) (*DeleteNarrative, error)
	GetAllNarratives(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllNarratives, error)
	GetNarrativeByID(ctx context.Context, narrativeID string, interceptors ...clientv2.RequestInterceptor) (*GetNarrativeByID, error)
	GetNarratives(ctx context.Context, where *NarrativeWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetNarratives, error)
	UpdateNarrative(ctx context.Context, updateNarrativeID string, input UpdateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*UpdateNarrative, error)
	GetAllNarrativeHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllNarrativeHistories, error)
	GetNarrativeHistories(ctx context.Context, where *NarrativeHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetNarrativeHistories, error)
	GetAllNoteHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllNoteHistories, error)
	GetNoteHistories(ctx context.Context, where *NoteHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetNoteHistories, error)
	GetAllOauthProviderHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOauthProviderHistories, error)
	GetOauthProviderHistories(ctx context.Context, where *OauthProviderHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOauthProviderHistories, error)
	CreateBulkCSVOhAuthTooToken(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVOhAuthTooToken, error)
	CreateBulkOhAuthTooToken(ctx context.Context, input []*CreateOhAuthTooTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkOhAuthTooToken, error)
	CreateOhAuthTooToken(ctx context.Context, input CreateOhAuthTooTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateOhAuthTooToken, error)
	DeleteOhAuthTooToken(ctx context.Context, deleteOhAuthTooTokenID string, interceptors ...clientv2.RequestInterceptor) (*DeleteOhAuthTooToken, error)
	GetOhAuthTooTokens(ctx context.Context, where *OhAuthTooTokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOhAuthTooTokens, error)
	UpdateOhAuthTooToken(ctx context.Context, updateOhAuthTooTokenID string, input UpdateOhAuthTooTokenInput, interceptors ...clientv2.RequestInterceptor) (*UpdateOhAuthTooToken, error)
	CreateBulkCSVOrganization(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVOrganization, error)
	CreateBulkOrganization(ctx context.Context, input []*CreateOrganizationInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkOrganization, error)
	CreateOrganization(ctx context.Context, input CreateOrganizationInput, interceptors ...clientv2.RequestInterceptor) (*CreateOrganization, error)
	DeleteOrganization(ctx context.Context, deleteOrganizationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteOrganization, error)
	GetAllOrganizations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizations, error)
	GetOrganizationByID(ctx context.Context, organizationID string, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationByID, error)
	GetOrganizations(ctx context.Context, where *OrganizationWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizations, error)
	UpdateOrganization(ctx context.Context, updateOrganizationID string, input UpdateOrganizationInput, interceptors ...clientv2.RequestInterceptor) (*UpdateOrganization, error)
	GetAllOrganizationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizationHistories, error)
	GetOrganizationHistories(ctx context.Context, where *OrganizationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationHistories, error)
	GetAllOrganizationSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizationSettings, error)
	GetOrganizationSettingByID(ctx context.Context, organizationSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettingByID, error)
	GetOrganizationSettings(ctx context.Context, where OrganizationSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettings, error)
	UpdateOrganizationSetting(ctx context.Context, updateOrganizationSettingID string, input UpdateOrganizationSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateOrganizationSetting, error)
	GetAllOrganizationSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizationSettingHistories, error)
	GetOrganizationSettingHistories(ctx context.Context, where *OrganizationSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettingHistories, error)
	AddUserToOrgWithRole(ctx context.Context, input CreateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*AddUserToOrgWithRole, error)
	CreateBulkCSVOrgMembers(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVOrgMembers, error)
	CreateBulkOrgMembers(ctx context.Context, input []*CreateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkOrgMembers, error)
	GetOrgMembersByOrgID(ctx context.Context, where *OrgMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgMembersByOrgID, error)
	RemoveUserFromOrg(ctx context.Context, deleteOrgMembershipID string, interceptors ...clientv2.RequestInterceptor) (*RemoveUserFromOrg, error)
	UpdateUserRoleInOrg(ctx context.Context, updateOrgMemberID string, input UpdateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUserRoleInOrg, error)
	GetAllOrgMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrgMembershipHistories, error)
	GetOrgMembershipHistories(ctx context.Context, where *OrgMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgMembershipHistories, error)
	CreateBulkCSVPersonalAccessToken(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVPersonalAccessToken, error)
	CreateBulkPersonalAccessToken(ctx context.Context, input []*CreatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkPersonalAccessToken, error)
	CreatePersonalAccessToken(ctx context.Context, input CreatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreatePersonalAccessToken, error)
	DeletePersonalAccessToken(ctx context.Context, deletePersonalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*DeletePersonalAccessToken, error)
	GetAllPersonalAccessTokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllPersonalAccessTokens, error)
	GetPersonalAccessTokenByID(ctx context.Context, personalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*GetPersonalAccessTokenByID, error)
	UpdatePersonalAccessToken(ctx context.Context, updatePersonalAccessTokenID string, input UpdatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*UpdatePersonalAccessToken, error)
	CreateBulkCSVProcedure(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVProcedure, error)
	CreateBulkProcedure(ctx context.Context, input []*CreateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkProcedure, error)
	CreateProcedure(ctx context.Context, input CreateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*CreateProcedure, error)
	DeleteProcedure(ctx context.Context, deleteProcedureID string, interceptors ...clientv2.RequestInterceptor) (*DeleteProcedure, error)
	GetAllProcedures(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProcedures, error)
	GetProcedureByID(ctx context.Context, procedureID string, interceptors ...clientv2.RequestInterceptor) (*GetProcedureByID, error)
	GetProcedures(ctx context.Context, where *ProcedureWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProcedures, error)
	UpdateProcedure(ctx context.Context, updateProcedureID string, input UpdateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*UpdateProcedure, error)
	GetAllProcedureHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProcedureHistories, error)
	GetProcedureHistories(ctx context.Context, where *ProcedureHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProcedureHistories, error)
	CreateBulkCSVProgram(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVProgram, error)
	CreateBulkProgram(ctx context.Context, input []*CreateProgramInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkProgram, error)
	CreateProgram(ctx context.Context, input CreateProgramInput, interceptors ...clientv2.RequestInterceptor) (*CreateProgram, error)
	DeleteProgram(ctx context.Context, deleteProgramID string, interceptors ...clientv2.RequestInterceptor) (*DeleteProgram, error)
	GetAllPrograms(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllPrograms, error)
	GetProgramByID(ctx context.Context, programID string, interceptors ...clientv2.RequestInterceptor) (*GetProgramByID, error)
	GetPrograms(ctx context.Context, where *ProgramWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetPrograms, error)
	UpdateProgram(ctx context.Context, updateProgramID string, input UpdateProgramInput, interceptors ...clientv2.RequestInterceptor) (*UpdateProgram, error)
	GetAllProgramHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProgramHistories, error)
	GetProgramHistories(ctx context.Context, where *ProgramHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProgramHistories, error)
	CreateBulkCSVProgramMembership(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVProgramMembership, error)
	CreateBulkProgramMembership(ctx context.Context, input []*CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkProgramMembership, error)
	CreateProgramMembership(ctx context.Context, input CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateProgramMembership, error)
	DeleteProgramMembership(ctx context.Context, deleteProgramMembershipID string, interceptors ...clientv2.RequestInterceptor) (*DeleteProgramMembership, error)
	GetAllProgramMemberships(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProgramMemberships, error)
	GetProgramMembershipByID(ctx context.Context, programMembershipID string, interceptors ...clientv2.RequestInterceptor) (*GetProgramMembershipByID, error)
	GetProgramMemberships(ctx context.Context, where *ProgramMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProgramMemberships, error)
	UpdateProgramMembership(ctx context.Context, updateProgramMembershipID string, input UpdateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateProgramMembership, error)
	GetAllProgramMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProgramMembershipHistories, error)
	GetProgramMembershipHistories(ctx context.Context, where *ProgramMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProgramMembershipHistories, error)
	CreateBulkCSVRisk(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVRisk, error)
	CreateBulkRisk(ctx context.Context, input []*CreateRiskInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkRisk, error)
	CreateRisk(ctx context.Context, input CreateRiskInput, interceptors ...clientv2.RequestInterceptor) (*CreateRisk, error)
	DeleteRisk(ctx context.Context, deleteRiskID string, interceptors ...clientv2.RequestInterceptor) (*DeleteRisk, error)
	GetAllRisks(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllRisks, error)
	GetRiskByID(ctx context.Context, riskID string, interceptors ...clientv2.RequestInterceptor) (*GetRiskByID, error)
	GetRisks(ctx context.Context, where *RiskWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetRisks, error)
	UpdateRisk(ctx context.Context, updateRiskID string, input UpdateRiskInput, interceptors ...clientv2.RequestInterceptor) (*UpdateRisk, error)
	GetAllRiskHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllRiskHistories, error)
	GetRiskHistories(ctx context.Context, where *RiskHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetRiskHistories, error)
	GlobalSearch(ctx context.Context, query string, interceptors ...clientv2.RequestInterceptor) (*GlobalSearch, error)
	CreateBulkCSVStandard(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVStandard, error)
	CreateBulkStandard(ctx context.Context, input []*CreateStandardInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkStandard, error)
	CreateStandard(ctx context.Context, input CreateStandardInput, interceptors ...clientv2.RequestInterceptor) (*CreateStandard, error)
	DeleteStandard(ctx context.Context, deleteStandardID string, interceptors ...clientv2.RequestInterceptor) (*DeleteStandard, error)
	GetAllStandards(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllStandards, error)
	GetStandardByID(ctx context.Context, standardID string, interceptors ...clientv2.RequestInterceptor) (*GetStandardByID, error)
	GetStandards(ctx context.Context, where *StandardWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetStandards, error)
	UpdateStandard(ctx context.Context, updateStandardID string, input UpdateStandardInput, interceptors ...clientv2.RequestInterceptor) (*UpdateStandard, error)
	GetAllStandardHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllStandardHistories, error)
	GetStandardHistories(ctx context.Context, where *StandardHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetStandardHistories, error)
	CreateBulkCSVSubcontrol(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVSubcontrol, error)
	CreateBulkSubcontrol(ctx context.Context, input []*CreateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkSubcontrol, error)
	CreateSubcontrol(ctx context.Context, input CreateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*CreateSubcontrol, error)
	DeleteSubcontrol(ctx context.Context, deleteSubcontrolID string, interceptors ...clientv2.RequestInterceptor) (*DeleteSubcontrol, error)
	GetAllSubcontrols(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllSubcontrols, error)
	GetSubcontrolByID(ctx context.Context, subcontrolID string, interceptors ...clientv2.RequestInterceptor) (*GetSubcontrolByID, error)
	GetSubcontrols(ctx context.Context, where *SubcontrolWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetSubcontrols, error)
	UpdateSubcontrol(ctx context.Context, updateSubcontrolID string, input UpdateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*UpdateSubcontrol, error)
	GetAllSubcontrolHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllSubcontrolHistories, error)
	GetSubcontrolHistories(ctx context.Context, where *SubcontrolHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetSubcontrolHistories, error)
	CreateBulkCSVSubscriber(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVSubscriber, error)
	CreateBulkSubscriber(ctx context.Context, input []*CreateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkSubscriber, error)
	CreateSubscriber(ctx context.Context, input CreateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*CreateSubscriber, error)
	DeleteSubscriber(ctx context.Context, deleteSubscriberEmail string, subscriberOrganization *string, interceptors ...clientv2.RequestInterceptor) (*DeleteSubscriber, error)
	GetAllSubscribers(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllSubscribers, error)
	GetSubscriberByEmail(ctx context.Context, email string, interceptors ...clientv2.RequestInterceptor) (*GetSubscriberByEmail, error)
	GetSubscribers(ctx context.Context, where *SubscriberWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetSubscribers, error)
	UpdateSubscriber(ctx context.Context, email string, input UpdateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*UpdateSubscriber, error)
	CreateBulkCSVTask(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVTask, error)
	CreateBulkTask(ctx context.Context, input []*CreateTaskInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkTask, error)
	CreateTask(ctx context.Context, input CreateTaskInput, interceptors ...clientv2.RequestInterceptor) (*CreateTask, error)
	DeleteTask(ctx context.Context, deleteTaskID string, interceptors ...clientv2.RequestInterceptor) (*DeleteTask, error)
	GetAllTasks(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTasks, error)
	GetTaskByID(ctx context.Context, taskID string, interceptors ...clientv2.RequestInterceptor) (*GetTaskByID, error)
	GetTasks(ctx context.Context, where *TaskWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTasks, error)
	UpdateTask(ctx context.Context, updateTaskID string, input UpdateTaskInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTask, error)
	GetAllTaskHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTaskHistories, error)
	GetTaskHistories(ctx context.Context, where *TaskHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTaskHistories, error)
	CreateBulkCSVTemplate(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVTemplate, error)
	CreateBulkTemplate(ctx context.Context, input []*CreateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkTemplate, error)
	CreateTemplate(ctx context.Context, input CreateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*CreateTemplate, error)
	GetAllTemplates(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTemplates, error)
	GetTemplateByID(ctx context.Context, getTemplateID string, interceptors ...clientv2.RequestInterceptor) (*GetTemplateByID, error)
	UpdateTemplate(ctx context.Context, updateTemplateID string, input UpdateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTemplate, error)
	GetAllTemplateHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTemplateHistories, error)
	GetTemplateHistories(ctx context.Context, where *TemplateHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTemplateHistories, error)
	CreateTFASetting(ctx context.Context, input CreateTFASettingInput, interceptors ...clientv2.RequestInterceptor) (*CreateTFASetting, error)
	GetAllTFASettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTFASettings, error)
	GetTFASetting(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetTFASetting, error)
	UpdateTFASetting(ctx context.Context, input UpdateTFASettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTFASetting, error)
	CreateUser(ctx context.Context, input CreateUserInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateUser, error)
	DeleteUser(ctx context.Context, deleteUserID string, interceptors ...clientv2.RequestInterceptor) (*DeleteUser, error)
	GetAllUsers(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUsers, error)
	GetUserByID(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor) (*GetUserByID, error)
	GetUserByIDWithOrgs(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor) (*GetUserByIDWithOrgs, error)
	UpdateUser(ctx context.Context, updateUserID string, input UpdateUserInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateUser, error)
	GetAllUserHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserHistories, error)
	GetUserHistories(ctx context.Context, where *UserHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserHistories, error)
	GetAllUserSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserSettings, error)
	GetUserSettingByID(ctx context.Context, userSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetUserSettingByID, error)
	GetUserSettings(ctx context.Context, where UserSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserSettings, error)
	UpdateUserSetting(ctx context.Context, updateUserSettingID string, input UpdateUserSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUserSetting, error)
	GetAllUserSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserSettingHistories, error)
	GetUserSettingHistories(ctx context.Context, where *UserSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserSettingHistories, error)
	GetWebhookByID(ctx context.Context, webhookID string, interceptors ...clientv2.RequestInterceptor) (*GetWebhookByID, error)
	GetAllWebhooks(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllWebhooks, error)
	CreateWebhook(ctx context.Context, input CreateWebhookInput, interceptors ...clientv2.RequestInterceptor) (*CreateWebhook, error)
	CreateBulkWebhook(ctx context.Context, input []*CreateWebhookInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkWebhook, error)
	CreateBulkCSVWebhook(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVWebhook, error)
	UpdateWebhook(ctx context.Context, updateWebhookID string, input UpdateWebhookInput, interceptors ...clientv2.RequestInterceptor) (*UpdateWebhook, error)
	DeleteWebhook(ctx context.Context, deleteWebhookID string, interceptors ...clientv2.RequestInterceptor) (*DeleteWebhook, error)
	GetAllWebhookHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllWebhookHistories, error)
	GetWebhookHistories(ctx context.Context, where *WebhookHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetWebhookHistories, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli *http.Client, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) OpenlaneGraphClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	DueDate     *time.Time             "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Priority    *string                "json:\"priority,omitempty\" graphql:\"priority\""
	Source      *string                "json:\"source,omitempty\" graphql:\"source\""
	Status      *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.Description
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.Details
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetDueDate() *time.Time {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.DueDate
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetID() string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.ID
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetName() string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.Name
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetPriority() *string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.Priority
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetSource() *string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.Source
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetStatus() *string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.Status
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.Tags
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVActionPlan_CreateBulkCSVActionPlan struct {
	ActionPlans []*CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans "json:\"actionPlans,omitempty\" graphql:\"actionPlans\""
}

func (t *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan) GetActionPlans() []*CreateBulkCSVActionPlan_CreateBulkCSVActionPlan_ActionPlans {
	if t == nil {
		t = &CreateBulkCSVActionPlan_CreateBulkCSVActionPlan{}
	}
	return t.ActionPlans
}

type CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	DueDate     *time.Time             "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Priority    *string                "json:\"priority,omitempty\" graphql:\"priority\""
	Source      *string                "json:\"source,omitempty\" graphql:\"source\""
	Status      *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.CreatedAt
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.CreatedBy
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetDescription() *string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.Description
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.Details
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetDueDate() *time.Time {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.DueDate
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetID() string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.ID
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetName() string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.Name
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetPriority() *string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.Priority
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetSource() *string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.Source
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetStatus() *string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.Status
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetTags() []string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.Tags
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans{}
	}
	return t.UpdatedBy
}

type CreateBulkActionPlan_CreateBulkActionPlan struct {
	ActionPlans []*CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans "json:\"actionPlans,omitempty\" graphql:\"actionPlans\""
}

func (t *CreateBulkActionPlan_CreateBulkActionPlan) GetActionPlans() []*CreateBulkActionPlan_CreateBulkActionPlan_ActionPlans {
	if t == nil {
		t = &CreateBulkActionPlan_CreateBulkActionPlan{}
	}
	return t.ActionPlans
}

type CreateActionPlan_CreateActionPlan_ActionPlan struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	DueDate     *time.Time             "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Priority    *string                "json:\"priority,omitempty\" graphql:\"priority\""
	Source      *string                "json:\"source,omitempty\" graphql:\"source\""
	Status      *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.CreatedAt
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetCreatedBy() *string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.CreatedBy
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetDescription() *string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.Description
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.Details
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetDueDate() *time.Time {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.DueDate
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetID() string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.ID
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetName() string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.Name
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetPriority() *string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.Priority
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetSource() *string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.Source
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetStatus() *string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.Status
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetTags() []string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.Tags
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.UpdatedAt
}
func (t *CreateActionPlan_CreateActionPlan_ActionPlan) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan_ActionPlan{}
	}
	return t.UpdatedBy
}

type CreateActionPlan_CreateActionPlan struct {
	ActionPlan CreateActionPlan_CreateActionPlan_ActionPlan "json:\"actionPlan\" graphql:\"actionPlan\""
}

func (t *CreateActionPlan_CreateActionPlan) GetActionPlan() *CreateActionPlan_CreateActionPlan_ActionPlan {
	if t == nil {
		t = &CreateActionPlan_CreateActionPlan{}
	}
	return &t.ActionPlan
}

type DeleteActionPlan_DeleteActionPlan struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteActionPlan_DeleteActionPlan) GetDeletedID() string {
	if t == nil {
		t = &DeleteActionPlan_DeleteActionPlan{}
	}
	return t.DeletedID
}

type GetAllActionPlans_ActionPlans_Edges_Node struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	DueDate     *time.Time             "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Priority    *string                "json:\"priority,omitempty\" graphql:\"priority\""
	Source      *string                "json:\"source,omitempty\" graphql:\"source\""
	Status      *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetDueDate() *time.Time {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.DueDate
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetPriority() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Priority
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllActionPlans_ActionPlans_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllActionPlans_ActionPlans_Edges struct {
	Node *GetAllActionPlans_ActionPlans_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllActionPlans_ActionPlans_Edges) GetNode() *GetAllActionPlans_ActionPlans_Edges_Node {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans_Edges{}
	}
	return t.Node
}

type GetAllActionPlans_ActionPlans struct {
	Edges []*GetAllActionPlans_ActionPlans_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllActionPlans_ActionPlans) GetEdges() []*GetAllActionPlans_ActionPlans_Edges {
	if t == nil {
		t = &GetAllActionPlans_ActionPlans{}
	}
	return t.Edges
}

type GetActionPlanByID_ActionPlan struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	DueDate     *time.Time             "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Priority    *string                "json:\"priority,omitempty\" graphql:\"priority\""
	Source      *string                "json:\"source,omitempty\" graphql:\"source\""
	Status      *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetActionPlanByID_ActionPlan) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.CreatedAt
}
func (t *GetActionPlanByID_ActionPlan) GetCreatedBy() *string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.CreatedBy
}
func (t *GetActionPlanByID_ActionPlan) GetDescription() *string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.Description
}
func (t *GetActionPlanByID_ActionPlan) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.Details
}
func (t *GetActionPlanByID_ActionPlan) GetDueDate() *time.Time {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.DueDate
}
func (t *GetActionPlanByID_ActionPlan) GetID() string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.ID
}
func (t *GetActionPlanByID_ActionPlan) GetName() string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.Name
}
func (t *GetActionPlanByID_ActionPlan) GetPriority() *string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.Priority
}
func (t *GetActionPlanByID_ActionPlan) GetSource() *string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.Source
}
func (t *GetActionPlanByID_ActionPlan) GetStatus() *string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.Status
}
func (t *GetActionPlanByID_ActionPlan) GetTags() []string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.Tags
}
func (t *GetActionPlanByID_ActionPlan) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.UpdatedAt
}
func (t *GetActionPlanByID_ActionPlan) GetUpdatedBy() *string {
	if t == nil {
		t = &GetActionPlanByID_ActionPlan{}
	}
	return t.UpdatedBy
}

type GetActionPlans_ActionPlans_Edges_Node struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	DueDate     *time.Time             "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Priority    *string                "json:\"priority,omitempty\" graphql:\"priority\""
	Source      *string                "json:\"source,omitempty\" graphql:\"source\""
	Status      *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetActionPlans_ActionPlans_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Description
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Details
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetDueDate() *time.Time {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.DueDate
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetID() string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.ID
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetName() string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Name
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetPriority() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Priority
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Source
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Status
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.Tags
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetActionPlans_ActionPlans_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetActionPlans_ActionPlans_Edges struct {
	Node *GetActionPlans_ActionPlans_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetActionPlans_ActionPlans_Edges) GetNode() *GetActionPlans_ActionPlans_Edges_Node {
	if t == nil {
		t = &GetActionPlans_ActionPlans_Edges{}
	}
	return t.Node
}

type GetActionPlans_ActionPlans struct {
	Edges []*GetActionPlans_ActionPlans_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetActionPlans_ActionPlans) GetEdges() []*GetActionPlans_ActionPlans_Edges {
	if t == nil {
		t = &GetActionPlans_ActionPlans{}
	}
	return t.Edges
}

type UpdateActionPlan_UpdateActionPlan_ActionPlan struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	DueDate     *time.Time             "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Priority    *string                "json:\"priority,omitempty\" graphql:\"priority\""
	Source      *string                "json:\"source,omitempty\" graphql:\"source\""
	Status      *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.CreatedAt
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.CreatedBy
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetDescription() *string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.Description
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetDetails() map[string]interface{} {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.Details
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetDueDate() *time.Time {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.DueDate
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetID() string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.ID
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetName() string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.Name
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetPriority() *string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.Priority
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetSource() *string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.Source
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetStatus() *string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.Status
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetTags() []string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.Tags
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.UpdatedAt
}
func (t *UpdateActionPlan_UpdateActionPlan_ActionPlan) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan_ActionPlan{}
	}
	return t.UpdatedBy
}

type UpdateActionPlan_UpdateActionPlan struct {
	ActionPlan UpdateActionPlan_UpdateActionPlan_ActionPlan "json:\"actionPlan\" graphql:\"actionPlan\""
}

func (t *UpdateActionPlan_UpdateActionPlan) GetActionPlan() *UpdateActionPlan_UpdateActionPlan_ActionPlan {
	if t == nil {
		t = &UpdateActionPlan_UpdateActionPlan{}
	}
	return &t.ActionPlan
}

type GetAllActionPlanHistories_ActionPlanHistories_Edges_Node struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	DueDate     *time.Time             "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	HistoryTime time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Operation   history.OpType         "json:\"operation\" graphql:\"operation\""
	Priority    *string                "json:\"priority,omitempty\" graphql:\"priority\""
	Ref         *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Source      *string                "json:\"source,omitempty\" graphql:\"source\""
	Status      *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetDueDate() *time.Time {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.DueDate
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetPriority() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Priority
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllActionPlanHistories_ActionPlanHistories_Edges struct {
	Node *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllActionPlanHistories_ActionPlanHistories_Edges) GetNode() *GetAllActionPlanHistories_ActionPlanHistories_Edges_Node {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories_Edges{}
	}
	return t.Node
}

type GetAllActionPlanHistories_ActionPlanHistories struct {
	Edges []*GetAllActionPlanHistories_ActionPlanHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllActionPlanHistories_ActionPlanHistories) GetEdges() []*GetAllActionPlanHistories_ActionPlanHistories_Edges {
	if t == nil {
		t = &GetAllActionPlanHistories_ActionPlanHistories{}
	}
	return t.Edges
}

type GetActionPlanHistories_ActionPlanHistories_Edges_Node struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	DueDate     *time.Time             "json:\"dueDate,omitempty\" graphql:\"dueDate\""
	HistoryTime time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Operation   history.OpType         "json:\"operation\" graphql:\"operation\""
	Priority    *string                "json:\"priority,omitempty\" graphql:\"priority\""
	Ref         *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Source      *string                "json:\"source,omitempty\" graphql:\"source\""
	Status      *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetDueDate() *time.Time {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.DueDate
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetPriority() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Priority
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetActionPlanHistories_ActionPlanHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetActionPlanHistories_ActionPlanHistories_Edges struct {
	Node *GetActionPlanHistories_ActionPlanHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetActionPlanHistories_ActionPlanHistories_Edges) GetNode() *GetActionPlanHistories_ActionPlanHistories_Edges_Node {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories_Edges{}
	}
	return t.Node
}

type GetActionPlanHistories_ActionPlanHistories struct {
	Edges []*GetActionPlanHistories_ActionPlanHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetActionPlanHistories_ActionPlanHistories) GetEdges() []*GetActionPlanHistories_ActionPlanHistories_Edges {
	if t == nil {
		t = &GetActionPlanHistories_ActionPlanHistories{}
	}
	return t.Edges
}

type AdminSearch_AdminSearch_Nodes_APITokenSearchResult_APITokens struct {
	DeletedBy *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID        string   "json:\"id\" graphql:\"id\""
	Tags      []string "json:\"tags,omitempty\" graphql:\"tags\""
	OwnerID   *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Name      string   "json:\"name\" graphql:\"name\""
	Scopes    []string "json:\"scopes,omitempty\" graphql:\"scopes\""
}

func (t *AdminSearch_AdminSearch_Nodes_APITokenSearchResult_APITokens) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_APITokenSearchResult_APITokens{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_APITokenSearchResult_APITokens) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_APITokenSearchResult_APITokens{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_APITokenSearchResult_APITokens) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_APITokenSearchResult_APITokens{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_APITokenSearchResult_APITokens) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_APITokenSearchResult_APITokens{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Nodes_APITokenSearchResult_APITokens) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_APITokenSearchResult_APITokens{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Nodes_APITokenSearchResult_APITokens) GetScopes() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_APITokenSearchResult_APITokens{}
	}
	return t.Scopes
}

type AdminSearch_AdminSearch_Nodes_APITokenSearchResult struct {
	APITokens []*AdminSearch_AdminSearch_Nodes_APITokenSearchResult_APITokens "json:\"apiTokens,omitempty\" graphql:\"apiTokens\""
}

func (t *AdminSearch_AdminSearch_Nodes_APITokenSearchResult) GetAPITokens() []*AdminSearch_AdminSearch_Nodes_APITokenSearchResult_APITokens {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_APITokenSearchResult{}
	}
	return t.APITokens
}

type AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult_ActionPlans struct {
	DeletedBy   *string                "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Status      *string                "json:\"status,omitempty\" graphql:\"status\""
	Priority    *string                "json:\"priority,omitempty\" graphql:\"priority\""
	Source      *string                "json:\"source,omitempty\" graphql:\"source\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
}

func (t *AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult_ActionPlans) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult_ActionPlans{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult_ActionPlans) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult_ActionPlans{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult_ActionPlans) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult_ActionPlans{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult_ActionPlans) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult_ActionPlans{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult_ActionPlans) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult_ActionPlans{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult_ActionPlans) GetStatus() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult_ActionPlans{}
	}
	return t.Status
}
func (t *AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult_ActionPlans) GetPriority() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult_ActionPlans{}
	}
	return t.Priority
}
func (t *AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult_ActionPlans) GetSource() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult_ActionPlans{}
	}
	return t.Source
}
func (t *AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult_ActionPlans) GetDetails() map[string]interface{} {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult_ActionPlans{}
	}
	return t.Details
}

type AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult struct {
	ActionPlans []*AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult_ActionPlans "json:\"actionPlans,omitempty\" graphql:\"actionPlans\""
}

func (t *AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult) GetActionPlans() []*AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult_ActionPlans {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult{}
	}
	return t.ActionPlans
}

type AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts struct {
	ID          string   "json:\"id\" graphql:\"id\""
	DeletedBy   *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
	OwnerID     *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	FullName    string   "json:\"fullName\" graphql:\"fullName\""
	Title       *string  "json:\"title,omitempty\" graphql:\"title\""
	Company     *string  "json:\"company,omitempty\" graphql:\"company\""
	Email       *string  "json:\"email,omitempty\" graphql:\"email\""
	PhoneNumber *string  "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Address     *string  "json:\"address,omitempty\" graphql:\"address\""
}

func (t *AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts) GetFullName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts{}
	}
	return t.FullName
}
func (t *AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts) GetTitle() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts{}
	}
	return t.Title
}
func (t *AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts) GetCompany() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts{}
	}
	return t.Company
}
func (t *AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts) GetEmail() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts{}
	}
	return t.Email
}
func (t *AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts) GetPhoneNumber() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts{}
	}
	return t.PhoneNumber
}
func (t *AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts) GetAddress() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts{}
	}
	return t.Address
}

type AdminSearch_AdminSearch_Nodes_ContactSearchResult struct {
	Contacts []*AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts "json:\"contacts,omitempty\" graphql:\"contacts\""
}

func (t *AdminSearch_AdminSearch_Nodes_ContactSearchResult) GetContacts() []*AdminSearch_AdminSearch_Nodes_ContactSearchResult_Contacts {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ContactSearchResult{}
	}
	return t.Contacts
}

type AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls struct {
	DeletedBy        *string                "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID               string                 "json:\"id\" graphql:\"id\""
	Tags             []string               "json:\"tags,omitempty\" graphql:\"tags\""
	Name             string                 "json:\"name\" graphql:\"name\""
	Description      *string                "json:\"description,omitempty\" graphql:\"description\""
	Status           *string                "json:\"status,omitempty\" graphql:\"status\""
	ControlType      *string                "json:\"controlType,omitempty\" graphql:\"controlType\""
	Version          *string                "json:\"version,omitempty\" graphql:\"version\""
	ControlNumber    *string                "json:\"controlNumber,omitempty\" graphql:\"controlNumber\""
	Family           *string                "json:\"family,omitempty\" graphql:\"family\""
	Class            *string                "json:\"class,omitempty\" graphql:\"class\""
	Source           *string                "json:\"source,omitempty\" graphql:\"source\""
	Satisfies        *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	MappedFrameworks *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Details          map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
}

func (t *AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls) GetStatus() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls{}
	}
	return t.Status
}
func (t *AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls) GetControlType() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls{}
	}
	return t.ControlType
}
func (t *AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls) GetVersion() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls{}
	}
	return t.Version
}
func (t *AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls) GetControlNumber() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls{}
	}
	return t.ControlNumber
}
func (t *AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls) GetFamily() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls{}
	}
	return t.Family
}
func (t *AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls) GetClass() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls{}
	}
	return t.Class
}
func (t *AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls) GetSource() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls{}
	}
	return t.Source
}
func (t *AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls) GetSatisfies() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls{}
	}
	return t.Satisfies
}
func (t *AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls) GetMappedFrameworks() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls{}
	}
	return t.MappedFrameworks
}
func (t *AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls) GetDetails() map[string]interface{} {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls{}
	}
	return t.Details
}

type AdminSearch_AdminSearch_Nodes_ControlSearchResult struct {
	Controls []*AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls "json:\"controls,omitempty\" graphql:\"controls\""
}

func (t *AdminSearch_AdminSearch_Nodes_ControlSearchResult) GetControls() []*AdminSearch_AdminSearch_Nodes_ControlSearchResult_Controls {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlSearchResult{}
	}
	return t.Controls
}

type AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives struct {
	DeletedBy            *string                "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID                   string                 "json:\"id\" graphql:\"id\""
	Tags                 []string               "json:\"tags,omitempty\" graphql:\"tags\""
	Name                 string                 "json:\"name\" graphql:\"name\""
	Description          *string                "json:\"description,omitempty\" graphql:\"description\""
	Status               *string                "json:\"status,omitempty\" graphql:\"status\""
	ControlObjectiveType *string                "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	Version              *string                "json:\"version,omitempty\" graphql:\"version\""
	ControlNumber        *string                "json:\"controlNumber,omitempty\" graphql:\"controlNumber\""
	Family               *string                "json:\"family,omitempty\" graphql:\"family\""
	Class                *string                "json:\"class,omitempty\" graphql:\"class\""
	Source               *string                "json:\"source,omitempty\" graphql:\"source\""
	MappedFrameworks     *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Details              map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
}

func (t *AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives) GetStatus() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives{}
	}
	return t.Status
}
func (t *AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives) GetControlObjectiveType() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives{}
	}
	return t.ControlObjectiveType
}
func (t *AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives) GetVersion() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives{}
	}
	return t.Version
}
func (t *AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives) GetControlNumber() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives{}
	}
	return t.ControlNumber
}
func (t *AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives) GetFamily() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives{}
	}
	return t.Family
}
func (t *AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives) GetClass() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives{}
	}
	return t.Class
}
func (t *AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives) GetSource() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives{}
	}
	return t.Source
}
func (t *AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives) GetMappedFrameworks() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives{}
	}
	return t.MappedFrameworks
}
func (t *AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives) GetDetails() map[string]interface{} {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives{}
	}
	return t.Details
}

type AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult struct {
	ControlObjectives []*AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives "json:\"controlObjectives,omitempty\" graphql:\"controlObjectives\""
}

func (t *AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult) GetControlObjectives() []*AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult_ControlObjectives {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult{}
	}
	return t.ControlObjectives
}

type AdminSearch_AdminSearch_Nodes_DocumentDataSearchResult_DocumentData struct {
	ID         string          "json:\"id\" graphql:\"id\""
	Tags       []string        "json:\"tags,omitempty\" graphql:\"tags\""
	DeletedBy  *string         "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	OwnerID    *string         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	TemplateID string          "json:\"templateID\" graphql:\"templateID\""
	Data       json.RawMessage "json:\"data\" graphql:\"data\""
}

func (t *AdminSearch_AdminSearch_Nodes_DocumentDataSearchResult_DocumentData) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_DocumentDataSearchResult_DocumentData{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_DocumentDataSearchResult_DocumentData) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_DocumentDataSearchResult_DocumentData{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_DocumentDataSearchResult_DocumentData) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_DocumentDataSearchResult_DocumentData{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_DocumentDataSearchResult_DocumentData) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_DocumentDataSearchResult_DocumentData{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Nodes_DocumentDataSearchResult_DocumentData) GetTemplateID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_DocumentDataSearchResult_DocumentData{}
	}
	return t.TemplateID
}
func (t *AdminSearch_AdminSearch_Nodes_DocumentDataSearchResult_DocumentData) GetData() *json.RawMessage {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_DocumentDataSearchResult_DocumentData{}
	}
	return &t.Data
}

type AdminSearch_AdminSearch_Nodes_DocumentDataSearchResult struct {
	DocumentData []*AdminSearch_AdminSearch_Nodes_DocumentDataSearchResult_DocumentData "json:\"documentData,omitempty\" graphql:\"documentData\""
}

func (t *AdminSearch_AdminSearch_Nodes_DocumentDataSearchResult) GetDocumentData() []*AdminSearch_AdminSearch_Nodes_DocumentDataSearchResult_DocumentData {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_DocumentDataSearchResult{}
	}
	return t.DocumentData
}

type AdminSearch_AdminSearch_Nodes_EntitlementSearchResult_Entitlements struct {
	ID                     string   "json:\"id\" graphql:\"id\""
	Tags                   []string "json:\"tags,omitempty\" graphql:\"tags\""
	DeletedBy              *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	OwnerID                *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PlanID                 string   "json:\"planID\" graphql:\"planID\""
	OrganizationID         string   "json:\"organizationID\" graphql:\"organizationID\""
	ExternalCustomerID     *string  "json:\"externalCustomerID,omitempty\" graphql:\"externalCustomerID\""
	ExternalSubscriptionID *string  "json:\"externalSubscriptionID,omitempty\" graphql:\"externalSubscriptionID\""
}

func (t *AdminSearch_AdminSearch_Nodes_EntitlementSearchResult_Entitlements) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementSearchResult_Entitlements{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_EntitlementSearchResult_Entitlements) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementSearchResult_Entitlements{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_EntitlementSearchResult_Entitlements) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementSearchResult_Entitlements{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_EntitlementSearchResult_Entitlements) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementSearchResult_Entitlements{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Nodes_EntitlementSearchResult_Entitlements) GetPlanID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementSearchResult_Entitlements{}
	}
	return t.PlanID
}
func (t *AdminSearch_AdminSearch_Nodes_EntitlementSearchResult_Entitlements) GetOrganizationID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementSearchResult_Entitlements{}
	}
	return t.OrganizationID
}
func (t *AdminSearch_AdminSearch_Nodes_EntitlementSearchResult_Entitlements) GetExternalCustomerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementSearchResult_Entitlements{}
	}
	return t.ExternalCustomerID
}
func (t *AdminSearch_AdminSearch_Nodes_EntitlementSearchResult_Entitlements) GetExternalSubscriptionID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementSearchResult_Entitlements{}
	}
	return t.ExternalSubscriptionID
}

type AdminSearch_AdminSearch_Nodes_EntitlementSearchResult struct {
	Entitlements []*AdminSearch_AdminSearch_Nodes_EntitlementSearchResult_Entitlements "json:\"entitlements,omitempty\" graphql:\"entitlements\""
}

func (t *AdminSearch_AdminSearch_Nodes_EntitlementSearchResult) GetEntitlements() []*AdminSearch_AdminSearch_Nodes_EntitlementSearchResult_Entitlements {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementSearchResult{}
	}
	return t.Entitlements
}

type AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult_EntitlementPlans struct {
	ID          string                 "json:\"id\" graphql:\"id\""
	DeletedBy   *string                "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	OwnerID     *string                "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	DisplayName *string                "json:\"displayName,omitempty\" graphql:\"displayName\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Version     string                 "json:\"version\" graphql:\"version\""
	Metadata    map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
}

func (t *AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult_EntitlementPlans) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult_EntitlementPlans{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult_EntitlementPlans) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult_EntitlementPlans{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult_EntitlementPlans) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult_EntitlementPlans{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult_EntitlementPlans) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult_EntitlementPlans{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult_EntitlementPlans) GetDisplayName() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult_EntitlementPlans{}
	}
	return t.DisplayName
}
func (t *AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult_EntitlementPlans) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult_EntitlementPlans{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult_EntitlementPlans) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult_EntitlementPlans{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult_EntitlementPlans) GetVersion() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult_EntitlementPlans{}
	}
	return t.Version
}
func (t *AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult_EntitlementPlans) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult_EntitlementPlans{}
	}
	return t.Metadata
}

type AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult struct {
	EntitlementPlans []*AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult_EntitlementPlans "json:\"entitlementPlans,omitempty\" graphql:\"entitlementPlans\""
}

func (t *AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult) GetEntitlementPlans() []*AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult_EntitlementPlans {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult{}
	}
	return t.EntitlementPlans
}

type AdminSearch_AdminSearch_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures struct {
	ID        string                 "json:\"id\" graphql:\"id\""
	DeletedBy *string                "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Tags      []string               "json:\"tags,omitempty\" graphql:\"tags\""
	OwnerID   *string                "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Metadata  map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	PlanID    string                 "json:\"planID\" graphql:\"planID\""
	FeatureID string                 "json:\"featureID\" graphql:\"featureID\""
}

func (t *AdminSearch_AdminSearch_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures{}
	}
	return t.Metadata
}
func (t *AdminSearch_AdminSearch_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures) GetPlanID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures{}
	}
	return t.PlanID
}
func (t *AdminSearch_AdminSearch_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures) GetFeatureID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures{}
	}
	return t.FeatureID
}

type AdminSearch_AdminSearch_Nodes_EntitlementPlanFeatureSearchResult struct {
	EntitlementPlanFeatures []*AdminSearch_AdminSearch_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures "json:\"entitlementPlanFeatures,omitempty\" graphql:\"entitlementPlanFeatures\""
}

func (t *AdminSearch_AdminSearch_Nodes_EntitlementPlanFeatureSearchResult) GetEntitlementPlanFeatures() []*AdminSearch_AdminSearch_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitlementPlanFeatureSearchResult{}
	}
	return t.EntitlementPlanFeatures
}

type AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities struct {
	ID           string   "json:\"id\" graphql:\"id\""
	DeletedBy    *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Tags         []string "json:\"tags,omitempty\" graphql:\"tags\""
	OwnerID      *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Name         *string  "json:\"name,omitempty\" graphql:\"name\""
	DisplayName  *string  "json:\"displayName,omitempty\" graphql:\"displayName\""
	Description  *string  "json:\"description,omitempty\" graphql:\"description\""
	Domains      []string "json:\"domains,omitempty\" graphql:\"domains\""
	EntityTypeID *string  "json:\"entityTypeID,omitempty\" graphql:\"entityTypeID\""
	Status       *string  "json:\"status,omitempty\" graphql:\"status\""
}

func (t *AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities) GetName() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities) GetDisplayName() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities{}
	}
	return t.DisplayName
}
func (t *AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities) GetDomains() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities{}
	}
	return t.Domains
}
func (t *AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities) GetEntityTypeID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities{}
	}
	return t.EntityTypeID
}
func (t *AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities) GetStatus() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities{}
	}
	return t.Status
}

type AdminSearch_AdminSearch_Nodes_EntitySearchResult struct {
	Entities []*AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities "json:\"entities,omitempty\" graphql:\"entities\""
}

func (t *AdminSearch_AdminSearch_Nodes_EntitySearchResult) GetEntities() []*AdminSearch_AdminSearch_Nodes_EntitySearchResult_Entities {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntitySearchResult{}
	}
	return t.Entities
}

type AdminSearch_AdminSearch_Nodes_EntityTypeSearchResult_EntityTypes struct {
	ID        string   "json:\"id\" graphql:\"id\""
	DeletedBy *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Tags      []string "json:\"tags,omitempty\" graphql:\"tags\""
	OwnerID   *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Name      string   "json:\"name\" graphql:\"name\""
}

func (t *AdminSearch_AdminSearch_Nodes_EntityTypeSearchResult_EntityTypes) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntityTypeSearchResult_EntityTypes{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_EntityTypeSearchResult_EntityTypes) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntityTypeSearchResult_EntityTypes{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_EntityTypeSearchResult_EntityTypes) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntityTypeSearchResult_EntityTypes{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_EntityTypeSearchResult_EntityTypes) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntityTypeSearchResult_EntityTypes{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Nodes_EntityTypeSearchResult_EntityTypes) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntityTypeSearchResult_EntityTypes{}
	}
	return t.Name
}

type AdminSearch_AdminSearch_Nodes_EntityTypeSearchResult struct {
	EntityTypes []*AdminSearch_AdminSearch_Nodes_EntityTypeSearchResult_EntityTypes "json:\"entityTypes,omitempty\" graphql:\"entityTypes\""
}

func (t *AdminSearch_AdminSearch_Nodes_EntityTypeSearchResult) GetEntityTypes() []*AdminSearch_AdminSearch_Nodes_EntityTypeSearchResult_EntityTypes {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EntityTypeSearchResult{}
	}
	return t.EntityTypes
}

type AdminSearch_AdminSearch_Nodes_EventSearchResult_Events struct {
	ID            string                 "json:\"id\" graphql:\"id\""
	Tags          []string               "json:\"tags,omitempty\" graphql:\"tags\""
	EventID       *string                "json:\"eventID,omitempty\" graphql:\"eventID\""
	CorrelationID *string                "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	EventType     string                 "json:\"eventType\" graphql:\"eventType\""
	Metadata      map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
}

func (t *AdminSearch_AdminSearch_Nodes_EventSearchResult_Events) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EventSearchResult_Events{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_EventSearchResult_Events) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EventSearchResult_Events{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_EventSearchResult_Events) GetEventID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EventSearchResult_Events{}
	}
	return t.EventID
}
func (t *AdminSearch_AdminSearch_Nodes_EventSearchResult_Events) GetCorrelationID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EventSearchResult_Events{}
	}
	return t.CorrelationID
}
func (t *AdminSearch_AdminSearch_Nodes_EventSearchResult_Events) GetEventType() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EventSearchResult_Events{}
	}
	return t.EventType
}
func (t *AdminSearch_AdminSearch_Nodes_EventSearchResult_Events) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EventSearchResult_Events{}
	}
	return t.Metadata
}

type AdminSearch_AdminSearch_Nodes_EventSearchResult struct {
	Events []*AdminSearch_AdminSearch_Nodes_EventSearchResult_Events "json:\"events,omitempty\" graphql:\"events\""
}

func (t *AdminSearch_AdminSearch_Nodes_EventSearchResult) GetEvents() []*AdminSearch_AdminSearch_Nodes_EventSearchResult_Events {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_EventSearchResult{}
	}
	return t.Events
}

type AdminSearch_AdminSearch_Nodes_FeatureSearchResult_Features struct {
	DeletedBy   *string                "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	OwnerID     *string                "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Name        string                 "json:\"name\" graphql:\"name\""
	DisplayName *string                "json:\"displayName,omitempty\" graphql:\"displayName\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Metadata    map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
}

func (t *AdminSearch_AdminSearch_Nodes_FeatureSearchResult_Features) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FeatureSearchResult_Features{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_FeatureSearchResult_Features) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FeatureSearchResult_Features{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_FeatureSearchResult_Features) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FeatureSearchResult_Features{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_FeatureSearchResult_Features) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FeatureSearchResult_Features{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Nodes_FeatureSearchResult_Features) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FeatureSearchResult_Features{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Nodes_FeatureSearchResult_Features) GetDisplayName() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FeatureSearchResult_Features{}
	}
	return t.DisplayName
}
func (t *AdminSearch_AdminSearch_Nodes_FeatureSearchResult_Features) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FeatureSearchResult_Features{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Nodes_FeatureSearchResult_Features) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FeatureSearchResult_Features{}
	}
	return t.Metadata
}

type AdminSearch_AdminSearch_Nodes_FeatureSearchResult struct {
	Features []*AdminSearch_AdminSearch_Nodes_FeatureSearchResult_Features "json:\"features,omitempty\" graphql:\"features\""
}

func (t *AdminSearch_AdminSearch_Nodes_FeatureSearchResult) GetFeatures() []*AdminSearch_AdminSearch_Nodes_FeatureSearchResult_Features {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FeatureSearchResult{}
	}
	return t.Features
}

type AdminSearch_AdminSearch_Nodes_FileSearchResult_Files struct {
	DeletedBy             *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID                    string   "json:\"id\" graphql:\"id\""
	Tags                  []string "json:\"tags,omitempty\" graphql:\"tags\""
	ProvidedFileName      string   "json:\"providedFileName\" graphql:\"providedFileName\""
	ProvidedFileExtension string   "json:\"providedFileExtension\" graphql:\"providedFileExtension\""
	DetectedMimeType      *string  "json:\"detectedMimeType,omitempty\" graphql:\"detectedMimeType\""
	Md5Hash               *string  "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	DetectedContentType   string   "json:\"detectedContentType\" graphql:\"detectedContentType\""
	StoreKey              *string  "json:\"storeKey,omitempty\" graphql:\"storeKey\""
	CategoryType          *string  "json:\"categoryType,omitempty\" graphql:\"categoryType\""
	URI                   *string  "json:\"uri,omitempty\" graphql:\"uri\""
	StorageScheme         *string  "json:\"storageScheme,omitempty\" graphql:\"storageScheme\""
	StorageVolume         *string  "json:\"storageVolume,omitempty\" graphql:\"storageVolume\""
	StoragePath           *string  "json:\"storagePath,omitempty\" graphql:\"storagePath\""
}

func (t *AdminSearch_AdminSearch_Nodes_FileSearchResult_Files) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FileSearchResult_Files{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_FileSearchResult_Files) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FileSearchResult_Files{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_FileSearchResult_Files) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FileSearchResult_Files{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_FileSearchResult_Files) GetProvidedFileName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FileSearchResult_Files{}
	}
	return t.ProvidedFileName
}
func (t *AdminSearch_AdminSearch_Nodes_FileSearchResult_Files) GetProvidedFileExtension() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FileSearchResult_Files{}
	}
	return t.ProvidedFileExtension
}
func (t *AdminSearch_AdminSearch_Nodes_FileSearchResult_Files) GetDetectedMimeType() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FileSearchResult_Files{}
	}
	return t.DetectedMimeType
}
func (t *AdminSearch_AdminSearch_Nodes_FileSearchResult_Files) GetMd5Hash() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FileSearchResult_Files{}
	}
	return t.Md5Hash
}
func (t *AdminSearch_AdminSearch_Nodes_FileSearchResult_Files) GetDetectedContentType() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FileSearchResult_Files{}
	}
	return t.DetectedContentType
}
func (t *AdminSearch_AdminSearch_Nodes_FileSearchResult_Files) GetStoreKey() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FileSearchResult_Files{}
	}
	return t.StoreKey
}
func (t *AdminSearch_AdminSearch_Nodes_FileSearchResult_Files) GetCategoryType() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FileSearchResult_Files{}
	}
	return t.CategoryType
}
func (t *AdminSearch_AdminSearch_Nodes_FileSearchResult_Files) GetURI() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FileSearchResult_Files{}
	}
	return t.URI
}
func (t *AdminSearch_AdminSearch_Nodes_FileSearchResult_Files) GetStorageScheme() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FileSearchResult_Files{}
	}
	return t.StorageScheme
}
func (t *AdminSearch_AdminSearch_Nodes_FileSearchResult_Files) GetStorageVolume() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FileSearchResult_Files{}
	}
	return t.StorageVolume
}
func (t *AdminSearch_AdminSearch_Nodes_FileSearchResult_Files) GetStoragePath() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FileSearchResult_Files{}
	}
	return t.StoragePath
}

type AdminSearch_AdminSearch_Nodes_FileSearchResult struct {
	Files []*AdminSearch_AdminSearch_Nodes_FileSearchResult_Files "json:\"files,omitempty\" graphql:\"files\""
}

func (t *AdminSearch_AdminSearch_Nodes_FileSearchResult) GetFiles() []*AdminSearch_AdminSearch_Nodes_FileSearchResult_Files {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_FileSearchResult{}
	}
	return t.Files
}

type AdminSearch_AdminSearch_Nodes_GroupSearchResult_Groups struct {
	DeletedBy   *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID          string   "json:\"id\" graphql:\"id\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
	OwnerID     *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Name        string   "json:\"name\" graphql:\"name\""
	DisplayName string   "json:\"displayName\" graphql:\"displayName\""
}

func (t *AdminSearch_AdminSearch_Nodes_GroupSearchResult_Groups) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_GroupSearchResult_Groups{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_GroupSearchResult_Groups) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_GroupSearchResult_Groups{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_GroupSearchResult_Groups) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_GroupSearchResult_Groups{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_GroupSearchResult_Groups) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_GroupSearchResult_Groups{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Nodes_GroupSearchResult_Groups) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_GroupSearchResult_Groups{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Nodes_GroupSearchResult_Groups) GetDisplayName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_GroupSearchResult_Groups{}
	}
	return t.DisplayName
}

type AdminSearch_AdminSearch_Nodes_GroupSearchResult struct {
	Groups []*AdminSearch_AdminSearch_Nodes_GroupSearchResult_Groups "json:\"groups,omitempty\" graphql:\"groups\""
}

func (t *AdminSearch_AdminSearch_Nodes_GroupSearchResult) GetGroups() []*AdminSearch_AdminSearch_Nodes_GroupSearchResult_Groups {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_GroupSearchResult{}
	}
	return t.Groups
}

type AdminSearch_AdminSearch_Nodes_GroupSettingSearchResult_GroupSettings struct {
	ID        string   "json:\"id\" graphql:\"id\""
	Tags      []string "json:\"tags,omitempty\" graphql:\"tags\""
	DeletedBy *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	GroupID   *string  "json:\"groupID,omitempty\" graphql:\"groupID\""
}

func (t *AdminSearch_AdminSearch_Nodes_GroupSettingSearchResult_GroupSettings) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_GroupSettingSearchResult_GroupSettings{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_GroupSettingSearchResult_GroupSettings) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_GroupSettingSearchResult_GroupSettings{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_GroupSettingSearchResult_GroupSettings) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_GroupSettingSearchResult_GroupSettings{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_GroupSettingSearchResult_GroupSettings) GetGroupID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_GroupSettingSearchResult_GroupSettings{}
	}
	return t.GroupID
}

type AdminSearch_AdminSearch_Nodes_GroupSettingSearchResult struct {
	GroupSettings []*AdminSearch_AdminSearch_Nodes_GroupSettingSearchResult_GroupSettings "json:\"groupSettings,omitempty\" graphql:\"groupSettings\""
}

func (t *AdminSearch_AdminSearch_Nodes_GroupSettingSearchResult) GetGroupSettings() []*AdminSearch_AdminSearch_Nodes_GroupSettingSearchResult_GroupSettings {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_GroupSettingSearchResult{}
	}
	return t.GroupSettings
}

type AdminSearch_AdminSearch_Nodes_IntegrationSearchResult_Integrations struct {
	ID        string   "json:\"id\" graphql:\"id\""
	Tags      []string "json:\"tags,omitempty\" graphql:\"tags\""
	DeletedBy *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	OwnerID   *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Name      string   "json:\"name\" graphql:\"name\""
	Kind      *string  "json:\"kind,omitempty\" graphql:\"kind\""
}

func (t *AdminSearch_AdminSearch_Nodes_IntegrationSearchResult_Integrations) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_IntegrationSearchResult_Integrations{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_IntegrationSearchResult_Integrations) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_IntegrationSearchResult_Integrations{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_IntegrationSearchResult_Integrations) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_IntegrationSearchResult_Integrations{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_IntegrationSearchResult_Integrations) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_IntegrationSearchResult_Integrations{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Nodes_IntegrationSearchResult_Integrations) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_IntegrationSearchResult_Integrations{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Nodes_IntegrationSearchResult_Integrations) GetKind() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_IntegrationSearchResult_Integrations{}
	}
	return t.Kind
}

type AdminSearch_AdminSearch_Nodes_IntegrationSearchResult struct {
	Integrations []*AdminSearch_AdminSearch_Nodes_IntegrationSearchResult_Integrations "json:\"integrations,omitempty\" graphql:\"integrations\""
}

func (t *AdminSearch_AdminSearch_Nodes_IntegrationSearchResult) GetIntegrations() []*AdminSearch_AdminSearch_Nodes_IntegrationSearchResult_Integrations {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_IntegrationSearchResult{}
	}
	return t.Integrations
}

type AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies struct {
	DeletedBy       *string                "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	Name            string                 "json:\"name\" graphql:\"name\""
	Description     string                 "json:\"description\" graphql:\"description\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	PolicyType      *string                "json:\"policyType,omitempty\" graphql:\"policyType\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
}

func (t *AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies) GetDescription() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies) GetStatus() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies{}
	}
	return t.Status
}
func (t *AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies) GetPolicyType() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies{}
	}
	return t.PolicyType
}
func (t *AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies) GetVersion() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies{}
	}
	return t.Version
}
func (t *AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies) GetPurposeAndScope() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies{}
	}
	return t.PurposeAndScope
}
func (t *AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies) GetBackground() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies{}
	}
	return t.Background
}
func (t *AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies) GetDetails() map[string]interface{} {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies{}
	}
	return t.Details
}

type AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult struct {
	InternalPolicies []*AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies "json:\"internalPolicies,omitempty\" graphql:\"internalPolicies\""
}

func (t *AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult) GetInternalPolicies() []*AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult_InternalPolicies {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult{}
	}
	return t.InternalPolicies
}

type AdminSearch_AdminSearch_Nodes_NarrativeSearchResult_Narratives struct {
	DeletedBy   *string                "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Satisfies   *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
}

func (t *AdminSearch_AdminSearch_Nodes_NarrativeSearchResult_Narratives) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_NarrativeSearchResult_Narratives{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_NarrativeSearchResult_Narratives) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_NarrativeSearchResult_Narratives{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_NarrativeSearchResult_Narratives) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_NarrativeSearchResult_Narratives{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_NarrativeSearchResult_Narratives) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_NarrativeSearchResult_Narratives{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Nodes_NarrativeSearchResult_Narratives) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_NarrativeSearchResult_Narratives{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Nodes_NarrativeSearchResult_Narratives) GetSatisfies() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_NarrativeSearchResult_Narratives{}
	}
	return t.Satisfies
}
func (t *AdminSearch_AdminSearch_Nodes_NarrativeSearchResult_Narratives) GetDetails() map[string]interface{} {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_NarrativeSearchResult_Narratives{}
	}
	return t.Details
}

type AdminSearch_AdminSearch_Nodes_NarrativeSearchResult struct {
	Narratives []*AdminSearch_AdminSearch_Nodes_NarrativeSearchResult_Narratives "json:\"narratives,omitempty\" graphql:\"narratives\""
}

func (t *AdminSearch_AdminSearch_Nodes_NarrativeSearchResult) GetNarratives() []*AdminSearch_AdminSearch_Nodes_NarrativeSearchResult_Narratives {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_NarrativeSearchResult{}
	}
	return t.Narratives
}

type AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders struct {
	ID           string   "json:\"id\" graphql:\"id\""
	Tags         []string "json:\"tags,omitempty\" graphql:\"tags\""
	DeletedBy    *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	OwnerID      *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Name         string   "json:\"name\" graphql:\"name\""
	ClientID     string   "json:\"clientID\" graphql:\"clientID\""
	ClientSecret string   "json:\"clientSecret\" graphql:\"clientSecret\""
	RedirectURL  string   "json:\"redirectURL\" graphql:\"redirectURL\""
	Scopes       string   "json:\"scopes\" graphql:\"scopes\""
	AuthURL      string   "json:\"authURL\" graphql:\"authURL\""
	TokenURL     string   "json:\"tokenURL\" graphql:\"tokenURL\""
	InfoURL      string   "json:\"infoURL\" graphql:\"infoURL\""
}

func (t *AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders) GetClientID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders{}
	}
	return t.ClientID
}
func (t *AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders) GetClientSecret() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders{}
	}
	return t.ClientSecret
}
func (t *AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders) GetRedirectURL() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders{}
	}
	return t.RedirectURL
}
func (t *AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders) GetScopes() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders{}
	}
	return t.Scopes
}
func (t *AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders) GetAuthURL() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders{}
	}
	return t.AuthURL
}
func (t *AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders) GetTokenURL() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders{}
	}
	return t.TokenURL
}
func (t *AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders) GetInfoURL() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders{}
	}
	return t.InfoURL
}

type AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult struct {
	OauthProviders []*AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders "json:\"oauthProviders,omitempty\" graphql:\"oauthProviders\""
}

func (t *AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult) GetOauthProviders() []*AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult_OauthProviders {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult{}
	}
	return t.OauthProviders
}

type AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens struct {
	ID                      string   "json:\"id\" graphql:\"id\""
	Tags                    []string "json:\"tags,omitempty\" graphql:\"tags\""
	ClientID                string   "json:\"clientID\" graphql:\"clientID\""
	Scopes                  []string "json:\"scopes,omitempty\" graphql:\"scopes\""
	Nonce                   string   "json:\"nonce\" graphql:\"nonce\""
	ClaimsUserID            string   "json:\"claimsUserID\" graphql:\"claimsUserID\""
	ClaimsUsername          string   "json:\"claimsUsername\" graphql:\"claimsUsername\""
	ClaimsEmail             string   "json:\"claimsEmail\" graphql:\"claimsEmail\""
	ClaimsGroups            []string "json:\"claimsGroups,omitempty\" graphql:\"claimsGroups\""
	ClaimsPreferredUsername string   "json:\"claimsPreferredUsername\" graphql:\"claimsPreferredUsername\""
	ConnectorID             string   "json:\"connectorID\" graphql:\"connectorID\""
	ConnectorData           []string "json:\"connectorData,omitempty\" graphql:\"connectorData\""
}

func (t *AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens) GetClientID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens{}
	}
	return t.ClientID
}
func (t *AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens) GetScopes() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens{}
	}
	return t.Scopes
}
func (t *AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens) GetNonce() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens{}
	}
	return t.Nonce
}
func (t *AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens) GetClaimsUserID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens{}
	}
	return t.ClaimsUserID
}
func (t *AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens) GetClaimsUsername() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens{}
	}
	return t.ClaimsUsername
}
func (t *AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens) GetClaimsEmail() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens{}
	}
	return t.ClaimsEmail
}
func (t *AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens) GetClaimsGroups() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens{}
	}
	return t.ClaimsGroups
}
func (t *AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens) GetClaimsPreferredUsername() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens{}
	}
	return t.ClaimsPreferredUsername
}
func (t *AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens) GetConnectorID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens{}
	}
	return t.ConnectorID
}
func (t *AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens) GetConnectorData() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens{}
	}
	return t.ConnectorData
}

type AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult struct {
	OhAuthTooTokens []*AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens "json:\"ohAuthTooTokens,omitempty\" graphql:\"ohAuthTooTokens\""
}

func (t *AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult) GetOhAuthTooTokens() []*AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult{}
	}
	return t.OhAuthTooTokens
}

type AdminSearch_AdminSearch_Nodes_OrganizationSearchResult_Organizations struct {
	ID              string   "json:\"id\" graphql:\"id\""
	Tags            []string "json:\"tags,omitempty\" graphql:\"tags\""
	DeletedBy       *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Name            string   "json:\"name\" graphql:\"name\""
	DisplayName     string   "json:\"displayName\" graphql:\"displayName\""
	AvatarRemoteURL *string  "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
}

func (t *AdminSearch_AdminSearch_Nodes_OrganizationSearchResult_Organizations) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OrganizationSearchResult_Organizations{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_OrganizationSearchResult_Organizations) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OrganizationSearchResult_Organizations{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_OrganizationSearchResult_Organizations) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OrganizationSearchResult_Organizations{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_OrganizationSearchResult_Organizations) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OrganizationSearchResult_Organizations{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Nodes_OrganizationSearchResult_Organizations) GetDisplayName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OrganizationSearchResult_Organizations{}
	}
	return t.DisplayName
}
func (t *AdminSearch_AdminSearch_Nodes_OrganizationSearchResult_Organizations) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OrganizationSearchResult_Organizations{}
	}
	return t.AvatarRemoteURL
}

type AdminSearch_AdminSearch_Nodes_OrganizationSearchResult struct {
	Organizations []*AdminSearch_AdminSearch_Nodes_OrganizationSearchResult_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
}

func (t *AdminSearch_AdminSearch_Nodes_OrganizationSearchResult) GetOrganizations() []*AdminSearch_AdminSearch_Nodes_OrganizationSearchResult_Organizations {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OrganizationSearchResult{}
	}
	return t.Organizations
}

type AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings struct {
	ID             string   "json:\"id\" graphql:\"id\""
	Tags           []string "json:\"tags,omitempty\" graphql:\"tags\""
	DeletedBy      *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Domains        []string "json:\"domains,omitempty\" graphql:\"domains\""
	BillingContact *string  "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string  "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string  "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	BillingAddress *string  "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	TaxIdentifier  *string  "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	OrganizationID *string  "json:\"organizationID,omitempty\" graphql:\"organizationID\""
}

func (t *AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings) GetDomains() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings{}
	}
	return t.Domains
}
func (t *AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings) GetBillingContact() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings{}
	}
	return t.BillingContact
}
func (t *AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings) GetBillingEmail() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings{}
	}
	return t.BillingEmail
}
func (t *AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings) GetBillingPhone() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings{}
	}
	return t.BillingPhone
}
func (t *AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings) GetBillingAddress() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings{}
	}
	return t.BillingAddress
}
func (t *AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings) GetTaxIdentifier() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings{}
	}
	return t.TaxIdentifier
}
func (t *AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings) GetOrganizationID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings{}
	}
	return t.OrganizationID
}

type AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult struct {
	OrganizationSettings []*AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings "json:\"organizationSettings,omitempty\" graphql:\"organizationSettings\""
}

func (t *AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult) GetOrganizationSettings() []*AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult_OrganizationSettings {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult{}
	}
	return t.OrganizationSettings
}

type AdminSearch_AdminSearch_Nodes_PersonalAccessTokenSearchResult_PersonalAccessTokens struct {
	DeletedBy *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID        string   "json:\"id\" graphql:\"id\""
	Tags      []string "json:\"tags,omitempty\" graphql:\"tags\""
	Name      string   "json:\"name\" graphql:\"name\""
	Scopes    []string "json:\"scopes,omitempty\" graphql:\"scopes\""
}

func (t *AdminSearch_AdminSearch_Nodes_PersonalAccessTokenSearchResult_PersonalAccessTokens) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_PersonalAccessTokenSearchResult_PersonalAccessTokens{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_PersonalAccessTokenSearchResult_PersonalAccessTokens) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_PersonalAccessTokenSearchResult_PersonalAccessTokens{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_PersonalAccessTokenSearchResult_PersonalAccessTokens) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_PersonalAccessTokenSearchResult_PersonalAccessTokens{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_PersonalAccessTokenSearchResult_PersonalAccessTokens) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_PersonalAccessTokenSearchResult_PersonalAccessTokens{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Nodes_PersonalAccessTokenSearchResult_PersonalAccessTokens) GetScopes() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_PersonalAccessTokenSearchResult_PersonalAccessTokens{}
	}
	return t.Scopes
}

type AdminSearch_AdminSearch_Nodes_PersonalAccessTokenSearchResult struct {
	PersonalAccessTokens []*AdminSearch_AdminSearch_Nodes_PersonalAccessTokenSearchResult_PersonalAccessTokens "json:\"personalAccessTokens,omitempty\" graphql:\"personalAccessTokens\""
}

func (t *AdminSearch_AdminSearch_Nodes_PersonalAccessTokenSearchResult) GetPersonalAccessTokens() []*AdminSearch_AdminSearch_Nodes_PersonalAccessTokenSearchResult_PersonalAccessTokens {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_PersonalAccessTokenSearchResult{}
	}
	return t.PersonalAccessTokens
}

type AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures struct {
	DeletedBy       *string                "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	Name            string                 "json:\"name\" graphql:\"name\""
	Description     *string                "json:\"description,omitempty\" graphql:\"description\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	ProcedureType   *string                "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	Satisfies       *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
}

func (t *AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures) GetStatus() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures{}
	}
	return t.Status
}
func (t *AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures) GetProcedureType() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures{}
	}
	return t.ProcedureType
}
func (t *AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures) GetVersion() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures{}
	}
	return t.Version
}
func (t *AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures) GetPurposeAndScope() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures{}
	}
	return t.PurposeAndScope
}
func (t *AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures) GetBackground() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures{}
	}
	return t.Background
}
func (t *AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures) GetSatisfies() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures{}
	}
	return t.Satisfies
}
func (t *AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures) GetDetails() map[string]interface{} {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures{}
	}
	return t.Details
}

type AdminSearch_AdminSearch_Nodes_ProcedureSearchResult struct {
	Procedures []*AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures "json:\"procedures,omitempty\" graphql:\"procedures\""
}

func (t *AdminSearch_AdminSearch_Nodes_ProcedureSearchResult) GetProcedures() []*AdminSearch_AdminSearch_Nodes_ProcedureSearchResult_Procedures {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ProcedureSearchResult{}
	}
	return t.Procedures
}

type AdminSearch_AdminSearch_Nodes_ProgramSearchResult_Programs struct {
	ID             string   "json:\"id\" graphql:\"id\""
	DeletedBy      *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Tags           []string "json:\"tags,omitempty\" graphql:\"tags\""
	Name           string   "json:\"name\" graphql:\"name\""
	Description    *string  "json:\"description,omitempty\" graphql:\"description\""
	OrganizationID string   "json:\"organizationID\" graphql:\"organizationID\""
}

func (t *AdminSearch_AdminSearch_Nodes_ProgramSearchResult_Programs) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ProgramSearchResult_Programs{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_ProgramSearchResult_Programs) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ProgramSearchResult_Programs{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_ProgramSearchResult_Programs) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ProgramSearchResult_Programs{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_ProgramSearchResult_Programs) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ProgramSearchResult_Programs{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Nodes_ProgramSearchResult_Programs) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ProgramSearchResult_Programs{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Nodes_ProgramSearchResult_Programs) GetOrganizationID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ProgramSearchResult_Programs{}
	}
	return t.OrganizationID
}

type AdminSearch_AdminSearch_Nodes_ProgramSearchResult struct {
	Programs []*AdminSearch_AdminSearch_Nodes_ProgramSearchResult_Programs "json:\"programs,omitempty\" graphql:\"programs\""
}

func (t *AdminSearch_AdminSearch_Nodes_ProgramSearchResult) GetPrograms() []*AdminSearch_AdminSearch_Nodes_ProgramSearchResult_Programs {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_ProgramSearchResult{}
	}
	return t.Programs
}

type AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks struct {
	DeletedBy     *string                "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID            string                 "json:\"id\" graphql:\"id\""
	Tags          []string               "json:\"tags,omitempty\" graphql:\"tags\""
	Name          string                 "json:\"name\" graphql:\"name\""
	Description   *string                "json:\"description,omitempty\" graphql:\"description\""
	Status        *string                "json:\"status,omitempty\" graphql:\"status\""
	RiskType      *string                "json:\"riskType,omitempty\" graphql:\"riskType\""
	BusinessCosts *string                "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	Mitigation    *string                "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Satisfies     *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Details       map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
}

func (t *AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks) GetStatus() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks{}
	}
	return t.Status
}
func (t *AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks) GetRiskType() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks{}
	}
	return t.RiskType
}
func (t *AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks) GetBusinessCosts() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks{}
	}
	return t.BusinessCosts
}
func (t *AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks) GetMitigation() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks{}
	}
	return t.Mitigation
}
func (t *AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks) GetSatisfies() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks{}
	}
	return t.Satisfies
}
func (t *AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks) GetDetails() map[string]interface{} {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks{}
	}
	return t.Details
}

type AdminSearch_AdminSearch_Nodes_RiskSearchResult struct {
	Risks []*AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks "json:\"risks,omitempty\" graphql:\"risks\""
}

func (t *AdminSearch_AdminSearch_Nodes_RiskSearchResult) GetRisks() []*AdminSearch_AdminSearch_Nodes_RiskSearchResult_Risks {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_RiskSearchResult{}
	}
	return t.Risks
}

type AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards struct {
	DeletedBy       *string                "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	Name            string                 "json:\"name\" graphql:\"name\""
	Description     *string                "json:\"description,omitempty\" graphql:\"description\""
	Family          *string                "json:\"family,omitempty\" graphql:\"family\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	StandardType    *string                "json:\"standardType,omitempty\" graphql:\"standardType\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	Satisfies       *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
}

func (t *AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards) GetFamily() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards{}
	}
	return t.Family
}
func (t *AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards) GetStatus() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards{}
	}
	return t.Status
}
func (t *AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards) GetStandardType() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards{}
	}
	return t.StandardType
}
func (t *AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards) GetVersion() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards{}
	}
	return t.Version
}
func (t *AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards) GetPurposeAndScope() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards{}
	}
	return t.PurposeAndScope
}
func (t *AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards) GetBackground() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards{}
	}
	return t.Background
}
func (t *AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards) GetSatisfies() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards{}
	}
	return t.Satisfies
}
func (t *AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards) GetDetails() map[string]interface{} {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards{}
	}
	return t.Details
}

type AdminSearch_AdminSearch_Nodes_StandardSearchResult struct {
	Standards []*AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards "json:\"standards,omitempty\" graphql:\"standards\""
}

func (t *AdminSearch_AdminSearch_Nodes_StandardSearchResult) GetStandards() []*AdminSearch_AdminSearch_Nodes_StandardSearchResult_Standards {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_StandardSearchResult{}
	}
	return t.Standards
}

type AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols struct {
	DeletedBy                  *string                "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID                         string                 "json:\"id\" graphql:\"id\""
	Tags                       []string               "json:\"tags,omitempty\" graphql:\"tags\""
	Name                       string                 "json:\"name\" graphql:\"name\""
	Description                *string                "json:\"description,omitempty\" graphql:\"description\""
	Status                     *string                "json:\"status,omitempty\" graphql:\"status\""
	SubcontrolType             *string                "json:\"subcontrolType,omitempty\" graphql:\"subcontrolType\""
	Version                    *string                "json:\"version,omitempty\" graphql:\"version\""
	SubcontrolNumber           *string                "json:\"subcontrolNumber,omitempty\" graphql:\"subcontrolNumber\""
	Family                     *string                "json:\"family,omitempty\" graphql:\"family\""
	Class                      *string                "json:\"class,omitempty\" graphql:\"class\""
	Source                     *string                "json:\"source,omitempty\" graphql:\"source\""
	MappedFrameworks           *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	ImplementationEvidence     *string                "json:\"implementationEvidence,omitempty\" graphql:\"implementationEvidence\""
	ImplementationStatus       *string                "json:\"implementationStatus,omitempty\" graphql:\"implementationStatus\""
	ImplementationVerification *string                "json:\"implementationVerification,omitempty\" graphql:\"implementationVerification\""
	Details                    map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
}

func (t *AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols) GetStatus() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols{}
	}
	return t.Status
}
func (t *AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols) GetSubcontrolType() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols{}
	}
	return t.SubcontrolType
}
func (t *AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols) GetVersion() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols{}
	}
	return t.Version
}
func (t *AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols) GetSubcontrolNumber() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols{}
	}
	return t.SubcontrolNumber
}
func (t *AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols) GetFamily() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols{}
	}
	return t.Family
}
func (t *AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols) GetClass() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols{}
	}
	return t.Class
}
func (t *AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols) GetSource() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols{}
	}
	return t.Source
}
func (t *AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols) GetMappedFrameworks() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols{}
	}
	return t.MappedFrameworks
}
func (t *AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols) GetImplementationEvidence() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols{}
	}
	return t.ImplementationEvidence
}
func (t *AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols) GetImplementationStatus() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols{}
	}
	return t.ImplementationStatus
}
func (t *AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols) GetImplementationVerification() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols{}
	}
	return t.ImplementationVerification
}
func (t *AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols) GetDetails() map[string]interface{} {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols{}
	}
	return t.Details
}

type AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult struct {
	Subcontrols []*AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols "json:\"subcontrols,omitempty\" graphql:\"subcontrols\""
}

func (t *AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult) GetSubcontrols() []*AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult_Subcontrols {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult{}
	}
	return t.Subcontrols
}

type AdminSearch_AdminSearch_Nodes_SubscriberSearchResult_Subscribers struct {
	ID          string   "json:\"id\" graphql:\"id\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
	DeletedBy   *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	OwnerID     *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Email       string   "json:\"email\" graphql:\"email\""
	PhoneNumber *string  "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
}

func (t *AdminSearch_AdminSearch_Nodes_SubscriberSearchResult_Subscribers) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubscriberSearchResult_Subscribers{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_SubscriberSearchResult_Subscribers) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubscriberSearchResult_Subscribers{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_SubscriberSearchResult_Subscribers) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubscriberSearchResult_Subscribers{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_SubscriberSearchResult_Subscribers) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubscriberSearchResult_Subscribers{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Nodes_SubscriberSearchResult_Subscribers) GetEmail() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubscriberSearchResult_Subscribers{}
	}
	return t.Email
}
func (t *AdminSearch_AdminSearch_Nodes_SubscriberSearchResult_Subscribers) GetPhoneNumber() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubscriberSearchResult_Subscribers{}
	}
	return t.PhoneNumber
}

type AdminSearch_AdminSearch_Nodes_SubscriberSearchResult struct {
	Subscribers []*AdminSearch_AdminSearch_Nodes_SubscriberSearchResult_Subscribers "json:\"subscribers,omitempty\" graphql:\"subscribers\""
}

func (t *AdminSearch_AdminSearch_Nodes_SubscriberSearchResult) GetSubscribers() []*AdminSearch_AdminSearch_Nodes_SubscriberSearchResult_Subscribers {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_SubscriberSearchResult{}
	}
	return t.Subscribers
}

type AdminSearch_AdminSearch_Nodes_TFASettingSearchResult_TFASettings struct {
	ID            string   "json:\"id\" graphql:\"id\""
	DeletedBy     *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Tags          []string "json:\"tags,omitempty\" graphql:\"tags\""
	TfaSecret     *string  "json:\"tfaSecret,omitempty\" graphql:\"tfaSecret\""
	RecoveryCodes []string "json:\"recoveryCodes,omitempty\" graphql:\"recoveryCodes\""
}

func (t *AdminSearch_AdminSearch_Nodes_TFASettingSearchResult_TFASettings) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_TFASettingSearchResult_TFASettings{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_TFASettingSearchResult_TFASettings) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_TFASettingSearchResult_TFASettings{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_TFASettingSearchResult_TFASettings) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_TFASettingSearchResult_TFASettings{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_TFASettingSearchResult_TFASettings) GetTfaSecret() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_TFASettingSearchResult_TFASettings{}
	}
	return t.TfaSecret
}
func (t *AdminSearch_AdminSearch_Nodes_TFASettingSearchResult_TFASettings) GetRecoveryCodes() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_TFASettingSearchResult_TFASettings{}
	}
	return t.RecoveryCodes
}

type AdminSearch_AdminSearch_Nodes_TFASettingSearchResult struct {
	TFASettings []*AdminSearch_AdminSearch_Nodes_TFASettingSearchResult_TFASettings "json:\"tFASettings,omitempty\" graphql:\"tFASettings\""
}

func (t *AdminSearch_AdminSearch_Nodes_TFASettingSearchResult) GetTFASettings() []*AdminSearch_AdminSearch_Nodes_TFASettingSearchResult_TFASettings {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_TFASettingSearchResult{}
	}
	return t.TFASettings
}

type AdminSearch_AdminSearch_Nodes_TaskSearchResult_Tasks struct {
	ID          string                 "json:\"id\" graphql:\"id\""
	DeletedBy   *string                "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string                 "json:\"title\" graphql:\"title\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
}

func (t *AdminSearch_AdminSearch_Nodes_TaskSearchResult_Tasks) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_TaskSearchResult_Tasks{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_TaskSearchResult_Tasks) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_TaskSearchResult_Tasks{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_TaskSearchResult_Tasks) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_TaskSearchResult_Tasks{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_TaskSearchResult_Tasks) GetTitle() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_TaskSearchResult_Tasks{}
	}
	return t.Title
}
func (t *AdminSearch_AdminSearch_Nodes_TaskSearchResult_Tasks) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_TaskSearchResult_Tasks{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Nodes_TaskSearchResult_Tasks) GetDetails() map[string]interface{} {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_TaskSearchResult_Tasks{}
	}
	return t.Details
}

type AdminSearch_AdminSearch_Nodes_TaskSearchResult struct {
	Tasks []*AdminSearch_AdminSearch_Nodes_TaskSearchResult_Tasks "json:\"tasks,omitempty\" graphql:\"tasks\""
}

func (t *AdminSearch_AdminSearch_Nodes_TaskSearchResult) GetTasks() []*AdminSearch_AdminSearch_Nodes_TaskSearchResult_Tasks {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_TaskSearchResult{}
	}
	return t.Tasks
}

type AdminSearch_AdminSearch_Nodes_TemplateSearchResult_Templates struct {
	DeletedBy   *string         "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID          string          "json:\"id\" graphql:\"id\""
	Tags        []string        "json:\"tags,omitempty\" graphql:\"tags\""
	OwnerID     *string         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Name        string          "json:\"name\" graphql:\"name\""
	Description *string         "json:\"description,omitempty\" graphql:\"description\""
	Jsonconfig  json.RawMessage "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Uischema    json.RawMessage "json:\"uischema,omitempty\" graphql:\"uischema\""
}

func (t *AdminSearch_AdminSearch_Nodes_TemplateSearchResult_Templates) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_TemplateSearchResult_Templates{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_TemplateSearchResult_Templates) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_TemplateSearchResult_Templates{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_TemplateSearchResult_Templates) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_TemplateSearchResult_Templates{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_TemplateSearchResult_Templates) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_TemplateSearchResult_Templates{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Nodes_TemplateSearchResult_Templates) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_TemplateSearchResult_Templates{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Nodes_TemplateSearchResult_Templates) GetDescription() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_TemplateSearchResult_Templates{}
	}
	return t.Description
}
func (t *AdminSearch_AdminSearch_Nodes_TemplateSearchResult_Templates) GetJsonconfig() *json.RawMessage {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_TemplateSearchResult_Templates{}
	}
	return &t.Jsonconfig
}
func (t *AdminSearch_AdminSearch_Nodes_TemplateSearchResult_Templates) GetUischema() *json.RawMessage {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_TemplateSearchResult_Templates{}
	}
	return &t.Uischema
}

type AdminSearch_AdminSearch_Nodes_TemplateSearchResult struct {
	Templates []*AdminSearch_AdminSearch_Nodes_TemplateSearchResult_Templates "json:\"templates,omitempty\" graphql:\"templates\""
}

func (t *AdminSearch_AdminSearch_Nodes_TemplateSearchResult) GetTemplates() []*AdminSearch_AdminSearch_Nodes_TemplateSearchResult_Templates {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_TemplateSearchResult{}
	}
	return t.Templates
}

type AdminSearch_AdminSearch_Nodes_UserSearchResult_Users struct {
	DeletedBy         *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	ID                string   "json:\"id\" graphql:\"id\""
	Tags              []string "json:\"tags,omitempty\" graphql:\"tags\""
	Email             string   "json:\"email\" graphql:\"email\""
	FirstName         *string  "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName          *string  "json:\"lastName,omitempty\" graphql:\"lastName\""
	DisplayName       string   "json:\"displayName\" graphql:\"displayName\""
	AvatarRemoteURL   *string  "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarLocalFile   *string  "json:\"avatarLocalFile,omitempty\" graphql:\"avatarLocalFile\""
	AvatarLocalFileID *string  "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	Sub               *string  "json:\"sub,omitempty\" graphql:\"sub\""
}

func (t *AdminSearch_AdminSearch_Nodes_UserSearchResult_Users) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_UserSearchResult_Users{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_UserSearchResult_Users) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_UserSearchResult_Users{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_UserSearchResult_Users) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_UserSearchResult_Users{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_UserSearchResult_Users) GetEmail() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_UserSearchResult_Users{}
	}
	return t.Email
}
func (t *AdminSearch_AdminSearch_Nodes_UserSearchResult_Users) GetFirstName() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_UserSearchResult_Users{}
	}
	return t.FirstName
}
func (t *AdminSearch_AdminSearch_Nodes_UserSearchResult_Users) GetLastName() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_UserSearchResult_Users{}
	}
	return t.LastName
}
func (t *AdminSearch_AdminSearch_Nodes_UserSearchResult_Users) GetDisplayName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_UserSearchResult_Users{}
	}
	return t.DisplayName
}
func (t *AdminSearch_AdminSearch_Nodes_UserSearchResult_Users) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_UserSearchResult_Users{}
	}
	return t.AvatarRemoteURL
}
func (t *AdminSearch_AdminSearch_Nodes_UserSearchResult_Users) GetAvatarLocalFile() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_UserSearchResult_Users{}
	}
	return t.AvatarLocalFile
}
func (t *AdminSearch_AdminSearch_Nodes_UserSearchResult_Users) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_UserSearchResult_Users{}
	}
	return t.AvatarLocalFileID
}
func (t *AdminSearch_AdminSearch_Nodes_UserSearchResult_Users) GetSub() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_UserSearchResult_Users{}
	}
	return t.Sub
}

type AdminSearch_AdminSearch_Nodes_UserSearchResult struct {
	Users []*AdminSearch_AdminSearch_Nodes_UserSearchResult_Users "json:\"users,omitempty\" graphql:\"users\""
}

func (t *AdminSearch_AdminSearch_Nodes_UserSearchResult) GetUsers() []*AdminSearch_AdminSearch_Nodes_UserSearchResult_Users {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_UserSearchResult{}
	}
	return t.Users
}

type AdminSearch_AdminSearch_Nodes_UserSettingSearchResult_UserSettings struct {
	ID        string   "json:\"id\" graphql:\"id\""
	Tags      []string "json:\"tags,omitempty\" graphql:\"tags\""
	DeletedBy *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	UserID    *string  "json:\"userID,omitempty\" graphql:\"userID\""
}

func (t *AdminSearch_AdminSearch_Nodes_UserSettingSearchResult_UserSettings) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_UserSettingSearchResult_UserSettings{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_UserSettingSearchResult_UserSettings) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_UserSettingSearchResult_UserSettings{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_UserSettingSearchResult_UserSettings) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_UserSettingSearchResult_UserSettings{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_UserSettingSearchResult_UserSettings) GetUserID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_UserSettingSearchResult_UserSettings{}
	}
	return t.UserID
}

type AdminSearch_AdminSearch_Nodes_UserSettingSearchResult struct {
	UserSettings []*AdminSearch_AdminSearch_Nodes_UserSettingSearchResult_UserSettings "json:\"userSettings,omitempty\" graphql:\"userSettings\""
}

func (t *AdminSearch_AdminSearch_Nodes_UserSettingSearchResult) GetUserSettings() []*AdminSearch_AdminSearch_Nodes_UserSettingSearchResult_UserSettings {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_UserSettingSearchResult{}
	}
	return t.UserSettings
}

type AdminSearch_AdminSearch_Nodes_WebhookSearchResult_Webhooks struct {
	ID             string   "json:\"id\" graphql:\"id\""
	Tags           []string "json:\"tags,omitempty\" graphql:\"tags\""
	DeletedBy      *string  "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	OwnerID        *string  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Name           string   "json:\"name\" graphql:\"name\""
	DestinationURL string   "json:\"destinationURL\" graphql:\"destinationURL\""
	LastError      *string  "json:\"lastError,omitempty\" graphql:\"lastError\""
	LastResponse   *string  "json:\"lastResponse,omitempty\" graphql:\"lastResponse\""
}

func (t *AdminSearch_AdminSearch_Nodes_WebhookSearchResult_Webhooks) GetID() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_WebhookSearchResult_Webhooks{}
	}
	return t.ID
}
func (t *AdminSearch_AdminSearch_Nodes_WebhookSearchResult_Webhooks) GetTags() []string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_WebhookSearchResult_Webhooks{}
	}
	return t.Tags
}
func (t *AdminSearch_AdminSearch_Nodes_WebhookSearchResult_Webhooks) GetDeletedBy() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_WebhookSearchResult_Webhooks{}
	}
	return t.DeletedBy
}
func (t *AdminSearch_AdminSearch_Nodes_WebhookSearchResult_Webhooks) GetOwnerID() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_WebhookSearchResult_Webhooks{}
	}
	return t.OwnerID
}
func (t *AdminSearch_AdminSearch_Nodes_WebhookSearchResult_Webhooks) GetName() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_WebhookSearchResult_Webhooks{}
	}
	return t.Name
}
func (t *AdminSearch_AdminSearch_Nodes_WebhookSearchResult_Webhooks) GetDestinationURL() string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_WebhookSearchResult_Webhooks{}
	}
	return t.DestinationURL
}
func (t *AdminSearch_AdminSearch_Nodes_WebhookSearchResult_Webhooks) GetLastError() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_WebhookSearchResult_Webhooks{}
	}
	return t.LastError
}
func (t *AdminSearch_AdminSearch_Nodes_WebhookSearchResult_Webhooks) GetLastResponse() *string {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_WebhookSearchResult_Webhooks{}
	}
	return t.LastResponse
}

type AdminSearch_AdminSearch_Nodes_WebhookSearchResult struct {
	Webhooks []*AdminSearch_AdminSearch_Nodes_WebhookSearchResult_Webhooks "json:\"webhooks,omitempty\" graphql:\"webhooks\""
}

func (t *AdminSearch_AdminSearch_Nodes_WebhookSearchResult) GetWebhooks() []*AdminSearch_AdminSearch_Nodes_WebhookSearchResult_Webhooks {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes_WebhookSearchResult{}
	}
	return t.Webhooks
}

type AdminSearch_AdminSearch_Nodes struct {
	APITokenSearchResult               AdminSearch_AdminSearch_Nodes_APITokenSearchResult               "graphql:\"... on APITokenSearchResult\""
	ActionPlanSearchResult             AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult             "graphql:\"... on ActionPlanSearchResult\""
	ContactSearchResult                AdminSearch_AdminSearch_Nodes_ContactSearchResult                "graphql:\"... on ContactSearchResult\""
	ControlSearchResult                AdminSearch_AdminSearch_Nodes_ControlSearchResult                "graphql:\"... on ControlSearchResult\""
	ControlObjectiveSearchResult       AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult       "graphql:\"... on ControlObjectiveSearchResult\""
	DocumentDataSearchResult           AdminSearch_AdminSearch_Nodes_DocumentDataSearchResult           "graphql:\"... on DocumentDataSearchResult\""
	EntitlementSearchResult            AdminSearch_AdminSearch_Nodes_EntitlementSearchResult            "graphql:\"... on EntitlementSearchResult\""
	EntitlementPlanSearchResult        AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult        "graphql:\"... on EntitlementPlanSearchResult\""
	EntitlementPlanFeatureSearchResult AdminSearch_AdminSearch_Nodes_EntitlementPlanFeatureSearchResult "graphql:\"... on EntitlementPlanFeatureSearchResult\""
	EntitySearchResult                 AdminSearch_AdminSearch_Nodes_EntitySearchResult                 "graphql:\"... on EntitySearchResult\""
	EntityTypeSearchResult             AdminSearch_AdminSearch_Nodes_EntityTypeSearchResult             "graphql:\"... on EntityTypeSearchResult\""
	EventSearchResult                  AdminSearch_AdminSearch_Nodes_EventSearchResult                  "graphql:\"... on EventSearchResult\""
	FeatureSearchResult                AdminSearch_AdminSearch_Nodes_FeatureSearchResult                "graphql:\"... on FeatureSearchResult\""
	FileSearchResult                   AdminSearch_AdminSearch_Nodes_FileSearchResult                   "graphql:\"... on FileSearchResult\""
	GroupSearchResult                  AdminSearch_AdminSearch_Nodes_GroupSearchResult                  "graphql:\"... on GroupSearchResult\""
	GroupSettingSearchResult           AdminSearch_AdminSearch_Nodes_GroupSettingSearchResult           "graphql:\"... on GroupSettingSearchResult\""
	IntegrationSearchResult            AdminSearch_AdminSearch_Nodes_IntegrationSearchResult            "graphql:\"... on IntegrationSearchResult\""
	InternalPolicySearchResult         AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult         "graphql:\"... on InternalPolicySearchResult\""
	NarrativeSearchResult              AdminSearch_AdminSearch_Nodes_NarrativeSearchResult              "graphql:\"... on NarrativeSearchResult\""
	OauthProviderSearchResult          AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult          "graphql:\"... on OauthProviderSearchResult\""
	OhAuthTooTokenSearchResult         AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult         "graphql:\"... on OhAuthTooTokenSearchResult\""
	OrganizationSearchResult           AdminSearch_AdminSearch_Nodes_OrganizationSearchResult           "graphql:\"... on OrganizationSearchResult\""
	OrganizationSettingSearchResult    AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult    "graphql:\"... on OrganizationSettingSearchResult\""
	PersonalAccessTokenSearchResult    AdminSearch_AdminSearch_Nodes_PersonalAccessTokenSearchResult    "graphql:\"... on PersonalAccessTokenSearchResult\""
	ProcedureSearchResult              AdminSearch_AdminSearch_Nodes_ProcedureSearchResult              "graphql:\"... on ProcedureSearchResult\""
	ProgramSearchResult                AdminSearch_AdminSearch_Nodes_ProgramSearchResult                "graphql:\"... on ProgramSearchResult\""
	RiskSearchResult                   AdminSearch_AdminSearch_Nodes_RiskSearchResult                   "graphql:\"... on RiskSearchResult\""
	StandardSearchResult               AdminSearch_AdminSearch_Nodes_StandardSearchResult               "graphql:\"... on StandardSearchResult\""
	SubcontrolSearchResult             AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult             "graphql:\"... on SubcontrolSearchResult\""
	SubscriberSearchResult             AdminSearch_AdminSearch_Nodes_SubscriberSearchResult             "graphql:\"... on SubscriberSearchResult\""
	TFASettingSearchResult             AdminSearch_AdminSearch_Nodes_TFASettingSearchResult             "graphql:\"... on TFASettingSearchResult\""
	TaskSearchResult                   AdminSearch_AdminSearch_Nodes_TaskSearchResult                   "graphql:\"... on TaskSearchResult\""
	TemplateSearchResult               AdminSearch_AdminSearch_Nodes_TemplateSearchResult               "graphql:\"... on TemplateSearchResult\""
	UserSearchResult                   AdminSearch_AdminSearch_Nodes_UserSearchResult                   "graphql:\"... on UserSearchResult\""
	UserSettingSearchResult            AdminSearch_AdminSearch_Nodes_UserSettingSearchResult            "graphql:\"... on UserSettingSearchResult\""
	WebhookSearchResult                AdminSearch_AdminSearch_Nodes_WebhookSearchResult                "graphql:\"... on WebhookSearchResult\""
}

func (t *AdminSearch_AdminSearch_Nodes) GetAPITokenSearchResult() *AdminSearch_AdminSearch_Nodes_APITokenSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.APITokenSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetActionPlanSearchResult() *AdminSearch_AdminSearch_Nodes_ActionPlanSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.ActionPlanSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetContactSearchResult() *AdminSearch_AdminSearch_Nodes_ContactSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.ContactSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetControlSearchResult() *AdminSearch_AdminSearch_Nodes_ControlSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.ControlSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetControlObjectiveSearchResult() *AdminSearch_AdminSearch_Nodes_ControlObjectiveSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.ControlObjectiveSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetDocumentDataSearchResult() *AdminSearch_AdminSearch_Nodes_DocumentDataSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.DocumentDataSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetEntitlementSearchResult() *AdminSearch_AdminSearch_Nodes_EntitlementSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.EntitlementSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetEntitlementPlanSearchResult() *AdminSearch_AdminSearch_Nodes_EntitlementPlanSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.EntitlementPlanSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetEntitlementPlanFeatureSearchResult() *AdminSearch_AdminSearch_Nodes_EntitlementPlanFeatureSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.EntitlementPlanFeatureSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetEntitySearchResult() *AdminSearch_AdminSearch_Nodes_EntitySearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.EntitySearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetEntityTypeSearchResult() *AdminSearch_AdminSearch_Nodes_EntityTypeSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.EntityTypeSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetEventSearchResult() *AdminSearch_AdminSearch_Nodes_EventSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.EventSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetFeatureSearchResult() *AdminSearch_AdminSearch_Nodes_FeatureSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.FeatureSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetFileSearchResult() *AdminSearch_AdminSearch_Nodes_FileSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.FileSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetGroupSearchResult() *AdminSearch_AdminSearch_Nodes_GroupSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.GroupSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetGroupSettingSearchResult() *AdminSearch_AdminSearch_Nodes_GroupSettingSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.GroupSettingSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetIntegrationSearchResult() *AdminSearch_AdminSearch_Nodes_IntegrationSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.IntegrationSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetInternalPolicySearchResult() *AdminSearch_AdminSearch_Nodes_InternalPolicySearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.InternalPolicySearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetNarrativeSearchResult() *AdminSearch_AdminSearch_Nodes_NarrativeSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.NarrativeSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetOauthProviderSearchResult() *AdminSearch_AdminSearch_Nodes_OauthProviderSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.OauthProviderSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetOhAuthTooTokenSearchResult() *AdminSearch_AdminSearch_Nodes_OhAuthTooTokenSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.OhAuthTooTokenSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetOrganizationSearchResult() *AdminSearch_AdminSearch_Nodes_OrganizationSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.OrganizationSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetOrganizationSettingSearchResult() *AdminSearch_AdminSearch_Nodes_OrganizationSettingSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.OrganizationSettingSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetPersonalAccessTokenSearchResult() *AdminSearch_AdminSearch_Nodes_PersonalAccessTokenSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.PersonalAccessTokenSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetProcedureSearchResult() *AdminSearch_AdminSearch_Nodes_ProcedureSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.ProcedureSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetProgramSearchResult() *AdminSearch_AdminSearch_Nodes_ProgramSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.ProgramSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetRiskSearchResult() *AdminSearch_AdminSearch_Nodes_RiskSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.RiskSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetStandardSearchResult() *AdminSearch_AdminSearch_Nodes_StandardSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.StandardSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetSubcontrolSearchResult() *AdminSearch_AdminSearch_Nodes_SubcontrolSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.SubcontrolSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetSubscriberSearchResult() *AdminSearch_AdminSearch_Nodes_SubscriberSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.SubscriberSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetTFASettingSearchResult() *AdminSearch_AdminSearch_Nodes_TFASettingSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.TFASettingSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetTaskSearchResult() *AdminSearch_AdminSearch_Nodes_TaskSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.TaskSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetTemplateSearchResult() *AdminSearch_AdminSearch_Nodes_TemplateSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.TemplateSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetUserSearchResult() *AdminSearch_AdminSearch_Nodes_UserSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.UserSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetUserSettingSearchResult() *AdminSearch_AdminSearch_Nodes_UserSettingSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.UserSettingSearchResult
}
func (t *AdminSearch_AdminSearch_Nodes) GetWebhookSearchResult() *AdminSearch_AdminSearch_Nodes_WebhookSearchResult {
	if t == nil {
		t = &AdminSearch_AdminSearch_Nodes{}
	}
	return &t.WebhookSearchResult
}

type AdminSearch_AdminSearch struct {
	Nodes []*AdminSearch_AdminSearch_Nodes "json:\"nodes\" graphql:\"nodes\""
}

func (t *AdminSearch_AdminSearch) GetNodes() []*AdminSearch_AdminSearch_Nodes {
	if t == nil {
		t = &AdminSearch_AdminSearch{}
	}
	return t.Nodes
}

type CreateAPIToken_CreateAPIToken_APIToken_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateAPIToken_CreateAPIToken_APIToken_Owner) GetID() string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken_Owner{}
	}
	return t.ID
}

type CreateAPIToken_CreateAPIToken_APIToken struct {
	ID          string                                        "json:\"id\" graphql:\"id\""
	Token       string                                        "json:\"token\" graphql:\"token\""
	Scopes      []string                                      "json:\"scopes,omitempty\" graphql:\"scopes\""
	Owner       *CreateAPIToken_CreateAPIToken_APIToken_Owner "json:\"owner,omitempty\" graphql:\"owner\""
	CreatedAt   *time.Time                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt   *time.Time                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy   *string                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy   *string                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Name        string                                        "json:\"name\" graphql:\"name\""
	ExpiresAt   *time.Time                                    "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Description *string                                       "json:\"description,omitempty\" graphql:\"description\""
	LastUsedAt  *time.Time                                    "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
}

func (t *CreateAPIToken_CreateAPIToken_APIToken) GetID() string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.ID
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetToken() string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.Token
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetScopes() []string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.Scopes
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetOwner() *CreateAPIToken_CreateAPIToken_APIToken_Owner {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.Owner
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.CreatedAt
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.UpdatedAt
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetCreatedBy() *string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.CreatedBy
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.UpdatedBy
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetName() string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.Name
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.ExpiresAt
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetDescription() *string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.Description
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.LastUsedAt
}

type CreateAPIToken_CreateAPIToken struct {
	APIToken CreateAPIToken_CreateAPIToken_APIToken "json:\"apiToken\" graphql:\"apiToken\""
}

func (t *CreateAPIToken_CreateAPIToken) GetAPIToken() *CreateAPIToken_CreateAPIToken_APIToken {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken{}
	}
	return &t.APIToken
}

type UpdateAPIToken_UpdateAPIToken_APIToken_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateAPIToken_UpdateAPIToken_APIToken_Owner) GetID() string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken_Owner{}
	}
	return t.ID
}

type UpdateAPIToken_UpdateAPIToken_APIToken struct {
	ID          string                                        "json:\"id\" graphql:\"id\""
	Token       string                                        "json:\"token\" graphql:\"token\""
	Scopes      []string                                      "json:\"scopes,omitempty\" graphql:\"scopes\""
	Owner       *UpdateAPIToken_UpdateAPIToken_APIToken_Owner "json:\"owner,omitempty\" graphql:\"owner\""
	CreatedAt   *time.Time                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt   *time.Time                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy   *string                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy   *string                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Name        string                                        "json:\"name\" graphql:\"name\""
	ExpiresAt   *time.Time                                    "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Description *string                                       "json:\"description,omitempty\" graphql:\"description\""
	LastUsedAt  *time.Time                                    "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
}

func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetID() string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.ID
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetToken() string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.Token
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetScopes() []string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.Scopes
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetOwner() *UpdateAPIToken_UpdateAPIToken_APIToken_Owner {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.Owner
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.CreatedAt
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.UpdatedAt
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.CreatedBy
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.UpdatedBy
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetName() string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.Name
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.ExpiresAt
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetDescription() *string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.Description
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.LastUsedAt
}

type UpdateAPIToken_UpdateAPIToken struct {
	APIToken UpdateAPIToken_UpdateAPIToken_APIToken "json:\"apiToken\" graphql:\"apiToken\""
}

func (t *UpdateAPIToken_UpdateAPIToken) GetAPIToken() *UpdateAPIToken_UpdateAPIToken_APIToken {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken{}
	}
	return &t.APIToken
}

type GetAllAPITokens_APITokens_Edges_Node_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllAPITokens_APITokens_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node_Owner{}
	}
	return t.ID
}

type GetAllAPITokens_APITokens_Edges_Node struct {
	ID          string                                      "json:\"id\" graphql:\"id\""
	Token       string                                      "json:\"token\" graphql:\"token\""
	Scopes      []string                                    "json:\"scopes,omitempty\" graphql:\"scopes\""
	Owner       *GetAllAPITokens_APITokens_Edges_Node_Owner "json:\"owner,omitempty\" graphql:\"owner\""
	CreatedAt   *time.Time                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt   *time.Time                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy   *string                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy   *string                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Name        string                                      "json:\"name\" graphql:\"name\""
	ExpiresAt   *time.Time                                  "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Description *string                                     "json:\"description,omitempty\" graphql:\"description\""
	LastUsedAt  *time.Time                                  "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
}

func (t *GetAllAPITokens_APITokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetToken() string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.Token
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetScopes() []string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.Scopes
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetOwner() *GetAllAPITokens_APITokens_Edges_Node_Owner {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.Owner
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.LastUsedAt
}

type GetAllAPITokens_APITokens_Edges struct {
	Node *GetAllAPITokens_APITokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllAPITokens_APITokens_Edges) GetNode() *GetAllAPITokens_APITokens_Edges_Node {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges{}
	}
	return t.Node
}

type GetAllAPITokens_APITokens struct {
	Edges []*GetAllAPITokens_APITokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllAPITokens_APITokens) GetEdges() []*GetAllAPITokens_APITokens_Edges {
	if t == nil {
		t = &GetAllAPITokens_APITokens{}
	}
	return t.Edges
}

type GetAPITokenByID_APIToken_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAPITokenByID_APIToken_Owner) GetID() string {
	if t == nil {
		t = &GetAPITokenByID_APIToken_Owner{}
	}
	return t.ID
}

type GetAPITokenByID_APIToken struct {
	ID          string                          "json:\"id\" graphql:\"id\""
	Token       string                          "json:\"token\" graphql:\"token\""
	Scopes      []string                        "json:\"scopes,omitempty\" graphql:\"scopes\""
	Owner       *GetAPITokenByID_APIToken_Owner "json:\"owner,omitempty\" graphql:\"owner\""
	CreatedAt   *time.Time                      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt   *time.Time                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy   *string                         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy   *string                         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Name        string                          "json:\"name\" graphql:\"name\""
	ExpiresAt   *time.Time                      "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Description *string                         "json:\"description,omitempty\" graphql:\"description\""
	LastUsedAt  *time.Time                      "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
}

func (t *GetAPITokenByID_APIToken) GetID() string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.ID
}
func (t *GetAPITokenByID_APIToken) GetToken() string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.Token
}
func (t *GetAPITokenByID_APIToken) GetScopes() []string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.Scopes
}
func (t *GetAPITokenByID_APIToken) GetOwner() *GetAPITokenByID_APIToken_Owner {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.Owner
}
func (t *GetAPITokenByID_APIToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.CreatedAt
}
func (t *GetAPITokenByID_APIToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.UpdatedAt
}
func (t *GetAPITokenByID_APIToken) GetCreatedBy() *string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.CreatedBy
}
func (t *GetAPITokenByID_APIToken) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.UpdatedBy
}
func (t *GetAPITokenByID_APIToken) GetName() string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.Name
}
func (t *GetAPITokenByID_APIToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.ExpiresAt
}
func (t *GetAPITokenByID_APIToken) GetDescription() *string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.Description
}
func (t *GetAPITokenByID_APIToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.LastUsedAt
}

type DeleteAPIToken_DeleteAPIToken struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteAPIToken_DeleteAPIToken) GetDeletedID() string {
	if t == nil {
		t = &DeleteAPIToken_DeleteAPIToken{}
	}
	return t.DeletedID
}

type CreateBulkContact_CreateBulkContact_Contacts struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	ID          string           "json:\"id\" graphql:\"id\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkContact_CreateBulkContact_Contacts) GetAddress() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.Address
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetCompany() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.Company
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.CreatedAt
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.CreatedBy
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetEmail() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.Email
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetFullName() string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.FullName
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetID() string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.ID
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.OwnerID
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetPhoneNumber() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.PhoneNumber
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return &t.Status
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetTags() []string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.Tags
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetTitle() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.Title
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkContact_CreateBulkContact_Contacts) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact_Contacts{}
	}
	return t.UpdatedBy
}

type CreateBulkContact_CreateBulkContact struct {
	Contacts []*CreateBulkContact_CreateBulkContact_Contacts "json:\"contacts,omitempty\" graphql:\"contacts\""
}

func (t *CreateBulkContact_CreateBulkContact) GetContacts() []*CreateBulkContact_CreateBulkContact_Contacts {
	if t == nil {
		t = &CreateBulkContact_CreateBulkContact{}
	}
	return t.Contacts
}

type CreateBulkCSVContact_CreateBulkCSVContact_Contacts struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	ID          string           "json:\"id\" graphql:\"id\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetAddress() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.Address
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetCompany() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.Company
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetEmail() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.Email
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetFullName() string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.FullName
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetID() string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.ID
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetPhoneNumber() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.PhoneNumber
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return &t.Status
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.Tags
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetTitle() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.Title
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVContact_CreateBulkCSVContact_Contacts) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact_Contacts{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVContact_CreateBulkCSVContact struct {
	Contacts []*CreateBulkCSVContact_CreateBulkCSVContact_Contacts "json:\"contacts,omitempty\" graphql:\"contacts\""
}

func (t *CreateBulkCSVContact_CreateBulkCSVContact) GetContacts() []*CreateBulkCSVContact_CreateBulkCSVContact_Contacts {
	if t == nil {
		t = &CreateBulkCSVContact_CreateBulkCSVContact{}
	}
	return t.Contacts
}

type CreateContact_CreateContact_Contact struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	ID          string           "json:\"id\" graphql:\"id\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateContact_CreateContact_Contact) GetAddress() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.Address
}
func (t *CreateContact_CreateContact_Contact) GetCompany() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.Company
}
func (t *CreateContact_CreateContact_Contact) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.CreatedAt
}
func (t *CreateContact_CreateContact_Contact) GetCreatedBy() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.CreatedBy
}
func (t *CreateContact_CreateContact_Contact) GetEmail() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.Email
}
func (t *CreateContact_CreateContact_Contact) GetFullName() string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.FullName
}
func (t *CreateContact_CreateContact_Contact) GetID() string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.ID
}
func (t *CreateContact_CreateContact_Contact) GetOwnerID() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.OwnerID
}
func (t *CreateContact_CreateContact_Contact) GetPhoneNumber() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.PhoneNumber
}
func (t *CreateContact_CreateContact_Contact) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return &t.Status
}
func (t *CreateContact_CreateContact_Contact) GetTags() []string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.Tags
}
func (t *CreateContact_CreateContact_Contact) GetTitle() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.Title
}
func (t *CreateContact_CreateContact_Contact) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.UpdatedAt
}
func (t *CreateContact_CreateContact_Contact) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateContact_CreateContact_Contact{}
	}
	return t.UpdatedBy
}

type CreateContact_CreateContact struct {
	Contact CreateContact_CreateContact_Contact "json:\"contact\" graphql:\"contact\""
}

func (t *CreateContact_CreateContact) GetContact() *CreateContact_CreateContact_Contact {
	if t == nil {
		t = &CreateContact_CreateContact{}
	}
	return &t.Contact
}

type DeleteContact_DeleteContact struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteContact_DeleteContact) GetDeletedID() string {
	if t == nil {
		t = &DeleteContact_DeleteContact{}
	}
	return t.DeletedID
}

type GetAllContacts_Contacts_Edges_Node struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	ID          string           "json:\"id\" graphql:\"id\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllContacts_Contacts_Edges_Node) GetAddress() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.Address
}
func (t *GetAllContacts_Contacts_Edges_Node) GetCompany() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.Company
}
func (t *GetAllContacts_Contacts_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllContacts_Contacts_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllContacts_Contacts_Edges_Node) GetEmail() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.Email
}
func (t *GetAllContacts_Contacts_Edges_Node) GetFullName() string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.FullName
}
func (t *GetAllContacts_Contacts_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllContacts_Contacts_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllContacts_Contacts_Edges_Node) GetPhoneNumber() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.PhoneNumber
}
func (t *GetAllContacts_Contacts_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllContacts_Contacts_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllContacts_Contacts_Edges_Node) GetTitle() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.Title
}
func (t *GetAllContacts_Contacts_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllContacts_Contacts_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllContacts_Contacts_Edges struct {
	Node *GetAllContacts_Contacts_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllContacts_Contacts_Edges) GetNode() *GetAllContacts_Contacts_Edges_Node {
	if t == nil {
		t = &GetAllContacts_Contacts_Edges{}
	}
	return t.Node
}

type GetAllContacts_Contacts struct {
	Edges []*GetAllContacts_Contacts_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllContacts_Contacts) GetEdges() []*GetAllContacts_Contacts_Edges {
	if t == nil {
		t = &GetAllContacts_Contacts{}
	}
	return t.Edges
}

type GetContactByID_Contact struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	ID          string           "json:\"id\" graphql:\"id\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetContactByID_Contact) GetAddress() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.Address
}
func (t *GetContactByID_Contact) GetCompany() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.Company
}
func (t *GetContactByID_Contact) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.CreatedAt
}
func (t *GetContactByID_Contact) GetCreatedBy() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.CreatedBy
}
func (t *GetContactByID_Contact) GetEmail() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.Email
}
func (t *GetContactByID_Contact) GetFullName() string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.FullName
}
func (t *GetContactByID_Contact) GetID() string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.ID
}
func (t *GetContactByID_Contact) GetOwnerID() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.OwnerID
}
func (t *GetContactByID_Contact) GetPhoneNumber() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.PhoneNumber
}
func (t *GetContactByID_Contact) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return &t.Status
}
func (t *GetContactByID_Contact) GetTags() []string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.Tags
}
func (t *GetContactByID_Contact) GetTitle() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.Title
}
func (t *GetContactByID_Contact) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.UpdatedAt
}
func (t *GetContactByID_Contact) GetUpdatedBy() *string {
	if t == nil {
		t = &GetContactByID_Contact{}
	}
	return t.UpdatedBy
}

type GetContacts_Contacts_Edges_Node struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	ID          string           "json:\"id\" graphql:\"id\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetContacts_Contacts_Edges_Node) GetAddress() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.Address
}
func (t *GetContacts_Contacts_Edges_Node) GetCompany() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.Company
}
func (t *GetContacts_Contacts_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetContacts_Contacts_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetContacts_Contacts_Edges_Node) GetEmail() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.Email
}
func (t *GetContacts_Contacts_Edges_Node) GetFullName() string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.FullName
}
func (t *GetContacts_Contacts_Edges_Node) GetID() string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.ID
}
func (t *GetContacts_Contacts_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetContacts_Contacts_Edges_Node) GetPhoneNumber() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.PhoneNumber
}
func (t *GetContacts_Contacts_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return &t.Status
}
func (t *GetContacts_Contacts_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.Tags
}
func (t *GetContacts_Contacts_Edges_Node) GetTitle() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.Title
}
func (t *GetContacts_Contacts_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetContacts_Contacts_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetContacts_Contacts_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetContacts_Contacts_Edges struct {
	Node *GetContacts_Contacts_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetContacts_Contacts_Edges) GetNode() *GetContacts_Contacts_Edges_Node {
	if t == nil {
		t = &GetContacts_Contacts_Edges{}
	}
	return t.Node
}

type GetContacts_Contacts struct {
	Edges []*GetContacts_Contacts_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetContacts_Contacts) GetEdges() []*GetContacts_Contacts_Edges {
	if t == nil {
		t = &GetContacts_Contacts{}
	}
	return t.Edges
}

type UpdateContact_UpdateContact_Contact struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	ID          string           "json:\"id\" graphql:\"id\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateContact_UpdateContact_Contact) GetAddress() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.Address
}
func (t *UpdateContact_UpdateContact_Contact) GetCompany() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.Company
}
func (t *UpdateContact_UpdateContact_Contact) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.CreatedAt
}
func (t *UpdateContact_UpdateContact_Contact) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.CreatedBy
}
func (t *UpdateContact_UpdateContact_Contact) GetEmail() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.Email
}
func (t *UpdateContact_UpdateContact_Contact) GetFullName() string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.FullName
}
func (t *UpdateContact_UpdateContact_Contact) GetID() string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.ID
}
func (t *UpdateContact_UpdateContact_Contact) GetOwnerID() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.OwnerID
}
func (t *UpdateContact_UpdateContact_Contact) GetPhoneNumber() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.PhoneNumber
}
func (t *UpdateContact_UpdateContact_Contact) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return &t.Status
}
func (t *UpdateContact_UpdateContact_Contact) GetTags() []string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.Tags
}
func (t *UpdateContact_UpdateContact_Contact) GetTitle() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.Title
}
func (t *UpdateContact_UpdateContact_Contact) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.UpdatedAt
}
func (t *UpdateContact_UpdateContact_Contact) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateContact_UpdateContact_Contact{}
	}
	return t.UpdatedBy
}

type UpdateContact_UpdateContact struct {
	Contact UpdateContact_UpdateContact_Contact "json:\"contact\" graphql:\"contact\""
}

func (t *UpdateContact_UpdateContact) GetContact() *UpdateContact_UpdateContact_Contact {
	if t == nil {
		t = &UpdateContact_UpdateContact{}
	}
	return &t.Contact
}

type GetAllContactHistories_ContactHistories_Edges_Node struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	HistoryTime time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID          string           "json:\"id\" graphql:\"id\""
	Operation   history.OpType   "json:\"operation\" graphql:\"operation\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Ref         *string          "json:\"ref,omitempty\" graphql:\"ref\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetAddress() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Address
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetCompany() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Company
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetEmail() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Email
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetFullName() string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.FullName
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetPhoneNumber() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.PhoneNumber
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetTitle() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Title
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllContactHistories_ContactHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllContactHistories_ContactHistories_Edges struct {
	Node *GetAllContactHistories_ContactHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllContactHistories_ContactHistories_Edges) GetNode() *GetAllContactHistories_ContactHistories_Edges_Node {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories_Edges{}
	}
	return t.Node
}

type GetAllContactHistories_ContactHistories struct {
	Edges []*GetAllContactHistories_ContactHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllContactHistories_ContactHistories) GetEdges() []*GetAllContactHistories_ContactHistories_Edges {
	if t == nil {
		t = &GetAllContactHistories_ContactHistories{}
	}
	return t.Edges
}

type GetContactHistories_ContactHistories_Edges_Node struct {
	Address     *string          "json:\"address,omitempty\" graphql:\"address\""
	Company     *string          "json:\"company,omitempty\" graphql:\"company\""
	CreatedAt   *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email       *string          "json:\"email,omitempty\" graphql:\"email\""
	FullName    string           "json:\"fullName\" graphql:\"fullName\""
	HistoryTime time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID          string           "json:\"id\" graphql:\"id\""
	Operation   history.OpType   "json:\"operation\" graphql:\"operation\""
	OwnerID     *string          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PhoneNumber *string          "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	Ref         *string          "json:\"ref,omitempty\" graphql:\"ref\""
	Status      enums.UserStatus "json:\"status\" graphql:\"status\""
	Tags        []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Title       *string          "json:\"title,omitempty\" graphql:\"title\""
	UpdatedAt   *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetContactHistories_ContactHistories_Edges_Node) GetAddress() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Address
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetCompany() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Company
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetEmail() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Email
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetFullName() string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.FullName
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetPhoneNumber() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.PhoneNumber
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetTitle() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.Title
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetContactHistories_ContactHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetContactHistories_ContactHistories_Edges struct {
	Node *GetContactHistories_ContactHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetContactHistories_ContactHistories_Edges) GetNode() *GetContactHistories_ContactHistories_Edges_Node {
	if t == nil {
		t = &GetContactHistories_ContactHistories_Edges{}
	}
	return t.Node
}

type GetContactHistories_ContactHistories struct {
	Edges []*GetContactHistories_ContactHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetContactHistories_ContactHistories) GetEdges() []*GetContactHistories_ContactHistories_Edges {
	if t == nil {
		t = &GetContactHistories_ContactHistories{}
	}
	return t.Edges
}

type CreateBulkCSVControl_CreateBulkCSVControl_Controls struct {
	Class            *string                "json:\"class,omitempty\" graphql:\"class\""
	ControlNumber    *string                "json:\"controlNumber,omitempty\" graphql:\"controlNumber\""
	ControlType      *string                "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt        *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description      *string                "json:\"description,omitempty\" graphql:\"description\""
	Details          map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family           *string                "json:\"family,omitempty\" graphql:\"family\""
	ID               string                 "json:\"id\" graphql:\"id\""
	MappedFrameworks *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name             string                 "json:\"name\" graphql:\"name\""
	Satisfies        *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Source           *string                "json:\"source,omitempty\" graphql:\"source\""
	Status           *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version          *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetClass() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.Class
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetControlNumber() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.ControlNumber
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetControlType() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.ControlType
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.Description
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.Details
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetFamily() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.Family
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetID() string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.ID
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetMappedFrameworks() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.MappedFrameworks
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetName() string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.Name
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetSatisfies() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.Satisfies
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetSource() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.Source
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetStatus() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.Status
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.Tags
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkCSVControl_CreateBulkCSVControl_Controls) GetVersion() *string {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl_Controls{}
	}
	return t.Version
}

type CreateBulkCSVControl_CreateBulkCSVControl struct {
	Controls []*CreateBulkCSVControl_CreateBulkCSVControl_Controls "json:\"controls,omitempty\" graphql:\"controls\""
}

func (t *CreateBulkCSVControl_CreateBulkCSVControl) GetControls() []*CreateBulkCSVControl_CreateBulkCSVControl_Controls {
	if t == nil {
		t = &CreateBulkCSVControl_CreateBulkCSVControl{}
	}
	return t.Controls
}

type CreateBulkControl_CreateBulkControl_Controls struct {
	Class            *string                "json:\"class,omitempty\" graphql:\"class\""
	ControlNumber    *string                "json:\"controlNumber,omitempty\" graphql:\"controlNumber\""
	ControlType      *string                "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt        *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description      *string                "json:\"description,omitempty\" graphql:\"description\""
	Details          map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family           *string                "json:\"family,omitempty\" graphql:\"family\""
	ID               string                 "json:\"id\" graphql:\"id\""
	MappedFrameworks *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name             string                 "json:\"name\" graphql:\"name\""
	Satisfies        *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Source           *string                "json:\"source,omitempty\" graphql:\"source\""
	Status           *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version          *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateBulkControl_CreateBulkControl_Controls) GetClass() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.Class
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetControlNumber() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.ControlNumber
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetControlType() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.ControlType
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.CreatedAt
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.CreatedBy
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetDescription() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.Description
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.Details
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetFamily() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.Family
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetID() string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.ID
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetMappedFrameworks() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.MappedFrameworks
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetName() string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.Name
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetSatisfies() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.Satisfies
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetSource() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.Source
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetStatus() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.Status
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetTags() []string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.Tags
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkControl_CreateBulkControl_Controls) GetVersion() *string {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl_Controls{}
	}
	return t.Version
}

type CreateBulkControl_CreateBulkControl struct {
	Controls []*CreateBulkControl_CreateBulkControl_Controls "json:\"controls,omitempty\" graphql:\"controls\""
}

func (t *CreateBulkControl_CreateBulkControl) GetControls() []*CreateBulkControl_CreateBulkControl_Controls {
	if t == nil {
		t = &CreateBulkControl_CreateBulkControl{}
	}
	return t.Controls
}

type CreateControl_CreateControl_Control struct {
	Class            *string                "json:\"class,omitempty\" graphql:\"class\""
	ControlNumber    *string                "json:\"controlNumber,omitempty\" graphql:\"controlNumber\""
	ControlType      *string                "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt        *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description      *string                "json:\"description,omitempty\" graphql:\"description\""
	Details          map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family           *string                "json:\"family,omitempty\" graphql:\"family\""
	ID               string                 "json:\"id\" graphql:\"id\""
	MappedFrameworks *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name             string                 "json:\"name\" graphql:\"name\""
	Satisfies        *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Source           *string                "json:\"source,omitempty\" graphql:\"source\""
	Status           *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version          *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateControl_CreateControl_Control) GetClass() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Class
}
func (t *CreateControl_CreateControl_Control) GetControlNumber() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.ControlNumber
}
func (t *CreateControl_CreateControl_Control) GetControlType() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.ControlType
}
func (t *CreateControl_CreateControl_Control) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.CreatedAt
}
func (t *CreateControl_CreateControl_Control) GetCreatedBy() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.CreatedBy
}
func (t *CreateControl_CreateControl_Control) GetDescription() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Description
}
func (t *CreateControl_CreateControl_Control) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Details
}
func (t *CreateControl_CreateControl_Control) GetFamily() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Family
}
func (t *CreateControl_CreateControl_Control) GetID() string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.ID
}
func (t *CreateControl_CreateControl_Control) GetMappedFrameworks() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.MappedFrameworks
}
func (t *CreateControl_CreateControl_Control) GetName() string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Name
}
func (t *CreateControl_CreateControl_Control) GetSatisfies() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Satisfies
}
func (t *CreateControl_CreateControl_Control) GetSource() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Source
}
func (t *CreateControl_CreateControl_Control) GetStatus() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Status
}
func (t *CreateControl_CreateControl_Control) GetTags() []string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Tags
}
func (t *CreateControl_CreateControl_Control) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.UpdatedAt
}
func (t *CreateControl_CreateControl_Control) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.UpdatedBy
}
func (t *CreateControl_CreateControl_Control) GetVersion() *string {
	if t == nil {
		t = &CreateControl_CreateControl_Control{}
	}
	return t.Version
}

type CreateControl_CreateControl struct {
	Control CreateControl_CreateControl_Control "json:\"control\" graphql:\"control\""
}

func (t *CreateControl_CreateControl) GetControl() *CreateControl_CreateControl_Control {
	if t == nil {
		t = &CreateControl_CreateControl{}
	}
	return &t.Control
}

type DeleteControl_DeleteControl struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteControl_DeleteControl) GetDeletedID() string {
	if t == nil {
		t = &DeleteControl_DeleteControl{}
	}
	return t.DeletedID
}

type GetAllControls_Controls_Edges_Node struct {
	Class            *string                "json:\"class,omitempty\" graphql:\"class\""
	ControlNumber    *string                "json:\"controlNumber,omitempty\" graphql:\"controlNumber\""
	ControlType      *string                "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt        *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description      *string                "json:\"description,omitempty\" graphql:\"description\""
	Details          map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family           *string                "json:\"family,omitempty\" graphql:\"family\""
	ID               string                 "json:\"id\" graphql:\"id\""
	MappedFrameworks *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name             string                 "json:\"name\" graphql:\"name\""
	Satisfies        *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Source           *string                "json:\"source,omitempty\" graphql:\"source\""
	Status           *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version          *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetAllControls_Controls_Edges_Node) GetClass() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Class
}
func (t *GetAllControls_Controls_Edges_Node) GetControlNumber() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.ControlNumber
}
func (t *GetAllControls_Controls_Edges_Node) GetControlType() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.ControlType
}
func (t *GetAllControls_Controls_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllControls_Controls_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllControls_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllControls_Controls_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllControls_Controls_Edges_Node) GetFamily() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Family
}
func (t *GetAllControls_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllControls_Controls_Edges_Node) GetMappedFrameworks() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.MappedFrameworks
}
func (t *GetAllControls_Controls_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllControls_Controls_Edges_Node) GetSatisfies() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Satisfies
}
func (t *GetAllControls_Controls_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllControls_Controls_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllControls_Controls_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllControls_Controls_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllControls_Controls_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllControls_Controls_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetAllControls_Controls_Edges_Node{}
	}
	return t.Version
}

type GetAllControls_Controls_Edges struct {
	Node *GetAllControls_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControls_Controls_Edges) GetNode() *GetAllControls_Controls_Edges_Node {
	if t == nil {
		t = &GetAllControls_Controls_Edges{}
	}
	return t.Node
}

type GetAllControls_Controls struct {
	Edges []*GetAllControls_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllControls_Controls) GetEdges() []*GetAllControls_Controls_Edges {
	if t == nil {
		t = &GetAllControls_Controls{}
	}
	return t.Edges
}

type GetControlByID_Control struct {
	Class            *string                "json:\"class,omitempty\" graphql:\"class\""
	ControlNumber    *string                "json:\"controlNumber,omitempty\" graphql:\"controlNumber\""
	ControlType      *string                "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt        *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description      *string                "json:\"description,omitempty\" graphql:\"description\""
	Details          map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family           *string                "json:\"family,omitempty\" graphql:\"family\""
	ID               string                 "json:\"id\" graphql:\"id\""
	MappedFrameworks *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name             string                 "json:\"name\" graphql:\"name\""
	Satisfies        *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Source           *string                "json:\"source,omitempty\" graphql:\"source\""
	Status           *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version          *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetControlByID_Control) GetClass() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Class
}
func (t *GetControlByID_Control) GetControlNumber() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.ControlNumber
}
func (t *GetControlByID_Control) GetControlType() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.ControlType
}
func (t *GetControlByID_Control) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.CreatedAt
}
func (t *GetControlByID_Control) GetCreatedBy() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.CreatedBy
}
func (t *GetControlByID_Control) GetDescription() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Description
}
func (t *GetControlByID_Control) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Details
}
func (t *GetControlByID_Control) GetFamily() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Family
}
func (t *GetControlByID_Control) GetID() string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.ID
}
func (t *GetControlByID_Control) GetMappedFrameworks() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.MappedFrameworks
}
func (t *GetControlByID_Control) GetName() string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Name
}
func (t *GetControlByID_Control) GetSatisfies() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Satisfies
}
func (t *GetControlByID_Control) GetSource() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Source
}
func (t *GetControlByID_Control) GetStatus() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Status
}
func (t *GetControlByID_Control) GetTags() []string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Tags
}
func (t *GetControlByID_Control) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.UpdatedAt
}
func (t *GetControlByID_Control) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.UpdatedBy
}
func (t *GetControlByID_Control) GetVersion() *string {
	if t == nil {
		t = &GetControlByID_Control{}
	}
	return t.Version
}

type GetControls_Controls_Edges_Node struct {
	Class            *string                "json:\"class,omitempty\" graphql:\"class\""
	ControlNumber    *string                "json:\"controlNumber,omitempty\" graphql:\"controlNumber\""
	ControlType      *string                "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt        *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description      *string                "json:\"description,omitempty\" graphql:\"description\""
	Details          map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family           *string                "json:\"family,omitempty\" graphql:\"family\""
	ID               string                 "json:\"id\" graphql:\"id\""
	MappedFrameworks *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name             string                 "json:\"name\" graphql:\"name\""
	Satisfies        *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Source           *string                "json:\"source,omitempty\" graphql:\"source\""
	Status           *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version          *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetControls_Controls_Edges_Node) GetClass() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Class
}
func (t *GetControls_Controls_Edges_Node) GetControlNumber() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.ControlNumber
}
func (t *GetControls_Controls_Edges_Node) GetControlType() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.ControlType
}
func (t *GetControls_Controls_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetControls_Controls_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetControls_Controls_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Description
}
func (t *GetControls_Controls_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Details
}
func (t *GetControls_Controls_Edges_Node) GetFamily() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Family
}
func (t *GetControls_Controls_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.ID
}
func (t *GetControls_Controls_Edges_Node) GetMappedFrameworks() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.MappedFrameworks
}
func (t *GetControls_Controls_Edges_Node) GetName() string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Name
}
func (t *GetControls_Controls_Edges_Node) GetSatisfies() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Satisfies
}
func (t *GetControls_Controls_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Source
}
func (t *GetControls_Controls_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Status
}
func (t *GetControls_Controls_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Tags
}
func (t *GetControls_Controls_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetControls_Controls_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetControls_Controls_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetControls_Controls_Edges_Node{}
	}
	return t.Version
}

type GetControls_Controls_Edges struct {
	Node *GetControls_Controls_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControls_Controls_Edges) GetNode() *GetControls_Controls_Edges_Node {
	if t == nil {
		t = &GetControls_Controls_Edges{}
	}
	return t.Node
}

type GetControls_Controls struct {
	Edges []*GetControls_Controls_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControls_Controls) GetEdges() []*GetControls_Controls_Edges {
	if t == nil {
		t = &GetControls_Controls{}
	}
	return t.Edges
}

type UpdateControl_UpdateControl_Control struct {
	Class            *string                "json:\"class,omitempty\" graphql:\"class\""
	ControlNumber    *string                "json:\"controlNumber,omitempty\" graphql:\"controlNumber\""
	ControlType      *string                "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt        *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description      *string                "json:\"description,omitempty\" graphql:\"description\""
	Details          map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family           *string                "json:\"family,omitempty\" graphql:\"family\""
	ID               string                 "json:\"id\" graphql:\"id\""
	MappedFrameworks *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name             string                 "json:\"name\" graphql:\"name\""
	Satisfies        *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Source           *string                "json:\"source,omitempty\" graphql:\"source\""
	Status           *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version          *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *UpdateControl_UpdateControl_Control) GetClass() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Class
}
func (t *UpdateControl_UpdateControl_Control) GetControlNumber() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.ControlNumber
}
func (t *UpdateControl_UpdateControl_Control) GetControlType() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.ControlType
}
func (t *UpdateControl_UpdateControl_Control) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.CreatedAt
}
func (t *UpdateControl_UpdateControl_Control) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.CreatedBy
}
func (t *UpdateControl_UpdateControl_Control) GetDescription() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Description
}
func (t *UpdateControl_UpdateControl_Control) GetDetails() map[string]interface{} {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Details
}
func (t *UpdateControl_UpdateControl_Control) GetFamily() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Family
}
func (t *UpdateControl_UpdateControl_Control) GetID() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.ID
}
func (t *UpdateControl_UpdateControl_Control) GetMappedFrameworks() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.MappedFrameworks
}
func (t *UpdateControl_UpdateControl_Control) GetName() string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Name
}
func (t *UpdateControl_UpdateControl_Control) GetSatisfies() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Satisfies
}
func (t *UpdateControl_UpdateControl_Control) GetSource() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Source
}
func (t *UpdateControl_UpdateControl_Control) GetStatus() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Status
}
func (t *UpdateControl_UpdateControl_Control) GetTags() []string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Tags
}
func (t *UpdateControl_UpdateControl_Control) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.UpdatedAt
}
func (t *UpdateControl_UpdateControl_Control) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.UpdatedBy
}
func (t *UpdateControl_UpdateControl_Control) GetVersion() *string {
	if t == nil {
		t = &UpdateControl_UpdateControl_Control{}
	}
	return t.Version
}

type UpdateControl_UpdateControl struct {
	Control UpdateControl_UpdateControl_Control "json:\"control\" graphql:\"control\""
}

func (t *UpdateControl_UpdateControl) GetControl() *UpdateControl_UpdateControl_Control {
	if t == nil {
		t = &UpdateControl_UpdateControl{}
	}
	return &t.Control
}

type GetAllControlHistories_ControlHistories_Edges_Node struct {
	Class            *string                "json:\"class,omitempty\" graphql:\"class\""
	ControlNumber    *string                "json:\"controlNumber,omitempty\" graphql:\"controlNumber\""
	ControlType      *string                "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt        *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description      *string                "json:\"description,omitempty\" graphql:\"description\""
	Details          map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family           *string                "json:\"family,omitempty\" graphql:\"family\""
	HistoryTime      time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID               string                 "json:\"id\" graphql:\"id\""
	MappedFrameworks *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name             string                 "json:\"name\" graphql:\"name\""
	Operation        history.OpType         "json:\"operation\" graphql:\"operation\""
	Ref              *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Satisfies        *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Source           *string                "json:\"source,omitempty\" graphql:\"source\""
	Status           *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version          *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetClass() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Class
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetControlNumber() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ControlNumber
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetControlType() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ControlType
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetFamily() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Family
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetMappedFrameworks() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.MappedFrameworks
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetSatisfies() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Satisfies
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllControlHistories_ControlHistories_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Version
}

type GetAllControlHistories_ControlHistories_Edges struct {
	Node *GetAllControlHistories_ControlHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControlHistories_ControlHistories_Edges) GetNode() *GetAllControlHistories_ControlHistories_Edges_Node {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories_Edges{}
	}
	return t.Node
}

type GetAllControlHistories_ControlHistories struct {
	Edges []*GetAllControlHistories_ControlHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllControlHistories_ControlHistories) GetEdges() []*GetAllControlHistories_ControlHistories_Edges {
	if t == nil {
		t = &GetAllControlHistories_ControlHistories{}
	}
	return t.Edges
}

type GetControlHistories_ControlHistories_Edges_Node struct {
	Class            *string                "json:\"class,omitempty\" graphql:\"class\""
	ControlNumber    *string                "json:\"controlNumber,omitempty\" graphql:\"controlNumber\""
	ControlType      *string                "json:\"controlType,omitempty\" graphql:\"controlType\""
	CreatedAt        *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy        *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description      *string                "json:\"description,omitempty\" graphql:\"description\""
	Details          map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family           *string                "json:\"family,omitempty\" graphql:\"family\""
	HistoryTime      time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID               string                 "json:\"id\" graphql:\"id\""
	MappedFrameworks *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name             string                 "json:\"name\" graphql:\"name\""
	Operation        history.OpType         "json:\"operation\" graphql:\"operation\""
	Ref              *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Satisfies        *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Source           *string                "json:\"source,omitempty\" graphql:\"source\""
	Status           *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags             []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt        *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy        *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version          *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetControlHistories_ControlHistories_Edges_Node) GetClass() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Class
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetControlNumber() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ControlNumber
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetControlType() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ControlType
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetFamily() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Family
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetMappedFrameworks() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.MappedFrameworks
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetSatisfies() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Satisfies
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetControlHistories_ControlHistories_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges_Node{}
	}
	return t.Version
}

type GetControlHistories_ControlHistories_Edges struct {
	Node *GetControlHistories_ControlHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlHistories_ControlHistories_Edges) GetNode() *GetControlHistories_ControlHistories_Edges_Node {
	if t == nil {
		t = &GetControlHistories_ControlHistories_Edges{}
	}
	return t.Node
}

type GetControlHistories_ControlHistories struct {
	Edges []*GetControlHistories_ControlHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControlHistories_ControlHistories) GetEdges() []*GetControlHistories_ControlHistories_Edges {
	if t == nil {
		t = &GetControlHistories_ControlHistories{}
	}
	return t.Edges
}

type CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives struct {
	Class                *string                "json:\"class,omitempty\" graphql:\"class\""
	ControlNumber        *string                "json:\"controlNumber,omitempty\" graphql:\"controlNumber\""
	ControlObjectiveType *string                "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	CreatedAt            *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                "json:\"description,omitempty\" graphql:\"description\""
	Details              map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family               *string                "json:\"family,omitempty\" graphql:\"family\""
	ID                   string                 "json:\"id\" graphql:\"id\""
	MappedFrameworks     *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name                 string                 "json:\"name\" graphql:\"name\""
	Source               *string                "json:\"source,omitempty\" graphql:\"source\""
	Status               *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags                 []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version              *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetClass() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Class
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetControlNumber() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.ControlNumber
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetControlObjectiveType() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.ControlObjectiveType
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Description
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Details
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetFamily() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Family
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetID() string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.ID
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetMappedFrameworks() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.MappedFrameworks
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetName() string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Name
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetSource() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Source
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetStatus() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Status
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Tags
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives) GetVersion() *string {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives{}
	}
	return t.Version
}

type CreateBulkCSVControlObjective_CreateBulkCSVControlObjective struct {
	ControlObjectives []*CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives "json:\"controlObjectives,omitempty\" graphql:\"controlObjectives\""
}

func (t *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective) GetControlObjectives() []*CreateBulkCSVControlObjective_CreateBulkCSVControlObjective_ControlObjectives {
	if t == nil {
		t = &CreateBulkCSVControlObjective_CreateBulkCSVControlObjective{}
	}
	return t.ControlObjectives
}

type CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives struct {
	Class                *string                "json:\"class,omitempty\" graphql:\"class\""
	ControlNumber        *string                "json:\"controlNumber,omitempty\" graphql:\"controlNumber\""
	ControlObjectiveType *string                "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	CreatedAt            *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                "json:\"description,omitempty\" graphql:\"description\""
	Details              map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family               *string                "json:\"family,omitempty\" graphql:\"family\""
	ID                   string                 "json:\"id\" graphql:\"id\""
	MappedFrameworks     *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name                 string                 "json:\"name\" graphql:\"name\""
	Source               *string                "json:\"source,omitempty\" graphql:\"source\""
	Status               *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags                 []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version              *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetClass() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Class
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetControlNumber() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.ControlNumber
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetControlObjectiveType() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.ControlObjectiveType
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.CreatedAt
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.CreatedBy
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetDescription() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Description
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Details
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetFamily() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Family
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetID() string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.ID
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetMappedFrameworks() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.MappedFrameworks
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetName() string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Name
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetSource() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Source
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetStatus() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Status
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetTags() []string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Tags
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives) GetVersion() *string {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives{}
	}
	return t.Version
}

type CreateBulkControlObjective_CreateBulkControlObjective struct {
	ControlObjectives []*CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives "json:\"controlObjectives,omitempty\" graphql:\"controlObjectives\""
}

func (t *CreateBulkControlObjective_CreateBulkControlObjective) GetControlObjectives() []*CreateBulkControlObjective_CreateBulkControlObjective_ControlObjectives {
	if t == nil {
		t = &CreateBulkControlObjective_CreateBulkControlObjective{}
	}
	return t.ControlObjectives
}

type CreateControlObjective_CreateControlObjective_ControlObjective struct {
	Class                *string                "json:\"class,omitempty\" graphql:\"class\""
	ControlNumber        *string                "json:\"controlNumber,omitempty\" graphql:\"controlNumber\""
	ControlObjectiveType *string                "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	CreatedAt            *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                "json:\"description,omitempty\" graphql:\"description\""
	Details              map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family               *string                "json:\"family,omitempty\" graphql:\"family\""
	ID                   string                 "json:\"id\" graphql:\"id\""
	MappedFrameworks     *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name                 string                 "json:\"name\" graphql:\"name\""
	Source               *string                "json:\"source,omitempty\" graphql:\"source\""
	Status               *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags                 []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version              *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetClass() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Class
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetControlNumber() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.ControlNumber
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetControlObjectiveType() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.ControlObjectiveType
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.CreatedAt
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetCreatedBy() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.CreatedBy
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetDescription() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Description
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Details
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetFamily() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Family
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetID() string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.ID
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetMappedFrameworks() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.MappedFrameworks
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetName() string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Name
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetSource() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Source
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetStatus() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Status
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetTags() []string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Tags
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.UpdatedAt
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.UpdatedBy
}
func (t *CreateControlObjective_CreateControlObjective_ControlObjective) GetVersion() *string {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective_ControlObjective{}
	}
	return t.Version
}

type CreateControlObjective_CreateControlObjective struct {
	ControlObjective CreateControlObjective_CreateControlObjective_ControlObjective "json:\"controlObjective\" graphql:\"controlObjective\""
}

func (t *CreateControlObjective_CreateControlObjective) GetControlObjective() *CreateControlObjective_CreateControlObjective_ControlObjective {
	if t == nil {
		t = &CreateControlObjective_CreateControlObjective{}
	}
	return &t.ControlObjective
}

type DeleteControlObjective_DeleteControlObjective struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteControlObjective_DeleteControlObjective) GetDeletedID() string {
	if t == nil {
		t = &DeleteControlObjective_DeleteControlObjective{}
	}
	return t.DeletedID
}

type GetAllControlObjectives_ControlObjectives_Edges_Node struct {
	Class                *string                "json:\"class,omitempty\" graphql:\"class\""
	ControlNumber        *string                "json:\"controlNumber,omitempty\" graphql:\"controlNumber\""
	ControlObjectiveType *string                "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	CreatedAt            *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                "json:\"description,omitempty\" graphql:\"description\""
	Details              map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family               *string                "json:\"family,omitempty\" graphql:\"family\""
	ID                   string                 "json:\"id\" graphql:\"id\""
	MappedFrameworks     *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name                 string                 "json:\"name\" graphql:\"name\""
	Source               *string                "json:\"source,omitempty\" graphql:\"source\""
	Status               *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags                 []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version              *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetClass() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Class
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetControlNumber() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.ControlNumber
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetControlObjectiveType() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.ControlObjectiveType
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetFamily() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Family
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetMappedFrameworks() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.MappedFrameworks
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllControlObjectives_ControlObjectives_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Version
}

type GetAllControlObjectives_ControlObjectives_Edges struct {
	Node *GetAllControlObjectives_ControlObjectives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControlObjectives_ControlObjectives_Edges) GetNode() *GetAllControlObjectives_ControlObjectives_Edges_Node {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives_Edges{}
	}
	return t.Node
}

type GetAllControlObjectives_ControlObjectives struct {
	Edges []*GetAllControlObjectives_ControlObjectives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllControlObjectives_ControlObjectives) GetEdges() []*GetAllControlObjectives_ControlObjectives_Edges {
	if t == nil {
		t = &GetAllControlObjectives_ControlObjectives{}
	}
	return t.Edges
}

type GetControlObjectiveByID_ControlObjective struct {
	Class                *string                "json:\"class,omitempty\" graphql:\"class\""
	ControlNumber        *string                "json:\"controlNumber,omitempty\" graphql:\"controlNumber\""
	ControlObjectiveType *string                "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	CreatedAt            *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                "json:\"description,omitempty\" graphql:\"description\""
	Details              map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family               *string                "json:\"family,omitempty\" graphql:\"family\""
	ID                   string                 "json:\"id\" graphql:\"id\""
	MappedFrameworks     *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name                 string                 "json:\"name\" graphql:\"name\""
	Source               *string                "json:\"source,omitempty\" graphql:\"source\""
	Status               *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags                 []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version              *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetControlObjectiveByID_ControlObjective) GetClass() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Class
}
func (t *GetControlObjectiveByID_ControlObjective) GetControlNumber() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.ControlNumber
}
func (t *GetControlObjectiveByID_ControlObjective) GetControlObjectiveType() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.ControlObjectiveType
}
func (t *GetControlObjectiveByID_ControlObjective) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.CreatedAt
}
func (t *GetControlObjectiveByID_ControlObjective) GetCreatedBy() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.CreatedBy
}
func (t *GetControlObjectiveByID_ControlObjective) GetDescription() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Description
}
func (t *GetControlObjectiveByID_ControlObjective) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Details
}
func (t *GetControlObjectiveByID_ControlObjective) GetFamily() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Family
}
func (t *GetControlObjectiveByID_ControlObjective) GetID() string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.ID
}
func (t *GetControlObjectiveByID_ControlObjective) GetMappedFrameworks() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.MappedFrameworks
}
func (t *GetControlObjectiveByID_ControlObjective) GetName() string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Name
}
func (t *GetControlObjectiveByID_ControlObjective) GetSource() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Source
}
func (t *GetControlObjectiveByID_ControlObjective) GetStatus() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Status
}
func (t *GetControlObjectiveByID_ControlObjective) GetTags() []string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Tags
}
func (t *GetControlObjectiveByID_ControlObjective) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.UpdatedAt
}
func (t *GetControlObjectiveByID_ControlObjective) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.UpdatedBy
}
func (t *GetControlObjectiveByID_ControlObjective) GetVersion() *string {
	if t == nil {
		t = &GetControlObjectiveByID_ControlObjective{}
	}
	return t.Version
}

type GetControlObjectives_ControlObjectives_Edges_Node struct {
	Class                *string                "json:\"class,omitempty\" graphql:\"class\""
	ControlNumber        *string                "json:\"controlNumber,omitempty\" graphql:\"controlNumber\""
	ControlObjectiveType *string                "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	CreatedAt            *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                "json:\"description,omitempty\" graphql:\"description\""
	Details              map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family               *string                "json:\"family,omitempty\" graphql:\"family\""
	ID                   string                 "json:\"id\" graphql:\"id\""
	MappedFrameworks     *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name                 string                 "json:\"name\" graphql:\"name\""
	Source               *string                "json:\"source,omitempty\" graphql:\"source\""
	Status               *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags                 []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version              *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetClass() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Class
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetControlNumber() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.ControlNumber
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetControlObjectiveType() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.ControlObjectiveType
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Description
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Details
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetFamily() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Family
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetMappedFrameworks() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.MappedFrameworks
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetName() string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Name
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Source
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Status
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Tags
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetControlObjectives_ControlObjectives_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges_Node{}
	}
	return t.Version
}

type GetControlObjectives_ControlObjectives_Edges struct {
	Node *GetControlObjectives_ControlObjectives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlObjectives_ControlObjectives_Edges) GetNode() *GetControlObjectives_ControlObjectives_Edges_Node {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives_Edges{}
	}
	return t.Node
}

type GetControlObjectives_ControlObjectives struct {
	Edges []*GetControlObjectives_ControlObjectives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControlObjectives_ControlObjectives) GetEdges() []*GetControlObjectives_ControlObjectives_Edges {
	if t == nil {
		t = &GetControlObjectives_ControlObjectives{}
	}
	return t.Edges
}

type UpdateControlObjective_UpdateControlObjective_ControlObjective struct {
	Class                *string                "json:\"class,omitempty\" graphql:\"class\""
	ControlNumber        *string                "json:\"controlNumber,omitempty\" graphql:\"controlNumber\""
	ControlObjectiveType *string                "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	CreatedAt            *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                "json:\"description,omitempty\" graphql:\"description\""
	Details              map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family               *string                "json:\"family,omitempty\" graphql:\"family\""
	ID                   string                 "json:\"id\" graphql:\"id\""
	MappedFrameworks     *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name                 string                 "json:\"name\" graphql:\"name\""
	Source               *string                "json:\"source,omitempty\" graphql:\"source\""
	Status               *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags                 []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version              *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetClass() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Class
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetControlNumber() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.ControlNumber
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetControlObjectiveType() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.ControlObjectiveType
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.CreatedAt
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.CreatedBy
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetDescription() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Description
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetDetails() map[string]interface{} {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Details
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetFamily() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Family
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetID() string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.ID
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetMappedFrameworks() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.MappedFrameworks
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetName() string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Name
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetSource() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Source
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetStatus() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Status
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetTags() []string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Tags
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.UpdatedAt
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.UpdatedBy
}
func (t *UpdateControlObjective_UpdateControlObjective_ControlObjective) GetVersion() *string {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective_ControlObjective{}
	}
	return t.Version
}

type UpdateControlObjective_UpdateControlObjective struct {
	ControlObjective UpdateControlObjective_UpdateControlObjective_ControlObjective "json:\"controlObjective\" graphql:\"controlObjective\""
}

func (t *UpdateControlObjective_UpdateControlObjective) GetControlObjective() *UpdateControlObjective_UpdateControlObjective_ControlObjective {
	if t == nil {
		t = &UpdateControlObjective_UpdateControlObjective{}
	}
	return &t.ControlObjective
}

type GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node struct {
	Class                *string                "json:\"class,omitempty\" graphql:\"class\""
	ControlNumber        *string                "json:\"controlNumber,omitempty\" graphql:\"controlNumber\""
	ControlObjectiveType *string                "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	CreatedAt            *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                "json:\"description,omitempty\" graphql:\"description\""
	Details              map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family               *string                "json:\"family,omitempty\" graphql:\"family\""
	HistoryTime          time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID                   string                 "json:\"id\" graphql:\"id\""
	MappedFrameworks     *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name                 string                 "json:\"name\" graphql:\"name\""
	Operation            history.OpType         "json:\"operation\" graphql:\"operation\""
	Ref                  *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Source               *string                "json:\"source,omitempty\" graphql:\"source\""
	Status               *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags                 []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version              *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetClass() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Class
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetControlNumber() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.ControlNumber
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetControlObjectiveType() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.ControlObjectiveType
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetFamily() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Family
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetMappedFrameworks() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.MappedFrameworks
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Version
}

type GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges struct {
	Node *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges) GetNode() *GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges_Node {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges{}
	}
	return t.Node
}

type GetAllControlObjectiveHistories_ControlObjectiveHistories struct {
	Edges []*GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllControlObjectiveHistories_ControlObjectiveHistories) GetEdges() []*GetAllControlObjectiveHistories_ControlObjectiveHistories_Edges {
	if t == nil {
		t = &GetAllControlObjectiveHistories_ControlObjectiveHistories{}
	}
	return t.Edges
}

type GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node struct {
	Class                *string                "json:\"class,omitempty\" graphql:\"class\""
	ControlNumber        *string                "json:\"controlNumber,omitempty\" graphql:\"controlNumber\""
	ControlObjectiveType *string                "json:\"controlObjectiveType,omitempty\" graphql:\"controlObjectiveType\""
	CreatedAt            *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string                "json:\"description,omitempty\" graphql:\"description\""
	Details              map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family               *string                "json:\"family,omitempty\" graphql:\"family\""
	HistoryTime          time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID                   string                 "json:\"id\" graphql:\"id\""
	MappedFrameworks     *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name                 string                 "json:\"name\" graphql:\"name\""
	Operation            history.OpType         "json:\"operation\" graphql:\"operation\""
	Ref                  *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Source               *string                "json:\"source,omitempty\" graphql:\"source\""
	Status               *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags                 []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version              *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetClass() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Class
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetControlNumber() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.ControlNumber
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetControlObjectiveType() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.ControlObjectiveType
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetFamily() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Family
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetMappedFrameworks() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.MappedFrameworks
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node{}
	}
	return t.Version
}

type GetControlObjectiveHistories_ControlObjectiveHistories_Edges struct {
	Node *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetControlObjectiveHistories_ControlObjectiveHistories_Edges) GetNode() *GetControlObjectiveHistories_ControlObjectiveHistories_Edges_Node {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories_Edges{}
	}
	return t.Node
}

type GetControlObjectiveHistories_ControlObjectiveHistories struct {
	Edges []*GetControlObjectiveHistories_ControlObjectiveHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetControlObjectiveHistories_ControlObjectiveHistories) GetEdges() []*GetControlObjectiveHistories_ControlObjectiveHistories_Edges {
	if t == nil {
		t = &GetControlObjectiveHistories_ControlObjectiveHistories{}
	}
	return t.Edges
}

type CreateDocumentData_CreateDocumentData_DocumentData struct {
	ID         string          "json:\"id\" graphql:\"id\""
	TemplateID string          "json:\"templateID\" graphql:\"templateID\""
	Data       json.RawMessage "json:\"data\" graphql:\"data\""
	CreatedAt  *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt  *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetID() string {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.ID
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetTemplateID() string {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.TemplateID
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetData() *json.RawMessage {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return &t.Data
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.CreatedAt
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetCreatedBy() *string {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.CreatedBy
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.UpdatedAt
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.UpdatedBy
}

type CreateDocumentData_CreateDocumentData struct {
	DocumentData CreateDocumentData_CreateDocumentData_DocumentData "json:\"documentData\" graphql:\"documentData\""
}

func (t *CreateDocumentData_CreateDocumentData) GetDocumentData() *CreateDocumentData_CreateDocumentData_DocumentData {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData{}
	}
	return &t.DocumentData
}

type DeleteDocumentData_DeleteDocumentData struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteDocumentData_DeleteDocumentData) GetDeletedID() string {
	if t == nil {
		t = &DeleteDocumentData_DeleteDocumentData{}
	}
	return t.DeletedID
}

type GetDocumentDataByID_DocumentData struct {
	ID         string          "json:\"id\" graphql:\"id\""
	TemplateID string          "json:\"templateID\" graphql:\"templateID\""
	Data       json.RawMessage "json:\"data\" graphql:\"data\""
	CreatedAt  *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt  *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetDocumentDataByID_DocumentData) GetID() string {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.ID
}
func (t *GetDocumentDataByID_DocumentData) GetTemplateID() string {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.TemplateID
}
func (t *GetDocumentDataByID_DocumentData) GetData() *json.RawMessage {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return &t.Data
}
func (t *GetDocumentDataByID_DocumentData) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.CreatedAt
}
func (t *GetDocumentDataByID_DocumentData) GetCreatedBy() *string {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.CreatedBy
}
func (t *GetDocumentDataByID_DocumentData) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.UpdatedAt
}
func (t *GetDocumentDataByID_DocumentData) GetUpdatedBy() *string {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.UpdatedBy
}

type UpdateDocumentData_UpdateDocumentData_DocumentData struct {
	ID         string          "json:\"id\" graphql:\"id\""
	TemplateID string          "json:\"templateID\" graphql:\"templateID\""
	Data       json.RawMessage "json:\"data\" graphql:\"data\""
	CreatedAt  *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt  *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetID() string {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.ID
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetTemplateID() string {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.TemplateID
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetData() *json.RawMessage {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return &t.Data
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.CreatedAt
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.CreatedBy
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.UpdatedAt
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.UpdatedBy
}

type UpdateDocumentData_UpdateDocumentData struct {
	DocumentData UpdateDocumentData_UpdateDocumentData_DocumentData "json:\"documentData\" graphql:\"documentData\""
}

func (t *UpdateDocumentData_UpdateDocumentData) GetDocumentData() *UpdateDocumentData_UpdateDocumentData_DocumentData {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData{}
	}
	return &t.DocumentData
}

type GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node struct {
	CreatedAt   *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Data        json.RawMessage "json:\"data\" graphql:\"data\""
	HistoryTime time.Time       "json:\"historyTime\" graphql:\"historyTime\""
	ID          string          "json:\"id\" graphql:\"id\""
	Operation   history.OpType  "json:\"operation\" graphql:\"operation\""
	OwnerID     *string         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string         "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string        "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateID  string          "json:\"templateID\" graphql:\"templateID\""
	UpdatedAt   *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetData() *json.RawMessage {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return &t.Data
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetTemplateID() string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.TemplateID
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllDocumentDataHistories_DocumentDataHistories_Edges struct {
	Node *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllDocumentDataHistories_DocumentDataHistories_Edges) GetNode() *GetAllDocumentDataHistories_DocumentDataHistories_Edges_Node {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories_Edges{}
	}
	return t.Node
}

type GetAllDocumentDataHistories_DocumentDataHistories struct {
	Edges []*GetAllDocumentDataHistories_DocumentDataHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllDocumentDataHistories_DocumentDataHistories) GetEdges() []*GetAllDocumentDataHistories_DocumentDataHistories_Edges {
	if t == nil {
		t = &GetAllDocumentDataHistories_DocumentDataHistories{}
	}
	return t.Edges
}

type GetDocumentDataHistories_DocumentDataHistories_Edges_Node struct {
	CreatedAt   *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Data        json.RawMessage "json:\"data\" graphql:\"data\""
	HistoryTime time.Time       "json:\"historyTime\" graphql:\"historyTime\""
	ID          string          "json:\"id\" graphql:\"id\""
	Operation   history.OpType  "json:\"operation\" graphql:\"operation\""
	OwnerID     *string         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string         "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string        "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateID  string          "json:\"templateID\" graphql:\"templateID\""
	UpdatedAt   *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetData() *json.RawMessage {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return &t.Data
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetTemplateID() string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.TemplateID
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetDocumentDataHistories_DocumentDataHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetDocumentDataHistories_DocumentDataHistories_Edges struct {
	Node *GetDocumentDataHistories_DocumentDataHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetDocumentDataHistories_DocumentDataHistories_Edges) GetNode() *GetDocumentDataHistories_DocumentDataHistories_Edges_Node {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories_Edges{}
	}
	return t.Node
}

type GetDocumentDataHistories_DocumentDataHistories struct {
	Edges []*GetDocumentDataHistories_DocumentDataHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetDocumentDataHistories_DocumentDataHistories) GetEdges() []*GetDocumentDataHistories_DocumentDataHistories_Edges {
	if t == nil {
		t = &GetDocumentDataHistories_DocumentDataHistories{}
	}
	return t.Edges
}

type CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Plan struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Plan) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Plan{}
	}
	return t.ID
}
func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Plan) GetName() string {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Plan{}
	}
	return t.Name
}

type CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Organization) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Organization{}
	}
	return t.ID
}
func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Organization) GetName() string {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Organization{}
	}
	return t.Name
}

type CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements struct {
	ID                     string                                                                      "json:\"id\" graphql:\"id\""
	Plan                   CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Plan         "json:\"plan\" graphql:\"plan\""
	Expires                bool                                                                        "json:\"expires\" graphql:\"expires\""
	ExpiresAt              *time.Time                                                                  "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Cancelled              bool                                                                        "json:\"cancelled\" graphql:\"cancelled\""
	ExternalCustomerID     *string                                                                     "json:\"externalCustomerID,omitempty\" graphql:\"externalCustomerID\""
	ExternalSubscriptionID *string                                                                     "json:\"externalSubscriptionID,omitempty\" graphql:\"externalSubscriptionID\""
	Organization           CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Organization "json:\"organization\" graphql:\"organization\""
}

func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements{}
	}
	return t.ID
}
func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements) GetPlan() *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Plan {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements{}
	}
	return &t.Plan
}
func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements) GetExpires() bool {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements{}
	}
	return t.Expires
}
func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements) GetExpiresAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements{}
	}
	return t.ExpiresAt
}
func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements) GetCancelled() bool {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements{}
	}
	return t.Cancelled
}
func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements) GetExternalCustomerID() *string {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements{}
	}
	return t.ExternalCustomerID
}
func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements) GetExternalSubscriptionID() *string {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements{}
	}
	return t.ExternalSubscriptionID
}
func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements) GetOrganization() *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Organization {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements{}
	}
	return &t.Organization
}

type CreateBulkCSVEntitlement_CreateBulkCSVEntitlement struct {
	Entitlements []*CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements "json:\"entitlements,omitempty\" graphql:\"entitlements\""
}

func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement) GetEntitlements() []*CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement{}
	}
	return t.Entitlements
}

type CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Plan struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Plan) GetID() string {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Plan{}
	}
	return t.ID
}
func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Plan) GetName() string {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Plan{}
	}
	return t.Name
}

type CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Organization) GetID() string {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Organization{}
	}
	return t.ID
}
func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Organization) GetName() string {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Organization{}
	}
	return t.Name
}

type CreateBulkEntitlement_CreateBulkEntitlement_Entitlements struct {
	ID                     string                                                                "json:\"id\" graphql:\"id\""
	Plan                   CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Plan         "json:\"plan\" graphql:\"plan\""
	Organization           CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Organization "json:\"organization\" graphql:\"organization\""
	Expires                bool                                                                  "json:\"expires\" graphql:\"expires\""
	ExpiresAt              *time.Time                                                            "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Cancelled              bool                                                                  "json:\"cancelled\" graphql:\"cancelled\""
	ExternalCustomerID     *string                                                               "json:\"externalCustomerID,omitempty\" graphql:\"externalCustomerID\""
	ExternalSubscriptionID *string                                                               "json:\"externalSubscriptionID,omitempty\" graphql:\"externalSubscriptionID\""
}

func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements) GetID() string {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements{}
	}
	return t.ID
}
func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements) GetPlan() *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Plan {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements{}
	}
	return &t.Plan
}
func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements) GetOrganization() *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Organization {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements{}
	}
	return &t.Organization
}
func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements) GetExpires() bool {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements{}
	}
	return t.Expires
}
func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements) GetExpiresAt() *time.Time {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements{}
	}
	return t.ExpiresAt
}
func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements) GetCancelled() bool {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements{}
	}
	return t.Cancelled
}
func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements) GetExternalCustomerID() *string {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements{}
	}
	return t.ExternalCustomerID
}
func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements) GetExternalSubscriptionID() *string {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements{}
	}
	return t.ExternalSubscriptionID
}

type CreateBulkEntitlement_CreateBulkEntitlement struct {
	Entitlements []*CreateBulkEntitlement_CreateBulkEntitlement_Entitlements "json:\"entitlements,omitempty\" graphql:\"entitlements\""
}

func (t *CreateBulkEntitlement_CreateBulkEntitlement) GetEntitlements() []*CreateBulkEntitlement_CreateBulkEntitlement_Entitlements {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement{}
	}
	return t.Entitlements
}

type CreateEntitlement_CreateEntitlement_Entitlement_Plan struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateEntitlement_CreateEntitlement_Entitlement_Plan) GetID() string {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement_Plan{}
	}
	return t.ID
}
func (t *CreateEntitlement_CreateEntitlement_Entitlement_Plan) GetName() string {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement_Plan{}
	}
	return t.Name
}

type CreateEntitlement_CreateEntitlement_Entitlement_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateEntitlement_CreateEntitlement_Entitlement_Organization) GetID() string {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement_Organization{}
	}
	return t.ID
}
func (t *CreateEntitlement_CreateEntitlement_Entitlement_Organization) GetName() string {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement_Organization{}
	}
	return t.Name
}

type CreateEntitlement_CreateEntitlement_Entitlement struct {
	ID                     string                                                       "json:\"id\" graphql:\"id\""
	Plan                   CreateEntitlement_CreateEntitlement_Entitlement_Plan         "json:\"plan\" graphql:\"plan\""
	Organization           CreateEntitlement_CreateEntitlement_Entitlement_Organization "json:\"organization\" graphql:\"organization\""
	Expires                bool                                                         "json:\"expires\" graphql:\"expires\""
	ExpiresAt              *time.Time                                                   "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Cancelled              bool                                                         "json:\"cancelled\" graphql:\"cancelled\""
	ExternalCustomerID     *string                                                      "json:\"externalCustomerID,omitempty\" graphql:\"externalCustomerID\""
	ExternalSubscriptionID *string                                                      "json:\"externalSubscriptionID,omitempty\" graphql:\"externalSubscriptionID\""
}

func (t *CreateEntitlement_CreateEntitlement_Entitlement) GetID() string {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement{}
	}
	return t.ID
}
func (t *CreateEntitlement_CreateEntitlement_Entitlement) GetPlan() *CreateEntitlement_CreateEntitlement_Entitlement_Plan {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement{}
	}
	return &t.Plan
}
func (t *CreateEntitlement_CreateEntitlement_Entitlement) GetOrganization() *CreateEntitlement_CreateEntitlement_Entitlement_Organization {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement{}
	}
	return &t.Organization
}
func (t *CreateEntitlement_CreateEntitlement_Entitlement) GetExpires() bool {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement{}
	}
	return t.Expires
}
func (t *CreateEntitlement_CreateEntitlement_Entitlement) GetExpiresAt() *time.Time {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement{}
	}
	return t.ExpiresAt
}
func (t *CreateEntitlement_CreateEntitlement_Entitlement) GetCancelled() bool {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement{}
	}
	return t.Cancelled
}
func (t *CreateEntitlement_CreateEntitlement_Entitlement) GetExternalCustomerID() *string {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement{}
	}
	return t.ExternalCustomerID
}
func (t *CreateEntitlement_CreateEntitlement_Entitlement) GetExternalSubscriptionID() *string {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement{}
	}
	return t.ExternalSubscriptionID
}

type CreateEntitlement_CreateEntitlement struct {
	Entitlement CreateEntitlement_CreateEntitlement_Entitlement "json:\"entitlement\" graphql:\"entitlement\""
}

func (t *CreateEntitlement_CreateEntitlement) GetEntitlement() *CreateEntitlement_CreateEntitlement_Entitlement {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement{}
	}
	return &t.Entitlement
}

type DeleteEntitlement_DeleteEntitlement struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteEntitlement_DeleteEntitlement) GetDeletedID() string {
	if t == nil {
		t = &DeleteEntitlement_DeleteEntitlement{}
	}
	return t.DeletedID
}

type GetAllEntitlements_Entitlements_Edges_Node_Plan_Features_Feature struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllEntitlements_Entitlements_Edges_Node_Plan_Features_Feature) GetID() string {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node_Plan_Features_Feature{}
	}
	return t.ID
}
func (t *GetAllEntitlements_Entitlements_Edges_Node_Plan_Features_Feature) GetName() string {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node_Plan_Features_Feature{}
	}
	return t.Name
}

type GetAllEntitlements_Entitlements_Edges_Node_Plan_Features struct {
	Metadata map[string]interface{}                                           "json:\"metadata,omitempty\" graphql:\"metadata\""
	Feature  GetAllEntitlements_Entitlements_Edges_Node_Plan_Features_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *GetAllEntitlements_Entitlements_Edges_Node_Plan_Features) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node_Plan_Features{}
	}
	return t.Metadata
}
func (t *GetAllEntitlements_Entitlements_Edges_Node_Plan_Features) GetFeature() *GetAllEntitlements_Entitlements_Edges_Node_Plan_Features_Feature {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node_Plan_Features{}
	}
	return &t.Feature
}

type GetAllEntitlements_Entitlements_Edges_Node_Plan struct {
	ID       string                                                      "json:\"id\" graphql:\"id\""
	Name     string                                                      "json:\"name\" graphql:\"name\""
	Features []*GetAllEntitlements_Entitlements_Edges_Node_Plan_Features "json:\"features,omitempty\" graphql:\"features\""
}

func (t *GetAllEntitlements_Entitlements_Edges_Node_Plan) GetID() string {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node_Plan{}
	}
	return t.ID
}
func (t *GetAllEntitlements_Entitlements_Edges_Node_Plan) GetName() string {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node_Plan{}
	}
	return t.Name
}
func (t *GetAllEntitlements_Entitlements_Edges_Node_Plan) GetFeatures() []*GetAllEntitlements_Entitlements_Edges_Node_Plan_Features {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node_Plan{}
	}
	return t.Features
}

type GetAllEntitlements_Entitlements_Edges_Node_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllEntitlements_Entitlements_Edges_Node_Organization) GetID() string {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node_Organization{}
	}
	return t.ID
}
func (t *GetAllEntitlements_Entitlements_Edges_Node_Organization) GetName() string {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node_Organization{}
	}
	return t.Name
}

type GetAllEntitlements_Entitlements_Edges_Node struct {
	ID                     string                                                  "json:\"id\" graphql:\"id\""
	Plan                   GetAllEntitlements_Entitlements_Edges_Node_Plan         "json:\"plan\" graphql:\"plan\""
	Organization           GetAllEntitlements_Entitlements_Edges_Node_Organization "json:\"organization\" graphql:\"organization\""
	Expires                bool                                                    "json:\"expires\" graphql:\"expires\""
	ExpiresAt              *time.Time                                              "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Cancelled              bool                                                    "json:\"cancelled\" graphql:\"cancelled\""
	ExternalCustomerID     *string                                                 "json:\"externalCustomerID,omitempty\" graphql:\"externalCustomerID\""
	ExternalSubscriptionID *string                                                 "json:\"externalSubscriptionID,omitempty\" graphql:\"externalSubscriptionID\""
}

func (t *GetAllEntitlements_Entitlements_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEntitlements_Entitlements_Edges_Node) GetPlan() *GetAllEntitlements_Entitlements_Edges_Node_Plan {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node{}
	}
	return &t.Plan
}
func (t *GetAllEntitlements_Entitlements_Edges_Node) GetOrganization() *GetAllEntitlements_Entitlements_Edges_Node_Organization {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node{}
	}
	return &t.Organization
}
func (t *GetAllEntitlements_Entitlements_Edges_Node) GetExpires() bool {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node{}
	}
	return t.Expires
}
func (t *GetAllEntitlements_Entitlements_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetAllEntitlements_Entitlements_Edges_Node) GetCancelled() bool {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node{}
	}
	return t.Cancelled
}
func (t *GetAllEntitlements_Entitlements_Edges_Node) GetExternalCustomerID() *string {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node{}
	}
	return t.ExternalCustomerID
}
func (t *GetAllEntitlements_Entitlements_Edges_Node) GetExternalSubscriptionID() *string {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node{}
	}
	return t.ExternalSubscriptionID
}

type GetAllEntitlements_Entitlements_Edges struct {
	Node *GetAllEntitlements_Entitlements_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEntitlements_Entitlements_Edges) GetNode() *GetAllEntitlements_Entitlements_Edges_Node {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges{}
	}
	return t.Node
}

type GetAllEntitlements_Entitlements struct {
	Edges []*GetAllEntitlements_Entitlements_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEntitlements_Entitlements) GetEdges() []*GetAllEntitlements_Entitlements_Edges {
	if t == nil {
		t = &GetAllEntitlements_Entitlements{}
	}
	return t.Edges
}

type GetEntitlementByID_Entitlement_Plan_Features_Feature struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetEntitlementByID_Entitlement_Plan_Features_Feature) GetID() string {
	if t == nil {
		t = &GetEntitlementByID_Entitlement_Plan_Features_Feature{}
	}
	return t.ID
}
func (t *GetEntitlementByID_Entitlement_Plan_Features_Feature) GetName() string {
	if t == nil {
		t = &GetEntitlementByID_Entitlement_Plan_Features_Feature{}
	}
	return t.Name
}

type GetEntitlementByID_Entitlement_Plan_Features struct {
	Metadata map[string]interface{}                               "json:\"metadata,omitempty\" graphql:\"metadata\""
	Feature  GetEntitlementByID_Entitlement_Plan_Features_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *GetEntitlementByID_Entitlement_Plan_Features) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEntitlementByID_Entitlement_Plan_Features{}
	}
	return t.Metadata
}
func (t *GetEntitlementByID_Entitlement_Plan_Features) GetFeature() *GetEntitlementByID_Entitlement_Plan_Features_Feature {
	if t == nil {
		t = &GetEntitlementByID_Entitlement_Plan_Features{}
	}
	return &t.Feature
}

type GetEntitlementByID_Entitlement_Plan struct {
	ID       string                                          "json:\"id\" graphql:\"id\""
	Name     string                                          "json:\"name\" graphql:\"name\""
	Features []*GetEntitlementByID_Entitlement_Plan_Features "json:\"features,omitempty\" graphql:\"features\""
}

func (t *GetEntitlementByID_Entitlement_Plan) GetID() string {
	if t == nil {
		t = &GetEntitlementByID_Entitlement_Plan{}
	}
	return t.ID
}
func (t *GetEntitlementByID_Entitlement_Plan) GetName() string {
	if t == nil {
		t = &GetEntitlementByID_Entitlement_Plan{}
	}
	return t.Name
}
func (t *GetEntitlementByID_Entitlement_Plan) GetFeatures() []*GetEntitlementByID_Entitlement_Plan_Features {
	if t == nil {
		t = &GetEntitlementByID_Entitlement_Plan{}
	}
	return t.Features
}

type GetEntitlementByID_Entitlement_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetEntitlementByID_Entitlement_Organization) GetID() string {
	if t == nil {
		t = &GetEntitlementByID_Entitlement_Organization{}
	}
	return t.ID
}
func (t *GetEntitlementByID_Entitlement_Organization) GetName() string {
	if t == nil {
		t = &GetEntitlementByID_Entitlement_Organization{}
	}
	return t.Name
}

type GetEntitlementByID_Entitlement struct {
	ID                     string                                      "json:\"id\" graphql:\"id\""
	Plan                   GetEntitlementByID_Entitlement_Plan         "json:\"plan\" graphql:\"plan\""
	Organization           GetEntitlementByID_Entitlement_Organization "json:\"organization\" graphql:\"organization\""
	Expires                bool                                        "json:\"expires\" graphql:\"expires\""
	ExpiresAt              *time.Time                                  "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Cancelled              bool                                        "json:\"cancelled\" graphql:\"cancelled\""
	ExternalCustomerID     *string                                     "json:\"externalCustomerID,omitempty\" graphql:\"externalCustomerID\""
	ExternalSubscriptionID *string                                     "json:\"externalSubscriptionID,omitempty\" graphql:\"externalSubscriptionID\""
}

func (t *GetEntitlementByID_Entitlement) GetID() string {
	if t == nil {
		t = &GetEntitlementByID_Entitlement{}
	}
	return t.ID
}
func (t *GetEntitlementByID_Entitlement) GetPlan() *GetEntitlementByID_Entitlement_Plan {
	if t == nil {
		t = &GetEntitlementByID_Entitlement{}
	}
	return &t.Plan
}
func (t *GetEntitlementByID_Entitlement) GetOrganization() *GetEntitlementByID_Entitlement_Organization {
	if t == nil {
		t = &GetEntitlementByID_Entitlement{}
	}
	return &t.Organization
}
func (t *GetEntitlementByID_Entitlement) GetExpires() bool {
	if t == nil {
		t = &GetEntitlementByID_Entitlement{}
	}
	return t.Expires
}
func (t *GetEntitlementByID_Entitlement) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetEntitlementByID_Entitlement{}
	}
	return t.ExpiresAt
}
func (t *GetEntitlementByID_Entitlement) GetCancelled() bool {
	if t == nil {
		t = &GetEntitlementByID_Entitlement{}
	}
	return t.Cancelled
}
func (t *GetEntitlementByID_Entitlement) GetExternalCustomerID() *string {
	if t == nil {
		t = &GetEntitlementByID_Entitlement{}
	}
	return t.ExternalCustomerID
}
func (t *GetEntitlementByID_Entitlement) GetExternalSubscriptionID() *string {
	if t == nil {
		t = &GetEntitlementByID_Entitlement{}
	}
	return t.ExternalSubscriptionID
}

type GetEntitlements_Entitlements_Edges_Node_Plan_Features_Feature struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetEntitlements_Entitlements_Edges_Node_Plan_Features_Feature) GetID() string {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node_Plan_Features_Feature{}
	}
	return t.ID
}
func (t *GetEntitlements_Entitlements_Edges_Node_Plan_Features_Feature) GetName() string {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node_Plan_Features_Feature{}
	}
	return t.Name
}

type GetEntitlements_Entitlements_Edges_Node_Plan_Features struct {
	Metadata map[string]interface{}                                        "json:\"metadata,omitempty\" graphql:\"metadata\""
	Feature  GetEntitlements_Entitlements_Edges_Node_Plan_Features_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *GetEntitlements_Entitlements_Edges_Node_Plan_Features) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node_Plan_Features{}
	}
	return t.Metadata
}
func (t *GetEntitlements_Entitlements_Edges_Node_Plan_Features) GetFeature() *GetEntitlements_Entitlements_Edges_Node_Plan_Features_Feature {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node_Plan_Features{}
	}
	return &t.Feature
}

type GetEntitlements_Entitlements_Edges_Node_Plan struct {
	ID       string                                                   "json:\"id\" graphql:\"id\""
	Name     string                                                   "json:\"name\" graphql:\"name\""
	Features []*GetEntitlements_Entitlements_Edges_Node_Plan_Features "json:\"features,omitempty\" graphql:\"features\""
}

func (t *GetEntitlements_Entitlements_Edges_Node_Plan) GetID() string {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node_Plan{}
	}
	return t.ID
}
func (t *GetEntitlements_Entitlements_Edges_Node_Plan) GetName() string {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node_Plan{}
	}
	return t.Name
}
func (t *GetEntitlements_Entitlements_Edges_Node_Plan) GetFeatures() []*GetEntitlements_Entitlements_Edges_Node_Plan_Features {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node_Plan{}
	}
	return t.Features
}

type GetEntitlements_Entitlements_Edges_Node_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetEntitlements_Entitlements_Edges_Node_Organization) GetID() string {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node_Organization{}
	}
	return t.ID
}
func (t *GetEntitlements_Entitlements_Edges_Node_Organization) GetName() string {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node_Organization{}
	}
	return t.Name
}

type GetEntitlements_Entitlements_Edges_Node struct {
	ID                     string                                               "json:\"id\" graphql:\"id\""
	Plan                   GetEntitlements_Entitlements_Edges_Node_Plan         "json:\"plan\" graphql:\"plan\""
	Organization           GetEntitlements_Entitlements_Edges_Node_Organization "json:\"organization\" graphql:\"organization\""
	Expires                bool                                                 "json:\"expires\" graphql:\"expires\""
	ExpiresAt              *time.Time                                           "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Cancelled              bool                                                 "json:\"cancelled\" graphql:\"cancelled\""
	ExternalCustomerID     *string                                              "json:\"externalCustomerID,omitempty\" graphql:\"externalCustomerID\""
	ExternalSubscriptionID *string                                              "json:\"externalSubscriptionID,omitempty\" graphql:\"externalSubscriptionID\""
}

func (t *GetEntitlements_Entitlements_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node{}
	}
	return t.ID
}
func (t *GetEntitlements_Entitlements_Edges_Node) GetPlan() *GetEntitlements_Entitlements_Edges_Node_Plan {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node{}
	}
	return &t.Plan
}
func (t *GetEntitlements_Entitlements_Edges_Node) GetOrganization() *GetEntitlements_Entitlements_Edges_Node_Organization {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node{}
	}
	return &t.Organization
}
func (t *GetEntitlements_Entitlements_Edges_Node) GetExpires() bool {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node{}
	}
	return t.Expires
}
func (t *GetEntitlements_Entitlements_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetEntitlements_Entitlements_Edges_Node) GetCancelled() bool {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node{}
	}
	return t.Cancelled
}
func (t *GetEntitlements_Entitlements_Edges_Node) GetExternalCustomerID() *string {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node{}
	}
	return t.ExternalCustomerID
}
func (t *GetEntitlements_Entitlements_Edges_Node) GetExternalSubscriptionID() *string {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node{}
	}
	return t.ExternalSubscriptionID
}

type GetEntitlements_Entitlements_Edges struct {
	Node *GetEntitlements_Entitlements_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntitlements_Entitlements_Edges) GetNode() *GetEntitlements_Entitlements_Edges_Node {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges{}
	}
	return t.Node
}

type GetEntitlements_Entitlements struct {
	Edges []*GetEntitlements_Entitlements_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEntitlements_Entitlements) GetEdges() []*GetEntitlements_Entitlements_Edges {
	if t == nil {
		t = &GetEntitlements_Entitlements{}
	}
	return t.Edges
}

type UpdateEntitlement_UpdateEntitlement_Entitlement_Plan struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateEntitlement_UpdateEntitlement_Entitlement_Plan) GetID() string {
	if t == nil {
		t = &UpdateEntitlement_UpdateEntitlement_Entitlement_Plan{}
	}
	return t.ID
}
func (t *UpdateEntitlement_UpdateEntitlement_Entitlement_Plan) GetName() string {
	if t == nil {
		t = &UpdateEntitlement_UpdateEntitlement_Entitlement_Plan{}
	}
	return t.Name
}

type UpdateEntitlement_UpdateEntitlement_Entitlement struct {
	ID                     string                                               "json:\"id\" graphql:\"id\""
	Plan                   UpdateEntitlement_UpdateEntitlement_Entitlement_Plan "json:\"plan\" graphql:\"plan\""
	Expires                bool                                                 "json:\"expires\" graphql:\"expires\""
	ExpiresAt              *time.Time                                           "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Cancelled              bool                                                 "json:\"cancelled\" graphql:\"cancelled\""
	ExternalCustomerID     *string                                              "json:\"externalCustomerID,omitempty\" graphql:\"externalCustomerID\""
	ExternalSubscriptionID *string                                              "json:\"externalSubscriptionID,omitempty\" graphql:\"externalSubscriptionID\""
}

func (t *UpdateEntitlement_UpdateEntitlement_Entitlement) GetID() string {
	if t == nil {
		t = &UpdateEntitlement_UpdateEntitlement_Entitlement{}
	}
	return t.ID
}
func (t *UpdateEntitlement_UpdateEntitlement_Entitlement) GetPlan() *UpdateEntitlement_UpdateEntitlement_Entitlement_Plan {
	if t == nil {
		t = &UpdateEntitlement_UpdateEntitlement_Entitlement{}
	}
	return &t.Plan
}
func (t *UpdateEntitlement_UpdateEntitlement_Entitlement) GetExpires() bool {
	if t == nil {
		t = &UpdateEntitlement_UpdateEntitlement_Entitlement{}
	}
	return t.Expires
}
func (t *UpdateEntitlement_UpdateEntitlement_Entitlement) GetExpiresAt() *time.Time {
	if t == nil {
		t = &UpdateEntitlement_UpdateEntitlement_Entitlement{}
	}
	return t.ExpiresAt
}
func (t *UpdateEntitlement_UpdateEntitlement_Entitlement) GetCancelled() bool {
	if t == nil {
		t = &UpdateEntitlement_UpdateEntitlement_Entitlement{}
	}
	return t.Cancelled
}
func (t *UpdateEntitlement_UpdateEntitlement_Entitlement) GetExternalCustomerID() *string {
	if t == nil {
		t = &UpdateEntitlement_UpdateEntitlement_Entitlement{}
	}
	return t.ExternalCustomerID
}
func (t *UpdateEntitlement_UpdateEntitlement_Entitlement) GetExternalSubscriptionID() *string {
	if t == nil {
		t = &UpdateEntitlement_UpdateEntitlement_Entitlement{}
	}
	return t.ExternalSubscriptionID
}

type UpdateEntitlement_UpdateEntitlement struct {
	Entitlement UpdateEntitlement_UpdateEntitlement_Entitlement "json:\"entitlement\" graphql:\"entitlement\""
}

func (t *UpdateEntitlement_UpdateEntitlement) GetEntitlement() *UpdateEntitlement_UpdateEntitlement_Entitlement {
	if t == nil {
		t = &UpdateEntitlement_UpdateEntitlement{}
	}
	return &t.Entitlement
}

type GetAllEntitlementHistories_EntitlementHistories_Edges_Node struct {
	Cancelled              bool           "json:\"cancelled\" graphql:\"cancelled\""
	CreatedAt              *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Expires                bool           "json:\"expires\" graphql:\"expires\""
	ExpiresAt              *time.Time     "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ExternalCustomerID     *string        "json:\"externalCustomerID,omitempty\" graphql:\"externalCustomerID\""
	ExternalSubscriptionID *string        "json:\"externalSubscriptionID,omitempty\" graphql:\"externalSubscriptionID\""
	HistoryTime            time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID                     string         "json:\"id\" graphql:\"id\""
	Operation              history.OpType "json:\"operation\" graphql:\"operation\""
	OrganizationID         string         "json:\"organizationID\" graphql:\"organizationID\""
	OwnerID                *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PlanID                 string         "json:\"planID\" graphql:\"planID\""
	Ref                    *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags                   []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllEntitlementHistories_EntitlementHistories_Edges_Node) GetCancelled() bool {
	if t == nil {
		t = &GetAllEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.Cancelled
}
func (t *GetAllEntitlementHistories_EntitlementHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEntitlementHistories_EntitlementHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEntitlementHistories_EntitlementHistories_Edges_Node) GetExpires() bool {
	if t == nil {
		t = &GetAllEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.Expires
}
func (t *GetAllEntitlementHistories_EntitlementHistories_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAllEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetAllEntitlementHistories_EntitlementHistories_Edges_Node) GetExternalCustomerID() *string {
	if t == nil {
		t = &GetAllEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.ExternalCustomerID
}
func (t *GetAllEntitlementHistories_EntitlementHistories_Edges_Node) GetExternalSubscriptionID() *string {
	if t == nil {
		t = &GetAllEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.ExternalSubscriptionID
}
func (t *GetAllEntitlementHistories_EntitlementHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllEntitlementHistories_EntitlementHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEntitlementHistories_EntitlementHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllEntitlementHistories_EntitlementHistories_Edges_Node) GetOrganizationID() string {
	if t == nil {
		t = &GetAllEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetAllEntitlementHistories_EntitlementHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllEntitlementHistories_EntitlementHistories_Edges_Node) GetPlanID() string {
	if t == nil {
		t = &GetAllEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.PlanID
}
func (t *GetAllEntitlementHistories_EntitlementHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllEntitlementHistories_EntitlementHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEntitlementHistories_EntitlementHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEntitlementHistories_EntitlementHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllEntitlementHistories_EntitlementHistories_Edges struct {
	Node *GetAllEntitlementHistories_EntitlementHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEntitlementHistories_EntitlementHistories_Edges) GetNode() *GetAllEntitlementHistories_EntitlementHistories_Edges_Node {
	if t == nil {
		t = &GetAllEntitlementHistories_EntitlementHistories_Edges{}
	}
	return t.Node
}

type GetAllEntitlementHistories_EntitlementHistories struct {
	Edges []*GetAllEntitlementHistories_EntitlementHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEntitlementHistories_EntitlementHistories) GetEdges() []*GetAllEntitlementHistories_EntitlementHistories_Edges {
	if t == nil {
		t = &GetAllEntitlementHistories_EntitlementHistories{}
	}
	return t.Edges
}

type GetEntitlementHistories_EntitlementHistories_Edges_Node struct {
	Cancelled              bool           "json:\"cancelled\" graphql:\"cancelled\""
	CreatedAt              *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy              *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Expires                bool           "json:\"expires\" graphql:\"expires\""
	ExpiresAt              *time.Time     "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ExternalCustomerID     *string        "json:\"externalCustomerID,omitempty\" graphql:\"externalCustomerID\""
	ExternalSubscriptionID *string        "json:\"externalSubscriptionID,omitempty\" graphql:\"externalSubscriptionID\""
	HistoryTime            time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID                     string         "json:\"id\" graphql:\"id\""
	Operation              history.OpType "json:\"operation\" graphql:\"operation\""
	OrganizationID         string         "json:\"organizationID\" graphql:\"organizationID\""
	OwnerID                *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PlanID                 string         "json:\"planID\" graphql:\"planID\""
	Ref                    *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags                   []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt              *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy              *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntitlementHistories_EntitlementHistories_Edges_Node) GetCancelled() bool {
	if t == nil {
		t = &GetEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.Cancelled
}
func (t *GetEntitlementHistories_EntitlementHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetEntitlementHistories_EntitlementHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetEntitlementHistories_EntitlementHistories_Edges_Node) GetExpires() bool {
	if t == nil {
		t = &GetEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.Expires
}
func (t *GetEntitlementHistories_EntitlementHistories_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetEntitlementHistories_EntitlementHistories_Edges_Node) GetExternalCustomerID() *string {
	if t == nil {
		t = &GetEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.ExternalCustomerID
}
func (t *GetEntitlementHistories_EntitlementHistories_Edges_Node) GetExternalSubscriptionID() *string {
	if t == nil {
		t = &GetEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.ExternalSubscriptionID
}
func (t *GetEntitlementHistories_EntitlementHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetEntitlementHistories_EntitlementHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetEntitlementHistories_EntitlementHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetEntitlementHistories_EntitlementHistories_Edges_Node) GetOrganizationID() string {
	if t == nil {
		t = &GetEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetEntitlementHistories_EntitlementHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetEntitlementHistories_EntitlementHistories_Edges_Node) GetPlanID() string {
	if t == nil {
		t = &GetEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.PlanID
}
func (t *GetEntitlementHistories_EntitlementHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetEntitlementHistories_EntitlementHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEntitlementHistories_EntitlementHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEntitlementHistories_EntitlementHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntitlementHistories_EntitlementHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetEntitlementHistories_EntitlementHistories_Edges struct {
	Node *GetEntitlementHistories_EntitlementHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntitlementHistories_EntitlementHistories_Edges) GetNode() *GetEntitlementHistories_EntitlementHistories_Edges_Node {
	if t == nil {
		t = &GetEntitlementHistories_EntitlementHistories_Edges{}
	}
	return t.Node
}

type GetEntitlementHistories_EntitlementHistories struct {
	Edges []*GetEntitlementHistories_EntitlementHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEntitlementHistories_EntitlementHistories) GetEdges() []*GetEntitlementHistories_EntitlementHistories_Edges {
	if t == nil {
		t = &GetEntitlementHistories_EntitlementHistories{}
	}
	return t.Edges
}

type CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans struct {
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	DisplayName *string                "json:\"displayName,omitempty\" graphql:\"displayName\""
	Metadata    map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	Version     string                 "json:\"version\" graphql:\"version\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
}

func (t *CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans{}
	}
	return t.ID
}
func (t *CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans) GetName() string {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans{}
	}
	return t.Name
}
func (t *CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans) GetDisplayName() *string {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans{}
	}
	return t.DisplayName
}
func (t *CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans{}
	}
	return t.Metadata
}
func (t *CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans{}
	}
	return t.Tags
}
func (t *CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans) GetVersion() string {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans{}
	}
	return t.Version
}
func (t *CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans{}
	}
	return t.Description
}

type CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan struct {
	EntitlementPlans []*CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans "json:\"entitlementPlans,omitempty\" graphql:\"entitlementPlans\""
}

func (t *CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan) GetEntitlementPlans() []*CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan{}
	}
	return t.EntitlementPlans
}

type CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans struct {
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	DisplayName *string                "json:\"displayName,omitempty\" graphql:\"displayName\""
	Metadata    map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	Version     string                 "json:\"version\" graphql:\"version\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
}

func (t *CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans) GetID() string {
	if t == nil {
		t = &CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans{}
	}
	return t.ID
}
func (t *CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans) GetName() string {
	if t == nil {
		t = &CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans{}
	}
	return t.Name
}
func (t *CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans) GetDisplayName() *string {
	if t == nil {
		t = &CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans{}
	}
	return t.DisplayName
}
func (t *CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans{}
	}
	return t.Metadata
}
func (t *CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans) GetTags() []string {
	if t == nil {
		t = &CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans{}
	}
	return t.Tags
}
func (t *CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans) GetVersion() string {
	if t == nil {
		t = &CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans{}
	}
	return t.Version
}
func (t *CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans) GetDescription() *string {
	if t == nil {
		t = &CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans{}
	}
	return t.Description
}

type CreateBulkEntitlementPlan_CreateBulkEntitlementPlan struct {
	EntitlementPlans []*CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans "json:\"entitlementPlans,omitempty\" graphql:\"entitlementPlans\""
}

func (t *CreateBulkEntitlementPlan_CreateBulkEntitlementPlan) GetEntitlementPlans() []*CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans {
	if t == nil {
		t = &CreateBulkEntitlementPlan_CreateBulkEntitlementPlan{}
	}
	return t.EntitlementPlans
}

type CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan struct {
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	DisplayName *string                "json:\"displayName,omitempty\" graphql:\"displayName\""
	Metadata    map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	Version     string                 "json:\"version\" graphql:\"version\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
}

func (t *CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan) GetID() string {
	if t == nil {
		t = &CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan{}
	}
	return t.ID
}
func (t *CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan) GetName() string {
	if t == nil {
		t = &CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan{}
	}
	return t.Name
}
func (t *CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan) GetDisplayName() *string {
	if t == nil {
		t = &CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan{}
	}
	return t.DisplayName
}
func (t *CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan{}
	}
	return t.Metadata
}
func (t *CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan) GetTags() []string {
	if t == nil {
		t = &CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan{}
	}
	return t.Tags
}
func (t *CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan) GetVersion() string {
	if t == nil {
		t = &CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan{}
	}
	return t.Version
}
func (t *CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan) GetDescription() *string {
	if t == nil {
		t = &CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan{}
	}
	return t.Description
}

type CreateEntitlementPlan_CreateEntitlementPlan struct {
	EntitlementPlan CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan "json:\"entitlementPlan\" graphql:\"entitlementPlan\""
}

func (t *CreateEntitlementPlan_CreateEntitlementPlan) GetEntitlementPlan() *CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan {
	if t == nil {
		t = &CreateEntitlementPlan_CreateEntitlementPlan{}
	}
	return &t.EntitlementPlan
}

type DeleteEntitlementPlan_DeleteEntitlementPlan struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteEntitlementPlan_DeleteEntitlementPlan) GetDeletedID() string {
	if t == nil {
		t = &DeleteEntitlementPlan_DeleteEntitlementPlan{}
	}
	return t.DeletedID
}

type GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature struct {
	ID       string                 "json:\"id\" graphql:\"id\""
	Metadata map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	Name     string                 "json:\"name\" graphql:\"name\""
}

func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature) GetID() string {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature{}
	}
	return t.ID
}
func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature{}
	}
	return t.Metadata
}
func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature) GetName() string {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature{}
	}
	return t.Name
}

type GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features struct {
	Feature  GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature "json:\"feature\" graphql:\"feature\""
	Metadata map[string]interface{}                                              "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags     []string                                                            "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features) GetFeature() *GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features{}
	}
	return &t.Feature
}
func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features{}
	}
	return t.Metadata
}
func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features) GetTags() []string {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features{}
	}
	return t.Tags
}

type GetAllEntitlementPlans_EntitlementPlans_Edges_Node struct {
	ID          string                                                         "json:\"id\" graphql:\"id\""
	Name        string                                                         "json:\"name\" graphql:\"name\""
	DisplayName *string                                                        "json:\"displayName,omitempty\" graphql:\"displayName\""
	Metadata    map[string]interface{}                                         "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags        []string                                                       "json:\"tags,omitempty\" graphql:\"tags\""
	Version     string                                                         "json:\"version\" graphql:\"version\""
	Description *string                                                        "json:\"description,omitempty\" graphql:\"description\""
	Features    []*GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features "json:\"features,omitempty\" graphql:\"features\""
}

func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node) GetVersion() string {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Version
}
func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node) GetFeatures() []*GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Features
}

type GetAllEntitlementPlans_EntitlementPlans_Edges struct {
	Node *GetAllEntitlementPlans_EntitlementPlans_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEntitlementPlans_EntitlementPlans_Edges) GetNode() *GetAllEntitlementPlans_EntitlementPlans_Edges_Node {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges{}
	}
	return t.Node
}

type GetAllEntitlementPlans_EntitlementPlans struct {
	Edges []*GetAllEntitlementPlans_EntitlementPlans_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEntitlementPlans_EntitlementPlans) GetEdges() []*GetAllEntitlementPlans_EntitlementPlans_Edges {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans{}
	}
	return t.Edges
}

type GetEntitlementPlanByID_EntitlementPlan_Features_Feature struct {
	ID       string                 "json:\"id\" graphql:\"id\""
	Metadata map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	Name     string                 "json:\"name\" graphql:\"name\""
}

func (t *GetEntitlementPlanByID_EntitlementPlan_Features_Feature) GetID() string {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan_Features_Feature{}
	}
	return t.ID
}
func (t *GetEntitlementPlanByID_EntitlementPlan_Features_Feature) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan_Features_Feature{}
	}
	return t.Metadata
}
func (t *GetEntitlementPlanByID_EntitlementPlan_Features_Feature) GetName() string {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan_Features_Feature{}
	}
	return t.Name
}

type GetEntitlementPlanByID_EntitlementPlan_Features struct {
	Feature  GetEntitlementPlanByID_EntitlementPlan_Features_Feature "json:\"feature\" graphql:\"feature\""
	Metadata map[string]interface{}                                  "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags     []string                                                "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GetEntitlementPlanByID_EntitlementPlan_Features) GetFeature() *GetEntitlementPlanByID_EntitlementPlan_Features_Feature {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan_Features{}
	}
	return &t.Feature
}
func (t *GetEntitlementPlanByID_EntitlementPlan_Features) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan_Features{}
	}
	return t.Metadata
}
func (t *GetEntitlementPlanByID_EntitlementPlan_Features) GetTags() []string {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan_Features{}
	}
	return t.Tags
}

type GetEntitlementPlanByID_EntitlementPlan struct {
	ID          string                                             "json:\"id\" graphql:\"id\""
	Name        string                                             "json:\"name\" graphql:\"name\""
	DisplayName *string                                            "json:\"displayName,omitempty\" graphql:\"displayName\""
	Metadata    map[string]interface{}                             "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags        []string                                           "json:\"tags,omitempty\" graphql:\"tags\""
	Version     string                                             "json:\"version\" graphql:\"version\""
	Description *string                                            "json:\"description,omitempty\" graphql:\"description\""
	Features    []*GetEntitlementPlanByID_EntitlementPlan_Features "json:\"features,omitempty\" graphql:\"features\""
}

func (t *GetEntitlementPlanByID_EntitlementPlan) GetID() string {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan{}
	}
	return t.ID
}
func (t *GetEntitlementPlanByID_EntitlementPlan) GetName() string {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan{}
	}
	return t.Name
}
func (t *GetEntitlementPlanByID_EntitlementPlan) GetDisplayName() *string {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan{}
	}
	return t.DisplayName
}
func (t *GetEntitlementPlanByID_EntitlementPlan) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan{}
	}
	return t.Metadata
}
func (t *GetEntitlementPlanByID_EntitlementPlan) GetTags() []string {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan{}
	}
	return t.Tags
}
func (t *GetEntitlementPlanByID_EntitlementPlan) GetVersion() string {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan{}
	}
	return t.Version
}
func (t *GetEntitlementPlanByID_EntitlementPlan) GetDescription() *string {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan{}
	}
	return t.Description
}
func (t *GetEntitlementPlanByID_EntitlementPlan) GetFeatures() []*GetEntitlementPlanByID_EntitlementPlan_Features {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan{}
	}
	return t.Features
}

type GetEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature struct {
	ID       string                 "json:\"id\" graphql:\"id\""
	Metadata map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	Name     string                 "json:\"name\" graphql:\"name\""
}

func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature) GetID() string {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature{}
	}
	return t.ID
}
func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature{}
	}
	return t.Metadata
}
func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature) GetName() string {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature{}
	}
	return t.Name
}

type GetEntitlementPlans_EntitlementPlans_Edges_Node_Features struct {
	Feature  GetEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature "json:\"feature\" graphql:\"feature\""
	Metadata map[string]interface{}                                           "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags     []string                                                         "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node_Features) GetFeature() *GetEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node_Features{}
	}
	return &t.Feature
}
func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node_Features) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node_Features{}
	}
	return t.Metadata
}
func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node_Features) GetTags() []string {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node_Features{}
	}
	return t.Tags
}

type GetEntitlementPlans_EntitlementPlans_Edges_Node struct {
	ID          string                                                      "json:\"id\" graphql:\"id\""
	Name        string                                                      "json:\"name\" graphql:\"name\""
	DisplayName *string                                                     "json:\"displayName,omitempty\" graphql:\"displayName\""
	Metadata    map[string]interface{}                                      "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags        []string                                                    "json:\"tags,omitempty\" graphql:\"tags\""
	Version     string                                                      "json:\"version\" graphql:\"version\""
	Description *string                                                     "json:\"description,omitempty\" graphql:\"description\""
	Features    []*GetEntitlementPlans_EntitlementPlans_Edges_Node_Features "json:\"features,omitempty\" graphql:\"features\""
}

func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.ID
}
func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node) GetName() string {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Name
}
func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node) GetVersion() string {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Version
}
func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Description
}
func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node) GetFeatures() []*GetEntitlementPlans_EntitlementPlans_Edges_Node_Features {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Features
}

type GetEntitlementPlans_EntitlementPlans_Edges struct {
	Node *GetEntitlementPlans_EntitlementPlans_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntitlementPlans_EntitlementPlans_Edges) GetNode() *GetEntitlementPlans_EntitlementPlans_Edges_Node {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges{}
	}
	return t.Node
}

type GetEntitlementPlans_EntitlementPlans struct {
	Edges []*GetEntitlementPlans_EntitlementPlans_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEntitlementPlans_EntitlementPlans) GetEdges() []*GetEntitlementPlans_EntitlementPlans_Edges {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans{}
	}
	return t.Edges
}

type UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan struct {
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	DisplayName *string                "json:\"displayName,omitempty\" graphql:\"displayName\""
	Metadata    map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	Version     string                 "json:\"version\" graphql:\"version\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
}

func (t *UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan) GetID() string {
	if t == nil {
		t = &UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan{}
	}
	return t.ID
}
func (t *UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan) GetName() string {
	if t == nil {
		t = &UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan{}
	}
	return t.Name
}
func (t *UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan) GetDisplayName() *string {
	if t == nil {
		t = &UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan{}
	}
	return t.DisplayName
}
func (t *UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan{}
	}
	return t.Metadata
}
func (t *UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan) GetTags() []string {
	if t == nil {
		t = &UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan{}
	}
	return t.Tags
}
func (t *UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan) GetVersion() string {
	if t == nil {
		t = &UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan{}
	}
	return t.Version
}
func (t *UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan) GetDescription() *string {
	if t == nil {
		t = &UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan{}
	}
	return t.Description
}

type UpdateEntitlementPlan_UpdateEntitlementPlan struct {
	EntitlementPlan UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan "json:\"entitlementPlan\" graphql:\"entitlementPlan\""
}

func (t *UpdateEntitlementPlan_UpdateEntitlementPlan) GetEntitlementPlan() *UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan {
	if t == nil {
		t = &UpdateEntitlementPlan_UpdateEntitlementPlan{}
	}
	return &t.EntitlementPlan
}

type CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Plan struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Plan) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Plan{}
	}
	return t.ID
}
func (t *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Plan) GetName() string {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Plan{}
	}
	return t.Name
}

type CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Feature struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Feature) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Feature{}
	}
	return t.ID
}
func (t *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Feature) GetName() string {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Feature{}
	}
	return t.Name
}

type CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures struct {
	ID       string                                                                                                  "json:\"id\" graphql:\"id\""
	Metadata map[string]interface{}                                                                                  "json:\"metadata,omitempty\" graphql:\"metadata\""
	Plan     CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Plan    "json:\"plan\" graphql:\"plan\""
	Feature  CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures{}
	}
	return t.ID
}
func (t *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures{}
	}
	return t.Metadata
}
func (t *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures) GetPlan() *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Plan {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures{}
	}
	return &t.Plan
}
func (t *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures) GetFeature() *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Feature {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures{}
	}
	return &t.Feature
}

type CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature struct {
	EntitlementPlanFeatures []*CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures "json:\"entitlementPlanFeatures,omitempty\" graphql:\"entitlementPlanFeatures\""
}

func (t *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature) GetEntitlementPlanFeatures() []*CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature{}
	}
	return t.EntitlementPlanFeatures
}

type CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Plan struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Plan) GetID() string {
	if t == nil {
		t = &CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Plan{}
	}
	return t.ID
}
func (t *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Plan) GetName() string {
	if t == nil {
		t = &CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Plan{}
	}
	return t.Name
}

type CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Feature struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Feature) GetID() string {
	if t == nil {
		t = &CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Feature{}
	}
	return t.ID
}
func (t *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Feature) GetName() string {
	if t == nil {
		t = &CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Feature{}
	}
	return t.Name
}

type CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures struct {
	ID       string                                                                                            "json:\"id\" graphql:\"id\""
	Metadata map[string]interface{}                                                                            "json:\"metadata,omitempty\" graphql:\"metadata\""
	Plan     CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Plan    "json:\"plan\" graphql:\"plan\""
	Feature  CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures) GetID() string {
	if t == nil {
		t = &CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures{}
	}
	return t.ID
}
func (t *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures{}
	}
	return t.Metadata
}
func (t *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures) GetPlan() *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Plan {
	if t == nil {
		t = &CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures{}
	}
	return &t.Plan
}
func (t *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures) GetFeature() *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Feature {
	if t == nil {
		t = &CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures{}
	}
	return &t.Feature
}

type CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature struct {
	EntitlementPlanFeatures []*CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures "json:\"entitlementPlanFeatures,omitempty\" graphql:\"entitlementPlanFeatures\""
}

func (t *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature) GetEntitlementPlanFeatures() []*CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures {
	if t == nil {
		t = &CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature{}
	}
	return t.EntitlementPlanFeatures
}

type CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Plan struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Plan) GetID() string {
	if t == nil {
		t = &CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Plan{}
	}
	return t.ID
}
func (t *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Plan) GetName() string {
	if t == nil {
		t = &CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Plan{}
	}
	return t.Name
}

type CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Feature struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Feature) GetID() string {
	if t == nil {
		t = &CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Feature{}
	}
	return t.ID
}
func (t *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Feature) GetName() string {
	if t == nil {
		t = &CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Feature{}
	}
	return t.Name
}

type CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature struct {
	ID       string                                                                                   "json:\"id\" graphql:\"id\""
	Metadata map[string]interface{}                                                                   "json:\"metadata,omitempty\" graphql:\"metadata\""
	Plan     CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Plan    "json:\"plan\" graphql:\"plan\""
	Feature  CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature) GetID() string {
	if t == nil {
		t = &CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature{}
	}
	return t.ID
}
func (t *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature{}
	}
	return t.Metadata
}
func (t *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature) GetPlan() *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Plan {
	if t == nil {
		t = &CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature{}
	}
	return &t.Plan
}
func (t *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature) GetFeature() *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Feature {
	if t == nil {
		t = &CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature{}
	}
	return &t.Feature
}

type CreateEntitlementPlanFeature_CreateEntitlementPlanFeature struct {
	EntitlementPlanFeature CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature "json:\"entitlementPlanFeature\" graphql:\"entitlementPlanFeature\""
}

func (t *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature) GetEntitlementPlanFeature() *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature {
	if t == nil {
		t = &CreateEntitlementPlanFeature_CreateEntitlementPlanFeature{}
	}
	return &t.EntitlementPlanFeature
}

type DeleteEntitlementPlanFeature_DeleteEntitlementPlanFeature struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteEntitlementPlanFeature_DeleteEntitlementPlanFeature) GetDeletedID() string {
	if t == nil {
		t = &DeleteEntitlementPlanFeature_DeleteEntitlementPlanFeature{}
	}
	return t.DeletedID
}

type GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature) GetID() string {
	if t == nil {
		t = &GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature{}
	}
	return t.ID
}
func (t *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature) GetName() string {
	if t == nil {
		t = &GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature{}
	}
	return t.Name
}

type GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan) GetID() string {
	if t == nil {
		t = &GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan{}
	}
	return t.ID
}
func (t *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan) GetName() string {
	if t == nil {
		t = &GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan{}
	}
	return t.Name
}

type GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node struct {
	ID       string                                                                   "json:\"id\" graphql:\"id\""
	Feature  GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature "json:\"feature\" graphql:\"feature\""
	Metadata map[string]interface{}                                                   "json:\"metadata,omitempty\" graphql:\"metadata\""
	Plan     GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan    "json:\"plan\" graphql:\"plan\""
}

func (t *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node) GetFeature() *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature {
	if t == nil {
		t = &GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node{}
	}
	return &t.Feature
}
func (t *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node) GetPlan() *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan {
	if t == nil {
		t = &GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node{}
	}
	return &t.Plan
}

type GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges struct {
	Node *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges) GetNode() *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node {
	if t == nil {
		t = &GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges{}
	}
	return t.Node
}

type GetAllEntitlementPlanFeatures_EntitlementPlanFeatures struct {
	Edges []*GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures) GetEdges() []*GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges {
	if t == nil {
		t = &GetAllEntitlementPlanFeatures_EntitlementPlanFeatures{}
	}
	return t.Edges
}

type GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Plan struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Plan) GetID() string {
	if t == nil {
		t = &GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Plan{}
	}
	return t.ID
}
func (t *GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Plan) GetName() string {
	if t == nil {
		t = &GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Plan{}
	}
	return t.Name
}

type GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Feature struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Feature) GetID() string {
	if t == nil {
		t = &GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Feature{}
	}
	return t.ID
}
func (t *GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Feature) GetName() string {
	if t == nil {
		t = &GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Feature{}
	}
	return t.Name
}

type GetEntitlementPlanFeatureByID_EntitlementPlanFeature struct {
	ID       string                                                       "json:\"id\" graphql:\"id\""
	Metadata map[string]interface{}                                       "json:\"metadata,omitempty\" graphql:\"metadata\""
	Plan     GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Plan    "json:\"plan\" graphql:\"plan\""
	Feature  GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *GetEntitlementPlanFeatureByID_EntitlementPlanFeature) GetID() string {
	if t == nil {
		t = &GetEntitlementPlanFeatureByID_EntitlementPlanFeature{}
	}
	return t.ID
}
func (t *GetEntitlementPlanFeatureByID_EntitlementPlanFeature) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEntitlementPlanFeatureByID_EntitlementPlanFeature{}
	}
	return t.Metadata
}
func (t *GetEntitlementPlanFeatureByID_EntitlementPlanFeature) GetPlan() *GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Plan {
	if t == nil {
		t = &GetEntitlementPlanFeatureByID_EntitlementPlanFeature{}
	}
	return &t.Plan
}
func (t *GetEntitlementPlanFeatureByID_EntitlementPlanFeature) GetFeature() *GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Feature {
	if t == nil {
		t = &GetEntitlementPlanFeatureByID_EntitlementPlanFeature{}
	}
	return &t.Feature
}

type GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan) GetID() string {
	if t == nil {
		t = &GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan{}
	}
	return t.ID
}
func (t *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan) GetName() string {
	if t == nil {
		t = &GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan{}
	}
	return t.Name
}

type GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature) GetID() string {
	if t == nil {
		t = &GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature{}
	}
	return t.ID
}
func (t *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature) GetName() string {
	if t == nil {
		t = &GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature{}
	}
	return t.Name
}

type GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node struct {
	ID       string                                                                "json:\"id\" graphql:\"id\""
	Metadata map[string]interface{}                                                "json:\"metadata,omitempty\" graphql:\"metadata\""
	Plan     GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan    "json:\"plan\" graphql:\"plan\""
	Feature  GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node{}
	}
	return t.ID
}
func (t *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node) GetPlan() *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan {
	if t == nil {
		t = &GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node{}
	}
	return &t.Plan
}
func (t *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node) GetFeature() *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature {
	if t == nil {
		t = &GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node{}
	}
	return &t.Feature
}

type GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges struct {
	Node *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges) GetNode() *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node {
	if t == nil {
		t = &GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges{}
	}
	return t.Node
}

type GetEntitlementPlanFeatures_EntitlementPlanFeatures struct {
	Edges []*GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEntitlementPlanFeatures_EntitlementPlanFeatures) GetEdges() []*GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges {
	if t == nil {
		t = &GetEntitlementPlanFeatures_EntitlementPlanFeatures{}
	}
	return t.Edges
}

type UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Plan struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Plan) GetID() string {
	if t == nil {
		t = &UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Plan{}
	}
	return t.ID
}
func (t *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Plan) GetName() string {
	if t == nil {
		t = &UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Plan{}
	}
	return t.Name
}

type UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Feature struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Feature) GetID() string {
	if t == nil {
		t = &UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Feature{}
	}
	return t.ID
}
func (t *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Feature) GetName() string {
	if t == nil {
		t = &UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Feature{}
	}
	return t.Name
}

type UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature struct {
	ID       string                                                                                   "json:\"id\" graphql:\"id\""
	Metadata map[string]interface{}                                                                   "json:\"metadata,omitempty\" graphql:\"metadata\""
	Plan     UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Plan    "json:\"plan\" graphql:\"plan\""
	Feature  UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature) GetID() string {
	if t == nil {
		t = &UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature{}
	}
	return t.ID
}
func (t *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature{}
	}
	return t.Metadata
}
func (t *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature) GetPlan() *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Plan {
	if t == nil {
		t = &UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature{}
	}
	return &t.Plan
}
func (t *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature) GetFeature() *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Feature {
	if t == nil {
		t = &UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature{}
	}
	return &t.Feature
}

type UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature struct {
	EntitlementPlanFeature UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature "json:\"entitlementPlanFeature\" graphql:\"entitlementPlanFeature\""
}

func (t *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature) GetEntitlementPlanFeature() *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature {
	if t == nil {
		t = &UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature{}
	}
	return &t.EntitlementPlanFeature
}

type GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	FeatureID   string                 "json:\"featureID\" graphql:\"featureID\""
	HistoryTime time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Metadata    map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	Operation   history.OpType         "json:\"operation\" graphql:\"operation\""
	OwnerID     *string                "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PlanID      string                 "json:\"planID\" graphql:\"planID\""
	Ref         *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetFeatureID() string {
	if t == nil {
		t = &GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return t.FeatureID
}
func (t *GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetPlanID() string {
	if t == nil {
		t = &GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return t.PlanID
}
func (t *GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges struct {
	Node *GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges) GetNode() *GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node {
	if t == nil {
		t = &GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges{}
	}
	return t.Node
}

type GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories struct {
	Edges []*GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories) GetEdges() []*GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges {
	if t == nil {
		t = &GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories{}
	}
	return t.Edges
}

type GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	FeatureID   string                 "json:\"featureID\" graphql:\"featureID\""
	HistoryTime time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Metadata    map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	Operation   history.OpType         "json:\"operation\" graphql:\"operation\""
	OwnerID     *string                "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	PlanID      string                 "json:\"planID\" graphql:\"planID\""
	Ref         *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetFeatureID() string {
	if t == nil {
		t = &GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return t.FeatureID
}
func (t *GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetPlanID() string {
	if t == nil {
		t = &GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return t.PlanID
}
func (t *GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges struct {
	Node *GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges) GetNode() *GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges_Node {
	if t == nil {
		t = &GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges{}
	}
	return t.Node
}

type GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories struct {
	Edges []*GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories) GetEdges() []*GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories_Edges {
	if t == nil {
		t = &GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories{}
	}
	return t.Edges
}

type GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	DisplayName *string                "json:\"displayName,omitempty\" graphql:\"displayName\""
	HistoryTime time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Metadata    map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Operation   history.OpType         "json:\"operation\" graphql:\"operation\""
	OwnerID     *string                "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version     string                 "json:\"version\" graphql:\"version\""
}

func (t *GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetVersion() string {
	if t == nil {
		t = &GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.Version
}

type GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges struct {
	Node *GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges) GetNode() *GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node {
	if t == nil {
		t = &GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges{}
	}
	return t.Node
}

type GetAllEntitlementPlanHistories_EntitlementPlanHistories struct {
	Edges []*GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEntitlementPlanHistories_EntitlementPlanHistories) GetEdges() []*GetAllEntitlementPlanHistories_EntitlementPlanHistories_Edges {
	if t == nil {
		t = &GetAllEntitlementPlanHistories_EntitlementPlanHistories{}
	}
	return t.Edges
}

type GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	DisplayName *string                "json:\"displayName,omitempty\" graphql:\"displayName\""
	HistoryTime time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Metadata    map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Operation   history.OpType         "json:\"operation\" graphql:\"operation\""
	OwnerID     *string                "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version     string                 "json:\"version\" graphql:\"version\""
}

func (t *GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node) GetVersion() string {
	if t == nil {
		t = &GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node{}
	}
	return t.Version
}

type GetEntitlementPlanHistories_EntitlementPlanHistories_Edges struct {
	Node *GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntitlementPlanHistories_EntitlementPlanHistories_Edges) GetNode() *GetEntitlementPlanHistories_EntitlementPlanHistories_Edges_Node {
	if t == nil {
		t = &GetEntitlementPlanHistories_EntitlementPlanHistories_Edges{}
	}
	return t.Node
}

type GetEntitlementPlanHistories_EntitlementPlanHistories struct {
	Edges []*GetEntitlementPlanHistories_EntitlementPlanHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEntitlementPlanHistories_EntitlementPlanHistories) GetEdges() []*GetEntitlementPlanHistories_EntitlementPlanHistories_Edges {
	if t == nil {
		t = &GetEntitlementPlanHistories_EntitlementPlanHistories{}
	}
	return t.Edges
}

type CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes struct {
	Text      string     "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes) GetText() string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes{}
	}
	return t.Text
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_EntityType struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_EntityType) GetName() string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_EntityType{}
	}
	return t.Name
}

type CreateBulkCSVEntity_CreateBulkCSVEntity_Entities struct {
	CreatedAt   *time.Time                                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                                      "json:\"description,omitempty\" graphql:\"description\""
	DisplayName *string                                                      "json:\"displayName,omitempty\" graphql:\"displayName\""
	Status      *string                                                      "json:\"status,omitempty\" graphql:\"status\""
	Domains     []string                                                     "json:\"domains,omitempty\" graphql:\"domains\""
	Notes       []*CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes    "json:\"notes,omitempty\" graphql:\"notes\""
	EntityType  *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_EntityType "json:\"entityType,omitempty\" graphql:\"entityType\""
	ID          string                                                       "json:\"id\" graphql:\"id\""
	Name        *string                                                      "json:\"name,omitempty\" graphql:\"name\""
	OwnerID     *string                                                      "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string                                                     "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.Description
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetDisplayName() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.DisplayName
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetStatus() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.Status
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetDomains() []string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.Domains
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetNotes() []*CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_Notes {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.Notes
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetEntityType() *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities_EntityType {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.EntityType
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.ID
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetName() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.Name
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.Tags
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVEntity_CreateBulkCSVEntity_Entities) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity_Entities{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVEntity_CreateBulkCSVEntity struct {
	Entities []*CreateBulkCSVEntity_CreateBulkCSVEntity_Entities "json:\"entities,omitempty\" graphql:\"entities\""
}

func (t *CreateBulkCSVEntity_CreateBulkCSVEntity) GetEntities() []*CreateBulkCSVEntity_CreateBulkCSVEntity_Entities {
	if t == nil {
		t = &CreateBulkCSVEntity_CreateBulkCSVEntity{}
	}
	return t.Entities
}

type CreateBulkEntity_CreateBulkEntity_Entities_Notes struct {
	Text      string     "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkEntity_CreateBulkEntity_Entities_Notes) GetText() string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities_Notes{}
	}
	return t.Text
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities_Notes) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities_Notes{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities_Notes) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities_Notes{}
	}
	return t.UpdatedBy
}

type CreateBulkEntity_CreateBulkEntity_Entities_EntityType struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkEntity_CreateBulkEntity_Entities_EntityType) GetName() string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities_EntityType{}
	}
	return t.Name
}

type CreateBulkEntity_CreateBulkEntity_Entities struct {
	CreatedAt   *time.Time                                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                                "json:\"description,omitempty\" graphql:\"description\""
	DisplayName *string                                                "json:\"displayName,omitempty\" graphql:\"displayName\""
	Status      *string                                                "json:\"status,omitempty\" graphql:\"status\""
	Domains     []string                                               "json:\"domains,omitempty\" graphql:\"domains\""
	Notes       []*CreateBulkEntity_CreateBulkEntity_Entities_Notes    "json:\"notes,omitempty\" graphql:\"notes\""
	EntityType  *CreateBulkEntity_CreateBulkEntity_Entities_EntityType "json:\"entityType,omitempty\" graphql:\"entityType\""
	ID          string                                                 "json:\"id\" graphql:\"id\""
	Name        *string                                                "json:\"name,omitempty\" graphql:\"name\""
	OwnerID     *string                                                "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string                                               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.CreatedAt
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.CreatedBy
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetDescription() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.Description
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetDisplayName() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.DisplayName
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetStatus() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.Status
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetDomains() []string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.Domains
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetNotes() []*CreateBulkEntity_CreateBulkEntity_Entities_Notes {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.Notes
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetEntityType() *CreateBulkEntity_CreateBulkEntity_Entities_EntityType {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.EntityType
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetID() string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.ID
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetName() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.Name
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.OwnerID
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetTags() []string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.Tags
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkEntity_CreateBulkEntity_Entities) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity_Entities{}
	}
	return t.UpdatedBy
}

type CreateBulkEntity_CreateBulkEntity struct {
	Entities []*CreateBulkEntity_CreateBulkEntity_Entities "json:\"entities,omitempty\" graphql:\"entities\""
}

func (t *CreateBulkEntity_CreateBulkEntity) GetEntities() []*CreateBulkEntity_CreateBulkEntity_Entities {
	if t == nil {
		t = &CreateBulkEntity_CreateBulkEntity{}
	}
	return t.Entities
}

type CreateEntity_CreateEntity_Entity_Notes struct {
	Text      string     "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateEntity_CreateEntity_Entity_Notes) GetText() string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity_Notes{}
	}
	return t.Text
}
func (t *CreateEntity_CreateEntity_Entity_Notes) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity_Notes{}
	}
	return t.UpdatedAt
}
func (t *CreateEntity_CreateEntity_Entity_Notes) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity_Notes{}
	}
	return t.UpdatedBy
}

type CreateEntity_CreateEntity_Entity_EntityType struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateEntity_CreateEntity_Entity_EntityType) GetName() string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity_EntityType{}
	}
	return t.Name
}

type CreateEntity_CreateEntity_Entity struct {
	CreatedAt   *time.Time                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                      "json:\"description,omitempty\" graphql:\"description\""
	DisplayName *string                                      "json:\"displayName,omitempty\" graphql:\"displayName\""
	Status      *string                                      "json:\"status,omitempty\" graphql:\"status\""
	Domains     []string                                     "json:\"domains,omitempty\" graphql:\"domains\""
	Notes       []*CreateEntity_CreateEntity_Entity_Notes    "json:\"notes,omitempty\" graphql:\"notes\""
	EntityType  *CreateEntity_CreateEntity_Entity_EntityType "json:\"entityType,omitempty\" graphql:\"entityType\""
	ID          string                                       "json:\"id\" graphql:\"id\""
	Name        *string                                      "json:\"name,omitempty\" graphql:\"name\""
	OwnerID     *string                                      "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string                                     "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateEntity_CreateEntity_Entity) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.CreatedAt
}
func (t *CreateEntity_CreateEntity_Entity) GetCreatedBy() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.CreatedBy
}
func (t *CreateEntity_CreateEntity_Entity) GetDescription() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.Description
}
func (t *CreateEntity_CreateEntity_Entity) GetDisplayName() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.DisplayName
}
func (t *CreateEntity_CreateEntity_Entity) GetStatus() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.Status
}
func (t *CreateEntity_CreateEntity_Entity) GetDomains() []string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.Domains
}
func (t *CreateEntity_CreateEntity_Entity) GetNotes() []*CreateEntity_CreateEntity_Entity_Notes {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.Notes
}
func (t *CreateEntity_CreateEntity_Entity) GetEntityType() *CreateEntity_CreateEntity_Entity_EntityType {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.EntityType
}
func (t *CreateEntity_CreateEntity_Entity) GetID() string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.ID
}
func (t *CreateEntity_CreateEntity_Entity) GetName() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.Name
}
func (t *CreateEntity_CreateEntity_Entity) GetOwnerID() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.OwnerID
}
func (t *CreateEntity_CreateEntity_Entity) GetTags() []string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.Tags
}
func (t *CreateEntity_CreateEntity_Entity) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.UpdatedAt
}
func (t *CreateEntity_CreateEntity_Entity) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateEntity_CreateEntity_Entity{}
	}
	return t.UpdatedBy
}

type CreateEntity_CreateEntity struct {
	Entity CreateEntity_CreateEntity_Entity "json:\"entity\" graphql:\"entity\""
}

func (t *CreateEntity_CreateEntity) GetEntity() *CreateEntity_CreateEntity_Entity {
	if t == nil {
		t = &CreateEntity_CreateEntity{}
	}
	return &t.Entity
}

type DeleteEntity_DeleteEntity struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteEntity_DeleteEntity) GetDeletedID() string {
	if t == nil {
		t = &DeleteEntity_DeleteEntity{}
	}
	return t.DeletedID
}

type GetAllEntities_Entities_Edges_Node_Notes struct {
	Text      string     "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllEntities_Entities_Edges_Node_Notes) GetText() string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node_Notes{}
	}
	return t.Text
}
func (t *GetAllEntities_Entities_Edges_Node_Notes) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node_Notes{}
	}
	return t.UpdatedAt
}
func (t *GetAllEntities_Entities_Edges_Node_Notes) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node_Notes{}
	}
	return t.UpdatedBy
}

type GetAllEntities_Entities_Edges_Node_EntityType struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllEntities_Entities_Edges_Node_EntityType) GetName() string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node_EntityType{}
	}
	return t.Name
}

type GetAllEntities_Entities_Edges_Node struct {
	CreatedAt   *time.Time                                     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                        "json:\"description,omitempty\" graphql:\"description\""
	DisplayName *string                                        "json:\"displayName,omitempty\" graphql:\"displayName\""
	Status      *string                                        "json:\"status,omitempty\" graphql:\"status\""
	Domains     []string                                       "json:\"domains,omitempty\" graphql:\"domains\""
	Notes       []*GetAllEntities_Entities_Edges_Node_Notes    "json:\"notes,omitempty\" graphql:\"notes\""
	EntityType  *GetAllEntities_Entities_Edges_Node_EntityType "json:\"entityType,omitempty\" graphql:\"entityType\""
	ID          string                                         "json:\"id\" graphql:\"id\""
	Name        *string                                        "json:\"name,omitempty\" graphql:\"name\""
	OwnerID     *string                                        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string                                       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllEntities_Entities_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEntities_Entities_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEntities_Entities_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllEntities_Entities_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllEntities_Entities_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllEntities_Entities_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.Domains
}
func (t *GetAllEntities_Entities_Edges_Node) GetNotes() []*GetAllEntities_Entities_Edges_Node_Notes {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.Notes
}
func (t *GetAllEntities_Entities_Edges_Node) GetEntityType() *GetAllEntities_Entities_Edges_Node_EntityType {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.EntityType
}
func (t *GetAllEntities_Entities_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEntities_Entities_Edges_Node) GetName() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllEntities_Entities_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllEntities_Entities_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEntities_Entities_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEntities_Entities_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEntities_Entities_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllEntities_Entities_Edges struct {
	Node *GetAllEntities_Entities_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEntities_Entities_Edges) GetNode() *GetAllEntities_Entities_Edges_Node {
	if t == nil {
		t = &GetAllEntities_Entities_Edges{}
	}
	return t.Node
}

type GetAllEntities_Entities struct {
	Edges []*GetAllEntities_Entities_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEntities_Entities) GetEdges() []*GetAllEntities_Entities_Edges {
	if t == nil {
		t = &GetAllEntities_Entities{}
	}
	return t.Edges
}

type GetEntities_Entities_Edges_Node_Notes struct {
	Text      string     "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntities_Entities_Edges_Node_Notes) GetText() string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node_Notes{}
	}
	return t.Text
}
func (t *GetEntities_Entities_Edges_Node_Notes) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node_Notes{}
	}
	return t.UpdatedAt
}
func (t *GetEntities_Entities_Edges_Node_Notes) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node_Notes{}
	}
	return t.UpdatedBy
}

type GetEntities_Entities_Edges_Node_EntityType struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetEntities_Entities_Edges_Node_EntityType) GetName() string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node_EntityType{}
	}
	return t.Name
}

type GetEntities_Entities_Edges_Node struct {
	CreatedAt   *time.Time                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                     "json:\"description,omitempty\" graphql:\"description\""
	DisplayName *string                                     "json:\"displayName,omitempty\" graphql:\"displayName\""
	Status      *string                                     "json:\"status,omitempty\" graphql:\"status\""
	Domains     []string                                    "json:\"domains,omitempty\" graphql:\"domains\""
	Notes       []*GetEntities_Entities_Edges_Node_Notes    "json:\"notes,omitempty\" graphql:\"notes\""
	EntityType  *GetEntities_Entities_Edges_Node_EntityType "json:\"entityType,omitempty\" graphql:\"entityType\""
	ID          string                                      "json:\"id\" graphql:\"id\""
	Name        *string                                     "json:\"name,omitempty\" graphql:\"name\""
	OwnerID     *string                                     "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string                                    "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntities_Entities_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetEntities_Entities_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetEntities_Entities_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.Description
}
func (t *GetEntities_Entities_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetEntities_Entities_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.Status
}
func (t *GetEntities_Entities_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.Domains
}
func (t *GetEntities_Entities_Edges_Node) GetNotes() []*GetEntities_Entities_Edges_Node_Notes {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.Notes
}
func (t *GetEntities_Entities_Edges_Node) GetEntityType() *GetEntities_Entities_Edges_Node_EntityType {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.EntityType
}
func (t *GetEntities_Entities_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.ID
}
func (t *GetEntities_Entities_Edges_Node) GetName() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.Name
}
func (t *GetEntities_Entities_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetEntities_Entities_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEntities_Entities_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEntities_Entities_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntities_Entities_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetEntities_Entities_Edges struct {
	Node *GetEntities_Entities_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntities_Entities_Edges) GetNode() *GetEntities_Entities_Edges_Node {
	if t == nil {
		t = &GetEntities_Entities_Edges{}
	}
	return t.Node
}

type GetEntities_Entities struct {
	Edges []*GetEntities_Entities_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEntities_Entities) GetEdges() []*GetEntities_Entities_Edges {
	if t == nil {
		t = &GetEntities_Entities{}
	}
	return t.Edges
}

type GetEntityByID_Entity_Notes struct {
	Text      string     "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntityByID_Entity_Notes) GetText() string {
	if t == nil {
		t = &GetEntityByID_Entity_Notes{}
	}
	return t.Text
}
func (t *GetEntityByID_Entity_Notes) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntityByID_Entity_Notes{}
	}
	return t.UpdatedAt
}
func (t *GetEntityByID_Entity_Notes) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntityByID_Entity_Notes{}
	}
	return t.UpdatedBy
}

type GetEntityByID_Entity_EntityType struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetEntityByID_Entity_EntityType) GetName() string {
	if t == nil {
		t = &GetEntityByID_Entity_EntityType{}
	}
	return t.Name
}

type GetEntityByID_Entity_Contacts struct {
	ID          string  "json:\"id\" graphql:\"id\""
	FullName    string  "json:\"fullName\" graphql:\"fullName\""
	Email       *string "json:\"email,omitempty\" graphql:\"email\""
	Title       *string "json:\"title,omitempty\" graphql:\"title\""
	Company     *string "json:\"company,omitempty\" graphql:\"company\""
	Address     *string "json:\"address,omitempty\" graphql:\"address\""
	PhoneNumber *string "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
}

func (t *GetEntityByID_Entity_Contacts) GetID() string {
	if t == nil {
		t = &GetEntityByID_Entity_Contacts{}
	}
	return t.ID
}
func (t *GetEntityByID_Entity_Contacts) GetFullName() string {
	if t == nil {
		t = &GetEntityByID_Entity_Contacts{}
	}
	return t.FullName
}
func (t *GetEntityByID_Entity_Contacts) GetEmail() *string {
	if t == nil {
		t = &GetEntityByID_Entity_Contacts{}
	}
	return t.Email
}
func (t *GetEntityByID_Entity_Contacts) GetTitle() *string {
	if t == nil {
		t = &GetEntityByID_Entity_Contacts{}
	}
	return t.Title
}
func (t *GetEntityByID_Entity_Contacts) GetCompany() *string {
	if t == nil {
		t = &GetEntityByID_Entity_Contacts{}
	}
	return t.Company
}
func (t *GetEntityByID_Entity_Contacts) GetAddress() *string {
	if t == nil {
		t = &GetEntityByID_Entity_Contacts{}
	}
	return t.Address
}
func (t *GetEntityByID_Entity_Contacts) GetPhoneNumber() *string {
	if t == nil {
		t = &GetEntityByID_Entity_Contacts{}
	}
	return t.PhoneNumber
}

type GetEntityByID_Entity struct {
	CreatedAt   *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                          "json:\"description,omitempty\" graphql:\"description\""
	DisplayName *string                          "json:\"displayName,omitempty\" graphql:\"displayName\""
	Status      *string                          "json:\"status,omitempty\" graphql:\"status\""
	Domains     []string                         "json:\"domains,omitempty\" graphql:\"domains\""
	Notes       []*GetEntityByID_Entity_Notes    "json:\"notes,omitempty\" graphql:\"notes\""
	EntityType  *GetEntityByID_Entity_EntityType "json:\"entityType,omitempty\" graphql:\"entityType\""
	ID          string                           "json:\"id\" graphql:\"id\""
	Name        *string                          "json:\"name,omitempty\" graphql:\"name\""
	OwnerID     *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Contacts    []*GetEntityByID_Entity_Contacts "json:\"contacts,omitempty\" graphql:\"contacts\""
	Tags        []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntityByID_Entity) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.CreatedAt
}
func (t *GetEntityByID_Entity) GetCreatedBy() *string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.CreatedBy
}
func (t *GetEntityByID_Entity) GetDescription() *string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.Description
}
func (t *GetEntityByID_Entity) GetDisplayName() *string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.DisplayName
}
func (t *GetEntityByID_Entity) GetStatus() *string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.Status
}
func (t *GetEntityByID_Entity) GetDomains() []string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.Domains
}
func (t *GetEntityByID_Entity) GetNotes() []*GetEntityByID_Entity_Notes {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.Notes
}
func (t *GetEntityByID_Entity) GetEntityType() *GetEntityByID_Entity_EntityType {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.EntityType
}
func (t *GetEntityByID_Entity) GetID() string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.ID
}
func (t *GetEntityByID_Entity) GetName() *string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.Name
}
func (t *GetEntityByID_Entity) GetOwnerID() *string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.OwnerID
}
func (t *GetEntityByID_Entity) GetContacts() []*GetEntityByID_Entity_Contacts {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.Contacts
}
func (t *GetEntityByID_Entity) GetTags() []string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.Tags
}
func (t *GetEntityByID_Entity) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.UpdatedAt
}
func (t *GetEntityByID_Entity) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntityByID_Entity{}
	}
	return t.UpdatedBy
}

type UpdateEntity_UpdateEntity_Entity_Notes struct {
	Text      string     "json:\"text\" graphql:\"text\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateEntity_UpdateEntity_Entity_Notes) GetText() string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity_Notes{}
	}
	return t.Text
}
func (t *UpdateEntity_UpdateEntity_Entity_Notes) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity_Notes{}
	}
	return t.UpdatedAt
}
func (t *UpdateEntity_UpdateEntity_Entity_Notes) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity_Notes{}
	}
	return t.UpdatedBy
}

type UpdateEntity_UpdateEntity_Entity_EntityType struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateEntity_UpdateEntity_Entity_EntityType) GetName() string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity_EntityType{}
	}
	return t.Name
}

type UpdateEntity_UpdateEntity_Entity struct {
	CreatedAt   *time.Time                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                      "json:\"description,omitempty\" graphql:\"description\""
	DisplayName *string                                      "json:\"displayName,omitempty\" graphql:\"displayName\""
	Status      *string                                      "json:\"status,omitempty\" graphql:\"status\""
	Domains     []string                                     "json:\"domains,omitempty\" graphql:\"domains\""
	Notes       []*UpdateEntity_UpdateEntity_Entity_Notes    "json:\"notes,omitempty\" graphql:\"notes\""
	EntityType  *UpdateEntity_UpdateEntity_Entity_EntityType "json:\"entityType,omitempty\" graphql:\"entityType\""
	ID          string                                       "json:\"id\" graphql:\"id\""
	Name        *string                                      "json:\"name,omitempty\" graphql:\"name\""
	OwnerID     *string                                      "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags        []string                                     "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateEntity_UpdateEntity_Entity) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.CreatedAt
}
func (t *UpdateEntity_UpdateEntity_Entity) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.CreatedBy
}
func (t *UpdateEntity_UpdateEntity_Entity) GetDescription() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.Description
}
func (t *UpdateEntity_UpdateEntity_Entity) GetDisplayName() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.DisplayName
}
func (t *UpdateEntity_UpdateEntity_Entity) GetStatus() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.Status
}
func (t *UpdateEntity_UpdateEntity_Entity) GetDomains() []string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.Domains
}
func (t *UpdateEntity_UpdateEntity_Entity) GetNotes() []*UpdateEntity_UpdateEntity_Entity_Notes {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.Notes
}
func (t *UpdateEntity_UpdateEntity_Entity) GetEntityType() *UpdateEntity_UpdateEntity_Entity_EntityType {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.EntityType
}
func (t *UpdateEntity_UpdateEntity_Entity) GetID() string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.ID
}
func (t *UpdateEntity_UpdateEntity_Entity) GetName() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.Name
}
func (t *UpdateEntity_UpdateEntity_Entity) GetOwnerID() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.OwnerID
}
func (t *UpdateEntity_UpdateEntity_Entity) GetTags() []string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.Tags
}
func (t *UpdateEntity_UpdateEntity_Entity) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.UpdatedAt
}
func (t *UpdateEntity_UpdateEntity_Entity) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateEntity_UpdateEntity_Entity{}
	}
	return t.UpdatedBy
}

type UpdateEntity_UpdateEntity struct {
	Entity UpdateEntity_UpdateEntity_Entity "json:\"entity\" graphql:\"entity\""
}

func (t *UpdateEntity_UpdateEntity) GetEntity() *UpdateEntity_UpdateEntity_Entity {
	if t == nil {
		t = &UpdateEntity_UpdateEntity{}
	}
	return &t.Entity
}

type GetAllEntityHistories_EntityHistories_Edges_Node struct {
	CreatedAt    *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string        "json:\"description,omitempty\" graphql:\"description\""
	DisplayName  *string        "json:\"displayName,omitempty\" graphql:\"displayName\""
	Domains      []string       "json:\"domains,omitempty\" graphql:\"domains\""
	EntityTypeID *string        "json:\"entityTypeID,omitempty\" graphql:\"entityTypeID\""
	HistoryTime  time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID           string         "json:\"id\" graphql:\"id\""
	Name         *string        "json:\"name,omitempty\" graphql:\"name\""
	Operation    history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID      *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref          *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Status       *string        "json:\"status,omitempty\" graphql:\"status\""
	Tags         []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Domains
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetEntityTypeID() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.EntityTypeID
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetName() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEntityHistories_EntityHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllEntityHistories_EntityHistories_Edges struct {
	Node *GetAllEntityHistories_EntityHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEntityHistories_EntityHistories_Edges) GetNode() *GetAllEntityHistories_EntityHistories_Edges_Node {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories_Edges{}
	}
	return t.Node
}

type GetAllEntityHistories_EntityHistories struct {
	Edges []*GetAllEntityHistories_EntityHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEntityHistories_EntityHistories) GetEdges() []*GetAllEntityHistories_EntityHistories_Edges {
	if t == nil {
		t = &GetAllEntityHistories_EntityHistories{}
	}
	return t.Edges
}

type GetEntityHistories_EntityHistories_Edges_Node struct {
	CreatedAt    *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string        "json:\"description,omitempty\" graphql:\"description\""
	DisplayName  *string        "json:\"displayName,omitempty\" graphql:\"displayName\""
	Domains      []string       "json:\"domains,omitempty\" graphql:\"domains\""
	EntityTypeID *string        "json:\"entityTypeID,omitempty\" graphql:\"entityTypeID\""
	HistoryTime  time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID           string         "json:\"id\" graphql:\"id\""
	Name         *string        "json:\"name,omitempty\" graphql:\"name\""
	Operation    history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID      *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref          *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Status       *string        "json:\"status,omitempty\" graphql:\"status\""
	Tags         []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntityHistories_EntityHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Domains
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetEntityTypeID() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.EntityTypeID
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetName() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEntityHistories_EntityHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetEntityHistories_EntityHistories_Edges struct {
	Node *GetEntityHistories_EntityHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntityHistories_EntityHistories_Edges) GetNode() *GetEntityHistories_EntityHistories_Edges_Node {
	if t == nil {
		t = &GetEntityHistories_EntityHistories_Edges{}
	}
	return t.Node
}

type GetEntityHistories_EntityHistories struct {
	Edges []*GetEntityHistories_EntityHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEntityHistories_EntityHistories) GetEdges() []*GetEntityHistories_EntityHistories_Edges {
	if t == nil {
		t = &GetEntityHistories_EntityHistories{}
	}
	return t.Edges
}

type CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	OwnerID   *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.ID
}
func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetName() string {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.Name
}
func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.Tags
}
func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVEntityType_CreateBulkCSVEntityType struct {
	EntityTypes []*CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes "json:\"entityTypes,omitempty\" graphql:\"entityTypes\""
}

func (t *CreateBulkCSVEntityType_CreateBulkCSVEntityType) GetEntityTypes() []*CreateBulkCSVEntityType_CreateBulkCSVEntityType_EntityTypes {
	if t == nil {
		t = &CreateBulkCSVEntityType_CreateBulkCSVEntityType{}
	}
	return t.EntityTypes
}

type CreateBulkEntityType_CreateBulkEntityType_EntityTypes struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	OwnerID   *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.CreatedAt
}
func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.CreatedBy
}
func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetID() string {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.ID
}
func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetName() string {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.Name
}
func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.OwnerID
}
func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetTags() []string {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.Tags
}
func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkEntityType_CreateBulkEntityType_EntityTypes) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType_EntityTypes{}
	}
	return t.UpdatedBy
}

type CreateBulkEntityType_CreateBulkEntityType struct {
	EntityTypes []*CreateBulkEntityType_CreateBulkEntityType_EntityTypes "json:\"entityTypes,omitempty\" graphql:\"entityTypes\""
}

func (t *CreateBulkEntityType_CreateBulkEntityType) GetEntityTypes() []*CreateBulkEntityType_CreateBulkEntityType_EntityTypes {
	if t == nil {
		t = &CreateBulkEntityType_CreateBulkEntityType{}
	}
	return t.EntityTypes
}

type CreateEntityType_CreateEntityType_EntityType struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	OwnerID   *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateEntityType_CreateEntityType_EntityType) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.CreatedAt
}
func (t *CreateEntityType_CreateEntityType_EntityType) GetCreatedBy() *string {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.CreatedBy
}
func (t *CreateEntityType_CreateEntityType_EntityType) GetID() string {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.ID
}
func (t *CreateEntityType_CreateEntityType_EntityType) GetName() string {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.Name
}
func (t *CreateEntityType_CreateEntityType_EntityType) GetOwnerID() *string {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.OwnerID
}
func (t *CreateEntityType_CreateEntityType_EntityType) GetTags() []string {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.Tags
}
func (t *CreateEntityType_CreateEntityType_EntityType) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.UpdatedAt
}
func (t *CreateEntityType_CreateEntityType_EntityType) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateEntityType_CreateEntityType_EntityType{}
	}
	return t.UpdatedBy
}

type CreateEntityType_CreateEntityType struct {
	EntityType CreateEntityType_CreateEntityType_EntityType "json:\"entityType\" graphql:\"entityType\""
}

func (t *CreateEntityType_CreateEntityType) GetEntityType() *CreateEntityType_CreateEntityType_EntityType {
	if t == nil {
		t = &CreateEntityType_CreateEntityType{}
	}
	return &t.EntityType
}

type DeleteEntityType_DeleteEntityType struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteEntityType_DeleteEntityType) GetDeletedID() string {
	if t == nil {
		t = &DeleteEntityType_DeleteEntityType{}
	}
	return t.DeletedID
}

type GetAllEntityTypes_EntityTypes_Edges_Node struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	OwnerID   *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEntityTypes_EntityTypes_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllEntityTypes_EntityTypes_Edges struct {
	Node *GetAllEntityTypes_EntityTypes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEntityTypes_EntityTypes_Edges) GetNode() *GetAllEntityTypes_EntityTypes_Edges_Node {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes_Edges{}
	}
	return t.Node
}

type GetAllEntityTypes_EntityTypes struct {
	Edges []*GetAllEntityTypes_EntityTypes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEntityTypes_EntityTypes) GetEdges() []*GetAllEntityTypes_EntityTypes_Edges {
	if t == nil {
		t = &GetAllEntityTypes_EntityTypes{}
	}
	return t.Edges
}

type GetEntityTypeByID_EntityType struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	OwnerID   *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntityTypeByID_EntityType) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.CreatedAt
}
func (t *GetEntityTypeByID_EntityType) GetCreatedBy() *string {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.CreatedBy
}
func (t *GetEntityTypeByID_EntityType) GetID() string {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.ID
}
func (t *GetEntityTypeByID_EntityType) GetName() string {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.Name
}
func (t *GetEntityTypeByID_EntityType) GetOwnerID() *string {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.OwnerID
}
func (t *GetEntityTypeByID_EntityType) GetTags() []string {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.Tags
}
func (t *GetEntityTypeByID_EntityType) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.UpdatedAt
}
func (t *GetEntityTypeByID_EntityType) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntityTypeByID_EntityType{}
	}
	return t.UpdatedBy
}

type GetEntityTypes_EntityTypes_Edges_Node struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	OwnerID   *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntityTypes_EntityTypes_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetEntityTypes_EntityTypes_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetEntityTypes_EntityTypes_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.ID
}
func (t *GetEntityTypes_EntityTypes_Edges_Node) GetName() string {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.Name
}
func (t *GetEntityTypes_EntityTypes_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetEntityTypes_EntityTypes_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEntityTypes_EntityTypes_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEntityTypes_EntityTypes_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetEntityTypes_EntityTypes_Edges struct {
	Node *GetEntityTypes_EntityTypes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntityTypes_EntityTypes_Edges) GetNode() *GetEntityTypes_EntityTypes_Edges_Node {
	if t == nil {
		t = &GetEntityTypes_EntityTypes_Edges{}
	}
	return t.Node
}

type GetEntityTypes_EntityTypes struct {
	Edges []*GetEntityTypes_EntityTypes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEntityTypes_EntityTypes) GetEdges() []*GetEntityTypes_EntityTypes_Edges {
	if t == nil {
		t = &GetEntityTypes_EntityTypes{}
	}
	return t.Edges
}

type UpdateEntityType_UpdateEntityType_EntityType struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	Name      string     "json:\"name\" graphql:\"name\""
	OwnerID   *string    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Tags      []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateEntityType_UpdateEntityType_EntityType) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.CreatedAt
}
func (t *UpdateEntityType_UpdateEntityType_EntityType) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.CreatedBy
}
func (t *UpdateEntityType_UpdateEntityType_EntityType) GetID() string {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.ID
}
func (t *UpdateEntityType_UpdateEntityType_EntityType) GetName() string {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.Name
}
func (t *UpdateEntityType_UpdateEntityType_EntityType) GetOwnerID() *string {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.OwnerID
}
func (t *UpdateEntityType_UpdateEntityType_EntityType) GetTags() []string {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.Tags
}
func (t *UpdateEntityType_UpdateEntityType_EntityType) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.UpdatedAt
}
func (t *UpdateEntityType_UpdateEntityType_EntityType) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType_EntityType{}
	}
	return t.UpdatedBy
}

type UpdateEntityType_UpdateEntityType struct {
	EntityType UpdateEntityType_UpdateEntityType_EntityType "json:\"entityType\" graphql:\"entityType\""
}

func (t *UpdateEntityType_UpdateEntityType) GetEntityType() *UpdateEntityType_UpdateEntityType_EntityType {
	if t == nil {
		t = &UpdateEntityType_UpdateEntityType{}
	}
	return &t.EntityType
}

type GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllEntityTypeHistories_EntityTypeHistories_Edges struct {
	Node *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEntityTypeHistories_EntityTypeHistories_Edges) GetNode() *GetAllEntityTypeHistories_EntityTypeHistories_Edges_Node {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories_Edges{}
	}
	return t.Node
}

type GetAllEntityTypeHistories_EntityTypeHistories struct {
	Edges []*GetAllEntityTypeHistories_EntityTypeHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEntityTypeHistories_EntityTypeHistories) GetEdges() []*GetAllEntityTypeHistories_EntityTypeHistories_Edges {
	if t == nil {
		t = &GetAllEntityTypeHistories_EntityTypeHistories{}
	}
	return t.Edges
}

type GetEntityTypeHistories_EntityTypeHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEntityTypeHistories_EntityTypeHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetEntityTypeHistories_EntityTypeHistories_Edges struct {
	Node *GetEntityTypeHistories_EntityTypeHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntityTypeHistories_EntityTypeHistories_Edges) GetNode() *GetEntityTypeHistories_EntityTypeHistories_Edges_Node {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories_Edges{}
	}
	return t.Node
}

type GetEntityTypeHistories_EntityTypeHistories struct {
	Edges []*GetEntityTypeHistories_EntityTypeHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEntityTypeHistories_EntityTypeHistories) GetEdges() []*GetEntityTypeHistories_EntityTypeHistories_Edges {
	if t == nil {
		t = &GetEntityTypeHistories_EntityTypeHistories{}
	}
	return t.Edges
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_User struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_User) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_User{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Group) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Group{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integration) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integration{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organization) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organization{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invite struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invite) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invite{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Feature struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Feature) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Feature{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessToken struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessToken{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Oauth2token struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Oauth2token) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Oauth2token{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Hush struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Hush) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Hush{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmembership) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmembership{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmembership) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmembership{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Entitlement struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Entitlement) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Entitlement{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Webhook struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Webhook) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Webhook{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events struct {
	ID                  string                                                              "json:\"id\" graphql:\"id\""
	EventID             *string                                                             "json:\"eventID,omitempty\" graphql:\"eventID\""
	CorrelationID       *string                                                             "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	EventType           string                                                              "json:\"eventType\" graphql:\"eventType\""
	Metadata            map[string]interface{}                                              "json:\"metadata,omitempty\" graphql:\"metadata\""
	User                []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_User                "json:\"user,omitempty\" graphql:\"user\""
	Group               []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Group               "json:\"group,omitempty\" graphql:\"group\""
	Integration         []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integration         "json:\"integration,omitempty\" graphql:\"integration\""
	Organization        []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organization        "json:\"organization,omitempty\" graphql:\"organization\""
	Invite              []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invite              "json:\"invite,omitempty\" graphql:\"invite\""
	Feature             []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Feature             "json:\"feature,omitempty\" graphql:\"feature\""
	PersonalAccessToken []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessToken "json:\"personalAccessToken,omitempty\" graphql:\"personalAccessToken\""
	Oauth2token         []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Oauth2token         "json:\"oauth2token,omitempty\" graphql:\"oauth2token\""
	Hush                []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Hush                "json:\"hush,omitempty\" graphql:\"hush\""
	Orgmembership       []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmembership       "json:\"orgmembership,omitempty\" graphql:\"orgmembership\""
	Groupmembership     []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmembership     "json:\"groupmembership,omitempty\" graphql:\"groupmembership\""
	Entitlement         []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Entitlement         "json:\"entitlement,omitempty\" graphql:\"entitlement\""
	Webhook             []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Webhook             "json:\"webhook,omitempty\" graphql:\"webhook\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.ID
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetEventID() *string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.EventID
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetCorrelationID() *string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.CorrelationID
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetEventType() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.EventType
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Metadata
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetUser() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_User {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.User
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetGroup() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Group {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Group
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetIntegration() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integration {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Integration
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetOrganization() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organization {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Organization
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetInvite() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invite {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Invite
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetFeature() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Feature {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Feature
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetPersonalAccessToken() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessToken {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.PersonalAccessToken
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetOauth2token() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Oauth2token {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Oauth2token
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetHush() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Hush {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Hush
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetOrgmembership() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmembership {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Orgmembership
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetGroupmembership() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmembership {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Groupmembership
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetEntitlement() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Entitlement {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Entitlement
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetWebhook() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Webhook {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Webhook
}

type CreateBulkCSVEvent_CreateBulkCSVEvent struct {
	Events []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events "json:\"events,omitempty\" graphql:\"events\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent) GetEvents() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent{}
	}
	return t.Events
}

type CreateBulkEvent_CreateBulkEvent_Events_User struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_User) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_User{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Group) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Group{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Integration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Integration) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Integration{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Organization) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Organization{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Invite struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Invite) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Invite{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Feature struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Feature) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Feature{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessToken struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessToken{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Oauth2token struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Oauth2token) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Oauth2token{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Hush struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Hush) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Hush{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Orgmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Orgmembership) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Orgmembership{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Groupmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Groupmembership) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Groupmembership{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Entitlement struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Entitlement) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Entitlement{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Webhook struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Webhook) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Webhook{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events struct {
	ID                  string                                                        "json:\"id\" graphql:\"id\""
	EventID             *string                                                       "json:\"eventID,omitempty\" graphql:\"eventID\""
	CorrelationID       *string                                                       "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	EventType           string                                                        "json:\"eventType\" graphql:\"eventType\""
	Metadata            map[string]interface{}                                        "json:\"metadata,omitempty\" graphql:\"metadata\""
	User                []*CreateBulkEvent_CreateBulkEvent_Events_User                "json:\"user,omitempty\" graphql:\"user\""
	Group               []*CreateBulkEvent_CreateBulkEvent_Events_Group               "json:\"group,omitempty\" graphql:\"group\""
	Integration         []*CreateBulkEvent_CreateBulkEvent_Events_Integration         "json:\"integration,omitempty\" graphql:\"integration\""
	Organization        []*CreateBulkEvent_CreateBulkEvent_Events_Organization        "json:\"organization,omitempty\" graphql:\"organization\""
	Invite              []*CreateBulkEvent_CreateBulkEvent_Events_Invite              "json:\"invite,omitempty\" graphql:\"invite\""
	Feature             []*CreateBulkEvent_CreateBulkEvent_Events_Feature             "json:\"feature,omitempty\" graphql:\"feature\""
	PersonalAccessToken []*CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessToken "json:\"personalAccessToken,omitempty\" graphql:\"personalAccessToken\""
	Oauth2token         []*CreateBulkEvent_CreateBulkEvent_Events_Oauth2token         "json:\"oauth2token,omitempty\" graphql:\"oauth2token\""
	Hush                []*CreateBulkEvent_CreateBulkEvent_Events_Hush                "json:\"hush,omitempty\" graphql:\"hush\""
	Orgmembership       []*CreateBulkEvent_CreateBulkEvent_Events_Orgmembership       "json:\"orgmembership,omitempty\" graphql:\"orgmembership\""
	Groupmembership     []*CreateBulkEvent_CreateBulkEvent_Events_Groupmembership     "json:\"groupmembership,omitempty\" graphql:\"groupmembership\""
	Entitlement         []*CreateBulkEvent_CreateBulkEvent_Events_Entitlement         "json:\"entitlement,omitempty\" graphql:\"entitlement\""
	Webhook             []*CreateBulkEvent_CreateBulkEvent_Events_Webhook             "json:\"webhook,omitempty\" graphql:\"webhook\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.ID
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetEventID() *string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.EventID
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetCorrelationID() *string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.CorrelationID
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetEventType() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.EventType
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Metadata
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetUser() []*CreateBulkEvent_CreateBulkEvent_Events_User {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.User
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetGroup() []*CreateBulkEvent_CreateBulkEvent_Events_Group {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Group
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetIntegration() []*CreateBulkEvent_CreateBulkEvent_Events_Integration {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Integration
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetOrganization() []*CreateBulkEvent_CreateBulkEvent_Events_Organization {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Organization
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetInvite() []*CreateBulkEvent_CreateBulkEvent_Events_Invite {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Invite
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetFeature() []*CreateBulkEvent_CreateBulkEvent_Events_Feature {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Feature
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetPersonalAccessToken() []*CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessToken {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.PersonalAccessToken
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetOauth2token() []*CreateBulkEvent_CreateBulkEvent_Events_Oauth2token {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Oauth2token
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetHush() []*CreateBulkEvent_CreateBulkEvent_Events_Hush {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Hush
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetOrgmembership() []*CreateBulkEvent_CreateBulkEvent_Events_Orgmembership {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Orgmembership
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetGroupmembership() []*CreateBulkEvent_CreateBulkEvent_Events_Groupmembership {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Groupmembership
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetEntitlement() []*CreateBulkEvent_CreateBulkEvent_Events_Entitlement {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Entitlement
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetWebhook() []*CreateBulkEvent_CreateBulkEvent_Events_Webhook {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Webhook
}

type CreateBulkEvent_CreateBulkEvent struct {
	Events []*CreateBulkEvent_CreateBulkEvent_Events "json:\"events,omitempty\" graphql:\"events\""
}

func (t *CreateBulkEvent_CreateBulkEvent) GetEvents() []*CreateBulkEvent_CreateBulkEvent_Events {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent{}
	}
	return t.Events
}

type CreateEvent_CreateEvent_Event_User struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_User) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_User{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_Group) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_Group{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_Integration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_Integration) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_Integration{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_Organization) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_Organization{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_Invite struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_Invite) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_Invite{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_Feature struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_Feature) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_Feature{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_PersonalAccessToken struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_PersonalAccessToken{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_Oauth2token struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_Oauth2token) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_Oauth2token{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_Hush struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_Hush) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_Hush{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_Orgmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_Orgmembership) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_Orgmembership{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_Groupmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_Groupmembership) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_Groupmembership{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_Entitlement struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_Entitlement) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_Entitlement{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_Webhook struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_Webhook) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_Webhook{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event struct {
	ID                  string                                               "json:\"id\" graphql:\"id\""
	EventID             *string                                              "json:\"eventID,omitempty\" graphql:\"eventID\""
	CorrelationID       *string                                              "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	EventType           string                                               "json:\"eventType\" graphql:\"eventType\""
	Metadata            map[string]interface{}                               "json:\"metadata,omitempty\" graphql:\"metadata\""
	User                []*CreateEvent_CreateEvent_Event_User                "json:\"user,omitempty\" graphql:\"user\""
	Group               []*CreateEvent_CreateEvent_Event_Group               "json:\"group,omitempty\" graphql:\"group\""
	Integration         []*CreateEvent_CreateEvent_Event_Integration         "json:\"integration,omitempty\" graphql:\"integration\""
	Organization        []*CreateEvent_CreateEvent_Event_Organization        "json:\"organization,omitempty\" graphql:\"organization\""
	Invite              []*CreateEvent_CreateEvent_Event_Invite              "json:\"invite,omitempty\" graphql:\"invite\""
	Feature             []*CreateEvent_CreateEvent_Event_Feature             "json:\"feature,omitempty\" graphql:\"feature\""
	PersonalAccessToken []*CreateEvent_CreateEvent_Event_PersonalAccessToken "json:\"personalAccessToken,omitempty\" graphql:\"personalAccessToken\""
	Oauth2token         []*CreateEvent_CreateEvent_Event_Oauth2token         "json:\"oauth2token,omitempty\" graphql:\"oauth2token\""
	Hush                []*CreateEvent_CreateEvent_Event_Hush                "json:\"hush,omitempty\" graphql:\"hush\""
	Orgmembership       []*CreateEvent_CreateEvent_Event_Orgmembership       "json:\"orgmembership,omitempty\" graphql:\"orgmembership\""
	Groupmembership     []*CreateEvent_CreateEvent_Event_Groupmembership     "json:\"groupmembership,omitempty\" graphql:\"groupmembership\""
	Entitlement         []*CreateEvent_CreateEvent_Event_Entitlement         "json:\"entitlement,omitempty\" graphql:\"entitlement\""
	Webhook             []*CreateEvent_CreateEvent_Event_Webhook             "json:\"webhook,omitempty\" graphql:\"webhook\""
}

func (t *CreateEvent_CreateEvent_Event) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.ID
}
func (t *CreateEvent_CreateEvent_Event) GetEventID() *string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.EventID
}
func (t *CreateEvent_CreateEvent_Event) GetCorrelationID() *string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.CorrelationID
}
func (t *CreateEvent_CreateEvent_Event) GetEventType() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.EventType
}
func (t *CreateEvent_CreateEvent_Event) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Metadata
}
func (t *CreateEvent_CreateEvent_Event) GetUser() []*CreateEvent_CreateEvent_Event_User {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.User
}
func (t *CreateEvent_CreateEvent_Event) GetGroup() []*CreateEvent_CreateEvent_Event_Group {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Group
}
func (t *CreateEvent_CreateEvent_Event) GetIntegration() []*CreateEvent_CreateEvent_Event_Integration {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Integration
}
func (t *CreateEvent_CreateEvent_Event) GetOrganization() []*CreateEvent_CreateEvent_Event_Organization {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Organization
}
func (t *CreateEvent_CreateEvent_Event) GetInvite() []*CreateEvent_CreateEvent_Event_Invite {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Invite
}
func (t *CreateEvent_CreateEvent_Event) GetFeature() []*CreateEvent_CreateEvent_Event_Feature {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Feature
}
func (t *CreateEvent_CreateEvent_Event) GetPersonalAccessToken() []*CreateEvent_CreateEvent_Event_PersonalAccessToken {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.PersonalAccessToken
}
func (t *CreateEvent_CreateEvent_Event) GetOauth2token() []*CreateEvent_CreateEvent_Event_Oauth2token {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Oauth2token
}
func (t *CreateEvent_CreateEvent_Event) GetHush() []*CreateEvent_CreateEvent_Event_Hush {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Hush
}
func (t *CreateEvent_CreateEvent_Event) GetOrgmembership() []*CreateEvent_CreateEvent_Event_Orgmembership {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Orgmembership
}
func (t *CreateEvent_CreateEvent_Event) GetGroupmembership() []*CreateEvent_CreateEvent_Event_Groupmembership {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Groupmembership
}
func (t *CreateEvent_CreateEvent_Event) GetEntitlement() []*CreateEvent_CreateEvent_Event_Entitlement {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Entitlement
}
func (t *CreateEvent_CreateEvent_Event) GetWebhook() []*CreateEvent_CreateEvent_Event_Webhook {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Webhook
}

type CreateEvent_CreateEvent struct {
	Event CreateEvent_CreateEvent_Event "json:\"event\" graphql:\"event\""
}

func (t *CreateEvent_CreateEvent) GetEvent() *CreateEvent_CreateEvent_Event {
	if t == nil {
		t = &CreateEvent_CreateEvent{}
	}
	return &t.Event
}

type DeleteEvent_DeleteEvent struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteEvent_DeleteEvent) GetDeletedID() string {
	if t == nil {
		t = &DeleteEvent_DeleteEvent{}
	}
	return t.DeletedID
}

type GetAllEvents_Events_Edges_Node_User struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_User) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_User{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Group) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Group{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Integration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Integration) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Integration{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Organization) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Organization{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Invite struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Invite) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Invite{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Feature struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Feature) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Feature{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_PersonalAccessToken struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_PersonalAccessToken{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Oauth2token struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Oauth2token) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Oauth2token{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Hush struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Hush) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Hush{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Orgmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Orgmembership) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Orgmembership{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Groupmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Groupmembership) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Groupmembership{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Entitlement struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Entitlement) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Entitlement{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Webhook struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Webhook) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Webhook{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node struct {
	ID                  string                                                "json:\"id\" graphql:\"id\""
	CreatedAt           *time.Time                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt           *time.Time                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy           *string                                               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy           *string                                               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	EventID             *string                                               "json:\"eventID,omitempty\" graphql:\"eventID\""
	CorrelationID       *string                                               "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	EventType           string                                                "json:\"eventType\" graphql:\"eventType\""
	Metadata            map[string]interface{}                                "json:\"metadata,omitempty\" graphql:\"metadata\""
	User                []*GetAllEvents_Events_Edges_Node_User                "json:\"user,omitempty\" graphql:\"user\""
	Group               []*GetAllEvents_Events_Edges_Node_Group               "json:\"group,omitempty\" graphql:\"group\""
	Integration         []*GetAllEvents_Events_Edges_Node_Integration         "json:\"integration,omitempty\" graphql:\"integration\""
	Organization        []*GetAllEvents_Events_Edges_Node_Organization        "json:\"organization,omitempty\" graphql:\"organization\""
	Invite              []*GetAllEvents_Events_Edges_Node_Invite              "json:\"invite,omitempty\" graphql:\"invite\""
	Feature             []*GetAllEvents_Events_Edges_Node_Feature             "json:\"feature,omitempty\" graphql:\"feature\""
	PersonalAccessToken []*GetAllEvents_Events_Edges_Node_PersonalAccessToken "json:\"personalAccessToken,omitempty\" graphql:\"personalAccessToken\""
	Oauth2token         []*GetAllEvents_Events_Edges_Node_Oauth2token         "json:\"oauth2token,omitempty\" graphql:\"oauth2token\""
	Hush                []*GetAllEvents_Events_Edges_Node_Hush                "json:\"hush,omitempty\" graphql:\"hush\""
	Orgmembership       []*GetAllEvents_Events_Edges_Node_Orgmembership       "json:\"orgmembership,omitempty\" graphql:\"orgmembership\""
	Groupmembership     []*GetAllEvents_Events_Edges_Node_Groupmembership     "json:\"groupmembership,omitempty\" graphql:\"groupmembership\""
	Entitlement         []*GetAllEvents_Events_Edges_Node_Entitlement         "json:\"entitlement,omitempty\" graphql:\"entitlement\""
	Webhook             []*GetAllEvents_Events_Edges_Node_Webhook             "json:\"webhook,omitempty\" graphql:\"webhook\""
}

func (t *GetAllEvents_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEvents_Events_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEvents_Events_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEvents_Events_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEvents_Events_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllEvents_Events_Edges_Node) GetEventID() *string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.EventID
}
func (t *GetAllEvents_Events_Edges_Node) GetCorrelationID() *string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.CorrelationID
}
func (t *GetAllEvents_Events_Edges_Node) GetEventType() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.EventType
}
func (t *GetAllEvents_Events_Edges_Node) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetAllEvents_Events_Edges_Node) GetUser() []*GetAllEvents_Events_Edges_Node_User {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.User
}
func (t *GetAllEvents_Events_Edges_Node) GetGroup() []*GetAllEvents_Events_Edges_Node_Group {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Group
}
func (t *GetAllEvents_Events_Edges_Node) GetIntegration() []*GetAllEvents_Events_Edges_Node_Integration {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Integration
}
func (t *GetAllEvents_Events_Edges_Node) GetOrganization() []*GetAllEvents_Events_Edges_Node_Organization {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Organization
}
func (t *GetAllEvents_Events_Edges_Node) GetInvite() []*GetAllEvents_Events_Edges_Node_Invite {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Invite
}
func (t *GetAllEvents_Events_Edges_Node) GetFeature() []*GetAllEvents_Events_Edges_Node_Feature {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Feature
}
func (t *GetAllEvents_Events_Edges_Node) GetPersonalAccessToken() []*GetAllEvents_Events_Edges_Node_PersonalAccessToken {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.PersonalAccessToken
}
func (t *GetAllEvents_Events_Edges_Node) GetOauth2token() []*GetAllEvents_Events_Edges_Node_Oauth2token {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Oauth2token
}
func (t *GetAllEvents_Events_Edges_Node) GetHush() []*GetAllEvents_Events_Edges_Node_Hush {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Hush
}
func (t *GetAllEvents_Events_Edges_Node) GetOrgmembership() []*GetAllEvents_Events_Edges_Node_Orgmembership {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Orgmembership
}
func (t *GetAllEvents_Events_Edges_Node) GetGroupmembership() []*GetAllEvents_Events_Edges_Node_Groupmembership {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Groupmembership
}
func (t *GetAllEvents_Events_Edges_Node) GetEntitlement() []*GetAllEvents_Events_Edges_Node_Entitlement {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Entitlement
}
func (t *GetAllEvents_Events_Edges_Node) GetWebhook() []*GetAllEvents_Events_Edges_Node_Webhook {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Webhook
}

type GetAllEvents_Events_Edges struct {
	Node *GetAllEvents_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvents_Events_Edges) GetNode() *GetAllEvents_Events_Edges_Node {
	if t == nil {
		t = &GetAllEvents_Events_Edges{}
	}
	return t.Node
}

type GetAllEvents_Events struct {
	Edges []*GetAllEvents_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEvents_Events) GetEdges() []*GetAllEvents_Events_Edges {
	if t == nil {
		t = &GetAllEvents_Events{}
	}
	return t.Edges
}

type GetEventByID_Event_User struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_User) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_User{}
	}
	return t.ID
}

type GetEventByID_Event_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Group) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Group{}
	}
	return t.ID
}

type GetEventByID_Event_Integration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Integration) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Integration{}
	}
	return t.ID
}

type GetEventByID_Event_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Organization) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Organization{}
	}
	return t.ID
}

type GetEventByID_Event_Invite struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Invite) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Invite{}
	}
	return t.ID
}

type GetEventByID_Event_Feature struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Feature) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Feature{}
	}
	return t.ID
}

type GetEventByID_Event_PersonalAccessToken struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_PersonalAccessToken{}
	}
	return t.ID
}

type GetEventByID_Event_Oauth2token struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Oauth2token) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Oauth2token{}
	}
	return t.ID
}

type GetEventByID_Event_Hush struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Hush) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Hush{}
	}
	return t.ID
}

type GetEventByID_Event_Orgmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Orgmembership) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Orgmembership{}
	}
	return t.ID
}

type GetEventByID_Event_Groupmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Groupmembership) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Groupmembership{}
	}
	return t.ID
}

type GetEventByID_Event_Entitlement struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Entitlement) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Entitlement{}
	}
	return t.ID
}

type GetEventByID_Event_Webhook struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Webhook) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Webhook{}
	}
	return t.ID
}

type GetEventByID_Event struct {
	ID                  string                                    "json:\"id\" graphql:\"id\""
	CreatedAt           *time.Time                                "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt           *time.Time                                "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy           *string                                   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy           *string                                   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	EventID             *string                                   "json:\"eventID,omitempty\" graphql:\"eventID\""
	CorrelationID       *string                                   "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	EventType           string                                    "json:\"eventType\" graphql:\"eventType\""
	Metadata            map[string]interface{}                    "json:\"metadata,omitempty\" graphql:\"metadata\""
	User                []*GetEventByID_Event_User                "json:\"user,omitempty\" graphql:\"user\""
	Group               []*GetEventByID_Event_Group               "json:\"group,omitempty\" graphql:\"group\""
	Integration         []*GetEventByID_Event_Integration         "json:\"integration,omitempty\" graphql:\"integration\""
	Organization        []*GetEventByID_Event_Organization        "json:\"organization,omitempty\" graphql:\"organization\""
	Invite              []*GetEventByID_Event_Invite              "json:\"invite,omitempty\" graphql:\"invite\""
	Feature             []*GetEventByID_Event_Feature             "json:\"feature,omitempty\" graphql:\"feature\""
	PersonalAccessToken []*GetEventByID_Event_PersonalAccessToken "json:\"personalAccessToken,omitempty\" graphql:\"personalAccessToken\""
	Oauth2token         []*GetEventByID_Event_Oauth2token         "json:\"oauth2token,omitempty\" graphql:\"oauth2token\""
	Hush                []*GetEventByID_Event_Hush                "json:\"hush,omitempty\" graphql:\"hush\""
	Orgmembership       []*GetEventByID_Event_Orgmembership       "json:\"orgmembership,omitempty\" graphql:\"orgmembership\""
	Groupmembership     []*GetEventByID_Event_Groupmembership     "json:\"groupmembership,omitempty\" graphql:\"groupmembership\""
	Entitlement         []*GetEventByID_Event_Entitlement         "json:\"entitlement,omitempty\" graphql:\"entitlement\""
	Webhook             []*GetEventByID_Event_Webhook             "json:\"webhook,omitempty\" graphql:\"webhook\""
}

func (t *GetEventByID_Event) GetID() string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.ID
}
func (t *GetEventByID_Event) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.CreatedAt
}
func (t *GetEventByID_Event) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.UpdatedAt
}
func (t *GetEventByID_Event) GetCreatedBy() *string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.CreatedBy
}
func (t *GetEventByID_Event) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.UpdatedBy
}
func (t *GetEventByID_Event) GetEventID() *string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.EventID
}
func (t *GetEventByID_Event) GetCorrelationID() *string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.CorrelationID
}
func (t *GetEventByID_Event) GetEventType() string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.EventType
}
func (t *GetEventByID_Event) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Metadata
}
func (t *GetEventByID_Event) GetUser() []*GetEventByID_Event_User {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.User
}
func (t *GetEventByID_Event) GetGroup() []*GetEventByID_Event_Group {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Group
}
func (t *GetEventByID_Event) GetIntegration() []*GetEventByID_Event_Integration {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Integration
}
func (t *GetEventByID_Event) GetOrganization() []*GetEventByID_Event_Organization {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Organization
}
func (t *GetEventByID_Event) GetInvite() []*GetEventByID_Event_Invite {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Invite
}
func (t *GetEventByID_Event) GetFeature() []*GetEventByID_Event_Feature {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Feature
}
func (t *GetEventByID_Event) GetPersonalAccessToken() []*GetEventByID_Event_PersonalAccessToken {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.PersonalAccessToken
}
func (t *GetEventByID_Event) GetOauth2token() []*GetEventByID_Event_Oauth2token {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Oauth2token
}
func (t *GetEventByID_Event) GetHush() []*GetEventByID_Event_Hush {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Hush
}
func (t *GetEventByID_Event) GetOrgmembership() []*GetEventByID_Event_Orgmembership {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Orgmembership
}
func (t *GetEventByID_Event) GetGroupmembership() []*GetEventByID_Event_Groupmembership {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Groupmembership
}
func (t *GetEventByID_Event) GetEntitlement() []*GetEventByID_Event_Entitlement {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Entitlement
}
func (t *GetEventByID_Event) GetWebhook() []*GetEventByID_Event_Webhook {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Webhook
}

type GetEvents_Events_Edges_Node struct {
	EventID       *string                "json:\"eventID,omitempty\" graphql:\"eventID\""
	ID            string                 "json:\"id\" graphql:\"id\""
	CorrelationID *string                "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	EventType     string                 "json:\"eventType\" graphql:\"eventType\""
	Metadata      map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
}

func (t *GetEvents_Events_Edges_Node) GetEventID() *string {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.EventID
}
func (t *GetEvents_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.ID
}
func (t *GetEvents_Events_Edges_Node) GetCorrelationID() *string {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.CorrelationID
}
func (t *GetEvents_Events_Edges_Node) GetEventType() string {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.EventType
}
func (t *GetEvents_Events_Edges_Node) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.Metadata
}

type GetEvents_Events_Edges struct {
	Node *GetEvents_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvents_Events_Edges) GetNode() *GetEvents_Events_Edges_Node {
	if t == nil {
		t = &GetEvents_Events_Edges{}
	}
	return t.Node
}

type GetEvents_Events struct {
	Edges []*GetEvents_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEvents_Events) GetEdges() []*GetEvents_Events_Edges {
	if t == nil {
		t = &GetEvents_Events{}
	}
	return t.Edges
}

type UpdateEvent_UpdateEvent_Event_User struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_User) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_User{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_Group) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_Group{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_Integration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_Integration) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_Integration{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_Organization) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_Organization{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_Invite struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_Invite) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_Invite{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_Feature struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_Feature) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_Feature{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_PersonalAccessToken struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_PersonalAccessToken{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_Oauth2token struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_Oauth2token) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_Oauth2token{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_Hush struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_Hush) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_Hush{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_Orgmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_Orgmembership) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_Orgmembership{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_Groupmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_Groupmembership) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_Groupmembership{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_Entitlement struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_Entitlement) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_Entitlement{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_Webhook struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_Webhook) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_Webhook{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event struct {
	ID                  string                                               "json:\"id\" graphql:\"id\""
	CreatedAt           *time.Time                                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt           *time.Time                                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy           *string                                              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy           *string                                              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	EventID             *string                                              "json:\"eventID,omitempty\" graphql:\"eventID\""
	CorrelationID       *string                                              "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	EventType           string                                               "json:\"eventType\" graphql:\"eventType\""
	Metadata            map[string]interface{}                               "json:\"metadata,omitempty\" graphql:\"metadata\""
	User                []*UpdateEvent_UpdateEvent_Event_User                "json:\"user,omitempty\" graphql:\"user\""
	Group               []*UpdateEvent_UpdateEvent_Event_Group               "json:\"group,omitempty\" graphql:\"group\""
	Integration         []*UpdateEvent_UpdateEvent_Event_Integration         "json:\"integration,omitempty\" graphql:\"integration\""
	Organization        []*UpdateEvent_UpdateEvent_Event_Organization        "json:\"organization,omitempty\" graphql:\"organization\""
	Invite              []*UpdateEvent_UpdateEvent_Event_Invite              "json:\"invite,omitempty\" graphql:\"invite\""
	Feature             []*UpdateEvent_UpdateEvent_Event_Feature             "json:\"feature,omitempty\" graphql:\"feature\""
	PersonalAccessToken []*UpdateEvent_UpdateEvent_Event_PersonalAccessToken "json:\"personalAccessToken,omitempty\" graphql:\"personalAccessToken\""
	Oauth2token         []*UpdateEvent_UpdateEvent_Event_Oauth2token         "json:\"oauth2token,omitempty\" graphql:\"oauth2token\""
	Hush                []*UpdateEvent_UpdateEvent_Event_Hush                "json:\"hush,omitempty\" graphql:\"hush\""
	Orgmembership       []*UpdateEvent_UpdateEvent_Event_Orgmembership       "json:\"orgmembership,omitempty\" graphql:\"orgmembership\""
	Groupmembership     []*UpdateEvent_UpdateEvent_Event_Groupmembership     "json:\"groupmembership,omitempty\" graphql:\"groupmembership\""
	Entitlement         []*UpdateEvent_UpdateEvent_Event_Entitlement         "json:\"entitlement,omitempty\" graphql:\"entitlement\""
	Webhook             []*UpdateEvent_UpdateEvent_Event_Webhook             "json:\"webhook,omitempty\" graphql:\"webhook\""
}

func (t *UpdateEvent_UpdateEvent_Event) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.ID
}
func (t *UpdateEvent_UpdateEvent_Event) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.CreatedAt
}
func (t *UpdateEvent_UpdateEvent_Event) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.UpdatedAt
}
func (t *UpdateEvent_UpdateEvent_Event) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.CreatedBy
}
func (t *UpdateEvent_UpdateEvent_Event) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.UpdatedBy
}
func (t *UpdateEvent_UpdateEvent_Event) GetEventID() *string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.EventID
}
func (t *UpdateEvent_UpdateEvent_Event) GetCorrelationID() *string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.CorrelationID
}
func (t *UpdateEvent_UpdateEvent_Event) GetEventType() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.EventType
}
func (t *UpdateEvent_UpdateEvent_Event) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Metadata
}
func (t *UpdateEvent_UpdateEvent_Event) GetUser() []*UpdateEvent_UpdateEvent_Event_User {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.User
}
func (t *UpdateEvent_UpdateEvent_Event) GetGroup() []*UpdateEvent_UpdateEvent_Event_Group {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Group
}
func (t *UpdateEvent_UpdateEvent_Event) GetIntegration() []*UpdateEvent_UpdateEvent_Event_Integration {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Integration
}
func (t *UpdateEvent_UpdateEvent_Event) GetOrganization() []*UpdateEvent_UpdateEvent_Event_Organization {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Organization
}
func (t *UpdateEvent_UpdateEvent_Event) GetInvite() []*UpdateEvent_UpdateEvent_Event_Invite {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Invite
}
func (t *UpdateEvent_UpdateEvent_Event) GetFeature() []*UpdateEvent_UpdateEvent_Event_Feature {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Feature
}
func (t *UpdateEvent_UpdateEvent_Event) GetPersonalAccessToken() []*UpdateEvent_UpdateEvent_Event_PersonalAccessToken {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.PersonalAccessToken
}
func (t *UpdateEvent_UpdateEvent_Event) GetOauth2token() []*UpdateEvent_UpdateEvent_Event_Oauth2token {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Oauth2token
}
func (t *UpdateEvent_UpdateEvent_Event) GetHush() []*UpdateEvent_UpdateEvent_Event_Hush {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Hush
}
func (t *UpdateEvent_UpdateEvent_Event) GetOrgmembership() []*UpdateEvent_UpdateEvent_Event_Orgmembership {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Orgmembership
}
func (t *UpdateEvent_UpdateEvent_Event) GetGroupmembership() []*UpdateEvent_UpdateEvent_Event_Groupmembership {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Groupmembership
}
func (t *UpdateEvent_UpdateEvent_Event) GetEntitlement() []*UpdateEvent_UpdateEvent_Event_Entitlement {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Entitlement
}
func (t *UpdateEvent_UpdateEvent_Event) GetWebhook() []*UpdateEvent_UpdateEvent_Event_Webhook {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Webhook
}

type UpdateEvent_UpdateEvent struct {
	Event UpdateEvent_UpdateEvent_Event "json:\"event\" graphql:\"event\""
}

func (t *UpdateEvent_UpdateEvent) GetEvent() *UpdateEvent_UpdateEvent_Event {
	if t == nil {
		t = &UpdateEvent_UpdateEvent{}
	}
	return &t.Event
}

type GetAllEventHistories_EventHistories_Edges_Node struct {
	CorrelationID *string                "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	CreatedAt     *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EventID       *string                "json:\"eventID,omitempty\" graphql:\"eventID\""
	EventType     string                 "json:\"eventType\" graphql:\"eventType\""
	HistoryTime   time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID            string                 "json:\"id\" graphql:\"id\""
	Metadata      map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	Operation     history.OpType         "json:\"operation\" graphql:\"operation\""
	Ref           *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Tags          []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllEventHistories_EventHistories_Edges_Node) GetCorrelationID() *string {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return t.CorrelationID
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetEventID() *string {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return t.EventID
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetEventType() string {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return t.EventType
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEventHistories_EventHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllEventHistories_EventHistories_Edges struct {
	Node *GetAllEventHistories_EventHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEventHistories_EventHistories_Edges) GetNode() *GetAllEventHistories_EventHistories_Edges_Node {
	if t == nil {
		t = &GetAllEventHistories_EventHistories_Edges{}
	}
	return t.Node
}

type GetAllEventHistories_EventHistories struct {
	Edges []*GetAllEventHistories_EventHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEventHistories_EventHistories) GetEdges() []*GetAllEventHistories_EventHistories_Edges {
	if t == nil {
		t = &GetAllEventHistories_EventHistories{}
	}
	return t.Edges
}

type GetEventHistories_EventHistories_Edges_Node struct {
	CorrelationID *string                "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	CreatedAt     *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EventID       *string                "json:\"eventID,omitempty\" graphql:\"eventID\""
	EventType     string                 "json:\"eventType\" graphql:\"eventType\""
	HistoryTime   time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID            string                 "json:\"id\" graphql:\"id\""
	Metadata      map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	Operation     history.OpType         "json:\"operation\" graphql:\"operation\""
	Ref           *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Tags          []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetEventHistories_EventHistories_Edges_Node) GetCorrelationID() *string {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return t.CorrelationID
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetEventID() *string {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return t.EventID
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetEventType() string {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return t.EventType
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetEventHistories_EventHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetEventHistories_EventHistories_Edges struct {
	Node *GetEventHistories_EventHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEventHistories_EventHistories_Edges) GetNode() *GetEventHistories_EventHistories_Edges_Node {
	if t == nil {
		t = &GetEventHistories_EventHistories_Edges{}
	}
	return t.Node
}

type GetEventHistories_EventHistories struct {
	Edges []*GetEventHistories_EventHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEventHistories_EventHistories) GetEdges() []*GetEventHistories_EventHistories_Edges {
	if t == nil {
		t = &GetEventHistories_EventHistories{}
	}
	return t.Edges
}

type CreateBulkCSVFeature_CreateBulkCSVFeature_Features struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	Enabled     bool     "json:\"enabled\" graphql:\"enabled\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	DisplayName *string  "json:\"displayName,omitempty\" graphql:\"displayName\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *CreateBulkCSVFeature_CreateBulkCSVFeature_Features) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVFeature_CreateBulkCSVFeature_Features{}
	}
	return t.Description
}
func (t *CreateBulkCSVFeature_CreateBulkCSVFeature_Features) GetEnabled() bool {
	if t == nil {
		t = &CreateBulkCSVFeature_CreateBulkCSVFeature_Features{}
	}
	return t.Enabled
}
func (t *CreateBulkCSVFeature_CreateBulkCSVFeature_Features) GetID() string {
	if t == nil {
		t = &CreateBulkCSVFeature_CreateBulkCSVFeature_Features{}
	}
	return t.ID
}
func (t *CreateBulkCSVFeature_CreateBulkCSVFeature_Features) GetName() string {
	if t == nil {
		t = &CreateBulkCSVFeature_CreateBulkCSVFeature_Features{}
	}
	return t.Name
}
func (t *CreateBulkCSVFeature_CreateBulkCSVFeature_Features) GetDisplayName() *string {
	if t == nil {
		t = &CreateBulkCSVFeature_CreateBulkCSVFeature_Features{}
	}
	return t.DisplayName
}
func (t *CreateBulkCSVFeature_CreateBulkCSVFeature_Features) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVFeature_CreateBulkCSVFeature_Features{}
	}
	return t.Tags
}

type CreateBulkCSVFeature_CreateBulkCSVFeature struct {
	Features []*CreateBulkCSVFeature_CreateBulkCSVFeature_Features "json:\"features,omitempty\" graphql:\"features\""
}

func (t *CreateBulkCSVFeature_CreateBulkCSVFeature) GetFeatures() []*CreateBulkCSVFeature_CreateBulkCSVFeature_Features {
	if t == nil {
		t = &CreateBulkCSVFeature_CreateBulkCSVFeature{}
	}
	return t.Features
}

type CreateBulkFeature_CreateBulkFeature_Features struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	Enabled     bool     "json:\"enabled\" graphql:\"enabled\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	DisplayName *string  "json:\"displayName,omitempty\" graphql:\"displayName\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *CreateBulkFeature_CreateBulkFeature_Features) GetDescription() *string {
	if t == nil {
		t = &CreateBulkFeature_CreateBulkFeature_Features{}
	}
	return t.Description
}
func (t *CreateBulkFeature_CreateBulkFeature_Features) GetEnabled() bool {
	if t == nil {
		t = &CreateBulkFeature_CreateBulkFeature_Features{}
	}
	return t.Enabled
}
func (t *CreateBulkFeature_CreateBulkFeature_Features) GetID() string {
	if t == nil {
		t = &CreateBulkFeature_CreateBulkFeature_Features{}
	}
	return t.ID
}
func (t *CreateBulkFeature_CreateBulkFeature_Features) GetName() string {
	if t == nil {
		t = &CreateBulkFeature_CreateBulkFeature_Features{}
	}
	return t.Name
}
func (t *CreateBulkFeature_CreateBulkFeature_Features) GetDisplayName() *string {
	if t == nil {
		t = &CreateBulkFeature_CreateBulkFeature_Features{}
	}
	return t.DisplayName
}
func (t *CreateBulkFeature_CreateBulkFeature_Features) GetTags() []string {
	if t == nil {
		t = &CreateBulkFeature_CreateBulkFeature_Features{}
	}
	return t.Tags
}

type CreateBulkFeature_CreateBulkFeature struct {
	Features []*CreateBulkFeature_CreateBulkFeature_Features "json:\"features,omitempty\" graphql:\"features\""
}

func (t *CreateBulkFeature_CreateBulkFeature) GetFeatures() []*CreateBulkFeature_CreateBulkFeature_Features {
	if t == nil {
		t = &CreateBulkFeature_CreateBulkFeature{}
	}
	return t.Features
}

type CreateFeature_CreateFeature_Feature struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	Enabled     bool     "json:\"enabled\" graphql:\"enabled\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	DisplayName *string  "json:\"displayName,omitempty\" graphql:\"displayName\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *CreateFeature_CreateFeature_Feature) GetDescription() *string {
	if t == nil {
		t = &CreateFeature_CreateFeature_Feature{}
	}
	return t.Description
}
func (t *CreateFeature_CreateFeature_Feature) GetEnabled() bool {
	if t == nil {
		t = &CreateFeature_CreateFeature_Feature{}
	}
	return t.Enabled
}
func (t *CreateFeature_CreateFeature_Feature) GetID() string {
	if t == nil {
		t = &CreateFeature_CreateFeature_Feature{}
	}
	return t.ID
}
func (t *CreateFeature_CreateFeature_Feature) GetName() string {
	if t == nil {
		t = &CreateFeature_CreateFeature_Feature{}
	}
	return t.Name
}
func (t *CreateFeature_CreateFeature_Feature) GetDisplayName() *string {
	if t == nil {
		t = &CreateFeature_CreateFeature_Feature{}
	}
	return t.DisplayName
}
func (t *CreateFeature_CreateFeature_Feature) GetTags() []string {
	if t == nil {
		t = &CreateFeature_CreateFeature_Feature{}
	}
	return t.Tags
}

type CreateFeature_CreateFeature struct {
	Feature CreateFeature_CreateFeature_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *CreateFeature_CreateFeature) GetFeature() *CreateFeature_CreateFeature_Feature {
	if t == nil {
		t = &CreateFeature_CreateFeature{}
	}
	return &t.Feature
}

type DeleteFeature_DeleteFeature struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteFeature_DeleteFeature) GetDeletedID() string {
	if t == nil {
		t = &DeleteFeature_DeleteFeature{}
	}
	return t.DeletedID
}

type GetAllFeatures_Features_Edges_Node struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	Enabled     bool     "json:\"enabled\" graphql:\"enabled\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	DisplayName *string  "json:\"displayName,omitempty\" graphql:\"displayName\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GetAllFeatures_Features_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllFeatures_Features_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllFeatures_Features_Edges_Node) GetEnabled() bool {
	if t == nil {
		t = &GetAllFeatures_Features_Edges_Node{}
	}
	return t.Enabled
}
func (t *GetAllFeatures_Features_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllFeatures_Features_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllFeatures_Features_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllFeatures_Features_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllFeatures_Features_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetAllFeatures_Features_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllFeatures_Features_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllFeatures_Features_Edges_Node{}
	}
	return t.Tags
}

type GetAllFeatures_Features_Edges struct {
	Node *GetAllFeatures_Features_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllFeatures_Features_Edges) GetNode() *GetAllFeatures_Features_Edges_Node {
	if t == nil {
		t = &GetAllFeatures_Features_Edges{}
	}
	return t.Node
}

type GetAllFeatures_Features struct {
	Edges []*GetAllFeatures_Features_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllFeatures_Features) GetEdges() []*GetAllFeatures_Features_Edges {
	if t == nil {
		t = &GetAllFeatures_Features{}
	}
	return t.Edges
}

type GetFeatureByID_Feature struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	Enabled     bool     "json:\"enabled\" graphql:\"enabled\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	DisplayName *string  "json:\"displayName,omitempty\" graphql:\"displayName\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GetFeatureByID_Feature) GetDescription() *string {
	if t == nil {
		t = &GetFeatureByID_Feature{}
	}
	return t.Description
}
func (t *GetFeatureByID_Feature) GetEnabled() bool {
	if t == nil {
		t = &GetFeatureByID_Feature{}
	}
	return t.Enabled
}
func (t *GetFeatureByID_Feature) GetID() string {
	if t == nil {
		t = &GetFeatureByID_Feature{}
	}
	return t.ID
}
func (t *GetFeatureByID_Feature) GetName() string {
	if t == nil {
		t = &GetFeatureByID_Feature{}
	}
	return t.Name
}
func (t *GetFeatureByID_Feature) GetDisplayName() *string {
	if t == nil {
		t = &GetFeatureByID_Feature{}
	}
	return t.DisplayName
}
func (t *GetFeatureByID_Feature) GetTags() []string {
	if t == nil {
		t = &GetFeatureByID_Feature{}
	}
	return t.Tags
}

type GetFeatures_Features_Edges_Node struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	Enabled     bool     "json:\"enabled\" graphql:\"enabled\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	DisplayName *string  "json:\"displayName,omitempty\" graphql:\"displayName\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GetFeatures_Features_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetFeatures_Features_Edges_Node{}
	}
	return t.Description
}
func (t *GetFeatures_Features_Edges_Node) GetEnabled() bool {
	if t == nil {
		t = &GetFeatures_Features_Edges_Node{}
	}
	return t.Enabled
}
func (t *GetFeatures_Features_Edges_Node) GetID() string {
	if t == nil {
		t = &GetFeatures_Features_Edges_Node{}
	}
	return t.ID
}
func (t *GetFeatures_Features_Edges_Node) GetName() string {
	if t == nil {
		t = &GetFeatures_Features_Edges_Node{}
	}
	return t.Name
}
func (t *GetFeatures_Features_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetFeatures_Features_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetFeatures_Features_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetFeatures_Features_Edges_Node{}
	}
	return t.Tags
}

type GetFeatures_Features_Edges struct {
	Node *GetFeatures_Features_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetFeatures_Features_Edges) GetNode() *GetFeatures_Features_Edges_Node {
	if t == nil {
		t = &GetFeatures_Features_Edges{}
	}
	return t.Node
}

type GetFeatures_Features struct {
	Edges []*GetFeatures_Features_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetFeatures_Features) GetEdges() []*GetFeatures_Features_Edges {
	if t == nil {
		t = &GetFeatures_Features{}
	}
	return t.Edges
}

type UpdateFeature_UpdateFeature_Feature struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	Enabled     bool     "json:\"enabled\" graphql:\"enabled\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	DisplayName *string  "json:\"displayName,omitempty\" graphql:\"displayName\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *UpdateFeature_UpdateFeature_Feature) GetDescription() *string {
	if t == nil {
		t = &UpdateFeature_UpdateFeature_Feature{}
	}
	return t.Description
}
func (t *UpdateFeature_UpdateFeature_Feature) GetEnabled() bool {
	if t == nil {
		t = &UpdateFeature_UpdateFeature_Feature{}
	}
	return t.Enabled
}
func (t *UpdateFeature_UpdateFeature_Feature) GetID() string {
	if t == nil {
		t = &UpdateFeature_UpdateFeature_Feature{}
	}
	return t.ID
}
func (t *UpdateFeature_UpdateFeature_Feature) GetName() string {
	if t == nil {
		t = &UpdateFeature_UpdateFeature_Feature{}
	}
	return t.Name
}
func (t *UpdateFeature_UpdateFeature_Feature) GetDisplayName() *string {
	if t == nil {
		t = &UpdateFeature_UpdateFeature_Feature{}
	}
	return t.DisplayName
}
func (t *UpdateFeature_UpdateFeature_Feature) GetTags() []string {
	if t == nil {
		t = &UpdateFeature_UpdateFeature_Feature{}
	}
	return t.Tags
}

type UpdateFeature_UpdateFeature struct {
	Feature UpdateFeature_UpdateFeature_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *UpdateFeature_UpdateFeature) GetFeature() *UpdateFeature_UpdateFeature_Feature {
	if t == nil {
		t = &UpdateFeature_UpdateFeature{}
	}
	return &t.Feature
}

type GetAllFeatureHistories_FeatureHistories_Edges_Node struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	DisplayName *string                "json:\"displayName,omitempty\" graphql:\"displayName\""
	Enabled     bool                   "json:\"enabled\" graphql:\"enabled\""
	HistoryTime time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Metadata    map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Operation   history.OpType         "json:\"operation\" graphql:\"operation\""
	OwnerID     *string                "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllFeatureHistories_FeatureHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllFeatureHistories_FeatureHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllFeatureHistories_FeatureHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllFeatureHistories_FeatureHistories_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetAllFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllFeatureHistories_FeatureHistories_Edges_Node) GetEnabled() bool {
	if t == nil {
		t = &GetAllFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.Enabled
}
func (t *GetAllFeatureHistories_FeatureHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllFeatureHistories_FeatureHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllFeatureHistories_FeatureHistories_Edges_Node) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetAllFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetAllFeatureHistories_FeatureHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllFeatureHistories_FeatureHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllFeatureHistories_FeatureHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllFeatureHistories_FeatureHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllFeatureHistories_FeatureHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllFeatureHistories_FeatureHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllFeatureHistories_FeatureHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllFeatureHistories_FeatureHistories_Edges struct {
	Node *GetAllFeatureHistories_FeatureHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllFeatureHistories_FeatureHistories_Edges) GetNode() *GetAllFeatureHistories_FeatureHistories_Edges_Node {
	if t == nil {
		t = &GetAllFeatureHistories_FeatureHistories_Edges{}
	}
	return t.Node
}

type GetAllFeatureHistories_FeatureHistories struct {
	Edges []*GetAllFeatureHistories_FeatureHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllFeatureHistories_FeatureHistories) GetEdges() []*GetAllFeatureHistories_FeatureHistories_Edges {
	if t == nil {
		t = &GetAllFeatureHistories_FeatureHistories{}
	}
	return t.Edges
}

type GetFeatureHistories_FeatureHistories_Edges_Node struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	DisplayName *string                "json:\"displayName,omitempty\" graphql:\"displayName\""
	Enabled     bool                   "json:\"enabled\" graphql:\"enabled\""
	HistoryTime time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Metadata    map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Operation   history.OpType         "json:\"operation\" graphql:\"operation\""
	OwnerID     *string                "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetFeatureHistories_FeatureHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetFeatureHistories_FeatureHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetFeatureHistories_FeatureHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetFeatureHistories_FeatureHistories_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetFeatureHistories_FeatureHistories_Edges_Node) GetEnabled() bool {
	if t == nil {
		t = &GetFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.Enabled
}
func (t *GetFeatureHistories_FeatureHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetFeatureHistories_FeatureHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetFeatureHistories_FeatureHistories_Edges_Node) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetFeatureHistories_FeatureHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetFeatureHistories_FeatureHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetFeatureHistories_FeatureHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetFeatureHistories_FeatureHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetFeatureHistories_FeatureHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetFeatureHistories_FeatureHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetFeatureHistories_FeatureHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetFeatureHistories_FeatureHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetFeatureHistories_FeatureHistories_Edges struct {
	Node *GetFeatureHistories_FeatureHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetFeatureHistories_FeatureHistories_Edges) GetNode() *GetFeatureHistories_FeatureHistories_Edges_Node {
	if t == nil {
		t = &GetFeatureHistories_FeatureHistories_Edges{}
	}
	return t.Node
}

type GetFeatureHistories_FeatureHistories struct {
	Edges []*GetFeatureHistories_FeatureHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetFeatureHistories_FeatureHistories) GetEdges() []*GetFeatureHistories_FeatureHistories_Edges {
	if t == nil {
		t = &GetFeatureHistories_FeatureHistories{}
	}
	return t.Edges
}

type DeleteFile_DeleteFile struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteFile_DeleteFile) GetDeletedID() string {
	if t == nil {
		t = &DeleteFile_DeleteFile{}
	}
	return t.DeletedID
}

type GetAllFiles_Files_Edges_Node struct {
	CategoryType          *string    "json:\"categoryType,omitempty\" graphql:\"categoryType\""
	CreatedAt             *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy             *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DetectedContentType   string     "json:\"detectedContentType\" graphql:\"detectedContentType\""
	DetectedMimeType      *string    "json:\"detectedMimeType,omitempty\" graphql:\"detectedMimeType\""
	ID                    string     "json:\"id\" graphql:\"id\""
	Md5Hash               *string    "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	PersistedFileSize     *int64     "json:\"persistedFileSize,omitempty\" graphql:\"persistedFileSize\""
	ProvidedFileExtension string     "json:\"providedFileExtension\" graphql:\"providedFileExtension\""
	ProvidedFileName      string     "json:\"providedFileName\" graphql:\"providedFileName\""
	ProvidedFileSize      *int64     "json:\"providedFileSize,omitempty\" graphql:\"providedFileSize\""
	StoragePath           *string    "json:\"storagePath,omitempty\" graphql:\"storagePath\""
	StorageScheme         *string    "json:\"storageScheme,omitempty\" graphql:\"storageScheme\""
	StorageVolume         *string    "json:\"storageVolume,omitempty\" graphql:\"storageVolume\""
	StoreKey              *string    "json:\"storeKey,omitempty\" graphql:\"storeKey\""
	Tags                  []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt             *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy             *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URI                   *string    "json:\"uri,omitempty\" graphql:\"uri\""
}

func (t *GetAllFiles_Files_Edges_Node) GetCategoryType() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.CategoryType
}
func (t *GetAllFiles_Files_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllFiles_Files_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllFiles_Files_Edges_Node) GetDetectedContentType() string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.DetectedContentType
}
func (t *GetAllFiles_Files_Edges_Node) GetDetectedMimeType() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.DetectedMimeType
}
func (t *GetAllFiles_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllFiles_Files_Edges_Node) GetMd5Hash() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.Md5Hash
}
func (t *GetAllFiles_Files_Edges_Node) GetPersistedFileSize() *int64 {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.PersistedFileSize
}
func (t *GetAllFiles_Files_Edges_Node) GetProvidedFileExtension() string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.ProvidedFileExtension
}
func (t *GetAllFiles_Files_Edges_Node) GetProvidedFileName() string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.ProvidedFileName
}
func (t *GetAllFiles_Files_Edges_Node) GetProvidedFileSize() *int64 {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.ProvidedFileSize
}
func (t *GetAllFiles_Files_Edges_Node) GetStoragePath() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.StoragePath
}
func (t *GetAllFiles_Files_Edges_Node) GetStorageScheme() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.StorageScheme
}
func (t *GetAllFiles_Files_Edges_Node) GetStorageVolume() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.StorageVolume
}
func (t *GetAllFiles_Files_Edges_Node) GetStoreKey() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.StoreKey
}
func (t *GetAllFiles_Files_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllFiles_Files_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllFiles_Files_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllFiles_Files_Edges_Node) GetURI() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.URI
}

type GetAllFiles_Files_Edges struct {
	Node *GetAllFiles_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllFiles_Files_Edges) GetNode() *GetAllFiles_Files_Edges_Node {
	if t == nil {
		t = &GetAllFiles_Files_Edges{}
	}
	return t.Node
}

type GetAllFiles_Files struct {
	Edges []*GetAllFiles_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllFiles_Files) GetEdges() []*GetAllFiles_Files_Edges {
	if t == nil {
		t = &GetAllFiles_Files{}
	}
	return t.Edges
}

type GetFileByID_File struct {
	CategoryType          *string    "json:\"categoryType,omitempty\" graphql:\"categoryType\""
	CreatedAt             *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy             *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DetectedContentType   string     "json:\"detectedContentType\" graphql:\"detectedContentType\""
	DetectedMimeType      *string    "json:\"detectedMimeType,omitempty\" graphql:\"detectedMimeType\""
	ID                    string     "json:\"id\" graphql:\"id\""
	Md5Hash               *string    "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	PersistedFileSize     *int64     "json:\"persistedFileSize,omitempty\" graphql:\"persistedFileSize\""
	ProvidedFileExtension string     "json:\"providedFileExtension\" graphql:\"providedFileExtension\""
	ProvidedFileName      string     "json:\"providedFileName\" graphql:\"providedFileName\""
	ProvidedFileSize      *int64     "json:\"providedFileSize,omitempty\" graphql:\"providedFileSize\""
	StoragePath           *string    "json:\"storagePath,omitempty\" graphql:\"storagePath\""
	StorageScheme         *string    "json:\"storageScheme,omitempty\" graphql:\"storageScheme\""
	StorageVolume         *string    "json:\"storageVolume,omitempty\" graphql:\"storageVolume\""
	StoreKey              *string    "json:\"storeKey,omitempty\" graphql:\"storeKey\""
	Tags                  []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt             *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy             *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URI                   *string    "json:\"uri,omitempty\" graphql:\"uri\""
}

func (t *GetFileByID_File) GetCategoryType() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.CategoryType
}
func (t *GetFileByID_File) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.CreatedAt
}
func (t *GetFileByID_File) GetCreatedBy() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.CreatedBy
}
func (t *GetFileByID_File) GetDetectedContentType() string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.DetectedContentType
}
func (t *GetFileByID_File) GetDetectedMimeType() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.DetectedMimeType
}
func (t *GetFileByID_File) GetID() string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.ID
}
func (t *GetFileByID_File) GetMd5Hash() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.Md5Hash
}
func (t *GetFileByID_File) GetPersistedFileSize() *int64 {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.PersistedFileSize
}
func (t *GetFileByID_File) GetProvidedFileExtension() string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.ProvidedFileExtension
}
func (t *GetFileByID_File) GetProvidedFileName() string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.ProvidedFileName
}
func (t *GetFileByID_File) GetProvidedFileSize() *int64 {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.ProvidedFileSize
}
func (t *GetFileByID_File) GetStoragePath() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.StoragePath
}
func (t *GetFileByID_File) GetStorageScheme() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.StorageScheme
}
func (t *GetFileByID_File) GetStorageVolume() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.StorageVolume
}
func (t *GetFileByID_File) GetStoreKey() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.StoreKey
}
func (t *GetFileByID_File) GetTags() []string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.Tags
}
func (t *GetFileByID_File) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.UpdatedAt
}
func (t *GetFileByID_File) GetUpdatedBy() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.UpdatedBy
}
func (t *GetFileByID_File) GetURI() *string {
	if t == nil {
		t = &GetFileByID_File{}
	}
	return t.URI
}

type GetFiles_Files_Edges_Node struct {
	CategoryType          *string    "json:\"categoryType,omitempty\" graphql:\"categoryType\""
	CreatedAt             *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy             *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DetectedContentType   string     "json:\"detectedContentType\" graphql:\"detectedContentType\""
	DetectedMimeType      *string    "json:\"detectedMimeType,omitempty\" graphql:\"detectedMimeType\""
	ID                    string     "json:\"id\" graphql:\"id\""
	Md5Hash               *string    "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	PersistedFileSize     *int64     "json:\"persistedFileSize,omitempty\" graphql:\"persistedFileSize\""
	ProvidedFileExtension string     "json:\"providedFileExtension\" graphql:\"providedFileExtension\""
	ProvidedFileName      string     "json:\"providedFileName\" graphql:\"providedFileName\""
	ProvidedFileSize      *int64     "json:\"providedFileSize,omitempty\" graphql:\"providedFileSize\""
	StoragePath           *string    "json:\"storagePath,omitempty\" graphql:\"storagePath\""
	StorageScheme         *string    "json:\"storageScheme,omitempty\" graphql:\"storageScheme\""
	StorageVolume         *string    "json:\"storageVolume,omitempty\" graphql:\"storageVolume\""
	StoreKey              *string    "json:\"storeKey,omitempty\" graphql:\"storeKey\""
	Tags                  []string   "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt             *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy             *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URI                   *string    "json:\"uri,omitempty\" graphql:\"uri\""
}

func (t *GetFiles_Files_Edges_Node) GetCategoryType() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.CategoryType
}
func (t *GetFiles_Files_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetFiles_Files_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetFiles_Files_Edges_Node) GetDetectedContentType() string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.DetectedContentType
}
func (t *GetFiles_Files_Edges_Node) GetDetectedMimeType() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.DetectedMimeType
}
func (t *GetFiles_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GetFiles_Files_Edges_Node) GetMd5Hash() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.Md5Hash
}
func (t *GetFiles_Files_Edges_Node) GetPersistedFileSize() *int64 {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.PersistedFileSize
}
func (t *GetFiles_Files_Edges_Node) GetProvidedFileExtension() string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.ProvidedFileExtension
}
func (t *GetFiles_Files_Edges_Node) GetProvidedFileName() string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.ProvidedFileName
}
func (t *GetFiles_Files_Edges_Node) GetProvidedFileSize() *int64 {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.ProvidedFileSize
}
func (t *GetFiles_Files_Edges_Node) GetStoragePath() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.StoragePath
}
func (t *GetFiles_Files_Edges_Node) GetStorageScheme() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.StorageScheme
}
func (t *GetFiles_Files_Edges_Node) GetStorageVolume() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.StorageVolume
}
func (t *GetFiles_Files_Edges_Node) GetStoreKey() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.StoreKey
}
func (t *GetFiles_Files_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.Tags
}
func (t *GetFiles_Files_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetFiles_Files_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetFiles_Files_Edges_Node) GetURI() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.URI
}

type GetFiles_Files_Edges struct {
	Node *GetFiles_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetFiles_Files_Edges) GetNode() *GetFiles_Files_Edges_Node {
	if t == nil {
		t = &GetFiles_Files_Edges{}
	}
	return t.Node
}

type GetFiles_Files struct {
	Edges []*GetFiles_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetFiles_Files) GetEdges() []*GetFiles_Files_Edges {
	if t == nil {
		t = &GetFiles_Files{}
	}
	return t.Edges
}

type GetAllFileHistories_FileHistories_Edges_Node struct {
	CategoryType          *string        "json:\"categoryType,omitempty\" graphql:\"categoryType\""
	CreatedAt             *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy             *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DetectedContentType   string         "json:\"detectedContentType\" graphql:\"detectedContentType\""
	DetectedMimeType      *string        "json:\"detectedMimeType,omitempty\" graphql:\"detectedMimeType\""
	HistoryTime           time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID                    string         "json:\"id\" graphql:\"id\""
	Md5Hash               *string        "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	Operation             history.OpType "json:\"operation\" graphql:\"operation\""
	PersistedFileSize     *int64         "json:\"persistedFileSize,omitempty\" graphql:\"persistedFileSize\""
	ProvidedFileExtension string         "json:\"providedFileExtension\" graphql:\"providedFileExtension\""
	ProvidedFileName      string         "json:\"providedFileName\" graphql:\"providedFileName\""
	ProvidedFileSize      *int64         "json:\"providedFileSize,omitempty\" graphql:\"providedFileSize\""
	Ref                   *string        "json:\"ref,omitempty\" graphql:\"ref\""
	StoragePath           *string        "json:\"storagePath,omitempty\" graphql:\"storagePath\""
	StorageScheme         *string        "json:\"storageScheme,omitempty\" graphql:\"storageScheme\""
	StorageVolume         *string        "json:\"storageVolume,omitempty\" graphql:\"storageVolume\""
	StoreKey              *string        "json:\"storeKey,omitempty\" graphql:\"storeKey\""
	Tags                  []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt             *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy             *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URI                   *string        "json:\"uri,omitempty\" graphql:\"uri\""
}

func (t *GetAllFileHistories_FileHistories_Edges_Node) GetCategoryType() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.CategoryType
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetDetectedContentType() string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.DetectedContentType
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetDetectedMimeType() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.DetectedMimeType
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetMd5Hash() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.Md5Hash
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetPersistedFileSize() *int64 {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.PersistedFileSize
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetProvidedFileExtension() string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.ProvidedFileExtension
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetProvidedFileName() string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.ProvidedFileName
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetProvidedFileSize() *int64 {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.ProvidedFileSize
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetStoragePath() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.StoragePath
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetStorageScheme() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.StorageScheme
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetStorageVolume() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.StorageVolume
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetStoreKey() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.StoreKey
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetURI() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.URI
}

type GetAllFileHistories_FileHistories_Edges struct {
	Node *GetAllFileHistories_FileHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllFileHistories_FileHistories_Edges) GetNode() *GetAllFileHistories_FileHistories_Edges_Node {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges{}
	}
	return t.Node
}

type GetAllFileHistories_FileHistories struct {
	Edges []*GetAllFileHistories_FileHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllFileHistories_FileHistories) GetEdges() []*GetAllFileHistories_FileHistories_Edges {
	if t == nil {
		t = &GetAllFileHistories_FileHistories{}
	}
	return t.Edges
}

type GetFileHistories_FileHistories_Edges_Node struct {
	CategoryType          *string        "json:\"categoryType,omitempty\" graphql:\"categoryType\""
	CreatedAt             *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy             *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DetectedContentType   string         "json:\"detectedContentType\" graphql:\"detectedContentType\""
	DetectedMimeType      *string        "json:\"detectedMimeType,omitempty\" graphql:\"detectedMimeType\""
	HistoryTime           time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID                    string         "json:\"id\" graphql:\"id\""
	Md5Hash               *string        "json:\"md5Hash,omitempty\" graphql:\"md5Hash\""
	Operation             history.OpType "json:\"operation\" graphql:\"operation\""
	PersistedFileSize     *int64         "json:\"persistedFileSize,omitempty\" graphql:\"persistedFileSize\""
	ProvidedFileExtension string         "json:\"providedFileExtension\" graphql:\"providedFileExtension\""
	ProvidedFileName      string         "json:\"providedFileName\" graphql:\"providedFileName\""
	ProvidedFileSize      *int64         "json:\"providedFileSize,omitempty\" graphql:\"providedFileSize\""
	Ref                   *string        "json:\"ref,omitempty\" graphql:\"ref\""
	StoragePath           *string        "json:\"storagePath,omitempty\" graphql:\"storagePath\""
	StorageScheme         *string        "json:\"storageScheme,omitempty\" graphql:\"storageScheme\""
	StorageVolume         *string        "json:\"storageVolume,omitempty\" graphql:\"storageVolume\""
	StoreKey              *string        "json:\"storeKey,omitempty\" graphql:\"storeKey\""
	Tags                  []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt             *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy             *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	URI                   *string        "json:\"uri,omitempty\" graphql:\"uri\""
}

func (t *GetFileHistories_FileHistories_Edges_Node) GetCategoryType() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.CategoryType
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetDetectedContentType() string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.DetectedContentType
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetDetectedMimeType() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.DetectedMimeType
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetMd5Hash() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.Md5Hash
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetPersistedFileSize() *int64 {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.PersistedFileSize
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetProvidedFileExtension() string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.ProvidedFileExtension
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetProvidedFileName() string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.ProvidedFileName
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetProvidedFileSize() *int64 {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.ProvidedFileSize
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetStoragePath() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.StoragePath
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetStorageScheme() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.StorageScheme
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetStorageVolume() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.StorageVolume
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetStoreKey() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.StoreKey
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetURI() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.URI
}

type GetFileHistories_FileHistories_Edges struct {
	Node *GetFileHistories_FileHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetFileHistories_FileHistories_Edges) GetNode() *GetFileHistories_FileHistories_Edges_Node {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges{}
	}
	return t.Node
}

type GetFileHistories_FileHistories struct {
	Edges []*GetFileHistories_FileHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetFileHistories_FileHistories) GetEdges() []*GetFileHistories_FileHistories_Edges {
	if t == nil {
		t = &GetFileHistories_FileHistories{}
	}
	return t.Edges
}

type CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Owner struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}

func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Owner) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Owner{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Owner) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Owner{}
	}
	return t.DisplayName
}

type CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting struct {
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting{}
	}
	return &t.JoinPolicy
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting{}
	}
	return t.SyncToGithub
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting{}
	}
	return t.SyncToSlack
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting{}
	}
	return t.Tags
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting{}
	}
	return &t.Visibility
}

type CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User) GetFirstName() *string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User{}
	}
	return t.FirstName
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User) GetLastName() *string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User{}
	}
	return t.LastName
}

type CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members struct {
	ID   string                                                    "json:\"id\" graphql:\"id\""
	Role enums.Role                                                "json:\"role\" graphql:\"role\""
	User CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User "json:\"user\" graphql:\"user\""
}

func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members{}
	}
	return &t.Role
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members) GetUser() *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members{}
	}
	return &t.User
}

type CreateBulkCSVGroup_CreateBulkCSVGroup_Groups struct {
	Description *string                                                 "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string                                                  "json:\"displayName\" graphql:\"displayName\""
	ID          string                                                  "json:\"id\" graphql:\"id\""
	LogoURL     *string                                                 "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name        string                                                  "json:\"name\" graphql:\"name\""
	Tags        []string                                                "json:\"tags,omitempty\" graphql:\"tags\""
	Owner       *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Owner     "json:\"owner,omitempty\" graphql:\"owner\""
	Setting     CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting    "json:\"setting\" graphql:\"setting\""
	Members     []*CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members "json:\"members,omitempty\" graphql:\"members\""
}

func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.Description
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.DisplayName
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetLogoURL() *string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.LogoURL
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetName() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.Name
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.Tags
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetOwner() *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Owner {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.Owner
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetSetting() *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return &t.Setting
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetMembers() []*CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.Members
}

type CreateBulkCSVGroup_CreateBulkCSVGroup struct {
	Groups []*CreateBulkCSVGroup_CreateBulkCSVGroup_Groups "json:\"groups,omitempty\" graphql:\"groups\""
}

func (t *CreateBulkCSVGroup_CreateBulkCSVGroup) GetGroups() []*CreateBulkCSVGroup_CreateBulkCSVGroup_Groups {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup{}
	}
	return t.Groups
}

type CreateBulkGroup_CreateBulkGroup_Groups_Owner struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}

func (t *CreateBulkGroup_CreateBulkGroup_Groups_Owner) GetID() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Owner{}
	}
	return t.ID
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Owner) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Owner{}
	}
	return t.DisplayName
}

type CreateBulkGroup_CreateBulkGroup_Groups_Setting struct {
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *CreateBulkGroup_CreateBulkGroup_Groups_Setting) GetID() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Setting{}
	}
	return t.ID
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Setting{}
	}
	return &t.JoinPolicy
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Setting{}
	}
	return t.SyncToGithub
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Setting{}
	}
	return t.SyncToSlack
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Setting) GetTags() []string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Setting{}
	}
	return t.Tags
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Setting{}
	}
	return &t.Visibility
}

type CreateBulkGroup_CreateBulkGroup_Groups_Members_User struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateBulkGroup_CreateBulkGroup_Groups_Members_User) GetID() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Members_User{}
	}
	return t.ID
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Members_User) GetFirstName() *string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Members_User{}
	}
	return t.FirstName
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Members_User) GetLastName() *string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Members_User{}
	}
	return t.LastName
}

type CreateBulkGroup_CreateBulkGroup_Groups_Members struct {
	ID   string                                              "json:\"id\" graphql:\"id\""
	Role enums.Role                                          "json:\"role\" graphql:\"role\""
	User CreateBulkGroup_CreateBulkGroup_Groups_Members_User "json:\"user\" graphql:\"user\""
}

func (t *CreateBulkGroup_CreateBulkGroup_Groups_Members) GetID() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Members{}
	}
	return t.ID
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Members) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Members{}
	}
	return &t.Role
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Members) GetUser() *CreateBulkGroup_CreateBulkGroup_Groups_Members_User {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Members{}
	}
	return &t.User
}

type CreateBulkGroup_CreateBulkGroup_Groups struct {
	Description *string                                           "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string                                            "json:\"displayName\" graphql:\"displayName\""
	ID          string                                            "json:\"id\" graphql:\"id\""
	LogoURL     *string                                           "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name        string                                            "json:\"name\" graphql:\"name\""
	Tags        []string                                          "json:\"tags,omitempty\" graphql:\"tags\""
	Owner       *CreateBulkGroup_CreateBulkGroup_Groups_Owner     "json:\"owner,omitempty\" graphql:\"owner\""
	Setting     CreateBulkGroup_CreateBulkGroup_Groups_Setting    "json:\"setting\" graphql:\"setting\""
	Members     []*CreateBulkGroup_CreateBulkGroup_Groups_Members "json:\"members,omitempty\" graphql:\"members\""
}

func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetDescription() *string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.Description
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.DisplayName
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetID() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.ID
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetLogoURL() *string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.LogoURL
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetName() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.Name
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetTags() []string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.Tags
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetOwner() *CreateBulkGroup_CreateBulkGroup_Groups_Owner {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.Owner
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetSetting() *CreateBulkGroup_CreateBulkGroup_Groups_Setting {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return &t.Setting
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetMembers() []*CreateBulkGroup_CreateBulkGroup_Groups_Members {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.Members
}

type CreateBulkGroup_CreateBulkGroup struct {
	Groups []*CreateBulkGroup_CreateBulkGroup_Groups "json:\"groups,omitempty\" graphql:\"groups\""
}

func (t *CreateBulkGroup_CreateBulkGroup) GetGroups() []*CreateBulkGroup_CreateBulkGroup_Groups {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup{}
	}
	return t.Groups
}

type CreateGroup_CreateGroup_Group_Owner struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}

func (t *CreateGroup_CreateGroup_Group_Owner) GetID() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Owner{}
	}
	return t.ID
}
func (t *CreateGroup_CreateGroup_Group_Owner) GetDisplayName() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Owner{}
	}
	return t.DisplayName
}

type CreateGroup_CreateGroup_Group_Setting struct {
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *CreateGroup_CreateGroup_Group_Setting) GetID() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return t.ID
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return &t.JoinPolicy
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return t.SyncToGithub
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return t.SyncToSlack
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetTags() []string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return t.Tags
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return &t.Visibility
}

type CreateGroup_CreateGroup_Group_Members_User struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateGroup_CreateGroup_Group_Members_User) GetID() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Members_User{}
	}
	return t.ID
}
func (t *CreateGroup_CreateGroup_Group_Members_User) GetFirstName() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Members_User{}
	}
	return t.FirstName
}
func (t *CreateGroup_CreateGroup_Group_Members_User) GetLastName() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Members_User{}
	}
	return t.LastName
}

type CreateGroup_CreateGroup_Group_Members struct {
	ID   string                                     "json:\"id\" graphql:\"id\""
	Role enums.Role                                 "json:\"role\" graphql:\"role\""
	User CreateGroup_CreateGroup_Group_Members_User "json:\"user\" graphql:\"user\""
}

func (t *CreateGroup_CreateGroup_Group_Members) GetID() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Members{}
	}
	return t.ID
}
func (t *CreateGroup_CreateGroup_Group_Members) GetRole() *enums.Role {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Members{}
	}
	return &t.Role
}
func (t *CreateGroup_CreateGroup_Group_Members) GetUser() *CreateGroup_CreateGroup_Group_Members_User {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Members{}
	}
	return &t.User
}

type CreateGroup_CreateGroup_Group struct {
	Description *string                                  "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string                                   "json:\"displayName\" graphql:\"displayName\""
	ID          string                                   "json:\"id\" graphql:\"id\""
	LogoURL     *string                                  "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name        string                                   "json:\"name\" graphql:\"name\""
	Tags        []string                                 "json:\"tags,omitempty\" graphql:\"tags\""
	Owner       *CreateGroup_CreateGroup_Group_Owner     "json:\"owner,omitempty\" graphql:\"owner\""
	Setting     CreateGroup_CreateGroup_Group_Setting    "json:\"setting\" graphql:\"setting\""
	Members     []*CreateGroup_CreateGroup_Group_Members "json:\"members,omitempty\" graphql:\"members\""
}

func (t *CreateGroup_CreateGroup_Group) GetDescription() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Description
}
func (t *CreateGroup_CreateGroup_Group) GetDisplayName() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.DisplayName
}
func (t *CreateGroup_CreateGroup_Group) GetID() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.ID
}
func (t *CreateGroup_CreateGroup_Group) GetLogoURL() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.LogoURL
}
func (t *CreateGroup_CreateGroup_Group) GetName() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Name
}
func (t *CreateGroup_CreateGroup_Group) GetTags() []string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Tags
}
func (t *CreateGroup_CreateGroup_Group) GetOwner() *CreateGroup_CreateGroup_Group_Owner {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Owner
}
func (t *CreateGroup_CreateGroup_Group) GetSetting() *CreateGroup_CreateGroup_Group_Setting {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return &t.Setting
}
func (t *CreateGroup_CreateGroup_Group) GetMembers() []*CreateGroup_CreateGroup_Group_Members {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Members
}

type CreateGroup_CreateGroup struct {
	Group CreateGroup_CreateGroup_Group "json:\"group\" graphql:\"group\""
}

func (t *CreateGroup_CreateGroup) GetGroup() *CreateGroup_CreateGroup_Group {
	if t == nil {
		t = &CreateGroup_CreateGroup{}
	}
	return &t.Group
}

type DeleteGroup_DeleteGroup struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteGroup_DeleteGroup) GetDeletedID() string {
	if t == nil {
		t = &DeleteGroup_DeleteGroup{}
	}
	return t.DeletedID
}

type GetAllGroups_Groups_Edges_Node_Owner struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}

func (t *GetAllGroups_Groups_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Owner{}
	}
	return t.ID
}
func (t *GetAllGroups_Groups_Edges_Node_Owner) GetDisplayName() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Owner{}
	}
	return t.DisplayName
}

type GetAllGroups_Groups_Edges_Node_Setting struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetAllGroups_Groups_Edges_Node_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.CreatedAt
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.CreatedBy
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetID() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.ID
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return &t.JoinPolicy
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.SyncToGithub
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.SyncToSlack
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetTags() []string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.Tags
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.UpdatedBy
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return &t.Visibility
}

type GetAllGroups_Groups_Edges_Node_Members_User struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetAllGroups_Groups_Edges_Node_Members_User) GetID() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Members_User{}
	}
	return t.ID
}
func (t *GetAllGroups_Groups_Edges_Node_Members_User) GetFirstName() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Members_User{}
	}
	return t.FirstName
}
func (t *GetAllGroups_Groups_Edges_Node_Members_User) GetLastName() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Members_User{}
	}
	return t.LastName
}

type GetAllGroups_Groups_Edges_Node_Members struct {
	ID   string                                      "json:\"id\" graphql:\"id\""
	Role enums.Role                                  "json:\"role\" graphql:\"role\""
	User GetAllGroups_Groups_Edges_Node_Members_User "json:\"user\" graphql:\"user\""
}

func (t *GetAllGroups_Groups_Edges_Node_Members) GetID() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Members{}
	}
	return t.ID
}
func (t *GetAllGroups_Groups_Edges_Node_Members) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Members{}
	}
	return &t.Role
}
func (t *GetAllGroups_Groups_Edges_Node_Members) GetUser() *GetAllGroups_Groups_Edges_Node_Members_User {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Members{}
	}
	return &t.User
}

type GetAllGroups_Groups_Edges_Node struct {
	Description *string                                   "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string                                    "json:\"displayName\" graphql:\"displayName\""
	ID          string                                    "json:\"id\" graphql:\"id\""
	LogoURL     *string                                   "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name        string                                    "json:\"name\" graphql:\"name\""
	Tags        []string                                  "json:\"tags,omitempty\" graphql:\"tags\""
	Owner       *GetAllGroups_Groups_Edges_Node_Owner     "json:\"owner,omitempty\" graphql:\"owner\""
	Setting     GetAllGroups_Groups_Edges_Node_Setting    "json:\"setting\" graphql:\"setting\""
	Members     []*GetAllGroups_Groups_Edges_Node_Members "json:\"members,omitempty\" graphql:\"members\""
	CreatedAt   *time.Time                                "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt   *time.Time                                "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllGroups_Groups_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllGroups_Groups_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllGroups_Groups_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllGroups_Groups_Edges_Node) GetLogoURL() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.LogoURL
}
func (t *GetAllGroups_Groups_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllGroups_Groups_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllGroups_Groups_Edges_Node) GetOwner() *GetAllGroups_Groups_Edges_Node_Owner {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Owner
}
func (t *GetAllGroups_Groups_Edges_Node) GetSetting() *GetAllGroups_Groups_Edges_Node_Setting {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return &t.Setting
}
func (t *GetAllGroups_Groups_Edges_Node) GetMembers() []*GetAllGroups_Groups_Edges_Node_Members {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Members
}
func (t *GetAllGroups_Groups_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllGroups_Groups_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllGroups_Groups_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllGroups_Groups_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllGroups_Groups_Edges struct {
	Node *GetAllGroups_Groups_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllGroups_Groups_Edges) GetNode() *GetAllGroups_Groups_Edges_Node {
	if t == nil {
		t = &GetAllGroups_Groups_Edges{}
	}
	return t.Node
}

type GetAllGroups_Groups struct {
	Edges []*GetAllGroups_Groups_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllGroups_Groups) GetEdges() []*GetAllGroups_Groups_Edges {
	if t == nil {
		t = &GetAllGroups_Groups{}
	}
	return t.Edges
}

type GetGroupByID_Group_Owner struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}

func (t *GetGroupByID_Group_Owner) GetID() string {
	if t == nil {
		t = &GetGroupByID_Group_Owner{}
	}
	return t.ID
}
func (t *GetGroupByID_Group_Owner) GetDisplayName() string {
	if t == nil {
		t = &GetGroupByID_Group_Owner{}
	}
	return t.DisplayName
}

type GetGroupByID_Group_Setting struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetGroupByID_Group_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.CreatedAt
}
func (t *GetGroupByID_Group_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.CreatedBy
}
func (t *GetGroupByID_Group_Setting) GetID() string {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.ID
}
func (t *GetGroupByID_Group_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return &t.JoinPolicy
}
func (t *GetGroupByID_Group_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.SyncToGithub
}
func (t *GetGroupByID_Group_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.SyncToSlack
}
func (t *GetGroupByID_Group_Setting) GetTags() []string {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.Tags
}
func (t *GetGroupByID_Group_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetGroupByID_Group_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.UpdatedBy
}
func (t *GetGroupByID_Group_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return &t.Visibility
}

type GetGroupByID_Group_Members_User struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetGroupByID_Group_Members_User) GetID() string {
	if t == nil {
		t = &GetGroupByID_Group_Members_User{}
	}
	return t.ID
}
func (t *GetGroupByID_Group_Members_User) GetFirstName() *string {
	if t == nil {
		t = &GetGroupByID_Group_Members_User{}
	}
	return t.FirstName
}
func (t *GetGroupByID_Group_Members_User) GetLastName() *string {
	if t == nil {
		t = &GetGroupByID_Group_Members_User{}
	}
	return t.LastName
}

type GetGroupByID_Group_Members struct {
	ID   string                          "json:\"id\" graphql:\"id\""
	Role enums.Role                      "json:\"role\" graphql:\"role\""
	User GetGroupByID_Group_Members_User "json:\"user\" graphql:\"user\""
}

func (t *GetGroupByID_Group_Members) GetID() string {
	if t == nil {
		t = &GetGroupByID_Group_Members{}
	}
	return t.ID
}
func (t *GetGroupByID_Group_Members) GetRole() *enums.Role {
	if t == nil {
		t = &GetGroupByID_Group_Members{}
	}
	return &t.Role
}
func (t *GetGroupByID_Group_Members) GetUser() *GetGroupByID_Group_Members_User {
	if t == nil {
		t = &GetGroupByID_Group_Members{}
	}
	return &t.User
}

type GetGroupByID_Group struct {
	Description *string                       "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string                        "json:\"displayName\" graphql:\"displayName\""
	ID          string                        "json:\"id\" graphql:\"id\""
	LogoURL     *string                       "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name        string                        "json:\"name\" graphql:\"name\""
	Tags        []string                      "json:\"tags,omitempty\" graphql:\"tags\""
	Owner       *GetGroupByID_Group_Owner     "json:\"owner,omitempty\" graphql:\"owner\""
	Setting     GetGroupByID_Group_Setting    "json:\"setting\" graphql:\"setting\""
	Members     []*GetGroupByID_Group_Members "json:\"members,omitempty\" graphql:\"members\""
	CreatedAt   *time.Time                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt   *time.Time                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetGroupByID_Group) GetDescription() *string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Description
}
func (t *GetGroupByID_Group) GetDisplayName() string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.DisplayName
}
func (t *GetGroupByID_Group) GetID() string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.ID
}
func (t *GetGroupByID_Group) GetLogoURL() *string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.LogoURL
}
func (t *GetGroupByID_Group) GetName() string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Name
}
func (t *GetGroupByID_Group) GetTags() []string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Tags
}
func (t *GetGroupByID_Group) GetOwner() *GetGroupByID_Group_Owner {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Owner
}
func (t *GetGroupByID_Group) GetSetting() *GetGroupByID_Group_Setting {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return &t.Setting
}
func (t *GetGroupByID_Group) GetMembers() []*GetGroupByID_Group_Members {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Members
}
func (t *GetGroupByID_Group) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.CreatedAt
}
func (t *GetGroupByID_Group) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.CreatedBy
}
func (t *GetGroupByID_Group) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.UpdatedAt
}
func (t *GetGroupByID_Group) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.UpdatedBy
}

type GetGroups_Groups_Edges_Node_Owner struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}

func (t *GetGroups_Groups_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Owner{}
	}
	return t.ID
}
func (t *GetGroups_Groups_Edges_Node_Owner) GetDisplayName() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Owner{}
	}
	return t.DisplayName
}

type GetGroups_Groups_Edges_Node_Setting struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetGroups_Groups_Edges_Node_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.CreatedAt
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.CreatedBy
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetID() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.ID
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return &t.JoinPolicy
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.SyncToGithub
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.SyncToSlack
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetTags() []string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.Tags
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.UpdatedBy
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return &t.Visibility
}

type GetGroups_Groups_Edges_Node_Members_User struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetGroups_Groups_Edges_Node_Members_User) GetID() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Members_User{}
	}
	return t.ID
}
func (t *GetGroups_Groups_Edges_Node_Members_User) GetFirstName() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Members_User{}
	}
	return t.FirstName
}
func (t *GetGroups_Groups_Edges_Node_Members_User) GetLastName() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Members_User{}
	}
	return t.LastName
}

type GetGroups_Groups_Edges_Node_Members struct {
	ID   string                                   "json:\"id\" graphql:\"id\""
	Role enums.Role                               "json:\"role\" graphql:\"role\""
	User GetGroups_Groups_Edges_Node_Members_User "json:\"user\" graphql:\"user\""
}

func (t *GetGroups_Groups_Edges_Node_Members) GetID() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Members{}
	}
	return t.ID
}
func (t *GetGroups_Groups_Edges_Node_Members) GetRole() *enums.Role {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Members{}
	}
	return &t.Role
}
func (t *GetGroups_Groups_Edges_Node_Members) GetUser() *GetGroups_Groups_Edges_Node_Members_User {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Members{}
	}
	return &t.User
}

type GetGroups_Groups_Edges_Node struct {
	Description *string                                "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string                                 "json:\"displayName\" graphql:\"displayName\""
	ID          string                                 "json:\"id\" graphql:\"id\""
	LogoURL     *string                                "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name        string                                 "json:\"name\" graphql:\"name\""
	Tags        []string                               "json:\"tags,omitempty\" graphql:\"tags\""
	Owner       *GetGroups_Groups_Edges_Node_Owner     "json:\"owner,omitempty\" graphql:\"owner\""
	Setting     GetGroups_Groups_Edges_Node_Setting    "json:\"setting\" graphql:\"setting\""
	Members     []*GetGroups_Groups_Edges_Node_Members "json:\"members,omitempty\" graphql:\"members\""
	CreatedAt   *time.Time                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt   *time.Time                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetGroups_Groups_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.Description
}
func (t *GetGroups_Groups_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetGroups_Groups_Edges_Node) GetID() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.ID
}
func (t *GetGroups_Groups_Edges_Node) GetLogoURL() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.LogoURL
}
func (t *GetGroups_Groups_Edges_Node) GetName() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.Name
}
func (t *GetGroups_Groups_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.Tags
}
func (t *GetGroups_Groups_Edges_Node) GetOwner() *GetGroups_Groups_Edges_Node_Owner {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.Owner
}
func (t *GetGroups_Groups_Edges_Node) GetSetting() *GetGroups_Groups_Edges_Node_Setting {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return &t.Setting
}
func (t *GetGroups_Groups_Edges_Node) GetMembers() []*GetGroups_Groups_Edges_Node_Members {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.Members
}
func (t *GetGroups_Groups_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetGroups_Groups_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetGroups_Groups_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetGroups_Groups_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetGroups_Groups_Edges struct {
	Node *GetGroups_Groups_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetGroups_Groups_Edges) GetNode() *GetGroups_Groups_Edges_Node {
	if t == nil {
		t = &GetGroups_Groups_Edges{}
	}
	return t.Node
}

type GetGroups_Groups struct {
	Edges []*GetGroups_Groups_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetGroups_Groups) GetEdges() []*GetGroups_Groups_Edges {
	if t == nil {
		t = &GetGroups_Groups{}
	}
	return t.Edges
}

type UpdateGroup_UpdateGroup_Group_Owner struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}

func (t *UpdateGroup_UpdateGroup_Group_Owner) GetID() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Owner{}
	}
	return t.ID
}
func (t *UpdateGroup_UpdateGroup_Group_Owner) GetDisplayName() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Owner{}
	}
	return t.DisplayName
}

type UpdateGroup_UpdateGroup_Group_Setting struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *UpdateGroup_UpdateGroup_Group_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.CreatedAt
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.CreatedBy
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetID() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.ID
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return &t.JoinPolicy
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.SyncToGithub
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.SyncToSlack
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetTags() []string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.Tags
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.UpdatedAt
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.UpdatedBy
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return &t.Visibility
}

type UpdateGroup_UpdateGroup_Group_Members_User struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *UpdateGroup_UpdateGroup_Group_Members_User) GetID() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Members_User{}
	}
	return t.ID
}
func (t *UpdateGroup_UpdateGroup_Group_Members_User) GetFirstName() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Members_User{}
	}
	return t.FirstName
}
func (t *UpdateGroup_UpdateGroup_Group_Members_User) GetLastName() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Members_User{}
	}
	return t.LastName
}

type UpdateGroup_UpdateGroup_Group_Members struct {
	ID   string                                     "json:\"id\" graphql:\"id\""
	Role enums.Role                                 "json:\"role\" graphql:\"role\""
	User UpdateGroup_UpdateGroup_Group_Members_User "json:\"user\" graphql:\"user\""
}

func (t *UpdateGroup_UpdateGroup_Group_Members) GetID() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Members{}
	}
	return t.ID
}
func (t *UpdateGroup_UpdateGroup_Group_Members) GetRole() *enums.Role {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Members{}
	}
	return &t.Role
}
func (t *UpdateGroup_UpdateGroup_Group_Members) GetUser() *UpdateGroup_UpdateGroup_Group_Members_User {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Members{}
	}
	return &t.User
}

type UpdateGroup_UpdateGroup_Group struct {
	Description *string                                  "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string                                   "json:\"displayName\" graphql:\"displayName\""
	ID          string                                   "json:\"id\" graphql:\"id\""
	LogoURL     *string                                  "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name        string                                   "json:\"name\" graphql:\"name\""
	Tags        []string                                 "json:\"tags,omitempty\" graphql:\"tags\""
	Owner       *UpdateGroup_UpdateGroup_Group_Owner     "json:\"owner,omitempty\" graphql:\"owner\""
	Setting     UpdateGroup_UpdateGroup_Group_Setting    "json:\"setting\" graphql:\"setting\""
	Members     []*UpdateGroup_UpdateGroup_Group_Members "json:\"members,omitempty\" graphql:\"members\""
}

func (t *UpdateGroup_UpdateGroup_Group) GetDescription() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Description
}
func (t *UpdateGroup_UpdateGroup_Group) GetDisplayName() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.DisplayName
}
func (t *UpdateGroup_UpdateGroup_Group) GetID() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.ID
}
func (t *UpdateGroup_UpdateGroup_Group) GetLogoURL() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.LogoURL
}
func (t *UpdateGroup_UpdateGroup_Group) GetName() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Name
}
func (t *UpdateGroup_UpdateGroup_Group) GetTags() []string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Tags
}
func (t *UpdateGroup_UpdateGroup_Group) GetOwner() *UpdateGroup_UpdateGroup_Group_Owner {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Owner
}
func (t *UpdateGroup_UpdateGroup_Group) GetSetting() *UpdateGroup_UpdateGroup_Group_Setting {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return &t.Setting
}
func (t *UpdateGroup_UpdateGroup_Group) GetMembers() []*UpdateGroup_UpdateGroup_Group_Members {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Members
}

type UpdateGroup_UpdateGroup struct {
	Group UpdateGroup_UpdateGroup_Group "json:\"group\" graphql:\"group\""
}

func (t *UpdateGroup_UpdateGroup) GetGroup() *UpdateGroup_UpdateGroup_Group {
	if t == nil {
		t = &UpdateGroup_UpdateGroup{}
	}
	return &t.Group
}

type GetAllGroupHistories_GroupHistories_Edges_Node struct {
	CreatedAt       *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string        "json:\"description,omitempty\" graphql:\"description\""
	DisplayName     string         "json:\"displayName\" graphql:\"displayName\""
	GravatarLogoURL *string        "json:\"gravatarLogoURL,omitempty\" graphql:\"gravatarLogoURL\""
	HistoryTime     time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID              string         "json:\"id\" graphql:\"id\""
	LogoURL         *string        "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name            string         "json:\"name\" graphql:\"name\""
	Operation       history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID         *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref             *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags            []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetGravatarLogoURL() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.GravatarLogoURL
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetLogoURL() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.LogoURL
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllGroupHistories_GroupHistories_Edges struct {
	Node *GetAllGroupHistories_GroupHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllGroupHistories_GroupHistories_Edges) GetNode() *GetAllGroupHistories_GroupHistories_Edges_Node {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges{}
	}
	return t.Node
}

type GetAllGroupHistories_GroupHistories struct {
	Edges []*GetAllGroupHistories_GroupHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllGroupHistories_GroupHistories) GetEdges() []*GetAllGroupHistories_GroupHistories_Edges {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories{}
	}
	return t.Edges
}

type GetGroupHistories_GroupHistories_Edges_Node struct {
	CreatedAt       *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string        "json:\"description,omitempty\" graphql:\"description\""
	DisplayName     string         "json:\"displayName\" graphql:\"displayName\""
	GravatarLogoURL *string        "json:\"gravatarLogoURL,omitempty\" graphql:\"gravatarLogoURL\""
	HistoryTime     time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID              string         "json:\"id\" graphql:\"id\""
	LogoURL         *string        "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name            string         "json:\"name\" graphql:\"name\""
	Operation       history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID         *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref             *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags            []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetGroupHistories_GroupHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetGravatarLogoURL() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.GravatarLogoURL
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetLogoURL() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.LogoURL
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetGroupHistories_GroupHistories_Edges struct {
	Node *GetGroupHistories_GroupHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetGroupHistories_GroupHistories_Edges) GetNode() *GetGroupHistories_GroupHistories_Edges_Node {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges{}
	}
	return t.Node
}

type GetGroupHistories_GroupHistories struct {
	Edges []*GetGroupHistories_GroupHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetGroupHistories_GroupHistories) GetEdges() []*GetGroupHistories_GroupHistories_Edges {
	if t == nil {
		t = &GetGroupHistories_GroupHistories{}
	}
	return t.Edges
}

type AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_Group) GetID() string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_Group{}
	}
	return t.ID
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_Group) GetName() string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_Group{}
	}
	return t.Name
}

type AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User) GetDisplayName() string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User{}
	}
	return t.DisplayName
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User) GetEmail() string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User{}
	}
	return t.Email
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User) GetFirstName() *string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User{}
	}
	return t.FirstName
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User) GetID() string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User{}
	}
	return t.ID
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User) GetLastName() *string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User{}
	}
	return t.LastName
}

type AddUserToGroupWithRole_CreateGroupMembership_GroupMembership struct {
	GroupID string                                                             "json:\"groupID\" graphql:\"groupID\""
	Group   AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_Group "json:\"group\" graphql:\"group\""
	ID      string                                                             "json:\"id\" graphql:\"id\""
	Role    enums.Role                                                         "json:\"role\" graphql:\"role\""
	UserID  string                                                             "json:\"userID\" graphql:\"userID\""
	User    AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User  "json:\"user\" graphql:\"user\""
}

func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership) GetGroupID() string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership{}
	}
	return t.GroupID
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership) GetGroup() *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_Group {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership{}
	}
	return &t.Group
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership) GetID() string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership{}
	}
	return t.ID
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership) GetRole() *enums.Role {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership{}
	}
	return &t.Role
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership) GetUserID() string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership{}
	}
	return t.UserID
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership) GetUser() *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership_User {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership{}
	}
	return &t.User
}

type AddUserToGroupWithRole_CreateGroupMembership struct {
	GroupMembership AddUserToGroupWithRole_CreateGroupMembership_GroupMembership "json:\"groupMembership\" graphql:\"groupMembership\""
}

func (t *AddUserToGroupWithRole_CreateGroupMembership) GetGroupMembership() *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership{}
	}
	return &t.GroupMembership
}

type CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_Group) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_Group{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_Group) GetName() string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_Group{}
	}
	return t.Name
}

type CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User{}
	}
	return t.DisplayName
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User) GetEmail() string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User{}
	}
	return t.Email
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User) GetFirstName() *string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User{}
	}
	return t.FirstName
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User) GetLastName() *string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User{}
	}
	return t.LastName
}

type CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships struct {
	GroupID string                                                                        "json:\"groupID\" graphql:\"groupID\""
	Group   CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_Group "json:\"group\" graphql:\"group\""
	ID      string                                                                        "json:\"id\" graphql:\"id\""
	Role    enums.Role                                                                    "json:\"role\" graphql:\"role\""
	UserID  string                                                                        "json:\"userID\" graphql:\"userID\""
	User    CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User  "json:\"user\" graphql:\"user\""
}

func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships) GetGroupID() string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return t.GroupID
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships) GetGroup() *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_Group {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return &t.Group
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships) GetUserID() string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return t.UserID
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships) GetUser() *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships_User {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return &t.User
}

type CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership struct {
	GroupMemberships []*CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships "json:\"groupMemberships,omitempty\" graphql:\"groupMemberships\""
}

func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership) GetGroupMemberships() []*CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership{}
	}
	return t.GroupMemberships
}

type CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_Group) GetID() string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_Group{}
	}
	return t.ID
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_Group) GetName() string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_Group{}
	}
	return t.Name
}

type CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User{}
	}
	return t.DisplayName
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User) GetEmail() string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User{}
	}
	return t.Email
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User) GetFirstName() *string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User{}
	}
	return t.FirstName
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User) GetID() string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User{}
	}
	return t.ID
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User) GetLastName() *string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User{}
	}
	return t.LastName
}

type CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships struct {
	GroupID string                                                                  "json:\"groupID\" graphql:\"groupID\""
	Group   CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_Group "json:\"group\" graphql:\"group\""
	ID      string                                                                  "json:\"id\" graphql:\"id\""
	Role    enums.Role                                                              "json:\"role\" graphql:\"role\""
	UserID  string                                                                  "json:\"userID\" graphql:\"userID\""
	User    CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User  "json:\"user\" graphql:\"user\""
}

func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships) GetGroupID() string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships{}
	}
	return t.GroupID
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships) GetGroup() *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_Group {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships{}
	}
	return &t.Group
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships{}
	}
	return t.ID
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships) GetUserID() string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships{}
	}
	return t.UserID
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships) GetUser() *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships_User {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships{}
	}
	return &t.User
}

type CreateBulkGroupMembers_CreateBulkGroupMembership struct {
	GroupMemberships []*CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships "json:\"groupMemberships,omitempty\" graphql:\"groupMemberships\""
}

func (t *CreateBulkGroupMembers_CreateBulkGroupMembership) GetGroupMemberships() []*CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership{}
	}
	return t.GroupMemberships
}

type GetGroupMembersByGroupID_GroupMemberships_Edges_Node_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_Group) GetID() string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node_Group{}
	}
	return t.ID
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_Group) GetName() string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node_Group{}
	}
	return t.Name
}

type GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User) GetDisplayName() string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User{}
	}
	return t.DisplayName
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User) GetEmail() string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User{}
	}
	return t.Email
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User) GetFirstName() *string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User{}
	}
	return t.FirstName
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User) GetID() string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User{}
	}
	return t.ID
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User) GetLastName() *string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User{}
	}
	return t.LastName
}

type GetGroupMembersByGroupID_GroupMemberships_Edges_Node struct {
	GroupID string                                                     "json:\"groupID\" graphql:\"groupID\""
	Group   GetGroupMembersByGroupID_GroupMemberships_Edges_Node_Group "json:\"group\" graphql:\"group\""
	ID      string                                                     "json:\"id\" graphql:\"id\""
	Role    enums.Role                                                 "json:\"role\" graphql:\"role\""
	UserID  string                                                     "json:\"userID\" graphql:\"userID\""
	User    GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User  "json:\"user\" graphql:\"user\""
}

func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node) GetGroupID() string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node{}
	}
	return t.GroupID
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node) GetGroup() *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_Group {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node{}
	}
	return &t.Group
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node{}
	}
	return t.ID
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node{}
	}
	return &t.Role
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node{}
	}
	return t.UserID
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node) GetUser() *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node{}
	}
	return &t.User
}

type GetGroupMembersByGroupID_GroupMemberships_Edges struct {
	Node *GetGroupMembersByGroupID_GroupMemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetGroupMembersByGroupID_GroupMemberships_Edges) GetNode() *GetGroupMembersByGroupID_GroupMemberships_Edges_Node {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges{}
	}
	return t.Node
}

type GetGroupMembersByGroupID_GroupMemberships struct {
	Edges []*GetGroupMembersByGroupID_GroupMemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetGroupMembersByGroupID_GroupMemberships) GetEdges() []*GetGroupMembersByGroupID_GroupMemberships_Edges {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships{}
	}
	return t.Edges
}

type RemoveUserFromGroup_DeleteGroupMembership struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *RemoveUserFromGroup_DeleteGroupMembership) GetDeletedID() string {
	if t == nil {
		t = &RemoveUserFromGroup_DeleteGroupMembership{}
	}
	return t.DeletedID
}

type UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_Group) GetID() string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_Group{}
	}
	return t.ID
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_Group) GetName() string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_Group{}
	}
	return t.Name
}

type UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User) GetDisplayName() string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User{}
	}
	return t.DisplayName
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User) GetEmail() string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User{}
	}
	return t.Email
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User) GetFirstName() *string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User{}
	}
	return t.FirstName
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User) GetID() string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User{}
	}
	return t.ID
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User) GetLastName() *string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User{}
	}
	return t.LastName
}

type UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership struct {
	GroupID string                                                            "json:\"groupID\" graphql:\"groupID\""
	Group   UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_Group "json:\"group\" graphql:\"group\""
	ID      string                                                            "json:\"id\" graphql:\"id\""
	Role    enums.Role                                                        "json:\"role\" graphql:\"role\""
	UserID  string                                                            "json:\"userID\" graphql:\"userID\""
	User    UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User  "json:\"user\" graphql:\"user\""
}

func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership) GetGroupID() string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership{}
	}
	return t.GroupID
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership) GetGroup() *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_Group {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership{}
	}
	return &t.Group
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership) GetID() string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership{}
	}
	return t.ID
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership) GetRole() *enums.Role {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership{}
	}
	return &t.Role
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership) GetUserID() string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership{}
	}
	return t.UserID
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership) GetUser() *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership_User {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership{}
	}
	return &t.User
}

type UpdateUserRoleInGroup_UpdateGroupMembership struct {
	GroupMembership UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership "json:\"groupMembership\" graphql:\"groupMembership\""
}

func (t *UpdateUserRoleInGroup_UpdateGroupMembership) GetGroupMembership() *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership{}
	}
	return &t.GroupMembership
}

type GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID     string         "json:\"groupID\" graphql:\"groupID\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Role        enums.Role     "json:\"role\" graphql:\"role\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID      string         "json:\"userID\" graphql:\"userID\""
}

func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetGroupID() string {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.GroupID
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return &t.Role
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.UserID
}

type GetAllGroupMembershipHistories_GroupMembershipHistories_Edges struct {
	Node *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges) GetNode() *GetAllGroupMembershipHistories_GroupMembershipHistories_Edges_Node {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories_Edges{}
	}
	return t.Node
}

type GetAllGroupMembershipHistories_GroupMembershipHistories struct {
	Edges []*GetAllGroupMembershipHistories_GroupMembershipHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllGroupMembershipHistories_GroupMembershipHistories) GetEdges() []*GetAllGroupMembershipHistories_GroupMembershipHistories_Edges {
	if t == nil {
		t = &GetAllGroupMembershipHistories_GroupMembershipHistories{}
	}
	return t.Edges
}

type GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID     string         "json:\"groupID\" graphql:\"groupID\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Role        enums.Role     "json:\"role\" graphql:\"role\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID      string         "json:\"userID\" graphql:\"userID\""
}

func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetGroupID() string {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.GroupID
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return &t.Role
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node{}
	}
	return t.UserID
}

type GetGroupMembershipHistories_GroupMembershipHistories_Edges struct {
	Node *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetGroupMembershipHistories_GroupMembershipHistories_Edges) GetNode() *GetGroupMembershipHistories_GroupMembershipHistories_Edges_Node {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories_Edges{}
	}
	return t.Node
}

type GetGroupMembershipHistories_GroupMembershipHistories struct {
	Edges []*GetGroupMembershipHistories_GroupMembershipHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetGroupMembershipHistories_GroupMembershipHistories) GetEdges() []*GetGroupMembershipHistories_GroupMembershipHistories_Edges {
	if t == nil {
		t = &GetGroupMembershipHistories_GroupMembershipHistories{}
	}
	return t.Edges
}

type GetAllGroupSettings_GroupSettings_Edges_Node_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllGroupSettings_GroupSettings_Edges_Node_Group) GetID() string {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node_Group{}
	}
	return t.ID
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node_Group) GetName() string {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node_Group{}
	}
	return t.Name
}

type GetAllGroupSettings_GroupSettings_Edges_Node struct {
	ID           string                                              "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy                                    "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool                                               "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool                                               "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string                                            "json:\"tags,omitempty\" graphql:\"tags\""
	Visibility   enums.Visibility                                    "json:\"visibility\" graphql:\"visibility\""
	Group        *GetAllGroupSettings_GroupSettings_Edges_Node_Group "json:\"group,omitempty\" graphql:\"group\""
	CreatedAt    *time.Time                                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt    *time.Time                                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return &t.JoinPolicy
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.SyncToGithub
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.SyncToSlack
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return &t.Visibility
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetGroup() *GetAllGroupSettings_GroupSettings_Edges_Node_Group {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.Group
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllGroupSettings_GroupSettings_Edges struct {
	Node *GetAllGroupSettings_GroupSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllGroupSettings_GroupSettings_Edges) GetNode() *GetAllGroupSettings_GroupSettings_Edges_Node {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges{}
	}
	return t.Node
}

type GetAllGroupSettings_GroupSettings struct {
	Edges []*GetAllGroupSettings_GroupSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllGroupSettings_GroupSettings) GetEdges() []*GetAllGroupSettings_GroupSettings_Edges {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings{}
	}
	return t.Edges
}

type GetGroupSettingByID_GroupSetting_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetGroupSettingByID_GroupSetting_Group) GetID() string {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting_Group{}
	}
	return t.ID
}
func (t *GetGroupSettingByID_GroupSetting_Group) GetName() string {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting_Group{}
	}
	return t.Name
}

type GetGroupSettingByID_GroupSetting struct {
	ID           string                                  "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy                        "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool                                   "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool                                   "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string                                "json:\"tags,omitempty\" graphql:\"tags\""
	Visibility   enums.Visibility                        "json:\"visibility\" graphql:\"visibility\""
	Group        *GetGroupSettingByID_GroupSetting_Group "json:\"group,omitempty\" graphql:\"group\""
	CreatedAt    *time.Time                              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt    *time.Time                              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetGroupSettingByID_GroupSetting) GetID() string {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.ID
}
func (t *GetGroupSettingByID_GroupSetting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return &t.JoinPolicy
}
func (t *GetGroupSettingByID_GroupSetting) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.SyncToGithub
}
func (t *GetGroupSettingByID_GroupSetting) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.SyncToSlack
}
func (t *GetGroupSettingByID_GroupSetting) GetTags() []string {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.Tags
}
func (t *GetGroupSettingByID_GroupSetting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return &t.Visibility
}
func (t *GetGroupSettingByID_GroupSetting) GetGroup() *GetGroupSettingByID_GroupSetting_Group {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.Group
}
func (t *GetGroupSettingByID_GroupSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.CreatedAt
}
func (t *GetGroupSettingByID_GroupSetting) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.CreatedBy
}
func (t *GetGroupSettingByID_GroupSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.UpdatedAt
}
func (t *GetGroupSettingByID_GroupSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.UpdatedBy
}

type GetGroupSettings_GroupSettings_Edges_Node_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetGroupSettings_GroupSettings_Edges_Node_Group) GetID() string {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node_Group{}
	}
	return t.ID
}
func (t *GetGroupSettings_GroupSettings_Edges_Node_Group) GetName() string {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node_Group{}
	}
	return t.Name
}

type GetGroupSettings_GroupSettings_Edges_Node struct {
	ID           string                                           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy                                 "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool                                            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool                                            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string                                         "json:\"tags,omitempty\" graphql:\"tags\""
	Visibility   enums.Visibility                                 "json:\"visibility\" graphql:\"visibility\""
	Group        *GetGroupSettings_GroupSettings_Edges_Node_Group "json:\"group,omitempty\" graphql:\"group\""
	CreatedAt    *time.Time                                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt    *time.Time                                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetGroupSettings_GroupSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return &t.JoinPolicy
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.SyncToGithub
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.SyncToSlack
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.Tags
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return &t.Visibility
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetGroup() *GetGroupSettings_GroupSettings_Edges_Node_Group {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.Group
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetGroupSettings_GroupSettings_Edges struct {
	Node *GetGroupSettings_GroupSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetGroupSettings_GroupSettings_Edges) GetNode() *GetGroupSettings_GroupSettings_Edges_Node {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges{}
	}
	return t.Node
}

type GetGroupSettings_GroupSettings struct {
	Edges []*GetGroupSettings_GroupSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetGroupSettings_GroupSettings) GetEdges() []*GetGroupSettings_GroupSettings_Edges {
	if t == nil {
		t = &GetGroupSettings_GroupSettings{}
	}
	return t.Edges
}

type UpdateGroupSetting_UpdateGroupSetting_GroupSetting_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting_Group) GetID() string {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting_Group{}
	}
	return t.ID
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting_Group) GetName() string {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting_Group{}
	}
	return t.Name
}

type UpdateGroupSetting_UpdateGroupSetting_GroupSetting struct {
	ID           string                                                    "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy                                          "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool                                                     "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool                                                     "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string                                                  "json:\"tags,omitempty\" graphql:\"tags\""
	Visibility   enums.Visibility                                          "json:\"visibility\" graphql:\"visibility\""
	Group        *UpdateGroupSetting_UpdateGroupSetting_GroupSetting_Group "json:\"group,omitempty\" graphql:\"group\""
	CreatedAt    *time.Time                                                "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                                   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt    *time.Time                                                "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                                   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetID() string {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.ID
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return &t.JoinPolicy
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetSyncToGithub() *bool {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.SyncToGithub
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetSyncToSlack() *bool {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.SyncToSlack
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetTags() []string {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.Tags
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return &t.Visibility
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetGroup() *UpdateGroupSetting_UpdateGroupSetting_GroupSetting_Group {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.Group
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.CreatedAt
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.CreatedBy
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.UpdatedAt
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.UpdatedBy
}

type UpdateGroupSetting_UpdateGroupSetting struct {
	GroupSetting UpdateGroupSetting_UpdateGroupSetting_GroupSetting "json:\"groupSetting\" graphql:\"groupSetting\""
}

func (t *UpdateGroupSetting_UpdateGroupSetting) GetGroupSetting() *UpdateGroupSetting_UpdateGroupSetting_GroupSetting {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting{}
	}
	return &t.GroupSetting
}

type GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID      *string          "json:\"groupID,omitempty\" graphql:\"groupID\""
	HistoryTime  time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	Operation    history.OpType   "json:\"operation\" graphql:\"operation\""
	Ref          *string          "json:\"ref,omitempty\" graphql:\"ref\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetGroupID() *string {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.GroupID
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.JoinPolicy
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.SyncToGithub
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.SyncToSlack
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.Visibility
}

type GetAllGroupSettingHistories_GroupSettingHistories_Edges struct {
	Node *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllGroupSettingHistories_GroupSettingHistories_Edges) GetNode() *GetAllGroupSettingHistories_GroupSettingHistories_Edges_Node {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories_Edges{}
	}
	return t.Node
}

type GetAllGroupSettingHistories_GroupSettingHistories struct {
	Edges []*GetAllGroupSettingHistories_GroupSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllGroupSettingHistories_GroupSettingHistories) GetEdges() []*GetAllGroupSettingHistories_GroupSettingHistories_Edges {
	if t == nil {
		t = &GetAllGroupSettingHistories_GroupSettingHistories{}
	}
	return t.Edges
}

type GetGroupSettingHistories_GroupSettingHistories_Edges_Node struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	GroupID      *string          "json:\"groupID,omitempty\" graphql:\"groupID\""
	HistoryTime  time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	Operation    history.OpType   "json:\"operation\" graphql:\"operation\""
	Ref          *string          "json:\"ref,omitempty\" graphql:\"ref\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetGroupID() *string {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.GroupID
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.JoinPolicy
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.SyncToGithub
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.SyncToSlack
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetGroupSettingHistories_GroupSettingHistories_Edges_Node) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges_Node{}
	}
	return &t.Visibility
}

type GetGroupSettingHistories_GroupSettingHistories_Edges struct {
	Node *GetGroupSettingHistories_GroupSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetGroupSettingHistories_GroupSettingHistories_Edges) GetNode() *GetGroupSettingHistories_GroupSettingHistories_Edges_Node {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories_Edges{}
	}
	return t.Node
}

type GetGroupSettingHistories_GroupSettingHistories struct {
	Edges []*GetGroupSettingHistories_GroupSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetGroupSettingHistories_GroupSettingHistories) GetEdges() []*GetGroupSettingHistories_GroupSettingHistories_Edges {
	if t == nil {
		t = &GetGroupSettingHistories_GroupSettingHistories{}
	}
	return t.Edges
}

type CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations) GetID() string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations{}
	}
	return t.ID
}

type CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Organization) GetID() string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Organization{}
	}
	return t.ID
}

type CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events) GetID() string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events{}
	}
	return t.ID
}

type CreateBulkCSVHush_CreateBulkCSVHush_Hushes struct {
	Description  *string                                                    "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                                     "json:\"id\" graphql:\"id\""
	Kind         *string                                                    "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                                     "json:\"name\" graphql:\"name\""
	SecretName   *string                                                    "json:\"secretName,omitempty\" graphql:\"secretName\""
	Integrations []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations "json:\"integrations,omitempty\" graphql:\"integrations\""
	Organization []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Events       []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events       "json:\"events,omitempty\" graphql:\"events\""
}

func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.Description
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetID() string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.ID
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetKind() *string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.Kind
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetName() string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.Name
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetSecretName() *string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.SecretName
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetIntegrations() []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.Integrations
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetOrganization() []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Organization {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.Organization
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetEvents() []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.Events
}

type CreateBulkCSVHush_CreateBulkCSVHush struct {
	Hushes []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes "json:\"hushes,omitempty\" graphql:\"hushes\""
}

func (t *CreateBulkCSVHush_CreateBulkCSVHush) GetHushes() []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush{}
	}
	return t.Hushes
}

type CreateBulkHush_CreateBulkHush_Hushes_Integrations struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkHush_CreateBulkHush_Hushes_Integrations) GetID() string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes_Integrations{}
	}
	return t.ID
}

type CreateBulkHush_CreateBulkHush_Hushes_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkHush_CreateBulkHush_Hushes_Organization) GetID() string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes_Organization{}
	}
	return t.ID
}

type CreateBulkHush_CreateBulkHush_Hushes_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkHush_CreateBulkHush_Hushes_Events) GetID() string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes_Events{}
	}
	return t.ID
}

type CreateBulkHush_CreateBulkHush_Hushes struct {
	Description  *string                                              "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                               "json:\"id\" graphql:\"id\""
	Kind         *string                                              "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                               "json:\"name\" graphql:\"name\""
	SecretName   *string                                              "json:\"secretName,omitempty\" graphql:\"secretName\""
	Integrations []*CreateBulkHush_CreateBulkHush_Hushes_Integrations "json:\"integrations,omitempty\" graphql:\"integrations\""
	Organization []*CreateBulkHush_CreateBulkHush_Hushes_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Events       []*CreateBulkHush_CreateBulkHush_Hushes_Events       "json:\"events,omitempty\" graphql:\"events\""
}

func (t *CreateBulkHush_CreateBulkHush_Hushes) GetDescription() *string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.Description
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetID() string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.ID
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetKind() *string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.Kind
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetName() string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.Name
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetSecretName() *string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.SecretName
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetIntegrations() []*CreateBulkHush_CreateBulkHush_Hushes_Integrations {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.Integrations
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetOrganization() []*CreateBulkHush_CreateBulkHush_Hushes_Organization {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.Organization
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetEvents() []*CreateBulkHush_CreateBulkHush_Hushes_Events {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.Events
}

type CreateBulkHush_CreateBulkHush struct {
	Hushes []*CreateBulkHush_CreateBulkHush_Hushes "json:\"hushes,omitempty\" graphql:\"hushes\""
}

func (t *CreateBulkHush_CreateBulkHush) GetHushes() []*CreateBulkHush_CreateBulkHush_Hushes {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush{}
	}
	return t.Hushes
}

type CreateHush_CreateHush_Hush_Integrations struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateHush_CreateHush_Hush_Integrations) GetID() string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush_Integrations{}
	}
	return t.ID
}

type CreateHush_CreateHush_Hush_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateHush_CreateHush_Hush_Organization) GetID() string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush_Organization{}
	}
	return t.ID
}

type CreateHush_CreateHush_Hush_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateHush_CreateHush_Hush_Events) GetID() string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush_Events{}
	}
	return t.ID
}

type CreateHush_CreateHush_Hush struct {
	Description  *string                                    "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                     "json:\"id\" graphql:\"id\""
	Kind         *string                                    "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                     "json:\"name\" graphql:\"name\""
	SecretName   *string                                    "json:\"secretName,omitempty\" graphql:\"secretName\""
	Integrations []*CreateHush_CreateHush_Hush_Integrations "json:\"integrations,omitempty\" graphql:\"integrations\""
	Organization []*CreateHush_CreateHush_Hush_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Events       []*CreateHush_CreateHush_Hush_Events       "json:\"events,omitempty\" graphql:\"events\""
}

func (t *CreateHush_CreateHush_Hush) GetDescription() *string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.Description
}
func (t *CreateHush_CreateHush_Hush) GetID() string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.ID
}
func (t *CreateHush_CreateHush_Hush) GetKind() *string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.Kind
}
func (t *CreateHush_CreateHush_Hush) GetName() string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.Name
}
func (t *CreateHush_CreateHush_Hush) GetSecretName() *string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.SecretName
}
func (t *CreateHush_CreateHush_Hush) GetIntegrations() []*CreateHush_CreateHush_Hush_Integrations {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.Integrations
}
func (t *CreateHush_CreateHush_Hush) GetOrganization() []*CreateHush_CreateHush_Hush_Organization {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.Organization
}
func (t *CreateHush_CreateHush_Hush) GetEvents() []*CreateHush_CreateHush_Hush_Events {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.Events
}

type CreateHush_CreateHush struct {
	Hush CreateHush_CreateHush_Hush "json:\"hush\" graphql:\"hush\""
}

func (t *CreateHush_CreateHush) GetHush() *CreateHush_CreateHush_Hush {
	if t == nil {
		t = &CreateHush_CreateHush{}
	}
	return &t.Hush
}

type GetAllHushes_Hushes_Edges_Node_Integrations struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllHushes_Hushes_Edges_Node_Integrations) GetID() string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node_Integrations{}
	}
	return t.ID
}

type GetAllHushes_Hushes_Edges_Node_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllHushes_Hushes_Edges_Node_Organization) GetID() string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node_Organization{}
	}
	return t.ID
}

type GetAllHushes_Hushes_Edges_Node_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllHushes_Hushes_Edges_Node_Events) GetID() string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node_Events{}
	}
	return t.ID
}

type GetAllHushes_Hushes_Edges_Node struct {
	Description  *string                                        "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                         "json:\"id\" graphql:\"id\""
	Kind         *string                                        "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                         "json:\"name\" graphql:\"name\""
	SecretName   *string                                        "json:\"secretName,omitempty\" graphql:\"secretName\""
	Integrations []*GetAllHushes_Hushes_Edges_Node_Integrations "json:\"integrations,omitempty\" graphql:\"integrations\""
	Organization []*GetAllHushes_Hushes_Edges_Node_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Events       []*GetAllHushes_Hushes_Edges_Node_Events       "json:\"events,omitempty\" graphql:\"events\""
	CreatedAt    *time.Time                                     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt    *time.Time                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy    *string                                        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy    *string                                        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllHushes_Hushes_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllHushes_Hushes_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllHushes_Hushes_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.Kind
}
func (t *GetAllHushes_Hushes_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllHushes_Hushes_Edges_Node) GetSecretName() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.SecretName
}
func (t *GetAllHushes_Hushes_Edges_Node) GetIntegrations() []*GetAllHushes_Hushes_Edges_Node_Integrations {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.Integrations
}
func (t *GetAllHushes_Hushes_Edges_Node) GetOrganization() []*GetAllHushes_Hushes_Edges_Node_Organization {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.Organization
}
func (t *GetAllHushes_Hushes_Edges_Node) GetEvents() []*GetAllHushes_Hushes_Edges_Node_Events {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.Events
}
func (t *GetAllHushes_Hushes_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllHushes_Hushes_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllHushes_Hushes_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllHushes_Hushes_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllHushes_Hushes_Edges struct {
	Node *GetAllHushes_Hushes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllHushes_Hushes_Edges) GetNode() *GetAllHushes_Hushes_Edges_Node {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges{}
	}
	return t.Node
}

type GetAllHushes_Hushes struct {
	Edges []*GetAllHushes_Hushes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllHushes_Hushes) GetEdges() []*GetAllHushes_Hushes_Edges {
	if t == nil {
		t = &GetAllHushes_Hushes{}
	}
	return t.Edges
}

type GetHushByID_Hush_Integrations struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetHushByID_Hush_Integrations) GetID() string {
	if t == nil {
		t = &GetHushByID_Hush_Integrations{}
	}
	return t.ID
}

type GetHushByID_Hush_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetHushByID_Hush_Organization) GetID() string {
	if t == nil {
		t = &GetHushByID_Hush_Organization{}
	}
	return t.ID
}

type GetHushByID_Hush_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetHushByID_Hush_Events) GetID() string {
	if t == nil {
		t = &GetHushByID_Hush_Events{}
	}
	return t.ID
}

type GetHushByID_Hush struct {
	Description  *string                          "json:\"description,omitempty\" graphql:\"description\""
	ID           string                           "json:\"id\" graphql:\"id\""
	Kind         *string                          "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                           "json:\"name\" graphql:\"name\""
	SecretName   *string                          "json:\"secretName,omitempty\" graphql:\"secretName\""
	Integrations []*GetHushByID_Hush_Integrations "json:\"integrations,omitempty\" graphql:\"integrations\""
	Organization []*GetHushByID_Hush_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Events       []*GetHushByID_Hush_Events       "json:\"events,omitempty\" graphql:\"events\""
	CreatedAt    *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt    *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy    *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy    *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetHushByID_Hush) GetDescription() *string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.Description
}
func (t *GetHushByID_Hush) GetID() string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.ID
}
func (t *GetHushByID_Hush) GetKind() *string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.Kind
}
func (t *GetHushByID_Hush) GetName() string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.Name
}
func (t *GetHushByID_Hush) GetSecretName() *string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.SecretName
}
func (t *GetHushByID_Hush) GetIntegrations() []*GetHushByID_Hush_Integrations {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.Integrations
}
func (t *GetHushByID_Hush) GetOrganization() []*GetHushByID_Hush_Organization {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.Organization
}
func (t *GetHushByID_Hush) GetEvents() []*GetHushByID_Hush_Events {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.Events
}
func (t *GetHushByID_Hush) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.CreatedAt
}
func (t *GetHushByID_Hush) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.UpdatedAt
}
func (t *GetHushByID_Hush) GetCreatedBy() *string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.CreatedBy
}
func (t *GetHushByID_Hush) GetUpdatedBy() *string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.UpdatedBy
}

type GetHushes_Hushes_Edges_Node_Integrations struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetHushes_Hushes_Edges_Node_Integrations) GetID() string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node_Integrations{}
	}
	return t.ID
}

type GetHushes_Hushes_Edges_Node_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetHushes_Hushes_Edges_Node_Organization) GetID() string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node_Organization{}
	}
	return t.ID
}

type GetHushes_Hushes_Edges_Node_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetHushes_Hushes_Edges_Node_Events) GetID() string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node_Events{}
	}
	return t.ID
}

type GetHushes_Hushes_Edges_Node struct {
	Description  *string                                     "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                      "json:\"id\" graphql:\"id\""
	Kind         *string                                     "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                      "json:\"name\" graphql:\"name\""
	SecretName   *string                                     "json:\"secretName,omitempty\" graphql:\"secretName\""
	Integrations []*GetHushes_Hushes_Edges_Node_Integrations "json:\"integrations,omitempty\" graphql:\"integrations\""
	Organization []*GetHushes_Hushes_Edges_Node_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Events       []*GetHushes_Hushes_Edges_Node_Events       "json:\"events,omitempty\" graphql:\"events\""
	CreatedAt    *time.Time                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt    *time.Time                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy    *string                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy    *string                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetHushes_Hushes_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.Description
}
func (t *GetHushes_Hushes_Edges_Node) GetID() string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.ID
}
func (t *GetHushes_Hushes_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.Kind
}
func (t *GetHushes_Hushes_Edges_Node) GetName() string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.Name
}
func (t *GetHushes_Hushes_Edges_Node) GetSecretName() *string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.SecretName
}
func (t *GetHushes_Hushes_Edges_Node) GetIntegrations() []*GetHushes_Hushes_Edges_Node_Integrations {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.Integrations
}
func (t *GetHushes_Hushes_Edges_Node) GetOrganization() []*GetHushes_Hushes_Edges_Node_Organization {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.Organization
}
func (t *GetHushes_Hushes_Edges_Node) GetEvents() []*GetHushes_Hushes_Edges_Node_Events {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.Events
}
func (t *GetHushes_Hushes_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetHushes_Hushes_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetHushes_Hushes_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetHushes_Hushes_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetHushes_Hushes_Edges struct {
	Node *GetHushes_Hushes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetHushes_Hushes_Edges) GetNode() *GetHushes_Hushes_Edges_Node {
	if t == nil {
		t = &GetHushes_Hushes_Edges{}
	}
	return t.Node
}

type GetHushes_Hushes struct {
	Edges []*GetHushes_Hushes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetHushes_Hushes) GetEdges() []*GetHushes_Hushes_Edges {
	if t == nil {
		t = &GetHushes_Hushes{}
	}
	return t.Edges
}

type UpdateHush_UpdateHush_Hush_Integrations struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateHush_UpdateHush_Hush_Integrations) GetID() string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush_Integrations{}
	}
	return t.ID
}

type UpdateHush_UpdateHush_Hush_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateHush_UpdateHush_Hush_Organization) GetID() string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush_Organization{}
	}
	return t.ID
}

type UpdateHush_UpdateHush_Hush_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateHush_UpdateHush_Hush_Events) GetID() string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush_Events{}
	}
	return t.ID
}

type UpdateHush_UpdateHush_Hush struct {
	Description  *string                                    "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                     "json:\"id\" graphql:\"id\""
	Kind         *string                                    "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                     "json:\"name\" graphql:\"name\""
	SecretName   *string                                    "json:\"secretName,omitempty\" graphql:\"secretName\""
	Integrations []*UpdateHush_UpdateHush_Hush_Integrations "json:\"integrations,omitempty\" graphql:\"integrations\""
	Organization []*UpdateHush_UpdateHush_Hush_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Events       []*UpdateHush_UpdateHush_Hush_Events       "json:\"events,omitempty\" graphql:\"events\""
}

func (t *UpdateHush_UpdateHush_Hush) GetDescription() *string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.Description
}
func (t *UpdateHush_UpdateHush_Hush) GetID() string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.ID
}
func (t *UpdateHush_UpdateHush_Hush) GetKind() *string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.Kind
}
func (t *UpdateHush_UpdateHush_Hush) GetName() string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.Name
}
func (t *UpdateHush_UpdateHush_Hush) GetSecretName() *string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.SecretName
}
func (t *UpdateHush_UpdateHush_Hush) GetIntegrations() []*UpdateHush_UpdateHush_Hush_Integrations {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.Integrations
}
func (t *UpdateHush_UpdateHush_Hush) GetOrganization() []*UpdateHush_UpdateHush_Hush_Organization {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.Organization
}
func (t *UpdateHush_UpdateHush_Hush) GetEvents() []*UpdateHush_UpdateHush_Hush_Events {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.Events
}

type UpdateHush_UpdateHush struct {
	Hush UpdateHush_UpdateHush_Hush "json:\"hush\" graphql:\"hush\""
}

func (t *UpdateHush_UpdateHush) GetHush() *UpdateHush_UpdateHush_Hush {
	if t == nil {
		t = &UpdateHush_UpdateHush{}
	}
	return &t.Hush
}

type GetAllHushHistories_HushHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string        "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Kind        *string        "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	SecretName  *string        "json:\"secretName,omitempty\" graphql:\"secretName\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllHushHistories_HushHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.Kind
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetSecretName() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.SecretName
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllHushHistories_HushHistories_Edges struct {
	Node *GetAllHushHistories_HushHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllHushHistories_HushHistories_Edges) GetNode() *GetAllHushHistories_HushHistories_Edges_Node {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges{}
	}
	return t.Node
}

type GetAllHushHistories_HushHistories struct {
	Edges []*GetAllHushHistories_HushHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllHushHistories_HushHistories) GetEdges() []*GetAllHushHistories_HushHistories_Edges {
	if t == nil {
		t = &GetAllHushHistories_HushHistories{}
	}
	return t.Edges
}

type GetHushHistories_HushHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string        "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Kind        *string        "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	SecretName  *string        "json:\"secretName,omitempty\" graphql:\"secretName\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetHushHistories_HushHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.Kind
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetSecretName() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.SecretName
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetHushHistories_HushHistories_Edges struct {
	Node *GetHushHistories_HushHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetHushHistories_HushHistories_Edges) GetNode() *GetHushHistories_HushHistories_Edges_Node {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges{}
	}
	return t.Node
}

type GetHushHistories_HushHistories struct {
	Edges []*GetHushHistories_HushHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetHushHistories_HushHistories) GetEdges() []*GetHushHistories_HushHistories_Edges {
	if t == nil {
		t = &GetHushHistories_HushHistories{}
	}
	return t.Edges
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Owner) GetID() string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Owner{}
	}
	return t.ID
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets) GetID() string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets{}
	}
	return t.ID
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Oauth2tokens struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Oauth2tokens) GetID() string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Oauth2tokens{}
	}
	return t.ID
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events) GetID() string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events{}
	}
	return t.ID
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Webhooks struct {
	ID             string "json:\"id\" graphql:\"id\""
	DestinationURL string "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool   "json:\"enabled\" graphql:\"enabled\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Webhooks) GetID() string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Webhooks{}
	}
	return t.ID
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Webhooks) GetDestinationURL() string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Webhooks{}
	}
	return t.DestinationURL
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Webhooks) GetEnabled() bool {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Webhooks{}
	}
	return t.Enabled
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations struct {
	Description  *string                                                                        "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                                                         "json:\"id\" graphql:\"id\""
	Kind         *string                                                                        "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                                                         "json:\"name\" graphql:\"name\""
	OwnerID      *string                                                                        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Owner        *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Owner          "json:\"owner,omitempty\" graphql:\"owner\""
	Secrets      []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets      "json:\"secrets,omitempty\" graphql:\"secrets\""
	Oauth2tokens []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Oauth2tokens "json:\"oauth2tokens,omitempty\" graphql:\"oauth2tokens\""
	Events       []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events       "json:\"events,omitempty\" graphql:\"events\""
	Webhooks     []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Webhooks     "json:\"webhooks,omitempty\" graphql:\"webhooks\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.Description
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetID() string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.ID
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetKind() *string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.Kind
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetName() string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.Name
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetOwner() *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Owner {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.Owner
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetSecrets() []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.Secrets
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetOauth2tokens() []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Oauth2tokens {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.Oauth2tokens
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetEvents() []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.Events
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetWebhooks() []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Webhooks {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.Webhooks
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration struct {
	Integrations []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations "json:\"integrations,omitempty\" graphql:\"integrations\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration) GetIntegrations() []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration{}
	}
	return t.Integrations
}

type CreateBulkIntegration_CreateBulkIntegration_Integrations_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations_Owner) GetID() string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations_Owner{}
	}
	return t.ID
}

type CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets) GetID() string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets{}
	}
	return t.ID
}

type CreateBulkIntegration_CreateBulkIntegration_Integrations_Oauth2tokens struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations_Oauth2tokens) GetID() string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations_Oauth2tokens{}
	}
	return t.ID
}

type CreateBulkIntegration_CreateBulkIntegration_Integrations_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations_Events) GetID() string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations_Events{}
	}
	return t.ID
}

type CreateBulkIntegration_CreateBulkIntegration_Integrations_Webhooks struct {
	ID             string "json:\"id\" graphql:\"id\""
	DestinationURL string "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool   "json:\"enabled\" graphql:\"enabled\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations_Webhooks) GetID() string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations_Webhooks{}
	}
	return t.ID
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations_Webhooks) GetDestinationURL() string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations_Webhooks{}
	}
	return t.DestinationURL
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations_Webhooks) GetEnabled() bool {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations_Webhooks{}
	}
	return t.Enabled
}

type CreateBulkIntegration_CreateBulkIntegration_Integrations struct {
	Description  *string                                                                  "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                                                   "json:\"id\" graphql:\"id\""
	Kind         *string                                                                  "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                                                   "json:\"name\" graphql:\"name\""
	OwnerID      *string                                                                  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Owner        *CreateBulkIntegration_CreateBulkIntegration_Integrations_Owner          "json:\"owner,omitempty\" graphql:\"owner\""
	Secrets      []*CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets      "json:\"secrets,omitempty\" graphql:\"secrets\""
	Oauth2tokens []*CreateBulkIntegration_CreateBulkIntegration_Integrations_Oauth2tokens "json:\"oauth2tokens,omitempty\" graphql:\"oauth2tokens\""
	Events       []*CreateBulkIntegration_CreateBulkIntegration_Integrations_Events       "json:\"events,omitempty\" graphql:\"events\""
	Webhooks     []*CreateBulkIntegration_CreateBulkIntegration_Integrations_Webhooks     "json:\"webhooks,omitempty\" graphql:\"webhooks\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetDescription() *string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.Description
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetID() string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.ID
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetKind() *string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.Kind
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetName() string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.Name
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.OwnerID
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetOwner() *CreateBulkIntegration_CreateBulkIntegration_Integrations_Owner {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.Owner
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetSecrets() []*CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.Secrets
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetOauth2tokens() []*CreateBulkIntegration_CreateBulkIntegration_Integrations_Oauth2tokens {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.Oauth2tokens
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetEvents() []*CreateBulkIntegration_CreateBulkIntegration_Integrations_Events {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.Events
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetWebhooks() []*CreateBulkIntegration_CreateBulkIntegration_Integrations_Webhooks {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.Webhooks
}

type CreateBulkIntegration_CreateBulkIntegration struct {
	Integrations []*CreateBulkIntegration_CreateBulkIntegration_Integrations "json:\"integrations,omitempty\" graphql:\"integrations\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration) GetIntegrations() []*CreateBulkIntegration_CreateBulkIntegration_Integrations {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration{}
	}
	return t.Integrations
}

type CreateIntegration_CreateIntegration_Integration_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateIntegration_CreateIntegration_Integration_Owner) GetID() string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration_Owner{}
	}
	return t.ID
}

type CreateIntegration_CreateIntegration_Integration_Secrets struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateIntegration_CreateIntegration_Integration_Secrets) GetID() string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration_Secrets{}
	}
	return t.ID
}

type CreateIntegration_CreateIntegration_Integration_Oauth2tokens struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateIntegration_CreateIntegration_Integration_Oauth2tokens) GetID() string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration_Oauth2tokens{}
	}
	return t.ID
}

type CreateIntegration_CreateIntegration_Integration_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateIntegration_CreateIntegration_Integration_Events) GetID() string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration_Events{}
	}
	return t.ID
}

type CreateIntegration_CreateIntegration_Integration_Webhooks struct {
	ID             string "json:\"id\" graphql:\"id\""
	DestinationURL string "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool   "json:\"enabled\" graphql:\"enabled\""
}

func (t *CreateIntegration_CreateIntegration_Integration_Webhooks) GetID() string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration_Webhooks{}
	}
	return t.ID
}
func (t *CreateIntegration_CreateIntegration_Integration_Webhooks) GetDestinationURL() string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration_Webhooks{}
	}
	return t.DestinationURL
}
func (t *CreateIntegration_CreateIntegration_Integration_Webhooks) GetEnabled() bool {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration_Webhooks{}
	}
	return t.Enabled
}

type CreateIntegration_CreateIntegration_Integration struct {
	Description  *string                                                         "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                                          "json:\"id\" graphql:\"id\""
	Kind         *string                                                         "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                                          "json:\"name\" graphql:\"name\""
	OwnerID      *string                                                         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Owner        *CreateIntegration_CreateIntegration_Integration_Owner          "json:\"owner,omitempty\" graphql:\"owner\""
	Secrets      []*CreateIntegration_CreateIntegration_Integration_Secrets      "json:\"secrets,omitempty\" graphql:\"secrets\""
	Oauth2tokens []*CreateIntegration_CreateIntegration_Integration_Oauth2tokens "json:\"oauth2tokens,omitempty\" graphql:\"oauth2tokens\""
	Events       []*CreateIntegration_CreateIntegration_Integration_Events       "json:\"events,omitempty\" graphql:\"events\""
	Webhooks     []*CreateIntegration_CreateIntegration_Integration_Webhooks     "json:\"webhooks,omitempty\" graphql:\"webhooks\""
}

func (t *CreateIntegration_CreateIntegration_Integration) GetDescription() *string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.Description
}
func (t *CreateIntegration_CreateIntegration_Integration) GetID() string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.ID
}
func (t *CreateIntegration_CreateIntegration_Integration) GetKind() *string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.Kind
}
func (t *CreateIntegration_CreateIntegration_Integration) GetName() string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.Name
}
func (t *CreateIntegration_CreateIntegration_Integration) GetOwnerID() *string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.OwnerID
}
func (t *CreateIntegration_CreateIntegration_Integration) GetOwner() *CreateIntegration_CreateIntegration_Integration_Owner {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.Owner
}
func (t *CreateIntegration_CreateIntegration_Integration) GetSecrets() []*CreateIntegration_CreateIntegration_Integration_Secrets {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.Secrets
}
func (t *CreateIntegration_CreateIntegration_Integration) GetOauth2tokens() []*CreateIntegration_CreateIntegration_Integration_Oauth2tokens {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.Oauth2tokens
}
func (t *CreateIntegration_CreateIntegration_Integration) GetEvents() []*CreateIntegration_CreateIntegration_Integration_Events {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.Events
}
func (t *CreateIntegration_CreateIntegration_Integration) GetWebhooks() []*CreateIntegration_CreateIntegration_Integration_Webhooks {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.Webhooks
}

type CreateIntegration_CreateIntegration struct {
	Integration CreateIntegration_CreateIntegration_Integration "json:\"integration\" graphql:\"integration\""
}

func (t *CreateIntegration_CreateIntegration) GetIntegration() *CreateIntegration_CreateIntegration_Integration {
	if t == nil {
		t = &CreateIntegration_CreateIntegration{}
	}
	return &t.Integration
}

type DeleteIntegration_DeleteIntegration struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteIntegration_DeleteIntegration) GetDeletedID() string {
	if t == nil {
		t = &DeleteIntegration_DeleteIntegration{}
	}
	return t.DeletedID
}

type GetAllIntegrations_Integrations_Edges_Node_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllIntegrations_Integrations_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node_Owner{}
	}
	return t.ID
}

type GetAllIntegrations_Integrations_Edges_Node_Secrets struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllIntegrations_Integrations_Edges_Node_Secrets) GetID() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node_Secrets{}
	}
	return t.ID
}

type GetAllIntegrations_Integrations_Edges_Node_Oauth2tokens struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllIntegrations_Integrations_Edges_Node_Oauth2tokens) GetID() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node_Oauth2tokens{}
	}
	return t.ID
}

type GetAllIntegrations_Integrations_Edges_Node_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllIntegrations_Integrations_Edges_Node_Events) GetID() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node_Events{}
	}
	return t.ID
}

type GetAllIntegrations_Integrations_Edges_Node_Webhooks struct {
	ID             string "json:\"id\" graphql:\"id\""
	DestinationURL string "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool   "json:\"enabled\" graphql:\"enabled\""
}

func (t *GetAllIntegrations_Integrations_Edges_Node_Webhooks) GetID() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node_Webhooks{}
	}
	return t.ID
}
func (t *GetAllIntegrations_Integrations_Edges_Node_Webhooks) GetDestinationURL() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node_Webhooks{}
	}
	return t.DestinationURL
}
func (t *GetAllIntegrations_Integrations_Edges_Node_Webhooks) GetEnabled() bool {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node_Webhooks{}
	}
	return t.Enabled
}

type GetAllIntegrations_Integrations_Edges_Node struct {
	Description  *string                                                    "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                                     "json:\"id\" graphql:\"id\""
	Kind         *string                                                    "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                                     "json:\"name\" graphql:\"name\""
	OwnerID      *string                                                    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Owner        *GetAllIntegrations_Integrations_Edges_Node_Owner          "json:\"owner,omitempty\" graphql:\"owner\""
	Secrets      []*GetAllIntegrations_Integrations_Edges_Node_Secrets      "json:\"secrets,omitempty\" graphql:\"secrets\""
	Oauth2tokens []*GetAllIntegrations_Integrations_Edges_Node_Oauth2tokens "json:\"oauth2tokens,omitempty\" graphql:\"oauth2tokens\""
	Events       []*GetAllIntegrations_Integrations_Edges_Node_Events       "json:\"events,omitempty\" graphql:\"events\""
	Webhooks     []*GetAllIntegrations_Integrations_Edges_Node_Webhooks     "json:\"webhooks,omitempty\" graphql:\"webhooks\""
	CreatedAt    *time.Time                                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt    *time.Time                                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllIntegrations_Integrations_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Kind
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetOwner() *GetAllIntegrations_Integrations_Edges_Node_Owner {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Owner
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetSecrets() []*GetAllIntegrations_Integrations_Edges_Node_Secrets {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Secrets
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetOauth2tokens() []*GetAllIntegrations_Integrations_Edges_Node_Oauth2tokens {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Oauth2tokens
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetEvents() []*GetAllIntegrations_Integrations_Edges_Node_Events {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Events
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetWebhooks() []*GetAllIntegrations_Integrations_Edges_Node_Webhooks {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Webhooks
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllIntegrations_Integrations_Edges struct {
	Node *GetAllIntegrations_Integrations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllIntegrations_Integrations_Edges) GetNode() *GetAllIntegrations_Integrations_Edges_Node {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges{}
	}
	return t.Node
}

type GetAllIntegrations_Integrations struct {
	Edges []*GetAllIntegrations_Integrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllIntegrations_Integrations) GetEdges() []*GetAllIntegrations_Integrations_Edges {
	if t == nil {
		t = &GetAllIntegrations_Integrations{}
	}
	return t.Edges
}

type GetIntegrationByID_Integration_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIntegrationByID_Integration_Owner) GetID() string {
	if t == nil {
		t = &GetIntegrationByID_Integration_Owner{}
	}
	return t.ID
}

type GetIntegrationByID_Integration_Secrets struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIntegrationByID_Integration_Secrets) GetID() string {
	if t == nil {
		t = &GetIntegrationByID_Integration_Secrets{}
	}
	return t.ID
}

type GetIntegrationByID_Integration_Oauth2tokens struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIntegrationByID_Integration_Oauth2tokens) GetID() string {
	if t == nil {
		t = &GetIntegrationByID_Integration_Oauth2tokens{}
	}
	return t.ID
}

type GetIntegrationByID_Integration_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIntegrationByID_Integration_Events) GetID() string {
	if t == nil {
		t = &GetIntegrationByID_Integration_Events{}
	}
	return t.ID
}

type GetIntegrationByID_Integration_Webhooks struct {
	ID             string "json:\"id\" graphql:\"id\""
	DestinationURL string "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool   "json:\"enabled\" graphql:\"enabled\""
}

func (t *GetIntegrationByID_Integration_Webhooks) GetID() string {
	if t == nil {
		t = &GetIntegrationByID_Integration_Webhooks{}
	}
	return t.ID
}
func (t *GetIntegrationByID_Integration_Webhooks) GetDestinationURL() string {
	if t == nil {
		t = &GetIntegrationByID_Integration_Webhooks{}
	}
	return t.DestinationURL
}
func (t *GetIntegrationByID_Integration_Webhooks) GetEnabled() bool {
	if t == nil {
		t = &GetIntegrationByID_Integration_Webhooks{}
	}
	return t.Enabled
}

type GetIntegrationByID_Integration struct {
	Description  *string                                        "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                         "json:\"id\" graphql:\"id\""
	Kind         *string                                        "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                         "json:\"name\" graphql:\"name\""
	OwnerID      *string                                        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Owner        *GetIntegrationByID_Integration_Owner          "json:\"owner,omitempty\" graphql:\"owner\""
	Secrets      []*GetIntegrationByID_Integration_Secrets      "json:\"secrets,omitempty\" graphql:\"secrets\""
	Oauth2tokens []*GetIntegrationByID_Integration_Oauth2tokens "json:\"oauth2tokens,omitempty\" graphql:\"oauth2tokens\""
	Events       []*GetIntegrationByID_Integration_Events       "json:\"events,omitempty\" graphql:\"events\""
	Webhooks     []*GetIntegrationByID_Integration_Webhooks     "json:\"webhooks,omitempty\" graphql:\"webhooks\""
	CreatedAt    *time.Time                                     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt    *time.Time                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetIntegrationByID_Integration) GetDescription() *string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Description
}
func (t *GetIntegrationByID_Integration) GetID() string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.ID
}
func (t *GetIntegrationByID_Integration) GetKind() *string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Kind
}
func (t *GetIntegrationByID_Integration) GetName() string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Name
}
func (t *GetIntegrationByID_Integration) GetOwnerID() *string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.OwnerID
}
func (t *GetIntegrationByID_Integration) GetOwner() *GetIntegrationByID_Integration_Owner {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Owner
}
func (t *GetIntegrationByID_Integration) GetSecrets() []*GetIntegrationByID_Integration_Secrets {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Secrets
}
func (t *GetIntegrationByID_Integration) GetOauth2tokens() []*GetIntegrationByID_Integration_Oauth2tokens {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Oauth2tokens
}
func (t *GetIntegrationByID_Integration) GetEvents() []*GetIntegrationByID_Integration_Events {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Events
}
func (t *GetIntegrationByID_Integration) GetWebhooks() []*GetIntegrationByID_Integration_Webhooks {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Webhooks
}
func (t *GetIntegrationByID_Integration) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.CreatedAt
}
func (t *GetIntegrationByID_Integration) GetCreatedBy() *string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.CreatedBy
}
func (t *GetIntegrationByID_Integration) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.UpdatedAt
}
func (t *GetIntegrationByID_Integration) GetUpdatedBy() *string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.UpdatedBy
}

type GetIntegrations_Integrations_Edges_Node_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIntegrations_Integrations_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node_Owner{}
	}
	return t.ID
}

type GetIntegrations_Integrations_Edges_Node_Secrets struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIntegrations_Integrations_Edges_Node_Secrets) GetID() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node_Secrets{}
	}
	return t.ID
}

type GetIntegrations_Integrations_Edges_Node_Oauth2tokens struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIntegrations_Integrations_Edges_Node_Oauth2tokens) GetID() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node_Oauth2tokens{}
	}
	return t.ID
}

type GetIntegrations_Integrations_Edges_Node_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIntegrations_Integrations_Edges_Node_Events) GetID() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node_Events{}
	}
	return t.ID
}

type GetIntegrations_Integrations_Edges_Node_Webhooks struct {
	ID             string "json:\"id\" graphql:\"id\""
	DestinationURL string "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool   "json:\"enabled\" graphql:\"enabled\""
}

func (t *GetIntegrations_Integrations_Edges_Node_Webhooks) GetID() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node_Webhooks{}
	}
	return t.ID
}
func (t *GetIntegrations_Integrations_Edges_Node_Webhooks) GetDestinationURL() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node_Webhooks{}
	}
	return t.DestinationURL
}
func (t *GetIntegrations_Integrations_Edges_Node_Webhooks) GetEnabled() bool {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node_Webhooks{}
	}
	return t.Enabled
}

type GetIntegrations_Integrations_Edges_Node struct {
	Description  *string                                                 "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                                  "json:\"id\" graphql:\"id\""
	Kind         *string                                                 "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                                  "json:\"name\" graphql:\"name\""
	OwnerID      *string                                                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Owner        *GetIntegrations_Integrations_Edges_Node_Owner          "json:\"owner,omitempty\" graphql:\"owner\""
	Secrets      []*GetIntegrations_Integrations_Edges_Node_Secrets      "json:\"secrets,omitempty\" graphql:\"secrets\""
	Oauth2tokens []*GetIntegrations_Integrations_Edges_Node_Oauth2tokens "json:\"oauth2tokens,omitempty\" graphql:\"oauth2tokens\""
	Events       []*GetIntegrations_Integrations_Edges_Node_Events       "json:\"events,omitempty\" graphql:\"events\""
	Webhooks     []*GetIntegrations_Integrations_Edges_Node_Webhooks     "json:\"webhooks,omitempty\" graphql:\"webhooks\""
	CreatedAt    *time.Time                                              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt    *time.Time                                              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetIntegrations_Integrations_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Description
}
func (t *GetIntegrations_Integrations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.ID
}
func (t *GetIntegrations_Integrations_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Kind
}
func (t *GetIntegrations_Integrations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Name
}
func (t *GetIntegrations_Integrations_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetIntegrations_Integrations_Edges_Node) GetOwner() *GetIntegrations_Integrations_Edges_Node_Owner {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Owner
}
func (t *GetIntegrations_Integrations_Edges_Node) GetSecrets() []*GetIntegrations_Integrations_Edges_Node_Secrets {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Secrets
}
func (t *GetIntegrations_Integrations_Edges_Node) GetOauth2tokens() []*GetIntegrations_Integrations_Edges_Node_Oauth2tokens {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Oauth2tokens
}
func (t *GetIntegrations_Integrations_Edges_Node) GetEvents() []*GetIntegrations_Integrations_Edges_Node_Events {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Events
}
func (t *GetIntegrations_Integrations_Edges_Node) GetWebhooks() []*GetIntegrations_Integrations_Edges_Node_Webhooks {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Webhooks
}
func (t *GetIntegrations_Integrations_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetIntegrations_Integrations_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetIntegrations_Integrations_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetIntegrations_Integrations_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetIntegrations_Integrations_Edges struct {
	Node *GetIntegrations_Integrations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetIntegrations_Integrations_Edges) GetNode() *GetIntegrations_Integrations_Edges_Node {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges{}
	}
	return t.Node
}

type GetIntegrations_Integrations struct {
	Edges []*GetIntegrations_Integrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetIntegrations_Integrations) GetEdges() []*GetIntegrations_Integrations_Edges {
	if t == nil {
		t = &GetIntegrations_Integrations{}
	}
	return t.Edges
}

type UpdateIntegration_UpdateIntegration_Integration_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateIntegration_UpdateIntegration_Integration_Owner) GetID() string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration_Owner{}
	}
	return t.ID
}

type UpdateIntegration_UpdateIntegration_Integration_Secrets struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateIntegration_UpdateIntegration_Integration_Secrets) GetID() string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration_Secrets{}
	}
	return t.ID
}

type UpdateIntegration_UpdateIntegration_Integration_Oauth2tokens struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateIntegration_UpdateIntegration_Integration_Oauth2tokens) GetID() string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration_Oauth2tokens{}
	}
	return t.ID
}

type UpdateIntegration_UpdateIntegration_Integration_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateIntegration_UpdateIntegration_Integration_Events) GetID() string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration_Events{}
	}
	return t.ID
}

type UpdateIntegration_UpdateIntegration_Integration_Webhooks struct {
	ID             string "json:\"id\" graphql:\"id\""
	DestinationURL string "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool   "json:\"enabled\" graphql:\"enabled\""
}

func (t *UpdateIntegration_UpdateIntegration_Integration_Webhooks) GetID() string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration_Webhooks{}
	}
	return t.ID
}
func (t *UpdateIntegration_UpdateIntegration_Integration_Webhooks) GetDestinationURL() string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration_Webhooks{}
	}
	return t.DestinationURL
}
func (t *UpdateIntegration_UpdateIntegration_Integration_Webhooks) GetEnabled() bool {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration_Webhooks{}
	}
	return t.Enabled
}

type UpdateIntegration_UpdateIntegration_Integration struct {
	Description  *string                                                         "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                                          "json:\"id\" graphql:\"id\""
	Kind         *string                                                         "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                                          "json:\"name\" graphql:\"name\""
	OwnerID      *string                                                         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Owner        *UpdateIntegration_UpdateIntegration_Integration_Owner          "json:\"owner,omitempty\" graphql:\"owner\""
	Secrets      []*UpdateIntegration_UpdateIntegration_Integration_Secrets      "json:\"secrets,omitempty\" graphql:\"secrets\""
	Oauth2tokens []*UpdateIntegration_UpdateIntegration_Integration_Oauth2tokens "json:\"oauth2tokens,omitempty\" graphql:\"oauth2tokens\""
	Events       []*UpdateIntegration_UpdateIntegration_Integration_Events       "json:\"events,omitempty\" graphql:\"events\""
	Webhooks     []*UpdateIntegration_UpdateIntegration_Integration_Webhooks     "json:\"webhooks,omitempty\" graphql:\"webhooks\""
}

func (t *UpdateIntegration_UpdateIntegration_Integration) GetDescription() *string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.Description
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetID() string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.ID
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetKind() *string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.Kind
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetName() string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.Name
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetOwnerID() *string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.OwnerID
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetOwner() *UpdateIntegration_UpdateIntegration_Integration_Owner {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.Owner
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetSecrets() []*UpdateIntegration_UpdateIntegration_Integration_Secrets {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.Secrets
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetOauth2tokens() []*UpdateIntegration_UpdateIntegration_Integration_Oauth2tokens {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.Oauth2tokens
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetEvents() []*UpdateIntegration_UpdateIntegration_Integration_Events {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.Events
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetWebhooks() []*UpdateIntegration_UpdateIntegration_Integration_Webhooks {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.Webhooks
}

type UpdateIntegration_UpdateIntegration struct {
	Integration UpdateIntegration_UpdateIntegration_Integration "json:\"integration\" graphql:\"integration\""
}

func (t *UpdateIntegration_UpdateIntegration) GetIntegration() *UpdateIntegration_UpdateIntegration_Integration {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration{}
	}
	return &t.Integration
}

type GetAllIntegrationHistories_IntegrationHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string        "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Kind        *string        "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Kind
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllIntegrationHistories_IntegrationHistories_Edges struct {
	Node *GetAllIntegrationHistories_IntegrationHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllIntegrationHistories_IntegrationHistories_Edges) GetNode() *GetAllIntegrationHistories_IntegrationHistories_Edges_Node {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges{}
	}
	return t.Node
}

type GetAllIntegrationHistories_IntegrationHistories struct {
	Edges []*GetAllIntegrationHistories_IntegrationHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllIntegrationHistories_IntegrationHistories) GetEdges() []*GetAllIntegrationHistories_IntegrationHistories_Edges {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories{}
	}
	return t.Edges
}

type GetIntegrationHistories_IntegrationHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string        "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Kind        *string        "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string         "json:\"name\" graphql:\"name\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Kind
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetIntegrationHistories_IntegrationHistories_Edges struct {
	Node *GetIntegrationHistories_IntegrationHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetIntegrationHistories_IntegrationHistories_Edges) GetNode() *GetIntegrationHistories_IntegrationHistories_Edges_Node {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges{}
	}
	return t.Node
}

type GetIntegrationHistories_IntegrationHistories struct {
	Edges []*GetIntegrationHistories_IntegrationHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetIntegrationHistories_IntegrationHistories) GetEdges() []*GetIntegrationHistories_IntegrationHistories_Edges {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories{}
	}
	return t.Edges
}

type CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     string                 "json:\"description\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	PolicyType      *string                "json:\"policyType,omitempty\" graphql:\"policyType\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetBackground() *string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.Background
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetDescription() string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.Description
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.Details
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetID() string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.ID
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetName() string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.Name
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetPolicyType() *string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.PolicyType
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetPurposeAndScope() *string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.PurposeAndScope
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetStatus() *string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.Status
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.Tags
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies) GetVersion() *string {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies{}
	}
	return t.Version
}

type CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy struct {
	InternalPolicies []*CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies "json:\"internalPolicies,omitempty\" graphql:\"internalPolicies\""
}

func (t *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy) GetInternalPolicies() []*CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy_InternalPolicies {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy{}
	}
	return t.InternalPolicies
}

type CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     string                 "json:\"description\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	PolicyType      *string                "json:\"policyType,omitempty\" graphql:\"policyType\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetBackground() *string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.Background
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.CreatedAt
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.CreatedBy
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetDescription() string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.Description
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.Details
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetID() string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.ID
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetName() string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.Name
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetPolicyType() *string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.PolicyType
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetPurposeAndScope() *string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.PurposeAndScope
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetStatus() *string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.Status
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetTags() []string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.Tags
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies) GetVersion() *string {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies{}
	}
	return t.Version
}

type CreateBulkInternalPolicy_CreateBulkInternalPolicy struct {
	InternalPolicies []*CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies "json:\"internalPolicies,omitempty\" graphql:\"internalPolicies\""
}

func (t *CreateBulkInternalPolicy_CreateBulkInternalPolicy) GetInternalPolicies() []*CreateBulkInternalPolicy_CreateBulkInternalPolicy_InternalPolicies {
	if t == nil {
		t = &CreateBulkInternalPolicy_CreateBulkInternalPolicy{}
	}
	return t.InternalPolicies
}

type CreateInternalPolicy_CreateInternalPolicy_InternalPolicy struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     string                 "json:\"description\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	PolicyType      *string                "json:\"policyType,omitempty\" graphql:\"policyType\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetBackground() *string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.Background
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.CreatedAt
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetCreatedBy() *string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.CreatedBy
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetDescription() string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.Description
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.Details
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetID() string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.ID
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetName() string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.Name
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetPolicyType() *string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.PolicyType
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetPurposeAndScope() *string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.PurposeAndScope
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetStatus() *string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.Status
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetTags() []string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.Tags
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.UpdatedAt
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.UpdatedBy
}
func (t *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy) GetVersion() *string {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy_InternalPolicy{}
	}
	return t.Version
}

type CreateInternalPolicy_CreateInternalPolicy struct {
	InternalPolicy CreateInternalPolicy_CreateInternalPolicy_InternalPolicy "json:\"internalPolicy\" graphql:\"internalPolicy\""
}

func (t *CreateInternalPolicy_CreateInternalPolicy) GetInternalPolicy() *CreateInternalPolicy_CreateInternalPolicy_InternalPolicy {
	if t == nil {
		t = &CreateInternalPolicy_CreateInternalPolicy{}
	}
	return &t.InternalPolicy
}

type DeleteInternalPolicy_DeleteInternalPolicy struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteInternalPolicy_DeleteInternalPolicy) GetDeletedID() string {
	if t == nil {
		t = &DeleteInternalPolicy_DeleteInternalPolicy{}
	}
	return t.DeletedID
}

type GetAllInternalPolicies_InternalPolicies_Edges_Node struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     string                 "json:\"description\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	PolicyType      *string                "json:\"policyType,omitempty\" graphql:\"policyType\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetBackground() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Background
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetDescription() string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetPolicyType() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.PolicyType
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetPurposeAndScope() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.PurposeAndScope
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllInternalPolicies_InternalPolicies_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Version
}

type GetAllInternalPolicies_InternalPolicies_Edges struct {
	Node *GetAllInternalPolicies_InternalPolicies_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllInternalPolicies_InternalPolicies_Edges) GetNode() *GetAllInternalPolicies_InternalPolicies_Edges_Node {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies_Edges{}
	}
	return t.Node
}

type GetAllInternalPolicies_InternalPolicies struct {
	Edges []*GetAllInternalPolicies_InternalPolicies_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllInternalPolicies_InternalPolicies) GetEdges() []*GetAllInternalPolicies_InternalPolicies_Edges {
	if t == nil {
		t = &GetAllInternalPolicies_InternalPolicies{}
	}
	return t.Edges
}

type GetInternalPolicyByID_InternalPolicy struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     string                 "json:\"description\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	PolicyType      *string                "json:\"policyType,omitempty\" graphql:\"policyType\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetInternalPolicyByID_InternalPolicy) GetBackground() *string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.Background
}
func (t *GetInternalPolicyByID_InternalPolicy) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.CreatedAt
}
func (t *GetInternalPolicyByID_InternalPolicy) GetCreatedBy() *string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.CreatedBy
}
func (t *GetInternalPolicyByID_InternalPolicy) GetDescription() string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.Description
}
func (t *GetInternalPolicyByID_InternalPolicy) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.Details
}
func (t *GetInternalPolicyByID_InternalPolicy) GetID() string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.ID
}
func (t *GetInternalPolicyByID_InternalPolicy) GetName() string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.Name
}
func (t *GetInternalPolicyByID_InternalPolicy) GetPolicyType() *string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.PolicyType
}
func (t *GetInternalPolicyByID_InternalPolicy) GetPurposeAndScope() *string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.PurposeAndScope
}
func (t *GetInternalPolicyByID_InternalPolicy) GetStatus() *string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.Status
}
func (t *GetInternalPolicyByID_InternalPolicy) GetTags() []string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.Tags
}
func (t *GetInternalPolicyByID_InternalPolicy) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.UpdatedAt
}
func (t *GetInternalPolicyByID_InternalPolicy) GetUpdatedBy() *string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.UpdatedBy
}
func (t *GetInternalPolicyByID_InternalPolicy) GetVersion() *string {
	if t == nil {
		t = &GetInternalPolicyByID_InternalPolicy{}
	}
	return t.Version
}

type GetInternalPolicies_InternalPolicies_Edges_Node struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     string                 "json:\"description\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	PolicyType      *string                "json:\"policyType,omitempty\" graphql:\"policyType\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetBackground() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Background
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetDescription() string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Description
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Details
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetID() string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.ID
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetName() string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Name
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetPolicyType() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.PolicyType
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetPurposeAndScope() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.PurposeAndScope
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Status
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Tags
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetInternalPolicies_InternalPolicies_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges_Node{}
	}
	return t.Version
}

type GetInternalPolicies_InternalPolicies_Edges struct {
	Node *GetInternalPolicies_InternalPolicies_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetInternalPolicies_InternalPolicies_Edges) GetNode() *GetInternalPolicies_InternalPolicies_Edges_Node {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies_Edges{}
	}
	return t.Node
}

type GetInternalPolicies_InternalPolicies struct {
	Edges []*GetInternalPolicies_InternalPolicies_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetInternalPolicies_InternalPolicies) GetEdges() []*GetInternalPolicies_InternalPolicies_Edges {
	if t == nil {
		t = &GetInternalPolicies_InternalPolicies{}
	}
	return t.Edges
}

type UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     string                 "json:\"description\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	PolicyType      *string                "json:\"policyType,omitempty\" graphql:\"policyType\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetBackground() *string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.Background
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.CreatedAt
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.CreatedBy
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetDescription() string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.Description
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetDetails() map[string]interface{} {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.Details
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetID() string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.ID
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetName() string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.Name
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetPolicyType() *string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.PolicyType
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetPurposeAndScope() *string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.PurposeAndScope
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetStatus() *string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.Status
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetTags() []string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.Tags
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.UpdatedAt
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.UpdatedBy
}
func (t *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy) GetVersion() *string {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy{}
	}
	return t.Version
}

type UpdateInternalPolicy_UpdateInternalPolicy struct {
	InternalPolicy UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy "json:\"internalPolicy\" graphql:\"internalPolicy\""
}

func (t *UpdateInternalPolicy_UpdateInternalPolicy) GetInternalPolicy() *UpdateInternalPolicy_UpdateInternalPolicy_InternalPolicy {
	if t == nil {
		t = &UpdateInternalPolicy_UpdateInternalPolicy{}
	}
	return &t.InternalPolicy
}

type GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     string                 "json:\"description\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	HistoryTime     time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	Operation       history.OpType         "json:\"operation\" graphql:\"operation\""
	PolicyType      *string                "json:\"policyType,omitempty\" graphql:\"policyType\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Ref             *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetBackground() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Background
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetDescription() string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetPolicyType() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.PolicyType
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetPurposeAndScope() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.PurposeAndScope
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Version
}

type GetAllInternalPolicyHistories_InternalPolicyHistories_Edges struct {
	Node *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges) GetNode() *GetAllInternalPolicyHistories_InternalPolicyHistories_Edges_Node {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories_Edges{}
	}
	return t.Node
}

type GetAllInternalPolicyHistories_InternalPolicyHistories struct {
	Edges []*GetAllInternalPolicyHistories_InternalPolicyHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllInternalPolicyHistories_InternalPolicyHistories) GetEdges() []*GetAllInternalPolicyHistories_InternalPolicyHistories_Edges {
	if t == nil {
		t = &GetAllInternalPolicyHistories_InternalPolicyHistories{}
	}
	return t.Edges
}

type GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     string                 "json:\"description\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	HistoryTime     time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	Operation       history.OpType         "json:\"operation\" graphql:\"operation\""
	PolicyType      *string                "json:\"policyType,omitempty\" graphql:\"policyType\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Ref             *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetBackground() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Background
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetDescription() string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetPolicyType() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.PolicyType
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetPurposeAndScope() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.PurposeAndScope
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node{}
	}
	return t.Version
}

type GetInternalPolicyHistories_InternalPolicyHistories_Edges struct {
	Node *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetInternalPolicyHistories_InternalPolicyHistories_Edges) GetNode() *GetInternalPolicyHistories_InternalPolicyHistories_Edges_Node {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories_Edges{}
	}
	return t.Node
}

type GetInternalPolicyHistories_InternalPolicyHistories struct {
	Edges []*GetInternalPolicyHistories_InternalPolicyHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetInternalPolicyHistories_InternalPolicyHistories) GetEdges() []*GetInternalPolicyHistories_InternalPolicyHistories_Edges {
	if t == nil {
		t = &GetInternalPolicyHistories_InternalPolicyHistories{}
	}
	return t.Edges
}

type CreateBulkCSVInvite_CreateBulkCSVInvite_Invites struct {
	Expires      *time.Time         "json:\"expires,omitempty\" graphql:\"expires\""
	ID           string             "json:\"id\" graphql:\"id\""
	Recipient    string             "json:\"recipient\" graphql:\"recipient\""
	RequestorID  *string            "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Role         enums.Role         "json:\"role\" graphql:\"role\""
	SendAttempts int64              "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Status       enums.InviteStatus "json:\"status\" graphql:\"status\""
}

func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetExpires() *time.Time {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.Expires
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetID() string {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.ID
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetRecipient() string {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.Recipient
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetRequestorID() *string {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.RequestorID
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return &t.Role
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetSendAttempts() int64 {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.SendAttempts
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return &t.Status
}

type CreateBulkCSVInvite_CreateBulkCSVInvite struct {
	Invites []*CreateBulkCSVInvite_CreateBulkCSVInvite_Invites "json:\"invites,omitempty\" graphql:\"invites\""
}

func (t *CreateBulkCSVInvite_CreateBulkCSVInvite) GetInvites() []*CreateBulkCSVInvite_CreateBulkCSVInvite_Invites {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite{}
	}
	return t.Invites
}

type CreateBulkInvite_CreateBulkInvite_Invites struct {
	Expires      *time.Time         "json:\"expires,omitempty\" graphql:\"expires\""
	ID           string             "json:\"id\" graphql:\"id\""
	Recipient    string             "json:\"recipient\" graphql:\"recipient\""
	RequestorID  *string            "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Role         enums.Role         "json:\"role\" graphql:\"role\""
	SendAttempts int64              "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Status       enums.InviteStatus "json:\"status\" graphql:\"status\""
}

func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetExpires() *time.Time {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.Expires
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetID() string {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.ID
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetRecipient() string {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.Recipient
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetRequestorID() *string {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.RequestorID
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return &t.Role
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetSendAttempts() int64 {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.SendAttempts
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return &t.Status
}

type CreateBulkInvite_CreateBulkInvite struct {
	Invites []*CreateBulkInvite_CreateBulkInvite_Invites "json:\"invites,omitempty\" graphql:\"invites\""
}

func (t *CreateBulkInvite_CreateBulkInvite) GetInvites() []*CreateBulkInvite_CreateBulkInvite_Invites {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite{}
	}
	return t.Invites
}

type CreateInvite_CreateInvite_Invite_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateInvite_CreateInvite_Invite_Owner) GetID() string {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite_Owner{}
	}
	return t.ID
}

type CreateInvite_CreateInvite_Invite struct {
	Expires      *time.Time                              "json:\"expires,omitempty\" graphql:\"expires\""
	ID           string                                  "json:\"id\" graphql:\"id\""
	Recipient    string                                  "json:\"recipient\" graphql:\"recipient\""
	RequestorID  *string                                 "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Role         enums.Role                              "json:\"role\" graphql:\"role\""
	SendAttempts int64                                   "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Status       enums.InviteStatus                      "json:\"status\" graphql:\"status\""
	Owner        *CreateInvite_CreateInvite_Invite_Owner "json:\"owner,omitempty\" graphql:\"owner\""
}

func (t *CreateInvite_CreateInvite_Invite) GetExpires() *time.Time {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.Expires
}
func (t *CreateInvite_CreateInvite_Invite) GetID() string {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.ID
}
func (t *CreateInvite_CreateInvite_Invite) GetRecipient() string {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.Recipient
}
func (t *CreateInvite_CreateInvite_Invite) GetRequestorID() *string {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.RequestorID
}
func (t *CreateInvite_CreateInvite_Invite) GetRole() *enums.Role {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return &t.Role
}
func (t *CreateInvite_CreateInvite_Invite) GetSendAttempts() int64 {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.SendAttempts
}
func (t *CreateInvite_CreateInvite_Invite) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return &t.Status
}
func (t *CreateInvite_CreateInvite_Invite) GetOwner() *CreateInvite_CreateInvite_Invite_Owner {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.Owner
}

type CreateInvite_CreateInvite struct {
	Invite CreateInvite_CreateInvite_Invite "json:\"invite\" graphql:\"invite\""
}

func (t *CreateInvite_CreateInvite) GetInvite() *CreateInvite_CreateInvite_Invite {
	if t == nil {
		t = &CreateInvite_CreateInvite{}
	}
	return &t.Invite
}

type DeleteInvite_DeleteInvite struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteInvite_DeleteInvite) GetDeletedID() string {
	if t == nil {
		t = &DeleteInvite_DeleteInvite{}
	}
	return t.DeletedID
}

type GetInviteByID_Invite_Owner struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetInviteByID_Invite_Owner) GetDisplayName() string {
	if t == nil {
		t = &GetInviteByID_Invite_Owner{}
	}
	return t.DisplayName
}
func (t *GetInviteByID_Invite_Owner) GetID() string {
	if t == nil {
		t = &GetInviteByID_Invite_Owner{}
	}
	return t.ID
}
func (t *GetInviteByID_Invite_Owner) GetName() string {
	if t == nil {
		t = &GetInviteByID_Invite_Owner{}
	}
	return t.Name
}

type GetInviteByID_Invite struct {
	Expires      *time.Time                  "json:\"expires,omitempty\" graphql:\"expires\""
	ID           string                      "json:\"id\" graphql:\"id\""
	Recipient    string                      "json:\"recipient\" graphql:\"recipient\""
	RequestorID  *string                     "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Role         enums.Role                  "json:\"role\" graphql:\"role\""
	SendAttempts int64                       "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Status       enums.InviteStatus          "json:\"status\" graphql:\"status\""
	Owner        *GetInviteByID_Invite_Owner "json:\"owner,omitempty\" graphql:\"owner\""
	CreatedAt    *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt    *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetInviteByID_Invite) GetExpires() *time.Time {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.Expires
}
func (t *GetInviteByID_Invite) GetID() string {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.ID
}
func (t *GetInviteByID_Invite) GetRecipient() string {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.Recipient
}
func (t *GetInviteByID_Invite) GetRequestorID() *string {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.RequestorID
}
func (t *GetInviteByID_Invite) GetRole() *enums.Role {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return &t.Role
}
func (t *GetInviteByID_Invite) GetSendAttempts() int64 {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.SendAttempts
}
func (t *GetInviteByID_Invite) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return &t.Status
}
func (t *GetInviteByID_Invite) GetOwner() *GetInviteByID_Invite_Owner {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.Owner
}
func (t *GetInviteByID_Invite) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.CreatedAt
}
func (t *GetInviteByID_Invite) GetCreatedBy() *string {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.CreatedBy
}
func (t *GetInviteByID_Invite) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.UpdatedAt
}
func (t *GetInviteByID_Invite) GetUpdatedBy() *string {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.UpdatedBy
}

type GetAllInvites_Invites_Edges_Node struct {
	ID        string             "json:\"id\" graphql:\"id\""
	Recipient string             "json:\"recipient\" graphql:\"recipient\""
	Role      enums.Role         "json:\"role\" graphql:\"role\""
	Status    enums.InviteStatus "json:\"status\" graphql:\"status\""
}

func (t *GetAllInvites_Invites_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllInvites_Invites_Edges_Node) GetRecipient() string {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return t.Recipient
}
func (t *GetAllInvites_Invites_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return &t.Role
}
func (t *GetAllInvites_Invites_Edges_Node) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return &t.Status
}

type GetAllInvites_Invites_Edges struct {
	Node *GetAllInvites_Invites_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllInvites_Invites_Edges) GetNode() *GetAllInvites_Invites_Edges_Node {
	if t == nil {
		t = &GetAllInvites_Invites_Edges{}
	}
	return t.Node
}

type GetAllInvites_Invites struct {
	Edges []*GetAllInvites_Invites_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllInvites_Invites) GetEdges() []*GetAllInvites_Invites_Edges {
	if t == nil {
		t = &GetAllInvites_Invites{}
	}
	return t.Edges
}

type InvitesByOrgID_Invites_Edges_Node_Owner_Invites struct {
	Recipient    string             "json:\"recipient\" graphql:\"recipient\""
	RequestorID  *string            "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Role         enums.Role         "json:\"role\" graphql:\"role\""
	SendAttempts int64              "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Status       enums.InviteStatus "json:\"status\" graphql:\"status\""
}

func (t *InvitesByOrgID_Invites_Edges_Node_Owner_Invites) GetRecipient() string {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner_Invites{}
	}
	return t.Recipient
}
func (t *InvitesByOrgID_Invites_Edges_Node_Owner_Invites) GetRequestorID() *string {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner_Invites{}
	}
	return t.RequestorID
}
func (t *InvitesByOrgID_Invites_Edges_Node_Owner_Invites) GetRole() *enums.Role {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner_Invites{}
	}
	return &t.Role
}
func (t *InvitesByOrgID_Invites_Edges_Node_Owner_Invites) GetSendAttempts() int64 {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner_Invites{}
	}
	return t.SendAttempts
}
func (t *InvitesByOrgID_Invites_Edges_Node_Owner_Invites) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner_Invites{}
	}
	return &t.Status
}

type InvitesByOrgID_Invites_Edges_Node_Owner struct {
	ID      string                                             "json:\"id\" graphql:\"id\""
	Invites []*InvitesByOrgID_Invites_Edges_Node_Owner_Invites "json:\"invites,omitempty\" graphql:\"invites\""
}

func (t *InvitesByOrgID_Invites_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner{}
	}
	return t.ID
}
func (t *InvitesByOrgID_Invites_Edges_Node_Owner) GetInvites() []*InvitesByOrgID_Invites_Edges_Node_Owner_Invites {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner{}
	}
	return t.Invites
}

type InvitesByOrgID_Invites_Edges_Node struct {
	Owner *InvitesByOrgID_Invites_Edges_Node_Owner "json:\"owner,omitempty\" graphql:\"owner\""
}

func (t *InvitesByOrgID_Invites_Edges_Node) GetOwner() *InvitesByOrgID_Invites_Edges_Node_Owner {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node{}
	}
	return t.Owner
}

type InvitesByOrgID_Invites_Edges struct {
	Node *InvitesByOrgID_Invites_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *InvitesByOrgID_Invites_Edges) GetNode() *InvitesByOrgID_Invites_Edges_Node {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges{}
	}
	return t.Node
}

type InvitesByOrgID_Invites struct {
	Edges []*InvitesByOrgID_Invites_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *InvitesByOrgID_Invites) GetEdges() []*InvitesByOrgID_Invites_Edges {
	if t == nil {
		t = &InvitesByOrgID_Invites{}
	}
	return t.Edges
}

type CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Satisfies   *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.Description
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.Details
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetID() string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.ID
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetName() string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.Name
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetSatisfies() *string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.Satisfies
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.Tags
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVNarrative_CreateBulkCSVNarrative struct {
	Narratives []*CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives "json:\"narratives,omitempty\" graphql:\"narratives\""
}

func (t *CreateBulkCSVNarrative_CreateBulkCSVNarrative) GetNarratives() []*CreateBulkCSVNarrative_CreateBulkCSVNarrative_Narratives {
	if t == nil {
		t = &CreateBulkCSVNarrative_CreateBulkCSVNarrative{}
	}
	return t.Narratives
}

type CreateBulkNarrative_CreateBulkNarrative_Narratives struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Satisfies   *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.CreatedAt
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.CreatedBy
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetDescription() *string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.Description
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.Details
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetID() string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.ID
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetName() string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.Name
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetSatisfies() *string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.Satisfies
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetTags() []string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.Tags
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkNarrative_CreateBulkNarrative_Narratives) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative_Narratives{}
	}
	return t.UpdatedBy
}

type CreateBulkNarrative_CreateBulkNarrative struct {
	Narratives []*CreateBulkNarrative_CreateBulkNarrative_Narratives "json:\"narratives,omitempty\" graphql:\"narratives\""
}

func (t *CreateBulkNarrative_CreateBulkNarrative) GetNarratives() []*CreateBulkNarrative_CreateBulkNarrative_Narratives {
	if t == nil {
		t = &CreateBulkNarrative_CreateBulkNarrative{}
	}
	return t.Narratives
}

type CreateNarrative_CreateNarrative_Narrative struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Satisfies   *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateNarrative_CreateNarrative_Narrative) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.CreatedAt
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetCreatedBy() *string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.CreatedBy
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetDescription() *string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.Description
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.Details
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetID() string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.ID
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetName() string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.Name
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetSatisfies() *string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.Satisfies
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetTags() []string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.Tags
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.UpdatedAt
}
func (t *CreateNarrative_CreateNarrative_Narrative) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateNarrative_CreateNarrative_Narrative{}
	}
	return t.UpdatedBy
}

type CreateNarrative_CreateNarrative struct {
	Narrative CreateNarrative_CreateNarrative_Narrative "json:\"narrative\" graphql:\"narrative\""
}

func (t *CreateNarrative_CreateNarrative) GetNarrative() *CreateNarrative_CreateNarrative_Narrative {
	if t == nil {
		t = &CreateNarrative_CreateNarrative{}
	}
	return &t.Narrative
}

type DeleteNarrative_DeleteNarrative struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteNarrative_DeleteNarrative) GetDeletedID() string {
	if t == nil {
		t = &DeleteNarrative_DeleteNarrative{}
	}
	return t.DeletedID
}

type GetAllNarratives_Narratives_Edges_Node struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Satisfies   *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllNarratives_Narratives_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetSatisfies() *string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.Satisfies
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllNarratives_Narratives_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllNarratives_Narratives_Edges struct {
	Node *GetAllNarratives_Narratives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllNarratives_Narratives_Edges) GetNode() *GetAllNarratives_Narratives_Edges_Node {
	if t == nil {
		t = &GetAllNarratives_Narratives_Edges{}
	}
	return t.Node
}

type GetAllNarratives_Narratives struct {
	Edges []*GetAllNarratives_Narratives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllNarratives_Narratives) GetEdges() []*GetAllNarratives_Narratives_Edges {
	if t == nil {
		t = &GetAllNarratives_Narratives{}
	}
	return t.Edges
}

type GetNarrativeByID_Narrative struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Satisfies   *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetNarrativeByID_Narrative) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.CreatedAt
}
func (t *GetNarrativeByID_Narrative) GetCreatedBy() *string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.CreatedBy
}
func (t *GetNarrativeByID_Narrative) GetDescription() *string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.Description
}
func (t *GetNarrativeByID_Narrative) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.Details
}
func (t *GetNarrativeByID_Narrative) GetID() string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.ID
}
func (t *GetNarrativeByID_Narrative) GetName() string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.Name
}
func (t *GetNarrativeByID_Narrative) GetSatisfies() *string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.Satisfies
}
func (t *GetNarrativeByID_Narrative) GetTags() []string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.Tags
}
func (t *GetNarrativeByID_Narrative) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.UpdatedAt
}
func (t *GetNarrativeByID_Narrative) GetUpdatedBy() *string {
	if t == nil {
		t = &GetNarrativeByID_Narrative{}
	}
	return t.UpdatedBy
}

type GetNarratives_Narratives_Edges_Node struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Satisfies   *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetNarratives_Narratives_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetNarratives_Narratives_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetNarratives_Narratives_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.Description
}
func (t *GetNarratives_Narratives_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.Details
}
func (t *GetNarratives_Narratives_Edges_Node) GetID() string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.ID
}
func (t *GetNarratives_Narratives_Edges_Node) GetName() string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.Name
}
func (t *GetNarratives_Narratives_Edges_Node) GetSatisfies() *string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.Satisfies
}
func (t *GetNarratives_Narratives_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.Tags
}
func (t *GetNarratives_Narratives_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetNarratives_Narratives_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetNarratives_Narratives_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetNarratives_Narratives_Edges struct {
	Node *GetNarratives_Narratives_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetNarratives_Narratives_Edges) GetNode() *GetNarratives_Narratives_Edges_Node {
	if t == nil {
		t = &GetNarratives_Narratives_Edges{}
	}
	return t.Node
}

type GetNarratives_Narratives struct {
	Edges []*GetNarratives_Narratives_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetNarratives_Narratives) GetEdges() []*GetNarratives_Narratives_Edges {
	if t == nil {
		t = &GetNarratives_Narratives{}
	}
	return t.Edges
}

type UpdateNarrative_UpdateNarrative_Narrative struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Satisfies   *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateNarrative_UpdateNarrative_Narrative) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.CreatedAt
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.CreatedBy
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetDescription() *string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.Description
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetDetails() map[string]interface{} {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.Details
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetID() string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.ID
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetName() string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.Name
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetSatisfies() *string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.Satisfies
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetTags() []string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.Tags
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.UpdatedAt
}
func (t *UpdateNarrative_UpdateNarrative_Narrative) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative_Narrative{}
	}
	return t.UpdatedBy
}

type UpdateNarrative_UpdateNarrative struct {
	Narrative UpdateNarrative_UpdateNarrative_Narrative "json:\"narrative\" graphql:\"narrative\""
}

func (t *UpdateNarrative_UpdateNarrative) GetNarrative() *UpdateNarrative_UpdateNarrative_Narrative {
	if t == nil {
		t = &UpdateNarrative_UpdateNarrative{}
	}
	return &t.Narrative
}

type GetAllNarrativeHistories_NarrativeHistories_Edges_Node struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	HistoryTime time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Operation   history.OpType         "json:\"operation\" graphql:\"operation\""
	Ref         *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Satisfies   *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetSatisfies() *string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Satisfies
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllNarrativeHistories_NarrativeHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllNarrativeHistories_NarrativeHistories_Edges struct {
	Node *GetAllNarrativeHistories_NarrativeHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllNarrativeHistories_NarrativeHistories_Edges) GetNode() *GetAllNarrativeHistories_NarrativeHistories_Edges_Node {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories_Edges{}
	}
	return t.Node
}

type GetAllNarrativeHistories_NarrativeHistories struct {
	Edges []*GetAllNarrativeHistories_NarrativeHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllNarrativeHistories_NarrativeHistories) GetEdges() []*GetAllNarrativeHistories_NarrativeHistories_Edges {
	if t == nil {
		t = &GetAllNarrativeHistories_NarrativeHistories{}
	}
	return t.Edges
}

type GetNarrativeHistories_NarrativeHistories_Edges_Node struct {
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	HistoryTime time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	Operation   history.OpType         "json:\"operation\" graphql:\"operation\""
	Ref         *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Satisfies   *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetSatisfies() *string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Satisfies
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetNarrativeHistories_NarrativeHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetNarrativeHistories_NarrativeHistories_Edges struct {
	Node *GetNarrativeHistories_NarrativeHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetNarrativeHistories_NarrativeHistories_Edges) GetNode() *GetNarrativeHistories_NarrativeHistories_Edges_Node {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories_Edges{}
	}
	return t.Node
}

type GetNarrativeHistories_NarrativeHistories struct {
	Edges []*GetNarrativeHistories_NarrativeHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetNarrativeHistories_NarrativeHistories) GetEdges() []*GetNarrativeHistories_NarrativeHistories_Edges {
	if t == nil {
		t = &GetNarrativeHistories_NarrativeHistories{}
	}
	return t.Edges
}

type GetAllNoteHistories_NoteHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	Text        string         "json:\"text\" graphql:\"text\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetText() string {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.Text
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllNoteHistories_NoteHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllNoteHistories_NoteHistories_Edges struct {
	Node *GetAllNoteHistories_NoteHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllNoteHistories_NoteHistories_Edges) GetNode() *GetAllNoteHistories_NoteHistories_Edges_Node {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories_Edges{}
	}
	return t.Node
}

type GetAllNoteHistories_NoteHistories struct {
	Edges []*GetAllNoteHistories_NoteHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllNoteHistories_NoteHistories) GetEdges() []*GetAllNoteHistories_NoteHistories_Edges {
	if t == nil {
		t = &GetAllNoteHistories_NoteHistories{}
	}
	return t.Edges
}

type GetNoteHistories_NoteHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string       "json:\"tags,omitempty\" graphql:\"tags\""
	Text        string         "json:\"text\" graphql:\"text\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetNoteHistories_NoteHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetText() string {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.Text
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetNoteHistories_NoteHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetNoteHistories_NoteHistories_Edges struct {
	Node *GetNoteHistories_NoteHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetNoteHistories_NoteHistories_Edges) GetNode() *GetNoteHistories_NoteHistories_Edges_Node {
	if t == nil {
		t = &GetNoteHistories_NoteHistories_Edges{}
	}
	return t.Node
}

type GetNoteHistories_NoteHistories struct {
	Edges []*GetNoteHistories_NoteHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetNoteHistories_NoteHistories) GetEdges() []*GetNoteHistories_NoteHistories_Edges {
	if t == nil {
		t = &GetNoteHistories_NoteHistories{}
	}
	return t.Edges
}

type GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node struct {
	AuthStyle    string         "json:\"authStyle\" graphql:\"authStyle\""
	AuthURL      string         "json:\"authURL\" graphql:\"authURL\""
	ClientID     string         "json:\"clientID\" graphql:\"clientID\""
	ClientSecret string         "json:\"clientSecret\" graphql:\"clientSecret\""
	CreatedAt    *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime  time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID           string         "json:\"id\" graphql:\"id\""
	InfoURL      string         "json:\"infoURL\" graphql:\"infoURL\""
	Name         string         "json:\"name\" graphql:\"name\""
	Operation    history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID      *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RedirectURL  string         "json:\"redirectURL\" graphql:\"redirectURL\""
	Ref          *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Scopes       string         "json:\"scopes\" graphql:\"scopes\""
	Tags         []string       "json:\"tags,omitempty\" graphql:\"tags\""
	TokenURL     string         "json:\"tokenURL\" graphql:\"tokenURL\""
	UpdatedAt    *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetAuthStyle() string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.AuthStyle
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetAuthURL() string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.AuthURL
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetClientID() string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.ClientID
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetClientSecret() string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.ClientSecret
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetInfoURL() string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.InfoURL
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetRedirectURL() string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.RedirectURL
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetScopes() string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.Scopes
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetTokenURL() string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.TokenURL
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllOauthProviderHistories_OauthProviderHistories_Edges struct {
	Node *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges) GetNode() *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges{}
	}
	return t.Node
}

type GetAllOauthProviderHistories_OauthProviderHistories struct {
	Edges []*GetAllOauthProviderHistories_OauthProviderHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllOauthProviderHistories_OauthProviderHistories) GetEdges() []*GetAllOauthProviderHistories_OauthProviderHistories_Edges {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories{}
	}
	return t.Edges
}

type GetOauthProviderHistories_OauthProviderHistories_Edges_Node struct {
	AuthStyle    string         "json:\"authStyle\" graphql:\"authStyle\""
	AuthURL      string         "json:\"authURL\" graphql:\"authURL\""
	ClientID     string         "json:\"clientID\" graphql:\"clientID\""
	ClientSecret string         "json:\"clientSecret\" graphql:\"clientSecret\""
	CreatedAt    *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime  time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID           string         "json:\"id\" graphql:\"id\""
	InfoURL      string         "json:\"infoURL\" graphql:\"infoURL\""
	Name         string         "json:\"name\" graphql:\"name\""
	Operation    history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID      *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RedirectURL  string         "json:\"redirectURL\" graphql:\"redirectURL\""
	Ref          *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Scopes       string         "json:\"scopes\" graphql:\"scopes\""
	Tags         []string       "json:\"tags,omitempty\" graphql:\"tags\""
	TokenURL     string         "json:\"tokenURL\" graphql:\"tokenURL\""
	UpdatedAt    *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetAuthStyle() string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.AuthStyle
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetAuthURL() string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.AuthURL
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetClientID() string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.ClientID
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetClientSecret() string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.ClientSecret
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetInfoURL() string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.InfoURL
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetRedirectURL() string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.RedirectURL
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetScopes() string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.Scopes
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetTokenURL() string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.TokenURL
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetOauthProviderHistories_OauthProviderHistories_Edges struct {
	Node *GetOauthProviderHistories_OauthProviderHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOauthProviderHistories_OauthProviderHistories_Edges) GetNode() *GetOauthProviderHistories_OauthProviderHistories_Edges_Node {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges{}
	}
	return t.Node
}

type GetOauthProviderHistories_OauthProviderHistories struct {
	Edges []*GetOauthProviderHistories_OauthProviderHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOauthProviderHistories_OauthProviderHistories) GetEdges() []*GetOauthProviderHistories_OauthProviderHistories_Edges {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories{}
	}
	return t.Edges
}

type CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens_Integration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens_Integration) GetID() string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens_Integration{}
	}
	return t.ID
}

type CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens_Events) GetID() string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens_Events{}
	}
	return t.ID
}

type CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens struct {
	ClaimsEmail             string                                                                                 "json:\"claimsEmail\" graphql:\"claimsEmail\""
	ClaimsEmailVerified     bool                                                                                   "json:\"claimsEmailVerified\" graphql:\"claimsEmailVerified\""
	ClaimsGroups            []string                                                                               "json:\"claimsGroups,omitempty\" graphql:\"claimsGroups\""
	ClaimsPreferredUsername string                                                                                 "json:\"claimsPreferredUsername\" graphql:\"claimsPreferredUsername\""
	ClaimsUserID            string                                                                                 "json:\"claimsUserID\" graphql:\"claimsUserID\""
	ClaimsUsername          string                                                                                 "json:\"claimsUsername\" graphql:\"claimsUsername\""
	ClientID                string                                                                                 "json:\"clientID\" graphql:\"clientID\""
	ConnectorData           []string                                                                               "json:\"connectorData,omitempty\" graphql:\"connectorData\""
	ConnectorID             string                                                                                 "json:\"connectorID\" graphql:\"connectorID\""
	ID                      string                                                                                 "json:\"id\" graphql:\"id\""
	LastUsed                time.Time                                                                              "json:\"lastUsed\" graphql:\"lastUsed\""
	Nonce                   string                                                                                 "json:\"nonce\" graphql:\"nonce\""
	Scopes                  []string                                                                               "json:\"scopes,omitempty\" graphql:\"scopes\""
	Integration             []*CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens_Integration "json:\"integration,omitempty\" graphql:\"integration\""
	Events                  []*CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens_Events      "json:\"events,omitempty\" graphql:\"events\""
}

func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetClaimsEmail() string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsEmail
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetClaimsEmailVerified() bool {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsEmailVerified
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetClaimsGroups() []string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsGroups
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetClaimsPreferredUsername() string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsPreferredUsername
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetClaimsUserID() string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsUserID
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetClaimsUsername() string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsUsername
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetClientID() string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClientID
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetConnectorData() []string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ConnectorData
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetConnectorID() string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ConnectorID
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetID() string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ID
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetLastUsed() *time.Time {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return &t.LastUsed
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetNonce() string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.Nonce
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetScopes() []string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.Scopes
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetIntegration() []*CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens_Integration {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.Integration
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetEvents() []*CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens_Events {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.Events
}

type CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken struct {
	OhAuthTooTokens []*CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens "json:\"ohAuthTooTokens,omitempty\" graphql:\"ohAuthTooTokens\""
}

func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken) GetOhAuthTooTokens() []*CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken{}
	}
	return t.OhAuthTooTokens
}

type CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens_Integration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens_Integration) GetID() string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens_Integration{}
	}
	return t.ID
}

type CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens_Events) GetID() string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens_Events{}
	}
	return t.ID
}

type CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens struct {
	ClaimsEmail             string                                                                           "json:\"claimsEmail\" graphql:\"claimsEmail\""
	ClaimsEmailVerified     bool                                                                             "json:\"claimsEmailVerified\" graphql:\"claimsEmailVerified\""
	ClaimsGroups            []string                                                                         "json:\"claimsGroups,omitempty\" graphql:\"claimsGroups\""
	ClaimsPreferredUsername string                                                                           "json:\"claimsPreferredUsername\" graphql:\"claimsPreferredUsername\""
	ClaimsUserID            string                                                                           "json:\"claimsUserID\" graphql:\"claimsUserID\""
	ClaimsUsername          string                                                                           "json:\"claimsUsername\" graphql:\"claimsUsername\""
	ClientID                string                                                                           "json:\"clientID\" graphql:\"clientID\""
	ConnectorData           []string                                                                         "json:\"connectorData,omitempty\" graphql:\"connectorData\""
	ConnectorID             string                                                                           "json:\"connectorID\" graphql:\"connectorID\""
	ID                      string                                                                           "json:\"id\" graphql:\"id\""
	LastUsed                time.Time                                                                        "json:\"lastUsed\" graphql:\"lastUsed\""
	Nonce                   string                                                                           "json:\"nonce\" graphql:\"nonce\""
	Scopes                  []string                                                                         "json:\"scopes,omitempty\" graphql:\"scopes\""
	Integration             []*CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens_Integration "json:\"integration,omitempty\" graphql:\"integration\""
	Events                  []*CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens_Events      "json:\"events,omitempty\" graphql:\"events\""
}

func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetClaimsEmail() string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsEmail
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetClaimsEmailVerified() bool {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsEmailVerified
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetClaimsGroups() []string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsGroups
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetClaimsPreferredUsername() string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsPreferredUsername
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetClaimsUserID() string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsUserID
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetClaimsUsername() string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsUsername
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetClientID() string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClientID
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetConnectorData() []string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ConnectorData
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetConnectorID() string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ConnectorID
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetID() string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ID
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetLastUsed() *time.Time {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return &t.LastUsed
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetNonce() string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.Nonce
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetScopes() []string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.Scopes
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetIntegration() []*CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens_Integration {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.Integration
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetEvents() []*CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens_Events {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.Events
}

type CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken struct {
	OhAuthTooTokens []*CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens "json:\"ohAuthTooTokens,omitempty\" graphql:\"ohAuthTooTokens\""
}

func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken) GetOhAuthTooTokens() []*CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken{}
	}
	return t.OhAuthTooTokens
}

type CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken_Integration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken_Integration) GetID() string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken_Integration{}
	}
	return t.ID
}

type CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken_Events) GetID() string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken_Events{}
	}
	return t.ID
}

type CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken struct {
	ClaimsEmail             string                                                                  "json:\"claimsEmail\" graphql:\"claimsEmail\""
	ClaimsEmailVerified     bool                                                                    "json:\"claimsEmailVerified\" graphql:\"claimsEmailVerified\""
	ClaimsGroups            []string                                                                "json:\"claimsGroups,omitempty\" graphql:\"claimsGroups\""
	ClaimsPreferredUsername string                                                                  "json:\"claimsPreferredUsername\" graphql:\"claimsPreferredUsername\""
	ClaimsUserID            string                                                                  "json:\"claimsUserID\" graphql:\"claimsUserID\""
	ClaimsUsername          string                                                                  "json:\"claimsUsername\" graphql:\"claimsUsername\""
	ClientID                string                                                                  "json:\"clientID\" graphql:\"clientID\""
	ConnectorData           []string                                                                "json:\"connectorData,omitempty\" graphql:\"connectorData\""
	ConnectorID             string                                                                  "json:\"connectorID\" graphql:\"connectorID\""
	ID                      string                                                                  "json:\"id\" graphql:\"id\""
	LastUsed                time.Time                                                               "json:\"lastUsed\" graphql:\"lastUsed\""
	Nonce                   string                                                                  "json:\"nonce\" graphql:\"nonce\""
	Scopes                  []string                                                                "json:\"scopes,omitempty\" graphql:\"scopes\""
	Integration             []*CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken_Integration "json:\"integration,omitempty\" graphql:\"integration\""
	Events                  []*CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken_Events      "json:\"events,omitempty\" graphql:\"events\""
}

func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetClaimsEmail() string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsEmail
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetClaimsEmailVerified() bool {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsEmailVerified
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetClaimsGroups() []string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsGroups
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetClaimsPreferredUsername() string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsPreferredUsername
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetClaimsUserID() string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsUserID
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetClaimsUsername() string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsUsername
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetClientID() string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClientID
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetConnectorData() []string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ConnectorData
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetConnectorID() string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ConnectorID
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetID() string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ID
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetLastUsed() *time.Time {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return &t.LastUsed
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetNonce() string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.Nonce
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetScopes() []string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.Scopes
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetIntegration() []*CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken_Integration {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.Integration
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetEvents() []*CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken_Events {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.Events
}

type CreateOhAuthTooToken_CreateOhAuthTooToken struct {
	OhAuthTooToken CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken "json:\"ohAuthTooToken\" graphql:\"ohAuthTooToken\""
}

func (t *CreateOhAuthTooToken_CreateOhAuthTooToken) GetOhAuthTooToken() *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken{}
	}
	return &t.OhAuthTooToken
}

type DeleteOhAuthTooToken_DeleteOhAuthTooToken struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteOhAuthTooToken_DeleteOhAuthTooToken) GetDeletedID() string {
	if t == nil {
		t = &DeleteOhAuthTooToken_DeleteOhAuthTooToken{}
	}
	return t.DeletedID
}

type GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node_Integration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node_Integration) GetID() string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node_Integration{}
	}
	return t.ID
}

type GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node_Events) GetID() string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node_Events{}
	}
	return t.ID
}

type GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node struct {
	ClaimsEmail             string                                                       "json:\"claimsEmail\" graphql:\"claimsEmail\""
	ClaimsEmailVerified     bool                                                         "json:\"claimsEmailVerified\" graphql:\"claimsEmailVerified\""
	ClaimsGroups            []string                                                     "json:\"claimsGroups,omitempty\" graphql:\"claimsGroups\""
	ClaimsPreferredUsername string                                                       "json:\"claimsPreferredUsername\" graphql:\"claimsPreferredUsername\""
	ClaimsUserID            string                                                       "json:\"claimsUserID\" graphql:\"claimsUserID\""
	ClaimsUsername          string                                                       "json:\"claimsUsername\" graphql:\"claimsUsername\""
	ClientID                string                                                       "json:\"clientID\" graphql:\"clientID\""
	ConnectorData           []string                                                     "json:\"connectorData,omitempty\" graphql:\"connectorData\""
	ConnectorID             string                                                       "json:\"connectorID\" graphql:\"connectorID\""
	ID                      string                                                       "json:\"id\" graphql:\"id\""
	LastUsed                time.Time                                                    "json:\"lastUsed\" graphql:\"lastUsed\""
	Nonce                   string                                                       "json:\"nonce\" graphql:\"nonce\""
	Scopes                  []string                                                     "json:\"scopes,omitempty\" graphql:\"scopes\""
	Integration             []*GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node_Integration "json:\"integration,omitempty\" graphql:\"integration\""
	Events                  []*GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node_Events      "json:\"events,omitempty\" graphql:\"events\""
}

func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetClaimsEmail() string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.ClaimsEmail
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetClaimsEmailVerified() bool {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.ClaimsEmailVerified
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetClaimsGroups() []string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.ClaimsGroups
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetClaimsPreferredUsername() string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.ClaimsPreferredUsername
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetClaimsUserID() string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.ClaimsUserID
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetClaimsUsername() string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.ClaimsUsername
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetClientID() string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.ClientID
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetConnectorData() []string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.ConnectorData
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetConnectorID() string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.ConnectorID
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.ID
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetLastUsed() *time.Time {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return &t.LastUsed
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetNonce() string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.Nonce
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetScopes() []string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.Scopes
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetIntegration() []*GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node_Integration {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.Integration
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetEvents() []*GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node_Events {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.Events
}

type GetOhAuthTooTokens_OhAuthTooTokens_Edges struct {
	Node *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges) GetNode() *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges{}
	}
	return t.Node
}

type GetOhAuthTooTokens_OhAuthTooTokens struct {
	Edges []*GetOhAuthTooTokens_OhAuthTooTokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOhAuthTooTokens_OhAuthTooTokens) GetEdges() []*GetOhAuthTooTokens_OhAuthTooTokens_Edges {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens{}
	}
	return t.Edges
}

type UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken_Integration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken_Integration) GetID() string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken_Integration{}
	}
	return t.ID
}

type UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken_Events) GetID() string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken_Events{}
	}
	return t.ID
}

type UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken struct {
	ClaimsEmail             string                                                                  "json:\"claimsEmail\" graphql:\"claimsEmail\""
	ClaimsEmailVerified     bool                                                                    "json:\"claimsEmailVerified\" graphql:\"claimsEmailVerified\""
	ClaimsGroups            []string                                                                "json:\"claimsGroups,omitempty\" graphql:\"claimsGroups\""
	ClaimsPreferredUsername string                                                                  "json:\"claimsPreferredUsername\" graphql:\"claimsPreferredUsername\""
	ClaimsUserID            string                                                                  "json:\"claimsUserID\" graphql:\"claimsUserID\""
	ClaimsUsername          string                                                                  "json:\"claimsUsername\" graphql:\"claimsUsername\""
	ClientID                string                                                                  "json:\"clientID\" graphql:\"clientID\""
	ConnectorData           []string                                                                "json:\"connectorData,omitempty\" graphql:\"connectorData\""
	ConnectorID             string                                                                  "json:\"connectorID\" graphql:\"connectorID\""
	ID                      string                                                                  "json:\"id\" graphql:\"id\""
	LastUsed                time.Time                                                               "json:\"lastUsed\" graphql:\"lastUsed\""
	Nonce                   string                                                                  "json:\"nonce\" graphql:\"nonce\""
	Scopes                  []string                                                                "json:\"scopes,omitempty\" graphql:\"scopes\""
	Integration             []*UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken_Integration "json:\"integration,omitempty\" graphql:\"integration\""
	Events                  []*UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken_Events      "json:\"events,omitempty\" graphql:\"events\""
}

func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetClaimsEmail() string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsEmail
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetClaimsEmailVerified() bool {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsEmailVerified
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetClaimsGroups() []string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsGroups
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetClaimsPreferredUsername() string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsPreferredUsername
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetClaimsUserID() string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsUserID
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetClaimsUsername() string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsUsername
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetClientID() string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClientID
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetConnectorData() []string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ConnectorData
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetConnectorID() string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ConnectorID
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetID() string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ID
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetLastUsed() *time.Time {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return &t.LastUsed
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetNonce() string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.Nonce
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetScopes() []string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.Scopes
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetIntegration() []*UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken_Integration {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.Integration
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetEvents() []*UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken_Events {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.Events
}

type UpdateOhAuthTooToken_UpdateOhAuthTooToken struct {
	OhAuthTooToken UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken "json:\"ohAuthTooToken\" graphql:\"ohAuthTooToken\""
}

func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken) GetOhAuthTooToken() *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken{}
	}
	return &t.OhAuthTooToken
}

type CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations struct {
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	DisplayName string   "json:\"displayName\" graphql:\"displayName\""
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	PersonalOrg *bool    "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations) GetID() string {
	if t == nil {
		t = &CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations{}
	}
	return t.ID
}
func (t *CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations) GetName() string {
	if t == nil {
		t = &CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations{}
	}
	return t.Name
}
func (t *CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations{}
	}
	return t.DisplayName
}
func (t *CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations{}
	}
	return t.Description
}
func (t *CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations) GetPersonalOrg() *bool {
	if t == nil {
		t = &CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations{}
	}
	return t.PersonalOrg
}
func (t *CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations{}
	}
	return t.Tags
}

type CreateBulkCSVOrganization_CreateBulkCSVOrganization struct {
	Organizations []*CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
}

func (t *CreateBulkCSVOrganization_CreateBulkCSVOrganization) GetOrganizations() []*CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations {
	if t == nil {
		t = &CreateBulkCSVOrganization_CreateBulkCSVOrganization{}
	}
	return t.Organizations
}

type CreateBulkOrganization_CreateBulkOrganization_Organizations struct {
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	DisplayName string   "json:\"displayName\" graphql:\"displayName\""
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	PersonalOrg *bool    "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *CreateBulkOrganization_CreateBulkOrganization_Organizations) GetID() string {
	if t == nil {
		t = &CreateBulkOrganization_CreateBulkOrganization_Organizations{}
	}
	return t.ID
}
func (t *CreateBulkOrganization_CreateBulkOrganization_Organizations) GetName() string {
	if t == nil {
		t = &CreateBulkOrganization_CreateBulkOrganization_Organizations{}
	}
	return t.Name
}
func (t *CreateBulkOrganization_CreateBulkOrganization_Organizations) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkOrganization_CreateBulkOrganization_Organizations{}
	}
	return t.DisplayName
}
func (t *CreateBulkOrganization_CreateBulkOrganization_Organizations) GetDescription() *string {
	if t == nil {
		t = &CreateBulkOrganization_CreateBulkOrganization_Organizations{}
	}
	return t.Description
}
func (t *CreateBulkOrganization_CreateBulkOrganization_Organizations) GetPersonalOrg() *bool {
	if t == nil {
		t = &CreateBulkOrganization_CreateBulkOrganization_Organizations{}
	}
	return t.PersonalOrg
}
func (t *CreateBulkOrganization_CreateBulkOrganization_Organizations) GetTags() []string {
	if t == nil {
		t = &CreateBulkOrganization_CreateBulkOrganization_Organizations{}
	}
	return t.Tags
}

type CreateBulkOrganization_CreateBulkOrganization struct {
	Organizations []*CreateBulkOrganization_CreateBulkOrganization_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
}

func (t *CreateBulkOrganization_CreateBulkOrganization) GetOrganizations() []*CreateBulkOrganization_CreateBulkOrganization_Organizations {
	if t == nil {
		t = &CreateBulkOrganization_CreateBulkOrganization{}
	}
	return t.Organizations
}

type CreateOrganization_CreateOrganization_Organization_Setting struct {
	ID             string        "json:\"id\" graphql:\"id\""
	CreatedAt      *time.Time    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt      *time.Time    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy      *string       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy      *string       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Domains        []string      "json:\"domains,omitempty\" graphql:\"domains\""
	BillingContact *string       "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string       "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string       "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	BillingAddress *string       "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	TaxIdentifier  *string       "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	GeoLocation    *enums.Region "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	Tags           []string      "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetID() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.ID
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.CreatedAt
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.UpdatedAt
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.CreatedBy
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.UpdatedBy
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetDomains() []string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.Domains
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetBillingContact() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.BillingContact
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetBillingEmail() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.BillingEmail
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetBillingPhone() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.BillingPhone
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetBillingAddress() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.BillingAddress
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetTaxIdentifier() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.TaxIdentifier
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.GeoLocation
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetTags() []string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.Tags
}

type CreateOrganization_CreateOrganization_Organization_Parent struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateOrganization_CreateOrganization_Organization_Parent) GetID() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Parent{}
	}
	return t.ID
}
func (t *CreateOrganization_CreateOrganization_Organization_Parent) GetName() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Parent{}
	}
	return t.Name
}

type CreateOrganization_CreateOrganization_Organization_Children_Edges_Node struct {
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Description *string "json:\"description,omitempty\" graphql:\"description\""
}

func (t *CreateOrganization_CreateOrganization_Organization_Children_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Children_Edges_Node{}
	}
	return t.ID
}
func (t *CreateOrganization_CreateOrganization_Organization_Children_Edges_Node) GetName() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Children_Edges_Node{}
	}
	return t.Name
}
func (t *CreateOrganization_CreateOrganization_Organization_Children_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Children_Edges_Node{}
	}
	return t.DisplayName
}
func (t *CreateOrganization_CreateOrganization_Organization_Children_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Children_Edges_Node{}
	}
	return t.Description
}

type CreateOrganization_CreateOrganization_Organization_Children_Edges struct {
	Node *CreateOrganization_CreateOrganization_Organization_Children_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateOrganization_CreateOrganization_Organization_Children_Edges) GetNode() *CreateOrganization_CreateOrganization_Organization_Children_Edges_Node {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Children_Edges{}
	}
	return t.Node
}

type CreateOrganization_CreateOrganization_Organization_Children struct {
	Edges []*CreateOrganization_CreateOrganization_Organization_Children_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateOrganization_CreateOrganization_Organization_Children) GetEdges() []*CreateOrganization_CreateOrganization_Organization_Children_Edges {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Children{}
	}
	return t.Edges
}

type CreateOrganization_CreateOrganization_Organization struct {
	ID          string                                                      "json:\"id\" graphql:\"id\""
	Name        string                                                      "json:\"name\" graphql:\"name\""
	DisplayName string                                                      "json:\"displayName\" graphql:\"displayName\""
	Description *string                                                     "json:\"description,omitempty\" graphql:\"description\""
	PersonalOrg *bool                                                       "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Tags        []string                                                    "json:\"tags,omitempty\" graphql:\"tags\""
	CreatedAt   *time.Time                                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt   *time.Time                                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Setting     *CreateOrganization_CreateOrganization_Organization_Setting "json:\"setting,omitempty\" graphql:\"setting\""
	Parent      *CreateOrganization_CreateOrganization_Organization_Parent  "json:\"parent,omitempty\" graphql:\"parent\""
	Children    CreateOrganization_CreateOrganization_Organization_Children "json:\"children\" graphql:\"children\""
}

func (t *CreateOrganization_CreateOrganization_Organization) GetID() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.ID
}
func (t *CreateOrganization_CreateOrganization_Organization) GetName() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.Name
}
func (t *CreateOrganization_CreateOrganization_Organization) GetDisplayName() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.DisplayName
}
func (t *CreateOrganization_CreateOrganization_Organization) GetDescription() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.Description
}
func (t *CreateOrganization_CreateOrganization_Organization) GetPersonalOrg() *bool {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.PersonalOrg
}
func (t *CreateOrganization_CreateOrganization_Organization) GetTags() []string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.Tags
}
func (t *CreateOrganization_CreateOrganization_Organization) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.CreatedAt
}
func (t *CreateOrganization_CreateOrganization_Organization) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.UpdatedAt
}
func (t *CreateOrganization_CreateOrganization_Organization) GetSetting() *CreateOrganization_CreateOrganization_Organization_Setting {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.Setting
}
func (t *CreateOrganization_CreateOrganization_Organization) GetParent() *CreateOrganization_CreateOrganization_Organization_Parent {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.Parent
}
func (t *CreateOrganization_CreateOrganization_Organization) GetChildren() *CreateOrganization_CreateOrganization_Organization_Children {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return &t.Children
}

type CreateOrganization_CreateOrganization struct {
	Organization CreateOrganization_CreateOrganization_Organization "json:\"organization\" graphql:\"organization\""
}

func (t *CreateOrganization_CreateOrganization) GetOrganization() *CreateOrganization_CreateOrganization_Organization {
	if t == nil {
		t = &CreateOrganization_CreateOrganization{}
	}
	return &t.Organization
}

type DeleteOrganization_DeleteOrganization struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteOrganization_DeleteOrganization) GetDeletedID() string {
	if t == nil {
		t = &DeleteOrganization_DeleteOrganization{}
	}
	return t.DeletedID
}

type GetAllOrganizations_Organizations_Edges_Node_Parent struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Parent) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Parent{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Parent) GetName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Parent{}
	}
	return t.Name
}

type GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node struct {
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Description *string "json:\"description,omitempty\" graphql:\"description\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.Description
}

type GetAllOrganizations_Organizations_Edges_Node_Children_Edges struct {
	Node *GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Children_Edges) GetNode() *GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Children_Edges{}
	}
	return t.Node
}

type GetAllOrganizations_Organizations_Edges_Node_Children struct {
	Edges []*GetAllOrganizations_Organizations_Edges_Node_Children_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Children) GetEdges() []*GetAllOrganizations_Organizations_Edges_Node_Children_Edges {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Children{}
	}
	return t.Edges
}

type GetAllOrganizations_Organizations_Edges_Node_Members_User struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Members_User) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Members_User{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Members_User) GetFirstName() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Members_User{}
	}
	return t.FirstName
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Members_User) GetLastName() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Members_User{}
	}
	return t.LastName
}

type GetAllOrganizations_Organizations_Edges_Node_Members struct {
	ID   string                                                    "json:\"id\" graphql:\"id\""
	Role enums.Role                                                "json:\"role\" graphql:\"role\""
	User GetAllOrganizations_Organizations_Edges_Node_Members_User "json:\"user\" graphql:\"user\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Members) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Members{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Members) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Members{}
	}
	return &t.Role
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Members) GetUser() *GetAllOrganizations_Organizations_Edges_Node_Members_User {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Members{}
	}
	return &t.User
}

type GetAllOrganizations_Organizations_Edges_Node_Setting struct {
	ID             string        "json:\"id\" graphql:\"id\""
	CreatedAt      *time.Time    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt      *time.Time    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy      *string       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy      *string       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Domains        []string      "json:\"domains,omitempty\" graphql:\"domains\""
	BillingContact *string       "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string       "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string       "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	BillingAddress *string       "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	TaxIdentifier  *string       "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	GeoLocation    *enums.Region "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	Tags           []string      "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.CreatedAt
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.CreatedBy
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.UpdatedBy
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetDomains() []string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.Domains
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetBillingContact() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingContact
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetBillingEmail() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingEmail
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetBillingPhone() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingPhone
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetBillingAddress() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingAddress
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.TaxIdentifier
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.GeoLocation
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetTags() []string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.Tags
}

type GetAllOrganizations_Organizations_Edges_Node struct {
	ID          string                                                  "json:\"id\" graphql:\"id\""
	Name        string                                                  "json:\"name\" graphql:\"name\""
	DisplayName string                                                  "json:\"displayName\" graphql:\"displayName\""
	Description *string                                                 "json:\"description,omitempty\" graphql:\"description\""
	PersonalOrg *bool                                                   "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Tags        []string                                                "json:\"tags,omitempty\" graphql:\"tags\""
	Parent      *GetAllOrganizations_Organizations_Edges_Node_Parent    "json:\"parent,omitempty\" graphql:\"parent\""
	Children    GetAllOrganizations_Organizations_Edges_Node_Children   "json:\"children\" graphql:\"children\""
	Members     []*GetAllOrganizations_Organizations_Edges_Node_Members "json:\"members,omitempty\" graphql:\"members\""
	Setting     *GetAllOrganizations_Organizations_Edges_Node_Setting   "json:\"setting,omitempty\" graphql:\"setting\""
	CreatedAt   *time.Time                                              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt   *time.Time                                              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.PersonalOrg
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetParent() *GetAllOrganizations_Organizations_Edges_Node_Parent {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Parent
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetChildren() *GetAllOrganizations_Organizations_Edges_Node_Children {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return &t.Children
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetMembers() []*GetAllOrganizations_Organizations_Edges_Node_Members {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Members
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetSetting() *GetAllOrganizations_Organizations_Edges_Node_Setting {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Setting
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.UpdatedAt
}

type GetAllOrganizations_Organizations_Edges struct {
	Node *GetAllOrganizations_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrganizations_Organizations_Edges) GetNode() *GetAllOrganizations_Organizations_Edges_Node {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges{}
	}
	return t.Node
}

type GetAllOrganizations_Organizations struct {
	Edges []*GetAllOrganizations_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllOrganizations_Organizations) GetEdges() []*GetAllOrganizations_Organizations_Edges {
	if t == nil {
		t = &GetAllOrganizations_Organizations{}
	}
	return t.Edges
}

type GetOrganizationByID_Organization_Parent struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizationByID_Organization_Parent) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Parent{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_Parent) GetName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Parent{}
	}
	return t.Name
}

type GetOrganizationByID_Organization_Children_Edges_Node struct {
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Description *string "json:\"description,omitempty\" graphql:\"description\""
}

func (t *GetOrganizationByID_Organization_Children_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Children_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_Children_Edges_Node) GetName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Children_Edges_Node{}
	}
	return t.Name
}
func (t *GetOrganizationByID_Organization_Children_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Children_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetOrganizationByID_Organization_Children_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Children_Edges_Node{}
	}
	return t.Description
}

type GetOrganizationByID_Organization_Children_Edges struct {
	Node *GetOrganizationByID_Organization_Children_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizationByID_Organization_Children_Edges) GetNode() *GetOrganizationByID_Organization_Children_Edges_Node {
	if t == nil {
		t = &GetOrganizationByID_Organization_Children_Edges{}
	}
	return t.Node
}

type GetOrganizationByID_Organization_Children struct {
	Edges []*GetOrganizationByID_Organization_Children_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrganizationByID_Organization_Children) GetEdges() []*GetOrganizationByID_Organization_Children_Edges {
	if t == nil {
		t = &GetOrganizationByID_Organization_Children{}
	}
	return t.Edges
}

type GetOrganizationByID_Organization_Members_User struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetOrganizationByID_Organization_Members_User) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Members_User{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_Members_User) GetFirstName() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Members_User{}
	}
	return t.FirstName
}
func (t *GetOrganizationByID_Organization_Members_User) GetLastName() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Members_User{}
	}
	return t.LastName
}

type GetOrganizationByID_Organization_Members struct {
	ID   string                                        "json:\"id\" graphql:\"id\""
	Role enums.Role                                    "json:\"role\" graphql:\"role\""
	User GetOrganizationByID_Organization_Members_User "json:\"user\" graphql:\"user\""
}

func (t *GetOrganizationByID_Organization_Members) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Members{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_Members) GetRole() *enums.Role {
	if t == nil {
		t = &GetOrganizationByID_Organization_Members{}
	}
	return &t.Role
}
func (t *GetOrganizationByID_Organization_Members) GetUser() *GetOrganizationByID_Organization_Members_User {
	if t == nil {
		t = &GetOrganizationByID_Organization_Members{}
	}
	return &t.User
}

type GetOrganizationByID_Organization_Setting struct {
	ID             string        "json:\"id\" graphql:\"id\""
	CreatedAt      *time.Time    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt      *time.Time    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy      *string       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy      *string       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Domains        []string      "json:\"domains,omitempty\" graphql:\"domains\""
	BillingContact *string       "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string       "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string       "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	BillingAddress *string       "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	TaxIdentifier  *string       "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	GeoLocation    *enums.Region "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	Tags           []string      "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GetOrganizationByID_Organization_Setting) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.CreatedAt
}
func (t *GetOrganizationByID_Organization_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizationByID_Organization_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationByID_Organization_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.UpdatedBy
}
func (t *GetOrganizationByID_Organization_Setting) GetDomains() []string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.Domains
}
func (t *GetOrganizationByID_Organization_Setting) GetBillingContact() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.BillingContact
}
func (t *GetOrganizationByID_Organization_Setting) GetBillingEmail() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.BillingEmail
}
func (t *GetOrganizationByID_Organization_Setting) GetBillingPhone() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.BillingPhone
}
func (t *GetOrganizationByID_Organization_Setting) GetBillingAddress() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.BillingAddress
}
func (t *GetOrganizationByID_Organization_Setting) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.TaxIdentifier
}
func (t *GetOrganizationByID_Organization_Setting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.GeoLocation
}
func (t *GetOrganizationByID_Organization_Setting) GetTags() []string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.Tags
}

type GetOrganizationByID_Organization struct {
	ID          string                                      "json:\"id\" graphql:\"id\""
	Name        string                                      "json:\"name\" graphql:\"name\""
	DisplayName string                                      "json:\"displayName\" graphql:\"displayName\""
	Description *string                                     "json:\"description,omitempty\" graphql:\"description\""
	PersonalOrg *bool                                       "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Tags        []string                                    "json:\"tags,omitempty\" graphql:\"tags\""
	Parent      *GetOrganizationByID_Organization_Parent    "json:\"parent,omitempty\" graphql:\"parent\""
	Children    GetOrganizationByID_Organization_Children   "json:\"children\" graphql:\"children\""
	Members     []*GetOrganizationByID_Organization_Members "json:\"members,omitempty\" graphql:\"members\""
	Setting     *GetOrganizationByID_Organization_Setting   "json:\"setting,omitempty\" graphql:\"setting\""
	CreatedAt   *time.Time                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt   *time.Time                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrganizationByID_Organization) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization) GetName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Name
}
func (t *GetOrganizationByID_Organization) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.DisplayName
}
func (t *GetOrganizationByID_Organization) GetDescription() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Description
}
func (t *GetOrganizationByID_Organization) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.PersonalOrg
}
func (t *GetOrganizationByID_Organization) GetTags() []string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Tags
}
func (t *GetOrganizationByID_Organization) GetParent() *GetOrganizationByID_Organization_Parent {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Parent
}
func (t *GetOrganizationByID_Organization) GetChildren() *GetOrganizationByID_Organization_Children {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return &t.Children
}
func (t *GetOrganizationByID_Organization) GetMembers() []*GetOrganizationByID_Organization_Members {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Members
}
func (t *GetOrganizationByID_Organization) GetSetting() *GetOrganizationByID_Organization_Setting {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Setting
}
func (t *GetOrganizationByID_Organization) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.CreatedAt
}
func (t *GetOrganizationByID_Organization) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationByID_Organization) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizationByID_Organization) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.UpdatedBy
}

type GetOrganizations_Organizations_Edges_Node_Parent struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Parent) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Parent{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_Parent) GetName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Parent{}
	}
	return t.Name
}

type GetOrganizations_Organizations_Edges_Node_Children_Edges_Node struct {
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Description *string "json:\"description,omitempty\" graphql:\"description\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.Name
}
func (t *GetOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.Description
}

type GetOrganizations_Organizations_Edges_Node_Children_Edges struct {
	Node *GetOrganizations_Organizations_Edges_Node_Children_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Children_Edges) GetNode() *GetOrganizations_Organizations_Edges_Node_Children_Edges_Node {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Children_Edges{}
	}
	return t.Node
}

type GetOrganizations_Organizations_Edges_Node_Children struct {
	Edges []*GetOrganizations_Organizations_Edges_Node_Children_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Children) GetEdges() []*GetOrganizations_Organizations_Edges_Node_Children_Edges {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Children{}
	}
	return t.Edges
}

type GetOrganizations_Organizations_Edges_Node_Members_User struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Members_User) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Members_User{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_Members_User) GetFirstName() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Members_User{}
	}
	return t.FirstName
}
func (t *GetOrganizations_Organizations_Edges_Node_Members_User) GetLastName() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Members_User{}
	}
	return t.LastName
}

type GetOrganizations_Organizations_Edges_Node_Members struct {
	ID   string                                                 "json:\"id\" graphql:\"id\""
	Role enums.Role                                             "json:\"role\" graphql:\"role\""
	User GetOrganizations_Organizations_Edges_Node_Members_User "json:\"user\" graphql:\"user\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Members) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Members{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_Members) GetRole() *enums.Role {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Members{}
	}
	return &t.Role
}
func (t *GetOrganizations_Organizations_Edges_Node_Members) GetUser() *GetOrganizations_Organizations_Edges_Node_Members_User {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Members{}
	}
	return &t.User
}

type GetOrganizations_Organizations_Edges_Node_Setting struct {
	ID             string        "json:\"id\" graphql:\"id\""
	CreatedAt      *time.Time    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt      *time.Time    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy      *string       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy      *string       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Domains        []string      "json:\"domains,omitempty\" graphql:\"domains\""
	BillingContact *string       "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string       "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string       "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	BillingAddress *string       "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	TaxIdentifier  *string       "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	GeoLocation    *enums.Region "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	Tags           []string      "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.CreatedAt
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.CreatedBy
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.UpdatedBy
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetDomains() []string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.Domains
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetBillingContact() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingContact
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetBillingEmail() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingEmail
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetBillingPhone() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingPhone
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetBillingAddress() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingAddress
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.TaxIdentifier
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.GeoLocation
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetTags() []string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.Tags
}

type GetOrganizations_Organizations_Edges_Node struct {
	ID          string                                               "json:\"id\" graphql:\"id\""
	Name        string                                               "json:\"name\" graphql:\"name\""
	DisplayName string                                               "json:\"displayName\" graphql:\"displayName\""
	Description *string                                              "json:\"description,omitempty\" graphql:\"description\""
	PersonalOrg *bool                                                "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Tags        []string                                             "json:\"tags,omitempty\" graphql:\"tags\""
	Parent      *GetOrganizations_Organizations_Edges_Node_Parent    "json:\"parent,omitempty\" graphql:\"parent\""
	Children    GetOrganizations_Organizations_Edges_Node_Children   "json:\"children\" graphql:\"children\""
	Members     []*GetOrganizations_Organizations_Edges_Node_Members "json:\"members,omitempty\" graphql:\"members\""
	Setting     *GetOrganizations_Organizations_Edges_Node_Setting   "json:\"setting,omitempty\" graphql:\"setting\""
	CreatedAt   *time.Time                                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt   *time.Time                                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
}

func (t *GetOrganizations_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.Name
}
func (t *GetOrganizations_Organizations_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetOrganizations_Organizations_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.Description
}
func (t *GetOrganizations_Organizations_Edges_Node) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.PersonalOrg
}
func (t *GetOrganizations_Organizations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.Tags
}
func (t *GetOrganizations_Organizations_Edges_Node) GetParent() *GetOrganizations_Organizations_Edges_Node_Parent {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.Parent
}
func (t *GetOrganizations_Organizations_Edges_Node) GetChildren() *GetOrganizations_Organizations_Edges_Node_Children {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return &t.Children
}
func (t *GetOrganizations_Organizations_Edges_Node) GetMembers() []*GetOrganizations_Organizations_Edges_Node_Members {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.Members
}
func (t *GetOrganizations_Organizations_Edges_Node) GetSetting() *GetOrganizations_Organizations_Edges_Node_Setting {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.Setting
}
func (t *GetOrganizations_Organizations_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrganizations_Organizations_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.UpdatedAt
}

type GetOrganizations_Organizations_Edges struct {
	Node *GetOrganizations_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizations_Organizations_Edges) GetNode() *GetOrganizations_Organizations_Edges_Node {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges{}
	}
	return t.Node
}

type GetOrganizations_Organizations struct {
	Edges []*GetOrganizations_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrganizations_Organizations) GetEdges() []*GetOrganizations_Organizations_Edges {
	if t == nil {
		t = &GetOrganizations_Organizations{}
	}
	return t.Edges
}

type UpdateOrganization_UpdateOrganization_Organization_Members struct {
	ID     string     "json:\"id\" graphql:\"id\""
	Role   enums.Role "json:\"role\" graphql:\"role\""
	UserID string     "json:\"userID\" graphql:\"userID\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization_Members) GetID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Members{}
	}
	return t.ID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Members) GetRole() *enums.Role {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Members{}
	}
	return &t.Role
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Members) GetUserID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Members{}
	}
	return t.UserID
}

type UpdateOrganization_UpdateOrganization_Organization_Setting struct {
	ID             string        "json:\"id\" graphql:\"id\""
	CreatedAt      *time.Time    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt      *time.Time    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy      *string       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy      *string       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Domains        []string      "json:\"domains,omitempty\" graphql:\"domains\""
	BillingContact *string       "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string       "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string       "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	BillingAddress *string       "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	TaxIdentifier  *string       "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	GeoLocation    *enums.Region "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	Tags           []string      "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.ID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.CreatedAt
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.UpdatedAt
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.CreatedBy
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.UpdatedBy
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetDomains() []string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.Domains
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetBillingContact() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.BillingContact
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetBillingEmail() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.BillingEmail
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetBillingPhone() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.BillingPhone
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetBillingAddress() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.BillingAddress
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetTaxIdentifier() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.TaxIdentifier
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.GeoLocation
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetTags() []string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.Tags
}

type UpdateOrganization_UpdateOrganization_Organization struct {
	ID          string                                                        "json:\"id\" graphql:\"id\""
	Name        string                                                        "json:\"name\" graphql:\"name\""
	DisplayName string                                                        "json:\"displayName\" graphql:\"displayName\""
	Description *string                                                       "json:\"description,omitempty\" graphql:\"description\""
	PersonalOrg *bool                                                         "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Tags        []string                                                      "json:\"tags,omitempty\" graphql:\"tags\""
	Members     []*UpdateOrganization_UpdateOrganization_Organization_Members "json:\"members,omitempty\" graphql:\"members\""
	Setting     *UpdateOrganization_UpdateOrganization_Organization_Setting   "json:\"setting,omitempty\" graphql:\"setting\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization) GetID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.ID
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.Name
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetDisplayName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.DisplayName
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetDescription() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.Description
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetPersonalOrg() *bool {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.PersonalOrg
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetTags() []string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.Tags
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetMembers() []*UpdateOrganization_UpdateOrganization_Organization_Members {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.Members
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetSetting() *UpdateOrganization_UpdateOrganization_Organization_Setting {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.Setting
}

type UpdateOrganization_UpdateOrganization struct {
	Organization UpdateOrganization_UpdateOrganization_Organization "json:\"organization\" graphql:\"organization\""
}

func (t *UpdateOrganization_UpdateOrganization) GetOrganization() *UpdateOrganization_UpdateOrganization_Organization {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization{}
	}
	return &t.Organization
}

type GetAllOrganizationHistories_OrganizationHistories_Edges_Node struct {
	AvatarRemoteURL *string        "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	CreatedAt       *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DedicatedDb     bool           "json:\"dedicatedDb\" graphql:\"dedicatedDb\""
	Description     *string        "json:\"description,omitempty\" graphql:\"description\""
	DisplayName     string         "json:\"displayName\" graphql:\"displayName\""
	HistoryTime     time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID              string         "json:\"id\" graphql:\"id\""
	Name            string         "json:\"name\" graphql:\"name\""
	Operation       history.OpType "json:\"operation\" graphql:\"operation\""
	PersonalOrg     *bool          "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Ref             *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags            []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetDedicatedDb() bool {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.DedicatedDb
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.PersonalOrg
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrganizationHistories_OrganizationHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllOrganizationHistories_OrganizationHistories_Edges struct {
	Node *GetAllOrganizationHistories_OrganizationHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrganizationHistories_OrganizationHistories_Edges) GetNode() *GetAllOrganizationHistories_OrganizationHistories_Edges_Node {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories_Edges{}
	}
	return t.Node
}

type GetAllOrganizationHistories_OrganizationHistories struct {
	Edges []*GetAllOrganizationHistories_OrganizationHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllOrganizationHistories_OrganizationHistories) GetEdges() []*GetAllOrganizationHistories_OrganizationHistories_Edges {
	if t == nil {
		t = &GetAllOrganizationHistories_OrganizationHistories{}
	}
	return t.Edges
}

type GetOrganizationHistories_OrganizationHistories_Edges_Node struct {
	AvatarRemoteURL *string        "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	CreatedAt       *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DedicatedDb     bool           "json:\"dedicatedDb\" graphql:\"dedicatedDb\""
	Description     *string        "json:\"description,omitempty\" graphql:\"description\""
	DisplayName     string         "json:\"displayName\" graphql:\"displayName\""
	HistoryTime     time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID              string         "json:\"id\" graphql:\"id\""
	Name            string         "json:\"name\" graphql:\"name\""
	Operation       history.OpType "json:\"operation\" graphql:\"operation\""
	PersonalOrg     *bool          "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Ref             *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags            []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetDedicatedDb() bool {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.DedicatedDb
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.PersonalOrg
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizationHistories_OrganizationHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetOrganizationHistories_OrganizationHistories_Edges struct {
	Node *GetOrganizationHistories_OrganizationHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizationHistories_OrganizationHistories_Edges) GetNode() *GetOrganizationHistories_OrganizationHistories_Edges_Node {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories_Edges{}
	}
	return t.Node
}

type GetOrganizationHistories_OrganizationHistories struct {
	Edges []*GetOrganizationHistories_OrganizationHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrganizationHistories_OrganizationHistories) GetEdges() []*GetOrganizationHistories_OrganizationHistories_Edges {
	if t == nil {
		t = &GetOrganizationHistories_OrganizationHistories{}
	}
	return t.Edges
}

type GetAllOrganizationSettings_OrganizationSettings_Edges_Node_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node_Organization) GetID() string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node_Organization{}
	}
	return t.ID
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node_Organization) GetName() string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node_Organization{}
	}
	return t.Name
}

type GetAllOrganizationSettings_OrganizationSettings_Edges_Node struct {
	BillingAddress *string                                                                  "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact *string                                                                  "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string                                                                  "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string                                                                  "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt      *time.Time                                                               "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                                                  "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains        []string                                                                 "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation    *enums.Region                                                            "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID             string                                                                   "json:\"id\" graphql:\"id\""
	Tags           []string                                                                 "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier  *string                                                                  "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt      *time.Time                                                               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                                                  "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Organization   *GetAllOrganizationSettings_OrganizationSettings_Edges_Node_Organization "json:\"organization,omitempty\" graphql:\"organization\""
}

func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingAddress() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingAddress
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingContact() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingContact
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingEmail() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingEmail
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingPhone() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingPhone
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.Domains
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.GeoLocation
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.TaxIdentifier
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetOrganization() *GetAllOrganizationSettings_OrganizationSettings_Edges_Node_Organization {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.Organization
}

type GetAllOrganizationSettings_OrganizationSettings_Edges struct {
	Node *GetAllOrganizationSettings_OrganizationSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrganizationSettings_OrganizationSettings_Edges) GetNode() *GetAllOrganizationSettings_OrganizationSettings_Edges_Node {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges{}
	}
	return t.Node
}

type GetAllOrganizationSettings_OrganizationSettings struct {
	Edges []*GetAllOrganizationSettings_OrganizationSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllOrganizationSettings_OrganizationSettings) GetEdges() []*GetAllOrganizationSettings_OrganizationSettings_Edges {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings{}
	}
	return t.Edges
}

type GetOrganizationSettingByID_OrganizationSetting_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizationSettingByID_OrganizationSetting_Organization) GetID() string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting_Organization{}
	}
	return t.ID
}
func (t *GetOrganizationSettingByID_OrganizationSetting_Organization) GetName() string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting_Organization{}
	}
	return t.Name
}

type GetOrganizationSettingByID_OrganizationSetting struct {
	BillingAddress *string                                                      "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact *string                                                      "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string                                                      "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string                                                      "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt      *time.Time                                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains        []string                                                     "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation    *enums.Region                                                "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID             string                                                       "json:\"id\" graphql:\"id\""
	Tags           []string                                                     "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier  *string                                                      "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt      *time.Time                                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Organization   *GetOrganizationSettingByID_OrganizationSetting_Organization "json:\"organization,omitempty\" graphql:\"organization\""
}

func (t *GetOrganizationSettingByID_OrganizationSetting) GetBillingAddress() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.BillingAddress
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetBillingContact() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.BillingContact
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetBillingEmail() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.BillingEmail
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetBillingPhone() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.BillingPhone
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.CreatedAt
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetDomains() []string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.Domains
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.GeoLocation
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetID() string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.ID
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetTags() []string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.Tags
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.TaxIdentifier
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.UpdatedBy
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetOrganization() *GetOrganizationSettingByID_OrganizationSetting_Organization {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.Organization
}

type GetOrganizationSettings_OrganizationSettings_Edges_Node_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node_Organization) GetID() string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node_Organization{}
	}
	return t.ID
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node_Organization) GetName() string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node_Organization{}
	}
	return t.Name
}

type GetOrganizationSettings_OrganizationSettings_Edges_Node struct {
	BillingAddress *string                                                               "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact *string                                                               "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string                                                               "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string                                                               "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt      *time.Time                                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                                               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains        []string                                                              "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation    *enums.Region                                                         "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID             string                                                                "json:\"id\" graphql:\"id\""
	Tags           []string                                                              "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier  *string                                                               "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt      *time.Time                                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                                               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Organization   *GetOrganizationSettings_OrganizationSettings_Edges_Node_Organization "json:\"organization,omitempty\" graphql:\"organization\""
}

func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingAddress() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingAddress
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingContact() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingContact
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingEmail() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingEmail
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingPhone() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingPhone
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.Domains
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.GeoLocation
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.Tags
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.TaxIdentifier
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetOrganization() *GetOrganizationSettings_OrganizationSettings_Edges_Node_Organization {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.Organization
}

type GetOrganizationSettings_OrganizationSettings_Edges struct {
	Node *GetOrganizationSettings_OrganizationSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizationSettings_OrganizationSettings_Edges) GetNode() *GetOrganizationSettings_OrganizationSettings_Edges_Node {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges{}
	}
	return t.Node
}

type GetOrganizationSettings_OrganizationSettings struct {
	Edges []*GetOrganizationSettings_OrganizationSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrganizationSettings_OrganizationSettings) GetEdges() []*GetOrganizationSettings_OrganizationSettings_Edges {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings{}
	}
	return t.Edges
}

type UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting_Organization) GetID() string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting_Organization{}
	}
	return t.ID
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting_Organization) GetName() string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting_Organization{}
	}
	return t.Name
}

type UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting struct {
	BillingAddress *string                                                                               "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact *string                                                                               "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string                                                                               "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string                                                                               "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt      *time.Time                                                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                                                               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains        []string                                                                              "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation    *enums.Region                                                                         "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID             string                                                                                "json:\"id\" graphql:\"id\""
	Tags           []string                                                                              "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier  *string                                                                               "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt      *time.Time                                                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                                                               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Organization   *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting_Organization "json:\"organization,omitempty\" graphql:\"organization\""
}

func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetBillingAddress() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.BillingAddress
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetBillingContact() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.BillingContact
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetBillingEmail() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.BillingEmail
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetBillingPhone() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.BillingPhone
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.CreatedAt
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.CreatedBy
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetDomains() []string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.Domains
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.GeoLocation
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetID() string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.ID
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetTags() []string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.Tags
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetTaxIdentifier() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.TaxIdentifier
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.UpdatedAt
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.UpdatedBy
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetOrganization() *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting_Organization {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.Organization
}

type UpdateOrganizationSetting_UpdateOrganizationSetting struct {
	OrganizationSetting UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting "json:\"organizationSetting\" graphql:\"organizationSetting\""
}

func (t *UpdateOrganizationSetting_UpdateOrganizationSetting) GetOrganizationSetting() *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting{}
	}
	return &t.OrganizationSetting
}

type GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node struct {
	BillingAddress *string        "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact *string        "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string        "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string        "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt      *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains        []string       "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation    *enums.Region  "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	HistoryTime    time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID             string         "json:\"id\" graphql:\"id\""
	Operation      history.OpType "json:\"operation\" graphql:\"operation\""
	OrganizationID *string        "json:\"organizationID,omitempty\" graphql:\"organizationID\""
	Ref            *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags           []string       "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier  *string        "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt      *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingAddress() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingAddress
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingContact() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingContact
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingEmail() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingEmail
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingPhone() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingPhone
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Domains
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.GeoLocation
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetOrganizationID() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.TaxIdentifier
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges struct {
	Node *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges) GetNode() *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges{}
	}
	return t.Node
}

type GetAllOrganizationSettingHistories_OrganizationSettingHistories struct {
	Edges []*GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories) GetEdges() []*GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories{}
	}
	return t.Edges
}

type GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node struct {
	BillingAddress *string        "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact *string        "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string        "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string        "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt      *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains        []string       "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation    *enums.Region  "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	HistoryTime    time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID             string         "json:\"id\" graphql:\"id\""
	Operation      history.OpType "json:\"operation\" graphql:\"operation\""
	OrganizationID *string        "json:\"organizationID,omitempty\" graphql:\"organizationID\""
	Ref            *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags           []string       "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier  *string        "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt      *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingAddress() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingAddress
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingContact() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingContact
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingEmail() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingEmail
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingPhone() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingPhone
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Domains
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.GeoLocation
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetOrganizationID() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.TaxIdentifier
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetOrganizationSettingHistories_OrganizationSettingHistories_Edges struct {
	Node *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges) GetNode() *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges{}
	}
	return t.Node
}

type GetOrganizationSettingHistories_OrganizationSettingHistories struct {
	Edges []*GetOrganizationSettingHistories_OrganizationSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrganizationSettingHistories_OrganizationSettingHistories) GetEdges() []*GetOrganizationSettingHistories_OrganizationSettingHistories_Edges {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories{}
	}
	return t.Edges
}

type AddUserToOrgWithRole_CreateOrgMembership_OrgMembership struct {
	ID             string     "json:\"id\" graphql:\"id\""
	Role           enums.Role "json:\"role\" graphql:\"role\""
	UserID         string     "json:\"userID\" graphql:\"userID\""
	OrganizationID string     "json:\"organizationID\" graphql:\"organizationID\""
}

func (t *AddUserToOrgWithRole_CreateOrgMembership_OrgMembership) GetID() string {
	if t == nil {
		t = &AddUserToOrgWithRole_CreateOrgMembership_OrgMembership{}
	}
	return t.ID
}
func (t *AddUserToOrgWithRole_CreateOrgMembership_OrgMembership) GetRole() *enums.Role {
	if t == nil {
		t = &AddUserToOrgWithRole_CreateOrgMembership_OrgMembership{}
	}
	return &t.Role
}
func (t *AddUserToOrgWithRole_CreateOrgMembership_OrgMembership) GetUserID() string {
	if t == nil {
		t = &AddUserToOrgWithRole_CreateOrgMembership_OrgMembership{}
	}
	return t.UserID
}
func (t *AddUserToOrgWithRole_CreateOrgMembership_OrgMembership) GetOrganizationID() string {
	if t == nil {
		t = &AddUserToOrgWithRole_CreateOrgMembership_OrgMembership{}
	}
	return t.OrganizationID
}

type AddUserToOrgWithRole_CreateOrgMembership struct {
	OrgMembership AddUserToOrgWithRole_CreateOrgMembership_OrgMembership "json:\"orgMembership\" graphql:\"orgMembership\""
}

func (t *AddUserToOrgWithRole_CreateOrgMembership) GetOrgMembership() *AddUserToOrgWithRole_CreateOrgMembership_OrgMembership {
	if t == nil {
		t = &AddUserToOrgWithRole_CreateOrgMembership{}
	}
	return &t.OrgMembership
}

type CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships struct {
	ID             string     "json:\"id\" graphql:\"id\""
	OrganizationID string     "json:\"organizationID\" graphql:\"organizationID\""
	Role           enums.Role "json:\"role\" graphql:\"role\""
	UserID         string     "json:\"userID\" graphql:\"userID\""
}

func (t *CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships{}
	}
	return t.ID
}
func (t *CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships) GetOrganizationID() string {
	if t == nil {
		t = &CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships{}
	}
	return t.OrganizationID
}
func (t *CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships) GetUserID() string {
	if t == nil {
		t = &CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships{}
	}
	return t.UserID
}

type CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership struct {
	OrgMemberships []*CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships "json:\"orgMemberships,omitempty\" graphql:\"orgMemberships\""
}

func (t *CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership) GetOrgMemberships() []*CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships {
	if t == nil {
		t = &CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership{}
	}
	return t.OrgMemberships
}

type CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships struct {
	ID             string     "json:\"id\" graphql:\"id\""
	OrganizationID string     "json:\"organizationID\" graphql:\"organizationID\""
	Role           enums.Role "json:\"role\" graphql:\"role\""
	UserID         string     "json:\"userID\" graphql:\"userID\""
}

func (t *CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships{}
	}
	return t.ID
}
func (t *CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships) GetOrganizationID() string {
	if t == nil {
		t = &CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships{}
	}
	return t.OrganizationID
}
func (t *CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships) GetUserID() string {
	if t == nil {
		t = &CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships{}
	}
	return t.UserID
}

type CreateBulkOrgMembers_CreateBulkOrgMembership struct {
	OrgMemberships []*CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships "json:\"orgMemberships,omitempty\" graphql:\"orgMemberships\""
}

func (t *CreateBulkOrgMembers_CreateBulkOrgMembership) GetOrgMemberships() []*CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships {
	if t == nil {
		t = &CreateBulkOrgMembers_CreateBulkOrgMembership{}
	}
	return t.OrgMemberships
}

type GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User struct {
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
	ID          string  "json:\"id\" graphql:\"id\""
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
}

func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User) GetFirstName() *string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User{}
	}
	return t.FirstName
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User) GetLastName() *string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User{}
	}
	return t.LastName
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User) GetID() string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User{}
	}
	return t.ID
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User) GetDisplayName() string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User{}
	}
	return t.DisplayName
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User) GetEmail() string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User{}
	}
	return t.Email
}

type GetOrgMembersByOrgID_OrgMemberships_Edges_Node struct {
	ID             string                                              "json:\"id\" graphql:\"id\""
	OrganizationID string                                              "json:\"organizationID\" graphql:\"organizationID\""
	UserID         string                                              "json:\"userID\" graphql:\"userID\""
	Role           enums.Role                                          "json:\"role\" graphql:\"role\""
	User           GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User "json:\"user\" graphql:\"user\""
}

func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node) GetOrganizationID() string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node{}
	}
	return t.UserID
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node{}
	}
	return &t.Role
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node) GetUser() *GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node{}
	}
	return &t.User
}

type GetOrgMembersByOrgID_OrgMemberships_Edges struct {
	Node *GetOrgMembersByOrgID_OrgMemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrgMembersByOrgID_OrgMemberships_Edges) GetNode() *GetOrgMembersByOrgID_OrgMemberships_Edges_Node {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges{}
	}
	return t.Node
}

type GetOrgMembersByOrgID_OrgMemberships struct {
	Edges []*GetOrgMembersByOrgID_OrgMemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrgMembersByOrgID_OrgMemberships) GetEdges() []*GetOrgMembersByOrgID_OrgMemberships_Edges {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships{}
	}
	return t.Edges
}

type RemoveUserFromOrg_DeleteOrgMembership struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *RemoveUserFromOrg_DeleteOrgMembership) GetDeletedID() string {
	if t == nil {
		t = &RemoveUserFromOrg_DeleteOrgMembership{}
	}
	return t.DeletedID
}

type UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership struct {
	ID             string     "json:\"id\" graphql:\"id\""
	Role           enums.Role "json:\"role\" graphql:\"role\""
	UserID         string     "json:\"userID\" graphql:\"userID\""
	OrganizationID string     "json:\"organizationID\" graphql:\"organizationID\""
}

func (t *UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership) GetID() string {
	if t == nil {
		t = &UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership{}
	}
	return t.ID
}
func (t *UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership) GetRole() *enums.Role {
	if t == nil {
		t = &UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership{}
	}
	return &t.Role
}
func (t *UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership) GetUserID() string {
	if t == nil {
		t = &UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership{}
	}
	return t.UserID
}
func (t *UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership) GetOrganizationID() string {
	if t == nil {
		t = &UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership{}
	}
	return t.OrganizationID
}

type UpdateUserRoleInOrg_UpdateOrgMembership struct {
	OrgMembership UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership "json:\"orgMembership\" graphql:\"orgMembership\""
}

func (t *UpdateUserRoleInOrg_UpdateOrgMembership) GetOrgMembership() *UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership {
	if t == nil {
		t = &UpdateUserRoleInOrg_UpdateOrgMembership{}
	}
	return &t.OrgMembership
}

type GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node struct {
	CreatedAt      *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime    time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID             string         "json:\"id\" graphql:\"id\""
	Operation      history.OpType "json:\"operation\" graphql:\"operation\""
	OrganizationID string         "json:\"organizationID\" graphql:\"organizationID\""
	Ref            *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Role           enums.Role     "json:\"role\" graphql:\"role\""
	UpdatedAt      *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID         string         "json:\"userID\" graphql:\"userID\""
}

func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetOrganizationID() string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.Role
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UserID
}

type GetAllOrgMembershipHistories_OrgMembershipHistories_Edges struct {
	Node *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges) GetNode() *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges{}
	}
	return t.Node
}

type GetAllOrgMembershipHistories_OrgMembershipHistories struct {
	Edges []*GetAllOrgMembershipHistories_OrgMembershipHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllOrgMembershipHistories_OrgMembershipHistories) GetEdges() []*GetAllOrgMembershipHistories_OrgMembershipHistories_Edges {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories{}
	}
	return t.Edges
}

type GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node struct {
	CreatedAt      *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime    time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID             string         "json:\"id\" graphql:\"id\""
	Operation      history.OpType "json:\"operation\" graphql:\"operation\""
	OrganizationID string         "json:\"organizationID\" graphql:\"organizationID\""
	Ref            *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Role           enums.Role     "json:\"role\" graphql:\"role\""
	UpdatedAt      *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID         string         "json:\"userID\" graphql:\"userID\""
}

func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetOrganizationID() string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.Role
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UserID
}

type GetOrgMembershipHistories_OrgMembershipHistories_Edges struct {
	Node *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges) GetNode() *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges{}
	}
	return t.Node
}

type GetOrgMembershipHistories_OrgMembershipHistories struct {
	Edges []*GetOrgMembershipHistories_OrgMembershipHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrgMembershipHistories_OrgMembershipHistories) GetEdges() []*GetOrgMembershipHistories_OrgMembershipHistories_Edges {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories{}
	}
	return t.Edges
}

type CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens_Organizations struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens_Organizations) GetID() string {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens_Organizations{}
	}
	return t.ID
}
func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens_Organizations) GetName() string {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens_Organizations{}
	}
	return t.Name
}

type CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens struct {
	Description   *string                                                                                                 "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt     *time.Time                                                                                              "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID            string                                                                                                  "json:\"id\" graphql:\"id\""
	LastUsedAt    *time.Time                                                                                              "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name          string                                                                                                  "json:\"name\" graphql:\"name\""
	Scopes        []string                                                                                                "json:\"scopes,omitempty\" graphql:\"scopes\""
	Token         string                                                                                                  "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time                                                                                              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                                                                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Organizations []*CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
}

func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.Description
}
func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens) GetExpiresAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.ExpiresAt
}
func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens) GetID() string {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.ID
}
func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.LastUsedAt
}
func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens) GetName() string {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.Name
}
func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens) GetScopes() []string {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.Scopes
}
func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens) GetToken() string {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.Token
}
func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens) GetOrganizations() []*CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens_Organizations {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.Organizations
}

type CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken struct {
	PersonalAccessTokens []*CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens "json:\"personalAccessTokens,omitempty\" graphql:\"personalAccessTokens\""
}

func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken) GetPersonalAccessTokens() []*CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken{}
	}
	return t.PersonalAccessTokens
}

type CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens_Organizations struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens_Organizations) GetID() string {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens_Organizations{}
	}
	return t.ID
}
func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens_Organizations) GetName() string {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens_Organizations{}
	}
	return t.Name
}

type CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens struct {
	Description   *string                                                                                           "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt     *time.Time                                                                                        "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID            string                                                                                            "json:\"id\" graphql:\"id\""
	LastUsedAt    *time.Time                                                                                        "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name          string                                                                                            "json:\"name\" graphql:\"name\""
	Scopes        []string                                                                                          "json:\"scopes,omitempty\" graphql:\"scopes\""
	Token         string                                                                                            "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time                                                                                        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                                                           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Organizations []*CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
}

func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens) GetDescription() *string {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.Description
}
func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens) GetExpiresAt() *time.Time {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.ExpiresAt
}
func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens) GetID() string {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.ID
}
func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.LastUsedAt
}
func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens) GetName() string {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.Name
}
func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens) GetScopes() []string {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.Scopes
}
func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens) GetToken() string {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.Token
}
func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens) GetOrganizations() []*CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens_Organizations {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.Organizations
}

type CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken struct {
	PersonalAccessTokens []*CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens "json:\"personalAccessTokens,omitempty\" graphql:\"personalAccessTokens\""
}

func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken) GetPersonalAccessTokens() []*CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken{}
	}
	return t.PersonalAccessTokens
}

type CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations) GetID() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations{}
	}
	return t.ID
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations) GetName() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations{}
	}
	return t.Name
}

type CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Owner) GetID() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Owner{}
	}
	return t.ID
}

type CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken struct {
	Description   *string                                                                                  "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt     *time.Time                                                                               "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID            string                                                                                   "json:\"id\" graphql:\"id\""
	LastUsedAt    *time.Time                                                                               "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name          string                                                                                   "json:\"name\" graphql:\"name\""
	Scopes        []string                                                                                 "json:\"scopes,omitempty\" graphql:\"scopes\""
	Token         string                                                                                   "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time                                                                               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                                                  "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Organizations []*CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
	Owner         CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Owner            "json:\"owner\" graphql:\"owner\""
}

func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetDescription() *string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Description
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.ExpiresAt
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.ID
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.LastUsedAt
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetName() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Name
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetScopes() []string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Scopes
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetToken() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Token
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.UpdatedAt
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetUpdatedBy() *string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.UpdatedBy
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetOrganizations() []*CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Organizations
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetOwner() *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Owner {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return &t.Owner
}

type CreatePersonalAccessToken_CreatePersonalAccessToken struct {
	PersonalAccessToken CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken "json:\"personalAccessToken\" graphql:\"personalAccessToken\""
}

func (t *CreatePersonalAccessToken_CreatePersonalAccessToken) GetPersonalAccessToken() *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken{}
	}
	return &t.PersonalAccessToken
}

type DeletePersonalAccessToken_DeletePersonalAccessToken struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeletePersonalAccessToken_DeletePersonalAccessToken) GetDeletedID() string {
	if t == nil {
		t = &DeletePersonalAccessToken_DeletePersonalAccessToken{}
	}
	return t.DeletedID
}

type GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations) GetID() string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations{}
	}
	return t.ID
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations) GetName() string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations{}
	}
	return t.Name
}

type GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node struct {
	Description   *string                                                                     "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt     *time.Time                                                                  "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID            string                                                                      "json:\"id\" graphql:\"id\""
	LastUsedAt    *time.Time                                                                  "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name          string                                                                      "json:\"name\" graphql:\"name\""
	Scopes        []string                                                                    "json:\"scopes,omitempty\" graphql:\"scopes\""
	Token         string                                                                      "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time                                                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Organizations []*GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
}

func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.LastUsedAt
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetScopes() []string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Scopes
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetToken() string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Token
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetOrganizations() []*GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Organizations
}

type GetAllPersonalAccessTokens_PersonalAccessTokens_Edges struct {
	Node *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges) GetNode() *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges{}
	}
	return t.Node
}

type GetAllPersonalAccessTokens_PersonalAccessTokens struct {
	Edges []*GetAllPersonalAccessTokens_PersonalAccessTokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllPersonalAccessTokens_PersonalAccessTokens) GetEdges() []*GetAllPersonalAccessTokens_PersonalAccessTokens_Edges {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens{}
	}
	return t.Edges
}

type GetPersonalAccessTokenByID_PersonalAccessToken_Organizations struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetPersonalAccessTokenByID_PersonalAccessToken_Organizations) GetID() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken_Organizations{}
	}
	return t.ID
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken_Organizations) GetName() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken_Organizations{}
	}
	return t.Name
}

type GetPersonalAccessTokenByID_PersonalAccessToken struct {
	Description   *string                                                         "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt     *time.Time                                                      "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID            string                                                          "json:\"id\" graphql:\"id\""
	LastUsedAt    *time.Time                                                      "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name          string                                                          "json:\"name\" graphql:\"name\""
	Scopes        []string                                                        "json:\"scopes,omitempty\" graphql:\"scopes\""
	Token         string                                                          "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time                                                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Organizations []*GetPersonalAccessTokenByID_PersonalAccessToken_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
}

func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetDescription() *string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.Description
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.ExpiresAt
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.ID
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.LastUsedAt
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetName() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.Name
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetScopes() []string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.Scopes
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetToken() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.Token
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.UpdatedAt
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetUpdatedBy() *string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.UpdatedBy
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetOrganizations() []*GetPersonalAccessTokenByID_PersonalAccessToken_Organizations {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.Organizations
}

type UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations) GetID() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations{}
	}
	return t.ID
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations) GetName() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations{}
	}
	return t.Name
}

type UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Owner) GetID() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Owner{}
	}
	return t.ID
}

type UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken struct {
	Description   *string                                                                                  "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt     *time.Time                                                                               "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	ID            string                                                                                   "json:\"id\" graphql:\"id\""
	LastUsedAt    *time.Time                                                                               "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name          string                                                                                   "json:\"name\" graphql:\"name\""
	Scopes        []string                                                                                 "json:\"scopes,omitempty\" graphql:\"scopes\""
	Token         string                                                                                   "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time                                                                               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                                                  "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Organizations []*UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
	Owner         UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Owner            "json:\"owner\" graphql:\"owner\""
}

func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetDescription() *string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Description
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.ExpiresAt
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.ID
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.LastUsedAt
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetName() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Name
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetScopes() []string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Scopes
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetToken() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Token
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.UpdatedAt
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.UpdatedBy
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetOrganizations() []*UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Organizations
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetOwner() *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Owner {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return &t.Owner
}

type UpdatePersonalAccessToken_UpdatePersonalAccessToken struct {
	PersonalAccessToken UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken "json:\"personalAccessToken\" graphql:\"personalAccessToken\""
}

func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken) GetPersonalAccessToken() *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken{}
	}
	return &t.PersonalAccessToken
}

type CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                "json:\"description,omitempty\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	ProcedureType   *string                "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Satisfies       *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetBackground() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.Background
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.Description
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.Details
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetID() string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.ID
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetName() string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.Name
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetProcedureType() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.ProcedureType
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetPurposeAndScope() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.PurposeAndScope
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetSatisfies() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.Satisfies
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetStatus() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.Status
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.Tags
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures) GetVersion() *string {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures{}
	}
	return t.Version
}

type CreateBulkCSVProcedure_CreateBulkCSVProcedure struct {
	Procedures []*CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures "json:\"procedures,omitempty\" graphql:\"procedures\""
}

func (t *CreateBulkCSVProcedure_CreateBulkCSVProcedure) GetProcedures() []*CreateBulkCSVProcedure_CreateBulkCSVProcedure_Procedures {
	if t == nil {
		t = &CreateBulkCSVProcedure_CreateBulkCSVProcedure{}
	}
	return t.Procedures
}

type CreateBulkProcedure_CreateBulkProcedure_Procedures struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                "json:\"description,omitempty\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	ProcedureType   *string                "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Satisfies       *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetBackground() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.Background
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.CreatedAt
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.CreatedBy
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetDescription() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.Description
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.Details
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetID() string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.ID
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetName() string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.Name
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetProcedureType() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.ProcedureType
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetPurposeAndScope() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.PurposeAndScope
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetSatisfies() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.Satisfies
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetStatus() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.Status
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetTags() []string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.Tags
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkProcedure_CreateBulkProcedure_Procedures) GetVersion() *string {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure_Procedures{}
	}
	return t.Version
}

type CreateBulkProcedure_CreateBulkProcedure struct {
	Procedures []*CreateBulkProcedure_CreateBulkProcedure_Procedures "json:\"procedures,omitempty\" graphql:\"procedures\""
}

func (t *CreateBulkProcedure_CreateBulkProcedure) GetProcedures() []*CreateBulkProcedure_CreateBulkProcedure_Procedures {
	if t == nil {
		t = &CreateBulkProcedure_CreateBulkProcedure{}
	}
	return t.Procedures
}

type CreateProcedure_CreateProcedure_Procedure struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                "json:\"description,omitempty\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	ProcedureType   *string                "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Satisfies       *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateProcedure_CreateProcedure_Procedure) GetBackground() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.Background
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.CreatedAt
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetCreatedBy() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.CreatedBy
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetDescription() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.Description
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.Details
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetID() string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.ID
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetName() string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.Name
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetProcedureType() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.ProcedureType
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetPurposeAndScope() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.PurposeAndScope
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetSatisfies() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.Satisfies
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetStatus() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.Status
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetTags() []string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.Tags
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.UpdatedAt
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.UpdatedBy
}
func (t *CreateProcedure_CreateProcedure_Procedure) GetVersion() *string {
	if t == nil {
		t = &CreateProcedure_CreateProcedure_Procedure{}
	}
	return t.Version
}

type CreateProcedure_CreateProcedure struct {
	Procedure CreateProcedure_CreateProcedure_Procedure "json:\"procedure\" graphql:\"procedure\""
}

func (t *CreateProcedure_CreateProcedure) GetProcedure() *CreateProcedure_CreateProcedure_Procedure {
	if t == nil {
		t = &CreateProcedure_CreateProcedure{}
	}
	return &t.Procedure
}

type DeleteProcedure_DeleteProcedure struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteProcedure_DeleteProcedure) GetDeletedID() string {
	if t == nil {
		t = &DeleteProcedure_DeleteProcedure{}
	}
	return t.DeletedID
}

type GetAllProcedures_Procedures_Edges_Node struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                "json:\"description,omitempty\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	ProcedureType   *string                "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Satisfies       *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetAllProcedures_Procedures_Edges_Node) GetBackground() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.Background
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetProcedureType() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.ProcedureType
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetPurposeAndScope() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.PurposeAndScope
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetSatisfies() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.Satisfies
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllProcedures_Procedures_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges_Node{}
	}
	return t.Version
}

type GetAllProcedures_Procedures_Edges struct {
	Node *GetAllProcedures_Procedures_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllProcedures_Procedures_Edges) GetNode() *GetAllProcedures_Procedures_Edges_Node {
	if t == nil {
		t = &GetAllProcedures_Procedures_Edges{}
	}
	return t.Node
}

type GetAllProcedures_Procedures struct {
	Edges []*GetAllProcedures_Procedures_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllProcedures_Procedures) GetEdges() []*GetAllProcedures_Procedures_Edges {
	if t == nil {
		t = &GetAllProcedures_Procedures{}
	}
	return t.Edges
}

type GetProcedureByID_Procedure struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                "json:\"description,omitempty\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	ProcedureType   *string                "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Satisfies       *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetProcedureByID_Procedure) GetBackground() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.Background
}
func (t *GetProcedureByID_Procedure) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.CreatedAt
}
func (t *GetProcedureByID_Procedure) GetCreatedBy() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.CreatedBy
}
func (t *GetProcedureByID_Procedure) GetDescription() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.Description
}
func (t *GetProcedureByID_Procedure) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.Details
}
func (t *GetProcedureByID_Procedure) GetID() string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.ID
}
func (t *GetProcedureByID_Procedure) GetName() string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.Name
}
func (t *GetProcedureByID_Procedure) GetProcedureType() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.ProcedureType
}
func (t *GetProcedureByID_Procedure) GetPurposeAndScope() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.PurposeAndScope
}
func (t *GetProcedureByID_Procedure) GetSatisfies() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.Satisfies
}
func (t *GetProcedureByID_Procedure) GetStatus() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.Status
}
func (t *GetProcedureByID_Procedure) GetTags() []string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.Tags
}
func (t *GetProcedureByID_Procedure) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.UpdatedAt
}
func (t *GetProcedureByID_Procedure) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.UpdatedBy
}
func (t *GetProcedureByID_Procedure) GetVersion() *string {
	if t == nil {
		t = &GetProcedureByID_Procedure{}
	}
	return t.Version
}

type GetProcedures_Procedures_Edges_Node struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                "json:\"description,omitempty\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	ProcedureType   *string                "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Satisfies       *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetProcedures_Procedures_Edges_Node) GetBackground() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.Background
}
func (t *GetProcedures_Procedures_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetProcedures_Procedures_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetProcedures_Procedures_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.Description
}
func (t *GetProcedures_Procedures_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.Details
}
func (t *GetProcedures_Procedures_Edges_Node) GetID() string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.ID
}
func (t *GetProcedures_Procedures_Edges_Node) GetName() string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.Name
}
func (t *GetProcedures_Procedures_Edges_Node) GetProcedureType() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.ProcedureType
}
func (t *GetProcedures_Procedures_Edges_Node) GetPurposeAndScope() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.PurposeAndScope
}
func (t *GetProcedures_Procedures_Edges_Node) GetSatisfies() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.Satisfies
}
func (t *GetProcedures_Procedures_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.Status
}
func (t *GetProcedures_Procedures_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.Tags
}
func (t *GetProcedures_Procedures_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetProcedures_Procedures_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetProcedures_Procedures_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetProcedures_Procedures_Edges_Node{}
	}
	return t.Version
}

type GetProcedures_Procedures_Edges struct {
	Node *GetProcedures_Procedures_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetProcedures_Procedures_Edges) GetNode() *GetProcedures_Procedures_Edges_Node {
	if t == nil {
		t = &GetProcedures_Procedures_Edges{}
	}
	return t.Node
}

type GetProcedures_Procedures struct {
	Edges []*GetProcedures_Procedures_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetProcedures_Procedures) GetEdges() []*GetProcedures_Procedures_Edges {
	if t == nil {
		t = &GetProcedures_Procedures{}
	}
	return t.Edges
}

type UpdateProcedure_UpdateProcedure_Procedure struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                "json:\"description,omitempty\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	ProcedureType   *string                "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Satisfies       *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *UpdateProcedure_UpdateProcedure_Procedure) GetBackground() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.Background
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.CreatedAt
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.CreatedBy
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetDescription() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.Description
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetDetails() map[string]interface{} {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.Details
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetID() string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.ID
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetName() string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.Name
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetProcedureType() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.ProcedureType
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetPurposeAndScope() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.PurposeAndScope
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetSatisfies() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.Satisfies
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetStatus() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.Status
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetTags() []string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.Tags
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.UpdatedAt
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.UpdatedBy
}
func (t *UpdateProcedure_UpdateProcedure_Procedure) GetVersion() *string {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure_Procedure{}
	}
	return t.Version
}

type UpdateProcedure_UpdateProcedure struct {
	Procedure UpdateProcedure_UpdateProcedure_Procedure "json:\"procedure\" graphql:\"procedure\""
}

func (t *UpdateProcedure_UpdateProcedure) GetProcedure() *UpdateProcedure_UpdateProcedure_Procedure {
	if t == nil {
		t = &UpdateProcedure_UpdateProcedure{}
	}
	return &t.Procedure
}

type GetAllProcedureHistories_ProcedureHistories_Edges_Node struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                "json:\"description,omitempty\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	HistoryTime     time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	Operation       history.OpType         "json:\"operation\" graphql:\"operation\""
	ProcedureType   *string                "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Ref             *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Satisfies       *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetBackground() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Background
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetProcedureType() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ProcedureType
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetPurposeAndScope() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.PurposeAndScope
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetSatisfies() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Satisfies
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllProcedureHistories_ProcedureHistories_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Version
}

type GetAllProcedureHistories_ProcedureHistories_Edges struct {
	Node *GetAllProcedureHistories_ProcedureHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllProcedureHistories_ProcedureHistories_Edges) GetNode() *GetAllProcedureHistories_ProcedureHistories_Edges_Node {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories_Edges{}
	}
	return t.Node
}

type GetAllProcedureHistories_ProcedureHistories struct {
	Edges []*GetAllProcedureHistories_ProcedureHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllProcedureHistories_ProcedureHistories) GetEdges() []*GetAllProcedureHistories_ProcedureHistories_Edges {
	if t == nil {
		t = &GetAllProcedureHistories_ProcedureHistories{}
	}
	return t.Edges
}

type GetProcedureHistories_ProcedureHistories_Edges_Node struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                "json:\"description,omitempty\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	HistoryTime     time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	Operation       history.OpType         "json:\"operation\" graphql:\"operation\""
	ProcedureType   *string                "json:\"procedureType,omitempty\" graphql:\"procedureType\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Ref             *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Satisfies       *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetBackground() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Background
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetProcedureType() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.ProcedureType
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetPurposeAndScope() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.PurposeAndScope
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetSatisfies() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Satisfies
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetProcedureHistories_ProcedureHistories_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges_Node{}
	}
	return t.Version
}

type GetProcedureHistories_ProcedureHistories_Edges struct {
	Node *GetProcedureHistories_ProcedureHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetProcedureHistories_ProcedureHistories_Edges) GetNode() *GetProcedureHistories_ProcedureHistories_Edges_Node {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories_Edges{}
	}
	return t.Node
}

type GetProcedureHistories_ProcedureHistories struct {
	Edges []*GetProcedureHistories_ProcedureHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetProcedureHistories_ProcedureHistories) GetEdges() []*GetProcedureHistories_ProcedureHistories_Edges {
	if t == nil {
		t = &GetProcedureHistories_ProcedureHistories{}
	}
	return t.Edges
}

type CreateBulkCSVProgram_CreateBulkCSVProgram_Programs struct {
	AuditorReadComments  bool                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	CreatedAt            *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string             "json:\"description,omitempty\" graphql:\"description\""
	EndDate              *time.Time          "json:\"endDate,omitempty\" graphql:\"endDate\""
	ID                   string              "json:\"id\" graphql:\"id\""
	Name                 string              "json:\"name\" graphql:\"name\""
	OrganizationID       string              "json:\"organizationID\" graphql:\"organizationID\""
	StartDate            *time.Time          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus "json:\"status\" graphql:\"status\""
	Tags                 []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetAuditorReadComments() bool {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.AuditorReadComments
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetAuditorReady() bool {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.AuditorReady
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetAuditorWriteComments() bool {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.AuditorWriteComments
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.Description
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetEndDate() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.EndDate
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetID() string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.ID
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetName() string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.Name
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetOrganizationID() string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.OrganizationID
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetStartDate() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.StartDate
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return &t.Status
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.Tags
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVProgram_CreateBulkCSVProgram_Programs) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram_Programs{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVProgram_CreateBulkCSVProgram struct {
	Programs []*CreateBulkCSVProgram_CreateBulkCSVProgram_Programs "json:\"programs,omitempty\" graphql:\"programs\""
}

func (t *CreateBulkCSVProgram_CreateBulkCSVProgram) GetPrograms() []*CreateBulkCSVProgram_CreateBulkCSVProgram_Programs {
	if t == nil {
		t = &CreateBulkCSVProgram_CreateBulkCSVProgram{}
	}
	return t.Programs
}

type CreateBulkProgram_CreateBulkProgram_Programs struct {
	AuditorReadComments  bool                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	CreatedAt            *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string             "json:\"description,omitempty\" graphql:\"description\""
	EndDate              *time.Time          "json:\"endDate,omitempty\" graphql:\"endDate\""
	ID                   string              "json:\"id\" graphql:\"id\""
	Name                 string              "json:\"name\" graphql:\"name\""
	OrganizationID       string              "json:\"organizationID\" graphql:\"organizationID\""
	StartDate            *time.Time          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus "json:\"status\" graphql:\"status\""
	Tags                 []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetAuditorReadComments() bool {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.AuditorReadComments
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetAuditorReady() bool {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.AuditorReady
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetAuditorWriteComments() bool {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.AuditorWriteComments
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.CreatedAt
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.CreatedBy
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetDescription() *string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.Description
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetEndDate() *time.Time {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.EndDate
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetID() string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.ID
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetName() string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.Name
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetOrganizationID() string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.OrganizationID
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetStartDate() *time.Time {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.StartDate
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return &t.Status
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetTags() []string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.Tags
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkProgram_CreateBulkProgram_Programs) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram_Programs{}
	}
	return t.UpdatedBy
}

type CreateBulkProgram_CreateBulkProgram struct {
	Programs []*CreateBulkProgram_CreateBulkProgram_Programs "json:\"programs,omitempty\" graphql:\"programs\""
}

func (t *CreateBulkProgram_CreateBulkProgram) GetPrograms() []*CreateBulkProgram_CreateBulkProgram_Programs {
	if t == nil {
		t = &CreateBulkProgram_CreateBulkProgram{}
	}
	return t.Programs
}

type CreateProgram_CreateProgram_Program struct {
	AuditorReadComments  bool                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	CreatedAt            *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string             "json:\"description,omitempty\" graphql:\"description\""
	EndDate              *time.Time          "json:\"endDate,omitempty\" graphql:\"endDate\""
	ID                   string              "json:\"id\" graphql:\"id\""
	Name                 string              "json:\"name\" graphql:\"name\""
	OrganizationID       string              "json:\"organizationID\" graphql:\"organizationID\""
	StartDate            *time.Time          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus "json:\"status\" graphql:\"status\""
	Tags                 []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateProgram_CreateProgram_Program) GetAuditorReadComments() bool {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.AuditorReadComments
}
func (t *CreateProgram_CreateProgram_Program) GetAuditorReady() bool {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.AuditorReady
}
func (t *CreateProgram_CreateProgram_Program) GetAuditorWriteComments() bool {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.AuditorWriteComments
}
func (t *CreateProgram_CreateProgram_Program) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.CreatedAt
}
func (t *CreateProgram_CreateProgram_Program) GetCreatedBy() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.CreatedBy
}
func (t *CreateProgram_CreateProgram_Program) GetDescription() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.Description
}
func (t *CreateProgram_CreateProgram_Program) GetEndDate() *time.Time {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.EndDate
}
func (t *CreateProgram_CreateProgram_Program) GetID() string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.ID
}
func (t *CreateProgram_CreateProgram_Program) GetName() string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.Name
}
func (t *CreateProgram_CreateProgram_Program) GetOrganizationID() string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.OrganizationID
}
func (t *CreateProgram_CreateProgram_Program) GetStartDate() *time.Time {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.StartDate
}
func (t *CreateProgram_CreateProgram_Program) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return &t.Status
}
func (t *CreateProgram_CreateProgram_Program) GetTags() []string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.Tags
}
func (t *CreateProgram_CreateProgram_Program) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.UpdatedAt
}
func (t *CreateProgram_CreateProgram_Program) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateProgram_CreateProgram_Program{}
	}
	return t.UpdatedBy
}

type CreateProgram_CreateProgram struct {
	Program CreateProgram_CreateProgram_Program "json:\"program\" graphql:\"program\""
}

func (t *CreateProgram_CreateProgram) GetProgram() *CreateProgram_CreateProgram_Program {
	if t == nil {
		t = &CreateProgram_CreateProgram{}
	}
	return &t.Program
}

type DeleteProgram_DeleteProgram struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteProgram_DeleteProgram) GetDeletedID() string {
	if t == nil {
		t = &DeleteProgram_DeleteProgram{}
	}
	return t.DeletedID
}

type GetAllPrograms_Programs_Edges_Node struct {
	AuditorReadComments  bool                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	CreatedAt            *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string             "json:\"description,omitempty\" graphql:\"description\""
	EndDate              *time.Time          "json:\"endDate,omitempty\" graphql:\"endDate\""
	ID                   string              "json:\"id\" graphql:\"id\""
	Name                 string              "json:\"name\" graphql:\"name\""
	OrganizationID       string              "json:\"organizationID\" graphql:\"organizationID\""
	StartDate            *time.Time          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus "json:\"status\" graphql:\"status\""
	Tags                 []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllPrograms_Programs_Edges_Node) GetAuditorReadComments() bool {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.AuditorReadComments
}
func (t *GetAllPrograms_Programs_Edges_Node) GetAuditorReady() bool {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.AuditorReady
}
func (t *GetAllPrograms_Programs_Edges_Node) GetAuditorWriteComments() bool {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.AuditorWriteComments
}
func (t *GetAllPrograms_Programs_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllPrograms_Programs_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllPrograms_Programs_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllPrograms_Programs_Edges_Node) GetEndDate() *time.Time {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.EndDate
}
func (t *GetAllPrograms_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllPrograms_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllPrograms_Programs_Edges_Node) GetOrganizationID() string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetAllPrograms_Programs_Edges_Node) GetStartDate() *time.Time {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.StartDate
}
func (t *GetAllPrograms_Programs_Edges_Node) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllPrograms_Programs_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllPrograms_Programs_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllPrograms_Programs_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllPrograms_Programs_Edges struct {
	Node *GetAllPrograms_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllPrograms_Programs_Edges) GetNode() *GetAllPrograms_Programs_Edges_Node {
	if t == nil {
		t = &GetAllPrograms_Programs_Edges{}
	}
	return t.Node
}

type GetAllPrograms_Programs struct {
	Edges []*GetAllPrograms_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllPrograms_Programs) GetEdges() []*GetAllPrograms_Programs_Edges {
	if t == nil {
		t = &GetAllPrograms_Programs{}
	}
	return t.Edges
}

type GetProgramByID_Program struct {
	AuditorReadComments  bool                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	CreatedAt            *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string             "json:\"description,omitempty\" graphql:\"description\""
	EndDate              *time.Time          "json:\"endDate,omitempty\" graphql:\"endDate\""
	ID                   string              "json:\"id\" graphql:\"id\""
	Name                 string              "json:\"name\" graphql:\"name\""
	OrganizationID       string              "json:\"organizationID\" graphql:\"organizationID\""
	StartDate            *time.Time          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus "json:\"status\" graphql:\"status\""
	Tags                 []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetProgramByID_Program) GetAuditorReadComments() bool {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.AuditorReadComments
}
func (t *GetProgramByID_Program) GetAuditorReady() bool {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.AuditorReady
}
func (t *GetProgramByID_Program) GetAuditorWriteComments() bool {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.AuditorWriteComments
}
func (t *GetProgramByID_Program) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.CreatedAt
}
func (t *GetProgramByID_Program) GetCreatedBy() *string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.CreatedBy
}
func (t *GetProgramByID_Program) GetDescription() *string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.Description
}
func (t *GetProgramByID_Program) GetEndDate() *time.Time {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.EndDate
}
func (t *GetProgramByID_Program) GetID() string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.ID
}
func (t *GetProgramByID_Program) GetName() string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.Name
}
func (t *GetProgramByID_Program) GetOrganizationID() string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.OrganizationID
}
func (t *GetProgramByID_Program) GetStartDate() *time.Time {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.StartDate
}
func (t *GetProgramByID_Program) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return &t.Status
}
func (t *GetProgramByID_Program) GetTags() []string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.Tags
}
func (t *GetProgramByID_Program) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.UpdatedAt
}
func (t *GetProgramByID_Program) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProgramByID_Program{}
	}
	return t.UpdatedBy
}

type GetPrograms_Programs_Edges_Node struct {
	AuditorReadComments  bool                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	CreatedAt            *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string             "json:\"description,omitempty\" graphql:\"description\""
	EndDate              *time.Time          "json:\"endDate,omitempty\" graphql:\"endDate\""
	ID                   string              "json:\"id\" graphql:\"id\""
	Name                 string              "json:\"name\" graphql:\"name\""
	OrganizationID       string              "json:\"organizationID\" graphql:\"organizationID\""
	StartDate            *time.Time          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus "json:\"status\" graphql:\"status\""
	Tags                 []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetPrograms_Programs_Edges_Node) GetAuditorReadComments() bool {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.AuditorReadComments
}
func (t *GetPrograms_Programs_Edges_Node) GetAuditorReady() bool {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.AuditorReady
}
func (t *GetPrograms_Programs_Edges_Node) GetAuditorWriteComments() bool {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.AuditorWriteComments
}
func (t *GetPrograms_Programs_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetPrograms_Programs_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetPrograms_Programs_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.Description
}
func (t *GetPrograms_Programs_Edges_Node) GetEndDate() *time.Time {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.EndDate
}
func (t *GetPrograms_Programs_Edges_Node) GetID() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.ID
}
func (t *GetPrograms_Programs_Edges_Node) GetName() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.Name
}
func (t *GetPrograms_Programs_Edges_Node) GetOrganizationID() string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetPrograms_Programs_Edges_Node) GetStartDate() *time.Time {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.StartDate
}
func (t *GetPrograms_Programs_Edges_Node) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return &t.Status
}
func (t *GetPrograms_Programs_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.Tags
}
func (t *GetPrograms_Programs_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetPrograms_Programs_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetPrograms_Programs_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetPrograms_Programs_Edges struct {
	Node *GetPrograms_Programs_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetPrograms_Programs_Edges) GetNode() *GetPrograms_Programs_Edges_Node {
	if t == nil {
		t = &GetPrograms_Programs_Edges{}
	}
	return t.Node
}

type GetPrograms_Programs struct {
	Edges []*GetPrograms_Programs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetPrograms_Programs) GetEdges() []*GetPrograms_Programs_Edges {
	if t == nil {
		t = &GetPrograms_Programs{}
	}
	return t.Edges
}

type UpdateProgram_UpdateProgram_Program struct {
	AuditorReadComments  bool                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	CreatedAt            *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string             "json:\"description,omitempty\" graphql:\"description\""
	EndDate              *time.Time          "json:\"endDate,omitempty\" graphql:\"endDate\""
	ID                   string              "json:\"id\" graphql:\"id\""
	Name                 string              "json:\"name\" graphql:\"name\""
	OrganizationID       string              "json:\"organizationID\" graphql:\"organizationID\""
	StartDate            *time.Time          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus "json:\"status\" graphql:\"status\""
	Tags                 []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateProgram_UpdateProgram_Program) GetAuditorReadComments() bool {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.AuditorReadComments
}
func (t *UpdateProgram_UpdateProgram_Program) GetAuditorReady() bool {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.AuditorReady
}
func (t *UpdateProgram_UpdateProgram_Program) GetAuditorWriteComments() bool {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.AuditorWriteComments
}
func (t *UpdateProgram_UpdateProgram_Program) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.CreatedAt
}
func (t *UpdateProgram_UpdateProgram_Program) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.CreatedBy
}
func (t *UpdateProgram_UpdateProgram_Program) GetDescription() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.Description
}
func (t *UpdateProgram_UpdateProgram_Program) GetEndDate() *time.Time {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.EndDate
}
func (t *UpdateProgram_UpdateProgram_Program) GetID() string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.ID
}
func (t *UpdateProgram_UpdateProgram_Program) GetName() string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.Name
}
func (t *UpdateProgram_UpdateProgram_Program) GetOrganizationID() string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.OrganizationID
}
func (t *UpdateProgram_UpdateProgram_Program) GetStartDate() *time.Time {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.StartDate
}
func (t *UpdateProgram_UpdateProgram_Program) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return &t.Status
}
func (t *UpdateProgram_UpdateProgram_Program) GetTags() []string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.Tags
}
func (t *UpdateProgram_UpdateProgram_Program) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.UpdatedAt
}
func (t *UpdateProgram_UpdateProgram_Program) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateProgram_UpdateProgram_Program{}
	}
	return t.UpdatedBy
}

type UpdateProgram_UpdateProgram struct {
	Program UpdateProgram_UpdateProgram_Program "json:\"program\" graphql:\"program\""
}

func (t *UpdateProgram_UpdateProgram) GetProgram() *UpdateProgram_UpdateProgram_Program {
	if t == nil {
		t = &UpdateProgram_UpdateProgram{}
	}
	return &t.Program
}

type GetAllProgramHistories_ProgramHistories_Edges_Node struct {
	AuditorReadComments  bool                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	CreatedAt            *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string             "json:\"description,omitempty\" graphql:\"description\""
	EndDate              *time.Time          "json:\"endDate,omitempty\" graphql:\"endDate\""
	HistoryTime          time.Time           "json:\"historyTime\" graphql:\"historyTime\""
	ID                   string              "json:\"id\" graphql:\"id\""
	Name                 string              "json:\"name\" graphql:\"name\""
	Operation            history.OpType      "json:\"operation\" graphql:\"operation\""
	OrganizationID       string              "json:\"organizationID\" graphql:\"organizationID\""
	Ref                  *string             "json:\"ref,omitempty\" graphql:\"ref\""
	StartDate            *time.Time          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus "json:\"status\" graphql:\"status\""
	Tags                 []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetAuditorReadComments() bool {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.AuditorReadComments
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetAuditorReady() bool {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.AuditorReady
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetAuditorWriteComments() bool {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.AuditorWriteComments
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetEndDate() *time.Time {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.EndDate
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetOrganizationID() string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetStartDate() *time.Time {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.StartDate
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllProgramHistories_ProgramHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllProgramHistories_ProgramHistories_Edges struct {
	Node *GetAllProgramHistories_ProgramHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllProgramHistories_ProgramHistories_Edges) GetNode() *GetAllProgramHistories_ProgramHistories_Edges_Node {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories_Edges{}
	}
	return t.Node
}

type GetAllProgramHistories_ProgramHistories struct {
	Edges []*GetAllProgramHistories_ProgramHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllProgramHistories_ProgramHistories) GetEdges() []*GetAllProgramHistories_ProgramHistories_Edges {
	if t == nil {
		t = &GetAllProgramHistories_ProgramHistories{}
	}
	return t.Edges
}

type GetProgramHistories_ProgramHistories_Edges_Node struct {
	AuditorReadComments  bool                "json:\"auditorReadComments\" graphql:\"auditorReadComments\""
	AuditorReady         bool                "json:\"auditorReady\" graphql:\"auditorReady\""
	AuditorWriteComments bool                "json:\"auditorWriteComments\" graphql:\"auditorWriteComments\""
	CreatedAt            *time.Time          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy            *string             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description          *string             "json:\"description,omitempty\" graphql:\"description\""
	EndDate              *time.Time          "json:\"endDate,omitempty\" graphql:\"endDate\""
	HistoryTime          time.Time           "json:\"historyTime\" graphql:\"historyTime\""
	ID                   string              "json:\"id\" graphql:\"id\""
	Name                 string              "json:\"name\" graphql:\"name\""
	Operation            history.OpType      "json:\"operation\" graphql:\"operation\""
	OrganizationID       string              "json:\"organizationID\" graphql:\"organizationID\""
	Ref                  *string             "json:\"ref,omitempty\" graphql:\"ref\""
	StartDate            *time.Time          "json:\"startDate,omitempty\" graphql:\"startDate\""
	Status               enums.ProgramStatus "json:\"status\" graphql:\"status\""
	Tags                 []string            "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt            *time.Time          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy            *string             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetAuditorReadComments() bool {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.AuditorReadComments
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetAuditorReady() bool {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.AuditorReady
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetAuditorWriteComments() bool {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.AuditorWriteComments
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetEndDate() *time.Time {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.EndDate
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetOrganizationID() string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetStartDate() *time.Time {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.StartDate
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetStatus() *enums.ProgramStatus {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetProgramHistories_ProgramHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetProgramHistories_ProgramHistories_Edges struct {
	Node *GetProgramHistories_ProgramHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetProgramHistories_ProgramHistories_Edges) GetNode() *GetProgramHistories_ProgramHistories_Edges_Node {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories_Edges{}
	}
	return t.Node
}

type GetProgramHistories_ProgramHistories struct {
	Edges []*GetProgramHistories_ProgramHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetProgramHistories_ProgramHistories) GetEdges() []*GetProgramHistories_ProgramHistories_Edges {
	if t == nil {
		t = &GetProgramHistories_ProgramHistories{}
	}
	return t.Edges
}

type CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	ProgramID string     "json:\"programID\" graphql:\"programID\""
	Role      enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID    string     "json:\"userID\" graphql:\"userID\""
}

func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.ID
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetProgramID() string {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.ProgramID
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships) GetUserID() string {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships{}
	}
	return t.UserID
}

type CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership struct {
	ProgramMemberships []*CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships "json:\"programMemberships,omitempty\" graphql:\"programMemberships\""
}

func (t *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership) GetProgramMemberships() []*CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership_ProgramMemberships {
	if t == nil {
		t = &CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership{}
	}
	return t.ProgramMemberships
}

type CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	ProgramID string     "json:\"programID\" graphql:\"programID\""
	Role      enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID    string     "json:\"userID\" graphql:\"userID\""
}

func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.CreatedAt
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.CreatedBy
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.ID
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetProgramID() string {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.ProgramID
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships) GetUserID() string {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships{}
	}
	return t.UserID
}

type CreateBulkProgramMembership_CreateBulkProgramMembership struct {
	ProgramMemberships []*CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships "json:\"programMemberships,omitempty\" graphql:\"programMemberships\""
}

func (t *CreateBulkProgramMembership_CreateBulkProgramMembership) GetProgramMemberships() []*CreateBulkProgramMembership_CreateBulkProgramMembership_ProgramMemberships {
	if t == nil {
		t = &CreateBulkProgramMembership_CreateBulkProgramMembership{}
	}
	return t.ProgramMemberships
}

type CreateProgramMembership_CreateProgramMembership_ProgramMembership struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	ProgramID string     "json:\"programID\" graphql:\"programID\""
	Role      enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID    string     "json:\"userID\" graphql:\"userID\""
}

func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return t.CreatedAt
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetCreatedBy() *string {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return t.CreatedBy
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetID() string {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return t.ID
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetProgramID() string {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return t.ProgramID
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetRole() *enums.Role {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return &t.Role
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return t.UpdatedAt
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return t.UpdatedBy
}
func (t *CreateProgramMembership_CreateProgramMembership_ProgramMembership) GetUserID() string {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership_ProgramMembership{}
	}
	return t.UserID
}

type CreateProgramMembership_CreateProgramMembership struct {
	ProgramMembership CreateProgramMembership_CreateProgramMembership_ProgramMembership "json:\"programMembership\" graphql:\"programMembership\""
}

func (t *CreateProgramMembership_CreateProgramMembership) GetProgramMembership() *CreateProgramMembership_CreateProgramMembership_ProgramMembership {
	if t == nil {
		t = &CreateProgramMembership_CreateProgramMembership{}
	}
	return &t.ProgramMembership
}

type DeleteProgramMembership_DeleteProgramMembership struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteProgramMembership_DeleteProgramMembership) GetDeletedID() string {
	if t == nil {
		t = &DeleteProgramMembership_DeleteProgramMembership{}
	}
	return t.DeletedID
}

type GetAllProgramMemberships_ProgramMemberships_Edges_Node struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	ProgramID string     "json:\"programID\" graphql:\"programID\""
	Role      enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID    string     "json:\"userID\" graphql:\"userID\""
}

func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetProgramID() string {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.ProgramID
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return &t.Role
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllProgramMemberships_ProgramMemberships_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.UserID
}

type GetAllProgramMemberships_ProgramMemberships_Edges struct {
	Node *GetAllProgramMemberships_ProgramMemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllProgramMemberships_ProgramMemberships_Edges) GetNode() *GetAllProgramMemberships_ProgramMemberships_Edges_Node {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships_Edges{}
	}
	return t.Node
}

type GetAllProgramMemberships_ProgramMemberships struct {
	Edges []*GetAllProgramMemberships_ProgramMemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllProgramMemberships_ProgramMemberships) GetEdges() []*GetAllProgramMemberships_ProgramMemberships_Edges {
	if t == nil {
		t = &GetAllProgramMemberships_ProgramMemberships{}
	}
	return t.Edges
}

type GetProgramMembershipByID_ProgramMembership struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	ProgramID string     "json:\"programID\" graphql:\"programID\""
	Role      enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID    string     "json:\"userID\" graphql:\"userID\""
}

func (t *GetProgramMembershipByID_ProgramMembership) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return t.CreatedAt
}
func (t *GetProgramMembershipByID_ProgramMembership) GetCreatedBy() *string {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return t.CreatedBy
}
func (t *GetProgramMembershipByID_ProgramMembership) GetID() string {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return t.ID
}
func (t *GetProgramMembershipByID_ProgramMembership) GetProgramID() string {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return t.ProgramID
}
func (t *GetProgramMembershipByID_ProgramMembership) GetRole() *enums.Role {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return &t.Role
}
func (t *GetProgramMembershipByID_ProgramMembership) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return t.UpdatedAt
}
func (t *GetProgramMembershipByID_ProgramMembership) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return t.UpdatedBy
}
func (t *GetProgramMembershipByID_ProgramMembership) GetUserID() string {
	if t == nil {
		t = &GetProgramMembershipByID_ProgramMembership{}
	}
	return t.UserID
}

type GetProgramMemberships_ProgramMemberships_Edges_Node struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	ProgramID string     "json:\"programID\" graphql:\"programID\""
	Role      enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID    string     "json:\"userID\" graphql:\"userID\""
}

func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.ID
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetProgramID() string {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.ProgramID
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return &t.Role
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetProgramMemberships_ProgramMemberships_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges_Node{}
	}
	return t.UserID
}

type GetProgramMemberships_ProgramMemberships_Edges struct {
	Node *GetProgramMemberships_ProgramMemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetProgramMemberships_ProgramMemberships_Edges) GetNode() *GetProgramMemberships_ProgramMemberships_Edges_Node {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships_Edges{}
	}
	return t.Node
}

type GetProgramMemberships_ProgramMemberships struct {
	Edges []*GetProgramMemberships_ProgramMemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetProgramMemberships_ProgramMemberships) GetEdges() []*GetProgramMemberships_ProgramMemberships_Edges {
	if t == nil {
		t = &GetProgramMemberships_ProgramMemberships{}
	}
	return t.Edges
}

type UpdateProgramMembership_UpdateProgramMembership_ProgramMembership struct {
	CreatedAt *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID        string     "json:\"id\" graphql:\"id\""
	ProgramID string     "json:\"programID\" graphql:\"programID\""
	Role      enums.Role "json:\"role\" graphql:\"role\""
	UpdatedAt *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID    string     "json:\"userID\" graphql:\"userID\""
}

func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return t.CreatedAt
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return t.CreatedBy
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetID() string {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return t.ID
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetProgramID() string {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return t.ProgramID
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetRole() *enums.Role {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return &t.Role
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return t.UpdatedAt
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return t.UpdatedBy
}
func (t *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership) GetUserID() string {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership_ProgramMembership{}
	}
	return t.UserID
}

type UpdateProgramMembership_UpdateProgramMembership struct {
	ProgramMembership UpdateProgramMembership_UpdateProgramMembership_ProgramMembership "json:\"programMembership\" graphql:\"programMembership\""
}

func (t *UpdateProgramMembership_UpdateProgramMembership) GetProgramMembership() *UpdateProgramMembership_UpdateProgramMembership_ProgramMembership {
	if t == nil {
		t = &UpdateProgramMembership_UpdateProgramMembership{}
	}
	return &t.ProgramMembership
}

type GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	ProgramID   string         "json:\"programID\" graphql:\"programID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Role        enums.Role     "json:\"role\" graphql:\"role\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID      string         "json:\"userID\" graphql:\"userID\""
}

func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetProgramID() string {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.ProgramID
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return &t.Role
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.UserID
}

type GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges struct {
	Node *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges) GetNode() *GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges_Node {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges{}
	}
	return t.Node
}

type GetAllProgramMembershipHistories_ProgramMembershipHistories struct {
	Edges []*GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllProgramMembershipHistories_ProgramMembershipHistories) GetEdges() []*GetAllProgramMembershipHistories_ProgramMembershipHistories_Edges {
	if t == nil {
		t = &GetAllProgramMembershipHistories_ProgramMembershipHistories{}
	}
	return t.Edges
}

type GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node struct {
	CreatedAt   *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID          string         "json:\"id\" graphql:\"id\""
	Operation   history.OpType "json:\"operation\" graphql:\"operation\""
	ProgramID   string         "json:\"programID\" graphql:\"programID\""
	Ref         *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Role        enums.Role     "json:\"role\" graphql:\"role\""
	UpdatedAt   *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID      string         "json:\"userID\" graphql:\"userID\""
}

func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetProgramID() string {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.ProgramID
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return &t.Role
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node{}
	}
	return t.UserID
}

type GetProgramMembershipHistories_ProgramMembershipHistories_Edges struct {
	Node *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetProgramMembershipHistories_ProgramMembershipHistories_Edges) GetNode() *GetProgramMembershipHistories_ProgramMembershipHistories_Edges_Node {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories_Edges{}
	}
	return t.Node
}

type GetProgramMembershipHistories_ProgramMembershipHistories struct {
	Edges []*GetProgramMembershipHistories_ProgramMembershipHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetProgramMembershipHistories_ProgramMembershipHistories) GetEdges() []*GetProgramMembershipHistories_ProgramMembershipHistories_Edges {
	if t == nil {
		t = &GetProgramMembershipHistories_ProgramMembershipHistories{}
	}
	return t.Edges
}

type CreateBulkCSVRisk_CreateBulkCSVRisk_Risks struct {
	BusinessCosts *string                "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	CreatedAt     *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string                "json:\"description,omitempty\" graphql:\"description\""
	Details       map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID            string                 "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact      "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood  "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string                "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                 "json:\"name\" graphql:\"name\""
	RiskType      *string                "json:\"riskType,omitempty\" graphql:\"riskType\""
	Satisfies     *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Status        *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetBusinessCosts() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.BusinessCosts
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Description
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Details
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetID() string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.ID
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Impact
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Likelihood
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetMitigation() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Mitigation
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetName() string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Name
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetRiskType() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.RiskType
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetSatisfies() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Satisfies
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetStatus() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Status
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.Tags
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVRisk_CreateBulkCSVRisk_Risks) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk_Risks{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVRisk_CreateBulkCSVRisk struct {
	Risks []*CreateBulkCSVRisk_CreateBulkCSVRisk_Risks "json:\"risks,omitempty\" graphql:\"risks\""
}

func (t *CreateBulkCSVRisk_CreateBulkCSVRisk) GetRisks() []*CreateBulkCSVRisk_CreateBulkCSVRisk_Risks {
	if t == nil {
		t = &CreateBulkCSVRisk_CreateBulkCSVRisk{}
	}
	return t.Risks
}

type CreateBulkRisk_CreateBulkRisk_Risks struct {
	BusinessCosts *string                "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	CreatedAt     *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string                "json:\"description,omitempty\" graphql:\"description\""
	Details       map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID            string                 "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact      "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood  "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string                "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                 "json:\"name\" graphql:\"name\""
	RiskType      *string                "json:\"riskType,omitempty\" graphql:\"riskType\""
	Satisfies     *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Status        *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetBusinessCosts() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.BusinessCosts
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.CreatedAt
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.CreatedBy
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetDescription() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Description
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Details
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetID() string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.ID
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Impact
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Likelihood
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetMitigation() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Mitigation
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetName() string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Name
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetRiskType() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.RiskType
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetSatisfies() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Satisfies
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetStatus() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Status
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetTags() []string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.Tags
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkRisk_CreateBulkRisk_Risks) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk_Risks{}
	}
	return t.UpdatedBy
}

type CreateBulkRisk_CreateBulkRisk struct {
	Risks []*CreateBulkRisk_CreateBulkRisk_Risks "json:\"risks,omitempty\" graphql:\"risks\""
}

func (t *CreateBulkRisk_CreateBulkRisk) GetRisks() []*CreateBulkRisk_CreateBulkRisk_Risks {
	if t == nil {
		t = &CreateBulkRisk_CreateBulkRisk{}
	}
	return t.Risks
}

type CreateRisk_CreateRisk_Risk struct {
	BusinessCosts *string                "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	CreatedAt     *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string                "json:\"description,omitempty\" graphql:\"description\""
	Details       map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID            string                 "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact      "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood  "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string                "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                 "json:\"name\" graphql:\"name\""
	RiskType      *string                "json:\"riskType,omitempty\" graphql:\"riskType\""
	Satisfies     *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Status        *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateRisk_CreateRisk_Risk) GetBusinessCosts() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.BusinessCosts
}
func (t *CreateRisk_CreateRisk_Risk) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.CreatedAt
}
func (t *CreateRisk_CreateRisk_Risk) GetCreatedBy() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.CreatedBy
}
func (t *CreateRisk_CreateRisk_Risk) GetDescription() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Description
}
func (t *CreateRisk_CreateRisk_Risk) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Details
}
func (t *CreateRisk_CreateRisk_Risk) GetID() string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.ID
}
func (t *CreateRisk_CreateRisk_Risk) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Impact
}
func (t *CreateRisk_CreateRisk_Risk) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Likelihood
}
func (t *CreateRisk_CreateRisk_Risk) GetMitigation() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Mitigation
}
func (t *CreateRisk_CreateRisk_Risk) GetName() string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Name
}
func (t *CreateRisk_CreateRisk_Risk) GetRiskType() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.RiskType
}
func (t *CreateRisk_CreateRisk_Risk) GetSatisfies() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Satisfies
}
func (t *CreateRisk_CreateRisk_Risk) GetStatus() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Status
}
func (t *CreateRisk_CreateRisk_Risk) GetTags() []string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.Tags
}
func (t *CreateRisk_CreateRisk_Risk) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.UpdatedAt
}
func (t *CreateRisk_CreateRisk_Risk) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateRisk_CreateRisk_Risk{}
	}
	return t.UpdatedBy
}

type CreateRisk_CreateRisk struct {
	Risk CreateRisk_CreateRisk_Risk "json:\"risk\" graphql:\"risk\""
}

func (t *CreateRisk_CreateRisk) GetRisk() *CreateRisk_CreateRisk_Risk {
	if t == nil {
		t = &CreateRisk_CreateRisk{}
	}
	return &t.Risk
}

type DeleteRisk_DeleteRisk struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteRisk_DeleteRisk) GetDeletedID() string {
	if t == nil {
		t = &DeleteRisk_DeleteRisk{}
	}
	return t.DeletedID
}

type GetAllRisks_Risks_Edges_Node struct {
	BusinessCosts *string                "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	CreatedAt     *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string                "json:\"description,omitempty\" graphql:\"description\""
	Details       map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID            string                 "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact      "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood  "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string                "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                 "json:\"name\" graphql:\"name\""
	RiskType      *string                "json:\"riskType,omitempty\" graphql:\"riskType\""
	Satisfies     *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Status        *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllRisks_Risks_Edges_Node) GetBusinessCosts() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.BusinessCosts
}
func (t *GetAllRisks_Risks_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllRisks_Risks_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllRisks_Risks_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllRisks_Risks_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllRisks_Risks_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllRisks_Risks_Edges_Node) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Impact
}
func (t *GetAllRisks_Risks_Edges_Node) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Likelihood
}
func (t *GetAllRisks_Risks_Edges_Node) GetMitigation() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Mitigation
}
func (t *GetAllRisks_Risks_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllRisks_Risks_Edges_Node) GetRiskType() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.RiskType
}
func (t *GetAllRisks_Risks_Edges_Node) GetSatisfies() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Satisfies
}
func (t *GetAllRisks_Risks_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllRisks_Risks_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllRisks_Risks_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllRisks_Risks_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllRisks_Risks_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllRisks_Risks_Edges struct {
	Node *GetAllRisks_Risks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllRisks_Risks_Edges) GetNode() *GetAllRisks_Risks_Edges_Node {
	if t == nil {
		t = &GetAllRisks_Risks_Edges{}
	}
	return t.Node
}

type GetAllRisks_Risks struct {
	Edges []*GetAllRisks_Risks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllRisks_Risks) GetEdges() []*GetAllRisks_Risks_Edges {
	if t == nil {
		t = &GetAllRisks_Risks{}
	}
	return t.Edges
}

type GetRiskByID_Risk struct {
	BusinessCosts *string                "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	CreatedAt     *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string                "json:\"description,omitempty\" graphql:\"description\""
	Details       map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID            string                 "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact      "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood  "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string                "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                 "json:\"name\" graphql:\"name\""
	RiskType      *string                "json:\"riskType,omitempty\" graphql:\"riskType\""
	Satisfies     *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Status        *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetRiskByID_Risk) GetBusinessCosts() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.BusinessCosts
}
func (t *GetRiskByID_Risk) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.CreatedAt
}
func (t *GetRiskByID_Risk) GetCreatedBy() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.CreatedBy
}
func (t *GetRiskByID_Risk) GetDescription() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Description
}
func (t *GetRiskByID_Risk) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Details
}
func (t *GetRiskByID_Risk) GetID() string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.ID
}
func (t *GetRiskByID_Risk) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Impact
}
func (t *GetRiskByID_Risk) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Likelihood
}
func (t *GetRiskByID_Risk) GetMitigation() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Mitigation
}
func (t *GetRiskByID_Risk) GetName() string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Name
}
func (t *GetRiskByID_Risk) GetRiskType() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.RiskType
}
func (t *GetRiskByID_Risk) GetSatisfies() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Satisfies
}
func (t *GetRiskByID_Risk) GetStatus() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Status
}
func (t *GetRiskByID_Risk) GetTags() []string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.Tags
}
func (t *GetRiskByID_Risk) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.UpdatedAt
}
func (t *GetRiskByID_Risk) GetUpdatedBy() *string {
	if t == nil {
		t = &GetRiskByID_Risk{}
	}
	return t.UpdatedBy
}

type GetRisks_Risks_Edges_Node struct {
	BusinessCosts *string                "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	CreatedAt     *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string                "json:\"description,omitempty\" graphql:\"description\""
	Details       map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID            string                 "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact      "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood  "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string                "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                 "json:\"name\" graphql:\"name\""
	RiskType      *string                "json:\"riskType,omitempty\" graphql:\"riskType\""
	Satisfies     *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Status        *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetRisks_Risks_Edges_Node) GetBusinessCosts() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.BusinessCosts
}
func (t *GetRisks_Risks_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetRisks_Risks_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetRisks_Risks_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Description
}
func (t *GetRisks_Risks_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Details
}
func (t *GetRisks_Risks_Edges_Node) GetID() string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.ID
}
func (t *GetRisks_Risks_Edges_Node) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Impact
}
func (t *GetRisks_Risks_Edges_Node) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Likelihood
}
func (t *GetRisks_Risks_Edges_Node) GetMitigation() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Mitigation
}
func (t *GetRisks_Risks_Edges_Node) GetName() string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Name
}
func (t *GetRisks_Risks_Edges_Node) GetRiskType() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.RiskType
}
func (t *GetRisks_Risks_Edges_Node) GetSatisfies() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Satisfies
}
func (t *GetRisks_Risks_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Status
}
func (t *GetRisks_Risks_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.Tags
}
func (t *GetRisks_Risks_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetRisks_Risks_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetRisks_Risks_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetRisks_Risks_Edges struct {
	Node *GetRisks_Risks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetRisks_Risks_Edges) GetNode() *GetRisks_Risks_Edges_Node {
	if t == nil {
		t = &GetRisks_Risks_Edges{}
	}
	return t.Node
}

type GetRisks_Risks struct {
	Edges []*GetRisks_Risks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetRisks_Risks) GetEdges() []*GetRisks_Risks_Edges {
	if t == nil {
		t = &GetRisks_Risks{}
	}
	return t.Edges
}

type UpdateRisk_UpdateRisk_Risk struct {
	BusinessCosts *string                "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	CreatedAt     *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string                "json:\"description,omitempty\" graphql:\"description\""
	Details       map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	ID            string                 "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact      "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood  "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string                "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                 "json:\"name\" graphql:\"name\""
	RiskType      *string                "json:\"riskType,omitempty\" graphql:\"riskType\""
	Satisfies     *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Status        *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateRisk_UpdateRisk_Risk) GetBusinessCosts() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.BusinessCosts
}
func (t *UpdateRisk_UpdateRisk_Risk) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.CreatedAt
}
func (t *UpdateRisk_UpdateRisk_Risk) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.CreatedBy
}
func (t *UpdateRisk_UpdateRisk_Risk) GetDescription() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Description
}
func (t *UpdateRisk_UpdateRisk_Risk) GetDetails() map[string]interface{} {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Details
}
func (t *UpdateRisk_UpdateRisk_Risk) GetID() string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.ID
}
func (t *UpdateRisk_UpdateRisk_Risk) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Impact
}
func (t *UpdateRisk_UpdateRisk_Risk) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Likelihood
}
func (t *UpdateRisk_UpdateRisk_Risk) GetMitigation() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Mitigation
}
func (t *UpdateRisk_UpdateRisk_Risk) GetName() string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Name
}
func (t *UpdateRisk_UpdateRisk_Risk) GetRiskType() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.RiskType
}
func (t *UpdateRisk_UpdateRisk_Risk) GetSatisfies() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Satisfies
}
func (t *UpdateRisk_UpdateRisk_Risk) GetStatus() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Status
}
func (t *UpdateRisk_UpdateRisk_Risk) GetTags() []string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.Tags
}
func (t *UpdateRisk_UpdateRisk_Risk) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.UpdatedAt
}
func (t *UpdateRisk_UpdateRisk_Risk) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateRisk_UpdateRisk_Risk{}
	}
	return t.UpdatedBy
}

type UpdateRisk_UpdateRisk struct {
	Risk UpdateRisk_UpdateRisk_Risk "json:\"risk\" graphql:\"risk\""
}

func (t *UpdateRisk_UpdateRisk) GetRisk() *UpdateRisk_UpdateRisk_Risk {
	if t == nil {
		t = &UpdateRisk_UpdateRisk{}
	}
	return &t.Risk
}

type GetAllRiskHistories_RiskHistories_Edges_Node struct {
	BusinessCosts *string                "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	CreatedAt     *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string                "json:\"description,omitempty\" graphql:\"description\""
	Details       map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	HistoryTime   time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID            string                 "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact      "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood  "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string                "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                 "json:\"name\" graphql:\"name\""
	Operation     history.OpType         "json:\"operation\" graphql:\"operation\""
	Ref           *string                "json:\"ref,omitempty\" graphql:\"ref\""
	RiskType      *string                "json:\"riskType,omitempty\" graphql:\"riskType\""
	Satisfies     *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Status        *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetBusinessCosts() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.BusinessCosts
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Impact
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Likelihood
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetMitigation() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Mitigation
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetRiskType() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.RiskType
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetSatisfies() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Satisfies
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllRiskHistories_RiskHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllRiskHistories_RiskHistories_Edges struct {
	Node *GetAllRiskHistories_RiskHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllRiskHistories_RiskHistories_Edges) GetNode() *GetAllRiskHistories_RiskHistories_Edges_Node {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories_Edges{}
	}
	return t.Node
}

type GetAllRiskHistories_RiskHistories struct {
	Edges []*GetAllRiskHistories_RiskHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllRiskHistories_RiskHistories) GetEdges() []*GetAllRiskHistories_RiskHistories_Edges {
	if t == nil {
		t = &GetAllRiskHistories_RiskHistories{}
	}
	return t.Edges
}

type GetRiskHistories_RiskHistories_Edges_Node struct {
	BusinessCosts *string                "json:\"businessCosts,omitempty\" graphql:\"businessCosts\""
	CreatedAt     *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description   *string                "json:\"description,omitempty\" graphql:\"description\""
	Details       map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	HistoryTime   time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID            string                 "json:\"id\" graphql:\"id\""
	Impact        *enums.RiskImpact      "json:\"impact,omitempty\" graphql:\"impact\""
	Likelihood    *enums.RiskLikelihood  "json:\"likelihood,omitempty\" graphql:\"likelihood\""
	Mitigation    *string                "json:\"mitigation,omitempty\" graphql:\"mitigation\""
	Name          string                 "json:\"name\" graphql:\"name\""
	Operation     history.OpType         "json:\"operation\" graphql:\"operation\""
	Ref           *string                "json:\"ref,omitempty\" graphql:\"ref\""
	RiskType      *string                "json:\"riskType,omitempty\" graphql:\"riskType\""
	Satisfies     *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	Status        *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags          []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetRiskHistories_RiskHistories_Edges_Node) GetBusinessCosts() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.BusinessCosts
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetImpact() *enums.RiskImpact {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Impact
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetLikelihood() *enums.RiskLikelihood {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Likelihood
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetMitigation() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Mitigation
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetRiskType() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.RiskType
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetSatisfies() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Satisfies
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetRiskHistories_RiskHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetRiskHistories_RiskHistories_Edges struct {
	Node *GetRiskHistories_RiskHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetRiskHistories_RiskHistories_Edges) GetNode() *GetRiskHistories_RiskHistories_Edges_Node {
	if t == nil {
		t = &GetRiskHistories_RiskHistories_Edges{}
	}
	return t.Node
}

type GetRiskHistories_RiskHistories struct {
	Edges []*GetRiskHistories_RiskHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetRiskHistories_RiskHistories) GetEdges() []*GetRiskHistories_RiskHistories_Edges {
	if t == nil {
		t = &GetRiskHistories_RiskHistories{}
	}
	return t.Edges
}

type GlobalSearch_Search_Nodes_APITokenSearchResult_APITokens struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_APITokenSearchResult_APITokens) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_APITokenSearchResult_APITokens{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_APITokenSearchResult_APITokens) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_APITokenSearchResult_APITokens{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_APITokenSearchResult struct {
	APITokens []*GlobalSearch_Search_Nodes_APITokenSearchResult_APITokens "json:\"apiTokens,omitempty\" graphql:\"apiTokens\""
}

func (t *GlobalSearch_Search_Nodes_APITokenSearchResult) GetAPITokens() []*GlobalSearch_Search_Nodes_APITokenSearchResult_APITokens {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_APITokenSearchResult{}
	}
	return t.APITokens
}

type GlobalSearch_Search_Nodes_ActionPlanSearchResult_ActionPlans struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_ActionPlanSearchResult_ActionPlans) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_ActionPlanSearchResult_ActionPlans{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_ActionPlanSearchResult_ActionPlans) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_ActionPlanSearchResult_ActionPlans{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_ActionPlanSearchResult struct {
	ActionPlans []*GlobalSearch_Search_Nodes_ActionPlanSearchResult_ActionPlans "json:\"actionPlans,omitempty\" graphql:\"actionPlans\""
}

func (t *GlobalSearch_Search_Nodes_ActionPlanSearchResult) GetActionPlans() []*GlobalSearch_Search_Nodes_ActionPlanSearchResult_ActionPlans {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_ActionPlanSearchResult{}
	}
	return t.ActionPlans
}

type GlobalSearch_Search_Nodes_ContactSearchResult_Contacts struct {
	FullName string   "json:\"fullName\" graphql:\"fullName\""
	ID       string   "json:\"id\" graphql:\"id\""
	Tags     []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_ContactSearchResult_Contacts) GetFullName() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_ContactSearchResult_Contacts{}
	}
	return t.FullName
}
func (t *GlobalSearch_Search_Nodes_ContactSearchResult_Contacts) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_ContactSearchResult_Contacts{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_ContactSearchResult_Contacts) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_ContactSearchResult_Contacts{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_ContactSearchResult struct {
	Contacts []*GlobalSearch_Search_Nodes_ContactSearchResult_Contacts "json:\"contacts,omitempty\" graphql:\"contacts\""
}

func (t *GlobalSearch_Search_Nodes_ContactSearchResult) GetContacts() []*GlobalSearch_Search_Nodes_ContactSearchResult_Contacts {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_ContactSearchResult{}
	}
	return t.Contacts
}

type GlobalSearch_Search_Nodes_ControlSearchResult_Controls struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_ControlSearchResult_Controls) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_ControlSearchResult_Controls{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_ControlSearchResult_Controls) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_ControlSearchResult_Controls{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_ControlSearchResult struct {
	Controls []*GlobalSearch_Search_Nodes_ControlSearchResult_Controls "json:\"controls,omitempty\" graphql:\"controls\""
}

func (t *GlobalSearch_Search_Nodes_ControlSearchResult) GetControls() []*GlobalSearch_Search_Nodes_ControlSearchResult_Controls {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_ControlSearchResult{}
	}
	return t.Controls
}

type GlobalSearch_Search_Nodes_ControlObjectiveSearchResult_ControlObjectives struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_ControlObjectiveSearchResult_ControlObjectives) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_ControlObjectiveSearchResult_ControlObjectives{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_ControlObjectiveSearchResult_ControlObjectives) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_ControlObjectiveSearchResult_ControlObjectives{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_ControlObjectiveSearchResult struct {
	ControlObjectives []*GlobalSearch_Search_Nodes_ControlObjectiveSearchResult_ControlObjectives "json:\"controlObjectives,omitempty\" graphql:\"controlObjectives\""
}

func (t *GlobalSearch_Search_Nodes_ControlObjectiveSearchResult) GetControlObjectives() []*GlobalSearch_Search_Nodes_ControlObjectiveSearchResult_ControlObjectives {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_ControlObjectiveSearchResult{}
	}
	return t.ControlObjectives
}

type GlobalSearch_Search_Nodes_DocumentDataSearchResult_DocumentData struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_DocumentDataSearchResult_DocumentData) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_DocumentDataSearchResult_DocumentData{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_DocumentDataSearchResult_DocumentData) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_DocumentDataSearchResult_DocumentData{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_DocumentDataSearchResult struct {
	DocumentData []*GlobalSearch_Search_Nodes_DocumentDataSearchResult_DocumentData "json:\"documentData,omitempty\" graphql:\"documentData\""
}

func (t *GlobalSearch_Search_Nodes_DocumentDataSearchResult) GetDocumentData() []*GlobalSearch_Search_Nodes_DocumentDataSearchResult_DocumentData {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_DocumentDataSearchResult{}
	}
	return t.DocumentData
}

type GlobalSearch_Search_Nodes_EntitlementSearchResult_Entitlements struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_EntitlementSearchResult_Entitlements) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_EntitlementSearchResult_Entitlements{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_EntitlementSearchResult_Entitlements) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_EntitlementSearchResult_Entitlements{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_EntitlementSearchResult struct {
	Entitlements []*GlobalSearch_Search_Nodes_EntitlementSearchResult_Entitlements "json:\"entitlements,omitempty\" graphql:\"entitlements\""
}

func (t *GlobalSearch_Search_Nodes_EntitlementSearchResult) GetEntitlements() []*GlobalSearch_Search_Nodes_EntitlementSearchResult_Entitlements {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_EntitlementSearchResult{}
	}
	return t.Entitlements
}

type GlobalSearch_Search_Nodes_EntitlementPlanSearchResult_EntitlementPlans struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_EntitlementPlanSearchResult_EntitlementPlans) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_EntitlementPlanSearchResult_EntitlementPlans{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_EntitlementPlanSearchResult_EntitlementPlans) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_EntitlementPlanSearchResult_EntitlementPlans{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_EntitlementPlanSearchResult struct {
	EntitlementPlans []*GlobalSearch_Search_Nodes_EntitlementPlanSearchResult_EntitlementPlans "json:\"entitlementPlans,omitempty\" graphql:\"entitlementPlans\""
}

func (t *GlobalSearch_Search_Nodes_EntitlementPlanSearchResult) GetEntitlementPlans() []*GlobalSearch_Search_Nodes_EntitlementPlanSearchResult_EntitlementPlans {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_EntitlementPlanSearchResult{}
	}
	return t.EntitlementPlans
}

type GlobalSearch_Search_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_EntitlementPlanFeatureSearchResult struct {
	EntitlementPlanFeatures []*GlobalSearch_Search_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures "json:\"entitlementPlanFeatures,omitempty\" graphql:\"entitlementPlanFeatures\""
}

func (t *GlobalSearch_Search_Nodes_EntitlementPlanFeatureSearchResult) GetEntitlementPlanFeatures() []*GlobalSearch_Search_Nodes_EntitlementPlanFeatureSearchResult_EntitlementPlanFeatures {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_EntitlementPlanFeatureSearchResult{}
	}
	return t.EntitlementPlanFeatures
}

type GlobalSearch_Search_Nodes_EntitySearchResult_Entities struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	DisplayName *string  "json:\"displayName,omitempty\" graphql:\"displayName\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        *string  "json:\"name,omitempty\" graphql:\"name\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_EntitySearchResult_Entities) GetDescription() *string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_EntitySearchResult_Entities{}
	}
	return t.Description
}
func (t *GlobalSearch_Search_Nodes_EntitySearchResult_Entities) GetDisplayName() *string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_EntitySearchResult_Entities{}
	}
	return t.DisplayName
}
func (t *GlobalSearch_Search_Nodes_EntitySearchResult_Entities) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_EntitySearchResult_Entities{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_EntitySearchResult_Entities) GetName() *string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_EntitySearchResult_Entities{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Nodes_EntitySearchResult_Entities) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_EntitySearchResult_Entities{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_EntitySearchResult struct {
	Entities []*GlobalSearch_Search_Nodes_EntitySearchResult_Entities "json:\"entities,omitempty\" graphql:\"entities\""
}

func (t *GlobalSearch_Search_Nodes_EntitySearchResult) GetEntities() []*GlobalSearch_Search_Nodes_EntitySearchResult_Entities {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_EntitySearchResult{}
	}
	return t.Entities
}

type GlobalSearch_Search_Nodes_EntityTypeSearchResult_EntityTypes struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_EntityTypeSearchResult_EntityTypes) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_EntityTypeSearchResult_EntityTypes{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_EntityTypeSearchResult_EntityTypes) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_EntityTypeSearchResult_EntityTypes{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_EntityTypeSearchResult struct {
	EntityTypes []*GlobalSearch_Search_Nodes_EntityTypeSearchResult_EntityTypes "json:\"entityTypes,omitempty\" graphql:\"entityTypes\""
}

func (t *GlobalSearch_Search_Nodes_EntityTypeSearchResult) GetEntityTypes() []*GlobalSearch_Search_Nodes_EntityTypeSearchResult_EntityTypes {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_EntityTypeSearchResult{}
	}
	return t.EntityTypes
}

type GlobalSearch_Search_Nodes_EventSearchResult_Events struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_EventSearchResult_Events) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_EventSearchResult_Events{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_EventSearchResult_Events) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_EventSearchResult_Events{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_EventSearchResult struct {
	Events []*GlobalSearch_Search_Nodes_EventSearchResult_Events "json:\"events,omitempty\" graphql:\"events\""
}

func (t *GlobalSearch_Search_Nodes_EventSearchResult) GetEvents() []*GlobalSearch_Search_Nodes_EventSearchResult_Events {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_EventSearchResult{}
	}
	return t.Events
}

type GlobalSearch_Search_Nodes_FeatureSearchResult_Features struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_FeatureSearchResult_Features) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_FeatureSearchResult_Features{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_FeatureSearchResult_Features) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_FeatureSearchResult_Features{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_FeatureSearchResult struct {
	Features []*GlobalSearch_Search_Nodes_FeatureSearchResult_Features "json:\"features,omitempty\" graphql:\"features\""
}

func (t *GlobalSearch_Search_Nodes_FeatureSearchResult) GetFeatures() []*GlobalSearch_Search_Nodes_FeatureSearchResult_Features {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_FeatureSearchResult{}
	}
	return t.Features
}

type GlobalSearch_Search_Nodes_FileSearchResult_Files struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_FileSearchResult_Files) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_FileSearchResult_Files{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_FileSearchResult_Files) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_FileSearchResult_Files{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_FileSearchResult struct {
	Files []*GlobalSearch_Search_Nodes_FileSearchResult_Files "json:\"files,omitempty\" graphql:\"files\""
}

func (t *GlobalSearch_Search_Nodes_FileSearchResult) GetFiles() []*GlobalSearch_Search_Nodes_FileSearchResult_Files {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_FileSearchResult{}
	}
	return t.Files
}

type GlobalSearch_Search_Nodes_GroupSearchResult_Groups struct {
	DisplayName string   "json:\"displayName\" graphql:\"displayName\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_GroupSearchResult_Groups) GetDisplayName() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_GroupSearchResult_Groups{}
	}
	return t.DisplayName
}
func (t *GlobalSearch_Search_Nodes_GroupSearchResult_Groups) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_GroupSearchResult_Groups{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_GroupSearchResult_Groups) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_GroupSearchResult_Groups{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Nodes_GroupSearchResult_Groups) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_GroupSearchResult_Groups{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_GroupSearchResult struct {
	Groups []*GlobalSearch_Search_Nodes_GroupSearchResult_Groups "json:\"groups,omitempty\" graphql:\"groups\""
}

func (t *GlobalSearch_Search_Nodes_GroupSearchResult) GetGroups() []*GlobalSearch_Search_Nodes_GroupSearchResult_Groups {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_GroupSearchResult{}
	}
	return t.Groups
}

type GlobalSearch_Search_Nodes_GroupSettingSearchResult_GroupSettings struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_GroupSettingSearchResult_GroupSettings) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_GroupSettingSearchResult_GroupSettings{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_GroupSettingSearchResult_GroupSettings) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_GroupSettingSearchResult_GroupSettings{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_GroupSettingSearchResult struct {
	GroupSettings []*GlobalSearch_Search_Nodes_GroupSettingSearchResult_GroupSettings "json:\"groupSettings,omitempty\" graphql:\"groupSettings\""
}

func (t *GlobalSearch_Search_Nodes_GroupSettingSearchResult) GetGroupSettings() []*GlobalSearch_Search_Nodes_GroupSettingSearchResult_GroupSettings {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_GroupSettingSearchResult{}
	}
	return t.GroupSettings
}

type GlobalSearch_Search_Nodes_IntegrationSearchResult_Integrations struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_IntegrationSearchResult_Integrations) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_IntegrationSearchResult_Integrations{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_IntegrationSearchResult_Integrations) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_IntegrationSearchResult_Integrations{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_IntegrationSearchResult struct {
	Integrations []*GlobalSearch_Search_Nodes_IntegrationSearchResult_Integrations "json:\"integrations,omitempty\" graphql:\"integrations\""
}

func (t *GlobalSearch_Search_Nodes_IntegrationSearchResult) GetIntegrations() []*GlobalSearch_Search_Nodes_IntegrationSearchResult_Integrations {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_IntegrationSearchResult{}
	}
	return t.Integrations
}

type GlobalSearch_Search_Nodes_InternalPolicySearchResult_InternalPolicies struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_InternalPolicySearchResult_InternalPolicies) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_InternalPolicySearchResult_InternalPolicies{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_InternalPolicySearchResult_InternalPolicies) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_InternalPolicySearchResult_InternalPolicies{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_InternalPolicySearchResult struct {
	InternalPolicies []*GlobalSearch_Search_Nodes_InternalPolicySearchResult_InternalPolicies "json:\"internalPolicies,omitempty\" graphql:\"internalPolicies\""
}

func (t *GlobalSearch_Search_Nodes_InternalPolicySearchResult) GetInternalPolicies() []*GlobalSearch_Search_Nodes_InternalPolicySearchResult_InternalPolicies {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_InternalPolicySearchResult{}
	}
	return t.InternalPolicies
}

type GlobalSearch_Search_Nodes_NarrativeSearchResult_Narratives struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_NarrativeSearchResult_Narratives) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_NarrativeSearchResult_Narratives{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_NarrativeSearchResult_Narratives) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_NarrativeSearchResult_Narratives{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_NarrativeSearchResult struct {
	Narratives []*GlobalSearch_Search_Nodes_NarrativeSearchResult_Narratives "json:\"narratives,omitempty\" graphql:\"narratives\""
}

func (t *GlobalSearch_Search_Nodes_NarrativeSearchResult) GetNarratives() []*GlobalSearch_Search_Nodes_NarrativeSearchResult_Narratives {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_NarrativeSearchResult{}
	}
	return t.Narratives
}

type GlobalSearch_Search_Nodes_OauthProviderSearchResult_OauthProviders struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_OauthProviderSearchResult_OauthProviders) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_OauthProviderSearchResult_OauthProviders{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_OauthProviderSearchResult_OauthProviders) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_OauthProviderSearchResult_OauthProviders{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_OauthProviderSearchResult struct {
	OauthProviders []*GlobalSearch_Search_Nodes_OauthProviderSearchResult_OauthProviders "json:\"oauthProviders,omitempty\" graphql:\"oauthProviders\""
}

func (t *GlobalSearch_Search_Nodes_OauthProviderSearchResult) GetOauthProviders() []*GlobalSearch_Search_Nodes_OauthProviderSearchResult_OauthProviders {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_OauthProviderSearchResult{}
	}
	return t.OauthProviders
}

type GlobalSearch_Search_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_OhAuthTooTokenSearchResult struct {
	OhAuthTooTokens []*GlobalSearch_Search_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens "json:\"ohAuthTooTokens,omitempty\" graphql:\"ohAuthTooTokens\""
}

func (t *GlobalSearch_Search_Nodes_OhAuthTooTokenSearchResult) GetOhAuthTooTokens() []*GlobalSearch_Search_Nodes_OhAuthTooTokenSearchResult_OhAuthTooTokens {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_OhAuthTooTokenSearchResult{}
	}
	return t.OhAuthTooTokens
}

type GlobalSearch_Search_Nodes_OrganizationSearchResult_Organizations struct {
	DisplayName string   "json:\"displayName\" graphql:\"displayName\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_OrganizationSearchResult_Organizations) GetDisplayName() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_OrganizationSearchResult_Organizations{}
	}
	return t.DisplayName
}
func (t *GlobalSearch_Search_Nodes_OrganizationSearchResult_Organizations) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_OrganizationSearchResult_Organizations{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_OrganizationSearchResult_Organizations) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_OrganizationSearchResult_Organizations{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Nodes_OrganizationSearchResult_Organizations) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_OrganizationSearchResult_Organizations{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_OrganizationSearchResult struct {
	Organizations []*GlobalSearch_Search_Nodes_OrganizationSearchResult_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
}

func (t *GlobalSearch_Search_Nodes_OrganizationSearchResult) GetOrganizations() []*GlobalSearch_Search_Nodes_OrganizationSearchResult_Organizations {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_OrganizationSearchResult{}
	}
	return t.Organizations
}

type GlobalSearch_Search_Nodes_OrganizationSettingSearchResult_OrganizationSettings struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_OrganizationSettingSearchResult_OrganizationSettings) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_OrganizationSettingSearchResult_OrganizationSettings{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_OrganizationSettingSearchResult_OrganizationSettings) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_OrganizationSettingSearchResult_OrganizationSettings{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_OrganizationSettingSearchResult struct {
	OrganizationSettings []*GlobalSearch_Search_Nodes_OrganizationSettingSearchResult_OrganizationSettings "json:\"organizationSettings,omitempty\" graphql:\"organizationSettings\""
}

func (t *GlobalSearch_Search_Nodes_OrganizationSettingSearchResult) GetOrganizationSettings() []*GlobalSearch_Search_Nodes_OrganizationSettingSearchResult_OrganizationSettings {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_OrganizationSettingSearchResult{}
	}
	return t.OrganizationSettings
}

type GlobalSearch_Search_Nodes_PersonalAccessTokenSearchResult_PersonalAccessTokens struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_PersonalAccessTokenSearchResult_PersonalAccessTokens) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_PersonalAccessTokenSearchResult_PersonalAccessTokens{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_PersonalAccessTokenSearchResult_PersonalAccessTokens) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_PersonalAccessTokenSearchResult_PersonalAccessTokens{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_PersonalAccessTokenSearchResult struct {
	PersonalAccessTokens []*GlobalSearch_Search_Nodes_PersonalAccessTokenSearchResult_PersonalAccessTokens "json:\"personalAccessTokens,omitempty\" graphql:\"personalAccessTokens\""
}

func (t *GlobalSearch_Search_Nodes_PersonalAccessTokenSearchResult) GetPersonalAccessTokens() []*GlobalSearch_Search_Nodes_PersonalAccessTokenSearchResult_PersonalAccessTokens {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_PersonalAccessTokenSearchResult{}
	}
	return t.PersonalAccessTokens
}

type GlobalSearch_Search_Nodes_ProcedureSearchResult_Procedures struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_ProcedureSearchResult_Procedures) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_ProcedureSearchResult_Procedures{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_ProcedureSearchResult_Procedures) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_ProcedureSearchResult_Procedures{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_ProcedureSearchResult struct {
	Procedures []*GlobalSearch_Search_Nodes_ProcedureSearchResult_Procedures "json:\"procedures,omitempty\" graphql:\"procedures\""
}

func (t *GlobalSearch_Search_Nodes_ProcedureSearchResult) GetProcedures() []*GlobalSearch_Search_Nodes_ProcedureSearchResult_Procedures {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_ProcedureSearchResult{}
	}
	return t.Procedures
}

type GlobalSearch_Search_Nodes_ProgramSearchResult_Programs struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_ProgramSearchResult_Programs) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_ProgramSearchResult_Programs{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_ProgramSearchResult_Programs) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_ProgramSearchResult_Programs{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_ProgramSearchResult struct {
	Programs []*GlobalSearch_Search_Nodes_ProgramSearchResult_Programs "json:\"programs,omitempty\" graphql:\"programs\""
}

func (t *GlobalSearch_Search_Nodes_ProgramSearchResult) GetPrograms() []*GlobalSearch_Search_Nodes_ProgramSearchResult_Programs {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_ProgramSearchResult{}
	}
	return t.Programs
}

type GlobalSearch_Search_Nodes_RiskSearchResult_Risks struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_RiskSearchResult_Risks) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_RiskSearchResult_Risks{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_RiskSearchResult_Risks) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_RiskSearchResult_Risks{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_RiskSearchResult struct {
	Risks []*GlobalSearch_Search_Nodes_RiskSearchResult_Risks "json:\"risks,omitempty\" graphql:\"risks\""
}

func (t *GlobalSearch_Search_Nodes_RiskSearchResult) GetRisks() []*GlobalSearch_Search_Nodes_RiskSearchResult_Risks {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_RiskSearchResult{}
	}
	return t.Risks
}

type GlobalSearch_Search_Nodes_StandardSearchResult_Standards struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_StandardSearchResult_Standards) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_StandardSearchResult_Standards{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_StandardSearchResult_Standards) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_StandardSearchResult_Standards{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_StandardSearchResult struct {
	Standards []*GlobalSearch_Search_Nodes_StandardSearchResult_Standards "json:\"standards,omitempty\" graphql:\"standards\""
}

func (t *GlobalSearch_Search_Nodes_StandardSearchResult) GetStandards() []*GlobalSearch_Search_Nodes_StandardSearchResult_Standards {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_StandardSearchResult{}
	}
	return t.Standards
}

type GlobalSearch_Search_Nodes_SubcontrolSearchResult_Subcontrols struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_SubcontrolSearchResult_Subcontrols) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_SubcontrolSearchResult_Subcontrols{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_SubcontrolSearchResult_Subcontrols) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_SubcontrolSearchResult_Subcontrols{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_SubcontrolSearchResult struct {
	Subcontrols []*GlobalSearch_Search_Nodes_SubcontrolSearchResult_Subcontrols "json:\"subcontrols,omitempty\" graphql:\"subcontrols\""
}

func (t *GlobalSearch_Search_Nodes_SubcontrolSearchResult) GetSubcontrols() []*GlobalSearch_Search_Nodes_SubcontrolSearchResult_Subcontrols {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_SubcontrolSearchResult{}
	}
	return t.Subcontrols
}

type GlobalSearch_Search_Nodes_SubscriberSearchResult_Subscribers struct {
	Email string   "json:\"email\" graphql:\"email\""
	ID    string   "json:\"id\" graphql:\"id\""
	Tags  []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_SubscriberSearchResult_Subscribers) GetEmail() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_SubscriberSearchResult_Subscribers{}
	}
	return t.Email
}
func (t *GlobalSearch_Search_Nodes_SubscriberSearchResult_Subscribers) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_SubscriberSearchResult_Subscribers{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_SubscriberSearchResult_Subscribers) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_SubscriberSearchResult_Subscribers{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_SubscriberSearchResult struct {
	Subscribers []*GlobalSearch_Search_Nodes_SubscriberSearchResult_Subscribers "json:\"subscribers,omitempty\" graphql:\"subscribers\""
}

func (t *GlobalSearch_Search_Nodes_SubscriberSearchResult) GetSubscribers() []*GlobalSearch_Search_Nodes_SubscriberSearchResult_Subscribers {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_SubscriberSearchResult{}
	}
	return t.Subscribers
}

type GlobalSearch_Search_Nodes_TFASettingSearchResult_TFASettings struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_TFASettingSearchResult_TFASettings) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_TFASettingSearchResult_TFASettings{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_TFASettingSearchResult_TFASettings) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_TFASettingSearchResult_TFASettings{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_TFASettingSearchResult struct {
	TFASettings []*GlobalSearch_Search_Nodes_TFASettingSearchResult_TFASettings "json:\"tFASettings,omitempty\" graphql:\"tFASettings\""
}

func (t *GlobalSearch_Search_Nodes_TFASettingSearchResult) GetTFASettings() []*GlobalSearch_Search_Nodes_TFASettingSearchResult_TFASettings {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_TFASettingSearchResult{}
	}
	return t.TFASettings
}

type GlobalSearch_Search_Nodes_TaskSearchResult_Tasks struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_TaskSearchResult_Tasks) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_TaskSearchResult_Tasks{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_TaskSearchResult_Tasks) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_TaskSearchResult_Tasks{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_TaskSearchResult struct {
	Tasks []*GlobalSearch_Search_Nodes_TaskSearchResult_Tasks "json:\"tasks,omitempty\" graphql:\"tasks\""
}

func (t *GlobalSearch_Search_Nodes_TaskSearchResult) GetTasks() []*GlobalSearch_Search_Nodes_TaskSearchResult_Tasks {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_TaskSearchResult{}
	}
	return t.Tasks
}

type GlobalSearch_Search_Nodes_TemplateSearchResult_Templates struct {
	ID         string          "json:\"id\" graphql:\"id\""
	Jsonconfig json.RawMessage "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name       string          "json:\"name\" graphql:\"name\""
	Tags       []string        "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_TemplateSearchResult_Templates) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_TemplateSearchResult_Templates{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_TemplateSearchResult_Templates) GetJsonconfig() *json.RawMessage {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_TemplateSearchResult_Templates{}
	}
	return &t.Jsonconfig
}
func (t *GlobalSearch_Search_Nodes_TemplateSearchResult_Templates) GetName() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_TemplateSearchResult_Templates{}
	}
	return t.Name
}
func (t *GlobalSearch_Search_Nodes_TemplateSearchResult_Templates) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_TemplateSearchResult_Templates{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_TemplateSearchResult struct {
	Templates []*GlobalSearch_Search_Nodes_TemplateSearchResult_Templates "json:\"templates,omitempty\" graphql:\"templates\""
}

func (t *GlobalSearch_Search_Nodes_TemplateSearchResult) GetTemplates() []*GlobalSearch_Search_Nodes_TemplateSearchResult_Templates {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_TemplateSearchResult{}
	}
	return t.Templates
}

type GlobalSearch_Search_Nodes_UserSearchResult_Users struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_UserSearchResult_Users) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_UserSearchResult_Users{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_UserSearchResult_Users) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_UserSearchResult_Users{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_UserSearchResult struct {
	Users []*GlobalSearch_Search_Nodes_UserSearchResult_Users "json:\"users,omitempty\" graphql:\"users\""
}

func (t *GlobalSearch_Search_Nodes_UserSearchResult) GetUsers() []*GlobalSearch_Search_Nodes_UserSearchResult_Users {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_UserSearchResult{}
	}
	return t.Users
}

type GlobalSearch_Search_Nodes_UserSettingSearchResult_UserSettings struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_UserSettingSearchResult_UserSettings) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_UserSettingSearchResult_UserSettings{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_UserSettingSearchResult_UserSettings) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_UserSettingSearchResult_UserSettings{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_UserSettingSearchResult struct {
	UserSettings []*GlobalSearch_Search_Nodes_UserSettingSearchResult_UserSettings "json:\"userSettings,omitempty\" graphql:\"userSettings\""
}

func (t *GlobalSearch_Search_Nodes_UserSettingSearchResult) GetUserSettings() []*GlobalSearch_Search_Nodes_UserSettingSearchResult_UserSettings {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_UserSettingSearchResult{}
	}
	return t.UserSettings
}

type GlobalSearch_Search_Nodes_WebhookSearchResult_Webhooks struct {
	ID   string   "json:\"id\" graphql:\"id\""
	Tags []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GlobalSearch_Search_Nodes_WebhookSearchResult_Webhooks) GetID() string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_WebhookSearchResult_Webhooks{}
	}
	return t.ID
}
func (t *GlobalSearch_Search_Nodes_WebhookSearchResult_Webhooks) GetTags() []string {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_WebhookSearchResult_Webhooks{}
	}
	return t.Tags
}

type GlobalSearch_Search_Nodes_WebhookSearchResult struct {
	Webhooks []*GlobalSearch_Search_Nodes_WebhookSearchResult_Webhooks "json:\"webhooks,omitempty\" graphql:\"webhooks\""
}

func (t *GlobalSearch_Search_Nodes_WebhookSearchResult) GetWebhooks() []*GlobalSearch_Search_Nodes_WebhookSearchResult_Webhooks {
	if t == nil {
		t = &GlobalSearch_Search_Nodes_WebhookSearchResult{}
	}
	return t.Webhooks
}

type GlobalSearch_Search_Nodes struct {
	APITokenSearchResult               GlobalSearch_Search_Nodes_APITokenSearchResult               "graphql:\"... on APITokenSearchResult\""
	ActionPlanSearchResult             GlobalSearch_Search_Nodes_ActionPlanSearchResult             "graphql:\"... on ActionPlanSearchResult\""
	ContactSearchResult                GlobalSearch_Search_Nodes_ContactSearchResult                "graphql:\"... on ContactSearchResult\""
	ControlSearchResult                GlobalSearch_Search_Nodes_ControlSearchResult                "graphql:\"... on ControlSearchResult\""
	ControlObjectiveSearchResult       GlobalSearch_Search_Nodes_ControlObjectiveSearchResult       "graphql:\"... on ControlObjectiveSearchResult\""
	DocumentDataSearchResult           GlobalSearch_Search_Nodes_DocumentDataSearchResult           "graphql:\"... on DocumentDataSearchResult\""
	EntitlementSearchResult            GlobalSearch_Search_Nodes_EntitlementSearchResult            "graphql:\"... on EntitlementSearchResult\""
	EntitlementPlanSearchResult        GlobalSearch_Search_Nodes_EntitlementPlanSearchResult        "graphql:\"... on EntitlementPlanSearchResult\""
	EntitlementPlanFeatureSearchResult GlobalSearch_Search_Nodes_EntitlementPlanFeatureSearchResult "graphql:\"... on EntitlementPlanFeatureSearchResult\""
	EntitySearchResult                 GlobalSearch_Search_Nodes_EntitySearchResult                 "graphql:\"... on EntitySearchResult\""
	EntityTypeSearchResult             GlobalSearch_Search_Nodes_EntityTypeSearchResult             "graphql:\"... on EntityTypeSearchResult\""
	EventSearchResult                  GlobalSearch_Search_Nodes_EventSearchResult                  "graphql:\"... on EventSearchResult\""
	FeatureSearchResult                GlobalSearch_Search_Nodes_FeatureSearchResult                "graphql:\"... on FeatureSearchResult\""
	FileSearchResult                   GlobalSearch_Search_Nodes_FileSearchResult                   "graphql:\"... on FileSearchResult\""
	GroupSearchResult                  GlobalSearch_Search_Nodes_GroupSearchResult                  "graphql:\"... on GroupSearchResult\""
	GroupSettingSearchResult           GlobalSearch_Search_Nodes_GroupSettingSearchResult           "graphql:\"... on GroupSettingSearchResult\""
	IntegrationSearchResult            GlobalSearch_Search_Nodes_IntegrationSearchResult            "graphql:\"... on IntegrationSearchResult\""
	InternalPolicySearchResult         GlobalSearch_Search_Nodes_InternalPolicySearchResult         "graphql:\"... on InternalPolicySearchResult\""
	NarrativeSearchResult              GlobalSearch_Search_Nodes_NarrativeSearchResult              "graphql:\"... on NarrativeSearchResult\""
	OauthProviderSearchResult          GlobalSearch_Search_Nodes_OauthProviderSearchResult          "graphql:\"... on OauthProviderSearchResult\""
	OhAuthTooTokenSearchResult         GlobalSearch_Search_Nodes_OhAuthTooTokenSearchResult         "graphql:\"... on OhAuthTooTokenSearchResult\""
	OrganizationSearchResult           GlobalSearch_Search_Nodes_OrganizationSearchResult           "graphql:\"... on OrganizationSearchResult\""
	OrganizationSettingSearchResult    GlobalSearch_Search_Nodes_OrganizationSettingSearchResult    "graphql:\"... on OrganizationSettingSearchResult\""
	PersonalAccessTokenSearchResult    GlobalSearch_Search_Nodes_PersonalAccessTokenSearchResult    "graphql:\"... on PersonalAccessTokenSearchResult\""
	ProcedureSearchResult              GlobalSearch_Search_Nodes_ProcedureSearchResult              "graphql:\"... on ProcedureSearchResult\""
	ProgramSearchResult                GlobalSearch_Search_Nodes_ProgramSearchResult                "graphql:\"... on ProgramSearchResult\""
	RiskSearchResult                   GlobalSearch_Search_Nodes_RiskSearchResult                   "graphql:\"... on RiskSearchResult\""
	StandardSearchResult               GlobalSearch_Search_Nodes_StandardSearchResult               "graphql:\"... on StandardSearchResult\""
	SubcontrolSearchResult             GlobalSearch_Search_Nodes_SubcontrolSearchResult             "graphql:\"... on SubcontrolSearchResult\""
	SubscriberSearchResult             GlobalSearch_Search_Nodes_SubscriberSearchResult             "graphql:\"... on SubscriberSearchResult\""
	TFASettingSearchResult             GlobalSearch_Search_Nodes_TFASettingSearchResult             "graphql:\"... on TFASettingSearchResult\""
	TaskSearchResult                   GlobalSearch_Search_Nodes_TaskSearchResult                   "graphql:\"... on TaskSearchResult\""
	TemplateSearchResult               GlobalSearch_Search_Nodes_TemplateSearchResult               "graphql:\"... on TemplateSearchResult\""
	UserSearchResult                   GlobalSearch_Search_Nodes_UserSearchResult                   "graphql:\"... on UserSearchResult\""
	UserSettingSearchResult            GlobalSearch_Search_Nodes_UserSettingSearchResult            "graphql:\"... on UserSettingSearchResult\""
	WebhookSearchResult                GlobalSearch_Search_Nodes_WebhookSearchResult                "graphql:\"... on WebhookSearchResult\""
}

func (t *GlobalSearch_Search_Nodes) GetAPITokenSearchResult() *GlobalSearch_Search_Nodes_APITokenSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.APITokenSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetActionPlanSearchResult() *GlobalSearch_Search_Nodes_ActionPlanSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.ActionPlanSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetContactSearchResult() *GlobalSearch_Search_Nodes_ContactSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.ContactSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetControlSearchResult() *GlobalSearch_Search_Nodes_ControlSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.ControlSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetControlObjectiveSearchResult() *GlobalSearch_Search_Nodes_ControlObjectiveSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.ControlObjectiveSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetDocumentDataSearchResult() *GlobalSearch_Search_Nodes_DocumentDataSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.DocumentDataSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetEntitlementSearchResult() *GlobalSearch_Search_Nodes_EntitlementSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.EntitlementSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetEntitlementPlanSearchResult() *GlobalSearch_Search_Nodes_EntitlementPlanSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.EntitlementPlanSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetEntitlementPlanFeatureSearchResult() *GlobalSearch_Search_Nodes_EntitlementPlanFeatureSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.EntitlementPlanFeatureSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetEntitySearchResult() *GlobalSearch_Search_Nodes_EntitySearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.EntitySearchResult
}
func (t *GlobalSearch_Search_Nodes) GetEntityTypeSearchResult() *GlobalSearch_Search_Nodes_EntityTypeSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.EntityTypeSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetEventSearchResult() *GlobalSearch_Search_Nodes_EventSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.EventSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetFeatureSearchResult() *GlobalSearch_Search_Nodes_FeatureSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.FeatureSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetFileSearchResult() *GlobalSearch_Search_Nodes_FileSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.FileSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetGroupSearchResult() *GlobalSearch_Search_Nodes_GroupSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.GroupSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetGroupSettingSearchResult() *GlobalSearch_Search_Nodes_GroupSettingSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.GroupSettingSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetIntegrationSearchResult() *GlobalSearch_Search_Nodes_IntegrationSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.IntegrationSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetInternalPolicySearchResult() *GlobalSearch_Search_Nodes_InternalPolicySearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.InternalPolicySearchResult
}
func (t *GlobalSearch_Search_Nodes) GetNarrativeSearchResult() *GlobalSearch_Search_Nodes_NarrativeSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.NarrativeSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetOauthProviderSearchResult() *GlobalSearch_Search_Nodes_OauthProviderSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.OauthProviderSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetOhAuthTooTokenSearchResult() *GlobalSearch_Search_Nodes_OhAuthTooTokenSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.OhAuthTooTokenSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetOrganizationSearchResult() *GlobalSearch_Search_Nodes_OrganizationSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.OrganizationSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetOrganizationSettingSearchResult() *GlobalSearch_Search_Nodes_OrganizationSettingSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.OrganizationSettingSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetPersonalAccessTokenSearchResult() *GlobalSearch_Search_Nodes_PersonalAccessTokenSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.PersonalAccessTokenSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetProcedureSearchResult() *GlobalSearch_Search_Nodes_ProcedureSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.ProcedureSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetProgramSearchResult() *GlobalSearch_Search_Nodes_ProgramSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.ProgramSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetRiskSearchResult() *GlobalSearch_Search_Nodes_RiskSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.RiskSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetStandardSearchResult() *GlobalSearch_Search_Nodes_StandardSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.StandardSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetSubcontrolSearchResult() *GlobalSearch_Search_Nodes_SubcontrolSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.SubcontrolSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetSubscriberSearchResult() *GlobalSearch_Search_Nodes_SubscriberSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.SubscriberSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetTFASettingSearchResult() *GlobalSearch_Search_Nodes_TFASettingSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.TFASettingSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetTaskSearchResult() *GlobalSearch_Search_Nodes_TaskSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.TaskSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetTemplateSearchResult() *GlobalSearch_Search_Nodes_TemplateSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.TemplateSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetUserSearchResult() *GlobalSearch_Search_Nodes_UserSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.UserSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetUserSettingSearchResult() *GlobalSearch_Search_Nodes_UserSettingSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.UserSettingSearchResult
}
func (t *GlobalSearch_Search_Nodes) GetWebhookSearchResult() *GlobalSearch_Search_Nodes_WebhookSearchResult {
	if t == nil {
		t = &GlobalSearch_Search_Nodes{}
	}
	return &t.WebhookSearchResult
}

type GlobalSearch_Search struct {
	Nodes []*GlobalSearch_Search_Nodes "json:\"nodes\" graphql:\"nodes\""
}

func (t *GlobalSearch_Search) GetNodes() []*GlobalSearch_Search_Nodes {
	if t == nil {
		t = &GlobalSearch_Search{}
	}
	return t.Nodes
}

type CreateBulkCSVStandard_CreateBulkCSVStandard_Standards struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                "json:\"description,omitempty\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family          *string                "json:\"family,omitempty\" graphql:\"family\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Satisfies       *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	StandardType    *string                "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateBulkCSVStandard_CreateBulkCSVStandard_Standards) GetBackground() *string {
	if t == nil {
		t = &CreateBulkCSVStandard_CreateBulkCSVStandard_Standards{}
	}
	return t.Background
}
func (t *CreateBulkCSVStandard_CreateBulkCSVStandard_Standards) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVStandard_CreateBulkCSVStandard_Standards{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVStandard_CreateBulkCSVStandard_Standards) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVStandard_CreateBulkCSVStandard_Standards{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVStandard_CreateBulkCSVStandard_Standards) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVStandard_CreateBulkCSVStandard_Standards{}
	}
	return t.Description
}
func (t *CreateBulkCSVStandard_CreateBulkCSVStandard_Standards) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateBulkCSVStandard_CreateBulkCSVStandard_Standards{}
	}
	return t.Details
}
func (t *CreateBulkCSVStandard_CreateBulkCSVStandard_Standards) GetFamily() *string {
	if t == nil {
		t = &CreateBulkCSVStandard_CreateBulkCSVStandard_Standards{}
	}
	return t.Family
}
func (t *CreateBulkCSVStandard_CreateBulkCSVStandard_Standards) GetID() string {
	if t == nil {
		t = &CreateBulkCSVStandard_CreateBulkCSVStandard_Standards{}
	}
	return t.ID
}
func (t *CreateBulkCSVStandard_CreateBulkCSVStandard_Standards) GetName() string {
	if t == nil {
		t = &CreateBulkCSVStandard_CreateBulkCSVStandard_Standards{}
	}
	return t.Name
}
func (t *CreateBulkCSVStandard_CreateBulkCSVStandard_Standards) GetPurposeAndScope() *string {
	if t == nil {
		t = &CreateBulkCSVStandard_CreateBulkCSVStandard_Standards{}
	}
	return t.PurposeAndScope
}
func (t *CreateBulkCSVStandard_CreateBulkCSVStandard_Standards) GetSatisfies() *string {
	if t == nil {
		t = &CreateBulkCSVStandard_CreateBulkCSVStandard_Standards{}
	}
	return t.Satisfies
}
func (t *CreateBulkCSVStandard_CreateBulkCSVStandard_Standards) GetStandardType() *string {
	if t == nil {
		t = &CreateBulkCSVStandard_CreateBulkCSVStandard_Standards{}
	}
	return t.StandardType
}
func (t *CreateBulkCSVStandard_CreateBulkCSVStandard_Standards) GetStatus() *string {
	if t == nil {
		t = &CreateBulkCSVStandard_CreateBulkCSVStandard_Standards{}
	}
	return t.Status
}
func (t *CreateBulkCSVStandard_CreateBulkCSVStandard_Standards) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVStandard_CreateBulkCSVStandard_Standards{}
	}
	return t.Tags
}
func (t *CreateBulkCSVStandard_CreateBulkCSVStandard_Standards) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVStandard_CreateBulkCSVStandard_Standards{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVStandard_CreateBulkCSVStandard_Standards) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVStandard_CreateBulkCSVStandard_Standards{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkCSVStandard_CreateBulkCSVStandard_Standards) GetVersion() *string {
	if t == nil {
		t = &CreateBulkCSVStandard_CreateBulkCSVStandard_Standards{}
	}
	return t.Version
}

type CreateBulkCSVStandard_CreateBulkCSVStandard struct {
	Standards []*CreateBulkCSVStandard_CreateBulkCSVStandard_Standards "json:\"standards,omitempty\" graphql:\"standards\""
}

func (t *CreateBulkCSVStandard_CreateBulkCSVStandard) GetStandards() []*CreateBulkCSVStandard_CreateBulkCSVStandard_Standards {
	if t == nil {
		t = &CreateBulkCSVStandard_CreateBulkCSVStandard{}
	}
	return t.Standards
}

type CreateBulkStandard_CreateBulkStandard_Standards struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                "json:\"description,omitempty\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family          *string                "json:\"family,omitempty\" graphql:\"family\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Satisfies       *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	StandardType    *string                "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateBulkStandard_CreateBulkStandard_Standards) GetBackground() *string {
	if t == nil {
		t = &CreateBulkStandard_CreateBulkStandard_Standards{}
	}
	return t.Background
}
func (t *CreateBulkStandard_CreateBulkStandard_Standards) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkStandard_CreateBulkStandard_Standards{}
	}
	return t.CreatedAt
}
func (t *CreateBulkStandard_CreateBulkStandard_Standards) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkStandard_CreateBulkStandard_Standards{}
	}
	return t.CreatedBy
}
func (t *CreateBulkStandard_CreateBulkStandard_Standards) GetDescription() *string {
	if t == nil {
		t = &CreateBulkStandard_CreateBulkStandard_Standards{}
	}
	return t.Description
}
func (t *CreateBulkStandard_CreateBulkStandard_Standards) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateBulkStandard_CreateBulkStandard_Standards{}
	}
	return t.Details
}
func (t *CreateBulkStandard_CreateBulkStandard_Standards) GetFamily() *string {
	if t == nil {
		t = &CreateBulkStandard_CreateBulkStandard_Standards{}
	}
	return t.Family
}
func (t *CreateBulkStandard_CreateBulkStandard_Standards) GetID() string {
	if t == nil {
		t = &CreateBulkStandard_CreateBulkStandard_Standards{}
	}
	return t.ID
}
func (t *CreateBulkStandard_CreateBulkStandard_Standards) GetName() string {
	if t == nil {
		t = &CreateBulkStandard_CreateBulkStandard_Standards{}
	}
	return t.Name
}
func (t *CreateBulkStandard_CreateBulkStandard_Standards) GetPurposeAndScope() *string {
	if t == nil {
		t = &CreateBulkStandard_CreateBulkStandard_Standards{}
	}
	return t.PurposeAndScope
}
func (t *CreateBulkStandard_CreateBulkStandard_Standards) GetSatisfies() *string {
	if t == nil {
		t = &CreateBulkStandard_CreateBulkStandard_Standards{}
	}
	return t.Satisfies
}
func (t *CreateBulkStandard_CreateBulkStandard_Standards) GetStandardType() *string {
	if t == nil {
		t = &CreateBulkStandard_CreateBulkStandard_Standards{}
	}
	return t.StandardType
}
func (t *CreateBulkStandard_CreateBulkStandard_Standards) GetStatus() *string {
	if t == nil {
		t = &CreateBulkStandard_CreateBulkStandard_Standards{}
	}
	return t.Status
}
func (t *CreateBulkStandard_CreateBulkStandard_Standards) GetTags() []string {
	if t == nil {
		t = &CreateBulkStandard_CreateBulkStandard_Standards{}
	}
	return t.Tags
}
func (t *CreateBulkStandard_CreateBulkStandard_Standards) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkStandard_CreateBulkStandard_Standards{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkStandard_CreateBulkStandard_Standards) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkStandard_CreateBulkStandard_Standards{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkStandard_CreateBulkStandard_Standards) GetVersion() *string {
	if t == nil {
		t = &CreateBulkStandard_CreateBulkStandard_Standards{}
	}
	return t.Version
}

type CreateBulkStandard_CreateBulkStandard struct {
	Standards []*CreateBulkStandard_CreateBulkStandard_Standards "json:\"standards,omitempty\" graphql:\"standards\""
}

func (t *CreateBulkStandard_CreateBulkStandard) GetStandards() []*CreateBulkStandard_CreateBulkStandard_Standards {
	if t == nil {
		t = &CreateBulkStandard_CreateBulkStandard{}
	}
	return t.Standards
}

type CreateStandard_CreateStandard_Standard struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                "json:\"description,omitempty\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family          *string                "json:\"family,omitempty\" graphql:\"family\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Satisfies       *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	StandardType    *string                "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateStandard_CreateStandard_Standard) GetBackground() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Background
}
func (t *CreateStandard_CreateStandard_Standard) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.CreatedAt
}
func (t *CreateStandard_CreateStandard_Standard) GetCreatedBy() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.CreatedBy
}
func (t *CreateStandard_CreateStandard_Standard) GetDescription() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Description
}
func (t *CreateStandard_CreateStandard_Standard) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Details
}
func (t *CreateStandard_CreateStandard_Standard) GetFamily() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Family
}
func (t *CreateStandard_CreateStandard_Standard) GetID() string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.ID
}
func (t *CreateStandard_CreateStandard_Standard) GetName() string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Name
}
func (t *CreateStandard_CreateStandard_Standard) GetPurposeAndScope() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.PurposeAndScope
}
func (t *CreateStandard_CreateStandard_Standard) GetSatisfies() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Satisfies
}
func (t *CreateStandard_CreateStandard_Standard) GetStandardType() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.StandardType
}
func (t *CreateStandard_CreateStandard_Standard) GetStatus() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Status
}
func (t *CreateStandard_CreateStandard_Standard) GetTags() []string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Tags
}
func (t *CreateStandard_CreateStandard_Standard) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.UpdatedAt
}
func (t *CreateStandard_CreateStandard_Standard) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.UpdatedBy
}
func (t *CreateStandard_CreateStandard_Standard) GetVersion() *string {
	if t == nil {
		t = &CreateStandard_CreateStandard_Standard{}
	}
	return t.Version
}

type CreateStandard_CreateStandard struct {
	Standard CreateStandard_CreateStandard_Standard "json:\"standard\" graphql:\"standard\""
}

func (t *CreateStandard_CreateStandard) GetStandard() *CreateStandard_CreateStandard_Standard {
	if t == nil {
		t = &CreateStandard_CreateStandard{}
	}
	return &t.Standard
}

type DeleteStandard_DeleteStandard struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteStandard_DeleteStandard) GetDeletedID() string {
	if t == nil {
		t = &DeleteStandard_DeleteStandard{}
	}
	return t.DeletedID
}

type GetAllStandards_Standards_Edges_Node struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                "json:\"description,omitempty\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family          *string                "json:\"family,omitempty\" graphql:\"family\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Satisfies       *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	StandardType    *string                "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetAllStandards_Standards_Edges_Node) GetBackground() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Background
}
func (t *GetAllStandards_Standards_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllStandards_Standards_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllStandards_Standards_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllStandards_Standards_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllStandards_Standards_Edges_Node) GetFamily() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Family
}
func (t *GetAllStandards_Standards_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllStandards_Standards_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllStandards_Standards_Edges_Node) GetPurposeAndScope() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.PurposeAndScope
}
func (t *GetAllStandards_Standards_Edges_Node) GetSatisfies() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Satisfies
}
func (t *GetAllStandards_Standards_Edges_Node) GetStandardType() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.StandardType
}
func (t *GetAllStandards_Standards_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllStandards_Standards_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllStandards_Standards_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllStandards_Standards_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllStandards_Standards_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetAllStandards_Standards_Edges_Node{}
	}
	return t.Version
}

type GetAllStandards_Standards_Edges struct {
	Node *GetAllStandards_Standards_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllStandards_Standards_Edges) GetNode() *GetAllStandards_Standards_Edges_Node {
	if t == nil {
		t = &GetAllStandards_Standards_Edges{}
	}
	return t.Node
}

type GetAllStandards_Standards struct {
	Edges []*GetAllStandards_Standards_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllStandards_Standards) GetEdges() []*GetAllStandards_Standards_Edges {
	if t == nil {
		t = &GetAllStandards_Standards{}
	}
	return t.Edges
}

type GetStandardByID_Standard struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                "json:\"description,omitempty\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family          *string                "json:\"family,omitempty\" graphql:\"family\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Satisfies       *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	StandardType    *string                "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetStandardByID_Standard) GetBackground() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Background
}
func (t *GetStandardByID_Standard) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.CreatedAt
}
func (t *GetStandardByID_Standard) GetCreatedBy() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.CreatedBy
}
func (t *GetStandardByID_Standard) GetDescription() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Description
}
func (t *GetStandardByID_Standard) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Details
}
func (t *GetStandardByID_Standard) GetFamily() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Family
}
func (t *GetStandardByID_Standard) GetID() string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.ID
}
func (t *GetStandardByID_Standard) GetName() string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Name
}
func (t *GetStandardByID_Standard) GetPurposeAndScope() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.PurposeAndScope
}
func (t *GetStandardByID_Standard) GetSatisfies() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Satisfies
}
func (t *GetStandardByID_Standard) GetStandardType() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.StandardType
}
func (t *GetStandardByID_Standard) GetStatus() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Status
}
func (t *GetStandardByID_Standard) GetTags() []string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Tags
}
func (t *GetStandardByID_Standard) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.UpdatedAt
}
func (t *GetStandardByID_Standard) GetUpdatedBy() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.UpdatedBy
}
func (t *GetStandardByID_Standard) GetVersion() *string {
	if t == nil {
		t = &GetStandardByID_Standard{}
	}
	return t.Version
}

type GetStandards_Standards_Edges_Node struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                "json:\"description,omitempty\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family          *string                "json:\"family,omitempty\" graphql:\"family\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Satisfies       *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	StandardType    *string                "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetStandards_Standards_Edges_Node) GetBackground() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Background
}
func (t *GetStandards_Standards_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetStandards_Standards_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetStandards_Standards_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Description
}
func (t *GetStandards_Standards_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Details
}
func (t *GetStandards_Standards_Edges_Node) GetFamily() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Family
}
func (t *GetStandards_Standards_Edges_Node) GetID() string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.ID
}
func (t *GetStandards_Standards_Edges_Node) GetName() string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Name
}
func (t *GetStandards_Standards_Edges_Node) GetPurposeAndScope() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.PurposeAndScope
}
func (t *GetStandards_Standards_Edges_Node) GetSatisfies() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Satisfies
}
func (t *GetStandards_Standards_Edges_Node) GetStandardType() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.StandardType
}
func (t *GetStandards_Standards_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Status
}
func (t *GetStandards_Standards_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Tags
}
func (t *GetStandards_Standards_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetStandards_Standards_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetStandards_Standards_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetStandards_Standards_Edges_Node{}
	}
	return t.Version
}

type GetStandards_Standards_Edges struct {
	Node *GetStandards_Standards_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetStandards_Standards_Edges) GetNode() *GetStandards_Standards_Edges_Node {
	if t == nil {
		t = &GetStandards_Standards_Edges{}
	}
	return t.Node
}

type GetStandards_Standards struct {
	Edges []*GetStandards_Standards_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetStandards_Standards) GetEdges() []*GetStandards_Standards_Edges {
	if t == nil {
		t = &GetStandards_Standards{}
	}
	return t.Edges
}

type UpdateStandard_UpdateStandard_Standard struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                "json:\"description,omitempty\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family          *string                "json:\"family,omitempty\" graphql:\"family\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Satisfies       *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	StandardType    *string                "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *UpdateStandard_UpdateStandard_Standard) GetBackground() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Background
}
func (t *UpdateStandard_UpdateStandard_Standard) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.CreatedAt
}
func (t *UpdateStandard_UpdateStandard_Standard) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.CreatedBy
}
func (t *UpdateStandard_UpdateStandard_Standard) GetDescription() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Description
}
func (t *UpdateStandard_UpdateStandard_Standard) GetDetails() map[string]interface{} {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Details
}
func (t *UpdateStandard_UpdateStandard_Standard) GetFamily() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Family
}
func (t *UpdateStandard_UpdateStandard_Standard) GetID() string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.ID
}
func (t *UpdateStandard_UpdateStandard_Standard) GetName() string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Name
}
func (t *UpdateStandard_UpdateStandard_Standard) GetPurposeAndScope() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.PurposeAndScope
}
func (t *UpdateStandard_UpdateStandard_Standard) GetSatisfies() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Satisfies
}
func (t *UpdateStandard_UpdateStandard_Standard) GetStandardType() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.StandardType
}
func (t *UpdateStandard_UpdateStandard_Standard) GetStatus() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Status
}
func (t *UpdateStandard_UpdateStandard_Standard) GetTags() []string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Tags
}
func (t *UpdateStandard_UpdateStandard_Standard) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.UpdatedAt
}
func (t *UpdateStandard_UpdateStandard_Standard) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.UpdatedBy
}
func (t *UpdateStandard_UpdateStandard_Standard) GetVersion() *string {
	if t == nil {
		t = &UpdateStandard_UpdateStandard_Standard{}
	}
	return t.Version
}

type UpdateStandard_UpdateStandard struct {
	Standard UpdateStandard_UpdateStandard_Standard "json:\"standard\" graphql:\"standard\""
}

func (t *UpdateStandard_UpdateStandard) GetStandard() *UpdateStandard_UpdateStandard_Standard {
	if t == nil {
		t = &UpdateStandard_UpdateStandard{}
	}
	return &t.Standard
}

type GetAllStandardHistories_StandardHistories_Edges_Node struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                "json:\"description,omitempty\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family          *string                "json:\"family,omitempty\" graphql:\"family\""
	HistoryTime     time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	Operation       history.OpType         "json:\"operation\" graphql:\"operation\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Ref             *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Satisfies       *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	StandardType    *string                "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetBackground() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Background
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetFamily() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Family
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetPurposeAndScope() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.PurposeAndScope
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetSatisfies() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Satisfies
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetStandardType() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.StandardType
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllStandardHistories_StandardHistories_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Version
}

type GetAllStandardHistories_StandardHistories_Edges struct {
	Node *GetAllStandardHistories_StandardHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllStandardHistories_StandardHistories_Edges) GetNode() *GetAllStandardHistories_StandardHistories_Edges_Node {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories_Edges{}
	}
	return t.Node
}

type GetAllStandardHistories_StandardHistories struct {
	Edges []*GetAllStandardHistories_StandardHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllStandardHistories_StandardHistories) GetEdges() []*GetAllStandardHistories_StandardHistories_Edges {
	if t == nil {
		t = &GetAllStandardHistories_StandardHistories{}
	}
	return t.Edges
}

type GetStandardHistories_StandardHistories_Edges_Node struct {
	Background      *string                "json:\"background,omitempty\" graphql:\"background\""
	CreatedAt       *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string                "json:\"description,omitempty\" graphql:\"description\""
	Details         map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family          *string                "json:\"family,omitempty\" graphql:\"family\""
	HistoryTime     time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID              string                 "json:\"id\" graphql:\"id\""
	Name            string                 "json:\"name\" graphql:\"name\""
	Operation       history.OpType         "json:\"operation\" graphql:\"operation\""
	PurposeAndScope *string                "json:\"purposeAndScope,omitempty\" graphql:\"purposeAndScope\""
	Ref             *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Satisfies       *string                "json:\"satisfies,omitempty\" graphql:\"satisfies\""
	StandardType    *string                "json:\"standardType,omitempty\" graphql:\"standardType\""
	Status          *string                "json:\"status,omitempty\" graphql:\"status\""
	Tags            []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version         *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetStandardHistories_StandardHistories_Edges_Node) GetBackground() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Background
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetFamily() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Family
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetPurposeAndScope() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.PurposeAndScope
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetSatisfies() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Satisfies
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetStandardType() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.StandardType
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetStandardHistories_StandardHistories_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges_Node{}
	}
	return t.Version
}

type GetStandardHistories_StandardHistories_Edges struct {
	Node *GetStandardHistories_StandardHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetStandardHistories_StandardHistories_Edges) GetNode() *GetStandardHistories_StandardHistories_Edges_Node {
	if t == nil {
		t = &GetStandardHistories_StandardHistories_Edges{}
	}
	return t.Node
}

type GetStandardHistories_StandardHistories struct {
	Edges []*GetStandardHistories_StandardHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetStandardHistories_StandardHistories) GetEdges() []*GetStandardHistories_StandardHistories_Edges {
	if t == nil {
		t = &GetStandardHistories_StandardHistories{}
	}
	return t.Edges
}

type CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols struct {
	Class                          *string                "json:\"class,omitempty\" graphql:\"class\""
	CreatedAt                      *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                      *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description                    *string                "json:\"description,omitempty\" graphql:\"description\""
	Details                        map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family                         *string                "json:\"family,omitempty\" graphql:\"family\""
	ID                             string                 "json:\"id\" graphql:\"id\""
	ImplementationDate             *time.Time             "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	ImplementationEvidence         *string                "json:\"implementationEvidence,omitempty\" graphql:\"implementationEvidence\""
	ImplementationStatus           *string                "json:\"implementationStatus,omitempty\" graphql:\"implementationStatus\""
	ImplementationVerification     *string                "json:\"implementationVerification,omitempty\" graphql:\"implementationVerification\""
	ImplementationVerificationDate *time.Time             "json:\"implementationVerificationDate,omitempty\" graphql:\"implementationVerificationDate\""
	MappedFrameworks               *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name                           string                 "json:\"name\" graphql:\"name\""
	Source                         *string                "json:\"source,omitempty\" graphql:\"source\""
	Status                         *string                "json:\"status,omitempty\" graphql:\"status\""
	SubcontrolNumber               *string                "json:\"subcontrolNumber,omitempty\" graphql:\"subcontrolNumber\""
	SubcontrolType                 *string                "json:\"subcontrolType,omitempty\" graphql:\"subcontrolType\""
	Tags                           []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                      *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                      *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version                        *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetClass() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.Class
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.Description
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.Details
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetFamily() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.Family
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetID() string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.ID
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetImplementationDate() *time.Time {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.ImplementationDate
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetImplementationEvidence() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.ImplementationEvidence
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetImplementationStatus() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.ImplementationStatus
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetImplementationVerification() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.ImplementationVerification
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetImplementationVerificationDate() *time.Time {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.ImplementationVerificationDate
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetMappedFrameworks() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.MappedFrameworks
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetName() string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.Name
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetSource() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.Source
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetStatus() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.Status
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetSubcontrolNumber() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.SubcontrolNumber
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetSubcontrolType() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.SubcontrolType
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.Tags
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols) GetVersion() *string {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols{}
	}
	return t.Version
}

type CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol struct {
	Subcontrols []*CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols "json:\"subcontrols,omitempty\" graphql:\"subcontrols\""
}

func (t *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol) GetSubcontrols() []*CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol_Subcontrols {
	if t == nil {
		t = &CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol{}
	}
	return t.Subcontrols
}

type CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols struct {
	Class                          *string                "json:\"class,omitempty\" graphql:\"class\""
	CreatedAt                      *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                      *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description                    *string                "json:\"description,omitempty\" graphql:\"description\""
	Details                        map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family                         *string                "json:\"family,omitempty\" graphql:\"family\""
	ID                             string                 "json:\"id\" graphql:\"id\""
	ImplementationDate             *time.Time             "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	ImplementationEvidence         *string                "json:\"implementationEvidence,omitempty\" graphql:\"implementationEvidence\""
	ImplementationStatus           *string                "json:\"implementationStatus,omitempty\" graphql:\"implementationStatus\""
	ImplementationVerification     *string                "json:\"implementationVerification,omitempty\" graphql:\"implementationVerification\""
	ImplementationVerificationDate *time.Time             "json:\"implementationVerificationDate,omitempty\" graphql:\"implementationVerificationDate\""
	MappedFrameworks               *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name                           string                 "json:\"name\" graphql:\"name\""
	Source                         *string                "json:\"source,omitempty\" graphql:\"source\""
	Status                         *string                "json:\"status,omitempty\" graphql:\"status\""
	SubcontrolNumber               *string                "json:\"subcontrolNumber,omitempty\" graphql:\"subcontrolNumber\""
	SubcontrolType                 *string                "json:\"subcontrolType,omitempty\" graphql:\"subcontrolType\""
	Tags                           []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                      *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                      *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version                        *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetClass() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.Class
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.CreatedAt
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.CreatedBy
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetDescription() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.Description
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.Details
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetFamily() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.Family
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetID() string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.ID
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetImplementationDate() *time.Time {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.ImplementationDate
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetImplementationEvidence() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.ImplementationEvidence
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetImplementationStatus() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.ImplementationStatus
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetImplementationVerification() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.ImplementationVerification
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetImplementationVerificationDate() *time.Time {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.ImplementationVerificationDate
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetMappedFrameworks() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.MappedFrameworks
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetName() string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.Name
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetSource() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.Source
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetStatus() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.Status
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetSubcontrolNumber() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.SubcontrolNumber
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetSubcontrolType() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.SubcontrolType
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetTags() []string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.Tags
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols) GetVersion() *string {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols{}
	}
	return t.Version
}

type CreateBulkSubcontrol_CreateBulkSubcontrol struct {
	Subcontrols []*CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols "json:\"subcontrols,omitempty\" graphql:\"subcontrols\""
}

func (t *CreateBulkSubcontrol_CreateBulkSubcontrol) GetSubcontrols() []*CreateBulkSubcontrol_CreateBulkSubcontrol_Subcontrols {
	if t == nil {
		t = &CreateBulkSubcontrol_CreateBulkSubcontrol{}
	}
	return t.Subcontrols
}

type CreateSubcontrol_CreateSubcontrol_Subcontrol struct {
	Class                          *string                "json:\"class,omitempty\" graphql:\"class\""
	CreatedAt                      *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                      *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description                    *string                "json:\"description,omitempty\" graphql:\"description\""
	Details                        map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family                         *string                "json:\"family,omitempty\" graphql:\"family\""
	ID                             string                 "json:\"id\" graphql:\"id\""
	ImplementationDate             *time.Time             "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	ImplementationEvidence         *string                "json:\"implementationEvidence,omitempty\" graphql:\"implementationEvidence\""
	ImplementationStatus           *string                "json:\"implementationStatus,omitempty\" graphql:\"implementationStatus\""
	ImplementationVerification     *string                "json:\"implementationVerification,omitempty\" graphql:\"implementationVerification\""
	ImplementationVerificationDate *time.Time             "json:\"implementationVerificationDate,omitempty\" graphql:\"implementationVerificationDate\""
	MappedFrameworks               *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name                           string                 "json:\"name\" graphql:\"name\""
	Source                         *string                "json:\"source,omitempty\" graphql:\"source\""
	Status                         *string                "json:\"status,omitempty\" graphql:\"status\""
	SubcontrolNumber               *string                "json:\"subcontrolNumber,omitempty\" graphql:\"subcontrolNumber\""
	SubcontrolType                 *string                "json:\"subcontrolType,omitempty\" graphql:\"subcontrolType\""
	Tags                           []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                      *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                      *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version                        *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetClass() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.Class
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.CreatedAt
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetCreatedBy() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.CreatedBy
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetDescription() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.Description
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.Details
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetFamily() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.Family
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetID() string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.ID
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetImplementationDate() *time.Time {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.ImplementationDate
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetImplementationEvidence() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.ImplementationEvidence
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetImplementationStatus() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.ImplementationStatus
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetImplementationVerification() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.ImplementationVerification
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetImplementationVerificationDate() *time.Time {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.ImplementationVerificationDate
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetMappedFrameworks() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.MappedFrameworks
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetName() string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.Name
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetSource() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.Source
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetStatus() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.Status
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetSubcontrolNumber() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.SubcontrolNumber
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetSubcontrolType() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.SubcontrolType
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetTags() []string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.Tags
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.UpdatedAt
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.UpdatedBy
}
func (t *CreateSubcontrol_CreateSubcontrol_Subcontrol) GetVersion() *string {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol_Subcontrol{}
	}
	return t.Version
}

type CreateSubcontrol_CreateSubcontrol struct {
	Subcontrol CreateSubcontrol_CreateSubcontrol_Subcontrol "json:\"subcontrol\" graphql:\"subcontrol\""
}

func (t *CreateSubcontrol_CreateSubcontrol) GetSubcontrol() *CreateSubcontrol_CreateSubcontrol_Subcontrol {
	if t == nil {
		t = &CreateSubcontrol_CreateSubcontrol{}
	}
	return &t.Subcontrol
}

type DeleteSubcontrol_DeleteSubcontrol struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteSubcontrol_DeleteSubcontrol) GetDeletedID() string {
	if t == nil {
		t = &DeleteSubcontrol_DeleteSubcontrol{}
	}
	return t.DeletedID
}

type GetAllSubcontrols_Subcontrols_Edges_Node struct {
	Class                          *string                "json:\"class,omitempty\" graphql:\"class\""
	CreatedAt                      *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                      *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description                    *string                "json:\"description,omitempty\" graphql:\"description\""
	Details                        map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family                         *string                "json:\"family,omitempty\" graphql:\"family\""
	ID                             string                 "json:\"id\" graphql:\"id\""
	ImplementationDate             *time.Time             "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	ImplementationEvidence         *string                "json:\"implementationEvidence,omitempty\" graphql:\"implementationEvidence\""
	ImplementationStatus           *string                "json:\"implementationStatus,omitempty\" graphql:\"implementationStatus\""
	ImplementationVerification     *string                "json:\"implementationVerification,omitempty\" graphql:\"implementationVerification\""
	ImplementationVerificationDate *time.Time             "json:\"implementationVerificationDate,omitempty\" graphql:\"implementationVerificationDate\""
	MappedFrameworks               *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name                           string                 "json:\"name\" graphql:\"name\""
	Source                         *string                "json:\"source,omitempty\" graphql:\"source\""
	Status                         *string                "json:\"status,omitempty\" graphql:\"status\""
	SubcontrolNumber               *string                "json:\"subcontrolNumber,omitempty\" graphql:\"subcontrolNumber\""
	SubcontrolType                 *string                "json:\"subcontrolType,omitempty\" graphql:\"subcontrolType\""
	Tags                           []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                      *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                      *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version                        *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetClass() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Class
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetFamily() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Family
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetImplementationDate() *time.Time {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ImplementationDate
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetImplementationEvidence() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ImplementationEvidence
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetImplementationStatus() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ImplementationStatus
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetImplementationVerification() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ImplementationVerification
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetImplementationVerificationDate() *time.Time {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ImplementationVerificationDate
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetMappedFrameworks() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.MappedFrameworks
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetSubcontrolNumber() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.SubcontrolNumber
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetSubcontrolType() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.SubcontrolType
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllSubcontrols_Subcontrols_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Version
}

type GetAllSubcontrols_Subcontrols_Edges struct {
	Node *GetAllSubcontrols_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllSubcontrols_Subcontrols_Edges) GetNode() *GetAllSubcontrols_Subcontrols_Edges_Node {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols_Edges{}
	}
	return t.Node
}

type GetAllSubcontrols_Subcontrols struct {
	Edges []*GetAllSubcontrols_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllSubcontrols_Subcontrols) GetEdges() []*GetAllSubcontrols_Subcontrols_Edges {
	if t == nil {
		t = &GetAllSubcontrols_Subcontrols{}
	}
	return t.Edges
}

type GetSubcontrolByID_Subcontrol struct {
	Class                          *string                "json:\"class,omitempty\" graphql:\"class\""
	CreatedAt                      *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                      *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description                    *string                "json:\"description,omitempty\" graphql:\"description\""
	Details                        map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family                         *string                "json:\"family,omitempty\" graphql:\"family\""
	ID                             string                 "json:\"id\" graphql:\"id\""
	ImplementationDate             *time.Time             "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	ImplementationEvidence         *string                "json:\"implementationEvidence,omitempty\" graphql:\"implementationEvidence\""
	ImplementationStatus           *string                "json:\"implementationStatus,omitempty\" graphql:\"implementationStatus\""
	ImplementationVerification     *string                "json:\"implementationVerification,omitempty\" graphql:\"implementationVerification\""
	ImplementationVerificationDate *time.Time             "json:\"implementationVerificationDate,omitempty\" graphql:\"implementationVerificationDate\""
	MappedFrameworks               *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name                           string                 "json:\"name\" graphql:\"name\""
	Source                         *string                "json:\"source,omitempty\" graphql:\"source\""
	Status                         *string                "json:\"status,omitempty\" graphql:\"status\""
	SubcontrolNumber               *string                "json:\"subcontrolNumber,omitempty\" graphql:\"subcontrolNumber\""
	SubcontrolType                 *string                "json:\"subcontrolType,omitempty\" graphql:\"subcontrolType\""
	Tags                           []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                      *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                      *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version                        *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetSubcontrolByID_Subcontrol) GetClass() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.Class
}
func (t *GetSubcontrolByID_Subcontrol) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.CreatedAt
}
func (t *GetSubcontrolByID_Subcontrol) GetCreatedBy() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.CreatedBy
}
func (t *GetSubcontrolByID_Subcontrol) GetDescription() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.Description
}
func (t *GetSubcontrolByID_Subcontrol) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.Details
}
func (t *GetSubcontrolByID_Subcontrol) GetFamily() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.Family
}
func (t *GetSubcontrolByID_Subcontrol) GetID() string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.ID
}
func (t *GetSubcontrolByID_Subcontrol) GetImplementationDate() *time.Time {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.ImplementationDate
}
func (t *GetSubcontrolByID_Subcontrol) GetImplementationEvidence() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.ImplementationEvidence
}
func (t *GetSubcontrolByID_Subcontrol) GetImplementationStatus() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.ImplementationStatus
}
func (t *GetSubcontrolByID_Subcontrol) GetImplementationVerification() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.ImplementationVerification
}
func (t *GetSubcontrolByID_Subcontrol) GetImplementationVerificationDate() *time.Time {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.ImplementationVerificationDate
}
func (t *GetSubcontrolByID_Subcontrol) GetMappedFrameworks() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.MappedFrameworks
}
func (t *GetSubcontrolByID_Subcontrol) GetName() string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.Name
}
func (t *GetSubcontrolByID_Subcontrol) GetSource() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.Source
}
func (t *GetSubcontrolByID_Subcontrol) GetStatus() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.Status
}
func (t *GetSubcontrolByID_Subcontrol) GetSubcontrolNumber() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.SubcontrolNumber
}
func (t *GetSubcontrolByID_Subcontrol) GetSubcontrolType() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.SubcontrolType
}
func (t *GetSubcontrolByID_Subcontrol) GetTags() []string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.Tags
}
func (t *GetSubcontrolByID_Subcontrol) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.UpdatedAt
}
func (t *GetSubcontrolByID_Subcontrol) GetUpdatedBy() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.UpdatedBy
}
func (t *GetSubcontrolByID_Subcontrol) GetVersion() *string {
	if t == nil {
		t = &GetSubcontrolByID_Subcontrol{}
	}
	return t.Version
}

type GetSubcontrols_Subcontrols_Edges_Node struct {
	Class                          *string                "json:\"class,omitempty\" graphql:\"class\""
	CreatedAt                      *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                      *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description                    *string                "json:\"description,omitempty\" graphql:\"description\""
	Details                        map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family                         *string                "json:\"family,omitempty\" graphql:\"family\""
	ID                             string                 "json:\"id\" graphql:\"id\""
	ImplementationDate             *time.Time             "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	ImplementationEvidence         *string                "json:\"implementationEvidence,omitempty\" graphql:\"implementationEvidence\""
	ImplementationStatus           *string                "json:\"implementationStatus,omitempty\" graphql:\"implementationStatus\""
	ImplementationVerification     *string                "json:\"implementationVerification,omitempty\" graphql:\"implementationVerification\""
	ImplementationVerificationDate *time.Time             "json:\"implementationVerificationDate,omitempty\" graphql:\"implementationVerificationDate\""
	MappedFrameworks               *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name                           string                 "json:\"name\" graphql:\"name\""
	Source                         *string                "json:\"source,omitempty\" graphql:\"source\""
	Status                         *string                "json:\"status,omitempty\" graphql:\"status\""
	SubcontrolNumber               *string                "json:\"subcontrolNumber,omitempty\" graphql:\"subcontrolNumber\""
	SubcontrolType                 *string                "json:\"subcontrolType,omitempty\" graphql:\"subcontrolType\""
	Tags                           []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                      *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                      *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version                        *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetSubcontrols_Subcontrols_Edges_Node) GetClass() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Class
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Description
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Details
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetFamily() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Family
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetID() string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ID
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetImplementationDate() *time.Time {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ImplementationDate
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetImplementationEvidence() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ImplementationEvidence
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetImplementationStatus() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ImplementationStatus
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetImplementationVerification() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ImplementationVerification
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetImplementationVerificationDate() *time.Time {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.ImplementationVerificationDate
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetMappedFrameworks() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.MappedFrameworks
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetName() string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Name
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Source
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Status
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetSubcontrolNumber() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.SubcontrolNumber
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetSubcontrolType() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.SubcontrolType
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Tags
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetSubcontrols_Subcontrols_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges_Node{}
	}
	return t.Version
}

type GetSubcontrols_Subcontrols_Edges struct {
	Node *GetSubcontrols_Subcontrols_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetSubcontrols_Subcontrols_Edges) GetNode() *GetSubcontrols_Subcontrols_Edges_Node {
	if t == nil {
		t = &GetSubcontrols_Subcontrols_Edges{}
	}
	return t.Node
}

type GetSubcontrols_Subcontrols struct {
	Edges []*GetSubcontrols_Subcontrols_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetSubcontrols_Subcontrols) GetEdges() []*GetSubcontrols_Subcontrols_Edges {
	if t == nil {
		t = &GetSubcontrols_Subcontrols{}
	}
	return t.Edges
}

type UpdateSubcontrol_UpdateSubcontrol_Subcontrol struct {
	Class                          *string                "json:\"class,omitempty\" graphql:\"class\""
	CreatedAt                      *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                      *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description                    *string                "json:\"description,omitempty\" graphql:\"description\""
	Details                        map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family                         *string                "json:\"family,omitempty\" graphql:\"family\""
	ID                             string                 "json:\"id\" graphql:\"id\""
	ImplementationDate             *time.Time             "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	ImplementationEvidence         *string                "json:\"implementationEvidence,omitempty\" graphql:\"implementationEvidence\""
	ImplementationStatus           *string                "json:\"implementationStatus,omitempty\" graphql:\"implementationStatus\""
	ImplementationVerification     *string                "json:\"implementationVerification,omitempty\" graphql:\"implementationVerification\""
	ImplementationVerificationDate *time.Time             "json:\"implementationVerificationDate,omitempty\" graphql:\"implementationVerificationDate\""
	MappedFrameworks               *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name                           string                 "json:\"name\" graphql:\"name\""
	Source                         *string                "json:\"source,omitempty\" graphql:\"source\""
	Status                         *string                "json:\"status,omitempty\" graphql:\"status\""
	SubcontrolNumber               *string                "json:\"subcontrolNumber,omitempty\" graphql:\"subcontrolNumber\""
	SubcontrolType                 *string                "json:\"subcontrolType,omitempty\" graphql:\"subcontrolType\""
	Tags                           []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                      *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                      *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version                        *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetClass() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.Class
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.CreatedAt
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.CreatedBy
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetDescription() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.Description
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetDetails() map[string]interface{} {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.Details
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetFamily() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.Family
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetID() string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.ID
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetImplementationDate() *time.Time {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.ImplementationDate
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetImplementationEvidence() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.ImplementationEvidence
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetImplementationStatus() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.ImplementationStatus
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetImplementationVerification() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.ImplementationVerification
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetImplementationVerificationDate() *time.Time {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.ImplementationVerificationDate
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetMappedFrameworks() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.MappedFrameworks
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetName() string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.Name
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetSource() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.Source
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetStatus() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.Status
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetSubcontrolNumber() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.SubcontrolNumber
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetSubcontrolType() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.SubcontrolType
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetTags() []string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.Tags
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.UpdatedAt
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.UpdatedBy
}
func (t *UpdateSubcontrol_UpdateSubcontrol_Subcontrol) GetVersion() *string {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol_Subcontrol{}
	}
	return t.Version
}

type UpdateSubcontrol_UpdateSubcontrol struct {
	Subcontrol UpdateSubcontrol_UpdateSubcontrol_Subcontrol "json:\"subcontrol\" graphql:\"subcontrol\""
}

func (t *UpdateSubcontrol_UpdateSubcontrol) GetSubcontrol() *UpdateSubcontrol_UpdateSubcontrol_Subcontrol {
	if t == nil {
		t = &UpdateSubcontrol_UpdateSubcontrol{}
	}
	return &t.Subcontrol
}

type GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node struct {
	Class                          *string                "json:\"class,omitempty\" graphql:\"class\""
	CreatedAt                      *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                      *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description                    *string                "json:\"description,omitempty\" graphql:\"description\""
	Details                        map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family                         *string                "json:\"family,omitempty\" graphql:\"family\""
	HistoryTime                    time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID                             string                 "json:\"id\" graphql:\"id\""
	ImplementationDate             *time.Time             "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	ImplementationEvidence         *string                "json:\"implementationEvidence,omitempty\" graphql:\"implementationEvidence\""
	ImplementationStatus           *string                "json:\"implementationStatus,omitempty\" graphql:\"implementationStatus\""
	ImplementationVerification     *string                "json:\"implementationVerification,omitempty\" graphql:\"implementationVerification\""
	ImplementationVerificationDate *time.Time             "json:\"implementationVerificationDate,omitempty\" graphql:\"implementationVerificationDate\""
	MappedFrameworks               *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name                           string                 "json:\"name\" graphql:\"name\""
	Operation                      history.OpType         "json:\"operation\" graphql:\"operation\""
	Ref                            *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Source                         *string                "json:\"source,omitempty\" graphql:\"source\""
	Status                         *string                "json:\"status,omitempty\" graphql:\"status\""
	SubcontrolNumber               *string                "json:\"subcontrolNumber,omitempty\" graphql:\"subcontrolNumber\""
	SubcontrolType                 *string                "json:\"subcontrolType,omitempty\" graphql:\"subcontrolType\""
	Tags                           []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                      *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                      *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version                        *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetClass() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Class
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetFamily() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Family
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetImplementationDate() *time.Time {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ImplementationDate
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetImplementationEvidence() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ImplementationEvidence
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetImplementationStatus() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ImplementationStatus
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetImplementationVerification() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ImplementationVerification
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetImplementationVerificationDate() *time.Time {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ImplementationVerificationDate
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetMappedFrameworks() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.MappedFrameworks
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetSubcontrolNumber() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.SubcontrolNumber
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetSubcontrolType() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.SubcontrolType
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Version
}

type GetAllSubcontrolHistories_SubcontrolHistories_Edges struct {
	Node *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllSubcontrolHistories_SubcontrolHistories_Edges) GetNode() *GetAllSubcontrolHistories_SubcontrolHistories_Edges_Node {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories_Edges{}
	}
	return t.Node
}

type GetAllSubcontrolHistories_SubcontrolHistories struct {
	Edges []*GetAllSubcontrolHistories_SubcontrolHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllSubcontrolHistories_SubcontrolHistories) GetEdges() []*GetAllSubcontrolHistories_SubcontrolHistories_Edges {
	if t == nil {
		t = &GetAllSubcontrolHistories_SubcontrolHistories{}
	}
	return t.Edges
}

type GetSubcontrolHistories_SubcontrolHistories_Edges_Node struct {
	Class                          *string                "json:\"class,omitempty\" graphql:\"class\""
	CreatedAt                      *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy                      *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description                    *string                "json:\"description,omitempty\" graphql:\"description\""
	Details                        map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Family                         *string                "json:\"family,omitempty\" graphql:\"family\""
	HistoryTime                    time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID                             string                 "json:\"id\" graphql:\"id\""
	ImplementationDate             *time.Time             "json:\"implementationDate,omitempty\" graphql:\"implementationDate\""
	ImplementationEvidence         *string                "json:\"implementationEvidence,omitempty\" graphql:\"implementationEvidence\""
	ImplementationStatus           *string                "json:\"implementationStatus,omitempty\" graphql:\"implementationStatus\""
	ImplementationVerification     *string                "json:\"implementationVerification,omitempty\" graphql:\"implementationVerification\""
	ImplementationVerificationDate *time.Time             "json:\"implementationVerificationDate,omitempty\" graphql:\"implementationVerificationDate\""
	MappedFrameworks               *string                "json:\"mappedFrameworks,omitempty\" graphql:\"mappedFrameworks\""
	Name                           string                 "json:\"name\" graphql:\"name\""
	Operation                      history.OpType         "json:\"operation\" graphql:\"operation\""
	Ref                            *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Source                         *string                "json:\"source,omitempty\" graphql:\"source\""
	Status                         *string                "json:\"status,omitempty\" graphql:\"status\""
	SubcontrolNumber               *string                "json:\"subcontrolNumber,omitempty\" graphql:\"subcontrolNumber\""
	SubcontrolType                 *string                "json:\"subcontrolType,omitempty\" graphql:\"subcontrolType\""
	Tags                           []string               "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt                      *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy                      *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Version                        *string                "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetClass() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Class
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetFamily() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Family
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetImplementationDate() *time.Time {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ImplementationDate
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetImplementationEvidence() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ImplementationEvidence
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetImplementationStatus() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ImplementationStatus
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetImplementationVerification() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ImplementationVerification
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetImplementationVerificationDate() *time.Time {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.ImplementationVerificationDate
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetMappedFrameworks() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.MappedFrameworks
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetSource() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Source
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetStatus() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Status
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetSubcontrolNumber() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.SubcontrolNumber
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetSubcontrolType() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.SubcontrolType
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetSubcontrolHistories_SubcontrolHistories_Edges_Node) GetVersion() *string {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges_Node{}
	}
	return t.Version
}

type GetSubcontrolHistories_SubcontrolHistories_Edges struct {
	Node *GetSubcontrolHistories_SubcontrolHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetSubcontrolHistories_SubcontrolHistories_Edges) GetNode() *GetSubcontrolHistories_SubcontrolHistories_Edges_Node {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories_Edges{}
	}
	return t.Node
}

type GetSubcontrolHistories_SubcontrolHistories struct {
	Edges []*GetSubcontrolHistories_SubcontrolHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetSubcontrolHistories_SubcontrolHistories) GetEdges() []*GetSubcontrolHistories_SubcontrolHistories_Edges {
	if t == nil {
		t = &GetSubcontrolHistories_SubcontrolHistories{}
	}
	return t.Edges
}

type CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers struct {
	Active        bool   "json:\"active\" graphql:\"active\""
	Email         string "json:\"email\" graphql:\"email\""
	ID            string "json:\"id\" graphql:\"id\""
	VerifiedEmail bool   "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers) GetActive() bool {
	if t == nil {
		t = &CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers{}
	}
	return t.Active
}
func (t *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers) GetEmail() string {
	if t == nil {
		t = &CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers{}
	}
	return t.Email
}
func (t *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers) GetID() string {
	if t == nil {
		t = &CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers{}
	}
	return t.ID
}
func (t *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers) GetVerifiedEmail() bool {
	if t == nil {
		t = &CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers{}
	}
	return t.VerifiedEmail
}

type CreateBulkCSVSubscriber_CreateBulkCSVSubscriber struct {
	Subscribers []*CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers "json:\"subscribers,omitempty\" graphql:\"subscribers\""
}

func (t *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber) GetSubscribers() []*CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers {
	if t == nil {
		t = &CreateBulkCSVSubscriber_CreateBulkCSVSubscriber{}
	}
	return t.Subscribers
}

type CreateBulkSubscriber_CreateBulkSubscriber_Subscribers struct {
	Active        bool   "json:\"active\" graphql:\"active\""
	Email         string "json:\"email\" graphql:\"email\""
	ID            string "json:\"id\" graphql:\"id\""
	VerifiedEmail bool   "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *CreateBulkSubscriber_CreateBulkSubscriber_Subscribers) GetActive() bool {
	if t == nil {
		t = &CreateBulkSubscriber_CreateBulkSubscriber_Subscribers{}
	}
	return t.Active
}
func (t *CreateBulkSubscriber_CreateBulkSubscriber_Subscribers) GetEmail() string {
	if t == nil {
		t = &CreateBulkSubscriber_CreateBulkSubscriber_Subscribers{}
	}
	return t.Email
}
func (t *CreateBulkSubscriber_CreateBulkSubscriber_Subscribers) GetID() string {
	if t == nil {
		t = &CreateBulkSubscriber_CreateBulkSubscriber_Subscribers{}
	}
	return t.ID
}
func (t *CreateBulkSubscriber_CreateBulkSubscriber_Subscribers) GetVerifiedEmail() bool {
	if t == nil {
		t = &CreateBulkSubscriber_CreateBulkSubscriber_Subscribers{}
	}
	return t.VerifiedEmail
}

type CreateBulkSubscriber_CreateBulkSubscriber struct {
	Subscribers []*CreateBulkSubscriber_CreateBulkSubscriber_Subscribers "json:\"subscribers,omitempty\" graphql:\"subscribers\""
}

func (t *CreateBulkSubscriber_CreateBulkSubscriber) GetSubscribers() []*CreateBulkSubscriber_CreateBulkSubscriber_Subscribers {
	if t == nil {
		t = &CreateBulkSubscriber_CreateBulkSubscriber{}
	}
	return t.Subscribers
}

type CreateSubscriber_CreateSubscriber_Subscriber struct {
	Active        bool       "json:\"active\" graphql:\"active\""
	CreatedAt     *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email         string     "json:\"email\" graphql:\"email\""
	ID            string     "json:\"id\" graphql:\"id\""
	UpdatedAt     *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerifiedEmail bool       "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetActive() bool {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.Active
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.CreatedAt
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetCreatedBy() *string {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.CreatedBy
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetEmail() string {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.Email
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetID() string {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.ID
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.UpdatedAt
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.UpdatedBy
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetVerifiedEmail() bool {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.VerifiedEmail
}

type CreateSubscriber_CreateSubscriber struct {
	Subscriber CreateSubscriber_CreateSubscriber_Subscriber "json:\"subscriber\" graphql:\"subscriber\""
}

func (t *CreateSubscriber_CreateSubscriber) GetSubscriber() *CreateSubscriber_CreateSubscriber_Subscriber {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber{}
	}
	return &t.Subscriber
}

type DeleteSubscriber_DeleteSubscriber struct {
	Email string "json:\"email\" graphql:\"email\""
}

func (t *DeleteSubscriber_DeleteSubscriber) GetEmail() string {
	if t == nil {
		t = &DeleteSubscriber_DeleteSubscriber{}
	}
	return t.Email
}

type GetAllSubscribers_Subscribers_Edges_Node struct {
	Active        bool    "json:\"active\" graphql:\"active\""
	Email         string  "json:\"email\" graphql:\"email\""
	ID            string  "json:\"id\" graphql:\"id\""
	OwnerID       *string "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	VerifiedEmail bool    "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *GetAllSubscribers_Subscribers_Edges_Node) GetActive() bool {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.Active
}
func (t *GetAllSubscribers_Subscribers_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.Email
}
func (t *GetAllSubscribers_Subscribers_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllSubscribers_Subscribers_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllSubscribers_Subscribers_Edges_Node) GetVerifiedEmail() bool {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.VerifiedEmail
}

type GetAllSubscribers_Subscribers_Edges struct {
	Node *GetAllSubscribers_Subscribers_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllSubscribers_Subscribers_Edges) GetNode() *GetAllSubscribers_Subscribers_Edges_Node {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges{}
	}
	return t.Node
}

type GetAllSubscribers_Subscribers struct {
	Edges []*GetAllSubscribers_Subscribers_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllSubscribers_Subscribers) GetEdges() []*GetAllSubscribers_Subscribers_Edges {
	if t == nil {
		t = &GetAllSubscribers_Subscribers{}
	}
	return t.Edges
}

type GetSubscriberByEmail_Subscriber struct {
	Active        bool    "json:\"active\" graphql:\"active\""
	Email         string  "json:\"email\" graphql:\"email\""
	ID            string  "json:\"id\" graphql:\"id\""
	OwnerID       *string "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	VerifiedEmail bool    "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *GetSubscriberByEmail_Subscriber) GetActive() bool {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.Active
}
func (t *GetSubscriberByEmail_Subscriber) GetEmail() string {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.Email
}
func (t *GetSubscriberByEmail_Subscriber) GetID() string {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.ID
}
func (t *GetSubscriberByEmail_Subscriber) GetOwnerID() *string {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.OwnerID
}
func (t *GetSubscriberByEmail_Subscriber) GetVerifiedEmail() bool {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.VerifiedEmail
}

type GetSubscribers_Subscribers_Edges_Node struct {
	Active        bool    "json:\"active\" graphql:\"active\""
	Email         string  "json:\"email\" graphql:\"email\""
	ID            string  "json:\"id\" graphql:\"id\""
	OwnerID       *string "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	VerifiedEmail bool    "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *GetSubscribers_Subscribers_Edges_Node) GetActive() bool {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.Active
}
func (t *GetSubscribers_Subscribers_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.Email
}
func (t *GetSubscribers_Subscribers_Edges_Node) GetID() string {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.ID
}
func (t *GetSubscribers_Subscribers_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetSubscribers_Subscribers_Edges_Node) GetVerifiedEmail() bool {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.VerifiedEmail
}

type GetSubscribers_Subscribers_Edges struct {
	Node *GetSubscribers_Subscribers_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetSubscribers_Subscribers_Edges) GetNode() *GetSubscribers_Subscribers_Edges_Node {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges{}
	}
	return t.Node
}

type GetSubscribers_Subscribers struct {
	Edges []*GetSubscribers_Subscribers_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetSubscribers_Subscribers) GetEdges() []*GetSubscribers_Subscribers_Edges {
	if t == nil {
		t = &GetSubscribers_Subscribers{}
	}
	return t.Edges
}

type UpdateSubscriber_UpdateSubscriber_Subscriber struct {
	Active        bool       "json:\"active\" graphql:\"active\""
	CreatedAt     *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email         string     "json:\"email\" graphql:\"email\""
	ID            string     "json:\"id\" graphql:\"id\""
	PhoneNumber   *string    "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	UpdatedAt     *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerifiedEmail bool       "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
	VerifiedPhone bool       "json:\"verifiedPhone\" graphql:\"verifiedPhone\""
}

func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetActive() bool {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.Active
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.CreatedAt
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.CreatedBy
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetEmail() string {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.Email
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetID() string {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.ID
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetPhoneNumber() *string {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.PhoneNumber
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.UpdatedAt
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.UpdatedBy
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetVerifiedEmail() bool {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.VerifiedEmail
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetVerifiedPhone() bool {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.VerifiedPhone
}

type UpdateSubscriber_UpdateSubscriber struct {
	Subscriber UpdateSubscriber_UpdateSubscriber_Subscriber "json:\"subscriber\" graphql:\"subscriber\""
}

func (t *UpdateSubscriber_UpdateSubscriber) GetSubscriber() *UpdateSubscriber_UpdateSubscriber_Subscriber {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber{}
	}
	return &t.Subscriber
}

type CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee) GetID() string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee{}
	}
	return t.ID
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee) GetFirstName() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee{}
	}
	return t.FirstName
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee) GetLastName() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee{}
	}
	return t.LastName
}

type CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner) GetID() string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner{}
	}
	return t.ID
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner) GetFirstName() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner{}
	}
	return t.FirstName
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner) GetLastName() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner{}
	}
	return t.LastName
}

type CreateBulkCSVTask_CreateBulkCSVTask_Tasks struct {
	Assignee    *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	Assigner    CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner  "json:\"assigner\" graphql:\"assigner\""
	Completed   *time.Time                                          "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt   *time.Time                                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                             "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{}                              "json:\"details,omitempty\" graphql:\"details\""
	Due         *time.Time                                          "json:\"due,omitempty\" graphql:\"due\""
	ID          string                                              "json:\"id\" graphql:\"id\""
	Status      enums.TaskStatus                                    "json:\"status\" graphql:\"status\""
	Tags        []string                                            "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string                                              "json:\"title\" graphql:\"title\""
	UpdatedAt   *time.Time                                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetAssignee() *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assignee {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Assignee
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetAssigner() *CreateBulkCSVTask_CreateBulkCSVTask_Tasks_Assigner {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return &t.Assigner
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetCompleted() *time.Time {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Completed
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.CreatedAt
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.CreatedBy
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Description
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Details
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetDue() *time.Time {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Due
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetID() string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.ID
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return &t.Status
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Tags
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetTitle() string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.Title
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVTask_CreateBulkCSVTask_Tasks) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask_Tasks{}
	}
	return t.UpdatedBy
}

type CreateBulkCSVTask_CreateBulkCSVTask struct {
	Tasks []*CreateBulkCSVTask_CreateBulkCSVTask_Tasks "json:\"tasks,omitempty\" graphql:\"tasks\""
}

func (t *CreateBulkCSVTask_CreateBulkCSVTask) GetTasks() []*CreateBulkCSVTask_CreateBulkCSVTask_Tasks {
	if t == nil {
		t = &CreateBulkCSVTask_CreateBulkCSVTask{}
	}
	return t.Tasks
}

type CreateBulkTask_CreateBulkTask_Tasks_Assignee struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateBulkTask_CreateBulkTask_Tasks_Assignee) GetID() string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Assignee{}
	}
	return t.ID
}
func (t *CreateBulkTask_CreateBulkTask_Tasks_Assignee) GetFirstName() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Assignee{}
	}
	return t.FirstName
}
func (t *CreateBulkTask_CreateBulkTask_Tasks_Assignee) GetLastName() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Assignee{}
	}
	return t.LastName
}

type CreateBulkTask_CreateBulkTask_Tasks_Assigner struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateBulkTask_CreateBulkTask_Tasks_Assigner) GetID() string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Assigner{}
	}
	return t.ID
}
func (t *CreateBulkTask_CreateBulkTask_Tasks_Assigner) GetFirstName() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Assigner{}
	}
	return t.FirstName
}
func (t *CreateBulkTask_CreateBulkTask_Tasks_Assigner) GetLastName() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks_Assigner{}
	}
	return t.LastName
}

type CreateBulkTask_CreateBulkTask_Tasks struct {
	Assignee    *CreateBulkTask_CreateBulkTask_Tasks_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	Assigner    CreateBulkTask_CreateBulkTask_Tasks_Assigner  "json:\"assigner\" graphql:\"assigner\""
	Completed   *time.Time                                    "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt   *time.Time                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                       "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{}                        "json:\"details,omitempty\" graphql:\"details\""
	Due         *time.Time                                    "json:\"due,omitempty\" graphql:\"due\""
	ID          string                                        "json:\"id\" graphql:\"id\""
	Status      enums.TaskStatus                              "json:\"status\" graphql:\"status\""
	Tags        []string                                      "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string                                        "json:\"title\" graphql:\"title\""
	UpdatedAt   *time.Time                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateBulkTask_CreateBulkTask_Tasks) GetAssignee() *CreateBulkTask_CreateBulkTask_Tasks_Assignee {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Assignee
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetAssigner() *CreateBulkTask_CreateBulkTask_Tasks_Assigner {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return &t.Assigner
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetCompleted() *time.Time {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Completed
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.CreatedAt
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetCreatedBy() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.CreatedBy
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetDescription() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Description
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Details
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetDue() *time.Time {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Due
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetID() string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.ID
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return &t.Status
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetTags() []string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Tags
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetTitle() string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.Title
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkTask_CreateBulkTask_Tasks) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask_Tasks{}
	}
	return t.UpdatedBy
}

type CreateBulkTask_CreateBulkTask struct {
	Tasks []*CreateBulkTask_CreateBulkTask_Tasks "json:\"tasks,omitempty\" graphql:\"tasks\""
}

func (t *CreateBulkTask_CreateBulkTask) GetTasks() []*CreateBulkTask_CreateBulkTask_Tasks {
	if t == nil {
		t = &CreateBulkTask_CreateBulkTask{}
	}
	return t.Tasks
}

type CreateTask_CreateTask_Task_Assignee struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateTask_CreateTask_Task_Assignee) GetID() string {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Assignee{}
	}
	return t.ID
}
func (t *CreateTask_CreateTask_Task_Assignee) GetFirstName() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Assignee{}
	}
	return t.FirstName
}
func (t *CreateTask_CreateTask_Task_Assignee) GetLastName() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Assignee{}
	}
	return t.LastName
}

type CreateTask_CreateTask_Task_Assigner struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateTask_CreateTask_Task_Assigner) GetID() string {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Assigner{}
	}
	return t.ID
}
func (t *CreateTask_CreateTask_Task_Assigner) GetFirstName() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Assigner{}
	}
	return t.FirstName
}
func (t *CreateTask_CreateTask_Task_Assigner) GetLastName() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task_Assigner{}
	}
	return t.LastName
}

type CreateTask_CreateTask_Task struct {
	Assignee    *CreateTask_CreateTask_Task_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	Assigner    CreateTask_CreateTask_Task_Assigner  "json:\"assigner\" graphql:\"assigner\""
	Completed   *time.Time                           "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt   *time.Time                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                              "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{}               "json:\"details,omitempty\" graphql:\"details\""
	Due         *time.Time                           "json:\"due,omitempty\" graphql:\"due\""
	ID          string                               "json:\"id\" graphql:\"id\""
	Status      enums.TaskStatus                     "json:\"status\" graphql:\"status\""
	Tags        []string                             "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string                               "json:\"title\" graphql:\"title\""
	UpdatedAt   *time.Time                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateTask_CreateTask_Task) GetAssignee() *CreateTask_CreateTask_Task_Assignee {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Assignee
}
func (t *CreateTask_CreateTask_Task) GetAssigner() *CreateTask_CreateTask_Task_Assigner {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return &t.Assigner
}
func (t *CreateTask_CreateTask_Task) GetCompleted() *time.Time {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Completed
}
func (t *CreateTask_CreateTask_Task) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.CreatedAt
}
func (t *CreateTask_CreateTask_Task) GetCreatedBy() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.CreatedBy
}
func (t *CreateTask_CreateTask_Task) GetDescription() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Description
}
func (t *CreateTask_CreateTask_Task) GetDetails() map[string]interface{} {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Details
}
func (t *CreateTask_CreateTask_Task) GetDue() *time.Time {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Due
}
func (t *CreateTask_CreateTask_Task) GetID() string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.ID
}
func (t *CreateTask_CreateTask_Task) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return &t.Status
}
func (t *CreateTask_CreateTask_Task) GetTags() []string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Tags
}
func (t *CreateTask_CreateTask_Task) GetTitle() string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.Title
}
func (t *CreateTask_CreateTask_Task) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.UpdatedAt
}
func (t *CreateTask_CreateTask_Task) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateTask_CreateTask_Task{}
	}
	return t.UpdatedBy
}

type CreateTask_CreateTask struct {
	Task CreateTask_CreateTask_Task "json:\"task\" graphql:\"task\""
}

func (t *CreateTask_CreateTask) GetTask() *CreateTask_CreateTask_Task {
	if t == nil {
		t = &CreateTask_CreateTask{}
	}
	return &t.Task
}

type DeleteTask_DeleteTask struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteTask_DeleteTask) GetDeletedID() string {
	if t == nil {
		t = &DeleteTask_DeleteTask{}
	}
	return t.DeletedID
}

type GetAllTasks_Tasks_Edges_Node_Assignee struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetAllTasks_Tasks_Edges_Node_Assignee) GetID() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Assignee{}
	}
	return t.ID
}
func (t *GetAllTasks_Tasks_Edges_Node_Assignee) GetFirstName() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Assignee{}
	}
	return t.FirstName
}
func (t *GetAllTasks_Tasks_Edges_Node_Assignee) GetLastName() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Assignee{}
	}
	return t.LastName
}

type GetAllTasks_Tasks_Edges_Node_Assigner struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetAllTasks_Tasks_Edges_Node_Assigner) GetID() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Assigner{}
	}
	return t.ID
}
func (t *GetAllTasks_Tasks_Edges_Node_Assigner) GetFirstName() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Assigner{}
	}
	return t.FirstName
}
func (t *GetAllTasks_Tasks_Edges_Node_Assigner) GetLastName() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Assigner{}
	}
	return t.LastName
}

type GetAllTasks_Tasks_Edges_Node_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllTasks_Tasks_Edges_Node_Organization) GetID() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Organization{}
	}
	return t.ID
}
func (t *GetAllTasks_Tasks_Edges_Node_Organization) GetName() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node_Organization{}
	}
	return t.Name
}

type GetAllTasks_Tasks_Edges_Node struct {
	Assignee     *GetAllTasks_Tasks_Edges_Node_Assignee       "json:\"assignee,omitempty\" graphql:\"assignee\""
	Assigner     GetAllTasks_Tasks_Edges_Node_Assigner        "json:\"assigner\" graphql:\"assigner\""
	Organization []*GetAllTasks_Tasks_Edges_Node_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Completed    *time.Time                                   "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt    *time.Time                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string                                      "json:\"description,omitempty\" graphql:\"description\""
	Details      map[string]interface{}                       "json:\"details,omitempty\" graphql:\"details\""
	Due          *time.Time                                   "json:\"due,omitempty\" graphql:\"due\""
	ID           string                                       "json:\"id\" graphql:\"id\""
	Status       enums.TaskStatus                             "json:\"status\" graphql:\"status\""
	Tags         []string                                     "json:\"tags,omitempty\" graphql:\"tags\""
	Title        string                                       "json:\"title\" graphql:\"title\""
	UpdatedAt    *time.Time                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTasks_Tasks_Edges_Node) GetAssignee() *GetAllTasks_Tasks_Edges_Node_Assignee {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Assignee
}
func (t *GetAllTasks_Tasks_Edges_Node) GetAssigner() *GetAllTasks_Tasks_Edges_Node_Assigner {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return &t.Assigner
}
func (t *GetAllTasks_Tasks_Edges_Node) GetOrganization() []*GetAllTasks_Tasks_Edges_Node_Organization {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Organization
}
func (t *GetAllTasks_Tasks_Edges_Node) GetCompleted() *time.Time {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Completed
}
func (t *GetAllTasks_Tasks_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTasks_Tasks_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTasks_Tasks_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllTasks_Tasks_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllTasks_Tasks_Edges_Node) GetDue() *time.Time {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Due
}
func (t *GetAllTasks_Tasks_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTasks_Tasks_Edges_Node) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllTasks_Tasks_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllTasks_Tasks_Edges_Node) GetTitle() string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.Title
}
func (t *GetAllTasks_Tasks_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTasks_Tasks_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTasks_Tasks_Edges struct {
	Node *GetAllTasks_Tasks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTasks_Tasks_Edges) GetNode() *GetAllTasks_Tasks_Edges_Node {
	if t == nil {
		t = &GetAllTasks_Tasks_Edges{}
	}
	return t.Node
}

type GetAllTasks_Tasks struct {
	Edges []*GetAllTasks_Tasks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllTasks_Tasks) GetEdges() []*GetAllTasks_Tasks_Edges {
	if t == nil {
		t = &GetAllTasks_Tasks{}
	}
	return t.Edges
}

type GetTaskByID_Task_Assignee struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetTaskByID_Task_Assignee) GetID() string {
	if t == nil {
		t = &GetTaskByID_Task_Assignee{}
	}
	return t.ID
}
func (t *GetTaskByID_Task_Assignee) GetFirstName() *string {
	if t == nil {
		t = &GetTaskByID_Task_Assignee{}
	}
	return t.FirstName
}
func (t *GetTaskByID_Task_Assignee) GetLastName() *string {
	if t == nil {
		t = &GetTaskByID_Task_Assignee{}
	}
	return t.LastName
}

type GetTaskByID_Task_Assigner struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetTaskByID_Task_Assigner) GetID() string {
	if t == nil {
		t = &GetTaskByID_Task_Assigner{}
	}
	return t.ID
}
func (t *GetTaskByID_Task_Assigner) GetFirstName() *string {
	if t == nil {
		t = &GetTaskByID_Task_Assigner{}
	}
	return t.FirstName
}
func (t *GetTaskByID_Task_Assigner) GetLastName() *string {
	if t == nil {
		t = &GetTaskByID_Task_Assigner{}
	}
	return t.LastName
}

type GetTaskByID_Task_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetTaskByID_Task_Organization) GetID() string {
	if t == nil {
		t = &GetTaskByID_Task_Organization{}
	}
	return t.ID
}
func (t *GetTaskByID_Task_Organization) GetName() string {
	if t == nil {
		t = &GetTaskByID_Task_Organization{}
	}
	return t.Name
}

type GetTaskByID_Task struct {
	Assignee     *GetTaskByID_Task_Assignee       "json:\"assignee,omitempty\" graphql:\"assignee\""
	Assigner     GetTaskByID_Task_Assigner        "json:\"assigner\" graphql:\"assigner\""
	Organization []*GetTaskByID_Task_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Completed    *time.Time                       "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt    *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string                          "json:\"description,omitempty\" graphql:\"description\""
	Details      map[string]interface{}           "json:\"details,omitempty\" graphql:\"details\""
	Due          *time.Time                       "json:\"due,omitempty\" graphql:\"due\""
	ID           string                           "json:\"id\" graphql:\"id\""
	Status       enums.TaskStatus                 "json:\"status\" graphql:\"status\""
	Tags         []string                         "json:\"tags,omitempty\" graphql:\"tags\""
	Title        string                           "json:\"title\" graphql:\"title\""
	UpdatedAt    *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTaskByID_Task) GetAssignee() *GetTaskByID_Task_Assignee {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Assignee
}
func (t *GetTaskByID_Task) GetAssigner() *GetTaskByID_Task_Assigner {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return &t.Assigner
}
func (t *GetTaskByID_Task) GetOrganization() []*GetTaskByID_Task_Organization {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Organization
}
func (t *GetTaskByID_Task) GetCompleted() *time.Time {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Completed
}
func (t *GetTaskByID_Task) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.CreatedAt
}
func (t *GetTaskByID_Task) GetCreatedBy() *string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.CreatedBy
}
func (t *GetTaskByID_Task) GetDescription() *string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Description
}
func (t *GetTaskByID_Task) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Details
}
func (t *GetTaskByID_Task) GetDue() *time.Time {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Due
}
func (t *GetTaskByID_Task) GetID() string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.ID
}
func (t *GetTaskByID_Task) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return &t.Status
}
func (t *GetTaskByID_Task) GetTags() []string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Tags
}
func (t *GetTaskByID_Task) GetTitle() string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.Title
}
func (t *GetTaskByID_Task) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.UpdatedAt
}
func (t *GetTaskByID_Task) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTaskByID_Task{}
	}
	return t.UpdatedBy
}

type GetTasks_Tasks_Edges_Node_Assignee struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetTasks_Tasks_Edges_Node_Assignee) GetID() string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Assignee{}
	}
	return t.ID
}
func (t *GetTasks_Tasks_Edges_Node_Assignee) GetFirstName() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Assignee{}
	}
	return t.FirstName
}
func (t *GetTasks_Tasks_Edges_Node_Assignee) GetLastName() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Assignee{}
	}
	return t.LastName
}

type GetTasks_Tasks_Edges_Node_Assigner struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetTasks_Tasks_Edges_Node_Assigner) GetID() string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Assigner{}
	}
	return t.ID
}
func (t *GetTasks_Tasks_Edges_Node_Assigner) GetFirstName() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Assigner{}
	}
	return t.FirstName
}
func (t *GetTasks_Tasks_Edges_Node_Assigner) GetLastName() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node_Assigner{}
	}
	return t.LastName
}

type GetTasks_Tasks_Edges_Node struct {
	Assignee    *GetTasks_Tasks_Edges_Node_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	Assigner    GetTasks_Tasks_Edges_Node_Assigner  "json:\"assigner\" graphql:\"assigner\""
	Completed   *time.Time                          "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt   *time.Time                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                             "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{}              "json:\"details,omitempty\" graphql:\"details\""
	Due         *time.Time                          "json:\"due,omitempty\" graphql:\"due\""
	ID          string                              "json:\"id\" graphql:\"id\""
	Status      enums.TaskStatus                    "json:\"status\" graphql:\"status\""
	Tags        []string                            "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string                              "json:\"title\" graphql:\"title\""
	UpdatedAt   *time.Time                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTasks_Tasks_Edges_Node) GetAssignee() *GetTasks_Tasks_Edges_Node_Assignee {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Assignee
}
func (t *GetTasks_Tasks_Edges_Node) GetAssigner() *GetTasks_Tasks_Edges_Node_Assigner {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return &t.Assigner
}
func (t *GetTasks_Tasks_Edges_Node) GetCompleted() *time.Time {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Completed
}
func (t *GetTasks_Tasks_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTasks_Tasks_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTasks_Tasks_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Description
}
func (t *GetTasks_Tasks_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Details
}
func (t *GetTasks_Tasks_Edges_Node) GetDue() *time.Time {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Due
}
func (t *GetTasks_Tasks_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.ID
}
func (t *GetTasks_Tasks_Edges_Node) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return &t.Status
}
func (t *GetTasks_Tasks_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Tags
}
func (t *GetTasks_Tasks_Edges_Node) GetTitle() string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.Title
}
func (t *GetTasks_Tasks_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTasks_Tasks_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTasks_Tasks_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTasks_Tasks_Edges struct {
	Node *GetTasks_Tasks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTasks_Tasks_Edges) GetNode() *GetTasks_Tasks_Edges_Node {
	if t == nil {
		t = &GetTasks_Tasks_Edges{}
	}
	return t.Node
}

type GetTasks_Tasks struct {
	Edges []*GetTasks_Tasks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetTasks_Tasks) GetEdges() []*GetTasks_Tasks_Edges {
	if t == nil {
		t = &GetTasks_Tasks{}
	}
	return t.Edges
}

type UpdateTask_UpdateTask_Task_Assignee struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *UpdateTask_UpdateTask_Task_Assignee) GetID() string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Assignee{}
	}
	return t.ID
}
func (t *UpdateTask_UpdateTask_Task_Assignee) GetFirstName() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Assignee{}
	}
	return t.FirstName
}
func (t *UpdateTask_UpdateTask_Task_Assignee) GetLastName() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Assignee{}
	}
	return t.LastName
}

type UpdateTask_UpdateTask_Task_Assigner struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *UpdateTask_UpdateTask_Task_Assigner) GetID() string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Assigner{}
	}
	return t.ID
}
func (t *UpdateTask_UpdateTask_Task_Assigner) GetFirstName() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Assigner{}
	}
	return t.FirstName
}
func (t *UpdateTask_UpdateTask_Task_Assigner) GetLastName() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task_Assigner{}
	}
	return t.LastName
}

type UpdateTask_UpdateTask_Task struct {
	Assignee    *UpdateTask_UpdateTask_Task_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	Assigner    UpdateTask_UpdateTask_Task_Assigner  "json:\"assigner\" graphql:\"assigner\""
	Completed   *time.Time                           "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt   *time.Time                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                              "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{}               "json:\"details,omitempty\" graphql:\"details\""
	Due         *time.Time                           "json:\"due,omitempty\" graphql:\"due\""
	ID          string                               "json:\"id\" graphql:\"id\""
	Status      enums.TaskStatus                     "json:\"status\" graphql:\"status\""
	Tags        []string                             "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string                               "json:\"title\" graphql:\"title\""
	UpdatedAt   *time.Time                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateTask_UpdateTask_Task) GetAssignee() *UpdateTask_UpdateTask_Task_Assignee {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Assignee
}
func (t *UpdateTask_UpdateTask_Task) GetAssigner() *UpdateTask_UpdateTask_Task_Assigner {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return &t.Assigner
}
func (t *UpdateTask_UpdateTask_Task) GetCompleted() *time.Time {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Completed
}
func (t *UpdateTask_UpdateTask_Task) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.CreatedAt
}
func (t *UpdateTask_UpdateTask_Task) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.CreatedBy
}
func (t *UpdateTask_UpdateTask_Task) GetDescription() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Description
}
func (t *UpdateTask_UpdateTask_Task) GetDetails() map[string]interface{} {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Details
}
func (t *UpdateTask_UpdateTask_Task) GetDue() *time.Time {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Due
}
func (t *UpdateTask_UpdateTask_Task) GetID() string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.ID
}
func (t *UpdateTask_UpdateTask_Task) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return &t.Status
}
func (t *UpdateTask_UpdateTask_Task) GetTags() []string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Tags
}
func (t *UpdateTask_UpdateTask_Task) GetTitle() string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.Title
}
func (t *UpdateTask_UpdateTask_Task) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.UpdatedAt
}
func (t *UpdateTask_UpdateTask_Task) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateTask_UpdateTask_Task{}
	}
	return t.UpdatedBy
}

type UpdateTask_UpdateTask struct {
	Task UpdateTask_UpdateTask_Task "json:\"task\" graphql:\"task\""
}

func (t *UpdateTask_UpdateTask) GetTask() *UpdateTask_UpdateTask_Task {
	if t == nil {
		t = &UpdateTask_UpdateTask{}
	}
	return &t.Task
}

type GetAllTaskHistories_TaskHistories_Edges_Node struct {
	Completed   *time.Time             "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Due         *time.Time             "json:\"due,omitempty\" graphql:\"due\""
	HistoryTime time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Operation   history.OpType         "json:\"operation\" graphql:\"operation\""
	Ref         *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Status      enums.TaskStatus       "json:\"status\" graphql:\"status\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string                 "json:\"title\" graphql:\"title\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetCompleted() *time.Time {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Completed
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetDue() *time.Time {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Due
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetTitle() string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Title
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTaskHistories_TaskHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTaskHistories_TaskHistories_Edges struct {
	Node *GetAllTaskHistories_TaskHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTaskHistories_TaskHistories_Edges) GetNode() *GetAllTaskHistories_TaskHistories_Edges_Node {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories_Edges{}
	}
	return t.Node
}

type GetAllTaskHistories_TaskHistories struct {
	Edges []*GetAllTaskHistories_TaskHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllTaskHistories_TaskHistories) GetEdges() []*GetAllTaskHistories_TaskHistories_Edges {
	if t == nil {
		t = &GetAllTaskHistories_TaskHistories{}
	}
	return t.Edges
}

type GetTaskHistories_TaskHistories_Edges_Node struct {
	Completed   *time.Time             "json:\"completed,omitempty\" graphql:\"completed\""
	CreatedAt   *time.Time             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
	Details     map[string]interface{} "json:\"details,omitempty\" graphql:\"details\""
	Due         *time.Time             "json:\"due,omitempty\" graphql:\"due\""
	HistoryTime time.Time              "json:\"historyTime\" graphql:\"historyTime\""
	ID          string                 "json:\"id\" graphql:\"id\""
	Operation   history.OpType         "json:\"operation\" graphql:\"operation\""
	Ref         *string                "json:\"ref,omitempty\" graphql:\"ref\""
	Status      enums.TaskStatus       "json:\"status\" graphql:\"status\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	Title       string                 "json:\"title\" graphql:\"title\""
	UpdatedAt   *time.Time             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTaskHistories_TaskHistories_Edges_Node) GetCompleted() *time.Time {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Completed
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetDetails() map[string]interface{} {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Details
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetDue() *time.Time {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Due
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetStatus() *enums.TaskStatus {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetTitle() string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.Title
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTaskHistories_TaskHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTaskHistories_TaskHistories_Edges struct {
	Node *GetTaskHistories_TaskHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTaskHistories_TaskHistories_Edges) GetNode() *GetTaskHistories_TaskHistories_Edges_Node {
	if t == nil {
		t = &GetTaskHistories_TaskHistories_Edges{}
	}
	return t.Node
}

type GetTaskHistories_TaskHistories struct {
	Edges []*GetTaskHistories_TaskHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetTaskHistories_TaskHistories) GetEdges() []*GetTaskHistories_TaskHistories_Edges {
	if t == nil {
		t = &GetTaskHistories_TaskHistories{}
	}
	return t.Edges
}

type CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates_Owner) GetID() string {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates_Owner{}
	}
	return t.ID
}

type CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates struct {
	Description *string                                                      "json:\"description,omitempty\" graphql:\"description\""
	ID          string                                                       "json:\"id\" graphql:\"id\""
	Jsonconfig  json.RawMessage                                              "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name        string                                                       "json:\"name\" graphql:\"name\""
	Uischema    json.RawMessage                                              "json:\"uischema,omitempty\" graphql:\"uischema\""
	Owner       *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates_Owner "json:\"owner,omitempty\" graphql:\"owner\""
}

func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.Description
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetID() string {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.ID
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetJsonconfig() *json.RawMessage {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return &t.Jsonconfig
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetName() string {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.Name
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetUischema() *json.RawMessage {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return &t.Uischema
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetOwner() *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates_Owner {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.Owner
}

type CreateBulkCSVTemplate_CreateBulkCSVTemplate struct {
	Templates []*CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates "json:\"templates,omitempty\" graphql:\"templates\""
}

func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate) GetTemplates() []*CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate{}
	}
	return t.Templates
}

type CreateBulkTemplate_CreateBulkTemplate_Templates_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkTemplate_CreateBulkTemplate_Templates_Owner) GetID() string {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates_Owner{}
	}
	return t.ID
}

type CreateBulkTemplate_CreateBulkTemplate_Templates struct {
	Description *string                                                "json:\"description,omitempty\" graphql:\"description\""
	ID          string                                                 "json:\"id\" graphql:\"id\""
	Jsonconfig  json.RawMessage                                        "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name        string                                                 "json:\"name\" graphql:\"name\""
	Uischema    json.RawMessage                                        "json:\"uischema,omitempty\" graphql:\"uischema\""
	Owner       *CreateBulkTemplate_CreateBulkTemplate_Templates_Owner "json:\"owner,omitempty\" graphql:\"owner\""
}

func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetDescription() *string {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.Description
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetID() string {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.ID
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetJsonconfig() *json.RawMessage {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return &t.Jsonconfig
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetName() string {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.Name
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetUischema() *json.RawMessage {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return &t.Uischema
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetOwner() *CreateBulkTemplate_CreateBulkTemplate_Templates_Owner {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.Owner
}

type CreateBulkTemplate_CreateBulkTemplate struct {
	Templates []*CreateBulkTemplate_CreateBulkTemplate_Templates "json:\"templates,omitempty\" graphql:\"templates\""
}

func (t *CreateBulkTemplate_CreateBulkTemplate) GetTemplates() []*CreateBulkTemplate_CreateBulkTemplate_Templates {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate{}
	}
	return t.Templates
}

type CreateTemplate_CreateTemplate_Template_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateTemplate_CreateTemplate_Template_Owner) GetID() string {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template_Owner{}
	}
	return t.ID
}

type CreateTemplate_CreateTemplate_Template struct {
	Description *string                                       "json:\"description,omitempty\" graphql:\"description\""
	ID          string                                        "json:\"id\" graphql:\"id\""
	Jsonconfig  json.RawMessage                               "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name        string                                        "json:\"name\" graphql:\"name\""
	Uischema    json.RawMessage                               "json:\"uischema,omitempty\" graphql:\"uischema\""
	Owner       *CreateTemplate_CreateTemplate_Template_Owner "json:\"owner,omitempty\" graphql:\"owner\""
}

func (t *CreateTemplate_CreateTemplate_Template) GetDescription() *string {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.Description
}
func (t *CreateTemplate_CreateTemplate_Template) GetID() string {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.ID
}
func (t *CreateTemplate_CreateTemplate_Template) GetJsonconfig() *json.RawMessage {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return &t.Jsonconfig
}
func (t *CreateTemplate_CreateTemplate_Template) GetName() string {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.Name
}
func (t *CreateTemplate_CreateTemplate_Template) GetUischema() *json.RawMessage {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return &t.Uischema
}
func (t *CreateTemplate_CreateTemplate_Template) GetOwner() *CreateTemplate_CreateTemplate_Template_Owner {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.Owner
}

type CreateTemplate_CreateTemplate struct {
	Template CreateTemplate_CreateTemplate_Template "json:\"template\" graphql:\"template\""
}

func (t *CreateTemplate_CreateTemplate) GetTemplate() *CreateTemplate_CreateTemplate_Template {
	if t == nil {
		t = &CreateTemplate_CreateTemplate{}
	}
	return &t.Template
}

type GetAllTemplates_Templates_Edges_Node_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllTemplates_Templates_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node_Owner{}
	}
	return t.ID
}

type GetAllTemplates_Templates_Edges_Node struct {
	CreatedAt   *time.Time                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                     "json:\"description,omitempty\" graphql:\"description\""
	ID          string                                      "json:\"id\" graphql:\"id\""
	Jsonconfig  json.RawMessage                             "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name        string                                      "json:\"name\" graphql:\"name\""
	Uischema    json.RawMessage                             "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt   *time.Time                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Owner       *GetAllTemplates_Templates_Edges_Node_Owner "json:\"owner,omitempty\" graphql:\"owner\""
}

func (t *GetAllTemplates_Templates_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTemplates_Templates_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTemplates_Templates_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllTemplates_Templates_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTemplates_Templates_Edges_Node) GetJsonconfig() *json.RawMessage {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return &t.Jsonconfig
}
func (t *GetAllTemplates_Templates_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllTemplates_Templates_Edges_Node) GetUischema() *json.RawMessage {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return &t.Uischema
}
func (t *GetAllTemplates_Templates_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTemplates_Templates_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllTemplates_Templates_Edges_Node) GetOwner() *GetAllTemplates_Templates_Edges_Node_Owner {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.Owner
}

type GetAllTemplates_Templates_Edges struct {
	Node *GetAllTemplates_Templates_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTemplates_Templates_Edges) GetNode() *GetAllTemplates_Templates_Edges_Node {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges{}
	}
	return t.Node
}

type GetAllTemplates_Templates struct {
	Edges []*GetAllTemplates_Templates_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllTemplates_Templates) GetEdges() []*GetAllTemplates_Templates_Edges {
	if t == nil {
		t = &GetAllTemplates_Templates{}
	}
	return t.Edges
}

type GetTemplateByID_Template_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetTemplateByID_Template_Owner) GetID() string {
	if t == nil {
		t = &GetTemplateByID_Template_Owner{}
	}
	return t.ID
}

type GetTemplateByID_Template struct {
	CreatedAt   *time.Time                      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                         "json:\"description,omitempty\" graphql:\"description\""
	ID          string                          "json:\"id\" graphql:\"id\""
	Jsonconfig  json.RawMessage                 "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name        string                          "json:\"name\" graphql:\"name\""
	Uischema    json.RawMessage                 "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt   *time.Time                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Owner       *GetTemplateByID_Template_Owner "json:\"owner,omitempty\" graphql:\"owner\""
}

func (t *GetTemplateByID_Template) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.CreatedAt
}
func (t *GetTemplateByID_Template) GetCreatedBy() *string {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.CreatedBy
}
func (t *GetTemplateByID_Template) GetDescription() *string {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.Description
}
func (t *GetTemplateByID_Template) GetID() string {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.ID
}
func (t *GetTemplateByID_Template) GetJsonconfig() *json.RawMessage {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return &t.Jsonconfig
}
func (t *GetTemplateByID_Template) GetName() string {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.Name
}
func (t *GetTemplateByID_Template) GetUischema() *json.RawMessage {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return &t.Uischema
}
func (t *GetTemplateByID_Template) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.UpdatedAt
}
func (t *GetTemplateByID_Template) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.UpdatedBy
}
func (t *GetTemplateByID_Template) GetOwner() *GetTemplateByID_Template_Owner {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.Owner
}

type UpdateTemplate_UpdateTemplate_Template_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateTemplate_UpdateTemplate_Template_Owner) GetID() string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template_Owner{}
	}
	return t.ID
}

type UpdateTemplate_UpdateTemplate_Template struct {
	CreatedAt   *time.Time                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                       "json:\"description,omitempty\" graphql:\"description\""
	ID          string                                        "json:\"id\" graphql:\"id\""
	Jsonconfig  json.RawMessage                               "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name        string                                        "json:\"name\" graphql:\"name\""
	Uischema    json.RawMessage                               "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt   *time.Time                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Owner       *UpdateTemplate_UpdateTemplate_Template_Owner "json:\"owner,omitempty\" graphql:\"owner\""
}

func (t *UpdateTemplate_UpdateTemplate_Template) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.CreatedAt
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.CreatedBy
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetDescription() *string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.Description
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetID() string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.ID
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetJsonconfig() *json.RawMessage {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return &t.Jsonconfig
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetName() string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.Name
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetUischema() *json.RawMessage {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return &t.Uischema
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.UpdatedAt
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.UpdatedBy
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetOwner() *UpdateTemplate_UpdateTemplate_Template_Owner {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.Owner
}

type UpdateTemplate_UpdateTemplate struct {
	Template UpdateTemplate_UpdateTemplate_Template "json:\"template\" graphql:\"template\""
}

func (t *UpdateTemplate_UpdateTemplate) GetTemplate() *UpdateTemplate_UpdateTemplate_Template {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate{}
	}
	return &t.Template
}

type GetAllTemplateHistories_TemplateHistories_Edges_Node struct {
	CreatedAt    *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string            "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime  time.Time          "json:\"historyTime\" graphql:\"historyTime\""
	ID           string             "json:\"id\" graphql:\"id\""
	Jsonconfig   json.RawMessage    "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name         string             "json:\"name\" graphql:\"name\""
	Operation    history.OpType     "json:\"operation\" graphql:\"operation\""
	OwnerID      *string            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref          *string            "json:\"ref,omitempty\" graphql:\"ref\""
	Tags         []string           "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateType enums.DocumentType "json:\"templateType\" graphql:\"templateType\""
	Uischema     json.RawMessage    "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt    *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetJsonconfig() *json.RawMessage {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.Jsonconfig
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetTemplateType() *enums.DocumentType {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.TemplateType
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetUischema() *json.RawMessage {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.Uischema
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTemplateHistories_TemplateHistories_Edges struct {
	Node *GetAllTemplateHistories_TemplateHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTemplateHistories_TemplateHistories_Edges) GetNode() *GetAllTemplateHistories_TemplateHistories_Edges_Node {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges{}
	}
	return t.Node
}

type GetAllTemplateHistories_TemplateHistories struct {
	Edges []*GetAllTemplateHistories_TemplateHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllTemplateHistories_TemplateHistories) GetEdges() []*GetAllTemplateHistories_TemplateHistories_Edges {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories{}
	}
	return t.Edges
}

type GetTemplateHistories_TemplateHistories_Edges_Node struct {
	CreatedAt    *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string            "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime  time.Time          "json:\"historyTime\" graphql:\"historyTime\""
	ID           string             "json:\"id\" graphql:\"id\""
	Jsonconfig   json.RawMessage    "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name         string             "json:\"name\" graphql:\"name\""
	Operation    history.OpType     "json:\"operation\" graphql:\"operation\""
	OwnerID      *string            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref          *string            "json:\"ref,omitempty\" graphql:\"ref\""
	Tags         []string           "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateType enums.DocumentType "json:\"templateType\" graphql:\"templateType\""
	Uischema     json.RawMessage    "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt    *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetJsonconfig() *json.RawMessage {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.Jsonconfig
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetTemplateType() *enums.DocumentType {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.TemplateType
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetUischema() *json.RawMessage {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.Uischema
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTemplateHistories_TemplateHistories_Edges struct {
	Node *GetTemplateHistories_TemplateHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTemplateHistories_TemplateHistories_Edges) GetNode() *GetTemplateHistories_TemplateHistories_Edges_Node {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges{}
	}
	return t.Node
}

type GetTemplateHistories_TemplateHistories struct {
	Edges []*GetTemplateHistories_TemplateHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetTemplateHistories_TemplateHistories) GetEdges() []*GetTemplateHistories_TemplateHistories_Edges {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories{}
	}
	return t.Edges
}

type CreateTFASetting_CreateTFASetting_TfaSetting_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateTFASetting_CreateTFASetting_TfaSetting_Owner) GetID() string {
	if t == nil {
		t = &CreateTFASetting_CreateTFASetting_TfaSetting_Owner{}
	}
	return t.ID
}

type CreateTFASetting_CreateTFASetting_TfaSetting struct {
	RecoveryCodes []string                                            "json:\"recoveryCodes,omitempty\" graphql:\"recoveryCodes\""
	TotpAllowed   *bool                                               "json:\"totpAllowed,omitempty\" graphql:\"totpAllowed\""
	Verified      bool                                                "json:\"verified\" graphql:\"verified\""
	Owner         *CreateTFASetting_CreateTFASetting_TfaSetting_Owner "json:\"owner,omitempty\" graphql:\"owner\""
}

func (t *CreateTFASetting_CreateTFASetting_TfaSetting) GetRecoveryCodes() []string {
	if t == nil {
		t = &CreateTFASetting_CreateTFASetting_TfaSetting{}
	}
	return t.RecoveryCodes
}
func (t *CreateTFASetting_CreateTFASetting_TfaSetting) GetTotpAllowed() *bool {
	if t == nil {
		t = &CreateTFASetting_CreateTFASetting_TfaSetting{}
	}
	return t.TotpAllowed
}
func (t *CreateTFASetting_CreateTFASetting_TfaSetting) GetVerified() bool {
	if t == nil {
		t = &CreateTFASetting_CreateTFASetting_TfaSetting{}
	}
	return t.Verified
}
func (t *CreateTFASetting_CreateTFASetting_TfaSetting) GetOwner() *CreateTFASetting_CreateTFASetting_TfaSetting_Owner {
	if t == nil {
		t = &CreateTFASetting_CreateTFASetting_TfaSetting{}
	}
	return t.Owner
}

type CreateTFASetting_CreateTFASetting struct {
	TfaSetting CreateTFASetting_CreateTFASetting_TfaSetting "json:\"tfaSetting\" graphql:\"tfaSetting\""
}

func (t *CreateTFASetting_CreateTFASetting) GetTfaSetting() *CreateTFASetting_CreateTFASetting_TfaSetting {
	if t == nil {
		t = &CreateTFASetting_CreateTFASetting{}
	}
	return &t.TfaSetting
}

type GetAllTFASettings_TfaSettings_Edges_Node_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllTFASettings_TfaSettings_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges_Node_Owner{}
	}
	return t.ID
}

type GetAllTFASettings_TfaSettings_Edges_Node struct {
	RecoveryCodes []string                                        "json:\"recoveryCodes,omitempty\" graphql:\"recoveryCodes\""
	TotpAllowed   *bool                                           "json:\"totpAllowed,omitempty\" graphql:\"totpAllowed\""
	Verified      bool                                            "json:\"verified\" graphql:\"verified\""
	Owner         *GetAllTFASettings_TfaSettings_Edges_Node_Owner "json:\"owner,omitempty\" graphql:\"owner\""
}

func (t *GetAllTFASettings_TfaSettings_Edges_Node) GetRecoveryCodes() []string {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges_Node{}
	}
	return t.RecoveryCodes
}
func (t *GetAllTFASettings_TfaSettings_Edges_Node) GetTotpAllowed() *bool {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges_Node{}
	}
	return t.TotpAllowed
}
func (t *GetAllTFASettings_TfaSettings_Edges_Node) GetVerified() bool {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges_Node{}
	}
	return t.Verified
}
func (t *GetAllTFASettings_TfaSettings_Edges_Node) GetOwner() *GetAllTFASettings_TfaSettings_Edges_Node_Owner {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges_Node{}
	}
	return t.Owner
}

type GetAllTFASettings_TfaSettings_Edges struct {
	Node *GetAllTFASettings_TfaSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTFASettings_TfaSettings_Edges) GetNode() *GetAllTFASettings_TfaSettings_Edges_Node {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges{}
	}
	return t.Node
}

type GetAllTFASettings_TfaSettings struct {
	Edges []*GetAllTFASettings_TfaSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllTFASettings_TfaSettings) GetEdges() []*GetAllTFASettings_TfaSettings_Edges {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings{}
	}
	return t.Edges
}

type GetTFASetting_TfaSetting_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetTFASetting_TfaSetting_Owner) GetID() string {
	if t == nil {
		t = &GetTFASetting_TfaSetting_Owner{}
	}
	return t.ID
}

type GetTFASetting_TfaSetting struct {
	RecoveryCodes []string                        "json:\"recoveryCodes,omitempty\" graphql:\"recoveryCodes\""
	TotpAllowed   *bool                           "json:\"totpAllowed,omitempty\" graphql:\"totpAllowed\""
	Verified      bool                            "json:\"verified\" graphql:\"verified\""
	Owner         *GetTFASetting_TfaSetting_Owner "json:\"owner,omitempty\" graphql:\"owner\""
}

func (t *GetTFASetting_TfaSetting) GetRecoveryCodes() []string {
	if t == nil {
		t = &GetTFASetting_TfaSetting{}
	}
	return t.RecoveryCodes
}
func (t *GetTFASetting_TfaSetting) GetTotpAllowed() *bool {
	if t == nil {
		t = &GetTFASetting_TfaSetting{}
	}
	return t.TotpAllowed
}
func (t *GetTFASetting_TfaSetting) GetVerified() bool {
	if t == nil {
		t = &GetTFASetting_TfaSetting{}
	}
	return t.Verified
}
func (t *GetTFASetting_TfaSetting) GetOwner() *GetTFASetting_TfaSetting_Owner {
	if t == nil {
		t = &GetTFASetting_TfaSetting{}
	}
	return t.Owner
}

type UpdateTFASetting_UpdateTFASetting_TfaSetting struct {
	RecoveryCodes []string "json:\"recoveryCodes,omitempty\" graphql:\"recoveryCodes\""
	TotpAllowed   *bool    "json:\"totpAllowed,omitempty\" graphql:\"totpAllowed\""
	Verified      bool     "json:\"verified\" graphql:\"verified\""
}

func (t *UpdateTFASetting_UpdateTFASetting_TfaSetting) GetRecoveryCodes() []string {
	if t == nil {
		t = &UpdateTFASetting_UpdateTFASetting_TfaSetting{}
	}
	return t.RecoveryCodes
}
func (t *UpdateTFASetting_UpdateTFASetting_TfaSetting) GetTotpAllowed() *bool {
	if t == nil {
		t = &UpdateTFASetting_UpdateTFASetting_TfaSetting{}
	}
	return t.TotpAllowed
}
func (t *UpdateTFASetting_UpdateTFASetting_TfaSetting) GetVerified() bool {
	if t == nil {
		t = &UpdateTFASetting_UpdateTFASetting_TfaSetting{}
	}
	return t.Verified
}

type UpdateTFASetting_UpdateTFASetting struct {
	TfaSetting UpdateTFASetting_UpdateTFASetting_TfaSetting "json:\"tfaSetting\" graphql:\"tfaSetting\""
}

func (t *UpdateTFASetting_UpdateTFASetting) GetTfaSetting() *UpdateTFASetting_UpdateTFASetting_TfaSetting {
	if t == nil {
		t = &UpdateTFASetting_UpdateTFASetting{}
	}
	return &t.TfaSetting
}

type CreateUser_CreateUser_User_OrgMemberships struct {
	ID             string "json:\"id\" graphql:\"id\""
	OrganizationID string "json:\"organizationID\" graphql:\"organizationID\""
}

func (t *CreateUser_CreateUser_User_OrgMemberships) GetID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User_OrgMemberships{}
	}
	return t.ID
}
func (t *CreateUser_CreateUser_User_OrgMemberships) GetOrganizationID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User_OrgMemberships{}
	}
	return t.OrganizationID
}

type CreateUser_CreateUser_User_GroupMemberships struct {
	ID      string "json:\"id\" graphql:\"id\""
	GroupID string "json:\"groupID\" graphql:\"groupID\""
}

func (t *CreateUser_CreateUser_User_GroupMemberships) GetID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User_GroupMemberships{}
	}
	return t.ID
}
func (t *CreateUser_CreateUser_User_GroupMemberships) GetGroupID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User_GroupMemberships{}
	}
	return t.GroupID
}

type CreateUser_CreateUser_User_Setting_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *CreateUser_CreateUser_User_Setting_DefaultOrg) GetID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting_DefaultOrg{}
	}
	return t.ID
}
func (t *CreateUser_CreateUser_User_Setting_DefaultOrg) GetName() string {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting_DefaultOrg{}
	}
	return t.Name
}
func (t *CreateUser_CreateUser_User_Setting_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting_DefaultOrg{}
	}
	return t.PersonalOrg
}

type CreateUser_CreateUser_User_Setting struct {
	DefaultOrg     *CreateUser_CreateUser_User_Setting_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	CreatedAt      *time.Time                                     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed bool                                           "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	Locked         bool                                           "json:\"locked\" graphql:\"locked\""
	SilencedAt     *time.Time                                     "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                               "json:\"status\" graphql:\"status\""
	SuspendedAt    *time.Time                                     "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags           []string                                       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateUser_CreateUser_User_Setting) GetDefaultOrg() *CreateUser_CreateUser_User_Setting_DefaultOrg {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.DefaultOrg
}
func (t *CreateUser_CreateUser_User_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.CreatedAt
}
func (t *CreateUser_CreateUser_User_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.CreatedBy
}
func (t *CreateUser_CreateUser_User_Setting) GetEmailConfirmed() bool {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.EmailConfirmed
}
func (t *CreateUser_CreateUser_User_Setting) GetLocked() bool {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.Locked
}
func (t *CreateUser_CreateUser_User_Setting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.SilencedAt
}
func (t *CreateUser_CreateUser_User_Setting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return &t.Status
}
func (t *CreateUser_CreateUser_User_Setting) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.SuspendedAt
}
func (t *CreateUser_CreateUser_User_Setting) GetTags() []string {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.Tags
}
func (t *CreateUser_CreateUser_User_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.UpdatedAt
}
func (t *CreateUser_CreateUser_User_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.UpdatedBy
}

type CreateUser_CreateUser_User struct {
	AuthProvider      enums.AuthProvider                             "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFile   *string                                        "json:\"avatarLocalFile,omitempty\" graphql:\"avatarLocalFile\""
	AvatarRemoteURL   *string                                        "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarLocalFileID *string                                        "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	DisplayName       string                                         "json:\"displayName\" graphql:\"displayName\""
	Email             string                                         "json:\"email\" graphql:\"email\""
	FirstName         *string                                        "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID                string                                         "json:\"id\" graphql:\"id\""
	LastName          *string                                        "json:\"lastName,omitempty\" graphql:\"lastName\""
	Sub               *string                                        "json:\"sub,omitempty\" graphql:\"sub\""
	Tags              []string                                       "json:\"tags,omitempty\" graphql:\"tags\""
	OrgMemberships    []*CreateUser_CreateUser_User_OrgMemberships   "json:\"orgMemberships,omitempty\" graphql:\"orgMemberships\""
	GroupMemberships  []*CreateUser_CreateUser_User_GroupMemberships "json:\"groupMemberships,omitempty\" graphql:\"groupMemberships\""
	Setting           CreateUser_CreateUser_User_Setting             "json:\"setting\" graphql:\"setting\""
}

func (t *CreateUser_CreateUser_User) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return &t.AuthProvider
}
func (t *CreateUser_CreateUser_User) GetAvatarLocalFile() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.AvatarLocalFile
}
func (t *CreateUser_CreateUser_User) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.AvatarRemoteURL
}
func (t *CreateUser_CreateUser_User) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.AvatarLocalFileID
}
func (t *CreateUser_CreateUser_User) GetDisplayName() string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.DisplayName
}
func (t *CreateUser_CreateUser_User) GetEmail() string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.Email
}
func (t *CreateUser_CreateUser_User) GetFirstName() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.FirstName
}
func (t *CreateUser_CreateUser_User) GetID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.ID
}
func (t *CreateUser_CreateUser_User) GetLastName() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.LastName
}
func (t *CreateUser_CreateUser_User) GetSub() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.Sub
}
func (t *CreateUser_CreateUser_User) GetTags() []string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.Tags
}
func (t *CreateUser_CreateUser_User) GetOrgMemberships() []*CreateUser_CreateUser_User_OrgMemberships {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.OrgMemberships
}
func (t *CreateUser_CreateUser_User) GetGroupMemberships() []*CreateUser_CreateUser_User_GroupMemberships {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.GroupMemberships
}
func (t *CreateUser_CreateUser_User) GetSetting() *CreateUser_CreateUser_User_Setting {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return &t.Setting
}

type CreateUser_CreateUser struct {
	User CreateUser_CreateUser_User "json:\"user\" graphql:\"user\""
}

func (t *CreateUser_CreateUser) GetUser() *CreateUser_CreateUser_User {
	if t == nil {
		t = &CreateUser_CreateUser{}
	}
	return &t.User
}

type DeleteUser_DeleteUser struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteUser_DeleteUser) GetDeletedID() string {
	if t == nil {
		t = &DeleteUser_DeleteUser{}
	}
	return t.DeletedID
}

type GetAllUsers_Users_Edges_Node_Setting_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *GetAllUsers_Users_Edges_Node_Setting_DefaultOrg) GetID() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting_DefaultOrg{}
	}
	return t.ID
}
func (t *GetAllUsers_Users_Edges_Node_Setting_DefaultOrg) GetName() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting_DefaultOrg{}
	}
	return t.Name
}
func (t *GetAllUsers_Users_Edges_Node_Setting_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting_DefaultOrg{}
	}
	return t.PersonalOrg
}

type GetAllUsers_Users_Edges_Node_Setting struct {
	DefaultOrg     *GetAllUsers_Users_Edges_Node_Setting_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	CreatedAt      *time.Time                                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed bool                                             "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	Locked         bool                                             "json:\"locked\" graphql:\"locked\""
	SilencedAt     *time.Time                                       "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                                 "json:\"status\" graphql:\"status\""
	SuspendedAt    *time.Time                                       "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags           []string                                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllUsers_Users_Edges_Node_Setting) GetDefaultOrg() *GetAllUsers_Users_Edges_Node_Setting_DefaultOrg {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return t.DefaultOrg
}
func (t *GetAllUsers_Users_Edges_Node_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return t.CreatedAt
}
func (t *GetAllUsers_Users_Edges_Node_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return t.CreatedBy
}
func (t *GetAllUsers_Users_Edges_Node_Setting) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return t.EmailConfirmed
}
func (t *GetAllUsers_Users_Edges_Node_Setting) GetLocked() bool {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return t.Locked
}
func (t *GetAllUsers_Users_Edges_Node_Setting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return t.SilencedAt
}
func (t *GetAllUsers_Users_Edges_Node_Setting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return &t.Status
}
func (t *GetAllUsers_Users_Edges_Node_Setting) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return t.SuspendedAt
}
func (t *GetAllUsers_Users_Edges_Node_Setting) GetTags() []string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return t.Tags
}
func (t *GetAllUsers_Users_Edges_Node_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetAllUsers_Users_Edges_Node_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return t.UpdatedBy
}

type GetAllUsers_Users_Edges_Node struct {
	AuthProvider      enums.AuthProvider                   "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFile   *string                              "json:\"avatarLocalFile,omitempty\" graphql:\"avatarLocalFile\""
	AvatarRemoteURL   *string                              "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarLocalFileID *string                              "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	DisplayName       string                               "json:\"displayName\" graphql:\"displayName\""
	Email             string                               "json:\"email\" graphql:\"email\""
	FirstName         *string                              "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID                string                               "json:\"id\" graphql:\"id\""
	LastName          *string                              "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen          *time.Time                           "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Sub               *string                              "json:\"sub,omitempty\" graphql:\"sub\""
	Tags              []string                             "json:\"tags,omitempty\" graphql:\"tags\""
	Setting           GetAllUsers_Users_Edges_Node_Setting "json:\"setting\" graphql:\"setting\""
	CreatedAt         *time.Time                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string                              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt         *time.Time                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string                              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllUsers_Users_Edges_Node) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return &t.AuthProvider
}
func (t *GetAllUsers_Users_Edges_Node) GetAvatarLocalFile() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.AvatarLocalFile
}
func (t *GetAllUsers_Users_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *GetAllUsers_Users_Edges_Node) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.AvatarLocalFileID
}
func (t *GetAllUsers_Users_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllUsers_Users_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.Email
}
func (t *GetAllUsers_Users_Edges_Node) GetFirstName() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.FirstName
}
func (t *GetAllUsers_Users_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllUsers_Users_Edges_Node) GetLastName() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.LastName
}
func (t *GetAllUsers_Users_Edges_Node) GetLastSeen() *time.Time {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.LastSeen
}
func (t *GetAllUsers_Users_Edges_Node) GetSub() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.Sub
}
func (t *GetAllUsers_Users_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllUsers_Users_Edges_Node) GetSetting() *GetAllUsers_Users_Edges_Node_Setting {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return &t.Setting
}
func (t *GetAllUsers_Users_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllUsers_Users_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllUsers_Users_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllUsers_Users_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllUsers_Users_Edges struct {
	Node *GetAllUsers_Users_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllUsers_Users_Edges) GetNode() *GetAllUsers_Users_Edges_Node {
	if t == nil {
		t = &GetAllUsers_Users_Edges{}
	}
	return t.Node
}

type GetAllUsers_Users struct {
	Edges []*GetAllUsers_Users_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllUsers_Users) GetEdges() []*GetAllUsers_Users_Edges {
	if t == nil {
		t = &GetAllUsers_Users{}
	}
	return t.Edges
}

type GetUserByID_User_Setting_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *GetUserByID_User_Setting_DefaultOrg) GetID() string {
	if t == nil {
		t = &GetUserByID_User_Setting_DefaultOrg{}
	}
	return t.ID
}
func (t *GetUserByID_User_Setting_DefaultOrg) GetName() string {
	if t == nil {
		t = &GetUserByID_User_Setting_DefaultOrg{}
	}
	return t.Name
}
func (t *GetUserByID_User_Setting_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetUserByID_User_Setting_DefaultOrg{}
	}
	return t.PersonalOrg
}

type GetUserByID_User_Setting struct {
	DefaultOrg     *GetUserByID_User_Setting_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	CreatedAt      *time.Time                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed bool                                 "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	Locked         bool                                 "json:\"locked\" graphql:\"locked\""
	SilencedAt     *time.Time                           "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                     "json:\"status\" graphql:\"status\""
	SuspendedAt    *time.Time                           "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags           []string                             "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetUserByID_User_Setting) GetDefaultOrg() *GetUserByID_User_Setting_DefaultOrg {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.DefaultOrg
}
func (t *GetUserByID_User_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.CreatedAt
}
func (t *GetUserByID_User_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.CreatedBy
}
func (t *GetUserByID_User_Setting) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.EmailConfirmed
}
func (t *GetUserByID_User_Setting) GetLocked() bool {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.Locked
}
func (t *GetUserByID_User_Setting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.SilencedAt
}
func (t *GetUserByID_User_Setting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return &t.Status
}
func (t *GetUserByID_User_Setting) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.SuspendedAt
}
func (t *GetUserByID_User_Setting) GetTags() []string {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.Tags
}
func (t *GetUserByID_User_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetUserByID_User_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.UpdatedBy
}

type GetUserByID_User_Organizations_Members struct {
	ID   string     "json:\"id\" graphql:\"id\""
	Role enums.Role "json:\"role\" graphql:\"role\""
}

func (t *GetUserByID_User_Organizations_Members) GetID() string {
	if t == nil {
		t = &GetUserByID_User_Organizations_Members{}
	}
	return t.ID
}
func (t *GetUserByID_User_Organizations_Members) GetRole() *enums.Role {
	if t == nil {
		t = &GetUserByID_User_Organizations_Members{}
	}
	return &t.Role
}

type GetUserByID_User_Organizations struct {
	ID          string                                    "json:\"id\" graphql:\"id\""
	Name        string                                    "json:\"name\" graphql:\"name\""
	PersonalOrg *bool                                     "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Members     []*GetUserByID_User_Organizations_Members "json:\"members,omitempty\" graphql:\"members\""
}

func (t *GetUserByID_User_Organizations) GetID() string {
	if t == nil {
		t = &GetUserByID_User_Organizations{}
	}
	return t.ID
}
func (t *GetUserByID_User_Organizations) GetName() string {
	if t == nil {
		t = &GetUserByID_User_Organizations{}
	}
	return t.Name
}
func (t *GetUserByID_User_Organizations) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetUserByID_User_Organizations{}
	}
	return t.PersonalOrg
}
func (t *GetUserByID_User_Organizations) GetMembers() []*GetUserByID_User_Organizations_Members {
	if t == nil {
		t = &GetUserByID_User_Organizations{}
	}
	return t.Members
}

type GetUserByID_User struct {
	AuthProvider      enums.AuthProvider                "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFile   *string                           "json:\"avatarLocalFile,omitempty\" graphql:\"avatarLocalFile\""
	AvatarRemoteURL   *string                           "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarLocalFileID *string                           "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	DisplayName       string                            "json:\"displayName\" graphql:\"displayName\""
	Email             string                            "json:\"email\" graphql:\"email\""
	FirstName         *string                           "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID                string                            "json:\"id\" graphql:\"id\""
	LastName          *string                           "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen          *time.Time                        "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Sub               *string                           "json:\"sub,omitempty\" graphql:\"sub\""
	Tags              []string                          "json:\"tags,omitempty\" graphql:\"tags\""
	Setting           GetUserByID_User_Setting          "json:\"setting\" graphql:\"setting\""
	Organizations     []*GetUserByID_User_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
	UpdatedAt         *time.Time                        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string                           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	CreatedAt         *time.Time                        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string                           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
}

func (t *GetUserByID_User) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return &t.AuthProvider
}
func (t *GetUserByID_User) GetAvatarLocalFile() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.AvatarLocalFile
}
func (t *GetUserByID_User) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.AvatarRemoteURL
}
func (t *GetUserByID_User) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.AvatarLocalFileID
}
func (t *GetUserByID_User) GetDisplayName() string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.DisplayName
}
func (t *GetUserByID_User) GetEmail() string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.Email
}
func (t *GetUserByID_User) GetFirstName() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.FirstName
}
func (t *GetUserByID_User) GetID() string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.ID
}
func (t *GetUserByID_User) GetLastName() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.LastName
}
func (t *GetUserByID_User) GetLastSeen() *time.Time {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.LastSeen
}
func (t *GetUserByID_User) GetSub() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.Sub
}
func (t *GetUserByID_User) GetTags() []string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.Tags
}
func (t *GetUserByID_User) GetSetting() *GetUserByID_User_Setting {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return &t.Setting
}
func (t *GetUserByID_User) GetOrganizations() []*GetUserByID_User_Organizations {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.Organizations
}
func (t *GetUserByID_User) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.UpdatedAt
}
func (t *GetUserByID_User) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.UpdatedBy
}
func (t *GetUserByID_User) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.CreatedAt
}
func (t *GetUserByID_User) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.CreatedBy
}

type GetUserByIDWithOrgs_User_Setting_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *GetUserByIDWithOrgs_User_Setting_DefaultOrg) GetID() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting_DefaultOrg{}
	}
	return t.ID
}
func (t *GetUserByIDWithOrgs_User_Setting_DefaultOrg) GetName() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting_DefaultOrg{}
	}
	return t.Name
}
func (t *GetUserByIDWithOrgs_User_Setting_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting_DefaultOrg{}
	}
	return t.PersonalOrg
}

type GetUserByIDWithOrgs_User_Setting struct {
	DefaultOrg     *GetUserByIDWithOrgs_User_Setting_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	CreatedAt      *time.Time                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed bool                                         "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	Locked         bool                                         "json:\"locked\" graphql:\"locked\""
	SilencedAt     *time.Time                                   "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                             "json:\"status\" graphql:\"status\""
	SuspendedAt    *time.Time                                   "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags           []string                                     "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetUserByIDWithOrgs_User_Setting) GetDefaultOrg() *GetUserByIDWithOrgs_User_Setting_DefaultOrg {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.DefaultOrg
}
func (t *GetUserByIDWithOrgs_User_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.CreatedAt
}
func (t *GetUserByIDWithOrgs_User_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.CreatedBy
}
func (t *GetUserByIDWithOrgs_User_Setting) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.EmailConfirmed
}
func (t *GetUserByIDWithOrgs_User_Setting) GetLocked() bool {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.Locked
}
func (t *GetUserByIDWithOrgs_User_Setting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.SilencedAt
}
func (t *GetUserByIDWithOrgs_User_Setting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return &t.Status
}
func (t *GetUserByIDWithOrgs_User_Setting) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.SuspendedAt
}
func (t *GetUserByIDWithOrgs_User_Setting) GetTags() []string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.Tags
}
func (t *GetUserByIDWithOrgs_User_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetUserByIDWithOrgs_User_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.UpdatedBy
}

type GetUserByIDWithOrgs_User_OrgMemberships_User struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetUserByIDWithOrgs_User_OrgMemberships_User) GetFirstName() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_OrgMemberships_User{}
	}
	return t.FirstName
}
func (t *GetUserByIDWithOrgs_User_OrgMemberships_User) GetLastName() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_OrgMemberships_User{}
	}
	return t.LastName
}

type GetUserByIDWithOrgs_User_OrgMemberships struct {
	ID   string                                       "json:\"id\" graphql:\"id\""
	Role enums.Role                                   "json:\"role\" graphql:\"role\""
	User GetUserByIDWithOrgs_User_OrgMemberships_User "json:\"user\" graphql:\"user\""
}

func (t *GetUserByIDWithOrgs_User_OrgMemberships) GetID() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_OrgMemberships{}
	}
	return t.ID
}
func (t *GetUserByIDWithOrgs_User_OrgMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_OrgMemberships{}
	}
	return &t.Role
}
func (t *GetUserByIDWithOrgs_User_OrgMemberships) GetUser() *GetUserByIDWithOrgs_User_OrgMemberships_User {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_OrgMemberships{}
	}
	return &t.User
}

type GetUserByIDWithOrgs_User struct {
	AuthProvider      enums.AuthProvider                         "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFile   *string                                    "json:\"avatarLocalFile,omitempty\" graphql:\"avatarLocalFile\""
	AvatarRemoteURL   *string                                    "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarLocalFileID *string                                    "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	DisplayName       string                                     "json:\"displayName\" graphql:\"displayName\""
	Email             string                                     "json:\"email\" graphql:\"email\""
	FirstName         *string                                    "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID                string                                     "json:\"id\" graphql:\"id\""
	LastName          *string                                    "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen          *time.Time                                 "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Sub               *string                                    "json:\"sub,omitempty\" graphql:\"sub\""
	Tags              []string                                   "json:\"tags,omitempty\" graphql:\"tags\""
	Setting           GetUserByIDWithOrgs_User_Setting           "json:\"setting\" graphql:\"setting\""
	OrgMemberships    []*GetUserByIDWithOrgs_User_OrgMemberships "json:\"orgMemberships,omitempty\" graphql:\"orgMemberships\""
	CreatedAt         *time.Time                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt         *time.Time                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetUserByIDWithOrgs_User) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return &t.AuthProvider
}
func (t *GetUserByIDWithOrgs_User) GetAvatarLocalFile() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.AvatarLocalFile
}
func (t *GetUserByIDWithOrgs_User) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.AvatarRemoteURL
}
func (t *GetUserByIDWithOrgs_User) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.AvatarLocalFileID
}
func (t *GetUserByIDWithOrgs_User) GetDisplayName() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.DisplayName
}
func (t *GetUserByIDWithOrgs_User) GetEmail() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.Email
}
func (t *GetUserByIDWithOrgs_User) GetFirstName() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.FirstName
}
func (t *GetUserByIDWithOrgs_User) GetID() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.ID
}
func (t *GetUserByIDWithOrgs_User) GetLastName() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.LastName
}
func (t *GetUserByIDWithOrgs_User) GetLastSeen() *time.Time {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.LastSeen
}
func (t *GetUserByIDWithOrgs_User) GetSub() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.Sub
}
func (t *GetUserByIDWithOrgs_User) GetTags() []string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.Tags
}
func (t *GetUserByIDWithOrgs_User) GetSetting() *GetUserByIDWithOrgs_User_Setting {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return &t.Setting
}
func (t *GetUserByIDWithOrgs_User) GetOrgMemberships() []*GetUserByIDWithOrgs_User_OrgMemberships {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.OrgMemberships
}
func (t *GetUserByIDWithOrgs_User) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.CreatedAt
}
func (t *GetUserByIDWithOrgs_User) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.CreatedBy
}
func (t *GetUserByIDWithOrgs_User) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.UpdatedAt
}
func (t *GetUserByIDWithOrgs_User) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.UpdatedBy
}

type UpdateUser_UpdateUser_User_GroupMemberships struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateUser_UpdateUser_User_GroupMemberships) GetID() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_GroupMemberships{}
	}
	return t.ID
}

type UpdateUser_UpdateUser_User_OrgMemberships struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateUser_UpdateUser_User_OrgMemberships) GetID() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_OrgMemberships{}
	}
	return t.ID
}

type UpdateUser_UpdateUser_User_Setting_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *UpdateUser_UpdateUser_User_Setting_DefaultOrg) GetID() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting_DefaultOrg{}
	}
	return t.ID
}
func (t *UpdateUser_UpdateUser_User_Setting_DefaultOrg) GetName() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting_DefaultOrg{}
	}
	return t.Name
}
func (t *UpdateUser_UpdateUser_User_Setting_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting_DefaultOrg{}
	}
	return t.PersonalOrg
}

type UpdateUser_UpdateUser_User_Setting struct {
	DefaultOrg     *UpdateUser_UpdateUser_User_Setting_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	CreatedAt      *time.Time                                     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed bool                                           "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	Locked         bool                                           "json:\"locked\" graphql:\"locked\""
	SilencedAt     *time.Time                                     "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                               "json:\"status\" graphql:\"status\""
	SuspendedAt    *time.Time                                     "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags           []string                                       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateUser_UpdateUser_User_Setting) GetDefaultOrg() *UpdateUser_UpdateUser_User_Setting_DefaultOrg {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.DefaultOrg
}
func (t *UpdateUser_UpdateUser_User_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.CreatedAt
}
func (t *UpdateUser_UpdateUser_User_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.CreatedBy
}
func (t *UpdateUser_UpdateUser_User_Setting) GetEmailConfirmed() bool {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.EmailConfirmed
}
func (t *UpdateUser_UpdateUser_User_Setting) GetLocked() bool {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.Locked
}
func (t *UpdateUser_UpdateUser_User_Setting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.SilencedAt
}
func (t *UpdateUser_UpdateUser_User_Setting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return &t.Status
}
func (t *UpdateUser_UpdateUser_User_Setting) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.SuspendedAt
}
func (t *UpdateUser_UpdateUser_User_Setting) GetTags() []string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.Tags
}
func (t *UpdateUser_UpdateUser_User_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.UpdatedAt
}
func (t *UpdateUser_UpdateUser_User_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.UpdatedBy
}

type UpdateUser_UpdateUser_User struct {
	AuthProvider      enums.AuthProvider                             "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFile   *string                                        "json:\"avatarLocalFile,omitempty\" graphql:\"avatarLocalFile\""
	AvatarRemoteURL   *string                                        "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarLocalFileID *string                                        "json:\"avatarLocalFileID,omitempty\" graphql:\"avatarLocalFileID\""
	DisplayName       string                                         "json:\"displayName\" graphql:\"displayName\""
	Email             string                                         "json:\"email\" graphql:\"email\""
	FirstName         *string                                        "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID                string                                         "json:\"id\" graphql:\"id\""
	LastName          *string                                        "json:\"lastName,omitempty\" graphql:\"lastName\""
	Sub               *string                                        "json:\"sub,omitempty\" graphql:\"sub\""
	Tags              []string                                       "json:\"tags,omitempty\" graphql:\"tags\""
	GroupMemberships  []*UpdateUser_UpdateUser_User_GroupMemberships "json:\"groupMemberships,omitempty\" graphql:\"groupMemberships\""
	OrgMemberships    []*UpdateUser_UpdateUser_User_OrgMemberships   "json:\"orgMemberships,omitempty\" graphql:\"orgMemberships\""
	Setting           UpdateUser_UpdateUser_User_Setting             "json:\"setting\" graphql:\"setting\""
}

func (t *UpdateUser_UpdateUser_User) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return &t.AuthProvider
}
func (t *UpdateUser_UpdateUser_User) GetAvatarLocalFile() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.AvatarLocalFile
}
func (t *UpdateUser_UpdateUser_User) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.AvatarRemoteURL
}
func (t *UpdateUser_UpdateUser_User) GetAvatarLocalFileID() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.AvatarLocalFileID
}
func (t *UpdateUser_UpdateUser_User) GetDisplayName() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.DisplayName
}
func (t *UpdateUser_UpdateUser_User) GetEmail() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.Email
}
func (t *UpdateUser_UpdateUser_User) GetFirstName() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.FirstName
}
func (t *UpdateUser_UpdateUser_User) GetID() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.ID
}
func (t *UpdateUser_UpdateUser_User) GetLastName() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.LastName
}
func (t *UpdateUser_UpdateUser_User) GetSub() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.Sub
}
func (t *UpdateUser_UpdateUser_User) GetTags() []string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.Tags
}
func (t *UpdateUser_UpdateUser_User) GetGroupMemberships() []*UpdateUser_UpdateUser_User_GroupMemberships {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.GroupMemberships
}
func (t *UpdateUser_UpdateUser_User) GetOrgMemberships() []*UpdateUser_UpdateUser_User_OrgMemberships {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.OrgMemberships
}
func (t *UpdateUser_UpdateUser_User) GetSetting() *UpdateUser_UpdateUser_User_Setting {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return &t.Setting
}

type UpdateUser_UpdateUser struct {
	User UpdateUser_UpdateUser_User "json:\"user\" graphql:\"user\""
}

func (t *UpdateUser_UpdateUser) GetUser() *UpdateUser_UpdateUser_User {
	if t == nil {
		t = &UpdateUser_UpdateUser{}
	}
	return &t.User
}

type GetAllUserHistories_UserHistories_Edges_Node struct {
	AuthProvider    enums.AuthProvider "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFile *string            "json:\"avatarLocalFile,omitempty\" graphql:\"avatarLocalFile\""
	AvatarRemoteURL *string            "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarUpdatedAt *time.Time         "json:\"avatarUpdatedAt,omitempty\" graphql:\"avatarUpdatedAt\""
	CreatedAt       *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayName     string             "json:\"displayName\" graphql:\"displayName\""
	Email           string             "json:\"email\" graphql:\"email\""
	FirstName       *string            "json:\"firstName,omitempty\" graphql:\"firstName\""
	HistoryTime     time.Time          "json:\"historyTime\" graphql:\"historyTime\""
	ID              string             "json:\"id\" graphql:\"id\""
	LastName        *string            "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen        *time.Time         "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Operation       history.OpType     "json:\"operation\" graphql:\"operation\""
	Ref             *string            "json:\"ref,omitempty\" graphql:\"ref\""
	Role            *enums.Role        "json:\"role,omitempty\" graphql:\"role\""
	Sub             *string            "json:\"sub,omitempty\" graphql:\"sub\""
	Tags            []string           "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllUserHistories_UserHistories_Edges_Node) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return &t.AuthProvider
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetAvatarLocalFile() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarLocalFile
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetAvatarUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarUpdatedAt
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.Email
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetFirstName() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.FirstName
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetLastName() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.LastName
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetLastSeen() *time.Time {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.LastSeen
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.Role
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetSub() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.Sub
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllUserHistories_UserHistories_Edges struct {
	Node *GetAllUserHistories_UserHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllUserHistories_UserHistories_Edges) GetNode() *GetAllUserHistories_UserHistories_Edges_Node {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges{}
	}
	return t.Node
}

type GetAllUserHistories_UserHistories struct {
	Edges []*GetAllUserHistories_UserHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllUserHistories_UserHistories) GetEdges() []*GetAllUserHistories_UserHistories_Edges {
	if t == nil {
		t = &GetAllUserHistories_UserHistories{}
	}
	return t.Edges
}

type GetUserHistories_UserHistories_Edges_Node struct {
	AuthProvider    enums.AuthProvider "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFile *string            "json:\"avatarLocalFile,omitempty\" graphql:\"avatarLocalFile\""
	AvatarRemoteURL *string            "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarUpdatedAt *time.Time         "json:\"avatarUpdatedAt,omitempty\" graphql:\"avatarUpdatedAt\""
	CreatedAt       *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayName     string             "json:\"displayName\" graphql:\"displayName\""
	Email           string             "json:\"email\" graphql:\"email\""
	FirstName       *string            "json:\"firstName,omitempty\" graphql:\"firstName\""
	HistoryTime     time.Time          "json:\"historyTime\" graphql:\"historyTime\""
	ID              string             "json:\"id\" graphql:\"id\""
	LastName        *string            "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen        *time.Time         "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Operation       history.OpType     "json:\"operation\" graphql:\"operation\""
	Ref             *string            "json:\"ref,omitempty\" graphql:\"ref\""
	Role            *enums.Role        "json:\"role,omitempty\" graphql:\"role\""
	Sub             *string            "json:\"sub,omitempty\" graphql:\"sub\""
	Tags            []string           "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetUserHistories_UserHistories_Edges_Node) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return &t.AuthProvider
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetAvatarLocalFile() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarLocalFile
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetAvatarUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarUpdatedAt
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.Email
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetFirstName() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.FirstName
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetLastName() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.LastName
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetLastSeen() *time.Time {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.LastSeen
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.Role
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetSub() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.Sub
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetUserHistories_UserHistories_Edges struct {
	Node *GetUserHistories_UserHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetUserHistories_UserHistories_Edges) GetNode() *GetUserHistories_UserHistories_Edges_Node {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges{}
	}
	return t.Node
}

type GetUserHistories_UserHistories struct {
	Edges []*GetUserHistories_UserHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetUserHistories_UserHistories) GetEdges() []*GetUserHistories_UserHistories_Edges {
	if t == nil {
		t = &GetUserHistories_UserHistories{}
	}
	return t.Edges
}

type GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg) GetID() string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg{}
	}
	return t.ID
}
func (t *GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg) GetName() string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg{}
	}
	return t.Name
}
func (t *GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg{}
	}
	return t.PersonalOrg
}

type GetAllUserSettings_UserSettings_Edges_Node struct {
	ID             string                                                 "json:\"id\" graphql:\"id\""
	SilencedAt     *time.Time                                             "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                                       "json:\"status\" graphql:\"status\""
	DefaultOrg     *GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	Tags           []string                                               "json:\"tags,omitempty\" graphql:\"tags\""
	Locked         bool                                                   "json:\"locked\" graphql:\"locked\""
	IsTfaEnabled   *bool                                                  "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	EmailConfirmed bool                                                   "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	CreatedAt      *time.Time                                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DeletedAt      *time.Time                                             "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	DeletedBy      *string                                                "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	UpdatedAt      *time.Time                                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllUserSettings_UserSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.SilencedAt
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetDefaultOrg() *GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.DefaultOrg
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetLocked() bool {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.Locked
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.IsTfaEnabled
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.EmailConfirmed
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetDeletedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.DeletedAt
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllUserSettings_UserSettings_Edges struct {
	Node *GetAllUserSettings_UserSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllUserSettings_UserSettings_Edges) GetNode() *GetAllUserSettings_UserSettings_Edges_Node {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges{}
	}
	return t.Node
}

type GetAllUserSettings_UserSettings struct {
	Edges []*GetAllUserSettings_UserSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllUserSettings_UserSettings) GetEdges() []*GetAllUserSettings_UserSettings_Edges {
	if t == nil {
		t = &GetAllUserSettings_UserSettings{}
	}
	return t.Edges
}

type GetUserSettingByID_UserSetting_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *GetUserSettingByID_UserSetting_DefaultOrg) GetID() string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting_DefaultOrg{}
	}
	return t.ID
}
func (t *GetUserSettingByID_UserSetting_DefaultOrg) GetName() string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting_DefaultOrg{}
	}
	return t.Name
}
func (t *GetUserSettingByID_UserSetting_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetUserSettingByID_UserSetting_DefaultOrg{}
	}
	return t.PersonalOrg
}

type GetUserSettingByID_UserSetting struct {
	ID             string                                     "json:\"id\" graphql:\"id\""
	SilencedAt     *time.Time                                 "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                           "json:\"status\" graphql:\"status\""
	DefaultOrg     *GetUserSettingByID_UserSetting_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	Tags           []string                                   "json:\"tags,omitempty\" graphql:\"tags\""
	Locked         bool                                       "json:\"locked\" graphql:\"locked\""
	IsTfaEnabled   *bool                                      "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	EmailConfirmed bool                                       "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	CreatedAt      *time.Time                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DeletedAt      *time.Time                                 "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	DeletedBy      *string                                    "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	UpdatedAt      *time.Time                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetUserSettingByID_UserSetting) GetID() string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.ID
}
func (t *GetUserSettingByID_UserSetting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.SilencedAt
}
func (t *GetUserSettingByID_UserSetting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return &t.Status
}
func (t *GetUserSettingByID_UserSetting) GetDefaultOrg() *GetUserSettingByID_UserSetting_DefaultOrg {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.DefaultOrg
}
func (t *GetUserSettingByID_UserSetting) GetTags() []string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.Tags
}
func (t *GetUserSettingByID_UserSetting) GetLocked() bool {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.Locked
}
func (t *GetUserSettingByID_UserSetting) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.IsTfaEnabled
}
func (t *GetUserSettingByID_UserSetting) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.EmailConfirmed
}
func (t *GetUserSettingByID_UserSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.CreatedAt
}
func (t *GetUserSettingByID_UserSetting) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.CreatedBy
}
func (t *GetUserSettingByID_UserSetting) GetDeletedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.DeletedAt
}
func (t *GetUserSettingByID_UserSetting) GetDeletedBy() *string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.DeletedBy
}
func (t *GetUserSettingByID_UserSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.UpdatedAt
}
func (t *GetUserSettingByID_UserSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.UpdatedBy
}

type GetUserSettings_UserSettings_Edges_Node_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *GetUserSettings_UserSettings_Edges_Node_DefaultOrg) GetID() string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node_DefaultOrg{}
	}
	return t.ID
}
func (t *GetUserSettings_UserSettings_Edges_Node_DefaultOrg) GetName() string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node_DefaultOrg{}
	}
	return t.Name
}
func (t *GetUserSettings_UserSettings_Edges_Node_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node_DefaultOrg{}
	}
	return t.PersonalOrg
}

type GetUserSettings_UserSettings_Edges_Node struct {
	ID             string                                              "json:\"id\" graphql:\"id\""
	SilencedAt     *time.Time                                          "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                                    "json:\"status\" graphql:\"status\""
	DefaultOrg     *GetUserSettings_UserSettings_Edges_Node_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	Tags           []string                                            "json:\"tags,omitempty\" graphql:\"tags\""
	Locked         bool                                                "json:\"locked\" graphql:\"locked\""
	IsTfaEnabled   *bool                                               "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	EmailConfirmed bool                                                "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	CreatedAt      *time.Time                                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DeletedAt      *time.Time                                          "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	DeletedBy      *string                                             "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	UpdatedAt      *time.Time                                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetUserSettings_UserSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.SilencedAt
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return &t.Status
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetDefaultOrg() *GetUserSettings_UserSettings_Edges_Node_DefaultOrg {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.DefaultOrg
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.Tags
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetLocked() bool {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.Locked
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.IsTfaEnabled
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.EmailConfirmed
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetDeletedAt() *time.Time {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.DeletedAt
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetUserSettings_UserSettings_Edges struct {
	Node *GetUserSettings_UserSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetUserSettings_UserSettings_Edges) GetNode() *GetUserSettings_UserSettings_Edges_Node {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges{}
	}
	return t.Node
}

type GetUserSettings_UserSettings struct {
	Edges []*GetUserSettings_UserSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetUserSettings_UserSettings) GetEdges() []*GetUserSettings_UserSettings_Edges {
	if t == nil {
		t = &GetUserSettings_UserSettings{}
	}
	return t.Edges
}

type UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg) GetID() string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg{}
	}
	return t.ID
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg) GetName() string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg{}
	}
	return t.Name
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg{}
	}
	return t.PersonalOrg
}

type UpdateUserSetting_UpdateUserSetting_UserSetting struct {
	ID             string                                                      "json:\"id\" graphql:\"id\""
	SilencedAt     *time.Time                                                  "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                                            "json:\"status\" graphql:\"status\""
	DefaultOrg     *UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	Tags           []string                                                    "json:\"tags,omitempty\" graphql:\"tags\""
	Locked         bool                                                        "json:\"locked\" graphql:\"locked\""
	IsTfaEnabled   *bool                                                       "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	EmailConfirmed bool                                                        "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	CreatedAt      *time.Time                                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DeletedAt      *time.Time                                                  "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	DeletedBy      *string                                                     "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	UpdatedAt      *time.Time                                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetID() string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.ID
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.SilencedAt
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return &t.Status
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetDefaultOrg() *UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.DefaultOrg
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetTags() []string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.Tags
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetLocked() bool {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.Locked
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.IsTfaEnabled
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetEmailConfirmed() bool {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.EmailConfirmed
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.CreatedAt
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.CreatedBy
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetDeletedAt() *time.Time {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.DeletedAt
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetDeletedBy() *string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.DeletedBy
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.UpdatedAt
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.UpdatedBy
}

type UpdateUserSetting_UpdateUserSetting struct {
	UserSetting UpdateUserSetting_UpdateUserSetting_UserSetting "json:\"userSetting\" graphql:\"userSetting\""
}

func (t *UpdateUserSetting_UpdateUserSetting) GetUserSetting() *UpdateUserSetting_UpdateUserSetting_UserSetting {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting{}
	}
	return &t.UserSetting
}

type GetAllUserSettingHistories_UserSettingHistories_Edges_Node struct {
	CreatedAt         *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed    bool             "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	HistoryTime       time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID                string           "json:\"id\" graphql:\"id\""
	IsTfaEnabled      *bool            "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	IsWebauthnAllowed *bool            "json:\"isWebauthnAllowed,omitempty\" graphql:\"isWebauthnAllowed\""
	Locked            bool             "json:\"locked\" graphql:\"locked\""
	Operation         history.OpType   "json:\"operation\" graphql:\"operation\""
	Ref               *string          "json:\"ref,omitempty\" graphql:\"ref\""
	SilencedAt        *time.Time       "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status            enums.UserStatus "json:\"status\" graphql:\"status\""
	SuspendedAt       *time.Time       "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags              []string         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID            *string          "json:\"userID,omitempty\" graphql:\"userID\""
}

func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.EmailConfirmed
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.IsTfaEnabled
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetIsWebauthnAllowed() *bool {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.IsWebauthnAllowed
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetLocked() bool {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Locked
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.SilencedAt
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.SuspendedAt
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetUserID() *string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UserID
}

type GetAllUserSettingHistories_UserSettingHistories_Edges struct {
	Node *GetAllUserSettingHistories_UserSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllUserSettingHistories_UserSettingHistories_Edges) GetNode() *GetAllUserSettingHistories_UserSettingHistories_Edges_Node {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges{}
	}
	return t.Node
}

type GetAllUserSettingHistories_UserSettingHistories struct {
	Edges []*GetAllUserSettingHistories_UserSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllUserSettingHistories_UserSettingHistories) GetEdges() []*GetAllUserSettingHistories_UserSettingHistories_Edges {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories{}
	}
	return t.Edges
}

type GetUserSettingHistories_UserSettingHistories_Edges_Node struct {
	CreatedAt         *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed    bool             "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	HistoryTime       time.Time        "json:\"historyTime\" graphql:\"historyTime\""
	ID                string           "json:\"id\" graphql:\"id\""
	IsTfaEnabled      *bool            "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	IsWebauthnAllowed *bool            "json:\"isWebauthnAllowed,omitempty\" graphql:\"isWebauthnAllowed\""
	Locked            bool             "json:\"locked\" graphql:\"locked\""
	Operation         history.OpType   "json:\"operation\" graphql:\"operation\""
	Ref               *string          "json:\"ref,omitempty\" graphql:\"ref\""
	SilencedAt        *time.Time       "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status            enums.UserStatus "json:\"status\" graphql:\"status\""
	SuspendedAt       *time.Time       "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags              []string         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID            *string          "json:\"userID,omitempty\" graphql:\"userID\""
}

func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.EmailConfirmed
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.IsTfaEnabled
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetIsWebauthnAllowed() *bool {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.IsWebauthnAllowed
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetLocked() bool {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Locked
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.SilencedAt
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.SuspendedAt
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetUserID() *string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UserID
}

type GetUserSettingHistories_UserSettingHistories_Edges struct {
	Node *GetUserSettingHistories_UserSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetUserSettingHistories_UserSettingHistories_Edges) GetNode() *GetUserSettingHistories_UserSettingHistories_Edges_Node {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges{}
	}
	return t.Node
}

type GetUserSettingHistories_UserSettingHistories struct {
	Edges []*GetUserSettingHistories_UserSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetUserSettingHistories_UserSettingHistories) GetEdges() []*GetUserSettingHistories_UserSettingHistories_Edges {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories{}
	}
	return t.Edges
}

type GetWebhookByID_Webhook_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetWebhookByID_Webhook_Events) GetID() string {
	if t == nil {
		t = &GetWebhookByID_Webhook_Events{}
	}
	return t.ID
}

type GetWebhookByID_Webhook struct {
	CreatedAt      *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description    *string                          "json:\"description,omitempty\" graphql:\"description\""
	DestinationURL string                           "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool                             "json:\"enabled\" graphql:\"enabled\""
	Failures       *int64                           "json:\"failures,omitempty\" graphql:\"failures\""
	ID             string                           "json:\"id\" graphql:\"id\""
	LastError      *string                          "json:\"lastError,omitempty\" graphql:\"lastError\""
	LastResponse   *string                          "json:\"lastResponse,omitempty\" graphql:\"lastResponse\""
	Name           string                           "json:\"name\" graphql:\"name\""
	OwnerID        *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	UpdatedAt      *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Events         []*GetWebhookByID_Webhook_Events "json:\"events,omitempty\" graphql:\"events\""
}

func (t *GetWebhookByID_Webhook) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.CreatedAt
}
func (t *GetWebhookByID_Webhook) GetCreatedBy() *string {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.CreatedBy
}
func (t *GetWebhookByID_Webhook) GetDescription() *string {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.Description
}
func (t *GetWebhookByID_Webhook) GetDestinationURL() string {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.DestinationURL
}
func (t *GetWebhookByID_Webhook) GetEnabled() bool {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.Enabled
}
func (t *GetWebhookByID_Webhook) GetFailures() *int64 {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.Failures
}
func (t *GetWebhookByID_Webhook) GetID() string {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.ID
}
func (t *GetWebhookByID_Webhook) GetLastError() *string {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.LastError
}
func (t *GetWebhookByID_Webhook) GetLastResponse() *string {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.LastResponse
}
func (t *GetWebhookByID_Webhook) GetName() string {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.Name
}
func (t *GetWebhookByID_Webhook) GetOwnerID() *string {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.OwnerID
}
func (t *GetWebhookByID_Webhook) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.UpdatedAt
}
func (t *GetWebhookByID_Webhook) GetUpdatedBy() *string {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.UpdatedBy
}
func (t *GetWebhookByID_Webhook) GetEvents() []*GetWebhookByID_Webhook_Events {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.Events
}

type GetAllWebhooks_Webhooks_Edges_Node_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllWebhooks_Webhooks_Edges_Node_Events) GetID() string {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node_Events{}
	}
	return t.ID
}

type GetAllWebhooks_Webhooks_Edges_Node struct {
	CreatedAt      *time.Time                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description    *string                                      "json:\"description,omitempty\" graphql:\"description\""
	DestinationURL string                                       "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool                                         "json:\"enabled\" graphql:\"enabled\""
	Failures       *int64                                       "json:\"failures,omitempty\" graphql:\"failures\""
	ID             string                                       "json:\"id\" graphql:\"id\""
	LastError      *string                                      "json:\"lastError,omitempty\" graphql:\"lastError\""
	LastResponse   *string                                      "json:\"lastResponse,omitempty\" graphql:\"lastResponse\""
	Name           string                                       "json:\"name\" graphql:\"name\""
	OwnerID        *string                                      "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	UpdatedAt      *time.Time                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Events         []*GetAllWebhooks_Webhooks_Edges_Node_Events "json:\"events,omitempty\" graphql:\"events\""
}

func (t *GetAllWebhooks_Webhooks_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetDestinationURL() string {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.DestinationURL
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetEnabled() bool {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.Enabled
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetFailures() *int64 {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.Failures
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetLastError() *string {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.LastError
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetLastResponse() *string {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.LastResponse
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetEvents() []*GetAllWebhooks_Webhooks_Edges_Node_Events {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.Events
}

type GetAllWebhooks_Webhooks_Edges struct {
	Node *GetAllWebhooks_Webhooks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllWebhooks_Webhooks_Edges) GetNode() *GetAllWebhooks_Webhooks_Edges_Node {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges{}
	}
	return t.Node
}

type GetAllWebhooks_Webhooks struct {
	Edges []*GetAllWebhooks_Webhooks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllWebhooks_Webhooks) GetEdges() []*GetAllWebhooks_Webhooks_Edges {
	if t == nil {
		t = &GetAllWebhooks_Webhooks{}
	}
	return t.Edges
}

type CreateWebhook_CreateWebhook_Webhook_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateWebhook_CreateWebhook_Webhook_Events) GetID() string {
	if t == nil {
		t = &CreateWebhook_CreateWebhook_Webhook_Events{}
	}
	return t.ID
}

type CreateWebhook_CreateWebhook_Webhook struct {
	Description    *string                                       "json:\"description,omitempty\" graphql:\"description\""
	DestinationURL string                                        "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool                                          "json:\"enabled\" graphql:\"enabled\""
	Failures       *int64                                        "json:\"failures,omitempty\" graphql:\"failures\""
	ID             string                                        "json:\"id\" graphql:\"id\""
	LastError      *string                                       "json:\"lastError,omitempty\" graphql:\"lastError\""
	LastResponse   *string                                       "json:\"lastResponse,omitempty\" graphql:\"lastResponse\""
	Name           string                                        "json:\"name\" graphql:\"name\""
	OwnerID        *string                                       "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Events         []*CreateWebhook_CreateWebhook_Webhook_Events "json:\"events,omitempty\" graphql:\"events\""
}

func (t *CreateWebhook_CreateWebhook_Webhook) GetDescription() *string {
	if t == nil {
		t = &CreateWebhook_CreateWebhook_Webhook{}
	}
	return t.Description
}
func (t *CreateWebhook_CreateWebhook_Webhook) GetDestinationURL() string {
	if t == nil {
		t = &CreateWebhook_CreateWebhook_Webhook{}
	}
	return t.DestinationURL
}
func (t *CreateWebhook_CreateWebhook_Webhook) GetEnabled() bool {
	if t == nil {
		t = &CreateWebhook_CreateWebhook_Webhook{}
	}
	return t.Enabled
}
func (t *CreateWebhook_CreateWebhook_Webhook) GetFailures() *int64 {
	if t == nil {
		t = &CreateWebhook_CreateWebhook_Webhook{}
	}
	return t.Failures
}
func (t *CreateWebhook_CreateWebhook_Webhook) GetID() string {
	if t == nil {
		t = &CreateWebhook_CreateWebhook_Webhook{}
	}
	return t.ID
}
func (t *CreateWebhook_CreateWebhook_Webhook) GetLastError() *string {
	if t == nil {
		t = &CreateWebhook_CreateWebhook_Webhook{}
	}
	return t.LastError
}
func (t *CreateWebhook_CreateWebhook_Webhook) GetLastResponse() *string {
	if t == nil {
		t = &CreateWebhook_CreateWebhook_Webhook{}
	}
	return t.LastResponse
}
func (t *CreateWebhook_CreateWebhook_Webhook) GetName() string {
	if t == nil {
		t = &CreateWebhook_CreateWebhook_Webhook{}
	}
	return t.Name
}
func (t *CreateWebhook_CreateWebhook_Webhook) GetOwnerID() *string {
	if t == nil {
		t = &CreateWebhook_CreateWebhook_Webhook{}
	}
	return t.OwnerID
}
func (t *CreateWebhook_CreateWebhook_Webhook) GetEvents() []*CreateWebhook_CreateWebhook_Webhook_Events {
	if t == nil {
		t = &CreateWebhook_CreateWebhook_Webhook{}
	}
	return t.Events
}

type CreateWebhook_CreateWebhook struct {
	Webhook CreateWebhook_CreateWebhook_Webhook "json:\"webhook\" graphql:\"webhook\""
}

func (t *CreateWebhook_CreateWebhook) GetWebhook() *CreateWebhook_CreateWebhook_Webhook {
	if t == nil {
		t = &CreateWebhook_CreateWebhook{}
	}
	return &t.Webhook
}

type CreateBulkWebhook_CreateBulkWebhook_Webhooks struct {
	Description    *string "json:\"description,omitempty\" graphql:\"description\""
	DestinationURL string  "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool    "json:\"enabled\" graphql:\"enabled\""
	Failures       *int64  "json:\"failures,omitempty\" graphql:\"failures\""
	ID             string  "json:\"id\" graphql:\"id\""
	LastError      *string "json:\"lastError,omitempty\" graphql:\"lastError\""
	LastResponse   *string "json:\"lastResponse,omitempty\" graphql:\"lastResponse\""
	Name           string  "json:\"name\" graphql:\"name\""
	OwnerID        *string "json:\"ownerID,omitempty\" graphql:\"ownerID\""
}

func (t *CreateBulkWebhook_CreateBulkWebhook_Webhooks) GetDescription() *string {
	if t == nil {
		t = &CreateBulkWebhook_CreateBulkWebhook_Webhooks{}
	}
	return t.Description
}
func (t *CreateBulkWebhook_CreateBulkWebhook_Webhooks) GetDestinationURL() string {
	if t == nil {
		t = &CreateBulkWebhook_CreateBulkWebhook_Webhooks{}
	}
	return t.DestinationURL
}
func (t *CreateBulkWebhook_CreateBulkWebhook_Webhooks) GetEnabled() bool {
	if t == nil {
		t = &CreateBulkWebhook_CreateBulkWebhook_Webhooks{}
	}
	return t.Enabled
}
func (t *CreateBulkWebhook_CreateBulkWebhook_Webhooks) GetFailures() *int64 {
	if t == nil {
		t = &CreateBulkWebhook_CreateBulkWebhook_Webhooks{}
	}
	return t.Failures
}
func (t *CreateBulkWebhook_CreateBulkWebhook_Webhooks) GetID() string {
	if t == nil {
		t = &CreateBulkWebhook_CreateBulkWebhook_Webhooks{}
	}
	return t.ID
}
func (t *CreateBulkWebhook_CreateBulkWebhook_Webhooks) GetLastError() *string {
	if t == nil {
		t = &CreateBulkWebhook_CreateBulkWebhook_Webhooks{}
	}
	return t.LastError
}
func (t *CreateBulkWebhook_CreateBulkWebhook_Webhooks) GetLastResponse() *string {
	if t == nil {
		t = &CreateBulkWebhook_CreateBulkWebhook_Webhooks{}
	}
	return t.LastResponse
}
func (t *CreateBulkWebhook_CreateBulkWebhook_Webhooks) GetName() string {
	if t == nil {
		t = &CreateBulkWebhook_CreateBulkWebhook_Webhooks{}
	}
	return t.Name
}
func (t *CreateBulkWebhook_CreateBulkWebhook_Webhooks) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkWebhook_CreateBulkWebhook_Webhooks{}
	}
	return t.OwnerID
}

type CreateBulkWebhook_CreateBulkWebhook struct {
	Webhooks []*CreateBulkWebhook_CreateBulkWebhook_Webhooks "json:\"webhooks,omitempty\" graphql:\"webhooks\""
}

func (t *CreateBulkWebhook_CreateBulkWebhook) GetWebhooks() []*CreateBulkWebhook_CreateBulkWebhook_Webhooks {
	if t == nil {
		t = &CreateBulkWebhook_CreateBulkWebhook{}
	}
	return t.Webhooks
}

type CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks struct {
	Description    *string "json:\"description,omitempty\" graphql:\"description\""
	DestinationURL string  "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool    "json:\"enabled\" graphql:\"enabled\""
	Failures       *int64  "json:\"failures,omitempty\" graphql:\"failures\""
	ID             string  "json:\"id\" graphql:\"id\""
	LastError      *string "json:\"lastError,omitempty\" graphql:\"lastError\""
	LastResponse   *string "json:\"lastResponse,omitempty\" graphql:\"lastResponse\""
	Name           string  "json:\"name\" graphql:\"name\""
	OwnerID        *string "json:\"ownerID,omitempty\" graphql:\"ownerID\""
}

func (t *CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks{}
	}
	return t.Description
}
func (t *CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks) GetDestinationURL() string {
	if t == nil {
		t = &CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks{}
	}
	return t.DestinationURL
}
func (t *CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks) GetEnabled() bool {
	if t == nil {
		t = &CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks{}
	}
	return t.Enabled
}
func (t *CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks) GetFailures() *int64 {
	if t == nil {
		t = &CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks{}
	}
	return t.Failures
}
func (t *CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks) GetID() string {
	if t == nil {
		t = &CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks{}
	}
	return t.ID
}
func (t *CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks) GetLastError() *string {
	if t == nil {
		t = &CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks{}
	}
	return t.LastError
}
func (t *CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks) GetLastResponse() *string {
	if t == nil {
		t = &CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks{}
	}
	return t.LastResponse
}
func (t *CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks) GetName() string {
	if t == nil {
		t = &CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks{}
	}
	return t.Name
}
func (t *CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks{}
	}
	return t.OwnerID
}

type CreateBulkCSVWebhook_CreateBulkCSVWebhook struct {
	Webhooks []*CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks "json:\"webhooks,omitempty\" graphql:\"webhooks\""
}

func (t *CreateBulkCSVWebhook_CreateBulkCSVWebhook) GetWebhooks() []*CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks {
	if t == nil {
		t = &CreateBulkCSVWebhook_CreateBulkCSVWebhook{}
	}
	return t.Webhooks
}

type UpdateWebhook_UpdateWebhook_Webhook_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateWebhook_UpdateWebhook_Webhook_Events) GetID() string {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook_Events{}
	}
	return t.ID
}

type UpdateWebhook_UpdateWebhook_Webhook struct {
	CreatedAt      *time.Time                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description    *string                                       "json:\"description,omitempty\" graphql:\"description\""
	DestinationURL string                                        "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool                                          "json:\"enabled\" graphql:\"enabled\""
	Failures       *int64                                        "json:\"failures,omitempty\" graphql:\"failures\""
	ID             string                                        "json:\"id\" graphql:\"id\""
	LastError      *string                                       "json:\"lastError,omitempty\" graphql:\"lastError\""
	LastResponse   *string                                       "json:\"lastResponse,omitempty\" graphql:\"lastResponse\""
	Name           string                                        "json:\"name\" graphql:\"name\""
	OwnerID        *string                                       "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	UpdatedAt      *time.Time                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Events         []*UpdateWebhook_UpdateWebhook_Webhook_Events "json:\"events,omitempty\" graphql:\"events\""
}

func (t *UpdateWebhook_UpdateWebhook_Webhook) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.CreatedAt
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.CreatedBy
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetDescription() *string {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.Description
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetDestinationURL() string {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.DestinationURL
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetEnabled() bool {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.Enabled
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetFailures() *int64 {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.Failures
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetID() string {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.ID
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetLastError() *string {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.LastError
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetLastResponse() *string {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.LastResponse
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetName() string {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.Name
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetOwnerID() *string {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.OwnerID
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.UpdatedAt
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.UpdatedBy
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetEvents() []*UpdateWebhook_UpdateWebhook_Webhook_Events {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.Events
}

type UpdateWebhook_UpdateWebhook struct {
	Webhook UpdateWebhook_UpdateWebhook_Webhook "json:\"webhook\" graphql:\"webhook\""
}

func (t *UpdateWebhook_UpdateWebhook) GetWebhook() *UpdateWebhook_UpdateWebhook_Webhook {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook{}
	}
	return &t.Webhook
}

type DeleteWebhook_DeleteWebhook struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteWebhook_DeleteWebhook) GetDeletedID() string {
	if t == nil {
		t = &DeleteWebhook_DeleteWebhook{}
	}
	return t.DeletedID
}

type GetAllWebhookHistories_WebhookHistories_Edges_Node struct {
	CreatedAt      *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description    *string        "json:\"description,omitempty\" graphql:\"description\""
	DestinationURL string         "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool           "json:\"enabled\" graphql:\"enabled\""
	Failures       *int64         "json:\"failures,omitempty\" graphql:\"failures\""
	HistoryTime    time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID             string         "json:\"id\" graphql:\"id\""
	LastError      *string        "json:\"lastError,omitempty\" graphql:\"lastError\""
	LastResponse   *string        "json:\"lastResponse,omitempty\" graphql:\"lastResponse\""
	Name           string         "json:\"name\" graphql:\"name\""
	Operation      history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID        *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref            *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags           []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetDestinationURL() string {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.DestinationURL
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetEnabled() bool {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Enabled
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetFailures() *int64 {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Failures
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetLastError() *string {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.LastError
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetLastResponse() *string {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.LastResponse
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllWebhookHistories_WebhookHistories_Edges struct {
	Node *GetAllWebhookHistories_WebhookHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllWebhookHistories_WebhookHistories_Edges) GetNode() *GetAllWebhookHistories_WebhookHistories_Edges_Node {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges{}
	}
	return t.Node
}

type GetAllWebhookHistories_WebhookHistories struct {
	Edges []*GetAllWebhookHistories_WebhookHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllWebhookHistories_WebhookHistories) GetEdges() []*GetAllWebhookHistories_WebhookHistories_Edges {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories{}
	}
	return t.Edges
}

type GetWebhookHistories_WebhookHistories_Edges_Node struct {
	CreatedAt      *time.Time     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description    *string        "json:\"description,omitempty\" graphql:\"description\""
	DestinationURL string         "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool           "json:\"enabled\" graphql:\"enabled\""
	Failures       *int64         "json:\"failures,omitempty\" graphql:\"failures\""
	HistoryTime    time.Time      "json:\"historyTime\" graphql:\"historyTime\""
	ID             string         "json:\"id\" graphql:\"id\""
	LastError      *string        "json:\"lastError,omitempty\" graphql:\"lastError\""
	LastResponse   *string        "json:\"lastResponse,omitempty\" graphql:\"lastResponse\""
	Name           string         "json:\"name\" graphql:\"name\""
	Operation      history.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID        *string        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref            *string        "json:\"ref,omitempty\" graphql:\"ref\""
	Tags           []string       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetDestinationURL() string {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.DestinationURL
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetEnabled() bool {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Enabled
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetFailures() *int64 {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Failures
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetLastError() *string {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.LastError
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetLastResponse() *string {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.LastResponse
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetOperation() *history.OpType {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetWebhookHistories_WebhookHistories_Edges struct {
	Node *GetWebhookHistories_WebhookHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetWebhookHistories_WebhookHistories_Edges) GetNode() *GetWebhookHistories_WebhookHistories_Edges_Node {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges{}
	}
	return t.Node
}

type GetWebhookHistories_WebhookHistories struct {
	Edges []*GetWebhookHistories_WebhookHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetWebhookHistories_WebhookHistories) GetEdges() []*GetWebhookHistories_WebhookHistories_Edges {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories{}
	}
	return t.Edges
}

type CreateBulkCSVActionPlan struct {
	CreateBulkCSVActionPlan CreateBulkCSVActionPlan_CreateBulkCSVActionPlan "json:\"createBulkCSVActionPlan\" graphql:\"createBulkCSVActionPlan\""
}

func (t *CreateBulkCSVActionPlan) GetCreateBulkCSVActionPlan() *CreateBulkCSVActionPlan_CreateBulkCSVActionPlan {
	if t == nil {
		t = &CreateBulkCSVActionPlan{}
	}
	return &t.CreateBulkCSVActionPlan
}

type CreateBulkActionPlan struct {
	CreateBulkActionPlan CreateBulkActionPlan_CreateBulkActionPlan "json:\"createBulkActionPlan\" graphql:\"createBulkActionPlan\""
}

func (t *CreateBulkActionPlan) GetCreateBulkActionPlan() *CreateBulkActionPlan_CreateBulkActionPlan {
	if t == nil {
		t = &CreateBulkActionPlan{}
	}
	return &t.CreateBulkActionPlan
}

type CreateActionPlan struct {
	CreateActionPlan CreateActionPlan_CreateActionPlan "json:\"createActionPlan\" graphql:\"createActionPlan\""
}

func (t *CreateActionPlan) GetCreateActionPlan() *CreateActionPlan_CreateActionPlan {
	if t == nil {
		t = &CreateActionPlan{}
	}
	return &t.CreateActionPlan
}

type DeleteActionPlan struct {
	DeleteActionPlan DeleteActionPlan_DeleteActionPlan "json:\"deleteActionPlan\" graphql:\"deleteActionPlan\""
}

func (t *DeleteActionPlan) GetDeleteActionPlan() *DeleteActionPlan_DeleteActionPlan {
	if t == nil {
		t = &DeleteActionPlan{}
	}
	return &t.DeleteActionPlan
}

type GetAllActionPlans struct {
	ActionPlans GetAllActionPlans_ActionPlans "json:\"actionPlans\" graphql:\"actionPlans\""
}

func (t *GetAllActionPlans) GetActionPlans() *GetAllActionPlans_ActionPlans {
	if t == nil {
		t = &GetAllActionPlans{}
	}
	return &t.ActionPlans
}

type GetActionPlanByID struct {
	ActionPlan GetActionPlanByID_ActionPlan "json:\"actionPlan\" graphql:\"actionPlan\""
}

func (t *GetActionPlanByID) GetActionPlan() *GetActionPlanByID_ActionPlan {
	if t == nil {
		t = &GetActionPlanByID{}
	}
	return &t.ActionPlan
}

type GetActionPlans struct {
	ActionPlans GetActionPlans_ActionPlans "json:\"actionPlans\" graphql:\"actionPlans\""
}

func (t *GetActionPlans) GetActionPlans() *GetActionPlans_ActionPlans {
	if t == nil {
		t = &GetActionPlans{}
	}
	return &t.ActionPlans
}

type UpdateActionPlan struct {
	UpdateActionPlan UpdateActionPlan_UpdateActionPlan "json:\"updateActionPlan\" graphql:\"updateActionPlan\""
}

func (t *UpdateActionPlan) GetUpdateActionPlan() *UpdateActionPlan_UpdateActionPlan {
	if t == nil {
		t = &UpdateActionPlan{}
	}
	return &t.UpdateActionPlan
}

type GetAllActionPlanHistories struct {
	ActionPlanHistories GetAllActionPlanHistories_ActionPlanHistories "json:\"actionPlanHistories\" graphql:\"actionPlanHistories\""
}

func (t *GetAllActionPlanHistories) GetActionPlanHistories() *GetAllActionPlanHistories_ActionPlanHistories {
	if t == nil {
		t = &GetAllActionPlanHistories{}
	}
	return &t.ActionPlanHistories
}

type GetActionPlanHistories struct {
	ActionPlanHistories GetActionPlanHistories_ActionPlanHistories "json:\"actionPlanHistories\" graphql:\"actionPlanHistories\""
}

func (t *GetActionPlanHistories) GetActionPlanHistories() *GetActionPlanHistories_ActionPlanHistories {
	if t == nil {
		t = &GetActionPlanHistories{}
	}
	return &t.ActionPlanHistories
}

type AdminSearch struct {
	AdminSearch *AdminSearch_AdminSearch "json:\"adminSearch,omitempty\" graphql:\"adminSearch\""
}

func (t *AdminSearch) GetAdminSearch() *AdminSearch_AdminSearch {
	if t == nil {
		t = &AdminSearch{}
	}
	return t.AdminSearch
}

type CreateAPIToken struct {
	CreateAPIToken CreateAPIToken_CreateAPIToken "json:\"createAPIToken\" graphql:\"createAPIToken\""
}

func (t *CreateAPIToken) GetCreateAPIToken() *CreateAPIToken_CreateAPIToken {
	if t == nil {
		t = &CreateAPIToken{}
	}
	return &t.CreateAPIToken
}

type UpdateAPIToken struct {
	UpdateAPIToken UpdateAPIToken_UpdateAPIToken "json:\"updateAPIToken\" graphql:\"updateAPIToken\""
}

func (t *UpdateAPIToken) GetUpdateAPIToken() *UpdateAPIToken_UpdateAPIToken {
	if t == nil {
		t = &UpdateAPIToken{}
	}
	return &t.UpdateAPIToken
}

type GetAllAPITokens struct {
	APITokens GetAllAPITokens_APITokens "json:\"apiTokens\" graphql:\"apiTokens\""
}

func (t *GetAllAPITokens) GetAPITokens() *GetAllAPITokens_APITokens {
	if t == nil {
		t = &GetAllAPITokens{}
	}
	return &t.APITokens
}

type GetAPITokenByID struct {
	APIToken GetAPITokenByID_APIToken "json:\"apiToken\" graphql:\"apiToken\""
}

func (t *GetAPITokenByID) GetAPIToken() *GetAPITokenByID_APIToken {
	if t == nil {
		t = &GetAPITokenByID{}
	}
	return &t.APIToken
}

type DeleteAPIToken struct {
	DeleteAPIToken DeleteAPIToken_DeleteAPIToken "json:\"deleteAPIToken\" graphql:\"deleteAPIToken\""
}

func (t *DeleteAPIToken) GetDeleteAPIToken() *DeleteAPIToken_DeleteAPIToken {
	if t == nil {
		t = &DeleteAPIToken{}
	}
	return &t.DeleteAPIToken
}

type CreateBulkContact struct {
	CreateBulkContact CreateBulkContact_CreateBulkContact "json:\"createBulkContact\" graphql:\"createBulkContact\""
}

func (t *CreateBulkContact) GetCreateBulkContact() *CreateBulkContact_CreateBulkContact {
	if t == nil {
		t = &CreateBulkContact{}
	}
	return &t.CreateBulkContact
}

type CreateBulkCSVContact struct {
	CreateBulkCSVContact CreateBulkCSVContact_CreateBulkCSVContact "json:\"createBulkCSVContact\" graphql:\"createBulkCSVContact\""
}

func (t *CreateBulkCSVContact) GetCreateBulkCSVContact() *CreateBulkCSVContact_CreateBulkCSVContact {
	if t == nil {
		t = &CreateBulkCSVContact{}
	}
	return &t.CreateBulkCSVContact
}

type CreateContact struct {
	CreateContact CreateContact_CreateContact "json:\"createContact\" graphql:\"createContact\""
}

func (t *CreateContact) GetCreateContact() *CreateContact_CreateContact {
	if t == nil {
		t = &CreateContact{}
	}
	return &t.CreateContact
}

type DeleteContact struct {
	DeleteContact DeleteContact_DeleteContact "json:\"deleteContact\" graphql:\"deleteContact\""
}

func (t *DeleteContact) GetDeleteContact() *DeleteContact_DeleteContact {
	if t == nil {
		t = &DeleteContact{}
	}
	return &t.DeleteContact
}

type GetAllContacts struct {
	Contacts GetAllContacts_Contacts "json:\"contacts\" graphql:\"contacts\""
}

func (t *GetAllContacts) GetContacts() *GetAllContacts_Contacts {
	if t == nil {
		t = &GetAllContacts{}
	}
	return &t.Contacts
}

type GetContactByID struct {
	Contact GetContactByID_Contact "json:\"contact\" graphql:\"contact\""
}

func (t *GetContactByID) GetContact() *GetContactByID_Contact {
	if t == nil {
		t = &GetContactByID{}
	}
	return &t.Contact
}

type GetContacts struct {
	Contacts GetContacts_Contacts "json:\"contacts\" graphql:\"contacts\""
}

func (t *GetContacts) GetContacts() *GetContacts_Contacts {
	if t == nil {
		t = &GetContacts{}
	}
	return &t.Contacts
}

type UpdateContact struct {
	UpdateContact UpdateContact_UpdateContact "json:\"updateContact\" graphql:\"updateContact\""
}

func (t *UpdateContact) GetUpdateContact() *UpdateContact_UpdateContact {
	if t == nil {
		t = &UpdateContact{}
	}
	return &t.UpdateContact
}

type GetAllContactHistories struct {
	ContactHistories GetAllContactHistories_ContactHistories "json:\"contactHistories\" graphql:\"contactHistories\""
}

func (t *GetAllContactHistories) GetContactHistories() *GetAllContactHistories_ContactHistories {
	if t == nil {
		t = &GetAllContactHistories{}
	}
	return &t.ContactHistories
}

type GetContactHistories struct {
	ContactHistories GetContactHistories_ContactHistories "json:\"contactHistories\" graphql:\"contactHistories\""
}

func (t *GetContactHistories) GetContactHistories() *GetContactHistories_ContactHistories {
	if t == nil {
		t = &GetContactHistories{}
	}
	return &t.ContactHistories
}

type CreateBulkCSVControl struct {
	CreateBulkCSVControl CreateBulkCSVControl_CreateBulkCSVControl "json:\"createBulkCSVControl\" graphql:\"createBulkCSVControl\""
}

func (t *CreateBulkCSVControl) GetCreateBulkCSVControl() *CreateBulkCSVControl_CreateBulkCSVControl {
	if t == nil {
		t = &CreateBulkCSVControl{}
	}
	return &t.CreateBulkCSVControl
}

type CreateBulkControl struct {
	CreateBulkControl CreateBulkControl_CreateBulkControl "json:\"createBulkControl\" graphql:\"createBulkControl\""
}

func (t *CreateBulkControl) GetCreateBulkControl() *CreateBulkControl_CreateBulkControl {
	if t == nil {
		t = &CreateBulkControl{}
	}
	return &t.CreateBulkControl
}

type CreateControl struct {
	CreateControl CreateControl_CreateControl "json:\"createControl\" graphql:\"createControl\""
}

func (t *CreateControl) GetCreateControl() *CreateControl_CreateControl {
	if t == nil {
		t = &CreateControl{}
	}
	return &t.CreateControl
}

type DeleteControl struct {
	DeleteControl DeleteControl_DeleteControl "json:\"deleteControl\" graphql:\"deleteControl\""
}

func (t *DeleteControl) GetDeleteControl() *DeleteControl_DeleteControl {
	if t == nil {
		t = &DeleteControl{}
	}
	return &t.DeleteControl
}

type GetAllControls struct {
	Controls GetAllControls_Controls "json:\"controls\" graphql:\"controls\""
}

func (t *GetAllControls) GetControls() *GetAllControls_Controls {
	if t == nil {
		t = &GetAllControls{}
	}
	return &t.Controls
}

type GetControlByID struct {
	Control GetControlByID_Control "json:\"control\" graphql:\"control\""
}

func (t *GetControlByID) GetControl() *GetControlByID_Control {
	if t == nil {
		t = &GetControlByID{}
	}
	return &t.Control
}

type GetControls struct {
	Controls GetControls_Controls "json:\"controls\" graphql:\"controls\""
}

func (t *GetControls) GetControls() *GetControls_Controls {
	if t == nil {
		t = &GetControls{}
	}
	return &t.Controls
}

type UpdateControl struct {
	UpdateControl UpdateControl_UpdateControl "json:\"updateControl\" graphql:\"updateControl\""
}

func (t *UpdateControl) GetUpdateControl() *UpdateControl_UpdateControl {
	if t == nil {
		t = &UpdateControl{}
	}
	return &t.UpdateControl
}

type GetAllControlHistories struct {
	ControlHistories GetAllControlHistories_ControlHistories "json:\"controlHistories\" graphql:\"controlHistories\""
}

func (t *GetAllControlHistories) GetControlHistories() *GetAllControlHistories_ControlHistories {
	if t == nil {
		t = &GetAllControlHistories{}
	}
	return &t.ControlHistories
}

type GetControlHistories struct {
	ControlHistories GetControlHistories_ControlHistories "json:\"controlHistories\" graphql:\"controlHistories\""
}

func (t *GetControlHistories) GetControlHistories() *GetControlHistories_ControlHistories {
	if t == nil {
		t = &GetControlHistories{}
	}
	return &t.ControlHistories
}

type CreateBulkCSVControlObjective struct {
	CreateBulkCSVControlObjective CreateBulkCSVControlObjective_CreateBulkCSVControlObjective "json:\"createBulkCSVControlObjective\" graphql:\"createBulkCSVControlObjective\""
}

func (t *CreateBulkCSVControlObjective) GetCreateBulkCSVControlObjective() *CreateBulkCSVControlObjective_CreateBulkCSVControlObjective {
	if t == nil {
		t = &CreateBulkCSVControlObjective{}
	}
	return &t.CreateBulkCSVControlObjective
}

type CreateBulkControlObjective struct {
	CreateBulkControlObjective CreateBulkControlObjective_CreateBulkControlObjective "json:\"createBulkControlObjective\" graphql:\"createBulkControlObjective\""
}

func (t *CreateBulkControlObjective) GetCreateBulkControlObjective() *CreateBulkControlObjective_CreateBulkControlObjective {
	if t == nil {
		t = &CreateBulkControlObjective{}
	}
	return &t.CreateBulkControlObjective
}

type CreateControlObjective struct {
	CreateControlObjective CreateControlObjective_CreateControlObjective "json:\"createControlObjective\" graphql:\"createControlObjective\""
}

func (t *CreateControlObjective) GetCreateControlObjective() *CreateControlObjective_CreateControlObjective {
	if t == nil {
		t = &CreateControlObjective{}
	}
	return &t.CreateControlObjective
}

type DeleteControlObjective struct {
	DeleteControlObjective DeleteControlObjective_DeleteControlObjective "json:\"deleteControlObjective\" graphql:\"deleteControlObjective\""
}

func (t *DeleteControlObjective) GetDeleteControlObjective() *DeleteControlObjective_DeleteControlObjective {
	if t == nil {
		t = &DeleteControlObjective{}
	}
	return &t.DeleteControlObjective
}

type GetAllControlObjectives struct {
	ControlObjectives GetAllControlObjectives_ControlObjectives "json:\"controlObjectives\" graphql:\"controlObjectives\""
}

func (t *GetAllControlObjectives) GetControlObjectives() *GetAllControlObjectives_ControlObjectives {
	if t == nil {
		t = &GetAllControlObjectives{}
	}
	return &t.ControlObjectives
}

type GetControlObjectiveByID struct {
	ControlObjective GetControlObjectiveByID_ControlObjective "json:\"controlObjective\" graphql:\"controlObjective\""
}

func (t *GetControlObjectiveByID) GetControlObjective() *GetControlObjectiveByID_ControlObjective {
	if t == nil {
		t = &GetControlObjectiveByID{}
	}
	return &t.ControlObjective
}

type GetControlObjectives struct {
	ControlObjectives GetControlObjectives_ControlObjectives "json:\"controlObjectives\" graphql:\"controlObjectives\""
}

func (t *GetControlObjectives) GetControlObjectives() *GetControlObjectives_ControlObjectives {
	if t == nil {
		t = &GetControlObjectives{}
	}
	return &t.ControlObjectives
}

type UpdateControlObjective struct {
	UpdateControlObjective UpdateControlObjective_UpdateControlObjective "json:\"updateControlObjective\" graphql:\"updateControlObjective\""
}

func (t *UpdateControlObjective) GetUpdateControlObjective() *UpdateControlObjective_UpdateControlObjective {
	if t == nil {
		t = &UpdateControlObjective{}
	}
	return &t.UpdateControlObjective
}

type GetAllControlObjectiveHistories struct {
	ControlObjectiveHistories GetAllControlObjectiveHistories_ControlObjectiveHistories "json:\"controlObjectiveHistories\" graphql:\"controlObjectiveHistories\""
}

func (t *GetAllControlObjectiveHistories) GetControlObjectiveHistories() *GetAllControlObjectiveHistories_ControlObjectiveHistories {
	if t == nil {
		t = &GetAllControlObjectiveHistories{}
	}
	return &t.ControlObjectiveHistories
}

type GetControlObjectiveHistories struct {
	ControlObjectiveHistories GetControlObjectiveHistories_ControlObjectiveHistories "json:\"controlObjectiveHistories\" graphql:\"controlObjectiveHistories\""
}

func (t *GetControlObjectiveHistories) GetControlObjectiveHistories() *GetControlObjectiveHistories_ControlObjectiveHistories {
	if t == nil {
		t = &GetControlObjectiveHistories{}
	}
	return &t.ControlObjectiveHistories
}

type CreateDocumentData struct {
	CreateDocumentData CreateDocumentData_CreateDocumentData "json:\"createDocumentData\" graphql:\"createDocumentData\""
}

func (t *CreateDocumentData) GetCreateDocumentData() *CreateDocumentData_CreateDocumentData {
	if t == nil {
		t = &CreateDocumentData{}
	}
	return &t.CreateDocumentData
}

type DeleteDocumentData struct {
	DeleteDocumentData DeleteDocumentData_DeleteDocumentData "json:\"deleteDocumentData\" graphql:\"deleteDocumentData\""
}

func (t *DeleteDocumentData) GetDeleteDocumentData() *DeleteDocumentData_DeleteDocumentData {
	if t == nil {
		t = &DeleteDocumentData{}
	}
	return &t.DeleteDocumentData
}

type GetDocumentDataByID struct {
	DocumentData GetDocumentDataByID_DocumentData "json:\"documentData\" graphql:\"documentData\""
}

func (t *GetDocumentDataByID) GetDocumentData() *GetDocumentDataByID_DocumentData {
	if t == nil {
		t = &GetDocumentDataByID{}
	}
	return &t.DocumentData
}

type UpdateDocumentData struct {
	UpdateDocumentData UpdateDocumentData_UpdateDocumentData "json:\"updateDocumentData\" graphql:\"updateDocumentData\""
}

func (t *UpdateDocumentData) GetUpdateDocumentData() *UpdateDocumentData_UpdateDocumentData {
	if t == nil {
		t = &UpdateDocumentData{}
	}
	return &t.UpdateDocumentData
}

type GetAllDocumentDataHistories struct {
	DocumentDataHistories GetAllDocumentDataHistories_DocumentDataHistories "json:\"documentDataHistories\" graphql:\"documentDataHistories\""
}

func (t *GetAllDocumentDataHistories) GetDocumentDataHistories() *GetAllDocumentDataHistories_DocumentDataHistories {
	if t == nil {
		t = &GetAllDocumentDataHistories{}
	}
	return &t.DocumentDataHistories
}

type GetDocumentDataHistories struct {
	DocumentDataHistories GetDocumentDataHistories_DocumentDataHistories "json:\"documentDataHistories\" graphql:\"documentDataHistories\""
}

func (t *GetDocumentDataHistories) GetDocumentDataHistories() *GetDocumentDataHistories_DocumentDataHistories {
	if t == nil {
		t = &GetDocumentDataHistories{}
	}
	return &t.DocumentDataHistories
}

type CreateBulkCSVEntitlement struct {
	CreateBulkCSVEntitlement CreateBulkCSVEntitlement_CreateBulkCSVEntitlement "json:\"createBulkCSVEntitlement\" graphql:\"createBulkCSVEntitlement\""
}

func (t *CreateBulkCSVEntitlement) GetCreateBulkCSVEntitlement() *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement {
	if t == nil {
		t = &CreateBulkCSVEntitlement{}
	}
	return &t.CreateBulkCSVEntitlement
}

type CreateBulkEntitlement struct {
	CreateBulkEntitlement CreateBulkEntitlement_CreateBulkEntitlement "json:\"createBulkEntitlement\" graphql:\"createBulkEntitlement\""
}

func (t *CreateBulkEntitlement) GetCreateBulkEntitlement() *CreateBulkEntitlement_CreateBulkEntitlement {
	if t == nil {
		t = &CreateBulkEntitlement{}
	}
	return &t.CreateBulkEntitlement
}

type CreateEntitlement struct {
	CreateEntitlement CreateEntitlement_CreateEntitlement "json:\"createEntitlement\" graphql:\"createEntitlement\""
}

func (t *CreateEntitlement) GetCreateEntitlement() *CreateEntitlement_CreateEntitlement {
	if t == nil {
		t = &CreateEntitlement{}
	}
	return &t.CreateEntitlement
}

type DeleteEntitlement struct {
	DeleteEntitlement DeleteEntitlement_DeleteEntitlement "json:\"deleteEntitlement\" graphql:\"deleteEntitlement\""
}

func (t *DeleteEntitlement) GetDeleteEntitlement() *DeleteEntitlement_DeleteEntitlement {
	if t == nil {
		t = &DeleteEntitlement{}
	}
	return &t.DeleteEntitlement
}

type GetAllEntitlements struct {
	Entitlements GetAllEntitlements_Entitlements "json:\"entitlements\" graphql:\"entitlements\""
}

func (t *GetAllEntitlements) GetEntitlements() *GetAllEntitlements_Entitlements {
	if t == nil {
		t = &GetAllEntitlements{}
	}
	return &t.Entitlements
}

type GetEntitlementByID struct {
	Entitlement GetEntitlementByID_Entitlement "json:\"entitlement\" graphql:\"entitlement\""
}

func (t *GetEntitlementByID) GetEntitlement() *GetEntitlementByID_Entitlement {
	if t == nil {
		t = &GetEntitlementByID{}
	}
	return &t.Entitlement
}

type GetEntitlements struct {
	Entitlements GetEntitlements_Entitlements "json:\"entitlements\" graphql:\"entitlements\""
}

func (t *GetEntitlements) GetEntitlements() *GetEntitlements_Entitlements {
	if t == nil {
		t = &GetEntitlements{}
	}
	return &t.Entitlements
}

type UpdateEntitlement struct {
	UpdateEntitlement UpdateEntitlement_UpdateEntitlement "json:\"updateEntitlement\" graphql:\"updateEntitlement\""
}

func (t *UpdateEntitlement) GetUpdateEntitlement() *UpdateEntitlement_UpdateEntitlement {
	if t == nil {
		t = &UpdateEntitlement{}
	}
	return &t.UpdateEntitlement
}

type GetAllEntitlementHistories struct {
	EntitlementHistories GetAllEntitlementHistories_EntitlementHistories "json:\"entitlementHistories\" graphql:\"entitlementHistories\""
}

func (t *GetAllEntitlementHistories) GetEntitlementHistories() *GetAllEntitlementHistories_EntitlementHistories {
	if t == nil {
		t = &GetAllEntitlementHistories{}
	}
	return &t.EntitlementHistories
}

type GetEntitlementHistories struct {
	EntitlementHistories GetEntitlementHistories_EntitlementHistories "json:\"entitlementHistories\" graphql:\"entitlementHistories\""
}

func (t *GetEntitlementHistories) GetEntitlementHistories() *GetEntitlementHistories_EntitlementHistories {
	if t == nil {
		t = &GetEntitlementHistories{}
	}
	return &t.EntitlementHistories
}

type CreateBulkCSVEntitlementPlan struct {
	CreateBulkCSVEntitlementPlan CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan "json:\"createBulkCSVEntitlementPlan\" graphql:\"createBulkCSVEntitlementPlan\""
}

func (t *CreateBulkCSVEntitlementPlan) GetCreateBulkCSVEntitlementPlan() *CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlan{}
	}
	return &t.CreateBulkCSVEntitlementPlan
}

type CreateBulkEntitlementPlan struct {
	CreateBulkEntitlementPlan CreateBulkEntitlementPlan_CreateBulkEntitlementPlan "json:\"createBulkEntitlementPlan\" graphql:\"createBulkEntitlementPlan\""
}

func (t *CreateBulkEntitlementPlan) GetCreateBulkEntitlementPlan() *CreateBulkEntitlementPlan_CreateBulkEntitlementPlan {
	if t == nil {
		t = &CreateBulkEntitlementPlan{}
	}
	return &t.CreateBulkEntitlementPlan
}

type CreateEntitlementPlan struct {
	CreateEntitlementPlan CreateEntitlementPlan_CreateEntitlementPlan "json:\"createEntitlementPlan\" graphql:\"createEntitlementPlan\""
}

func (t *CreateEntitlementPlan) GetCreateEntitlementPlan() *CreateEntitlementPlan_CreateEntitlementPlan {
	if t == nil {
		t = &CreateEntitlementPlan{}
	}
	return &t.CreateEntitlementPlan
}

type DeleteEntitlementPlan struct {
	DeleteEntitlementPlan DeleteEntitlementPlan_DeleteEntitlementPlan "json:\"deleteEntitlementPlan\" graphql:\"deleteEntitlementPlan\""
}

func (t *DeleteEntitlementPlan) GetDeleteEntitlementPlan() *DeleteEntitlementPlan_DeleteEntitlementPlan {
	if t == nil {
		t = &DeleteEntitlementPlan{}
	}
	return &t.DeleteEntitlementPlan
}

type GetAllEntitlementPlans struct {
	EntitlementPlans GetAllEntitlementPlans_EntitlementPlans "json:\"entitlementPlans\" graphql:\"entitlementPlans\""
}

func (t *GetAllEntitlementPlans) GetEntitlementPlans() *GetAllEntitlementPlans_EntitlementPlans {
	if t == nil {
		t = &GetAllEntitlementPlans{}
	}
	return &t.EntitlementPlans
}

type GetEntitlementPlanByID struct {
	EntitlementPlan GetEntitlementPlanByID_EntitlementPlan "json:\"entitlementPlan\" graphql:\"entitlementPlan\""
}

func (t *GetEntitlementPlanByID) GetEntitlementPlan() *GetEntitlementPlanByID_EntitlementPlan {
	if t == nil {
		t = &GetEntitlementPlanByID{}
	}
	return &t.EntitlementPlan
}

type GetEntitlementPlans struct {
	EntitlementPlans GetEntitlementPlans_EntitlementPlans "json:\"entitlementPlans\" graphql:\"entitlementPlans\""
}

func (t *GetEntitlementPlans) GetEntitlementPlans() *GetEntitlementPlans_EntitlementPlans {
	if t == nil {
		t = &GetEntitlementPlans{}
	}
	return &t.EntitlementPlans
}

type UpdateEntitlementPlan struct {
	UpdateEntitlementPlan UpdateEntitlementPlan_UpdateEntitlementPlan "json:\"updateEntitlementPlan\" graphql:\"updateEntitlementPlan\""
}

func (t *UpdateEntitlementPlan) GetUpdateEntitlementPlan() *UpdateEntitlementPlan_UpdateEntitlementPlan {
	if t == nil {
		t = &UpdateEntitlementPlan{}
	}
	return &t.UpdateEntitlementPlan
}

type CreateBulkCSVEntitlementPlanFeature struct {
	CreateBulkCSVEntitlementPlanFeature CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature "json:\"createBulkCSVEntitlementPlanFeature\" graphql:\"createBulkCSVEntitlementPlanFeature\""
}

func (t *CreateBulkCSVEntitlementPlanFeature) GetCreateBulkCSVEntitlementPlanFeature() *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlanFeature{}
	}
	return &t.CreateBulkCSVEntitlementPlanFeature
}

type CreateBulkEntitlementPlanFeature struct {
	CreateBulkEntitlementPlanFeature CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature "json:\"createBulkEntitlementPlanFeature\" graphql:\"createBulkEntitlementPlanFeature\""
}

func (t *CreateBulkEntitlementPlanFeature) GetCreateBulkEntitlementPlanFeature() *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature {
	if t == nil {
		t = &CreateBulkEntitlementPlanFeature{}
	}
	return &t.CreateBulkEntitlementPlanFeature
}

type CreateEntitlementPlanFeature struct {
	CreateEntitlementPlanFeature CreateEntitlementPlanFeature_CreateEntitlementPlanFeature "json:\"createEntitlementPlanFeature\" graphql:\"createEntitlementPlanFeature\""
}

func (t *CreateEntitlementPlanFeature) GetCreateEntitlementPlanFeature() *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature {
	if t == nil {
		t = &CreateEntitlementPlanFeature{}
	}
	return &t.CreateEntitlementPlanFeature
}

type DeleteEntitlementPlanFeature struct {
	DeleteEntitlementPlanFeature DeleteEntitlementPlanFeature_DeleteEntitlementPlanFeature "json:\"deleteEntitlementPlanFeature\" graphql:\"deleteEntitlementPlanFeature\""
}

func (t *DeleteEntitlementPlanFeature) GetDeleteEntitlementPlanFeature() *DeleteEntitlementPlanFeature_DeleteEntitlementPlanFeature {
	if t == nil {
		t = &DeleteEntitlementPlanFeature{}
	}
	return &t.DeleteEntitlementPlanFeature
}

type GetAllEntitlementPlanFeatures struct {
	EntitlementPlanFeatures GetAllEntitlementPlanFeatures_EntitlementPlanFeatures "json:\"entitlementPlanFeatures\" graphql:\"entitlementPlanFeatures\""
}

func (t *GetAllEntitlementPlanFeatures) GetEntitlementPlanFeatures() *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures {
	if t == nil {
		t = &GetAllEntitlementPlanFeatures{}
	}
	return &t.EntitlementPlanFeatures
}

type GetEntitlementPlanFeatureByID struct {
	EntitlementPlanFeature GetEntitlementPlanFeatureByID_EntitlementPlanFeature "json:\"entitlementPlanFeature\" graphql:\"entitlementPlanFeature\""
}

func (t *GetEntitlementPlanFeatureByID) GetEntitlementPlanFeature() *GetEntitlementPlanFeatureByID_EntitlementPlanFeature {
	if t == nil {
		t = &GetEntitlementPlanFeatureByID{}
	}
	return &t.EntitlementPlanFeature
}

type GetEntitlementPlanFeatures struct {
	EntitlementPlanFeatures GetEntitlementPlanFeatures_EntitlementPlanFeatures "json:\"entitlementPlanFeatures\" graphql:\"entitlementPlanFeatures\""
}

func (t *GetEntitlementPlanFeatures) GetEntitlementPlanFeatures() *GetEntitlementPlanFeatures_EntitlementPlanFeatures {
	if t == nil {
		t = &GetEntitlementPlanFeatures{}
	}
	return &t.EntitlementPlanFeatures
}

type UpdateEntitlementPlanFeature struct {
	UpdateEntitlementPlanFeature UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature "json:\"updateEntitlementPlanFeature\" graphql:\"updateEntitlementPlanFeature\""
}

func (t *UpdateEntitlementPlanFeature) GetUpdateEntitlementPlanFeature() *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature {
	if t == nil {
		t = &UpdateEntitlementPlanFeature{}
	}
	return &t.UpdateEntitlementPlanFeature
}

type GetAllEntitlementPlanFeatureHistories struct {
	EntitlementPlanFeatureHistories GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories "json:\"entitlementPlanFeatureHistories\" graphql:\"entitlementPlanFeatureHistories\""
}

func (t *GetAllEntitlementPlanFeatureHistories) GetEntitlementPlanFeatureHistories() *GetAllEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories {
	if t == nil {
		t = &GetAllEntitlementPlanFeatureHistories{}
	}
	return &t.EntitlementPlanFeatureHistories
}

type GetEntitlementPlanFeatureHistories struct {
	EntitlementPlanFeatureHistories GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories "json:\"entitlementPlanFeatureHistories\" graphql:\"entitlementPlanFeatureHistories\""
}

func (t *GetEntitlementPlanFeatureHistories) GetEntitlementPlanFeatureHistories() *GetEntitlementPlanFeatureHistories_EntitlementPlanFeatureHistories {
	if t == nil {
		t = &GetEntitlementPlanFeatureHistories{}
	}
	return &t.EntitlementPlanFeatureHistories
}

type GetAllEntitlementPlanHistories struct {
	EntitlementPlanHistories GetAllEntitlementPlanHistories_EntitlementPlanHistories "json:\"entitlementPlanHistories\" graphql:\"entitlementPlanHistories\""
}

func (t *GetAllEntitlementPlanHistories) GetEntitlementPlanHistories() *GetAllEntitlementPlanHistories_EntitlementPlanHistories {
	if t == nil {
		t = &GetAllEntitlementPlanHistories{}
	}
	return &t.EntitlementPlanHistories
}

type GetEntitlementPlanHistories struct {
	EntitlementPlanHistories GetEntitlementPlanHistories_EntitlementPlanHistories "json:\"entitlementPlanHistories\" graphql:\"entitlementPlanHistories\""
}

func (t *GetEntitlementPlanHistories) GetEntitlementPlanHistories() *GetEntitlementPlanHistories_EntitlementPlanHistories {
	if t == nil {
		t = &GetEntitlementPlanHistories{}
	}
	return &t.EntitlementPlanHistories
}

type CreateBulkCSVEntity struct {
	CreateBulkCSVEntity CreateBulkCSVEntity_CreateBulkCSVEntity "json:\"createBulkCSVEntity\" graphql:\"createBulkCSVEntity\""
}

func (t *CreateBulkCSVEntity) GetCreateBulkCSVEntity() *CreateBulkCSVEntity_CreateBulkCSVEntity {
	if t == nil {
		t = &CreateBulkCSVEntity{}
	}
	return &t.CreateBulkCSVEntity
}

type CreateBulkEntity struct {
	CreateBulkEntity CreateBulkEntity_CreateBulkEntity "json:\"createBulkEntity\" graphql:\"createBulkEntity\""
}

func (t *CreateBulkEntity) GetCreateBulkEntity() *CreateBulkEntity_CreateBulkEntity {
	if t == nil {
		t = &CreateBulkEntity{}
	}
	return &t.CreateBulkEntity
}

type CreateEntity struct {
	CreateEntity CreateEntity_CreateEntity "json:\"createEntity\" graphql:\"createEntity\""
}

func (t *CreateEntity) GetCreateEntity() *CreateEntity_CreateEntity {
	if t == nil {
		t = &CreateEntity{}
	}
	return &t.CreateEntity
}

type DeleteEntity struct {
	DeleteEntity DeleteEntity_DeleteEntity "json:\"deleteEntity\" graphql:\"deleteEntity\""
}

func (t *DeleteEntity) GetDeleteEntity() *DeleteEntity_DeleteEntity {
	if t == nil {
		t = &DeleteEntity{}
	}
	return &t.DeleteEntity
}

type GetAllEntities struct {
	Entities GetAllEntities_Entities "json:\"entities\" graphql:\"entities\""
}

func (t *GetAllEntities) GetEntities() *GetAllEntities_Entities {
	if t == nil {
		t = &GetAllEntities{}
	}
	return &t.Entities
}

type GetEntities struct {
	Entities GetEntities_Entities "json:\"entities\" graphql:\"entities\""
}

func (t *GetEntities) GetEntities() *GetEntities_Entities {
	if t == nil {
		t = &GetEntities{}
	}
	return &t.Entities
}

type GetEntityByID struct {
	Entity GetEntityByID_Entity "json:\"entity\" graphql:\"entity\""
}

func (t *GetEntityByID) GetEntity() *GetEntityByID_Entity {
	if t == nil {
		t = &GetEntityByID{}
	}
	return &t.Entity
}

type UpdateEntity struct {
	UpdateEntity UpdateEntity_UpdateEntity "json:\"updateEntity\" graphql:\"updateEntity\""
}

func (t *UpdateEntity) GetUpdateEntity() *UpdateEntity_UpdateEntity {
	if t == nil {
		t = &UpdateEntity{}
	}
	return &t.UpdateEntity
}

type GetAllEntityHistories struct {
	EntityHistories GetAllEntityHistories_EntityHistories "json:\"entityHistories\" graphql:\"entityHistories\""
}

func (t *GetAllEntityHistories) GetEntityHistories() *GetAllEntityHistories_EntityHistories {
	if t == nil {
		t = &GetAllEntityHistories{}
	}
	return &t.EntityHistories
}

type GetEntityHistories struct {
	EntityHistories GetEntityHistories_EntityHistories "json:\"entityHistories\" graphql:\"entityHistories\""
}

func (t *GetEntityHistories) GetEntityHistories() *GetEntityHistories_EntityHistories {
	if t == nil {
		t = &GetEntityHistories{}
	}
	return &t.EntityHistories
}

type CreateBulkCSVEntityType struct {
	CreateBulkCSVEntityType CreateBulkCSVEntityType_CreateBulkCSVEntityType "json:\"createBulkCSVEntityType\" graphql:\"createBulkCSVEntityType\""
}

func (t *CreateBulkCSVEntityType) GetCreateBulkCSVEntityType() *CreateBulkCSVEntityType_CreateBulkCSVEntityType {
	if t == nil {
		t = &CreateBulkCSVEntityType{}
	}
	return &t.CreateBulkCSVEntityType
}

type CreateBulkEntityType struct {
	CreateBulkEntityType CreateBulkEntityType_CreateBulkEntityType "json:\"createBulkEntityType\" graphql:\"createBulkEntityType\""
}

func (t *CreateBulkEntityType) GetCreateBulkEntityType() *CreateBulkEntityType_CreateBulkEntityType {
	if t == nil {
		t = &CreateBulkEntityType{}
	}
	return &t.CreateBulkEntityType
}

type CreateEntityType struct {
	CreateEntityType CreateEntityType_CreateEntityType "json:\"createEntityType\" graphql:\"createEntityType\""
}

func (t *CreateEntityType) GetCreateEntityType() *CreateEntityType_CreateEntityType {
	if t == nil {
		t = &CreateEntityType{}
	}
	return &t.CreateEntityType
}

type DeleteEntityType struct {
	DeleteEntityType DeleteEntityType_DeleteEntityType "json:\"deleteEntityType\" graphql:\"deleteEntityType\""
}

func (t *DeleteEntityType) GetDeleteEntityType() *DeleteEntityType_DeleteEntityType {
	if t == nil {
		t = &DeleteEntityType{}
	}
	return &t.DeleteEntityType
}

type GetAllEntityTypes struct {
	EntityTypes GetAllEntityTypes_EntityTypes "json:\"entityTypes\" graphql:\"entityTypes\""
}

func (t *GetAllEntityTypes) GetEntityTypes() *GetAllEntityTypes_EntityTypes {
	if t == nil {
		t = &GetAllEntityTypes{}
	}
	return &t.EntityTypes
}

type GetEntityTypeByID struct {
	EntityType GetEntityTypeByID_EntityType "json:\"entityType\" graphql:\"entityType\""
}

func (t *GetEntityTypeByID) GetEntityType() *GetEntityTypeByID_EntityType {
	if t == nil {
		t = &GetEntityTypeByID{}
	}
	return &t.EntityType
}

type GetEntityTypes struct {
	EntityTypes GetEntityTypes_EntityTypes "json:\"entityTypes\" graphql:\"entityTypes\""
}

func (t *GetEntityTypes) GetEntityTypes() *GetEntityTypes_EntityTypes {
	if t == nil {
		t = &GetEntityTypes{}
	}
	return &t.EntityTypes
}

type UpdateEntityType struct {
	UpdateEntityType UpdateEntityType_UpdateEntityType "json:\"updateEntityType\" graphql:\"updateEntityType\""
}

func (t *UpdateEntityType) GetUpdateEntityType() *UpdateEntityType_UpdateEntityType {
	if t == nil {
		t = &UpdateEntityType{}
	}
	return &t.UpdateEntityType
}

type GetAllEntityTypeHistories struct {
	EntityTypeHistories GetAllEntityTypeHistories_EntityTypeHistories "json:\"entityTypeHistories\" graphql:\"entityTypeHistories\""
}

func (t *GetAllEntityTypeHistories) GetEntityTypeHistories() *GetAllEntityTypeHistories_EntityTypeHistories {
	if t == nil {
		t = &GetAllEntityTypeHistories{}
	}
	return &t.EntityTypeHistories
}

type GetEntityTypeHistories struct {
	EntityTypeHistories GetEntityTypeHistories_EntityTypeHistories "json:\"entityTypeHistories\" graphql:\"entityTypeHistories\""
}

func (t *GetEntityTypeHistories) GetEntityTypeHistories() *GetEntityTypeHistories_EntityTypeHistories {
	if t == nil {
		t = &GetEntityTypeHistories{}
	}
	return &t.EntityTypeHistories
}

type CreateBulkCSVEvent struct {
	CreateBulkCSVEvent CreateBulkCSVEvent_CreateBulkCSVEvent "json:\"createBulkCSVEvent\" graphql:\"createBulkCSVEvent\""
}

func (t *CreateBulkCSVEvent) GetCreateBulkCSVEvent() *CreateBulkCSVEvent_CreateBulkCSVEvent {
	if t == nil {
		t = &CreateBulkCSVEvent{}
	}
	return &t.CreateBulkCSVEvent
}

type CreateBulkEvent struct {
	CreateBulkEvent CreateBulkEvent_CreateBulkEvent "json:\"createBulkEvent\" graphql:\"createBulkEvent\""
}

func (t *CreateBulkEvent) GetCreateBulkEvent() *CreateBulkEvent_CreateBulkEvent {
	if t == nil {
		t = &CreateBulkEvent{}
	}
	return &t.CreateBulkEvent
}

type CreateEvent struct {
	CreateEvent CreateEvent_CreateEvent "json:\"createEvent\" graphql:\"createEvent\""
}

func (t *CreateEvent) GetCreateEvent() *CreateEvent_CreateEvent {
	if t == nil {
		t = &CreateEvent{}
	}
	return &t.CreateEvent
}

type DeleteEvent struct {
	DeleteEvent DeleteEvent_DeleteEvent "json:\"deleteEvent\" graphql:\"deleteEvent\""
}

func (t *DeleteEvent) GetDeleteEvent() *DeleteEvent_DeleteEvent {
	if t == nil {
		t = &DeleteEvent{}
	}
	return &t.DeleteEvent
}

type GetAllEvents struct {
	Events GetAllEvents_Events "json:\"events\" graphql:\"events\""
}

func (t *GetAllEvents) GetEvents() *GetAllEvents_Events {
	if t == nil {
		t = &GetAllEvents{}
	}
	return &t.Events
}

type GetEventByID struct {
	Event GetEventByID_Event "json:\"event\" graphql:\"event\""
}

func (t *GetEventByID) GetEvent() *GetEventByID_Event {
	if t == nil {
		t = &GetEventByID{}
	}
	return &t.Event
}

type GetEvents struct {
	Events GetEvents_Events "json:\"events\" graphql:\"events\""
}

func (t *GetEvents) GetEvents() *GetEvents_Events {
	if t == nil {
		t = &GetEvents{}
	}
	return &t.Events
}

type UpdateEvent struct {
	UpdateEvent UpdateEvent_UpdateEvent "json:\"updateEvent\" graphql:\"updateEvent\""
}

func (t *UpdateEvent) GetUpdateEvent() *UpdateEvent_UpdateEvent {
	if t == nil {
		t = &UpdateEvent{}
	}
	return &t.UpdateEvent
}

type GetAllEventHistories struct {
	EventHistories GetAllEventHistories_EventHistories "json:\"eventHistories\" graphql:\"eventHistories\""
}

func (t *GetAllEventHistories) GetEventHistories() *GetAllEventHistories_EventHistories {
	if t == nil {
		t = &GetAllEventHistories{}
	}
	return &t.EventHistories
}

type GetEventHistories struct {
	EventHistories GetEventHistories_EventHistories "json:\"eventHistories\" graphql:\"eventHistories\""
}

func (t *GetEventHistories) GetEventHistories() *GetEventHistories_EventHistories {
	if t == nil {
		t = &GetEventHistories{}
	}
	return &t.EventHistories
}

type CreateBulkCSVFeature struct {
	CreateBulkCSVFeature CreateBulkCSVFeature_CreateBulkCSVFeature "json:\"createBulkCSVFeature\" graphql:\"createBulkCSVFeature\""
}

func (t *CreateBulkCSVFeature) GetCreateBulkCSVFeature() *CreateBulkCSVFeature_CreateBulkCSVFeature {
	if t == nil {
		t = &CreateBulkCSVFeature{}
	}
	return &t.CreateBulkCSVFeature
}

type CreateBulkFeature struct {
	CreateBulkFeature CreateBulkFeature_CreateBulkFeature "json:\"createBulkFeature\" graphql:\"createBulkFeature\""
}

func (t *CreateBulkFeature) GetCreateBulkFeature() *CreateBulkFeature_CreateBulkFeature {
	if t == nil {
		t = &CreateBulkFeature{}
	}
	return &t.CreateBulkFeature
}

type CreateFeature struct {
	CreateFeature CreateFeature_CreateFeature "json:\"createFeature\" graphql:\"createFeature\""
}

func (t *CreateFeature) GetCreateFeature() *CreateFeature_CreateFeature {
	if t == nil {
		t = &CreateFeature{}
	}
	return &t.CreateFeature
}

type DeleteFeature struct {
	DeleteFeature DeleteFeature_DeleteFeature "json:\"deleteFeature\" graphql:\"deleteFeature\""
}

func (t *DeleteFeature) GetDeleteFeature() *DeleteFeature_DeleteFeature {
	if t == nil {
		t = &DeleteFeature{}
	}
	return &t.DeleteFeature
}

type GetAllFeatures struct {
	Features GetAllFeatures_Features "json:\"features\" graphql:\"features\""
}

func (t *GetAllFeatures) GetFeatures() *GetAllFeatures_Features {
	if t == nil {
		t = &GetAllFeatures{}
	}
	return &t.Features
}

type GetFeatureByID struct {
	Feature GetFeatureByID_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *GetFeatureByID) GetFeature() *GetFeatureByID_Feature {
	if t == nil {
		t = &GetFeatureByID{}
	}
	return &t.Feature
}

type GetFeatures struct {
	Features GetFeatures_Features "json:\"features\" graphql:\"features\""
}

func (t *GetFeatures) GetFeatures() *GetFeatures_Features {
	if t == nil {
		t = &GetFeatures{}
	}
	return &t.Features
}

type UpdateFeature struct {
	UpdateFeature UpdateFeature_UpdateFeature "json:\"updateFeature\" graphql:\"updateFeature\""
}

func (t *UpdateFeature) GetUpdateFeature() *UpdateFeature_UpdateFeature {
	if t == nil {
		t = &UpdateFeature{}
	}
	return &t.UpdateFeature
}

type GetAllFeatureHistories struct {
	FeatureHistories GetAllFeatureHistories_FeatureHistories "json:\"featureHistories\" graphql:\"featureHistories\""
}

func (t *GetAllFeatureHistories) GetFeatureHistories() *GetAllFeatureHistories_FeatureHistories {
	if t == nil {
		t = &GetAllFeatureHistories{}
	}
	return &t.FeatureHistories
}

type GetFeatureHistories struct {
	FeatureHistories GetFeatureHistories_FeatureHistories "json:\"featureHistories\" graphql:\"featureHistories\""
}

func (t *GetFeatureHistories) GetFeatureHistories() *GetFeatureHistories_FeatureHistories {
	if t == nil {
		t = &GetFeatureHistories{}
	}
	return &t.FeatureHistories
}

type DeleteFile struct {
	DeleteFile DeleteFile_DeleteFile "json:\"deleteFile\" graphql:\"deleteFile\""
}

func (t *DeleteFile) GetDeleteFile() *DeleteFile_DeleteFile {
	if t == nil {
		t = &DeleteFile{}
	}
	return &t.DeleteFile
}

type GetAllFiles struct {
	Files GetAllFiles_Files "json:\"files\" graphql:\"files\""
}

func (t *GetAllFiles) GetFiles() *GetAllFiles_Files {
	if t == nil {
		t = &GetAllFiles{}
	}
	return &t.Files
}

type GetFileByID struct {
	File GetFileByID_File "json:\"file\" graphql:\"file\""
}

func (t *GetFileByID) GetFile() *GetFileByID_File {
	if t == nil {
		t = &GetFileByID{}
	}
	return &t.File
}

type GetFiles struct {
	Files GetFiles_Files "json:\"files\" graphql:\"files\""
}

func (t *GetFiles) GetFiles() *GetFiles_Files {
	if t == nil {
		t = &GetFiles{}
	}
	return &t.Files
}

type GetAllFileHistories struct {
	FileHistories GetAllFileHistories_FileHistories "json:\"fileHistories\" graphql:\"fileHistories\""
}

func (t *GetAllFileHistories) GetFileHistories() *GetAllFileHistories_FileHistories {
	if t == nil {
		t = &GetAllFileHistories{}
	}
	return &t.FileHistories
}

type GetFileHistories struct {
	FileHistories GetFileHistories_FileHistories "json:\"fileHistories\" graphql:\"fileHistories\""
}

func (t *GetFileHistories) GetFileHistories() *GetFileHistories_FileHistories {
	if t == nil {
		t = &GetFileHistories{}
	}
	return &t.FileHistories
}

type CreateBulkCSVGroup struct {
	CreateBulkCSVGroup CreateBulkCSVGroup_CreateBulkCSVGroup "json:\"createBulkCSVGroup\" graphql:\"createBulkCSVGroup\""
}

func (t *CreateBulkCSVGroup) GetCreateBulkCSVGroup() *CreateBulkCSVGroup_CreateBulkCSVGroup {
	if t == nil {
		t = &CreateBulkCSVGroup{}
	}
	return &t.CreateBulkCSVGroup
}

type CreateBulkGroup struct {
	CreateBulkGroup CreateBulkGroup_CreateBulkGroup "json:\"createBulkGroup\" graphql:\"createBulkGroup\""
}

func (t *CreateBulkGroup) GetCreateBulkGroup() *CreateBulkGroup_CreateBulkGroup {
	if t == nil {
		t = &CreateBulkGroup{}
	}
	return &t.CreateBulkGroup
}

type CreateGroup struct {
	CreateGroup CreateGroup_CreateGroup "json:\"createGroup\" graphql:\"createGroup\""
}

func (t *CreateGroup) GetCreateGroup() *CreateGroup_CreateGroup {
	if t == nil {
		t = &CreateGroup{}
	}
	return &t.CreateGroup
}

type DeleteGroup struct {
	DeleteGroup DeleteGroup_DeleteGroup "json:\"deleteGroup\" graphql:\"deleteGroup\""
}

func (t *DeleteGroup) GetDeleteGroup() *DeleteGroup_DeleteGroup {
	if t == nil {
		t = &DeleteGroup{}
	}
	return &t.DeleteGroup
}

type GetAllGroups struct {
	Groups GetAllGroups_Groups "json:\"groups\" graphql:\"groups\""
}

func (t *GetAllGroups) GetGroups() *GetAllGroups_Groups {
	if t == nil {
		t = &GetAllGroups{}
	}
	return &t.Groups
}

type GetGroupByID struct {
	Group GetGroupByID_Group "json:\"group\" graphql:\"group\""
}

func (t *GetGroupByID) GetGroup() *GetGroupByID_Group {
	if t == nil {
		t = &GetGroupByID{}
	}
	return &t.Group
}

type GetGroups struct {
	Groups GetGroups_Groups "json:\"groups\" graphql:\"groups\""
}

func (t *GetGroups) GetGroups() *GetGroups_Groups {
	if t == nil {
		t = &GetGroups{}
	}
	return &t.Groups
}

type UpdateGroup struct {
	UpdateGroup UpdateGroup_UpdateGroup "json:\"updateGroup\" graphql:\"updateGroup\""
}

func (t *UpdateGroup) GetUpdateGroup() *UpdateGroup_UpdateGroup {
	if t == nil {
		t = &UpdateGroup{}
	}
	return &t.UpdateGroup
}

type GetAllGroupHistories struct {
	GroupHistories GetAllGroupHistories_GroupHistories "json:\"groupHistories\" graphql:\"groupHistories\""
}

func (t *GetAllGroupHistories) GetGroupHistories() *GetAllGroupHistories_GroupHistories {
	if t == nil {
		t = &GetAllGroupHistories{}
	}
	return &t.GroupHistories
}

type GetGroupHistories struct {
	GroupHistories GetGroupHistories_GroupHistories "json:\"groupHistories\" graphql:\"groupHistories\""
}

func (t *GetGroupHistories) GetGroupHistories() *GetGroupHistories_GroupHistories {
	if t == nil {
		t = &GetGroupHistories{}
	}
	return &t.GroupHistories
}

type AddUserToGroupWithRole struct {
	CreateGroupMembership AddUserToGroupWithRole_CreateGroupMembership "json:\"createGroupMembership\" graphql:\"createGroupMembership\""
}

func (t *AddUserToGroupWithRole) GetCreateGroupMembership() *AddUserToGroupWithRole_CreateGroupMembership {
	if t == nil {
		t = &AddUserToGroupWithRole{}
	}
	return &t.CreateGroupMembership
}

type CreateBulkCSVGroupMembers struct {
	CreateBulkCSVGroupMembership CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership "json:\"createBulkCSVGroupMembership\" graphql:\"createBulkCSVGroupMembership\""
}

func (t *CreateBulkCSVGroupMembers) GetCreateBulkCSVGroupMembership() *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership {
	if t == nil {
		t = &CreateBulkCSVGroupMembers{}
	}
	return &t.CreateBulkCSVGroupMembership
}

type CreateBulkGroupMembers struct {
	CreateBulkGroupMembership CreateBulkGroupMembers_CreateBulkGroupMembership "json:\"createBulkGroupMembership\" graphql:\"createBulkGroupMembership\""
}

func (t *CreateBulkGroupMembers) GetCreateBulkGroupMembership() *CreateBulkGroupMembers_CreateBulkGroupMembership {
	if t == nil {
		t = &CreateBulkGroupMembers{}
	}
	return &t.CreateBulkGroupMembership
}

type GetGroupMembersByGroupID struct {
	GroupMemberships GetGroupMembersByGroupID_GroupMemberships "json:\"groupMemberships\" graphql:\"groupMemberships\""
}

func (t *GetGroupMembersByGroupID) GetGroupMemberships() *GetGroupMembersByGroupID_GroupMemberships {
	if t == nil {
		t = &GetGroupMembersByGroupID{}
	}
	return &t.GroupMemberships
}

type RemoveUserFromGroup struct {
	DeleteGroupMembership RemoveUserFromGroup_DeleteGroupMembership "json:\"deleteGroupMembership\" graphql:\"deleteGroupMembership\""
}

func (t *RemoveUserFromGroup) GetDeleteGroupMembership() *RemoveUserFromGroup_DeleteGroupMembership {
	if t == nil {
		t = &RemoveUserFromGroup{}
	}
	return &t.DeleteGroupMembership
}

type UpdateUserRoleInGroup struct {
	UpdateGroupMembership UpdateUserRoleInGroup_UpdateGroupMembership "json:\"updateGroupMembership\" graphql:\"updateGroupMembership\""
}

func (t *UpdateUserRoleInGroup) GetUpdateGroupMembership() *UpdateUserRoleInGroup_UpdateGroupMembership {
	if t == nil {
		t = &UpdateUserRoleInGroup{}
	}
	return &t.UpdateGroupMembership
}

type GetAllGroupMembershipHistories struct {
	GroupMembershipHistories GetAllGroupMembershipHistories_GroupMembershipHistories "json:\"groupMembershipHistories\" graphql:\"groupMembershipHistories\""
}

func (t *GetAllGroupMembershipHistories) GetGroupMembershipHistories() *GetAllGroupMembershipHistories_GroupMembershipHistories {
	if t == nil {
		t = &GetAllGroupMembershipHistories{}
	}
	return &t.GroupMembershipHistories
}

type GetGroupMembershipHistories struct {
	GroupMembershipHistories GetGroupMembershipHistories_GroupMembershipHistories "json:\"groupMembershipHistories\" graphql:\"groupMembershipHistories\""
}

func (t *GetGroupMembershipHistories) GetGroupMembershipHistories() *GetGroupMembershipHistories_GroupMembershipHistories {
	if t == nil {
		t = &GetGroupMembershipHistories{}
	}
	return &t.GroupMembershipHistories
}

type GetAllGroupSettings struct {
	GroupSettings GetAllGroupSettings_GroupSettings "json:\"groupSettings\" graphql:\"groupSettings\""
}

func (t *GetAllGroupSettings) GetGroupSettings() *GetAllGroupSettings_GroupSettings {
	if t == nil {
		t = &GetAllGroupSettings{}
	}
	return &t.GroupSettings
}

type GetGroupSettingByID struct {
	GroupSetting GetGroupSettingByID_GroupSetting "json:\"groupSetting\" graphql:\"groupSetting\""
}

func (t *GetGroupSettingByID) GetGroupSetting() *GetGroupSettingByID_GroupSetting {
	if t == nil {
		t = &GetGroupSettingByID{}
	}
	return &t.GroupSetting
}

type GetGroupSettings struct {
	GroupSettings GetGroupSettings_GroupSettings "json:\"groupSettings\" graphql:\"groupSettings\""
}

func (t *GetGroupSettings) GetGroupSettings() *GetGroupSettings_GroupSettings {
	if t == nil {
		t = &GetGroupSettings{}
	}
	return &t.GroupSettings
}

type UpdateGroupSetting struct {
	UpdateGroupSetting UpdateGroupSetting_UpdateGroupSetting "json:\"updateGroupSetting\" graphql:\"updateGroupSetting\""
}

func (t *UpdateGroupSetting) GetUpdateGroupSetting() *UpdateGroupSetting_UpdateGroupSetting {
	if t == nil {
		t = &UpdateGroupSetting{}
	}
	return &t.UpdateGroupSetting
}

type GetAllGroupSettingHistories struct {
	GroupSettingHistories GetAllGroupSettingHistories_GroupSettingHistories "json:\"groupSettingHistories\" graphql:\"groupSettingHistories\""
}

func (t *GetAllGroupSettingHistories) GetGroupSettingHistories() *GetAllGroupSettingHistories_GroupSettingHistories {
	if t == nil {
		t = &GetAllGroupSettingHistories{}
	}
	return &t.GroupSettingHistories
}

type GetGroupSettingHistories struct {
	GroupSettingHistories GetGroupSettingHistories_GroupSettingHistories "json:\"groupSettingHistories\" graphql:\"groupSettingHistories\""
}

func (t *GetGroupSettingHistories) GetGroupSettingHistories() *GetGroupSettingHistories_GroupSettingHistories {
	if t == nil {
		t = &GetGroupSettingHistories{}
	}
	return &t.GroupSettingHistories
}

type CreateBulkCSVHush struct {
	CreateBulkCSVHush CreateBulkCSVHush_CreateBulkCSVHush "json:\"createBulkCSVHush\" graphql:\"createBulkCSVHush\""
}

func (t *CreateBulkCSVHush) GetCreateBulkCSVHush() *CreateBulkCSVHush_CreateBulkCSVHush {
	if t == nil {
		t = &CreateBulkCSVHush{}
	}
	return &t.CreateBulkCSVHush
}

type CreateBulkHush struct {
	CreateBulkHush CreateBulkHush_CreateBulkHush "json:\"createBulkHush\" graphql:\"createBulkHush\""
}

func (t *CreateBulkHush) GetCreateBulkHush() *CreateBulkHush_CreateBulkHush {
	if t == nil {
		t = &CreateBulkHush{}
	}
	return &t.CreateBulkHush
}

type CreateHush struct {
	CreateHush CreateHush_CreateHush "json:\"createHush\" graphql:\"createHush\""
}

func (t *CreateHush) GetCreateHush() *CreateHush_CreateHush {
	if t == nil {
		t = &CreateHush{}
	}
	return &t.CreateHush
}

type GetAllHushes struct {
	Hushes GetAllHushes_Hushes "json:\"hushes\" graphql:\"hushes\""
}

func (t *GetAllHushes) GetHushes() *GetAllHushes_Hushes {
	if t == nil {
		t = &GetAllHushes{}
	}
	return &t.Hushes
}

type GetHushByID struct {
	Hush GetHushByID_Hush "json:\"hush\" graphql:\"hush\""
}

func (t *GetHushByID) GetHush() *GetHushByID_Hush {
	if t == nil {
		t = &GetHushByID{}
	}
	return &t.Hush
}

type GetHushes struct {
	Hushes GetHushes_Hushes "json:\"hushes\" graphql:\"hushes\""
}

func (t *GetHushes) GetHushes() *GetHushes_Hushes {
	if t == nil {
		t = &GetHushes{}
	}
	return &t.Hushes
}

type UpdateHush struct {
	UpdateHush UpdateHush_UpdateHush "json:\"updateHush\" graphql:\"updateHush\""
}

func (t *UpdateHush) GetUpdateHush() *UpdateHush_UpdateHush {
	if t == nil {
		t = &UpdateHush{}
	}
	return &t.UpdateHush
}

type GetAllHushHistories struct {
	HushHistories GetAllHushHistories_HushHistories "json:\"hushHistories\" graphql:\"hushHistories\""
}

func (t *GetAllHushHistories) GetHushHistories() *GetAllHushHistories_HushHistories {
	if t == nil {
		t = &GetAllHushHistories{}
	}
	return &t.HushHistories
}

type GetHushHistories struct {
	HushHistories GetHushHistories_HushHistories "json:\"hushHistories\" graphql:\"hushHistories\""
}

func (t *GetHushHistories) GetHushHistories() *GetHushHistories_HushHistories {
	if t == nil {
		t = &GetHushHistories{}
	}
	return &t.HushHistories
}

type CreateBulkCSVIntegration struct {
	CreateBulkCSVIntegration CreateBulkCSVIntegration_CreateBulkCSVIntegration "json:\"createBulkCSVIntegration\" graphql:\"createBulkCSVIntegration\""
}

func (t *CreateBulkCSVIntegration) GetCreateBulkCSVIntegration() *CreateBulkCSVIntegration_CreateBulkCSVIntegration {
	if t == nil {
		t = &CreateBulkCSVIntegration{}
	}
	return &t.CreateBulkCSVIntegration
}

type CreateBulkIntegration struct {
	CreateBulkIntegration CreateBulkIntegration_CreateBulkIntegration "json:\"createBulkIntegration\" graphql:\"createBulkIntegration\""
}

func (t *CreateBulkIntegration) GetCreateBulkIntegration() *CreateBulkIntegration_CreateBulkIntegration {
	if t == nil {
		t = &CreateBulkIntegration{}
	}
	return &t.CreateBulkIntegration
}

type CreateIntegration struct {
	CreateIntegration CreateIntegration_CreateIntegration "json:\"createIntegration\" graphql:\"createIntegration\""
}

func (t *CreateIntegration) GetCreateIntegration() *CreateIntegration_CreateIntegration {
	if t == nil {
		t = &CreateIntegration{}
	}
	return &t.CreateIntegration
}

type DeleteIntegration struct {
	DeleteIntegration DeleteIntegration_DeleteIntegration "json:\"deleteIntegration\" graphql:\"deleteIntegration\""
}

func (t *DeleteIntegration) GetDeleteIntegration() *DeleteIntegration_DeleteIntegration {
	if t == nil {
		t = &DeleteIntegration{}
	}
	return &t.DeleteIntegration
}

type GetAllIntegrations struct {
	Integrations GetAllIntegrations_Integrations "json:\"integrations\" graphql:\"integrations\""
}

func (t *GetAllIntegrations) GetIntegrations() *GetAllIntegrations_Integrations {
	if t == nil {
		t = &GetAllIntegrations{}
	}
	return &t.Integrations
}

type GetIntegrationByID struct {
	Integration GetIntegrationByID_Integration "json:\"integration\" graphql:\"integration\""
}

func (t *GetIntegrationByID) GetIntegration() *GetIntegrationByID_Integration {
	if t == nil {
		t = &GetIntegrationByID{}
	}
	return &t.Integration
}

type GetIntegrations struct {
	Integrations GetIntegrations_Integrations "json:\"integrations\" graphql:\"integrations\""
}

func (t *GetIntegrations) GetIntegrations() *GetIntegrations_Integrations {
	if t == nil {
		t = &GetIntegrations{}
	}
	return &t.Integrations
}

type UpdateIntegration struct {
	UpdateIntegration UpdateIntegration_UpdateIntegration "json:\"updateIntegration\" graphql:\"updateIntegration\""
}

func (t *UpdateIntegration) GetUpdateIntegration() *UpdateIntegration_UpdateIntegration {
	if t == nil {
		t = &UpdateIntegration{}
	}
	return &t.UpdateIntegration
}

type GetAllIntegrationHistories struct {
	IntegrationHistories GetAllIntegrationHistories_IntegrationHistories "json:\"integrationHistories\" graphql:\"integrationHistories\""
}

func (t *GetAllIntegrationHistories) GetIntegrationHistories() *GetAllIntegrationHistories_IntegrationHistories {
	if t == nil {
		t = &GetAllIntegrationHistories{}
	}
	return &t.IntegrationHistories
}

type GetIntegrationHistories struct {
	IntegrationHistories GetIntegrationHistories_IntegrationHistories "json:\"integrationHistories\" graphql:\"integrationHistories\""
}

func (t *GetIntegrationHistories) GetIntegrationHistories() *GetIntegrationHistories_IntegrationHistories {
	if t == nil {
		t = &GetIntegrationHistories{}
	}
	return &t.IntegrationHistories
}

type CreateBulkCSVInternalPolicy struct {
	CreateBulkCSVInternalPolicy CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy "json:\"createBulkCSVInternalPolicy\" graphql:\"createBulkCSVInternalPolicy\""
}

func (t *CreateBulkCSVInternalPolicy) GetCreateBulkCSVInternalPolicy() *CreateBulkCSVInternalPolicy_CreateBulkCSVInternalPolicy {
	if t == nil {
		t = &CreateBulkCSVInternalPolicy{}
	}
	return &t.CreateBulkCSVInternalPolicy
}

type CreateBulkInternalPolicy struct {
	CreateBulkInternalPolicy CreateBulkInternalPolicy_CreateBulkInternalPolicy "json:\"createBulkInternalPolicy\" graphql:\"createBulkInternalPolicy\""
}

func (t *CreateBulkInternalPolicy) GetCreateBulkInternalPolicy() *CreateBulkInternalPolicy_CreateBulkInternalPolicy {
	if t == nil {
		t = &CreateBulkInternalPolicy{}
	}
	return &t.CreateBulkInternalPolicy
}

type CreateInternalPolicy struct {
	CreateInternalPolicy CreateInternalPolicy_CreateInternalPolicy "json:\"createInternalPolicy\" graphql:\"createInternalPolicy\""
}

func (t *CreateInternalPolicy) GetCreateInternalPolicy() *CreateInternalPolicy_CreateInternalPolicy {
	if t == nil {
		t = &CreateInternalPolicy{}
	}
	return &t.CreateInternalPolicy
}

type DeleteInternalPolicy struct {
	DeleteInternalPolicy DeleteInternalPolicy_DeleteInternalPolicy "json:\"deleteInternalPolicy\" graphql:\"deleteInternalPolicy\""
}

func (t *DeleteInternalPolicy) GetDeleteInternalPolicy() *DeleteInternalPolicy_DeleteInternalPolicy {
	if t == nil {
		t = &DeleteInternalPolicy{}
	}
	return &t.DeleteInternalPolicy
}

type GetAllInternalPolicies struct {
	InternalPolicies GetAllInternalPolicies_InternalPolicies "json:\"internalPolicies\" graphql:\"internalPolicies\""
}

func (t *GetAllInternalPolicies) GetInternalPolicies() *GetAllInternalPolicies_InternalPolicies {
	if t == nil {
		t = &GetAllInternalPolicies{}
	}
	return &t.InternalPolicies
}

type GetInternalPolicyByID struct {
	InternalPolicy GetInternalPolicyByID_InternalPolicy "json:\"internalPolicy\" graphql:\"internalPolicy\""
}

func (t *GetInternalPolicyByID) GetInternalPolicy() *GetInternalPolicyByID_InternalPolicy {
	if t == nil {
		t = &GetInternalPolicyByID{}
	}
	return &t.InternalPolicy
}

type GetInternalPolicies struct {
	InternalPolicies GetInternalPolicies_InternalPolicies "json:\"internalPolicies\" graphql:\"internalPolicies\""
}

func (t *GetInternalPolicies) GetInternalPolicies() *GetInternalPolicies_InternalPolicies {
	if t == nil {
		t = &GetInternalPolicies{}
	}
	return &t.InternalPolicies
}

type UpdateInternalPolicy struct {
	UpdateInternalPolicy UpdateInternalPolicy_UpdateInternalPolicy "json:\"updateInternalPolicy\" graphql:\"updateInternalPolicy\""
}

func (t *UpdateInternalPolicy) GetUpdateInternalPolicy() *UpdateInternalPolicy_UpdateInternalPolicy {
	if t == nil {
		t = &UpdateInternalPolicy{}
	}
	return &t.UpdateInternalPolicy
}

type GetAllInternalPolicyHistories struct {
	InternalPolicyHistories GetAllInternalPolicyHistories_InternalPolicyHistories "json:\"internalPolicyHistories\" graphql:\"internalPolicyHistories\""
}

func (t *GetAllInternalPolicyHistories) GetInternalPolicyHistories() *GetAllInternalPolicyHistories_InternalPolicyHistories {
	if t == nil {
		t = &GetAllInternalPolicyHistories{}
	}
	return &t.InternalPolicyHistories
}

type GetInternalPolicyHistories struct {
	InternalPolicyHistories GetInternalPolicyHistories_InternalPolicyHistories "json:\"internalPolicyHistories\" graphql:\"internalPolicyHistories\""
}

func (t *GetInternalPolicyHistories) GetInternalPolicyHistories() *GetInternalPolicyHistories_InternalPolicyHistories {
	if t == nil {
		t = &GetInternalPolicyHistories{}
	}
	return &t.InternalPolicyHistories
}

type CreateBulkCSVInvite struct {
	CreateBulkCSVInvite CreateBulkCSVInvite_CreateBulkCSVInvite "json:\"createBulkCSVInvite\" graphql:\"createBulkCSVInvite\""
}

func (t *CreateBulkCSVInvite) GetCreateBulkCSVInvite() *CreateBulkCSVInvite_CreateBulkCSVInvite {
	if t == nil {
		t = &CreateBulkCSVInvite{}
	}
	return &t.CreateBulkCSVInvite
}

type CreateBulkInvite struct {
	CreateBulkInvite CreateBulkInvite_CreateBulkInvite "json:\"createBulkInvite\" graphql:\"createBulkInvite\""
}

func (t *CreateBulkInvite) GetCreateBulkInvite() *CreateBulkInvite_CreateBulkInvite {
	if t == nil {
		t = &CreateBulkInvite{}
	}
	return &t.CreateBulkInvite
}

type CreateInvite struct {
	CreateInvite CreateInvite_CreateInvite "json:\"createInvite\" graphql:\"createInvite\""
}

func (t *CreateInvite) GetCreateInvite() *CreateInvite_CreateInvite {
	if t == nil {
		t = &CreateInvite{}
	}
	return &t.CreateInvite
}

type DeleteInvite struct {
	DeleteInvite DeleteInvite_DeleteInvite "json:\"deleteInvite\" graphql:\"deleteInvite\""
}

func (t *DeleteInvite) GetDeleteInvite() *DeleteInvite_DeleteInvite {
	if t == nil {
		t = &DeleteInvite{}
	}
	return &t.DeleteInvite
}

type GetInviteByID struct {
	Invite GetInviteByID_Invite "json:\"invite\" graphql:\"invite\""
}

func (t *GetInviteByID) GetInvite() *GetInviteByID_Invite {
	if t == nil {
		t = &GetInviteByID{}
	}
	return &t.Invite
}

type GetAllInvites struct {
	Invites GetAllInvites_Invites "json:\"invites\" graphql:\"invites\""
}

func (t *GetAllInvites) GetInvites() *GetAllInvites_Invites {
	if t == nil {
		t = &GetAllInvites{}
	}
	return &t.Invites
}

type InvitesByOrgID struct {
	Invites InvitesByOrgID_Invites "json:\"invites\" graphql:\"invites\""
}

func (t *InvitesByOrgID) GetInvites() *InvitesByOrgID_Invites {
	if t == nil {
		t = &InvitesByOrgID{}
	}
	return &t.Invites
}

type CreateBulkCSVNarrative struct {
	CreateBulkCSVNarrative CreateBulkCSVNarrative_CreateBulkCSVNarrative "json:\"createBulkCSVNarrative\" graphql:\"createBulkCSVNarrative\""
}

func (t *CreateBulkCSVNarrative) GetCreateBulkCSVNarrative() *CreateBulkCSVNarrative_CreateBulkCSVNarrative {
	if t == nil {
		t = &CreateBulkCSVNarrative{}
	}
	return &t.CreateBulkCSVNarrative
}

type CreateBulkNarrative struct {
	CreateBulkNarrative CreateBulkNarrative_CreateBulkNarrative "json:\"createBulkNarrative\" graphql:\"createBulkNarrative\""
}

func (t *CreateBulkNarrative) GetCreateBulkNarrative() *CreateBulkNarrative_CreateBulkNarrative {
	if t == nil {
		t = &CreateBulkNarrative{}
	}
	return &t.CreateBulkNarrative
}

type CreateNarrative struct {
	CreateNarrative CreateNarrative_CreateNarrative "json:\"createNarrative\" graphql:\"createNarrative\""
}

func (t *CreateNarrative) GetCreateNarrative() *CreateNarrative_CreateNarrative {
	if t == nil {
		t = &CreateNarrative{}
	}
	return &t.CreateNarrative
}

type DeleteNarrative struct {
	DeleteNarrative DeleteNarrative_DeleteNarrative "json:\"deleteNarrative\" graphql:\"deleteNarrative\""
}

func (t *DeleteNarrative) GetDeleteNarrative() *DeleteNarrative_DeleteNarrative {
	if t == nil {
		t = &DeleteNarrative{}
	}
	return &t.DeleteNarrative
}

type GetAllNarratives struct {
	Narratives GetAllNarratives_Narratives "json:\"narratives\" graphql:\"narratives\""
}

func (t *GetAllNarratives) GetNarratives() *GetAllNarratives_Narratives {
	if t == nil {
		t = &GetAllNarratives{}
	}
	return &t.Narratives
}

type GetNarrativeByID struct {
	Narrative GetNarrativeByID_Narrative "json:\"narrative\" graphql:\"narrative\""
}

func (t *GetNarrativeByID) GetNarrative() *GetNarrativeByID_Narrative {
	if t == nil {
		t = &GetNarrativeByID{}
	}
	return &t.Narrative
}

type GetNarratives struct {
	Narratives GetNarratives_Narratives "json:\"narratives\" graphql:\"narratives\""
}

func (t *GetNarratives) GetNarratives() *GetNarratives_Narratives {
	if t == nil {
		t = &GetNarratives{}
	}
	return &t.Narratives
}

type UpdateNarrative struct {
	UpdateNarrative UpdateNarrative_UpdateNarrative "json:\"updateNarrative\" graphql:\"updateNarrative\""
}

func (t *UpdateNarrative) GetUpdateNarrative() *UpdateNarrative_UpdateNarrative {
	if t == nil {
		t = &UpdateNarrative{}
	}
	return &t.UpdateNarrative
}

type GetAllNarrativeHistories struct {
	NarrativeHistories GetAllNarrativeHistories_NarrativeHistories "json:\"narrativeHistories\" graphql:\"narrativeHistories\""
}

func (t *GetAllNarrativeHistories) GetNarrativeHistories() *GetAllNarrativeHistories_NarrativeHistories {
	if t == nil {
		t = &GetAllNarrativeHistories{}
	}
	return &t.NarrativeHistories
}

type GetNarrativeHistories struct {
	NarrativeHistories GetNarrativeHistories_NarrativeHistories "json:\"narrativeHistories\" graphql:\"narrativeHistories\""
}

func (t *GetNarrativeHistories) GetNarrativeHistories() *GetNarrativeHistories_NarrativeHistories {
	if t == nil {
		t = &GetNarrativeHistories{}
	}
	return &t.NarrativeHistories
}

type GetAllNoteHistories struct {
	NoteHistories GetAllNoteHistories_NoteHistories "json:\"noteHistories\" graphql:\"noteHistories\""
}

func (t *GetAllNoteHistories) GetNoteHistories() *GetAllNoteHistories_NoteHistories {
	if t == nil {
		t = &GetAllNoteHistories{}
	}
	return &t.NoteHistories
}

type GetNoteHistories struct {
	NoteHistories GetNoteHistories_NoteHistories "json:\"noteHistories\" graphql:\"noteHistories\""
}

func (t *GetNoteHistories) GetNoteHistories() *GetNoteHistories_NoteHistories {
	if t == nil {
		t = &GetNoteHistories{}
	}
	return &t.NoteHistories
}

type GetAllOauthProviderHistories struct {
	OauthProviderHistories GetAllOauthProviderHistories_OauthProviderHistories "json:\"oauthProviderHistories\" graphql:\"oauthProviderHistories\""
}

func (t *GetAllOauthProviderHistories) GetOauthProviderHistories() *GetAllOauthProviderHistories_OauthProviderHistories {
	if t == nil {
		t = &GetAllOauthProviderHistories{}
	}
	return &t.OauthProviderHistories
}

type GetOauthProviderHistories struct {
	OauthProviderHistories GetOauthProviderHistories_OauthProviderHistories "json:\"oauthProviderHistories\" graphql:\"oauthProviderHistories\""
}

func (t *GetOauthProviderHistories) GetOauthProviderHistories() *GetOauthProviderHistories_OauthProviderHistories {
	if t == nil {
		t = &GetOauthProviderHistories{}
	}
	return &t.OauthProviderHistories
}

type CreateBulkCSVOhAuthTooToken struct {
	CreateBulkCSVOhAuthTooToken CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken "json:\"createBulkCSVOhAuthTooToken\" graphql:\"createBulkCSVOhAuthTooToken\""
}

func (t *CreateBulkCSVOhAuthTooToken) GetCreateBulkCSVOhAuthTooToken() *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken{}
	}
	return &t.CreateBulkCSVOhAuthTooToken
}

type CreateBulkOhAuthTooToken struct {
	CreateBulkOhAuthTooToken CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken "json:\"createBulkOhAuthTooToken\" graphql:\"createBulkOhAuthTooToken\""
}

func (t *CreateBulkOhAuthTooToken) GetCreateBulkOhAuthTooToken() *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken {
	if t == nil {
		t = &CreateBulkOhAuthTooToken{}
	}
	return &t.CreateBulkOhAuthTooToken
}

type CreateOhAuthTooToken struct {
	CreateOhAuthTooToken CreateOhAuthTooToken_CreateOhAuthTooToken "json:\"createOhAuthTooToken\" graphql:\"createOhAuthTooToken\""
}

func (t *CreateOhAuthTooToken) GetCreateOhAuthTooToken() *CreateOhAuthTooToken_CreateOhAuthTooToken {
	if t == nil {
		t = &CreateOhAuthTooToken{}
	}
	return &t.CreateOhAuthTooToken
}

type DeleteOhAuthTooToken struct {
	DeleteOhAuthTooToken DeleteOhAuthTooToken_DeleteOhAuthTooToken "json:\"deleteOhAuthTooToken\" graphql:\"deleteOhAuthTooToken\""
}

func (t *DeleteOhAuthTooToken) GetDeleteOhAuthTooToken() *DeleteOhAuthTooToken_DeleteOhAuthTooToken {
	if t == nil {
		t = &DeleteOhAuthTooToken{}
	}
	return &t.DeleteOhAuthTooToken
}

type GetOhAuthTooTokens struct {
	OhAuthTooTokens GetOhAuthTooTokens_OhAuthTooTokens "json:\"ohAuthTooTokens\" graphql:\"ohAuthTooTokens\""
}

func (t *GetOhAuthTooTokens) GetOhAuthTooTokens() *GetOhAuthTooTokens_OhAuthTooTokens {
	if t == nil {
		t = &GetOhAuthTooTokens{}
	}
	return &t.OhAuthTooTokens
}

type UpdateOhAuthTooToken struct {
	UpdateOhAuthTooToken UpdateOhAuthTooToken_UpdateOhAuthTooToken "json:\"updateOhAuthTooToken\" graphql:\"updateOhAuthTooToken\""
}

func (t *UpdateOhAuthTooToken) GetUpdateOhAuthTooToken() *UpdateOhAuthTooToken_UpdateOhAuthTooToken {
	if t == nil {
		t = &UpdateOhAuthTooToken{}
	}
	return &t.UpdateOhAuthTooToken
}

type CreateBulkCSVOrganization struct {
	CreateBulkCSVOrganization CreateBulkCSVOrganization_CreateBulkCSVOrganization "json:\"createBulkCSVOrganization\" graphql:\"createBulkCSVOrganization\""
}

func (t *CreateBulkCSVOrganization) GetCreateBulkCSVOrganization() *CreateBulkCSVOrganization_CreateBulkCSVOrganization {
	if t == nil {
		t = &CreateBulkCSVOrganization{}
	}
	return &t.CreateBulkCSVOrganization
}

type CreateBulkOrganization struct {
	CreateBulkOrganization CreateBulkOrganization_CreateBulkOrganization "json:\"createBulkOrganization\" graphql:\"createBulkOrganization\""
}

func (t *CreateBulkOrganization) GetCreateBulkOrganization() *CreateBulkOrganization_CreateBulkOrganization {
	if t == nil {
		t = &CreateBulkOrganization{}
	}
	return &t.CreateBulkOrganization
}

type CreateOrganization struct {
	CreateOrganization CreateOrganization_CreateOrganization "json:\"createOrganization\" graphql:\"createOrganization\""
}

func (t *CreateOrganization) GetCreateOrganization() *CreateOrganization_CreateOrganization {
	if t == nil {
		t = &CreateOrganization{}
	}
	return &t.CreateOrganization
}

type DeleteOrganization struct {
	DeleteOrganization DeleteOrganization_DeleteOrganization "json:\"deleteOrganization\" graphql:\"deleteOrganization\""
}

func (t *DeleteOrganization) GetDeleteOrganization() *DeleteOrganization_DeleteOrganization {
	if t == nil {
		t = &DeleteOrganization{}
	}
	return &t.DeleteOrganization
}

type GetAllOrganizations struct {
	Organizations GetAllOrganizations_Organizations "json:\"organizations\" graphql:\"organizations\""
}

func (t *GetAllOrganizations) GetOrganizations() *GetAllOrganizations_Organizations {
	if t == nil {
		t = &GetAllOrganizations{}
	}
	return &t.Organizations
}

type GetOrganizationByID struct {
	Organization GetOrganizationByID_Organization "json:\"organization\" graphql:\"organization\""
}

func (t *GetOrganizationByID) GetOrganization() *GetOrganizationByID_Organization {
	if t == nil {
		t = &GetOrganizationByID{}
	}
	return &t.Organization
}

type GetOrganizations struct {
	Organizations GetOrganizations_Organizations "json:\"organizations\" graphql:\"organizations\""
}

func (t *GetOrganizations) GetOrganizations() *GetOrganizations_Organizations {
	if t == nil {
		t = &GetOrganizations{}
	}
	return &t.Organizations
}

type UpdateOrganization struct {
	UpdateOrganization UpdateOrganization_UpdateOrganization "json:\"updateOrganization\" graphql:\"updateOrganization\""
}

func (t *UpdateOrganization) GetUpdateOrganization() *UpdateOrganization_UpdateOrganization {
	if t == nil {
		t = &UpdateOrganization{}
	}
	return &t.UpdateOrganization
}

type GetAllOrganizationHistories struct {
	OrganizationHistories GetAllOrganizationHistories_OrganizationHistories "json:\"organizationHistories\" graphql:\"organizationHistories\""
}

func (t *GetAllOrganizationHistories) GetOrganizationHistories() *GetAllOrganizationHistories_OrganizationHistories {
	if t == nil {
		t = &GetAllOrganizationHistories{}
	}
	return &t.OrganizationHistories
}

type GetOrganizationHistories struct {
	OrganizationHistories GetOrganizationHistories_OrganizationHistories "json:\"organizationHistories\" graphql:\"organizationHistories\""
}

func (t *GetOrganizationHistories) GetOrganizationHistories() *GetOrganizationHistories_OrganizationHistories {
	if t == nil {
		t = &GetOrganizationHistories{}
	}
	return &t.OrganizationHistories
}

type GetAllOrganizationSettings struct {
	OrganizationSettings GetAllOrganizationSettings_OrganizationSettings "json:\"organizationSettings\" graphql:\"organizationSettings\""
}

func (t *GetAllOrganizationSettings) GetOrganizationSettings() *GetAllOrganizationSettings_OrganizationSettings {
	if t == nil {
		t = &GetAllOrganizationSettings{}
	}
	return &t.OrganizationSettings
}

type GetOrganizationSettingByID struct {
	OrganizationSetting GetOrganizationSettingByID_OrganizationSetting "json:\"organizationSetting\" graphql:\"organizationSetting\""
}

func (t *GetOrganizationSettingByID) GetOrganizationSetting() *GetOrganizationSettingByID_OrganizationSetting {
	if t == nil {
		t = &GetOrganizationSettingByID{}
	}
	return &t.OrganizationSetting
}

type GetOrganizationSettings struct {
	OrganizationSettings GetOrganizationSettings_OrganizationSettings "json:\"organizationSettings\" graphql:\"organizationSettings\""
}

func (t *GetOrganizationSettings) GetOrganizationSettings() *GetOrganizationSettings_OrganizationSettings {
	if t == nil {
		t = &GetOrganizationSettings{}
	}
	return &t.OrganizationSettings
}

type UpdateOrganizationSetting struct {
	UpdateOrganizationSetting UpdateOrganizationSetting_UpdateOrganizationSetting "json:\"updateOrganizationSetting\" graphql:\"updateOrganizationSetting\""
}

func (t *UpdateOrganizationSetting) GetUpdateOrganizationSetting() *UpdateOrganizationSetting_UpdateOrganizationSetting {
	if t == nil {
		t = &UpdateOrganizationSetting{}
	}
	return &t.UpdateOrganizationSetting
}

type GetAllOrganizationSettingHistories struct {
	OrganizationSettingHistories GetAllOrganizationSettingHistories_OrganizationSettingHistories "json:\"organizationSettingHistories\" graphql:\"organizationSettingHistories\""
}

func (t *GetAllOrganizationSettingHistories) GetOrganizationSettingHistories() *GetAllOrganizationSettingHistories_OrganizationSettingHistories {
	if t == nil {
		t = &GetAllOrganizationSettingHistories{}
	}
	return &t.OrganizationSettingHistories
}

type GetOrganizationSettingHistories struct {
	OrganizationSettingHistories GetOrganizationSettingHistories_OrganizationSettingHistories "json:\"organizationSettingHistories\" graphql:\"organizationSettingHistories\""
}

func (t *GetOrganizationSettingHistories) GetOrganizationSettingHistories() *GetOrganizationSettingHistories_OrganizationSettingHistories {
	if t == nil {
		t = &GetOrganizationSettingHistories{}
	}
	return &t.OrganizationSettingHistories
}

type AddUserToOrgWithRole struct {
	CreateOrgMembership AddUserToOrgWithRole_CreateOrgMembership "json:\"createOrgMembership\" graphql:\"createOrgMembership\""
}

func (t *AddUserToOrgWithRole) GetCreateOrgMembership() *AddUserToOrgWithRole_CreateOrgMembership {
	if t == nil {
		t = &AddUserToOrgWithRole{}
	}
	return &t.CreateOrgMembership
}

type CreateBulkCSVOrgMembers struct {
	CreateBulkCSVOrgMembership CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership "json:\"createBulkCSVOrgMembership\" graphql:\"createBulkCSVOrgMembership\""
}

func (t *CreateBulkCSVOrgMembers) GetCreateBulkCSVOrgMembership() *CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership {
	if t == nil {
		t = &CreateBulkCSVOrgMembers{}
	}
	return &t.CreateBulkCSVOrgMembership
}

type CreateBulkOrgMembers struct {
	CreateBulkOrgMembership CreateBulkOrgMembers_CreateBulkOrgMembership "json:\"createBulkOrgMembership\" graphql:\"createBulkOrgMembership\""
}

func (t *CreateBulkOrgMembers) GetCreateBulkOrgMembership() *CreateBulkOrgMembers_CreateBulkOrgMembership {
	if t == nil {
		t = &CreateBulkOrgMembers{}
	}
	return &t.CreateBulkOrgMembership
}

type GetOrgMembersByOrgID struct {
	OrgMemberships GetOrgMembersByOrgID_OrgMemberships "json:\"orgMemberships\" graphql:\"orgMemberships\""
}

func (t *GetOrgMembersByOrgID) GetOrgMemberships() *GetOrgMembersByOrgID_OrgMemberships {
	if t == nil {
		t = &GetOrgMembersByOrgID{}
	}
	return &t.OrgMemberships
}

type RemoveUserFromOrg struct {
	DeleteOrgMembership RemoveUserFromOrg_DeleteOrgMembership "json:\"deleteOrgMembership\" graphql:\"deleteOrgMembership\""
}

func (t *RemoveUserFromOrg) GetDeleteOrgMembership() *RemoveUserFromOrg_DeleteOrgMembership {
	if t == nil {
		t = &RemoveUserFromOrg{}
	}
	return &t.DeleteOrgMembership
}

type UpdateUserRoleInOrg struct {
	UpdateOrgMembership UpdateUserRoleInOrg_UpdateOrgMembership "json:\"updateOrgMembership\" graphql:\"updateOrgMembership\""
}

func (t *UpdateUserRoleInOrg) GetUpdateOrgMembership() *UpdateUserRoleInOrg_UpdateOrgMembership {
	if t == nil {
		t = &UpdateUserRoleInOrg{}
	}
	return &t.UpdateOrgMembership
}

type GetAllOrgMembershipHistories struct {
	OrgMembershipHistories GetAllOrgMembershipHistories_OrgMembershipHistories "json:\"orgMembershipHistories\" graphql:\"orgMembershipHistories\""
}

func (t *GetAllOrgMembershipHistories) GetOrgMembershipHistories() *GetAllOrgMembershipHistories_OrgMembershipHistories {
	if t == nil {
		t = &GetAllOrgMembershipHistories{}
	}
	return &t.OrgMembershipHistories
}

type GetOrgMembershipHistories struct {
	OrgMembershipHistories GetOrgMembershipHistories_OrgMembershipHistories "json:\"orgMembershipHistories\" graphql:\"orgMembershipHistories\""
}

func (t *GetOrgMembershipHistories) GetOrgMembershipHistories() *GetOrgMembershipHistories_OrgMembershipHistories {
	if t == nil {
		t = &GetOrgMembershipHistories{}
	}
	return &t.OrgMembershipHistories
}

type CreateBulkCSVPersonalAccessToken struct {
	CreateBulkCSVPersonalAccessToken CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken "json:\"createBulkCSVPersonalAccessToken\" graphql:\"createBulkCSVPersonalAccessToken\""
}

func (t *CreateBulkCSVPersonalAccessToken) GetCreateBulkCSVPersonalAccessToken() *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken{}
	}
	return &t.CreateBulkCSVPersonalAccessToken
}

type CreateBulkPersonalAccessToken struct {
	CreateBulkPersonalAccessToken CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken "json:\"createBulkPersonalAccessToken\" graphql:\"createBulkPersonalAccessToken\""
}

func (t *CreateBulkPersonalAccessToken) GetCreateBulkPersonalAccessToken() *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken {
	if t == nil {
		t = &CreateBulkPersonalAccessToken{}
	}
	return &t.CreateBulkPersonalAccessToken
}

type CreatePersonalAccessToken struct {
	CreatePersonalAccessToken CreatePersonalAccessToken_CreatePersonalAccessToken "json:\"createPersonalAccessToken\" graphql:\"createPersonalAccessToken\""
}

func (t *CreatePersonalAccessToken) GetCreatePersonalAccessToken() *CreatePersonalAccessToken_CreatePersonalAccessToken {
	if t == nil {
		t = &CreatePersonalAccessToken{}
	}
	return &t.CreatePersonalAccessToken
}

type DeletePersonalAccessToken struct {
	DeletePersonalAccessToken DeletePersonalAccessToken_DeletePersonalAccessToken "json:\"deletePersonalAccessToken\" graphql:\"deletePersonalAccessToken\""
}

func (t *DeletePersonalAccessToken) GetDeletePersonalAccessToken() *DeletePersonalAccessToken_DeletePersonalAccessToken {
	if t == nil {
		t = &DeletePersonalAccessToken{}
	}
	return &t.DeletePersonalAccessToken
}

type GetAllPersonalAccessTokens struct {
	PersonalAccessTokens GetAllPersonalAccessTokens_PersonalAccessTokens "json:\"personalAccessTokens\" graphql:\"personalAccessTokens\""
}

func (t *GetAllPersonalAccessTokens) GetPersonalAccessTokens() *GetAllPersonalAccessTokens_PersonalAccessTokens {
	if t == nil {
		t = &GetAllPersonalAccessTokens{}
	}
	return &t.PersonalAccessTokens
}

type GetPersonalAccessTokenByID struct {
	PersonalAccessToken GetPersonalAccessTokenByID_PersonalAccessToken "json:\"personalAccessToken\" graphql:\"personalAccessToken\""
}

func (t *GetPersonalAccessTokenByID) GetPersonalAccessToken() *GetPersonalAccessTokenByID_PersonalAccessToken {
	if t == nil {
		t = &GetPersonalAccessTokenByID{}
	}
	return &t.PersonalAccessToken
}

type UpdatePersonalAccessToken struct {
	UpdatePersonalAccessToken UpdatePersonalAccessToken_UpdatePersonalAccessToken "json:\"updatePersonalAccessToken\" graphql:\"updatePersonalAccessToken\""
}

func (t *UpdatePersonalAccessToken) GetUpdatePersonalAccessToken() *UpdatePersonalAccessToken_UpdatePersonalAccessToken {
	if t == nil {
		t = &UpdatePersonalAccessToken{}
	}
	return &t.UpdatePersonalAccessToken
}

type CreateBulkCSVProcedure struct {
	CreateBulkCSVProcedure CreateBulkCSVProcedure_CreateBulkCSVProcedure "json:\"createBulkCSVProcedure\" graphql:\"createBulkCSVProcedure\""
}

func (t *CreateBulkCSVProcedure) GetCreateBulkCSVProcedure() *CreateBulkCSVProcedure_CreateBulkCSVProcedure {
	if t == nil {
		t = &CreateBulkCSVProcedure{}
	}
	return &t.CreateBulkCSVProcedure
}

type CreateBulkProcedure struct {
	CreateBulkProcedure CreateBulkProcedure_CreateBulkProcedure "json:\"createBulkProcedure\" graphql:\"createBulkProcedure\""
}

func (t *CreateBulkProcedure) GetCreateBulkProcedure() *CreateBulkProcedure_CreateBulkProcedure {
	if t == nil {
		t = &CreateBulkProcedure{}
	}
	return &t.CreateBulkProcedure
}

type CreateProcedure struct {
	CreateProcedure CreateProcedure_CreateProcedure "json:\"createProcedure\" graphql:\"createProcedure\""
}

func (t *CreateProcedure) GetCreateProcedure() *CreateProcedure_CreateProcedure {
	if t == nil {
		t = &CreateProcedure{}
	}
	return &t.CreateProcedure
}

type DeleteProcedure struct {
	DeleteProcedure DeleteProcedure_DeleteProcedure "json:\"deleteProcedure\" graphql:\"deleteProcedure\""
}

func (t *DeleteProcedure) GetDeleteProcedure() *DeleteProcedure_DeleteProcedure {
	if t == nil {
		t = &DeleteProcedure{}
	}
	return &t.DeleteProcedure
}

type GetAllProcedures struct {
	Procedures GetAllProcedures_Procedures "json:\"procedures\" graphql:\"procedures\""
}

func (t *GetAllProcedures) GetProcedures() *GetAllProcedures_Procedures {
	if t == nil {
		t = &GetAllProcedures{}
	}
	return &t.Procedures
}

type GetProcedureByID struct {
	Procedure GetProcedureByID_Procedure "json:\"procedure\" graphql:\"procedure\""
}

func (t *GetProcedureByID) GetProcedure() *GetProcedureByID_Procedure {
	if t == nil {
		t = &GetProcedureByID{}
	}
	return &t.Procedure
}

type GetProcedures struct {
	Procedures GetProcedures_Procedures "json:\"procedures\" graphql:\"procedures\""
}

func (t *GetProcedures) GetProcedures() *GetProcedures_Procedures {
	if t == nil {
		t = &GetProcedures{}
	}
	return &t.Procedures
}

type UpdateProcedure struct {
	UpdateProcedure UpdateProcedure_UpdateProcedure "json:\"updateProcedure\" graphql:\"updateProcedure\""
}

func (t *UpdateProcedure) GetUpdateProcedure() *UpdateProcedure_UpdateProcedure {
	if t == nil {
		t = &UpdateProcedure{}
	}
	return &t.UpdateProcedure
}

type GetAllProcedureHistories struct {
	ProcedureHistories GetAllProcedureHistories_ProcedureHistories "json:\"procedureHistories\" graphql:\"procedureHistories\""
}

func (t *GetAllProcedureHistories) GetProcedureHistories() *GetAllProcedureHistories_ProcedureHistories {
	if t == nil {
		t = &GetAllProcedureHistories{}
	}
	return &t.ProcedureHistories
}

type GetProcedureHistories struct {
	ProcedureHistories GetProcedureHistories_ProcedureHistories "json:\"procedureHistories\" graphql:\"procedureHistories\""
}

func (t *GetProcedureHistories) GetProcedureHistories() *GetProcedureHistories_ProcedureHistories {
	if t == nil {
		t = &GetProcedureHistories{}
	}
	return &t.ProcedureHistories
}

type CreateBulkCSVProgram struct {
	CreateBulkCSVProgram CreateBulkCSVProgram_CreateBulkCSVProgram "json:\"createBulkCSVProgram\" graphql:\"createBulkCSVProgram\""
}

func (t *CreateBulkCSVProgram) GetCreateBulkCSVProgram() *CreateBulkCSVProgram_CreateBulkCSVProgram {
	if t == nil {
		t = &CreateBulkCSVProgram{}
	}
	return &t.CreateBulkCSVProgram
}

type CreateBulkProgram struct {
	CreateBulkProgram CreateBulkProgram_CreateBulkProgram "json:\"createBulkProgram\" graphql:\"createBulkProgram\""
}

func (t *CreateBulkProgram) GetCreateBulkProgram() *CreateBulkProgram_CreateBulkProgram {
	if t == nil {
		t = &CreateBulkProgram{}
	}
	return &t.CreateBulkProgram
}

type CreateProgram struct {
	CreateProgram CreateProgram_CreateProgram "json:\"createProgram\" graphql:\"createProgram\""
}

func (t *CreateProgram) GetCreateProgram() *CreateProgram_CreateProgram {
	if t == nil {
		t = &CreateProgram{}
	}
	return &t.CreateProgram
}

type DeleteProgram struct {
	DeleteProgram DeleteProgram_DeleteProgram "json:\"deleteProgram\" graphql:\"deleteProgram\""
}

func (t *DeleteProgram) GetDeleteProgram() *DeleteProgram_DeleteProgram {
	if t == nil {
		t = &DeleteProgram{}
	}
	return &t.DeleteProgram
}

type GetAllPrograms struct {
	Programs GetAllPrograms_Programs "json:\"programs\" graphql:\"programs\""
}

func (t *GetAllPrograms) GetPrograms() *GetAllPrograms_Programs {
	if t == nil {
		t = &GetAllPrograms{}
	}
	return &t.Programs
}

type GetProgramByID struct {
	Program GetProgramByID_Program "json:\"program\" graphql:\"program\""
}

func (t *GetProgramByID) GetProgram() *GetProgramByID_Program {
	if t == nil {
		t = &GetProgramByID{}
	}
	return &t.Program
}

type GetPrograms struct {
	Programs GetPrograms_Programs "json:\"programs\" graphql:\"programs\""
}

func (t *GetPrograms) GetPrograms() *GetPrograms_Programs {
	if t == nil {
		t = &GetPrograms{}
	}
	return &t.Programs
}

type UpdateProgram struct {
	UpdateProgram UpdateProgram_UpdateProgram "json:\"updateProgram\" graphql:\"updateProgram\""
}

func (t *UpdateProgram) GetUpdateProgram() *UpdateProgram_UpdateProgram {
	if t == nil {
		t = &UpdateProgram{}
	}
	return &t.UpdateProgram
}

type GetAllProgramHistories struct {
	ProgramHistories GetAllProgramHistories_ProgramHistories "json:\"programHistories\" graphql:\"programHistories\""
}

func (t *GetAllProgramHistories) GetProgramHistories() *GetAllProgramHistories_ProgramHistories {
	if t == nil {
		t = &GetAllProgramHistories{}
	}
	return &t.ProgramHistories
}

type GetProgramHistories struct {
	ProgramHistories GetProgramHistories_ProgramHistories "json:\"programHistories\" graphql:\"programHistories\""
}

func (t *GetProgramHistories) GetProgramHistories() *GetProgramHistories_ProgramHistories {
	if t == nil {
		t = &GetProgramHistories{}
	}
	return &t.ProgramHistories
}

type CreateBulkCSVProgramMembership struct {
	CreateBulkCSVProgramMembership CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership "json:\"createBulkCSVProgramMembership\" graphql:\"createBulkCSVProgramMembership\""
}

func (t *CreateBulkCSVProgramMembership) GetCreateBulkCSVProgramMembership() *CreateBulkCSVProgramMembership_CreateBulkCSVProgramMembership {
	if t == nil {
		t = &CreateBulkCSVProgramMembership{}
	}
	return &t.CreateBulkCSVProgramMembership
}

type CreateBulkProgramMembership struct {
	CreateBulkProgramMembership CreateBulkProgramMembership_CreateBulkProgramMembership "json:\"createBulkProgramMembership\" graphql:\"createBulkProgramMembership\""
}

func (t *CreateBulkProgramMembership) GetCreateBulkProgramMembership() *CreateBulkProgramMembership_CreateBulkProgramMembership {
	if t == nil {
		t = &CreateBulkProgramMembership{}
	}
	return &t.CreateBulkProgramMembership
}

type CreateProgramMembership struct {
	CreateProgramMembership CreateProgramMembership_CreateProgramMembership "json:\"createProgramMembership\" graphql:\"createProgramMembership\""
}

func (t *CreateProgramMembership) GetCreateProgramMembership() *CreateProgramMembership_CreateProgramMembership {
	if t == nil {
		t = &CreateProgramMembership{}
	}
	return &t.CreateProgramMembership
}

type DeleteProgramMembership struct {
	DeleteProgramMembership DeleteProgramMembership_DeleteProgramMembership "json:\"deleteProgramMembership\" graphql:\"deleteProgramMembership\""
}

func (t *DeleteProgramMembership) GetDeleteProgramMembership() *DeleteProgramMembership_DeleteProgramMembership {
	if t == nil {
		t = &DeleteProgramMembership{}
	}
	return &t.DeleteProgramMembership
}

type GetAllProgramMemberships struct {
	ProgramMemberships GetAllProgramMemberships_ProgramMemberships "json:\"programMemberships\" graphql:\"programMemberships\""
}

func (t *GetAllProgramMemberships) GetProgramMemberships() *GetAllProgramMemberships_ProgramMemberships {
	if t == nil {
		t = &GetAllProgramMemberships{}
	}
	return &t.ProgramMemberships
}

type GetProgramMembershipByID struct {
	ProgramMembership GetProgramMembershipByID_ProgramMembership "json:\"programMembership\" graphql:\"programMembership\""
}

func (t *GetProgramMembershipByID) GetProgramMembership() *GetProgramMembershipByID_ProgramMembership {
	if t == nil {
		t = &GetProgramMembershipByID{}
	}
	return &t.ProgramMembership
}

type GetProgramMemberships struct {
	ProgramMemberships GetProgramMemberships_ProgramMemberships "json:\"programMemberships\" graphql:\"programMemberships\""
}

func (t *GetProgramMemberships) GetProgramMemberships() *GetProgramMemberships_ProgramMemberships {
	if t == nil {
		t = &GetProgramMemberships{}
	}
	return &t.ProgramMemberships
}

type UpdateProgramMembership struct {
	UpdateProgramMembership UpdateProgramMembership_UpdateProgramMembership "json:\"updateProgramMembership\" graphql:\"updateProgramMembership\""
}

func (t *UpdateProgramMembership) GetUpdateProgramMembership() *UpdateProgramMembership_UpdateProgramMembership {
	if t == nil {
		t = &UpdateProgramMembership{}
	}
	return &t.UpdateProgramMembership
}

type GetAllProgramMembershipHistories struct {
	ProgramMembershipHistories GetAllProgramMembershipHistories_ProgramMembershipHistories "json:\"programMembershipHistories\" graphql:\"programMembershipHistories\""
}

func (t *GetAllProgramMembershipHistories) GetProgramMembershipHistories() *GetAllProgramMembershipHistories_ProgramMembershipHistories {
	if t == nil {
		t = &GetAllProgramMembershipHistories{}
	}
	return &t.ProgramMembershipHistories
}

type GetProgramMembershipHistories struct {
	ProgramMembershipHistories GetProgramMembershipHistories_ProgramMembershipHistories "json:\"programMembershipHistories\" graphql:\"programMembershipHistories\""
}

func (t *GetProgramMembershipHistories) GetProgramMembershipHistories() *GetProgramMembershipHistories_ProgramMembershipHistories {
	if t == nil {
		t = &GetProgramMembershipHistories{}
	}
	return &t.ProgramMembershipHistories
}

type CreateBulkCSVRisk struct {
	CreateBulkCSVRisk CreateBulkCSVRisk_CreateBulkCSVRisk "json:\"createBulkCSVRisk\" graphql:\"createBulkCSVRisk\""
}

func (t *CreateBulkCSVRisk) GetCreateBulkCSVRisk() *CreateBulkCSVRisk_CreateBulkCSVRisk {
	if t == nil {
		t = &CreateBulkCSVRisk{}
	}
	return &t.CreateBulkCSVRisk
}

type CreateBulkRisk struct {
	CreateBulkRisk CreateBulkRisk_CreateBulkRisk "json:\"createBulkRisk\" graphql:\"createBulkRisk\""
}

func (t *CreateBulkRisk) GetCreateBulkRisk() *CreateBulkRisk_CreateBulkRisk {
	if t == nil {
		t = &CreateBulkRisk{}
	}
	return &t.CreateBulkRisk
}

type CreateRisk struct {
	CreateRisk CreateRisk_CreateRisk "json:\"createRisk\" graphql:\"createRisk\""
}

func (t *CreateRisk) GetCreateRisk() *CreateRisk_CreateRisk {
	if t == nil {
		t = &CreateRisk{}
	}
	return &t.CreateRisk
}

type DeleteRisk struct {
	DeleteRisk DeleteRisk_DeleteRisk "json:\"deleteRisk\" graphql:\"deleteRisk\""
}

func (t *DeleteRisk) GetDeleteRisk() *DeleteRisk_DeleteRisk {
	if t == nil {
		t = &DeleteRisk{}
	}
	return &t.DeleteRisk
}

type GetAllRisks struct {
	Risks GetAllRisks_Risks "json:\"risks\" graphql:\"risks\""
}

func (t *GetAllRisks) GetRisks() *GetAllRisks_Risks {
	if t == nil {
		t = &GetAllRisks{}
	}
	return &t.Risks
}

type GetRiskByID struct {
	Risk GetRiskByID_Risk "json:\"risk\" graphql:\"risk\""
}

func (t *GetRiskByID) GetRisk() *GetRiskByID_Risk {
	if t == nil {
		t = &GetRiskByID{}
	}
	return &t.Risk
}

type GetRisks struct {
	Risks GetRisks_Risks "json:\"risks\" graphql:\"risks\""
}

func (t *GetRisks) GetRisks() *GetRisks_Risks {
	if t == nil {
		t = &GetRisks{}
	}
	return &t.Risks
}

type UpdateRisk struct {
	UpdateRisk UpdateRisk_UpdateRisk "json:\"updateRisk\" graphql:\"updateRisk\""
}

func (t *UpdateRisk) GetUpdateRisk() *UpdateRisk_UpdateRisk {
	if t == nil {
		t = &UpdateRisk{}
	}
	return &t.UpdateRisk
}

type GetAllRiskHistories struct {
	RiskHistories GetAllRiskHistories_RiskHistories "json:\"riskHistories\" graphql:\"riskHistories\""
}

func (t *GetAllRiskHistories) GetRiskHistories() *GetAllRiskHistories_RiskHistories {
	if t == nil {
		t = &GetAllRiskHistories{}
	}
	return &t.RiskHistories
}

type GetRiskHistories struct {
	RiskHistories GetRiskHistories_RiskHistories "json:\"riskHistories\" graphql:\"riskHistories\""
}

func (t *GetRiskHistories) GetRiskHistories() *GetRiskHistories_RiskHistories {
	if t == nil {
		t = &GetRiskHistories{}
	}
	return &t.RiskHistories
}

type GlobalSearch struct {
	Search *GlobalSearch_Search "json:\"search,omitempty\" graphql:\"search\""
}

func (t *GlobalSearch) GetSearch() *GlobalSearch_Search {
	if t == nil {
		t = &GlobalSearch{}
	}
	return t.Search
}

type CreateBulkCSVStandard struct {
	CreateBulkCSVStandard CreateBulkCSVStandard_CreateBulkCSVStandard "json:\"createBulkCSVStandard\" graphql:\"createBulkCSVStandard\""
}

func (t *CreateBulkCSVStandard) GetCreateBulkCSVStandard() *CreateBulkCSVStandard_CreateBulkCSVStandard {
	if t == nil {
		t = &CreateBulkCSVStandard{}
	}
	return &t.CreateBulkCSVStandard
}

type CreateBulkStandard struct {
	CreateBulkStandard CreateBulkStandard_CreateBulkStandard "json:\"createBulkStandard\" graphql:\"createBulkStandard\""
}

func (t *CreateBulkStandard) GetCreateBulkStandard() *CreateBulkStandard_CreateBulkStandard {
	if t == nil {
		t = &CreateBulkStandard{}
	}
	return &t.CreateBulkStandard
}

type CreateStandard struct {
	CreateStandard CreateStandard_CreateStandard "json:\"createStandard\" graphql:\"createStandard\""
}

func (t *CreateStandard) GetCreateStandard() *CreateStandard_CreateStandard {
	if t == nil {
		t = &CreateStandard{}
	}
	return &t.CreateStandard
}

type DeleteStandard struct {
	DeleteStandard DeleteStandard_DeleteStandard "json:\"deleteStandard\" graphql:\"deleteStandard\""
}

func (t *DeleteStandard) GetDeleteStandard() *DeleteStandard_DeleteStandard {
	if t == nil {
		t = &DeleteStandard{}
	}
	return &t.DeleteStandard
}

type GetAllStandards struct {
	Standards GetAllStandards_Standards "json:\"standards\" graphql:\"standards\""
}

func (t *GetAllStandards) GetStandards() *GetAllStandards_Standards {
	if t == nil {
		t = &GetAllStandards{}
	}
	return &t.Standards
}

type GetStandardByID struct {
	Standard GetStandardByID_Standard "json:\"standard\" graphql:\"standard\""
}

func (t *GetStandardByID) GetStandard() *GetStandardByID_Standard {
	if t == nil {
		t = &GetStandardByID{}
	}
	return &t.Standard
}

type GetStandards struct {
	Standards GetStandards_Standards "json:\"standards\" graphql:\"standards\""
}

func (t *GetStandards) GetStandards() *GetStandards_Standards {
	if t == nil {
		t = &GetStandards{}
	}
	return &t.Standards
}

type UpdateStandard struct {
	UpdateStandard UpdateStandard_UpdateStandard "json:\"updateStandard\" graphql:\"updateStandard\""
}

func (t *UpdateStandard) GetUpdateStandard() *UpdateStandard_UpdateStandard {
	if t == nil {
		t = &UpdateStandard{}
	}
	return &t.UpdateStandard
}

type GetAllStandardHistories struct {
	StandardHistories GetAllStandardHistories_StandardHistories "json:\"standardHistories\" graphql:\"standardHistories\""
}

func (t *GetAllStandardHistories) GetStandardHistories() *GetAllStandardHistories_StandardHistories {
	if t == nil {
		t = &GetAllStandardHistories{}
	}
	return &t.StandardHistories
}

type GetStandardHistories struct {
	StandardHistories GetStandardHistories_StandardHistories "json:\"standardHistories\" graphql:\"standardHistories\""
}

func (t *GetStandardHistories) GetStandardHistories() *GetStandardHistories_StandardHistories {
	if t == nil {
		t = &GetStandardHistories{}
	}
	return &t.StandardHistories
}

type CreateBulkCSVSubcontrol struct {
	CreateBulkCSVSubcontrol CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol "json:\"createBulkCSVSubcontrol\" graphql:\"createBulkCSVSubcontrol\""
}

func (t *CreateBulkCSVSubcontrol) GetCreateBulkCSVSubcontrol() *CreateBulkCSVSubcontrol_CreateBulkCSVSubcontrol {
	if t == nil {
		t = &CreateBulkCSVSubcontrol{}
	}
	return &t.CreateBulkCSVSubcontrol
}

type CreateBulkSubcontrol struct {
	CreateBulkSubcontrol CreateBulkSubcontrol_CreateBulkSubcontrol "json:\"createBulkSubcontrol\" graphql:\"createBulkSubcontrol\""
}

func (t *CreateBulkSubcontrol) GetCreateBulkSubcontrol() *CreateBulkSubcontrol_CreateBulkSubcontrol {
	if t == nil {
		t = &CreateBulkSubcontrol{}
	}
	return &t.CreateBulkSubcontrol
}

type CreateSubcontrol struct {
	CreateSubcontrol CreateSubcontrol_CreateSubcontrol "json:\"createSubcontrol\" graphql:\"createSubcontrol\""
}

func (t *CreateSubcontrol) GetCreateSubcontrol() *CreateSubcontrol_CreateSubcontrol {
	if t == nil {
		t = &CreateSubcontrol{}
	}
	return &t.CreateSubcontrol
}

type DeleteSubcontrol struct {
	DeleteSubcontrol DeleteSubcontrol_DeleteSubcontrol "json:\"deleteSubcontrol\" graphql:\"deleteSubcontrol\""
}

func (t *DeleteSubcontrol) GetDeleteSubcontrol() *DeleteSubcontrol_DeleteSubcontrol {
	if t == nil {
		t = &DeleteSubcontrol{}
	}
	return &t.DeleteSubcontrol
}

type GetAllSubcontrols struct {
	Subcontrols GetAllSubcontrols_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
}

func (t *GetAllSubcontrols) GetSubcontrols() *GetAllSubcontrols_Subcontrols {
	if t == nil {
		t = &GetAllSubcontrols{}
	}
	return &t.Subcontrols
}

type GetSubcontrolByID struct {
	Subcontrol GetSubcontrolByID_Subcontrol "json:\"subcontrol\" graphql:\"subcontrol\""
}

func (t *GetSubcontrolByID) GetSubcontrol() *GetSubcontrolByID_Subcontrol {
	if t == nil {
		t = &GetSubcontrolByID{}
	}
	return &t.Subcontrol
}

type GetSubcontrols struct {
	Subcontrols GetSubcontrols_Subcontrols "json:\"subcontrols\" graphql:\"subcontrols\""
}

func (t *GetSubcontrols) GetSubcontrols() *GetSubcontrols_Subcontrols {
	if t == nil {
		t = &GetSubcontrols{}
	}
	return &t.Subcontrols
}

type UpdateSubcontrol struct {
	UpdateSubcontrol UpdateSubcontrol_UpdateSubcontrol "json:\"updateSubcontrol\" graphql:\"updateSubcontrol\""
}

func (t *UpdateSubcontrol) GetUpdateSubcontrol() *UpdateSubcontrol_UpdateSubcontrol {
	if t == nil {
		t = &UpdateSubcontrol{}
	}
	return &t.UpdateSubcontrol
}

type GetAllSubcontrolHistories struct {
	SubcontrolHistories GetAllSubcontrolHistories_SubcontrolHistories "json:\"subcontrolHistories\" graphql:\"subcontrolHistories\""
}

func (t *GetAllSubcontrolHistories) GetSubcontrolHistories() *GetAllSubcontrolHistories_SubcontrolHistories {
	if t == nil {
		t = &GetAllSubcontrolHistories{}
	}
	return &t.SubcontrolHistories
}

type GetSubcontrolHistories struct {
	SubcontrolHistories GetSubcontrolHistories_SubcontrolHistories "json:\"subcontrolHistories\" graphql:\"subcontrolHistories\""
}

func (t *GetSubcontrolHistories) GetSubcontrolHistories() *GetSubcontrolHistories_SubcontrolHistories {
	if t == nil {
		t = &GetSubcontrolHistories{}
	}
	return &t.SubcontrolHistories
}

type CreateBulkCSVSubscriber struct {
	CreateBulkCSVSubscriber CreateBulkCSVSubscriber_CreateBulkCSVSubscriber "json:\"createBulkCSVSubscriber\" graphql:\"createBulkCSVSubscriber\""
}

func (t *CreateBulkCSVSubscriber) GetCreateBulkCSVSubscriber() *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber {
	if t == nil {
		t = &CreateBulkCSVSubscriber{}
	}
	return &t.CreateBulkCSVSubscriber
}

type CreateBulkSubscriber struct {
	CreateBulkSubscriber CreateBulkSubscriber_CreateBulkSubscriber "json:\"createBulkSubscriber\" graphql:\"createBulkSubscriber\""
}

func (t *CreateBulkSubscriber) GetCreateBulkSubscriber() *CreateBulkSubscriber_CreateBulkSubscriber {
	if t == nil {
		t = &CreateBulkSubscriber{}
	}
	return &t.CreateBulkSubscriber
}

type CreateSubscriber struct {
	CreateSubscriber CreateSubscriber_CreateSubscriber "json:\"createSubscriber\" graphql:\"createSubscriber\""
}

func (t *CreateSubscriber) GetCreateSubscriber() *CreateSubscriber_CreateSubscriber {
	if t == nil {
		t = &CreateSubscriber{}
	}
	return &t.CreateSubscriber
}

type DeleteSubscriber struct {
	DeleteSubscriber DeleteSubscriber_DeleteSubscriber "json:\"deleteSubscriber\" graphql:\"deleteSubscriber\""
}

func (t *DeleteSubscriber) GetDeleteSubscriber() *DeleteSubscriber_DeleteSubscriber {
	if t == nil {
		t = &DeleteSubscriber{}
	}
	return &t.DeleteSubscriber
}

type GetAllSubscribers struct {
	Subscribers GetAllSubscribers_Subscribers "json:\"subscribers\" graphql:\"subscribers\""
}

func (t *GetAllSubscribers) GetSubscribers() *GetAllSubscribers_Subscribers {
	if t == nil {
		t = &GetAllSubscribers{}
	}
	return &t.Subscribers
}

type GetSubscriberByEmail struct {
	Subscriber GetSubscriberByEmail_Subscriber "json:\"subscriber\" graphql:\"subscriber\""
}

func (t *GetSubscriberByEmail) GetSubscriber() *GetSubscriberByEmail_Subscriber {
	if t == nil {
		t = &GetSubscriberByEmail{}
	}
	return &t.Subscriber
}

type GetSubscribers struct {
	Subscribers GetSubscribers_Subscribers "json:\"subscribers\" graphql:\"subscribers\""
}

func (t *GetSubscribers) GetSubscribers() *GetSubscribers_Subscribers {
	if t == nil {
		t = &GetSubscribers{}
	}
	return &t.Subscribers
}

type UpdateSubscriber struct {
	UpdateSubscriber UpdateSubscriber_UpdateSubscriber "json:\"updateSubscriber\" graphql:\"updateSubscriber\""
}

func (t *UpdateSubscriber) GetUpdateSubscriber() *UpdateSubscriber_UpdateSubscriber {
	if t == nil {
		t = &UpdateSubscriber{}
	}
	return &t.UpdateSubscriber
}

type CreateBulkCSVTask struct {
	CreateBulkCSVTask CreateBulkCSVTask_CreateBulkCSVTask "json:\"createBulkCSVTask\" graphql:\"createBulkCSVTask\""
}

func (t *CreateBulkCSVTask) GetCreateBulkCSVTask() *CreateBulkCSVTask_CreateBulkCSVTask {
	if t == nil {
		t = &CreateBulkCSVTask{}
	}
	return &t.CreateBulkCSVTask
}

type CreateBulkTask struct {
	CreateBulkTask CreateBulkTask_CreateBulkTask "json:\"createBulkTask\" graphql:\"createBulkTask\""
}

func (t *CreateBulkTask) GetCreateBulkTask() *CreateBulkTask_CreateBulkTask {
	if t == nil {
		t = &CreateBulkTask{}
	}
	return &t.CreateBulkTask
}

type CreateTask struct {
	CreateTask CreateTask_CreateTask "json:\"createTask\" graphql:\"createTask\""
}

func (t *CreateTask) GetCreateTask() *CreateTask_CreateTask {
	if t == nil {
		t = &CreateTask{}
	}
	return &t.CreateTask
}

type DeleteTask struct {
	DeleteTask DeleteTask_DeleteTask "json:\"deleteTask\" graphql:\"deleteTask\""
}

func (t *DeleteTask) GetDeleteTask() *DeleteTask_DeleteTask {
	if t == nil {
		t = &DeleteTask{}
	}
	return &t.DeleteTask
}

type GetAllTasks struct {
	Tasks GetAllTasks_Tasks "json:\"tasks\" graphql:\"tasks\""
}

func (t *GetAllTasks) GetTasks() *GetAllTasks_Tasks {
	if t == nil {
		t = &GetAllTasks{}
	}
	return &t.Tasks
}

type GetTaskByID struct {
	Task GetTaskByID_Task "json:\"task\" graphql:\"task\""
}

func (t *GetTaskByID) GetTask() *GetTaskByID_Task {
	if t == nil {
		t = &GetTaskByID{}
	}
	return &t.Task
}

type GetTasks struct {
	Tasks GetTasks_Tasks "json:\"tasks\" graphql:\"tasks\""
}

func (t *GetTasks) GetTasks() *GetTasks_Tasks {
	if t == nil {
		t = &GetTasks{}
	}
	return &t.Tasks
}

type UpdateTask struct {
	UpdateTask UpdateTask_UpdateTask "json:\"updateTask\" graphql:\"updateTask\""
}

func (t *UpdateTask) GetUpdateTask() *UpdateTask_UpdateTask {
	if t == nil {
		t = &UpdateTask{}
	}
	return &t.UpdateTask
}

type GetAllTaskHistories struct {
	TaskHistories GetAllTaskHistories_TaskHistories "json:\"taskHistories\" graphql:\"taskHistories\""
}

func (t *GetAllTaskHistories) GetTaskHistories() *GetAllTaskHistories_TaskHistories {
	if t == nil {
		t = &GetAllTaskHistories{}
	}
	return &t.TaskHistories
}

type GetTaskHistories struct {
	TaskHistories GetTaskHistories_TaskHistories "json:\"taskHistories\" graphql:\"taskHistories\""
}

func (t *GetTaskHistories) GetTaskHistories() *GetTaskHistories_TaskHistories {
	if t == nil {
		t = &GetTaskHistories{}
	}
	return &t.TaskHistories
}

type CreateBulkCSVTemplate struct {
	CreateBulkCSVTemplate CreateBulkCSVTemplate_CreateBulkCSVTemplate "json:\"createBulkCSVTemplate\" graphql:\"createBulkCSVTemplate\""
}

func (t *CreateBulkCSVTemplate) GetCreateBulkCSVTemplate() *CreateBulkCSVTemplate_CreateBulkCSVTemplate {
	if t == nil {
		t = &CreateBulkCSVTemplate{}
	}
	return &t.CreateBulkCSVTemplate
}

type CreateBulkTemplate struct {
	CreateBulkTemplate CreateBulkTemplate_CreateBulkTemplate "json:\"createBulkTemplate\" graphql:\"createBulkTemplate\""
}

func (t *CreateBulkTemplate) GetCreateBulkTemplate() *CreateBulkTemplate_CreateBulkTemplate {
	if t == nil {
		t = &CreateBulkTemplate{}
	}
	return &t.CreateBulkTemplate
}

type CreateTemplate struct {
	CreateTemplate CreateTemplate_CreateTemplate "json:\"createTemplate\" graphql:\"createTemplate\""
}

func (t *CreateTemplate) GetCreateTemplate() *CreateTemplate_CreateTemplate {
	if t == nil {
		t = &CreateTemplate{}
	}
	return &t.CreateTemplate
}

type GetAllTemplates struct {
	Templates GetAllTemplates_Templates "json:\"templates\" graphql:\"templates\""
}

func (t *GetAllTemplates) GetTemplates() *GetAllTemplates_Templates {
	if t == nil {
		t = &GetAllTemplates{}
	}
	return &t.Templates
}

type GetTemplateByID struct {
	Template GetTemplateByID_Template "json:\"template\" graphql:\"template\""
}

func (t *GetTemplateByID) GetTemplate() *GetTemplateByID_Template {
	if t == nil {
		t = &GetTemplateByID{}
	}
	return &t.Template
}

type UpdateTemplate struct {
	UpdateTemplate UpdateTemplate_UpdateTemplate "json:\"updateTemplate\" graphql:\"updateTemplate\""
}

func (t *UpdateTemplate) GetUpdateTemplate() *UpdateTemplate_UpdateTemplate {
	if t == nil {
		t = &UpdateTemplate{}
	}
	return &t.UpdateTemplate
}

type GetAllTemplateHistories struct {
	TemplateHistories GetAllTemplateHistories_TemplateHistories "json:\"templateHistories\" graphql:\"templateHistories\""
}

func (t *GetAllTemplateHistories) GetTemplateHistories() *GetAllTemplateHistories_TemplateHistories {
	if t == nil {
		t = &GetAllTemplateHistories{}
	}
	return &t.TemplateHistories
}

type GetTemplateHistories struct {
	TemplateHistories GetTemplateHistories_TemplateHistories "json:\"templateHistories\" graphql:\"templateHistories\""
}

func (t *GetTemplateHistories) GetTemplateHistories() *GetTemplateHistories_TemplateHistories {
	if t == nil {
		t = &GetTemplateHistories{}
	}
	return &t.TemplateHistories
}

type CreateTFASetting struct {
	CreateTFASetting CreateTFASetting_CreateTFASetting "json:\"createTFASetting\" graphql:\"createTFASetting\""
}

func (t *CreateTFASetting) GetCreateTFASetting() *CreateTFASetting_CreateTFASetting {
	if t == nil {
		t = &CreateTFASetting{}
	}
	return &t.CreateTFASetting
}

type GetAllTFASettings struct {
	TfaSettings GetAllTFASettings_TfaSettings "json:\"tfaSettings\" graphql:\"tfaSettings\""
}

func (t *GetAllTFASettings) GetTfaSettings() *GetAllTFASettings_TfaSettings {
	if t == nil {
		t = &GetAllTFASettings{}
	}
	return &t.TfaSettings
}

type GetTFASetting struct {
	TfaSetting GetTFASetting_TfaSetting "json:\"tfaSetting\" graphql:\"tfaSetting\""
}

func (t *GetTFASetting) GetTfaSetting() *GetTFASetting_TfaSetting {
	if t == nil {
		t = &GetTFASetting{}
	}
	return &t.TfaSetting
}

type UpdateTFASetting struct {
	UpdateTFASetting UpdateTFASetting_UpdateTFASetting "json:\"updateTFASetting\" graphql:\"updateTFASetting\""
}

func (t *UpdateTFASetting) GetUpdateTFASetting() *UpdateTFASetting_UpdateTFASetting {
	if t == nil {
		t = &UpdateTFASetting{}
	}
	return &t.UpdateTFASetting
}

type CreateUser struct {
	CreateUser CreateUser_CreateUser "json:\"createUser\" graphql:\"createUser\""
}

func (t *CreateUser) GetCreateUser() *CreateUser_CreateUser {
	if t == nil {
		t = &CreateUser{}
	}
	return &t.CreateUser
}

type DeleteUser struct {
	DeleteUser DeleteUser_DeleteUser "json:\"deleteUser\" graphql:\"deleteUser\""
}

func (t *DeleteUser) GetDeleteUser() *DeleteUser_DeleteUser {
	if t == nil {
		t = &DeleteUser{}
	}
	return &t.DeleteUser
}

type GetAllUsers struct {
	Users GetAllUsers_Users "json:\"users\" graphql:\"users\""
}

func (t *GetAllUsers) GetUsers() *GetAllUsers_Users {
	if t == nil {
		t = &GetAllUsers{}
	}
	return &t.Users
}

type GetUserByID struct {
	User GetUserByID_User "json:\"user\" graphql:\"user\""
}

func (t *GetUserByID) GetUser() *GetUserByID_User {
	if t == nil {
		t = &GetUserByID{}
	}
	return &t.User
}

type GetUserByIDWithOrgs struct {
	User GetUserByIDWithOrgs_User "json:\"user\" graphql:\"user\""
}

func (t *GetUserByIDWithOrgs) GetUser() *GetUserByIDWithOrgs_User {
	if t == nil {
		t = &GetUserByIDWithOrgs{}
	}
	return &t.User
}

type UpdateUser struct {
	UpdateUser UpdateUser_UpdateUser "json:\"updateUser\" graphql:\"updateUser\""
}

func (t *UpdateUser) GetUpdateUser() *UpdateUser_UpdateUser {
	if t == nil {
		t = &UpdateUser{}
	}
	return &t.UpdateUser
}

type GetAllUserHistories struct {
	UserHistories GetAllUserHistories_UserHistories "json:\"userHistories\" graphql:\"userHistories\""
}

func (t *GetAllUserHistories) GetUserHistories() *GetAllUserHistories_UserHistories {
	if t == nil {
		t = &GetAllUserHistories{}
	}
	return &t.UserHistories
}

type GetUserHistories struct {
	UserHistories GetUserHistories_UserHistories "json:\"userHistories\" graphql:\"userHistories\""
}

func (t *GetUserHistories) GetUserHistories() *GetUserHistories_UserHistories {
	if t == nil {
		t = &GetUserHistories{}
	}
	return &t.UserHistories
}

type GetAllUserSettings struct {
	UserSettings GetAllUserSettings_UserSettings "json:\"userSettings\" graphql:\"userSettings\""
}

func (t *GetAllUserSettings) GetUserSettings() *GetAllUserSettings_UserSettings {
	if t == nil {
		t = &GetAllUserSettings{}
	}
	return &t.UserSettings
}

type GetUserSettingByID struct {
	UserSetting GetUserSettingByID_UserSetting "json:\"userSetting\" graphql:\"userSetting\""
}

func (t *GetUserSettingByID) GetUserSetting() *GetUserSettingByID_UserSetting {
	if t == nil {
		t = &GetUserSettingByID{}
	}
	return &t.UserSetting
}

type GetUserSettings struct {
	UserSettings GetUserSettings_UserSettings "json:\"userSettings\" graphql:\"userSettings\""
}

func (t *GetUserSettings) GetUserSettings() *GetUserSettings_UserSettings {
	if t == nil {
		t = &GetUserSettings{}
	}
	return &t.UserSettings
}

type UpdateUserSetting struct {
	UpdateUserSetting UpdateUserSetting_UpdateUserSetting "json:\"updateUserSetting\" graphql:\"updateUserSetting\""
}

func (t *UpdateUserSetting) GetUpdateUserSetting() *UpdateUserSetting_UpdateUserSetting {
	if t == nil {
		t = &UpdateUserSetting{}
	}
	return &t.UpdateUserSetting
}

type GetAllUserSettingHistories struct {
	UserSettingHistories GetAllUserSettingHistories_UserSettingHistories "json:\"userSettingHistories\" graphql:\"userSettingHistories\""
}

func (t *GetAllUserSettingHistories) GetUserSettingHistories() *GetAllUserSettingHistories_UserSettingHistories {
	if t == nil {
		t = &GetAllUserSettingHistories{}
	}
	return &t.UserSettingHistories
}

type GetUserSettingHistories struct {
	UserSettingHistories GetUserSettingHistories_UserSettingHistories "json:\"userSettingHistories\" graphql:\"userSettingHistories\""
}

func (t *GetUserSettingHistories) GetUserSettingHistories() *GetUserSettingHistories_UserSettingHistories {
	if t == nil {
		t = &GetUserSettingHistories{}
	}
	return &t.UserSettingHistories
}

type GetWebhookByID struct {
	Webhook GetWebhookByID_Webhook "json:\"webhook\" graphql:\"webhook\""
}

func (t *GetWebhookByID) GetWebhook() *GetWebhookByID_Webhook {
	if t == nil {
		t = &GetWebhookByID{}
	}
	return &t.Webhook
}

type GetAllWebhooks struct {
	Webhooks GetAllWebhooks_Webhooks "json:\"webhooks\" graphql:\"webhooks\""
}

func (t *GetAllWebhooks) GetWebhooks() *GetAllWebhooks_Webhooks {
	if t == nil {
		t = &GetAllWebhooks{}
	}
	return &t.Webhooks
}

type CreateWebhook struct {
	CreateWebhook CreateWebhook_CreateWebhook "json:\"createWebhook\" graphql:\"createWebhook\""
}

func (t *CreateWebhook) GetCreateWebhook() *CreateWebhook_CreateWebhook {
	if t == nil {
		t = &CreateWebhook{}
	}
	return &t.CreateWebhook
}

type CreateBulkWebhook struct {
	CreateBulkWebhook CreateBulkWebhook_CreateBulkWebhook "json:\"createBulkWebhook\" graphql:\"createBulkWebhook\""
}

func (t *CreateBulkWebhook) GetCreateBulkWebhook() *CreateBulkWebhook_CreateBulkWebhook {
	if t == nil {
		t = &CreateBulkWebhook{}
	}
	return &t.CreateBulkWebhook
}

type CreateBulkCSVWebhook struct {
	CreateBulkCSVWebhook CreateBulkCSVWebhook_CreateBulkCSVWebhook "json:\"createBulkCSVWebhook\" graphql:\"createBulkCSVWebhook\""
}

func (t *CreateBulkCSVWebhook) GetCreateBulkCSVWebhook() *CreateBulkCSVWebhook_CreateBulkCSVWebhook {
	if t == nil {
		t = &CreateBulkCSVWebhook{}
	}
	return &t.CreateBulkCSVWebhook
}

type UpdateWebhook struct {
	UpdateWebhook UpdateWebhook_UpdateWebhook "json:\"updateWebhook\" graphql:\"updateWebhook\""
}

func (t *UpdateWebhook) GetUpdateWebhook() *UpdateWebhook_UpdateWebhook {
	if t == nil {
		t = &UpdateWebhook{}
	}
	return &t.UpdateWebhook
}

type DeleteWebhook struct {
	DeleteWebhook DeleteWebhook_DeleteWebhook "json:\"deleteWebhook\" graphql:\"deleteWebhook\""
}

func (t *DeleteWebhook) GetDeleteWebhook() *DeleteWebhook_DeleteWebhook {
	if t == nil {
		t = &DeleteWebhook{}
	}
	return &t.DeleteWebhook
}

type GetAllWebhookHistories struct {
	WebhookHistories GetAllWebhookHistories_WebhookHistories "json:\"webhookHistories\" graphql:\"webhookHistories\""
}

func (t *GetAllWebhookHistories) GetWebhookHistories() *GetAllWebhookHistories_WebhookHistories {
	if t == nil {
		t = &GetAllWebhookHistories{}
	}
	return &t.WebhookHistories
}

type GetWebhookHistories struct {
	WebhookHistories GetWebhookHistories_WebhookHistories "json:\"webhookHistories\" graphql:\"webhookHistories\""
}

func (t *GetWebhookHistories) GetWebhookHistories() *GetWebhookHistories_WebhookHistories {
	if t == nil {
		t = &GetWebhookHistories{}
	}
	return &t.WebhookHistories
}

const CreateBulkCSVActionPlanDocument = `mutation CreateBulkCSVActionPlan ($input: Upload!) {
	createBulkCSVActionPlan(input: $input) {
		actionPlans {
			createdAt
			createdBy
			description
			details
			dueDate
			id
			name
			priority
			source
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVActionPlan(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVActionPlan, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVActionPlan
	if err := c.Client.Post(ctx, "CreateBulkCSVActionPlan", CreateBulkCSVActionPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkActionPlanDocument = `mutation CreateBulkActionPlan ($input: [CreateActionPlanInput!]) {
	createBulkActionPlan(input: $input) {
		actionPlans {
			createdAt
			createdBy
			description
			details
			dueDate
			id
			name
			priority
			source
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkActionPlan(ctx context.Context, input []*CreateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkActionPlan, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkActionPlan
	if err := c.Client.Post(ctx, "CreateBulkActionPlan", CreateBulkActionPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateActionPlanDocument = `mutation CreateActionPlan ($input: CreateActionPlanInput!) {
	createActionPlan(input: $input) {
		actionPlan {
			createdAt
			createdBy
			description
			details
			dueDate
			id
			name
			priority
			source
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateActionPlan(ctx context.Context, input CreateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*CreateActionPlan, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateActionPlan
	if err := c.Client.Post(ctx, "CreateActionPlan", CreateActionPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteActionPlanDocument = `mutation DeleteActionPlan ($deleteActionPlanId: ID!) {
	deleteActionPlan(id: $deleteActionPlanId) {
		deletedID
	}
}
`

func (c *Client) DeleteActionPlan(ctx context.Context, deleteActionPlanID string, interceptors ...clientv2.RequestInterceptor) (*DeleteActionPlan, error) {
	vars := map[string]any{
		"deleteActionPlanId": deleteActionPlanID,
	}

	var res DeleteActionPlan
	if err := c.Client.Post(ctx, "DeleteActionPlan", DeleteActionPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllActionPlansDocument = `query GetAllActionPlans {
	actionPlans {
		edges {
			node {
				createdAt
				createdBy
				description
				details
				dueDate
				id
				name
				priority
				source
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllActionPlans(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllActionPlans, error) {
	vars := map[string]any{}

	var res GetAllActionPlans
	if err := c.Client.Post(ctx, "GetAllActionPlans", GetAllActionPlansDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetActionPlanByIDDocument = `query GetActionPlanByID ($actionPlanId: ID!) {
	actionPlan(id: $actionPlanId) {
		createdAt
		createdBy
		description
		details
		dueDate
		id
		name
		priority
		source
		status
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetActionPlanByID(ctx context.Context, actionPlanID string, interceptors ...clientv2.RequestInterceptor) (*GetActionPlanByID, error) {
	vars := map[string]any{
		"actionPlanId": actionPlanID,
	}

	var res GetActionPlanByID
	if err := c.Client.Post(ctx, "GetActionPlanByID", GetActionPlanByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetActionPlansDocument = `query GetActionPlans ($where: ActionPlanWhereInput) {
	actionPlans(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				details
				dueDate
				id
				name
				priority
				source
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetActionPlans(ctx context.Context, where *ActionPlanWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetActionPlans, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetActionPlans
	if err := c.Client.Post(ctx, "GetActionPlans", GetActionPlansDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateActionPlanDocument = `mutation UpdateActionPlan ($updateActionPlanId: ID!, $input: UpdateActionPlanInput!) {
	updateActionPlan(id: $updateActionPlanId, input: $input) {
		actionPlan {
			createdAt
			createdBy
			description
			details
			dueDate
			id
			name
			priority
			source
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateActionPlan(ctx context.Context, updateActionPlanID string, input UpdateActionPlanInput, interceptors ...clientv2.RequestInterceptor) (*UpdateActionPlan, error) {
	vars := map[string]any{
		"updateActionPlanId": updateActionPlanID,
		"input":              input,
	}

	var res UpdateActionPlan
	if err := c.Client.Post(ctx, "UpdateActionPlan", UpdateActionPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllActionPlanHistoriesDocument = `query GetAllActionPlanHistories {
	actionPlanHistories {
		edges {
			node {
				createdAt
				createdBy
				description
				details
				dueDate
				historyTime
				id
				name
				operation
				priority
				ref
				source
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllActionPlanHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllActionPlanHistories, error) {
	vars := map[string]any{}

	var res GetAllActionPlanHistories
	if err := c.Client.Post(ctx, "GetAllActionPlanHistories", GetAllActionPlanHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetActionPlanHistoriesDocument = `query GetActionPlanHistories ($where: ActionPlanHistoryWhereInput) {
	actionPlanHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				details
				dueDate
				historyTime
				id
				name
				operation
				priority
				ref
				source
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetActionPlanHistories(ctx context.Context, where *ActionPlanHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetActionPlanHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetActionPlanHistories
	if err := c.Client.Post(ctx, "GetActionPlanHistories", GetActionPlanHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const AdminSearchDocument = `query AdminSearch ($query: String!) {
	adminSearch(query: $query) {
		nodes {
			... on APITokenSearchResult {
				apiTokens {
					deletedBy
					id
					tags
					ownerID
					name
					scopes
				}
			}
			... on ActionPlanSearchResult {
				actionPlans {
					deletedBy
					id
					tags
					name
					description
					status
					priority
					source
					details
				}
			}
			... on ContactSearchResult {
				contacts {
					id
					deletedBy
					tags
					ownerID
					fullName
					title
					company
					email
					phoneNumber
					address
				}
			}
			... on ControlSearchResult {
				controls {
					deletedBy
					id
					tags
					name
					description
					status
					controlType
					version
					controlNumber
					family
					class
					source
					satisfies
					mappedFrameworks
					details
				}
			}
			... on ControlObjectiveSearchResult {
				controlObjectives {
					deletedBy
					id
					tags
					name
					description
					status
					controlObjectiveType
					version
					controlNumber
					family
					class
					source
					mappedFrameworks
					details
				}
			}
			... on DocumentDataSearchResult {
				documentData {
					id
					tags
					deletedBy
					ownerID
					templateID
					data
				}
			}
			... on EntitlementSearchResult {
				entitlements {
					id
					tags
					deletedBy
					ownerID
					planID
					organizationID
					externalCustomerID
					externalSubscriptionID
				}
			}
			... on EntitlementPlanSearchResult {
				entitlementPlans {
					id
					deletedBy
					tags
					ownerID
					displayName
					name
					description
					version
					metadata
				}
			}
			... on EntitlementPlanFeatureSearchResult {
				entitlementPlanFeatures {
					id
					deletedBy
					tags
					ownerID
					metadata
					planID
					featureID
				}
			}
			... on EntitySearchResult {
				entities {
					id
					deletedBy
					tags
					ownerID
					name
					displayName
					description
					domains
					entityTypeID
					status
				}
			}
			... on EntityTypeSearchResult {
				entityTypes {
					id
					deletedBy
					tags
					ownerID
					name
				}
			}
			... on EventSearchResult {
				events {
					id
					tags
					eventID
					correlationID
					eventType
					metadata
				}
			}
			... on FeatureSearchResult {
				features {
					deletedBy
					id
					tags
					ownerID
					name
					displayName
					description
					metadata
				}
			}
			... on FileSearchResult {
				files {
					deletedBy
					id
					tags
					providedFileName
					providedFileExtension
					detectedMimeType
					md5Hash
					detectedContentType
					storeKey
					categoryType
					uri
					storageScheme
					storageVolume
					storagePath
				}
			}
			... on GroupSearchResult {
				groups {
					deletedBy
					id
					tags
					ownerID
					name
					displayName
				}
			}
			... on GroupSettingSearchResult {
				groupSettings {
					id
					tags
					deletedBy
					groupID
				}
			}
			... on IntegrationSearchResult {
				integrations {
					id
					tags
					deletedBy
					ownerID
					name
					kind
				}
			}
			... on InternalPolicySearchResult {
				internalPolicies {
					deletedBy
					id
					tags
					name
					description
					status
					policyType
					version
					purposeAndScope
					background
					details
				}
			}
			... on NarrativeSearchResult {
				narratives {
					deletedBy
					id
					tags
					name
					description
					satisfies
					details
				}
			}
			... on OauthProviderSearchResult {
				oauthProviders {
					id
					tags
					deletedBy
					ownerID
					name
					clientID
					clientSecret
					redirectURL
					scopes
					authURL
					tokenURL
					infoURL
				}
			}
			... on OhAuthTooTokenSearchResult {
				ohAuthTooTokens {
					id
					tags
					clientID
					scopes
					nonce
					claimsUserID
					claimsUsername
					claimsEmail
					claimsGroups
					claimsPreferredUsername
					connectorID
					connectorData
				}
			}
			... on OrganizationSearchResult {
				organizations {
					id
					tags
					deletedBy
					name
					displayName
					avatarRemoteURL
				}
			}
			... on OrganizationSettingSearchResult {
				organizationSettings {
					id
					tags
					deletedBy
					domains
					billingContact
					billingEmail
					billingPhone
					billingAddress
					taxIdentifier
					organizationID
				}
			}
			... on PersonalAccessTokenSearchResult {
				personalAccessTokens {
					deletedBy
					id
					tags
					name
					scopes
				}
			}
			... on ProcedureSearchResult {
				procedures {
					deletedBy
					id
					tags
					name
					description
					status
					procedureType
					version
					purposeAndScope
					background
					satisfies
					details
				}
			}
			... on ProgramSearchResult {
				programs {
					id
					deletedBy
					tags
					name
					description
					organizationID
				}
			}
			... on RiskSearchResult {
				risks {
					deletedBy
					id
					tags
					name
					description
					status
					riskType
					businessCosts
					mitigation
					satisfies
					details
				}
			}
			... on StandardSearchResult {
				standards {
					deletedBy
					id
					tags
					name
					description
					family
					status
					standardType
					version
					purposeAndScope
					background
					satisfies
					details
				}
			}
			... on SubcontrolSearchResult {
				subcontrols {
					deletedBy
					id
					tags
					name
					description
					status
					subcontrolType
					version
					subcontrolNumber
					family
					class
					source
					mappedFrameworks
					implementationEvidence
					implementationStatus
					implementationVerification
					details
				}
			}
			... on SubscriberSearchResult {
				subscribers {
					id
					tags
					deletedBy
					ownerID
					email
					phoneNumber
				}
			}
			... on TFASettingSearchResult {
				tFASettings {
					id
					deletedBy
					tags
					tfaSecret
					recoveryCodes
				}
			}
			... on TaskSearchResult {
				tasks {
					id
					deletedBy
					tags
					title
					description
					details
				}
			}
			... on TemplateSearchResult {
				templates {
					deletedBy
					id
					tags
					ownerID
					name
					description
					jsonconfig
					uischema
				}
			}
			... on UserSearchResult {
				users {
					deletedBy
					id
					tags
					email
					firstName
					lastName
					displayName
					avatarRemoteURL
					avatarLocalFile
					avatarLocalFileID
					sub
				}
			}
			... on UserSettingSearchResult {
				userSettings {
					id
					tags
					deletedBy
					userID
				}
			}
			... on WebhookSearchResult {
				webhooks {
					id
					tags
					deletedBy
					ownerID
					name
					destinationURL
					lastError
					lastResponse
				}
			}
		}
	}
}
`

func (c *Client) AdminSearch(ctx context.Context, query string, interceptors ...clientv2.RequestInterceptor) (*AdminSearch, error) {
	vars := map[string]any{
		"query": query,
	}

	var res AdminSearch
	if err := c.Client.Post(ctx, "AdminSearch", AdminSearchDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateAPITokenDocument = `mutation CreateAPIToken ($input: CreateAPITokenInput!) {
	createAPIToken(input: $input) {
		apiToken {
			id
			token
			scopes
			owner {
				id
			}
			createdAt
			updatedAt
			createdBy
			updatedBy
			name
			expiresAt
			description
			lastUsedAt
		}
	}
}
`

func (c *Client) CreateAPIToken(ctx context.Context, input CreateAPITokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateAPIToken, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateAPIToken
	if err := c.Client.Post(ctx, "CreateAPIToken", CreateAPITokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateAPITokenDocument = `mutation UpdateAPIToken ($updateAPITokenId: ID!, $input: UpdateAPITokenInput!) {
	updateAPIToken(id: $updateAPITokenId, input: $input) {
		apiToken {
			id
			token
			scopes
			owner {
				id
			}
			createdAt
			updatedAt
			createdBy
			updatedBy
			name
			expiresAt
			description
			lastUsedAt
		}
	}
}
`

func (c *Client) UpdateAPIToken(ctx context.Context, updateAPITokenID string, input UpdateAPITokenInput, interceptors ...clientv2.RequestInterceptor) (*UpdateAPIToken, error) {
	vars := map[string]any{
		"updateAPITokenId": updateAPITokenID,
		"input":            input,
	}

	var res UpdateAPIToken
	if err := c.Client.Post(ctx, "UpdateAPIToken", UpdateAPITokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllAPITokensDocument = `query GetAllAPITokens {
	apiTokens {
		edges {
			node {
				id
				token
				scopes
				owner {
					id
				}
				createdAt
				updatedAt
				createdBy
				updatedBy
				name
				expiresAt
				description
				lastUsedAt
			}
		}
	}
}
`

func (c *Client) GetAllAPITokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllAPITokens, error) {
	vars := map[string]any{}

	var res GetAllAPITokens
	if err := c.Client.Post(ctx, "GetAllAPITokens", GetAllAPITokensDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAPITokenByIDDocument = `query GetAPITokenByID ($apiTokenId: ID!) {
	apiToken(id: $apiTokenId) {
		id
		token
		scopes
		owner {
			id
		}
		createdAt
		updatedAt
		createdBy
		updatedBy
		name
		expiresAt
		description
		lastUsedAt
	}
}
`

func (c *Client) GetAPITokenByID(ctx context.Context, apiTokenID string, interceptors ...clientv2.RequestInterceptor) (*GetAPITokenByID, error) {
	vars := map[string]any{
		"apiTokenId": apiTokenID,
	}

	var res GetAPITokenByID
	if err := c.Client.Post(ctx, "GetAPITokenByID", GetAPITokenByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteAPITokenDocument = `mutation DeleteAPIToken ($deleteAPITokenId: ID!) {
	deleteAPIToken(id: $deleteAPITokenId) {
		deletedID
	}
}
`

func (c *Client) DeleteAPIToken(ctx context.Context, deleteAPITokenID string, interceptors ...clientv2.RequestInterceptor) (*DeleteAPIToken, error) {
	vars := map[string]any{
		"deleteAPITokenId": deleteAPITokenID,
	}

	var res DeleteAPIToken
	if err := c.Client.Post(ctx, "DeleteAPIToken", DeleteAPITokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkContactDocument = `mutation CreateBulkContact ($input: [CreateContactInput!]) {
	createBulkContact(input: $input) {
		contacts {
			address
			company
			createdAt
			createdBy
			email
			fullName
			id
			ownerID
			phoneNumber
			status
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkContact(ctx context.Context, input []*CreateContactInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkContact, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkContact
	if err := c.Client.Post(ctx, "CreateBulkContact", CreateBulkContactDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVContactDocument = `mutation CreateBulkCSVContact ($input: Upload!) {
	createBulkCSVContact(input: $input) {
		contacts {
			address
			company
			createdAt
			createdBy
			email
			fullName
			id
			ownerID
			phoneNumber
			status
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVContact(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVContact, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVContact
	if err := c.Client.Post(ctx, "CreateBulkCSVContact", CreateBulkCSVContactDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateContactDocument = `mutation CreateContact ($input: CreateContactInput!) {
	createContact(input: $input) {
		contact {
			address
			company
			createdAt
			createdBy
			email
			fullName
			id
			ownerID
			phoneNumber
			status
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateContact(ctx context.Context, input CreateContactInput, interceptors ...clientv2.RequestInterceptor) (*CreateContact, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateContact
	if err := c.Client.Post(ctx, "CreateContact", CreateContactDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteContactDocument = `mutation DeleteContact ($deleteContactId: ID!) {
	deleteContact(id: $deleteContactId) {
		deletedID
	}
}
`

func (c *Client) DeleteContact(ctx context.Context, deleteContactID string, interceptors ...clientv2.RequestInterceptor) (*DeleteContact, error) {
	vars := map[string]any{
		"deleteContactId": deleteContactID,
	}

	var res DeleteContact
	if err := c.Client.Post(ctx, "DeleteContact", DeleteContactDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllContactsDocument = `query GetAllContacts {
	contacts {
		edges {
			node {
				address
				company
				createdAt
				createdBy
				email
				fullName
				id
				ownerID
				phoneNumber
				status
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllContacts(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllContacts, error) {
	vars := map[string]any{}

	var res GetAllContacts
	if err := c.Client.Post(ctx, "GetAllContacts", GetAllContactsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetContactByIDDocument = `query GetContactByID ($contactId: ID!) {
	contact(id: $contactId) {
		address
		company
		createdAt
		createdBy
		email
		fullName
		id
		ownerID
		phoneNumber
		status
		tags
		title
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetContactByID(ctx context.Context, contactID string, interceptors ...clientv2.RequestInterceptor) (*GetContactByID, error) {
	vars := map[string]any{
		"contactId": contactID,
	}

	var res GetContactByID
	if err := c.Client.Post(ctx, "GetContactByID", GetContactByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetContactsDocument = `query GetContacts ($where: ContactWhereInput) {
	contacts(where: $where) {
		edges {
			node {
				address
				company
				createdAt
				createdBy
				email
				fullName
				id
				ownerID
				phoneNumber
				status
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetContacts(ctx context.Context, where *ContactWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetContacts, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetContacts
	if err := c.Client.Post(ctx, "GetContacts", GetContactsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateContactDocument = `mutation UpdateContact ($updateContactId: ID!, $input: UpdateContactInput!) {
	updateContact(id: $updateContactId, input: $input) {
		contact {
			address
			company
			createdAt
			createdBy
			email
			fullName
			id
			ownerID
			phoneNumber
			status
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateContact(ctx context.Context, updateContactID string, input UpdateContactInput, interceptors ...clientv2.RequestInterceptor) (*UpdateContact, error) {
	vars := map[string]any{
		"updateContactId": updateContactID,
		"input":           input,
	}

	var res UpdateContact
	if err := c.Client.Post(ctx, "UpdateContact", UpdateContactDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllContactHistoriesDocument = `query GetAllContactHistories {
	contactHistories {
		edges {
			node {
				address
				company
				createdAt
				createdBy
				email
				fullName
				historyTime
				id
				operation
				ownerID
				phoneNumber
				ref
				status
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllContactHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllContactHistories, error) {
	vars := map[string]any{}

	var res GetAllContactHistories
	if err := c.Client.Post(ctx, "GetAllContactHistories", GetAllContactHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetContactHistoriesDocument = `query GetContactHistories ($where: ContactHistoryWhereInput) {
	contactHistories(where: $where) {
		edges {
			node {
				address
				company
				createdAt
				createdBy
				email
				fullName
				historyTime
				id
				operation
				ownerID
				phoneNumber
				ref
				status
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetContactHistories(ctx context.Context, where *ContactHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetContactHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetContactHistories
	if err := c.Client.Post(ctx, "GetContactHistories", GetContactHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVControlDocument = `mutation CreateBulkCSVControl ($input: Upload!) {
	createBulkCSVControl(input: $input) {
		controls {
			class
			controlNumber
			controlType
			createdAt
			createdBy
			description
			details
			family
			id
			mappedFrameworks
			name
			satisfies
			source
			status
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) CreateBulkCSVControl(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVControl, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVControl
	if err := c.Client.Post(ctx, "CreateBulkCSVControl", CreateBulkCSVControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkControlDocument = `mutation CreateBulkControl ($input: [CreateControlInput!]) {
	createBulkControl(input: $input) {
		controls {
			class
			controlNumber
			controlType
			createdAt
			createdBy
			description
			details
			family
			id
			mappedFrameworks
			name
			satisfies
			source
			status
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) CreateBulkControl(ctx context.Context, input []*CreateControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkControl, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkControl
	if err := c.Client.Post(ctx, "CreateBulkControl", CreateBulkControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateControlDocument = `mutation CreateControl ($input: CreateControlInput!) {
	createControl(input: $input) {
		control {
			class
			controlNumber
			controlType
			createdAt
			createdBy
			description
			details
			family
			id
			mappedFrameworks
			name
			satisfies
			source
			status
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) CreateControl(ctx context.Context, input CreateControlInput, interceptors ...clientv2.RequestInterceptor) (*CreateControl, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateControl
	if err := c.Client.Post(ctx, "CreateControl", CreateControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteControlDocument = `mutation DeleteControl ($deleteControlId: ID!) {
	deleteControl(id: $deleteControlId) {
		deletedID
	}
}
`

func (c *Client) DeleteControl(ctx context.Context, deleteControlID string, interceptors ...clientv2.RequestInterceptor) (*DeleteControl, error) {
	vars := map[string]any{
		"deleteControlId": deleteControlID,
	}

	var res DeleteControl
	if err := c.Client.Post(ctx, "DeleteControl", DeleteControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllControlsDocument = `query GetAllControls {
	controls {
		edges {
			node {
				class
				controlNumber
				controlType
				createdAt
				createdBy
				description
				details
				family
				id
				mappedFrameworks
				name
				satisfies
				source
				status
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetAllControls(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControls, error) {
	vars := map[string]any{}

	var res GetAllControls
	if err := c.Client.Post(ctx, "GetAllControls", GetAllControlsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlByIDDocument = `query GetControlByID ($controlId: ID!) {
	control(id: $controlId) {
		class
		controlNumber
		controlType
		createdAt
		createdBy
		description
		details
		family
		id
		mappedFrameworks
		name
		satisfies
		source
		status
		tags
		updatedAt
		updatedBy
		version
	}
}
`

func (c *Client) GetControlByID(ctx context.Context, controlID string, interceptors ...clientv2.RequestInterceptor) (*GetControlByID, error) {
	vars := map[string]any{
		"controlId": controlID,
	}

	var res GetControlByID
	if err := c.Client.Post(ctx, "GetControlByID", GetControlByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlsDocument = `query GetControls ($where: ControlWhereInput) {
	controls(where: $where) {
		edges {
			node {
				class
				controlNumber
				controlType
				createdAt
				createdBy
				description
				details
				family
				id
				mappedFrameworks
				name
				satisfies
				source
				status
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetControls(ctx context.Context, where *ControlWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControls, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetControls
	if err := c.Client.Post(ctx, "GetControls", GetControlsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateControlDocument = `mutation UpdateControl ($updateControlId: ID!, $input: UpdateControlInput!) {
	updateControl(id: $updateControlId, input: $input) {
		control {
			class
			controlNumber
			controlType
			createdAt
			createdBy
			description
			details
			family
			id
			mappedFrameworks
			name
			satisfies
			source
			status
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) UpdateControl(ctx context.Context, updateControlID string, input UpdateControlInput, interceptors ...clientv2.RequestInterceptor) (*UpdateControl, error) {
	vars := map[string]any{
		"updateControlId": updateControlID,
		"input":           input,
	}

	var res UpdateControl
	if err := c.Client.Post(ctx, "UpdateControl", UpdateControlDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllControlHistoriesDocument = `query GetAllControlHistories {
	controlHistories {
		edges {
			node {
				class
				controlNumber
				controlType
				createdAt
				createdBy
				description
				details
				family
				historyTime
				id
				mappedFrameworks
				name
				operation
				ref
				satisfies
				source
				status
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetAllControlHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlHistories, error) {
	vars := map[string]any{}

	var res GetAllControlHistories
	if err := c.Client.Post(ctx, "GetAllControlHistories", GetAllControlHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlHistoriesDocument = `query GetControlHistories ($where: ControlHistoryWhereInput) {
	controlHistories(where: $where) {
		edges {
			node {
				class
				controlNumber
				controlType
				createdAt
				createdBy
				description
				details
				family
				historyTime
				id
				mappedFrameworks
				name
				operation
				ref
				satisfies
				source
				status
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetControlHistories(ctx context.Context, where *ControlHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetControlHistories
	if err := c.Client.Post(ctx, "GetControlHistories", GetControlHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVControlObjectiveDocument = `mutation CreateBulkCSVControlObjective ($input: Upload!) {
	createBulkCSVControlObjective(input: $input) {
		controlObjectives {
			class
			controlNumber
			controlObjectiveType
			createdAt
			createdBy
			description
			details
			family
			id
			mappedFrameworks
			name
			source
			status
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) CreateBulkCSVControlObjective(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVControlObjective, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVControlObjective
	if err := c.Client.Post(ctx, "CreateBulkCSVControlObjective", CreateBulkCSVControlObjectiveDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkControlObjectiveDocument = `mutation CreateBulkControlObjective ($input: [CreateControlObjectiveInput!]) {
	createBulkControlObjective(input: $input) {
		controlObjectives {
			class
			controlNumber
			controlObjectiveType
			createdAt
			createdBy
			description
			details
			family
			id
			mappedFrameworks
			name
			source
			status
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) CreateBulkControlObjective(ctx context.Context, input []*CreateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkControlObjective, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkControlObjective
	if err := c.Client.Post(ctx, "CreateBulkControlObjective", CreateBulkControlObjectiveDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateControlObjectiveDocument = `mutation CreateControlObjective ($input: CreateControlObjectiveInput!) {
	createControlObjective(input: $input) {
		controlObjective {
			class
			controlNumber
			controlObjectiveType
			createdAt
			createdBy
			description
			details
			family
			id
			mappedFrameworks
			name
			source
			status
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) CreateControlObjective(ctx context.Context, input CreateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*CreateControlObjective, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateControlObjective
	if err := c.Client.Post(ctx, "CreateControlObjective", CreateControlObjectiveDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteControlObjectiveDocument = `mutation DeleteControlObjective ($deleteControlObjectiveId: ID!) {
	deleteControlObjective(id: $deleteControlObjectiveId) {
		deletedID
	}
}
`

func (c *Client) DeleteControlObjective(ctx context.Context, deleteControlObjectiveID string, interceptors ...clientv2.RequestInterceptor) (*DeleteControlObjective, error) {
	vars := map[string]any{
		"deleteControlObjectiveId": deleteControlObjectiveID,
	}

	var res DeleteControlObjective
	if err := c.Client.Post(ctx, "DeleteControlObjective", DeleteControlObjectiveDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllControlObjectivesDocument = `query GetAllControlObjectives {
	controlObjectives {
		edges {
			node {
				class
				controlNumber
				controlObjectiveType
				createdAt
				createdBy
				description
				details
				family
				id
				mappedFrameworks
				name
				source
				status
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetAllControlObjectives(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlObjectives, error) {
	vars := map[string]any{}

	var res GetAllControlObjectives
	if err := c.Client.Post(ctx, "GetAllControlObjectives", GetAllControlObjectivesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlObjectiveByIDDocument = `query GetControlObjectiveByID ($controlObjectiveId: ID!) {
	controlObjective(id: $controlObjectiveId) {
		class
		controlNumber
		controlObjectiveType
		createdAt
		createdBy
		description
		details
		family
		id
		mappedFrameworks
		name
		source
		status
		tags
		updatedAt
		updatedBy
		version
	}
}
`

func (c *Client) GetControlObjectiveByID(ctx context.Context, controlObjectiveID string, interceptors ...clientv2.RequestInterceptor) (*GetControlObjectiveByID, error) {
	vars := map[string]any{
		"controlObjectiveId": controlObjectiveID,
	}

	var res GetControlObjectiveByID
	if err := c.Client.Post(ctx, "GetControlObjectiveByID", GetControlObjectiveByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlObjectivesDocument = `query GetControlObjectives ($where: ControlObjectiveWhereInput) {
	controlObjectives(where: $where) {
		edges {
			node {
				class
				controlNumber
				controlObjectiveType
				createdAt
				createdBy
				description
				details
				family
				id
				mappedFrameworks
				name
				source
				status
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetControlObjectives(ctx context.Context, where *ControlObjectiveWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlObjectives, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetControlObjectives
	if err := c.Client.Post(ctx, "GetControlObjectives", GetControlObjectivesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateControlObjectiveDocument = `mutation UpdateControlObjective ($updateControlObjectiveId: ID!, $input: UpdateControlObjectiveInput!) {
	updateControlObjective(id: $updateControlObjectiveId, input: $input) {
		controlObjective {
			class
			controlNumber
			controlObjectiveType
			createdAt
			createdBy
			description
			details
			family
			id
			mappedFrameworks
			name
			source
			status
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) UpdateControlObjective(ctx context.Context, updateControlObjectiveID string, input UpdateControlObjectiveInput, interceptors ...clientv2.RequestInterceptor) (*UpdateControlObjective, error) {
	vars := map[string]any{
		"updateControlObjectiveId": updateControlObjectiveID,
		"input":                    input,
	}

	var res UpdateControlObjective
	if err := c.Client.Post(ctx, "UpdateControlObjective", UpdateControlObjectiveDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllControlObjectiveHistoriesDocument = `query GetAllControlObjectiveHistories {
	controlObjectiveHistories {
		edges {
			node {
				class
				controlNumber
				controlObjectiveType
				createdAt
				createdBy
				description
				details
				family
				historyTime
				id
				mappedFrameworks
				name
				operation
				ref
				source
				status
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetAllControlObjectiveHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllControlObjectiveHistories, error) {
	vars := map[string]any{}

	var res GetAllControlObjectiveHistories
	if err := c.Client.Post(ctx, "GetAllControlObjectiveHistories", GetAllControlObjectiveHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetControlObjectiveHistoriesDocument = `query GetControlObjectiveHistories ($where: ControlObjectiveHistoryWhereInput) {
	controlObjectiveHistories(where: $where) {
		edges {
			node {
				class
				controlNumber
				controlObjectiveType
				createdAt
				createdBy
				description
				details
				family
				historyTime
				id
				mappedFrameworks
				name
				operation
				ref
				source
				status
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetControlObjectiveHistories(ctx context.Context, where *ControlObjectiveHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetControlObjectiveHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetControlObjectiveHistories
	if err := c.Client.Post(ctx, "GetControlObjectiveHistories", GetControlObjectiveHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateDocumentDataDocument = `mutation CreateDocumentData ($input: CreateDocumentDataInput!) {
	createDocumentData(input: $input) {
		documentData {
			id
			templateID
			data
			createdAt
			createdBy
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateDocumentData(ctx context.Context, input CreateDocumentDataInput, interceptors ...clientv2.RequestInterceptor) (*CreateDocumentData, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateDocumentData
	if err := c.Client.Post(ctx, "CreateDocumentData", CreateDocumentDataDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteDocumentDataDocument = `mutation DeleteDocumentData ($deleteDocumentDataId: ID!) {
	deleteDocumentData(id: $deleteDocumentDataId) {
		deletedID
	}
}
`

func (c *Client) DeleteDocumentData(ctx context.Context, deleteDocumentDataID string, interceptors ...clientv2.RequestInterceptor) (*DeleteDocumentData, error) {
	vars := map[string]any{
		"deleteDocumentDataId": deleteDocumentDataID,
	}

	var res DeleteDocumentData
	if err := c.Client.Post(ctx, "DeleteDocumentData", DeleteDocumentDataDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetDocumentDataByIDDocument = `query GetDocumentDataByID ($documentDataId: ID!) {
	documentData(id: $documentDataId) {
		id
		templateID
		data
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetDocumentDataByID(ctx context.Context, documentDataID string, interceptors ...clientv2.RequestInterceptor) (*GetDocumentDataByID, error) {
	vars := map[string]any{
		"documentDataId": documentDataID,
	}

	var res GetDocumentDataByID
	if err := c.Client.Post(ctx, "GetDocumentDataByID", GetDocumentDataByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateDocumentDataDocument = `mutation UpdateDocumentData ($updateDocumentDataId: ID!, $input: UpdateDocumentDataInput!) {
	updateDocumentData(id: $updateDocumentDataId, input: $input) {
		documentData {
			id
			templateID
			data
			createdAt
			createdBy
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateDocumentData(ctx context.Context, updateDocumentDataID string, input UpdateDocumentDataInput, interceptors ...clientv2.RequestInterceptor) (*UpdateDocumentData, error) {
	vars := map[string]any{
		"updateDocumentDataId": updateDocumentDataID,
		"input":                input,
	}

	var res UpdateDocumentData
	if err := c.Client.Post(ctx, "UpdateDocumentData", UpdateDocumentDataDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllDocumentDataHistoriesDocument = `query GetAllDocumentDataHistories {
	documentDataHistories {
		edges {
			node {
				createdAt
				createdBy
				data
				historyTime
				id
				operation
				ownerID
				ref
				tags
				templateID
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllDocumentDataHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllDocumentDataHistories, error) {
	vars := map[string]any{}

	var res GetAllDocumentDataHistories
	if err := c.Client.Post(ctx, "GetAllDocumentDataHistories", GetAllDocumentDataHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetDocumentDataHistoriesDocument = `query GetDocumentDataHistories ($where: DocumentDataHistoryWhereInput) {
	documentDataHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				data
				historyTime
				id
				operation
				ownerID
				ref
				tags
				templateID
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetDocumentDataHistories(ctx context.Context, where *DocumentDataHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetDocumentDataHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetDocumentDataHistories
	if err := c.Client.Post(ctx, "GetDocumentDataHistories", GetDocumentDataHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVEntitlementDocument = `mutation CreateBulkCSVEntitlement ($input: Upload!) {
	createBulkCSVEntitlement(input: $input) {
		entitlements {
			id
			plan {
				id
				name
			}
			expires
			expiresAt
			cancelled
			externalCustomerID
			externalSubscriptionID
			organization {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVEntitlement(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntitlement, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVEntitlement
	if err := c.Client.Post(ctx, "CreateBulkCSVEntitlement", CreateBulkCSVEntitlementDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkEntitlementDocument = `mutation CreateBulkEntitlement ($input: [CreateEntitlementInput!]) {
	createBulkEntitlement(input: $input) {
		entitlements {
			id
			plan {
				id
				name
			}
			organization {
				id
				name
			}
			expires
			expiresAt
			cancelled
			externalCustomerID
			externalSubscriptionID
		}
	}
}
`

func (c *Client) CreateBulkEntitlement(ctx context.Context, input []*CreateEntitlementInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntitlement, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkEntitlement
	if err := c.Client.Post(ctx, "CreateBulkEntitlement", CreateBulkEntitlementDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateEntitlementDocument = `mutation CreateEntitlement ($input: CreateEntitlementInput!) {
	createEntitlement(input: $input) {
		entitlement {
			id
			plan {
				id
				name
			}
			organization {
				id
				name
			}
			expires
			expiresAt
			cancelled
			externalCustomerID
			externalSubscriptionID
		}
	}
}
`

func (c *Client) CreateEntitlement(ctx context.Context, input CreateEntitlementInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntitlement, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateEntitlement
	if err := c.Client.Post(ctx, "CreateEntitlement", CreateEntitlementDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteEntitlementDocument = `mutation DeleteEntitlement ($deleteEntitlementId: ID!) {
	deleteEntitlement(id: $deleteEntitlementId) {
		deletedID
	}
}
`

func (c *Client) DeleteEntitlement(ctx context.Context, deleteEntitlementID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntitlement, error) {
	vars := map[string]any{
		"deleteEntitlementId": deleteEntitlementID,
	}

	var res DeleteEntitlement
	if err := c.Client.Post(ctx, "DeleteEntitlement", DeleteEntitlementDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEntitlementsDocument = `query GetAllEntitlements {
	entitlements {
		edges {
			node {
				id
				plan {
					id
					name
					features {
						metadata
						feature {
							id
							name
						}
					}
				}
				organization {
					id
					name
				}
				expires
				expiresAt
				cancelled
				externalCustomerID
				externalSubscriptionID
			}
		}
	}
}
`

func (c *Client) GetAllEntitlements(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntitlements, error) {
	vars := map[string]any{}

	var res GetAllEntitlements
	if err := c.Client.Post(ctx, "GetAllEntitlements", GetAllEntitlementsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntitlementByIDDocument = `query GetEntitlementByID ($entitlementId: ID!) {
	entitlement(id: $entitlementId) {
		id
		plan {
			id
			name
			features {
				metadata
				feature {
					id
					name
				}
			}
		}
		organization {
			id
			name
		}
		expires
		expiresAt
		cancelled
		externalCustomerID
		externalSubscriptionID
	}
}
`

func (c *Client) GetEntitlementByID(ctx context.Context, entitlementID string, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementByID, error) {
	vars := map[string]any{
		"entitlementId": entitlementID,
	}

	var res GetEntitlementByID
	if err := c.Client.Post(ctx, "GetEntitlementByID", GetEntitlementByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntitlementsDocument = `query GetEntitlements ($where: EntitlementWhereInput) {
	entitlements(where: $where) {
		edges {
			node {
				id
				plan {
					id
					name
					features {
						metadata
						feature {
							id
							name
						}
					}
				}
				organization {
					id
					name
				}
				expires
				expiresAt
				cancelled
				externalCustomerID
				externalSubscriptionID
			}
		}
	}
}
`

func (c *Client) GetEntitlements(ctx context.Context, where *EntitlementWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntitlements, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEntitlements
	if err := c.Client.Post(ctx, "GetEntitlements", GetEntitlementsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateEntitlementDocument = `mutation UpdateEntitlement ($updateEntitlementId: ID!, $input: UpdateEntitlementInput!) {
	updateEntitlement(id: $updateEntitlementId, input: $input) {
		entitlement {
			id
			plan {
				id
				name
			}
			expires
			expiresAt
			cancelled
			externalCustomerID
			externalSubscriptionID
		}
	}
}
`

func (c *Client) UpdateEntitlement(ctx context.Context, updateEntitlementID string, input UpdateEntitlementInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntitlement, error) {
	vars := map[string]any{
		"updateEntitlementId": updateEntitlementID,
		"input":               input,
	}

	var res UpdateEntitlement
	if err := c.Client.Post(ctx, "UpdateEntitlement", UpdateEntitlementDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEntitlementHistoriesDocument = `query GetAllEntitlementHistories {
	entitlementHistories {
		edges {
			node {
				cancelled
				createdAt
				createdBy
				expires
				expiresAt
				externalCustomerID
				externalSubscriptionID
				historyTime
				id
				operation
				organizationID
				ownerID
				planID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllEntitlementHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntitlementHistories, error) {
	vars := map[string]any{}

	var res GetAllEntitlementHistories
	if err := c.Client.Post(ctx, "GetAllEntitlementHistories", GetAllEntitlementHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntitlementHistoriesDocument = `query GetEntitlementHistories ($where: EntitlementHistoryWhereInput) {
	entitlementHistories(where: $where) {
		edges {
			node {
				cancelled
				createdAt
				createdBy
				expires
				expiresAt
				externalCustomerID
				externalSubscriptionID
				historyTime
				id
				operation
				organizationID
				ownerID
				planID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetEntitlementHistories(ctx context.Context, where *EntitlementHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEntitlementHistories
	if err := c.Client.Post(ctx, "GetEntitlementHistories", GetEntitlementHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVEntitlementPlanDocument = `mutation CreateBulkCSVEntitlementPlan ($input: Upload!) {
	createBulkCSVEntitlementPlan(input: $input) {
		entitlementPlans {
			id
			name
			displayName
			metadata
			tags
			version
			description
		}
	}
}
`

func (c *Client) CreateBulkCSVEntitlementPlan(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntitlementPlan, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVEntitlementPlan
	if err := c.Client.Post(ctx, "CreateBulkCSVEntitlementPlan", CreateBulkCSVEntitlementPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkEntitlementPlanDocument = `mutation CreateBulkEntitlementPlan ($input: [CreateEntitlementPlanInput!]) {
	createBulkEntitlementPlan(input: $input) {
		entitlementPlans {
			id
			name
			displayName
			metadata
			tags
			version
			description
		}
	}
}
`

func (c *Client) CreateBulkEntitlementPlan(ctx context.Context, input []*CreateEntitlementPlanInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntitlementPlan, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkEntitlementPlan
	if err := c.Client.Post(ctx, "CreateBulkEntitlementPlan", CreateBulkEntitlementPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateEntitlementPlanDocument = `mutation CreateEntitlementPlan ($input: CreateEntitlementPlanInput!) {
	createEntitlementPlan(input: $input) {
		entitlementPlan {
			id
			name
			displayName
			metadata
			tags
			version
			description
		}
	}
}
`

func (c *Client) CreateEntitlementPlan(ctx context.Context, input CreateEntitlementPlanInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntitlementPlan, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateEntitlementPlan
	if err := c.Client.Post(ctx, "CreateEntitlementPlan", CreateEntitlementPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteEntitlementPlanDocument = `mutation DeleteEntitlementPlan ($deleteEntitlementPlanId: ID!) {
	deleteEntitlementPlan(id: $deleteEntitlementPlanId) {
		deletedID
	}
}
`

func (c *Client) DeleteEntitlementPlan(ctx context.Context, deleteEntitlementPlanID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntitlementPlan, error) {
	vars := map[string]any{
		"deleteEntitlementPlanId": deleteEntitlementPlanID,
	}

	var res DeleteEntitlementPlan
	if err := c.Client.Post(ctx, "DeleteEntitlementPlan", DeleteEntitlementPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEntitlementPlansDocument = `query GetAllEntitlementPlans {
	entitlementPlans {
		edges {
			node {
				id
				name
				displayName
				metadata
				tags
				version
				description
				features {
					feature {
						id
						metadata
						name
					}
					metadata
					tags
				}
			}
		}
	}
}
`

func (c *Client) GetAllEntitlementPlans(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntitlementPlans, error) {
	vars := map[string]any{}

	var res GetAllEntitlementPlans
	if err := c.Client.Post(ctx, "GetAllEntitlementPlans", GetAllEntitlementPlansDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntitlementPlanByIDDocument = `query GetEntitlementPlanByID ($entitlementPlanId: ID!) {
	entitlementPlan(id: $entitlementPlanId) {
		id
		name
		displayName
		metadata
		tags
		version
		description
		features {
			feature {
				id
				metadata
				name
			}
			metadata
			tags
		}
	}
}
`

func (c *Client) GetEntitlementPlanByID(ctx context.Context, entitlementPlanID string, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementPlanByID, error) {
	vars := map[string]any{
		"entitlementPlanId": entitlementPlanID,
	}

	var res GetEntitlementPlanByID
	if err := c.Client.Post(ctx, "GetEntitlementPlanByID", GetEntitlementPlanByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntitlementPlansDocument = `query GetEntitlementPlans ($where: EntitlementPlanWhereInput) {
	entitlementPlans(where: $where) {
		edges {
			node {
				id
				name
				displayName
				metadata
				tags
				version
				description
				features {
					feature {
						id
						metadata
						name
					}
					metadata
					tags
				}
			}
		}
	}
}
`

func (c *Client) GetEntitlementPlans(ctx context.Context, where *EntitlementPlanWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementPlans, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEntitlementPlans
	if err := c.Client.Post(ctx, "GetEntitlementPlans", GetEntitlementPlansDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateEntitlementPlanDocument = `mutation UpdateEntitlementPlan ($updateEntitlementPlanId: ID!, $input: UpdateEntitlementPlanInput!) {
	updateEntitlementPlan(id: $updateEntitlementPlanId, input: $input) {
		entitlementPlan {
			id
			name
			displayName
			metadata
			tags
			version
			description
		}
	}
}
`

func (c *Client) UpdateEntitlementPlan(ctx context.Context, updateEntitlementPlanID string, input UpdateEntitlementPlanInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntitlementPlan, error) {
	vars := map[string]any{
		"updateEntitlementPlanId": updateEntitlementPlanID,
		"input":                   input,
	}

	var res UpdateEntitlementPlan
	if err := c.Client.Post(ctx, "UpdateEntitlementPlan", UpdateEntitlementPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVEntitlementPlanFeatureDocument = `mutation CreateBulkCSVEntitlementPlanFeature ($input: Upload!) {
	createBulkCSVEntitlementPlanFeature(input: $input) {
		entitlementPlanFeatures {
			id
			metadata
			plan {
				id
				name
			}
			feature {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVEntitlementPlanFeature(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntitlementPlanFeature, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVEntitlementPlanFeature
	if err := c.Client.Post(ctx, "CreateBulkCSVEntitlementPlanFeature", CreateBulkCSVEntitlementPlanFeatureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkEntitlementPlanFeatureDocument = `mutation CreateBulkEntitlementPlanFeature ($input: [CreateEntitlementPlanFeatureInput!]) {
	createBulkEntitlementPlanFeature(input: $input) {
		entitlementPlanFeatures {
			id
			metadata
			plan {
				id
				name
			}
			feature {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateBulkEntitlementPlanFeature(ctx context.Context, input []*CreateEntitlementPlanFeatureInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntitlementPlanFeature, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkEntitlementPlanFeature
	if err := c.Client.Post(ctx, "CreateBulkEntitlementPlanFeature", CreateBulkEntitlementPlanFeatureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateEntitlementPlanFeatureDocument = `mutation CreateEntitlementPlanFeature ($input: CreateEntitlementPlanFeatureInput!) {
	createEntitlementPlanFeature(input: $input) {
		entitlementPlanFeature {
			id
			metadata
			plan {
				id
				name
			}
			feature {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateEntitlementPlanFeature(ctx context.Context, input CreateEntitlementPlanFeatureInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntitlementPlanFeature, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateEntitlementPlanFeature
	if err := c.Client.Post(ctx, "CreateEntitlementPlanFeature", CreateEntitlementPlanFeatureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteEntitlementPlanFeatureDocument = `mutation DeleteEntitlementPlanFeature ($deleteEntitlementPlanFeatureId: ID!) {
	deleteEntitlementPlanFeature(id: $deleteEntitlementPlanFeatureId) {
		deletedID
	}
}
`

func (c *Client) DeleteEntitlementPlanFeature(ctx context.Context, deleteEntitlementPlanFeatureID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntitlementPlanFeature, error) {
	vars := map[string]any{
		"deleteEntitlementPlanFeatureId": deleteEntitlementPlanFeatureID,
	}

	var res DeleteEntitlementPlanFeature
	if err := c.Client.Post(ctx, "DeleteEntitlementPlanFeature", DeleteEntitlementPlanFeatureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEntitlementPlanFeaturesDocument = `query GetAllEntitlementPlanFeatures {
	entitlementPlanFeatures {
		edges {
			node {
				id
				feature {
					id
					name
				}
				metadata
				plan {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetAllEntitlementPlanFeatures(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntitlementPlanFeatures, error) {
	vars := map[string]any{}

	var res GetAllEntitlementPlanFeatures
	if err := c.Client.Post(ctx, "GetAllEntitlementPlanFeatures", GetAllEntitlementPlanFeaturesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntitlementPlanFeatureByIDDocument = `query GetEntitlementPlanFeatureByID ($entitlementPlanFeatureId: ID!) {
	entitlementPlanFeature(id: $entitlementPlanFeatureId) {
		id
		metadata
		plan {
			id
			name
		}
		feature {
			id
			name
		}
	}
}
`

func (c *Client) GetEntitlementPlanFeatureByID(ctx context.Context, entitlementPlanFeatureID string, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementPlanFeatureByID, error) {
	vars := map[string]any{
		"entitlementPlanFeatureId": entitlementPlanFeatureID,
	}

	var res GetEntitlementPlanFeatureByID
	if err := c.Client.Post(ctx, "GetEntitlementPlanFeatureByID", GetEntitlementPlanFeatureByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntitlementPlanFeaturesDocument = `query GetEntitlementPlanFeatures ($where: EntitlementPlanFeatureWhereInput) {
	entitlementPlanFeatures(where: $where) {
		edges {
			node {
				id
				metadata
				plan {
					id
					name
				}
				feature {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetEntitlementPlanFeatures(ctx context.Context, where *EntitlementPlanFeatureWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementPlanFeatures, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEntitlementPlanFeatures
	if err := c.Client.Post(ctx, "GetEntitlementPlanFeatures", GetEntitlementPlanFeaturesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateEntitlementPlanFeatureDocument = `mutation UpdateEntitlementPlanFeature ($updateEntitlementPlanFeatureId: ID!, $input: UpdateEntitlementPlanFeatureInput!) {
	updateEntitlementPlanFeature(id: $updateEntitlementPlanFeatureId, input: $input) {
		entitlementPlanFeature {
			id
			metadata
			plan {
				id
				name
			}
			feature {
				id
				name
			}
		}
	}
}
`

func (c *Client) UpdateEntitlementPlanFeature(ctx context.Context, updateEntitlementPlanFeatureID string, input UpdateEntitlementPlanFeatureInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntitlementPlanFeature, error) {
	vars := map[string]any{
		"updateEntitlementPlanFeatureId": updateEntitlementPlanFeatureID,
		"input":                          input,
	}

	var res UpdateEntitlementPlanFeature
	if err := c.Client.Post(ctx, "UpdateEntitlementPlanFeature", UpdateEntitlementPlanFeatureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEntitlementPlanFeatureHistoriesDocument = `query GetAllEntitlementPlanFeatureHistories {
	entitlementPlanFeatureHistories {
		edges {
			node {
				createdAt
				createdBy
				featureID
				historyTime
				id
				metadata
				operation
				ownerID
				planID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllEntitlementPlanFeatureHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntitlementPlanFeatureHistories, error) {
	vars := map[string]any{}

	var res GetAllEntitlementPlanFeatureHistories
	if err := c.Client.Post(ctx, "GetAllEntitlementPlanFeatureHistories", GetAllEntitlementPlanFeatureHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntitlementPlanFeatureHistoriesDocument = `query GetEntitlementPlanFeatureHistories ($where: EntitlementPlanFeatureHistoryWhereInput) {
	entitlementPlanFeatureHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				featureID
				historyTime
				id
				metadata
				operation
				ownerID
				planID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetEntitlementPlanFeatureHistories(ctx context.Context, where *EntitlementPlanFeatureHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementPlanFeatureHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEntitlementPlanFeatureHistories
	if err := c.Client.Post(ctx, "GetEntitlementPlanFeatureHistories", GetEntitlementPlanFeatureHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEntitlementPlanHistoriesDocument = `query GetAllEntitlementPlanHistories {
	entitlementPlanHistories {
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				historyTime
				id
				metadata
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetAllEntitlementPlanHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntitlementPlanHistories, error) {
	vars := map[string]any{}

	var res GetAllEntitlementPlanHistories
	if err := c.Client.Post(ctx, "GetAllEntitlementPlanHistories", GetAllEntitlementPlanHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntitlementPlanHistoriesDocument = `query GetEntitlementPlanHistories ($where: EntitlementPlanHistoryWhereInput) {
	entitlementPlanHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				historyTime
				id
				metadata
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetEntitlementPlanHistories(ctx context.Context, where *EntitlementPlanHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementPlanHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEntitlementPlanHistories
	if err := c.Client.Post(ctx, "GetEntitlementPlanHistories", GetEntitlementPlanHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVEntityDocument = `mutation CreateBulkCSVEntity ($input: Upload!) {
	createBulkCSVEntity(input: $input) {
		entities {
			createdAt
			createdBy
			description
			displayName
			status
			domains
			notes {
				text
				updatedAt
				updatedBy
			}
			entityType {
				name
			}
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVEntity(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntity, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVEntity
	if err := c.Client.Post(ctx, "CreateBulkCSVEntity", CreateBulkCSVEntityDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkEntityDocument = `mutation CreateBulkEntity ($input: [CreateEntityInput!]) {
	createBulkEntity(input: $input) {
		entities {
			createdAt
			createdBy
			description
			displayName
			status
			domains
			notes {
				text
				updatedAt
				updatedBy
			}
			entityType {
				name
			}
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkEntity(ctx context.Context, input []*CreateEntityInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntity, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkEntity
	if err := c.Client.Post(ctx, "CreateBulkEntity", CreateBulkEntityDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateEntityDocument = `mutation CreateEntity ($input: CreateEntityInput!) {
	createEntity(input: $input) {
		entity {
			createdAt
			createdBy
			description
			displayName
			status
			domains
			notes {
				text
				updatedAt
				updatedBy
			}
			entityType {
				name
			}
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateEntity(ctx context.Context, input CreateEntityInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntity, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateEntity
	if err := c.Client.Post(ctx, "CreateEntity", CreateEntityDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteEntityDocument = `mutation DeleteEntity ($deleteEntityId: ID!) {
	deleteEntity(id: $deleteEntityId) {
		deletedID
	}
}
`

func (c *Client) DeleteEntity(ctx context.Context, deleteEntityID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntity, error) {
	vars := map[string]any{
		"deleteEntityId": deleteEntityID,
	}

	var res DeleteEntity
	if err := c.Client.Post(ctx, "DeleteEntity", DeleteEntityDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEntitiesDocument = `query GetAllEntities {
	entities {
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				status
				domains
				notes {
					text
					updatedAt
					updatedBy
				}
				entityType {
					name
				}
				id
				name
				ownerID
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllEntities(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntities, error) {
	vars := map[string]any{}

	var res GetAllEntities
	if err := c.Client.Post(ctx, "GetAllEntities", GetAllEntitiesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntitiesDocument = `query GetEntities ($where: EntityWhereInput) {
	entities(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				status
				domains
				notes {
					text
					updatedAt
					updatedBy
				}
				entityType {
					name
				}
				id
				name
				ownerID
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetEntities(ctx context.Context, where *EntityWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntities, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEntities
	if err := c.Client.Post(ctx, "GetEntities", GetEntitiesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntityByIDDocument = `query GetEntityByID ($entityId: ID!) {
	entity(id: $entityId) {
		createdAt
		createdBy
		description
		displayName
		status
		domains
		notes {
			text
			updatedAt
			updatedBy
		}
		entityType {
			name
		}
		id
		name
		ownerID
		contacts {
			id
			fullName
			email
			title
			company
			address
			phoneNumber
		}
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetEntityByID(ctx context.Context, entityID string, interceptors ...clientv2.RequestInterceptor) (*GetEntityByID, error) {
	vars := map[string]any{
		"entityId": entityID,
	}

	var res GetEntityByID
	if err := c.Client.Post(ctx, "GetEntityByID", GetEntityByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateEntityDocument = `mutation UpdateEntity ($updateEntityId: ID!, $input: UpdateEntityInput!) {
	updateEntity(id: $updateEntityId, input: $input) {
		entity {
			createdAt
			createdBy
			description
			displayName
			status
			domains
			notes {
				text
				updatedAt
				updatedBy
			}
			entityType {
				name
			}
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateEntity(ctx context.Context, updateEntityID string, input UpdateEntityInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntity, error) {
	vars := map[string]any{
		"updateEntityId": updateEntityID,
		"input":          input,
	}

	var res UpdateEntity
	if err := c.Client.Post(ctx, "UpdateEntity", UpdateEntityDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEntityHistoriesDocument = `query GetAllEntityHistories {
	entityHistories {
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				domains
				entityTypeID
				historyTime
				id
				name
				operation
				ownerID
				ref
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllEntityHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntityHistories, error) {
	vars := map[string]any{}

	var res GetAllEntityHistories
	if err := c.Client.Post(ctx, "GetAllEntityHistories", GetAllEntityHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntityHistoriesDocument = `query GetEntityHistories ($where: EntityHistoryWhereInput) {
	entityHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				domains
				entityTypeID
				historyTime
				id
				name
				operation
				ownerID
				ref
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetEntityHistories(ctx context.Context, where *EntityHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntityHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEntityHistories
	if err := c.Client.Post(ctx, "GetEntityHistories", GetEntityHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVEntityTypeDocument = `mutation CreateBulkCSVEntityType ($input: Upload!) {
	createBulkCSVEntityType(input: $input) {
		entityTypes {
			createdAt
			createdBy
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVEntityType(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntityType, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVEntityType
	if err := c.Client.Post(ctx, "CreateBulkCSVEntityType", CreateBulkCSVEntityTypeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkEntityTypeDocument = `mutation CreateBulkEntityType ($input: [CreateEntityTypeInput!]) {
	createBulkEntityType(input: $input) {
		entityTypes {
			createdAt
			createdBy
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkEntityType(ctx context.Context, input []*CreateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntityType, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkEntityType
	if err := c.Client.Post(ctx, "CreateBulkEntityType", CreateBulkEntityTypeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateEntityTypeDocument = `mutation CreateEntityType ($input: CreateEntityTypeInput!) {
	createEntityType(input: $input) {
		entityType {
			createdAt
			createdBy
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateEntityType(ctx context.Context, input CreateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntityType, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateEntityType
	if err := c.Client.Post(ctx, "CreateEntityType", CreateEntityTypeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteEntityTypeDocument = `mutation DeleteEntityType ($deleteEntityTypeId: ID!) {
	deleteEntityType(id: $deleteEntityTypeId) {
		deletedID
	}
}
`

func (c *Client) DeleteEntityType(ctx context.Context, deleteEntityTypeID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntityType, error) {
	vars := map[string]any{
		"deleteEntityTypeId": deleteEntityTypeID,
	}

	var res DeleteEntityType
	if err := c.Client.Post(ctx, "DeleteEntityType", DeleteEntityTypeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEntityTypesDocument = `query GetAllEntityTypes {
	entityTypes {
		edges {
			node {
				createdAt
				createdBy
				id
				name
				ownerID
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllEntityTypes(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntityTypes, error) {
	vars := map[string]any{}

	var res GetAllEntityTypes
	if err := c.Client.Post(ctx, "GetAllEntityTypes", GetAllEntityTypesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntityTypeByIDDocument = `query GetEntityTypeByID ($entityTypeId: ID!) {
	entityType(id: $entityTypeId) {
		createdAt
		createdBy
		id
		name
		ownerID
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetEntityTypeByID(ctx context.Context, entityTypeID string, interceptors ...clientv2.RequestInterceptor) (*GetEntityTypeByID, error) {
	vars := map[string]any{
		"entityTypeId": entityTypeID,
	}

	var res GetEntityTypeByID
	if err := c.Client.Post(ctx, "GetEntityTypeByID", GetEntityTypeByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntityTypesDocument = `query GetEntityTypes ($where: EntityTypeWhereInput) {
	entityTypes(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				id
				name
				ownerID
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetEntityTypes(ctx context.Context, where *EntityTypeWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntityTypes, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEntityTypes
	if err := c.Client.Post(ctx, "GetEntityTypes", GetEntityTypesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateEntityTypeDocument = `mutation UpdateEntityType ($updateEntityTypeId: ID!, $input: UpdateEntityTypeInput!) {
	updateEntityType(id: $updateEntityTypeId, input: $input) {
		entityType {
			createdAt
			createdBy
			id
			name
			ownerID
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateEntityType(ctx context.Context, updateEntityTypeID string, input UpdateEntityTypeInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntityType, error) {
	vars := map[string]any{
		"updateEntityTypeId": updateEntityTypeID,
		"input":              input,
	}

	var res UpdateEntityType
	if err := c.Client.Post(ctx, "UpdateEntityType", UpdateEntityTypeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEntityTypeHistoriesDocument = `query GetAllEntityTypeHistories {
	entityTypeHistories {
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllEntityTypeHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntityTypeHistories, error) {
	vars := map[string]any{}

	var res GetAllEntityTypeHistories
	if err := c.Client.Post(ctx, "GetAllEntityTypeHistories", GetAllEntityTypeHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntityTypeHistoriesDocument = `query GetEntityTypeHistories ($where: EntityTypeHistoryWhereInput) {
	entityTypeHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetEntityTypeHistories(ctx context.Context, where *EntityTypeHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntityTypeHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEntityTypeHistories
	if err := c.Client.Post(ctx, "GetEntityTypeHistories", GetEntityTypeHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVEventDocument = `mutation CreateBulkCSVEvent ($input: Upload!) {
	createBulkCSVEvent(input: $input) {
		events {
			id
			eventID
			correlationID
			eventType
			metadata
			user {
				id
			}
			group {
				id
			}
			integration {
				id
			}
			organization {
				id
			}
			invite {
				id
			}
			feature {
				id
			}
			personalAccessToken {
				id
			}
			oauth2token {
				id
			}
			hush {
				id
			}
			orgmembership {
				id
			}
			groupmembership {
				id
			}
			entitlement {
				id
			}
			webhook {
				id
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVEvent(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEvent, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVEvent
	if err := c.Client.Post(ctx, "CreateBulkCSVEvent", CreateBulkCSVEventDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkEventDocument = `mutation CreateBulkEvent ($input: [CreateEventInput!]) {
	createBulkEvent(input: $input) {
		events {
			id
			eventID
			correlationID
			eventType
			metadata
			user {
				id
			}
			group {
				id
			}
			integration {
				id
			}
			organization {
				id
			}
			invite {
				id
			}
			feature {
				id
			}
			personalAccessToken {
				id
			}
			oauth2token {
				id
			}
			hush {
				id
			}
			orgmembership {
				id
			}
			groupmembership {
				id
			}
			entitlement {
				id
			}
			webhook {
				id
			}
		}
	}
}
`

func (c *Client) CreateBulkEvent(ctx context.Context, input []*CreateEventInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEvent, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkEvent
	if err := c.Client.Post(ctx, "CreateBulkEvent", CreateBulkEventDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateEventDocument = `mutation CreateEvent ($input: CreateEventInput!) {
	createEvent(input: $input) {
		event {
			id
			eventID
			correlationID
			eventType
			metadata
			user {
				id
			}
			group {
				id
			}
			integration {
				id
			}
			organization {
				id
			}
			invite {
				id
			}
			feature {
				id
			}
			personalAccessToken {
				id
			}
			oauth2token {
				id
			}
			hush {
				id
			}
			orgmembership {
				id
			}
			groupmembership {
				id
			}
			entitlement {
				id
			}
			webhook {
				id
			}
		}
	}
}
`

func (c *Client) CreateEvent(ctx context.Context, input CreateEventInput, interceptors ...clientv2.RequestInterceptor) (*CreateEvent, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateEvent
	if err := c.Client.Post(ctx, "CreateEvent", CreateEventDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteEventDocument = `mutation DeleteEvent ($deleteEventId: ID!) {
	deleteEvent(id: $deleteEventId) {
		deletedID
	}
}
`

func (c *Client) DeleteEvent(ctx context.Context, deleteEventID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEvent, error) {
	vars := map[string]any{
		"deleteEventId": deleteEventID,
	}

	var res DeleteEvent
	if err := c.Client.Post(ctx, "DeleteEvent", DeleteEventDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEventsDocument = `query GetAllEvents {
	events {
		edges {
			node {
				id
				createdAt
				updatedAt
				createdBy
				updatedBy
				eventID
				correlationID
				eventType
				metadata
				user {
					id
				}
				group {
					id
				}
				integration {
					id
				}
				organization {
					id
				}
				invite {
					id
				}
				feature {
					id
				}
				personalAccessToken {
					id
				}
				oauth2token {
					id
				}
				hush {
					id
				}
				orgmembership {
					id
				}
				groupmembership {
					id
				}
				entitlement {
					id
				}
				webhook {
					id
				}
			}
		}
	}
}
`

func (c *Client) GetAllEvents(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEvents, error) {
	vars := map[string]any{}

	var res GetAllEvents
	if err := c.Client.Post(ctx, "GetAllEvents", GetAllEventsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEventByIDDocument = `query GetEventByID ($eventId: ID!) {
	event(id: $eventId) {
		id
		createdAt
		updatedAt
		createdBy
		updatedBy
		eventID
		correlationID
		eventType
		metadata
		user {
			id
		}
		group {
			id
		}
		integration {
			id
		}
		organization {
			id
		}
		invite {
			id
		}
		feature {
			id
		}
		personalAccessToken {
			id
		}
		oauth2token {
			id
		}
		hush {
			id
		}
		orgmembership {
			id
		}
		groupmembership {
			id
		}
		entitlement {
			id
		}
		webhook {
			id
		}
	}
}
`

func (c *Client) GetEventByID(ctx context.Context, eventID string, interceptors ...clientv2.RequestInterceptor) (*GetEventByID, error) {
	vars := map[string]any{
		"eventId": eventID,
	}

	var res GetEventByID
	if err := c.Client.Post(ctx, "GetEventByID", GetEventByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEventsDocument = `query GetEvents ($where: EventWhereInput) {
	events(where: $where) {
		edges {
			node {
				eventID
				id
				correlationID
				eventType
				metadata
			}
		}
	}
}
`

func (c *Client) GetEvents(ctx context.Context, where *EventWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEvents, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEvents
	if err := c.Client.Post(ctx, "GetEvents", GetEventsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateEventDocument = `mutation UpdateEvent ($updateEventId: ID!, $input: UpdateEventInput!) {
	updateEvent(id: $updateEventId, input: $input) {
		event {
			id
			createdAt
			updatedAt
			createdBy
			updatedBy
			eventID
			correlationID
			eventType
			metadata
			user {
				id
			}
			group {
				id
			}
			integration {
				id
			}
			organization {
				id
			}
			invite {
				id
			}
			feature {
				id
			}
			personalAccessToken {
				id
			}
			oauth2token {
				id
			}
			hush {
				id
			}
			orgmembership {
				id
			}
			groupmembership {
				id
			}
			entitlement {
				id
			}
			webhook {
				id
			}
		}
	}
}
`

func (c *Client) UpdateEvent(ctx context.Context, updateEventID string, input UpdateEventInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEvent, error) {
	vars := map[string]any{
		"updateEventId": updateEventID,
		"input":         input,
	}

	var res UpdateEvent
	if err := c.Client.Post(ctx, "UpdateEvent", UpdateEventDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEventHistoriesDocument = `query GetAllEventHistories {
	eventHistories {
		edges {
			node {
				correlationID
				createdAt
				createdBy
				eventID
				eventType
				historyTime
				id
				metadata
				operation
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllEventHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEventHistories, error) {
	vars := map[string]any{}

	var res GetAllEventHistories
	if err := c.Client.Post(ctx, "GetAllEventHistories", GetAllEventHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEventHistoriesDocument = `query GetEventHistories ($where: EventHistoryWhereInput) {
	eventHistories(where: $where) {
		edges {
			node {
				correlationID
				createdAt
				createdBy
				eventID
				eventType
				historyTime
				id
				metadata
				operation
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetEventHistories(ctx context.Context, where *EventHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEventHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEventHistories
	if err := c.Client.Post(ctx, "GetEventHistories", GetEventHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVFeatureDocument = `mutation CreateBulkCSVFeature ($input: Upload!) {
	createBulkCSVFeature(input: $input) {
		features {
			description
			enabled
			id
			name
			displayName
			tags
		}
	}
}
`

func (c *Client) CreateBulkCSVFeature(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVFeature, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVFeature
	if err := c.Client.Post(ctx, "CreateBulkCSVFeature", CreateBulkCSVFeatureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkFeatureDocument = `mutation CreateBulkFeature ($input: [CreateFeatureInput!]) {
	createBulkFeature(input: $input) {
		features {
			description
			enabled
			id
			name
			displayName
			tags
		}
	}
}
`

func (c *Client) CreateBulkFeature(ctx context.Context, input []*CreateFeatureInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkFeature, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkFeature
	if err := c.Client.Post(ctx, "CreateBulkFeature", CreateBulkFeatureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateFeatureDocument = `mutation CreateFeature ($input: CreateFeatureInput!) {
	createFeature(input: $input) {
		feature {
			description
			enabled
			id
			name
			displayName
			tags
		}
	}
}
`

func (c *Client) CreateFeature(ctx context.Context, input CreateFeatureInput, interceptors ...clientv2.RequestInterceptor) (*CreateFeature, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateFeature
	if err := c.Client.Post(ctx, "CreateFeature", CreateFeatureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteFeatureDocument = `mutation DeleteFeature ($deleteFeatureId: ID!) {
	deleteFeature(id: $deleteFeatureId) {
		deletedID
	}
}
`

func (c *Client) DeleteFeature(ctx context.Context, deleteFeatureID string, interceptors ...clientv2.RequestInterceptor) (*DeleteFeature, error) {
	vars := map[string]any{
		"deleteFeatureId": deleteFeatureID,
	}

	var res DeleteFeature
	if err := c.Client.Post(ctx, "DeleteFeature", DeleteFeatureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllFeaturesDocument = `query GetAllFeatures {
	features {
		edges {
			node {
				description
				enabled
				id
				name
				displayName
				tags
			}
		}
	}
}
`

func (c *Client) GetAllFeatures(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllFeatures, error) {
	vars := map[string]any{}

	var res GetAllFeatures
	if err := c.Client.Post(ctx, "GetAllFeatures", GetAllFeaturesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetFeatureByIDDocument = `query GetFeatureByID ($featureId: ID!) {
	feature(id: $featureId) {
		description
		enabled
		id
		name
		displayName
		tags
	}
}
`

func (c *Client) GetFeatureByID(ctx context.Context, featureID string, interceptors ...clientv2.RequestInterceptor) (*GetFeatureByID, error) {
	vars := map[string]any{
		"featureId": featureID,
	}

	var res GetFeatureByID
	if err := c.Client.Post(ctx, "GetFeatureByID", GetFeatureByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetFeaturesDocument = `query GetFeatures ($where: FeatureWhereInput) {
	features(where: $where) {
		edges {
			node {
				description
				enabled
				id
				name
				displayName
				tags
			}
		}
	}
}
`

func (c *Client) GetFeatures(ctx context.Context, where *FeatureWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetFeatures, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetFeatures
	if err := c.Client.Post(ctx, "GetFeatures", GetFeaturesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateFeatureDocument = `mutation UpdateFeature ($updateFeatureId: ID!, $input: UpdateFeatureInput!) {
	updateFeature(id: $updateFeatureId, input: $input) {
		feature {
			description
			enabled
			id
			name
			displayName
			tags
		}
	}
}
`

func (c *Client) UpdateFeature(ctx context.Context, updateFeatureID string, input UpdateFeatureInput, interceptors ...clientv2.RequestInterceptor) (*UpdateFeature, error) {
	vars := map[string]any{
		"updateFeatureId": updateFeatureID,
		"input":           input,
	}

	var res UpdateFeature
	if err := c.Client.Post(ctx, "UpdateFeature", UpdateFeatureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllFeatureHistoriesDocument = `query GetAllFeatureHistories {
	featureHistories {
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				enabled
				historyTime
				id
				metadata
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllFeatureHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllFeatureHistories, error) {
	vars := map[string]any{}

	var res GetAllFeatureHistories
	if err := c.Client.Post(ctx, "GetAllFeatureHistories", GetAllFeatureHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetFeatureHistoriesDocument = `query GetFeatureHistories ($where: FeatureHistoryWhereInput) {
	featureHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				enabled
				historyTime
				id
				metadata
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetFeatureHistories(ctx context.Context, where *FeatureHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetFeatureHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetFeatureHistories
	if err := c.Client.Post(ctx, "GetFeatureHistories", GetFeatureHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteFileDocument = `mutation DeleteFile ($deleteFileId: ID!) {
	deleteFile(id: $deleteFileId) {
		deletedID
	}
}
`

func (c *Client) DeleteFile(ctx context.Context, deleteFileID string, interceptors ...clientv2.RequestInterceptor) (*DeleteFile, error) {
	vars := map[string]any{
		"deleteFileId": deleteFileID,
	}

	var res DeleteFile
	if err := c.Client.Post(ctx, "DeleteFile", DeleteFileDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllFilesDocument = `query GetAllFiles {
	files {
		edges {
			node {
				categoryType
				createdAt
				createdBy
				detectedContentType
				detectedMimeType
				id
				md5Hash
				persistedFileSize
				providedFileExtension
				providedFileName
				providedFileSize
				storagePath
				storageScheme
				storageVolume
				storeKey
				tags
				updatedAt
				updatedBy
				uri
			}
		}
	}
}
`

func (c *Client) GetAllFiles(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllFiles, error) {
	vars := map[string]any{}

	var res GetAllFiles
	if err := c.Client.Post(ctx, "GetAllFiles", GetAllFilesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetFileByIDDocument = `query GetFileByID ($fileId: ID!) {
	file(id: $fileId) {
		categoryType
		createdAt
		createdBy
		detectedContentType
		detectedMimeType
		id
		md5Hash
		persistedFileSize
		providedFileExtension
		providedFileName
		providedFileSize
		storagePath
		storageScheme
		storageVolume
		storeKey
		tags
		updatedAt
		updatedBy
		uri
	}
}
`

func (c *Client) GetFileByID(ctx context.Context, fileID string, interceptors ...clientv2.RequestInterceptor) (*GetFileByID, error) {
	vars := map[string]any{
		"fileId": fileID,
	}

	var res GetFileByID
	if err := c.Client.Post(ctx, "GetFileByID", GetFileByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetFilesDocument = `query GetFiles ($where: FileWhereInput) {
	files(where: $where) {
		edges {
			node {
				categoryType
				createdAt
				createdBy
				detectedContentType
				detectedMimeType
				id
				md5Hash
				persistedFileSize
				providedFileExtension
				providedFileName
				providedFileSize
				storagePath
				storageScheme
				storageVolume
				storeKey
				tags
				updatedAt
				updatedBy
				uri
			}
		}
	}
}
`

func (c *Client) GetFiles(ctx context.Context, where *FileWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetFiles, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetFiles
	if err := c.Client.Post(ctx, "GetFiles", GetFilesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllFileHistoriesDocument = `query GetAllFileHistories {
	fileHistories {
		edges {
			node {
				categoryType
				createdAt
				createdBy
				detectedContentType
				detectedMimeType
				historyTime
				id
				md5Hash
				operation
				persistedFileSize
				providedFileExtension
				providedFileName
				providedFileSize
				ref
				storagePath
				storageScheme
				storageVolume
				storeKey
				tags
				updatedAt
				updatedBy
				uri
			}
		}
	}
}
`

func (c *Client) GetAllFileHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllFileHistories, error) {
	vars := map[string]any{}

	var res GetAllFileHistories
	if err := c.Client.Post(ctx, "GetAllFileHistories", GetAllFileHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetFileHistoriesDocument = `query GetFileHistories ($where: FileHistoryWhereInput) {
	fileHistories(where: $where) {
		edges {
			node {
				categoryType
				createdAt
				createdBy
				detectedContentType
				detectedMimeType
				historyTime
				id
				md5Hash
				operation
				persistedFileSize
				providedFileExtension
				providedFileName
				providedFileSize
				ref
				storagePath
				storageScheme
				storageVolume
				storeKey
				tags
				updatedAt
				updatedBy
				uri
			}
		}
	}
}
`

func (c *Client) GetFileHistories(ctx context.Context, where *FileHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetFileHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetFileHistories
	if err := c.Client.Post(ctx, "GetFileHistories", GetFileHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVGroupDocument = `mutation CreateBulkCSVGroup ($input: Upload!) {
	createBulkCSVGroup(input: $input) {
		groups {
			description
			displayName
			id
			logoURL
			name
			tags
			owner {
				id
				displayName
			}
			setting {
				id
				joinPolicy
				syncToGithub
				syncToSlack
				tags
				visibility
			}
			members {
				id
				role
				user {
					id
					firstName
					lastName
				}
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVGroup(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVGroup, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVGroup
	if err := c.Client.Post(ctx, "CreateBulkCSVGroup", CreateBulkCSVGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkGroupDocument = `mutation CreateBulkGroup ($input: [CreateGroupInput!]) {
	createBulkGroup(input: $input) {
		groups {
			description
			displayName
			id
			logoURL
			name
			tags
			owner {
				id
				displayName
			}
			setting {
				id
				joinPolicy
				syncToGithub
				syncToSlack
				tags
				visibility
			}
			members {
				id
				role
				user {
					id
					firstName
					lastName
				}
			}
		}
	}
}
`

func (c *Client) CreateBulkGroup(ctx context.Context, input []*CreateGroupInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkGroup, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkGroup
	if err := c.Client.Post(ctx, "CreateBulkGroup", CreateBulkGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateGroupDocument = `mutation CreateGroup ($input: CreateGroupInput!) {
	createGroup(input: $input) {
		group {
			description
			displayName
			id
			logoURL
			name
			tags
			owner {
				id
				displayName
			}
			setting {
				id
				joinPolicy
				syncToGithub
				syncToSlack
				tags
				visibility
			}
			members {
				id
				role
				user {
					id
					firstName
					lastName
				}
			}
		}
	}
}
`

func (c *Client) CreateGroup(ctx context.Context, input CreateGroupInput, interceptors ...clientv2.RequestInterceptor) (*CreateGroup, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateGroup
	if err := c.Client.Post(ctx, "CreateGroup", CreateGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteGroupDocument = `mutation DeleteGroup ($deleteGroupId: ID!) {
	deleteGroup(id: $deleteGroupId) {
		deletedID
	}
}
`

func (c *Client) DeleteGroup(ctx context.Context, deleteGroupID string, interceptors ...clientv2.RequestInterceptor) (*DeleteGroup, error) {
	vars := map[string]any{
		"deleteGroupId": deleteGroupID,
	}

	var res DeleteGroup
	if err := c.Client.Post(ctx, "DeleteGroup", DeleteGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllGroupsDocument = `query GetAllGroups {
	groups {
		edges {
			node {
				description
				displayName
				id
				logoURL
				name
				tags
				owner {
					id
					displayName
				}
				setting {
					createdAt
					createdBy
					id
					joinPolicy
					syncToGithub
					syncToSlack
					tags
					updatedAt
					updatedBy
					visibility
				}
				members {
					id
					role
					user {
						id
						firstName
						lastName
					}
				}
				createdAt
				createdBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllGroups(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroups, error) {
	vars := map[string]any{}

	var res GetAllGroups
	if err := c.Client.Post(ctx, "GetAllGroups", GetAllGroupsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupByIDDocument = `query GetGroupByID ($groupId: ID!) {
	group(id: $groupId) {
		description
		displayName
		id
		logoURL
		name
		tags
		owner {
			id
			displayName
		}
		setting {
			createdAt
			createdBy
			id
			joinPolicy
			syncToGithub
			syncToSlack
			tags
			updatedAt
			updatedBy
			visibility
		}
		members {
			id
			role
			user {
				id
				firstName
				lastName
			}
		}
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetGroupByID(ctx context.Context, groupID string, interceptors ...clientv2.RequestInterceptor) (*GetGroupByID, error) {
	vars := map[string]any{
		"groupId": groupID,
	}

	var res GetGroupByID
	if err := c.Client.Post(ctx, "GetGroupByID", GetGroupByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupsDocument = `query GetGroups ($where: GroupWhereInput) {
	groups(where: $where) {
		edges {
			node {
				description
				displayName
				id
				logoURL
				name
				tags
				owner {
					id
					displayName
				}
				setting {
					createdAt
					createdBy
					id
					joinPolicy
					syncToGithub
					syncToSlack
					tags
					updatedAt
					updatedBy
					visibility
				}
				members {
					id
					role
					user {
						id
						firstName
						lastName
					}
				}
				createdAt
				createdBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetGroups(ctx context.Context, where *GroupWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroups, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetGroups
	if err := c.Client.Post(ctx, "GetGroups", GetGroupsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateGroupDocument = `mutation UpdateGroup ($updateGroupId: ID!, $input: UpdateGroupInput!) {
	updateGroup(id: $updateGroupId, input: $input) {
		group {
			description
			displayName
			id
			logoURL
			name
			tags
			owner {
				id
				displayName
			}
			setting {
				createdAt
				createdBy
				id
				joinPolicy
				syncToGithub
				syncToSlack
				tags
				updatedAt
				updatedBy
				visibility
			}
			members {
				id
				role
				user {
					id
					firstName
					lastName
				}
			}
		}
	}
}
`

func (c *Client) UpdateGroup(ctx context.Context, updateGroupID string, input UpdateGroupInput, interceptors ...clientv2.RequestInterceptor) (*UpdateGroup, error) {
	vars := map[string]any{
		"updateGroupId": updateGroupID,
		"input":         input,
	}

	var res UpdateGroup
	if err := c.Client.Post(ctx, "UpdateGroup", UpdateGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllGroupHistoriesDocument = `query GetAllGroupHistories {
	groupHistories {
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				gravatarLogoURL
				historyTime
				id
				logoURL
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllGroupHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupHistories, error) {
	vars := map[string]any{}

	var res GetAllGroupHistories
	if err := c.Client.Post(ctx, "GetAllGroupHistories", GetAllGroupHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupHistoriesDocument = `query GetGroupHistories ($where: GroupHistoryWhereInput) {
	groupHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				gravatarLogoURL
				historyTime
				id
				logoURL
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetGroupHistories(ctx context.Context, where *GroupHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetGroupHistories
	if err := c.Client.Post(ctx, "GetGroupHistories", GetGroupHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const AddUserToGroupWithRoleDocument = `mutation AddUserToGroupWithRole ($input: CreateGroupMembershipInput!) {
	createGroupMembership(input: $input) {
		groupMembership {
			groupID
			group {
				id
				name
			}
			id
			role
			userID
			user {
				displayName
				email
				firstName
				id
				lastName
			}
		}
	}
}
`

func (c *Client) AddUserToGroupWithRole(ctx context.Context, input CreateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*AddUserToGroupWithRole, error) {
	vars := map[string]any{
		"input": input,
	}

	var res AddUserToGroupWithRole
	if err := c.Client.Post(ctx, "AddUserToGroupWithRole", AddUserToGroupWithRoleDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVGroupMembersDocument = `mutation CreateBulkCSVGroupMembers ($input: Upload!) {
	createBulkCSVGroupMembership(input: $input) {
		groupMemberships {
			groupID
			group {
				id
				name
			}
			id
			role
			userID
			user {
				displayName
				email
				firstName
				id
				lastName
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVGroupMembers(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVGroupMembers, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVGroupMembers
	if err := c.Client.Post(ctx, "CreateBulkCSVGroupMembers", CreateBulkCSVGroupMembersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkGroupMembersDocument = `mutation CreateBulkGroupMembers ($input: [CreateGroupMembershipInput!]) {
	createBulkGroupMembership(input: $input) {
		groupMemberships {
			groupID
			group {
				id
				name
			}
			id
			role
			userID
			user {
				displayName
				email
				firstName
				id
				lastName
			}
		}
	}
}
`

func (c *Client) CreateBulkGroupMembers(ctx context.Context, input []*CreateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkGroupMembers, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkGroupMembers
	if err := c.Client.Post(ctx, "CreateBulkGroupMembers", CreateBulkGroupMembersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupMembersByGroupIDDocument = `query GetGroupMembersByGroupID ($where: GroupMembershipWhereInput) {
	groupMemberships(where: $where) {
		edges {
			node {
				groupID
				group {
					id
					name
				}
				id
				role
				userID
				user {
					displayName
					email
					firstName
					id
					lastName
				}
			}
		}
	}
}
`

func (c *Client) GetGroupMembersByGroupID(ctx context.Context, where *GroupMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupMembersByGroupID, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetGroupMembersByGroupID
	if err := c.Client.Post(ctx, "GetGroupMembersByGroupID", GetGroupMembersByGroupIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const RemoveUserFromGroupDocument = `mutation RemoveUserFromGroup ($deleteGroupMembershipId: ID!) {
	deleteGroupMembership(id: $deleteGroupMembershipId) {
		deletedID
	}
}
`

func (c *Client) RemoveUserFromGroup(ctx context.Context, deleteGroupMembershipID string, interceptors ...clientv2.RequestInterceptor) (*RemoveUserFromGroup, error) {
	vars := map[string]any{
		"deleteGroupMembershipId": deleteGroupMembershipID,
	}

	var res RemoveUserFromGroup
	if err := c.Client.Post(ctx, "RemoveUserFromGroup", RemoveUserFromGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateUserRoleInGroupDocument = `mutation UpdateUserRoleInGroup ($updateGroupMemberId: ID!, $input: UpdateGroupMembershipInput!) {
	updateGroupMembership(id: $updateGroupMemberId, input: $input) {
		groupMembership {
			groupID
			group {
				id
				name
			}
			id
			role
			userID
			user {
				displayName
				email
				firstName
				id
				lastName
			}
		}
	}
}
`

func (c *Client) UpdateUserRoleInGroup(ctx context.Context, updateGroupMemberID string, input UpdateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUserRoleInGroup, error) {
	vars := map[string]any{
		"updateGroupMemberId": updateGroupMemberID,
		"input":               input,
	}

	var res UpdateUserRoleInGroup
	if err := c.Client.Post(ctx, "UpdateUserRoleInGroup", UpdateUserRoleInGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllGroupMembershipHistoriesDocument = `query GetAllGroupMembershipHistories {
	groupMembershipHistories {
		edges {
			node {
				createdAt
				createdBy
				groupID
				historyTime
				id
				operation
				ref
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetAllGroupMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupMembershipHistories, error) {
	vars := map[string]any{}

	var res GetAllGroupMembershipHistories
	if err := c.Client.Post(ctx, "GetAllGroupMembershipHistories", GetAllGroupMembershipHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupMembershipHistoriesDocument = `query GetGroupMembershipHistories ($where: GroupMembershipHistoryWhereInput) {
	groupMembershipHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				groupID
				historyTime
				id
				operation
				ref
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetGroupMembershipHistories(ctx context.Context, where *GroupMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupMembershipHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetGroupMembershipHistories
	if err := c.Client.Post(ctx, "GetGroupMembershipHistories", GetGroupMembershipHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllGroupSettingsDocument = `query GetAllGroupSettings {
	groupSettings {
		edges {
			node {
				id
				joinPolicy
				syncToGithub
				syncToSlack
				tags
				visibility
				group {
					id
					name
				}
				createdAt
				createdBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllGroupSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupSettings, error) {
	vars := map[string]any{}

	var res GetAllGroupSettings
	if err := c.Client.Post(ctx, "GetAllGroupSettings", GetAllGroupSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupSettingByIDDocument = `query GetGroupSettingByID ($groupSettingId: ID!) {
	groupSetting(id: $groupSettingId) {
		id
		joinPolicy
		syncToGithub
		syncToSlack
		tags
		visibility
		group {
			id
			name
		}
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetGroupSettingByID(ctx context.Context, groupSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetGroupSettingByID, error) {
	vars := map[string]any{
		"groupSettingId": groupSettingID,
	}

	var res GetGroupSettingByID
	if err := c.Client.Post(ctx, "GetGroupSettingByID", GetGroupSettingByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupSettingsDocument = `query GetGroupSettings ($where: GroupSettingWhereInput!) {
	groupSettings(where: $where) {
		edges {
			node {
				id
				joinPolicy
				syncToGithub
				syncToSlack
				tags
				visibility
				group {
					id
					name
				}
				createdAt
				createdBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetGroupSettings(ctx context.Context, where GroupSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupSettings, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetGroupSettings
	if err := c.Client.Post(ctx, "GetGroupSettings", GetGroupSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateGroupSettingDocument = `mutation UpdateGroupSetting ($updateGroupSettingId: ID!, $input: UpdateGroupSettingInput!) {
	updateGroupSetting(id: $updateGroupSettingId, input: $input) {
		groupSetting {
			id
			joinPolicy
			syncToGithub
			syncToSlack
			tags
			visibility
			group {
				id
				name
			}
			createdAt
			createdBy
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateGroupSetting(ctx context.Context, updateGroupSettingID string, input UpdateGroupSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateGroupSetting, error) {
	vars := map[string]any{
		"updateGroupSettingId": updateGroupSettingID,
		"input":                input,
	}

	var res UpdateGroupSetting
	if err := c.Client.Post(ctx, "UpdateGroupSetting", UpdateGroupSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllGroupSettingHistoriesDocument = `query GetAllGroupSettingHistories {
	groupSettingHistories {
		edges {
			node {
				createdAt
				createdBy
				groupID
				historyTime
				id
				joinPolicy
				operation
				ref
				syncToGithub
				syncToSlack
				tags
				updatedAt
				updatedBy
				visibility
			}
		}
	}
}
`

func (c *Client) GetAllGroupSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupSettingHistories, error) {
	vars := map[string]any{}

	var res GetAllGroupSettingHistories
	if err := c.Client.Post(ctx, "GetAllGroupSettingHistories", GetAllGroupSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupSettingHistoriesDocument = `query GetGroupSettingHistories ($where: GroupSettingHistoryWhereInput) {
	groupSettingHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				groupID
				historyTime
				id
				joinPolicy
				operation
				ref
				syncToGithub
				syncToSlack
				tags
				updatedAt
				updatedBy
				visibility
			}
		}
	}
}
`

func (c *Client) GetGroupSettingHistories(ctx context.Context, where *GroupSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupSettingHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetGroupSettingHistories
	if err := c.Client.Post(ctx, "GetGroupSettingHistories", GetGroupSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVHushDocument = `mutation CreateBulkCSVHush ($input: Upload!) {
	createBulkCSVHush(input: $input) {
		hushes {
			description
			id
			kind
			name
			secretName
			integrations {
				id
			}
			organization {
				id
			}
			events {
				id
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVHush(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVHush, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVHush
	if err := c.Client.Post(ctx, "CreateBulkCSVHush", CreateBulkCSVHushDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkHushDocument = `mutation CreateBulkHush ($input: [CreateHushInput!]) {
	createBulkHush(input: $input) {
		hushes {
			description
			id
			kind
			name
			secretName
			integrations {
				id
			}
			organization {
				id
			}
			events {
				id
			}
		}
	}
}
`

func (c *Client) CreateBulkHush(ctx context.Context, input []*CreateHushInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkHush, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkHush
	if err := c.Client.Post(ctx, "CreateBulkHush", CreateBulkHushDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateHushDocument = `mutation CreateHush ($input: CreateHushInput!) {
	createHush(input: $input) {
		hush {
			description
			id
			kind
			name
			secretName
			integrations {
				id
			}
			organization {
				id
			}
			events {
				id
			}
		}
	}
}
`

func (c *Client) CreateHush(ctx context.Context, input CreateHushInput, interceptors ...clientv2.RequestInterceptor) (*CreateHush, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateHush
	if err := c.Client.Post(ctx, "CreateHush", CreateHushDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllHushesDocument = `query GetAllHushes {
	hushes {
		edges {
			node {
				description
				id
				kind
				name
				secretName
				integrations {
					id
				}
				organization {
					id
				}
				events {
					id
				}
				createdAt
				updatedAt
				createdBy
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllHushes(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllHushes, error) {
	vars := map[string]any{}

	var res GetAllHushes
	if err := c.Client.Post(ctx, "GetAllHushes", GetAllHushesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetHushByIDDocument = `query GetHushByID ($hushId: ID!) {
	hush(id: $hushId) {
		description
		id
		kind
		name
		secretName
		integrations {
			id
		}
		organization {
			id
		}
		events {
			id
		}
		createdAt
		updatedAt
		createdBy
		updatedBy
	}
}
`

func (c *Client) GetHushByID(ctx context.Context, hushID string, interceptors ...clientv2.RequestInterceptor) (*GetHushByID, error) {
	vars := map[string]any{
		"hushId": hushID,
	}

	var res GetHushByID
	if err := c.Client.Post(ctx, "GetHushByID", GetHushByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetHushesDocument = `query GetHushes ($where: HushWhereInput) {
	hushes(where: $where) {
		edges {
			node {
				description
				id
				kind
				name
				secretName
				integrations {
					id
				}
				organization {
					id
				}
				events {
					id
				}
				createdAt
				updatedAt
				createdBy
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetHushes(ctx context.Context, where *HushWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetHushes, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetHushes
	if err := c.Client.Post(ctx, "GetHushes", GetHushesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateHushDocument = `mutation UpdateHush ($updateHushId: ID!, $input: UpdateHushInput!) {
	updateHush(id: $updateHushId, input: $input) {
		hush {
			description
			id
			kind
			name
			secretName
			integrations {
				id
			}
			organization {
				id
			}
			events {
				id
			}
		}
	}
}
`

func (c *Client) UpdateHush(ctx context.Context, updateHushID string, input UpdateHushInput, interceptors ...clientv2.RequestInterceptor) (*UpdateHush, error) {
	vars := map[string]any{
		"updateHushId": updateHushID,
		"input":        input,
	}

	var res UpdateHush
	if err := c.Client.Post(ctx, "UpdateHush", UpdateHushDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllHushHistoriesDocument = `query GetAllHushHistories {
	hushHistories {
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				kind
				name
				operation
				ref
				secretName
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllHushHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllHushHistories, error) {
	vars := map[string]any{}

	var res GetAllHushHistories
	if err := c.Client.Post(ctx, "GetAllHushHistories", GetAllHushHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetHushHistoriesDocument = `query GetHushHistories ($where: HushHistoryWhereInput) {
	hushHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				kind
				name
				operation
				ref
				secretName
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetHushHistories(ctx context.Context, where *HushHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetHushHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetHushHistories
	if err := c.Client.Post(ctx, "GetHushHistories", GetHushHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVIntegrationDocument = `mutation CreateBulkCSVIntegration ($input: Upload!) {
	createBulkCSVIntegration(input: $input) {
		integrations {
			description
			id
			kind
			name
			ownerID
			owner {
				id
			}
			secrets {
				id
			}
			oauth2tokens {
				id
			}
			events {
				id
			}
			webhooks {
				id
				destinationURL
				enabled
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVIntegration(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVIntegration, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVIntegration
	if err := c.Client.Post(ctx, "CreateBulkCSVIntegration", CreateBulkCSVIntegrationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkIntegrationDocument = `mutation CreateBulkIntegration ($input: [CreateIntegrationInput!]) {
	createBulkIntegration(input: $input) {
		integrations {
			description
			id
			kind
			name
			ownerID
			owner {
				id
			}
			secrets {
				id
			}
			oauth2tokens {
				id
			}
			events {
				id
			}
			webhooks {
				id
				destinationURL
				enabled
			}
		}
	}
}
`

func (c *Client) CreateBulkIntegration(ctx context.Context, input []*CreateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkIntegration, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkIntegration
	if err := c.Client.Post(ctx, "CreateBulkIntegration", CreateBulkIntegrationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateIntegrationDocument = `mutation CreateIntegration ($input: CreateIntegrationInput!) {
	createIntegration(input: $input) {
		integration {
			description
			id
			kind
			name
			ownerID
			owner {
				id
			}
			secrets {
				id
			}
			oauth2tokens {
				id
			}
			events {
				id
			}
			webhooks {
				id
				destinationURL
				enabled
			}
		}
	}
}
`

func (c *Client) CreateIntegration(ctx context.Context, input CreateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*CreateIntegration, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateIntegration
	if err := c.Client.Post(ctx, "CreateIntegration", CreateIntegrationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteIntegrationDocument = `mutation DeleteIntegration ($deleteIntegrationId: ID!) {
	deleteIntegration(id: $deleteIntegrationId) {
		deletedID
	}
}
`

func (c *Client) DeleteIntegration(ctx context.Context, deleteIntegrationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteIntegration, error) {
	vars := map[string]any{
		"deleteIntegrationId": deleteIntegrationID,
	}

	var res DeleteIntegration
	if err := c.Client.Post(ctx, "DeleteIntegration", DeleteIntegrationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllIntegrationsDocument = `query GetAllIntegrations {
	integrations {
		edges {
			node {
				description
				id
				kind
				name
				ownerID
				owner {
					id
				}
				secrets {
					id
				}
				oauth2tokens {
					id
				}
				events {
					id
				}
				webhooks {
					id
					destinationURL
					enabled
				}
				createdAt
				createdBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllIntegrations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllIntegrations, error) {
	vars := map[string]any{}

	var res GetAllIntegrations
	if err := c.Client.Post(ctx, "GetAllIntegrations", GetAllIntegrationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetIntegrationByIDDocument = `query GetIntegrationByID ($integrationId: ID!) {
	integration(id: $integrationId) {
		description
		id
		kind
		name
		ownerID
		owner {
			id
		}
		secrets {
			id
		}
		oauth2tokens {
			id
		}
		events {
			id
		}
		webhooks {
			id
			destinationURL
			enabled
		}
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetIntegrationByID(ctx context.Context, integrationID string, interceptors ...clientv2.RequestInterceptor) (*GetIntegrationByID, error) {
	vars := map[string]any{
		"integrationId": integrationID,
	}

	var res GetIntegrationByID
	if err := c.Client.Post(ctx, "GetIntegrationByID", GetIntegrationByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetIntegrationsDocument = `query GetIntegrations ($where: IntegrationWhereInput) {
	integrations(where: $where) {
		edges {
			node {
				description
				id
				kind
				name
				ownerID
				owner {
					id
				}
				secrets {
					id
				}
				oauth2tokens {
					id
				}
				events {
					id
				}
				webhooks {
					id
					destinationURL
					enabled
				}
				createdAt
				createdBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetIntegrations(ctx context.Context, where *IntegrationWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetIntegrations, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetIntegrations
	if err := c.Client.Post(ctx, "GetIntegrations", GetIntegrationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateIntegrationDocument = `mutation UpdateIntegration ($updateIntegrationId: ID!, $input: UpdateIntegrationInput!) {
	updateIntegration(id: $updateIntegrationId, input: $input) {
		integration {
			description
			id
			kind
			name
			ownerID
			owner {
				id
			}
			secrets {
				id
			}
			oauth2tokens {
				id
			}
			events {
				id
			}
			webhooks {
				id
				destinationURL
				enabled
			}
		}
	}
}
`

func (c *Client) UpdateIntegration(ctx context.Context, updateIntegrationID string, input UpdateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*UpdateIntegration, error) {
	vars := map[string]any{
		"updateIntegrationId": updateIntegrationID,
		"input":               input,
	}

	var res UpdateIntegration
	if err := c.Client.Post(ctx, "UpdateIntegration", UpdateIntegrationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllIntegrationHistoriesDocument = `query GetAllIntegrationHistories {
	integrationHistories {
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				kind
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllIntegrationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllIntegrationHistories, error) {
	vars := map[string]any{}

	var res GetAllIntegrationHistories
	if err := c.Client.Post(ctx, "GetAllIntegrationHistories", GetAllIntegrationHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetIntegrationHistoriesDocument = `query GetIntegrationHistories ($where: IntegrationHistoryWhereInput) {
	integrationHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				kind
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetIntegrationHistories(ctx context.Context, where *IntegrationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetIntegrationHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetIntegrationHistories
	if err := c.Client.Post(ctx, "GetIntegrationHistories", GetIntegrationHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVInternalPolicyDocument = `mutation CreateBulkCSVInternalPolicy ($input: Upload!) {
	createBulkCSVInternalPolicy(input: $input) {
		internalPolicies {
			background
			createdAt
			createdBy
			description
			details
			id
			name
			policyType
			purposeAndScope
			status
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) CreateBulkCSVInternalPolicy(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVInternalPolicy, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVInternalPolicy
	if err := c.Client.Post(ctx, "CreateBulkCSVInternalPolicy", CreateBulkCSVInternalPolicyDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkInternalPolicyDocument = `mutation CreateBulkInternalPolicy ($input: [CreateInternalPolicyInput!]) {
	createBulkInternalPolicy(input: $input) {
		internalPolicies {
			background
			createdAt
			createdBy
			description
			details
			id
			name
			policyType
			purposeAndScope
			status
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) CreateBulkInternalPolicy(ctx context.Context, input []*CreateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkInternalPolicy, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkInternalPolicy
	if err := c.Client.Post(ctx, "CreateBulkInternalPolicy", CreateBulkInternalPolicyDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateInternalPolicyDocument = `mutation CreateInternalPolicy ($input: CreateInternalPolicyInput!) {
	createInternalPolicy(input: $input) {
		internalPolicy {
			background
			createdAt
			createdBy
			description
			details
			id
			name
			policyType
			purposeAndScope
			status
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) CreateInternalPolicy(ctx context.Context, input CreateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*CreateInternalPolicy, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateInternalPolicy
	if err := c.Client.Post(ctx, "CreateInternalPolicy", CreateInternalPolicyDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteInternalPolicyDocument = `mutation DeleteInternalPolicy ($deleteInternalPolicyId: ID!) {
	deleteInternalPolicy(id: $deleteInternalPolicyId) {
		deletedID
	}
}
`

func (c *Client) DeleteInternalPolicy(ctx context.Context, deleteInternalPolicyID string, interceptors ...clientv2.RequestInterceptor) (*DeleteInternalPolicy, error) {
	vars := map[string]any{
		"deleteInternalPolicyId": deleteInternalPolicyID,
	}

	var res DeleteInternalPolicy
	if err := c.Client.Post(ctx, "DeleteInternalPolicy", DeleteInternalPolicyDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllInternalPoliciesDocument = `query GetAllInternalPolicies {
	internalPolicies {
		edges {
			node {
				background
				createdAt
				createdBy
				description
				details
				id
				name
				policyType
				purposeAndScope
				status
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetAllInternalPolicies(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllInternalPolicies, error) {
	vars := map[string]any{}

	var res GetAllInternalPolicies
	if err := c.Client.Post(ctx, "GetAllInternalPolicies", GetAllInternalPoliciesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetInternalPolicyByIDDocument = `query GetInternalPolicyByID ($internalPolicyId: ID!) {
	internalPolicy(id: $internalPolicyId) {
		background
		createdAt
		createdBy
		description
		details
		id
		name
		policyType
		purposeAndScope
		status
		tags
		updatedAt
		updatedBy
		version
	}
}
`

func (c *Client) GetInternalPolicyByID(ctx context.Context, internalPolicyID string, interceptors ...clientv2.RequestInterceptor) (*GetInternalPolicyByID, error) {
	vars := map[string]any{
		"internalPolicyId": internalPolicyID,
	}

	var res GetInternalPolicyByID
	if err := c.Client.Post(ctx, "GetInternalPolicyByID", GetInternalPolicyByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetInternalPoliciesDocument = `query GetInternalPolicies ($where: InternalPolicyWhereInput) {
	internalPolicies(where: $where) {
		edges {
			node {
				background
				createdAt
				createdBy
				description
				details
				id
				name
				policyType
				purposeAndScope
				status
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetInternalPolicies(ctx context.Context, where *InternalPolicyWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetInternalPolicies, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetInternalPolicies
	if err := c.Client.Post(ctx, "GetInternalPolicies", GetInternalPoliciesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateInternalPolicyDocument = `mutation UpdateInternalPolicy ($updateInternalPolicyId: ID!, $input: UpdateInternalPolicyInput!) {
	updateInternalPolicy(id: $updateInternalPolicyId, input: $input) {
		internalPolicy {
			background
			createdAt
			createdBy
			description
			details
			id
			name
			policyType
			purposeAndScope
			status
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) UpdateInternalPolicy(ctx context.Context, updateInternalPolicyID string, input UpdateInternalPolicyInput, interceptors ...clientv2.RequestInterceptor) (*UpdateInternalPolicy, error) {
	vars := map[string]any{
		"updateInternalPolicyId": updateInternalPolicyID,
		"input":                  input,
	}

	var res UpdateInternalPolicy
	if err := c.Client.Post(ctx, "UpdateInternalPolicy", UpdateInternalPolicyDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllInternalPolicyHistoriesDocument = `query GetAllInternalPolicyHistories {
	internalPolicyHistories {
		edges {
			node {
				background
				createdAt
				createdBy
				description
				details
				historyTime
				id
				name
				operation
				policyType
				purposeAndScope
				ref
				status
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetAllInternalPolicyHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllInternalPolicyHistories, error) {
	vars := map[string]any{}

	var res GetAllInternalPolicyHistories
	if err := c.Client.Post(ctx, "GetAllInternalPolicyHistories", GetAllInternalPolicyHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetInternalPolicyHistoriesDocument = `query GetInternalPolicyHistories ($where: InternalPolicyHistoryWhereInput) {
	internalPolicyHistories(where: $where) {
		edges {
			node {
				background
				createdAt
				createdBy
				description
				details
				historyTime
				id
				name
				operation
				policyType
				purposeAndScope
				ref
				status
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetInternalPolicyHistories(ctx context.Context, where *InternalPolicyHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetInternalPolicyHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetInternalPolicyHistories
	if err := c.Client.Post(ctx, "GetInternalPolicyHistories", GetInternalPolicyHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVInviteDocument = `mutation CreateBulkCSVInvite ($input: Upload!) {
	createBulkCSVInvite(input: $input) {
		invites {
			expires
			id
			recipient
			requestorID
			role
			sendAttempts
			status
		}
	}
}
`

func (c *Client) CreateBulkCSVInvite(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVInvite, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVInvite
	if err := c.Client.Post(ctx, "CreateBulkCSVInvite", CreateBulkCSVInviteDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkInviteDocument = `mutation CreateBulkInvite ($input: [CreateInviteInput!]) {
	createBulkInvite(input: $input) {
		invites {
			expires
			id
			recipient
			requestorID
			role
			sendAttempts
			status
		}
	}
}
`

func (c *Client) CreateBulkInvite(ctx context.Context, input []*CreateInviteInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkInvite, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkInvite
	if err := c.Client.Post(ctx, "CreateBulkInvite", CreateBulkInviteDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateInviteDocument = `mutation CreateInvite ($input: CreateInviteInput!) {
	createInvite(input: $input) {
		invite {
			expires
			id
			recipient
			requestorID
			role
			sendAttempts
			status
			owner {
				id
			}
		}
	}
}
`

func (c *Client) CreateInvite(ctx context.Context, input CreateInviteInput, interceptors ...clientv2.RequestInterceptor) (*CreateInvite, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateInvite
	if err := c.Client.Post(ctx, "CreateInvite", CreateInviteDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteInviteDocument = `mutation DeleteInvite ($deleteInviteId: ID!) {
	deleteInvite(id: $deleteInviteId) {
		deletedID
	}
}
`

func (c *Client) DeleteInvite(ctx context.Context, deleteInviteID string, interceptors ...clientv2.RequestInterceptor) (*DeleteInvite, error) {
	vars := map[string]any{
		"deleteInviteId": deleteInviteID,
	}

	var res DeleteInvite
	if err := c.Client.Post(ctx, "DeleteInvite", DeleteInviteDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetInviteByIDDocument = `query GetInviteByID ($inviteId: ID!) {
	invite(id: $inviteId) {
		expires
		id
		recipient
		requestorID
		role
		sendAttempts
		status
		owner {
			displayName
			id
			name
		}
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetInviteByID(ctx context.Context, inviteID string, interceptors ...clientv2.RequestInterceptor) (*GetInviteByID, error) {
	vars := map[string]any{
		"inviteId": inviteID,
	}

	var res GetInviteByID
	if err := c.Client.Post(ctx, "GetInviteByID", GetInviteByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllInvitesDocument = `query GetAllInvites {
	invites {
		edges {
			node {
				id
				recipient
				role
				status
			}
		}
	}
}
`

func (c *Client) GetAllInvites(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllInvites, error) {
	vars := map[string]any{}

	var res GetAllInvites
	if err := c.Client.Post(ctx, "GetAllInvites", GetAllInvitesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const InvitesByOrgIDDocument = `query InvitesByOrgID ($where: InviteWhereInput) {
	invites(where: $where) {
		edges {
			node {
				owner {
					id
					invites {
						recipient
						requestorID
						role
						sendAttempts
						status
					}
				}
			}
		}
	}
}
`

func (c *Client) InvitesByOrgID(ctx context.Context, where *InviteWhereInput, interceptors ...clientv2.RequestInterceptor) (*InvitesByOrgID, error) {
	vars := map[string]any{
		"where": where,
	}

	var res InvitesByOrgID
	if err := c.Client.Post(ctx, "InvitesByOrgID", InvitesByOrgIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVNarrativeDocument = `mutation CreateBulkCSVNarrative ($input: Upload!) {
	createBulkCSVNarrative(input: $input) {
		narratives {
			createdAt
			createdBy
			description
			details
			id
			name
			satisfies
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVNarrative(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVNarrative, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVNarrative
	if err := c.Client.Post(ctx, "CreateBulkCSVNarrative", CreateBulkCSVNarrativeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkNarrativeDocument = `mutation CreateBulkNarrative ($input: [CreateNarrativeInput!]) {
	createBulkNarrative(input: $input) {
		narratives {
			createdAt
			createdBy
			description
			details
			id
			name
			satisfies
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkNarrative(ctx context.Context, input []*CreateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkNarrative, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkNarrative
	if err := c.Client.Post(ctx, "CreateBulkNarrative", CreateBulkNarrativeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateNarrativeDocument = `mutation CreateNarrative ($input: CreateNarrativeInput!) {
	createNarrative(input: $input) {
		narrative {
			createdAt
			createdBy
			description
			details
			id
			name
			satisfies
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateNarrative(ctx context.Context, input CreateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*CreateNarrative, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateNarrative
	if err := c.Client.Post(ctx, "CreateNarrative", CreateNarrativeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteNarrativeDocument = `mutation DeleteNarrative ($deleteNarrativeId: ID!) {
	deleteNarrative(id: $deleteNarrativeId) {
		deletedID
	}
}
`

func (c *Client) DeleteNarrative(ctx context.Context, deleteNarrativeID string, interceptors ...clientv2.RequestInterceptor) (*DeleteNarrative, error) {
	vars := map[string]any{
		"deleteNarrativeId": deleteNarrativeID,
	}

	var res DeleteNarrative
	if err := c.Client.Post(ctx, "DeleteNarrative", DeleteNarrativeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllNarrativesDocument = `query GetAllNarratives {
	narratives {
		edges {
			node {
				createdAt
				createdBy
				description
				details
				id
				name
				satisfies
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllNarratives(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllNarratives, error) {
	vars := map[string]any{}

	var res GetAllNarratives
	if err := c.Client.Post(ctx, "GetAllNarratives", GetAllNarrativesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetNarrativeByIDDocument = `query GetNarrativeByID ($narrativeId: ID!) {
	narrative(id: $narrativeId) {
		createdAt
		createdBy
		description
		details
		id
		name
		satisfies
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetNarrativeByID(ctx context.Context, narrativeID string, interceptors ...clientv2.RequestInterceptor) (*GetNarrativeByID, error) {
	vars := map[string]any{
		"narrativeId": narrativeID,
	}

	var res GetNarrativeByID
	if err := c.Client.Post(ctx, "GetNarrativeByID", GetNarrativeByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetNarrativesDocument = `query GetNarratives ($where: NarrativeWhereInput) {
	narratives(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				details
				id
				name
				satisfies
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetNarratives(ctx context.Context, where *NarrativeWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetNarratives, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetNarratives
	if err := c.Client.Post(ctx, "GetNarratives", GetNarrativesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateNarrativeDocument = `mutation UpdateNarrative ($updateNarrativeId: ID!, $input: UpdateNarrativeInput!) {
	updateNarrative(id: $updateNarrativeId, input: $input) {
		narrative {
			createdAt
			createdBy
			description
			details
			id
			name
			satisfies
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateNarrative(ctx context.Context, updateNarrativeID string, input UpdateNarrativeInput, interceptors ...clientv2.RequestInterceptor) (*UpdateNarrative, error) {
	vars := map[string]any{
		"updateNarrativeId": updateNarrativeID,
		"input":             input,
	}

	var res UpdateNarrative
	if err := c.Client.Post(ctx, "UpdateNarrative", UpdateNarrativeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllNarrativeHistoriesDocument = `query GetAllNarrativeHistories {
	narrativeHistories {
		edges {
			node {
				createdAt
				createdBy
				description
				details
				historyTime
				id
				name
				operation
				ref
				satisfies
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllNarrativeHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllNarrativeHistories, error) {
	vars := map[string]any{}

	var res GetAllNarrativeHistories
	if err := c.Client.Post(ctx, "GetAllNarrativeHistories", GetAllNarrativeHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetNarrativeHistoriesDocument = `query GetNarrativeHistories ($where: NarrativeHistoryWhereInput) {
	narrativeHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				details
				historyTime
				id
				name
				operation
				ref
				satisfies
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetNarrativeHistories(ctx context.Context, where *NarrativeHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetNarrativeHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetNarrativeHistories
	if err := c.Client.Post(ctx, "GetNarrativeHistories", GetNarrativeHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllNoteHistoriesDocument = `query GetAllNoteHistories {
	noteHistories {
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				ownerID
				ref
				tags
				text
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllNoteHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllNoteHistories, error) {
	vars := map[string]any{}

	var res GetAllNoteHistories
	if err := c.Client.Post(ctx, "GetAllNoteHistories", GetAllNoteHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetNoteHistoriesDocument = `query GetNoteHistories ($where: NoteHistoryWhereInput) {
	noteHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				ownerID
				ref
				tags
				text
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetNoteHistories(ctx context.Context, where *NoteHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetNoteHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetNoteHistories
	if err := c.Client.Post(ctx, "GetNoteHistories", GetNoteHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOauthProviderHistoriesDocument = `query GetAllOauthProviderHistories {
	oauthProviderHistories {
		edges {
			node {
				authStyle
				authURL
				clientID
				clientSecret
				createdAt
				createdBy
				historyTime
				id
				infoURL
				name
				operation
				ownerID
				redirectURL
				ref
				scopes
				tags
				tokenURL
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllOauthProviderHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOauthProviderHistories, error) {
	vars := map[string]any{}

	var res GetAllOauthProviderHistories
	if err := c.Client.Post(ctx, "GetAllOauthProviderHistories", GetAllOauthProviderHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOauthProviderHistoriesDocument = `query GetOauthProviderHistories ($where: OauthProviderHistoryWhereInput) {
	oauthProviderHistories(where: $where) {
		edges {
			node {
				authStyle
				authURL
				clientID
				clientSecret
				createdAt
				createdBy
				historyTime
				id
				infoURL
				name
				operation
				ownerID
				redirectURL
				ref
				scopes
				tags
				tokenURL
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetOauthProviderHistories(ctx context.Context, where *OauthProviderHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOauthProviderHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOauthProviderHistories
	if err := c.Client.Post(ctx, "GetOauthProviderHistories", GetOauthProviderHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVOhAuthTooTokenDocument = `mutation CreateBulkCSVOhAuthTooToken ($input: Upload!) {
	createBulkCSVOhAuthTooToken(input: $input) {
		ohAuthTooTokens {
			claimsEmail
			claimsEmailVerified
			claimsGroups
			claimsPreferredUsername
			claimsUserID
			claimsUsername
			clientID
			connectorData
			connectorID
			id
			lastUsed
			nonce
			scopes
			integration {
				id
			}
			events {
				id
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVOhAuthTooToken(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVOhAuthTooToken, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVOhAuthTooToken
	if err := c.Client.Post(ctx, "CreateBulkCSVOhAuthTooToken", CreateBulkCSVOhAuthTooTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkOhAuthTooTokenDocument = `mutation CreateBulkOhAuthTooToken ($input: [CreateOhAuthTooTokenInput!]) {
	createBulkOhAuthTooToken(input: $input) {
		ohAuthTooTokens {
			claimsEmail
			claimsEmailVerified
			claimsGroups
			claimsPreferredUsername
			claimsUserID
			claimsUsername
			clientID
			connectorData
			connectorID
			id
			lastUsed
			nonce
			scopes
			integration {
				id
			}
			events {
				id
			}
		}
	}
}
`

func (c *Client) CreateBulkOhAuthTooToken(ctx context.Context, input []*CreateOhAuthTooTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkOhAuthTooToken, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkOhAuthTooToken
	if err := c.Client.Post(ctx, "CreateBulkOhAuthTooToken", CreateBulkOhAuthTooTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateOhAuthTooTokenDocument = `mutation CreateOhAuthTooToken ($input: CreateOhAuthTooTokenInput!) {
	createOhAuthTooToken(input: $input) {
		ohAuthTooToken {
			claimsEmail
			claimsEmailVerified
			claimsGroups
			claimsPreferredUsername
			claimsUserID
			claimsUsername
			clientID
			connectorData
			connectorID
			id
			lastUsed
			nonce
			scopes
			integration {
				id
			}
			events {
				id
			}
		}
	}
}
`

func (c *Client) CreateOhAuthTooToken(ctx context.Context, input CreateOhAuthTooTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateOhAuthTooToken, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateOhAuthTooToken
	if err := c.Client.Post(ctx, "CreateOhAuthTooToken", CreateOhAuthTooTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteOhAuthTooTokenDocument = `mutation DeleteOhAuthTooToken ($deleteOhAuthTooTokenId: ID!) {
	deleteOhAuthTooToken(id: $deleteOhAuthTooTokenId) {
		deletedID
	}
}
`

func (c *Client) DeleteOhAuthTooToken(ctx context.Context, deleteOhAuthTooTokenID string, interceptors ...clientv2.RequestInterceptor) (*DeleteOhAuthTooToken, error) {
	vars := map[string]any{
		"deleteOhAuthTooTokenId": deleteOhAuthTooTokenID,
	}

	var res DeleteOhAuthTooToken
	if err := c.Client.Post(ctx, "DeleteOhAuthTooToken", DeleteOhAuthTooTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOhAuthTooTokensDocument = `query GetOhAuthTooTokens ($where: OhAuthTooTokenWhereInput) {
	ohAuthTooTokens(where: $where) {
		edges {
			node {
				claimsEmail
				claimsEmailVerified
				claimsGroups
				claimsPreferredUsername
				claimsUserID
				claimsUsername
				clientID
				connectorData
				connectorID
				id
				lastUsed
				nonce
				scopes
				integration {
					id
				}
				events {
					id
				}
			}
		}
	}
}
`

func (c *Client) GetOhAuthTooTokens(ctx context.Context, where *OhAuthTooTokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOhAuthTooTokens, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOhAuthTooTokens
	if err := c.Client.Post(ctx, "GetOhAuthTooTokens", GetOhAuthTooTokensDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateOhAuthTooTokenDocument = `mutation UpdateOhAuthTooToken ($updateOhAuthTooTokenId: ID!, $input: UpdateOhAuthTooTokenInput!) {
	updateOhAuthTooToken(id: $updateOhAuthTooTokenId, input: $input) {
		ohAuthTooToken {
			claimsEmail
			claimsEmailVerified
			claimsGroups
			claimsPreferredUsername
			claimsUserID
			claimsUsername
			clientID
			connectorData
			connectorID
			id
			lastUsed
			nonce
			scopes
			integration {
				id
			}
			events {
				id
			}
		}
	}
}
`

func (c *Client) UpdateOhAuthTooToken(ctx context.Context, updateOhAuthTooTokenID string, input UpdateOhAuthTooTokenInput, interceptors ...clientv2.RequestInterceptor) (*UpdateOhAuthTooToken, error) {
	vars := map[string]any{
		"updateOhAuthTooTokenId": updateOhAuthTooTokenID,
		"input":                  input,
	}

	var res UpdateOhAuthTooToken
	if err := c.Client.Post(ctx, "UpdateOhAuthTooToken", UpdateOhAuthTooTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVOrganizationDocument = `mutation CreateBulkCSVOrganization ($input: Upload!) {
	createBulkCSVOrganization(input: $input) {
		organizations {
			id
			name
			displayName
			description
			personalOrg
			tags
		}
	}
}
`

func (c *Client) CreateBulkCSVOrganization(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVOrganization, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVOrganization
	if err := c.Client.Post(ctx, "CreateBulkCSVOrganization", CreateBulkCSVOrganizationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkOrganizationDocument = `mutation CreateBulkOrganization ($input: [CreateOrganizationInput!]) {
	createBulkOrganization(input: $input) {
		organizations {
			id
			name
			displayName
			description
			personalOrg
			tags
		}
	}
}
`

func (c *Client) CreateBulkOrganization(ctx context.Context, input []*CreateOrganizationInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkOrganization, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkOrganization
	if err := c.Client.Post(ctx, "CreateBulkOrganization", CreateBulkOrganizationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateOrganizationDocument = `mutation CreateOrganization ($input: CreateOrganizationInput!) {
	createOrganization(input: $input) {
		organization {
			id
			name
			displayName
			description
			personalOrg
			tags
			createdAt
			updatedAt
			setting {
				id
				createdAt
				updatedAt
				createdBy
				updatedBy
				domains
				billingContact
				billingEmail
				billingPhone
				billingAddress
				taxIdentifier
				geoLocation
				tags
			}
			parent {
				id
				name
			}
			children {
				edges {
					node {
						id
						name
						displayName
						description
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateOrganization(ctx context.Context, input CreateOrganizationInput, interceptors ...clientv2.RequestInterceptor) (*CreateOrganization, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateOrganization
	if err := c.Client.Post(ctx, "CreateOrganization", CreateOrganizationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteOrganizationDocument = `mutation DeleteOrganization ($deleteOrganizationId: ID!) {
	deleteOrganization(id: $deleteOrganizationId) {
		deletedID
	}
}
`

func (c *Client) DeleteOrganization(ctx context.Context, deleteOrganizationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteOrganization, error) {
	vars := map[string]any{
		"deleteOrganizationId": deleteOrganizationID,
	}

	var res DeleteOrganization
	if err := c.Client.Post(ctx, "DeleteOrganization", DeleteOrganizationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrganizationsDocument = `query GetAllOrganizations {
	organizations {
		edges {
			node {
				id
				name
				displayName
				description
				personalOrg
				tags
				parent {
					id
					name
				}
				children {
					edges {
						node {
							id
							name
							displayName
							description
						}
					}
				}
				members {
					id
					role
					user {
						id
						firstName
						lastName
					}
				}
				setting {
					id
					createdAt
					updatedAt
					createdBy
					updatedBy
					domains
					billingContact
					billingEmail
					billingPhone
					billingAddress
					taxIdentifier
					geoLocation
					tags
				}
				createdAt
				updatedAt
			}
		}
	}
}
`

func (c *Client) GetAllOrganizations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizations, error) {
	vars := map[string]any{}

	var res GetAllOrganizations
	if err := c.Client.Post(ctx, "GetAllOrganizations", GetAllOrganizationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationByIDDocument = `query GetOrganizationByID ($organizationId: ID!) {
	organization(id: $organizationId) {
		id
		name
		displayName
		description
		personalOrg
		tags
		parent {
			id
			name
		}
		children {
			edges {
				node {
					id
					name
					displayName
					description
				}
			}
		}
		members {
			id
			role
			user {
				id
				firstName
				lastName
			}
		}
		setting {
			id
			createdAt
			updatedAt
			createdBy
			updatedBy
			domains
			billingContact
			billingEmail
			billingPhone
			billingAddress
			taxIdentifier
			geoLocation
			tags
		}
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetOrganizationByID(ctx context.Context, organizationID string, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationByID, error) {
	vars := map[string]any{
		"organizationId": organizationID,
	}

	var res GetOrganizationByID
	if err := c.Client.Post(ctx, "GetOrganizationByID", GetOrganizationByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationsDocument = `query GetOrganizations ($where: OrganizationWhereInput) {
	organizations(where: $where) {
		edges {
			node {
				id
				name
				displayName
				description
				personalOrg
				tags
				parent {
					id
					name
				}
				children {
					edges {
						node {
							id
							name
							displayName
							description
						}
					}
				}
				members {
					id
					role
					user {
						id
						firstName
						lastName
					}
				}
				setting {
					id
					createdAt
					updatedAt
					createdBy
					updatedBy
					domains
					billingContact
					billingEmail
					billingPhone
					billingAddress
					taxIdentifier
					geoLocation
					tags
				}
				createdAt
				updatedAt
			}
		}
	}
}
`

func (c *Client) GetOrganizations(ctx context.Context, where *OrganizationWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizations, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOrganizations
	if err := c.Client.Post(ctx, "GetOrganizations", GetOrganizationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateOrganizationDocument = `mutation UpdateOrganization ($updateOrganizationId: ID!, $input: UpdateOrganizationInput!) {
	updateOrganization(id: $updateOrganizationId, input: $input) {
		organization {
			id
			name
			displayName
			description
			personalOrg
			tags
			members {
				id
				role
				userID
			}
			setting {
				id
				createdAt
				updatedAt
				createdBy
				updatedBy
				domains
				billingContact
				billingEmail
				billingPhone
				billingAddress
				taxIdentifier
				geoLocation
				tags
			}
		}
	}
}
`

func (c *Client) UpdateOrganization(ctx context.Context, updateOrganizationID string, input UpdateOrganizationInput, interceptors ...clientv2.RequestInterceptor) (*UpdateOrganization, error) {
	vars := map[string]any{
		"updateOrganizationId": updateOrganizationID,
		"input":                input,
	}

	var res UpdateOrganization
	if err := c.Client.Post(ctx, "UpdateOrganization", UpdateOrganizationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrganizationHistoriesDocument = `query GetAllOrganizationHistories {
	organizationHistories {
		edges {
			node {
				avatarRemoteURL
				createdAt
				createdBy
				dedicatedDb
				description
				displayName
				historyTime
				id
				name
				operation
				personalOrg
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllOrganizationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizationHistories, error) {
	vars := map[string]any{}

	var res GetAllOrganizationHistories
	if err := c.Client.Post(ctx, "GetAllOrganizationHistories", GetAllOrganizationHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationHistoriesDocument = `query GetOrganizationHistories ($where: OrganizationHistoryWhereInput) {
	organizationHistories(where: $where) {
		edges {
			node {
				avatarRemoteURL
				createdAt
				createdBy
				dedicatedDb
				description
				displayName
				historyTime
				id
				name
				operation
				personalOrg
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetOrganizationHistories(ctx context.Context, where *OrganizationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOrganizationHistories
	if err := c.Client.Post(ctx, "GetOrganizationHistories", GetOrganizationHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrganizationSettingsDocument = `query GetAllOrganizationSettings {
	organizationSettings {
		edges {
			node {
				billingAddress
				billingContact
				billingEmail
				billingPhone
				createdAt
				createdBy
				domains
				geoLocation
				id
				tags
				taxIdentifier
				updatedAt
				updatedBy
				organization {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetAllOrganizationSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizationSettings, error) {
	vars := map[string]any{}

	var res GetAllOrganizationSettings
	if err := c.Client.Post(ctx, "GetAllOrganizationSettings", GetAllOrganizationSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationSettingByIDDocument = `query GetOrganizationSettingByID ($organizationSettingId: ID!) {
	organizationSetting(id: $organizationSettingId) {
		billingAddress
		billingContact
		billingEmail
		billingPhone
		createdAt
		createdBy
		domains
		geoLocation
		id
		tags
		taxIdentifier
		updatedAt
		updatedBy
		organization {
			id
			name
		}
	}
}
`

func (c *Client) GetOrganizationSettingByID(ctx context.Context, organizationSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettingByID, error) {
	vars := map[string]any{
		"organizationSettingId": organizationSettingID,
	}

	var res GetOrganizationSettingByID
	if err := c.Client.Post(ctx, "GetOrganizationSettingByID", GetOrganizationSettingByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationSettingsDocument = `query GetOrganizationSettings ($where: OrganizationSettingWhereInput!) {
	organizationSettings(where: $where) {
		edges {
			node {
				billingAddress
				billingContact
				billingEmail
				billingPhone
				createdAt
				createdBy
				domains
				geoLocation
				id
				tags
				taxIdentifier
				updatedAt
				updatedBy
				organization {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetOrganizationSettings(ctx context.Context, where OrganizationSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettings, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOrganizationSettings
	if err := c.Client.Post(ctx, "GetOrganizationSettings", GetOrganizationSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateOrganizationSettingDocument = `mutation UpdateOrganizationSetting ($updateOrganizationSettingId: ID!, $input: UpdateOrganizationSettingInput!) {
	updateOrganizationSetting(id: $updateOrganizationSettingId, input: $input) {
		organizationSetting {
			billingAddress
			billingContact
			billingEmail
			billingPhone
			createdAt
			createdBy
			domains
			geoLocation
			id
			tags
			taxIdentifier
			updatedAt
			updatedBy
			organization {
				id
				name
			}
		}
	}
}
`

func (c *Client) UpdateOrganizationSetting(ctx context.Context, updateOrganizationSettingID string, input UpdateOrganizationSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateOrganizationSetting, error) {
	vars := map[string]any{
		"updateOrganizationSettingId": updateOrganizationSettingID,
		"input":                       input,
	}

	var res UpdateOrganizationSetting
	if err := c.Client.Post(ctx, "UpdateOrganizationSetting", UpdateOrganizationSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrganizationSettingHistoriesDocument = `query GetAllOrganizationSettingHistories {
	organizationSettingHistories {
		edges {
			node {
				billingAddress
				billingContact
				billingEmail
				billingPhone
				createdAt
				createdBy
				domains
				geoLocation
				historyTime
				id
				operation
				organizationID
				ref
				tags
				taxIdentifier
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllOrganizationSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizationSettingHistories, error) {
	vars := map[string]any{}

	var res GetAllOrganizationSettingHistories
	if err := c.Client.Post(ctx, "GetAllOrganizationSettingHistories", GetAllOrganizationSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationSettingHistoriesDocument = `query GetOrganizationSettingHistories ($where: OrganizationSettingHistoryWhereInput) {
	organizationSettingHistories(where: $where) {
		edges {
			node {
				billingAddress
				billingContact
				billingEmail
				billingPhone
				createdAt
				createdBy
				domains
				geoLocation
				historyTime
				id
				operation
				organizationID
				ref
				tags
				taxIdentifier
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetOrganizationSettingHistories(ctx context.Context, where *OrganizationSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettingHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOrganizationSettingHistories
	if err := c.Client.Post(ctx, "GetOrganizationSettingHistories", GetOrganizationSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const AddUserToOrgWithRoleDocument = `mutation AddUserToOrgWithRole ($input: CreateOrgMembershipInput!) {
	createOrgMembership(input: $input) {
		orgMembership {
			id
			role
			userID
			organizationID
		}
	}
}
`

func (c *Client) AddUserToOrgWithRole(ctx context.Context, input CreateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*AddUserToOrgWithRole, error) {
	vars := map[string]any{
		"input": input,
	}

	var res AddUserToOrgWithRole
	if err := c.Client.Post(ctx, "AddUserToOrgWithRole", AddUserToOrgWithRoleDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVOrgMembersDocument = `mutation CreateBulkCSVOrgMembers ($input: Upload!) {
	createBulkCSVOrgMembership(input: $input) {
		orgMemberships {
			id
			organizationID
			role
			userID
		}
	}
}
`

func (c *Client) CreateBulkCSVOrgMembers(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVOrgMembers, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVOrgMembers
	if err := c.Client.Post(ctx, "CreateBulkCSVOrgMembers", CreateBulkCSVOrgMembersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkOrgMembersDocument = `mutation CreateBulkOrgMembers ($input: [CreateOrgMembershipInput!]) {
	createBulkOrgMembership(input: $input) {
		orgMemberships {
			id
			organizationID
			role
			userID
		}
	}
}
`

func (c *Client) CreateBulkOrgMembers(ctx context.Context, input []*CreateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkOrgMembers, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkOrgMembers
	if err := c.Client.Post(ctx, "CreateBulkOrgMembers", CreateBulkOrgMembersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrgMembersByOrgIDDocument = `query GetOrgMembersByOrgID ($where: OrgMembershipWhereInput) {
	orgMemberships(where: $where) {
		edges {
			node {
				id
				organizationID
				userID
				role
				user {
					firstName
					lastName
					id
					displayName
					email
				}
			}
		}
	}
}
`

func (c *Client) GetOrgMembersByOrgID(ctx context.Context, where *OrgMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgMembersByOrgID, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOrgMembersByOrgID
	if err := c.Client.Post(ctx, "GetOrgMembersByOrgID", GetOrgMembersByOrgIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const RemoveUserFromOrgDocument = `mutation RemoveUserFromOrg ($deleteOrgMembershipId: ID!) {
	deleteOrgMembership(id: $deleteOrgMembershipId) {
		deletedID
	}
}
`

func (c *Client) RemoveUserFromOrg(ctx context.Context, deleteOrgMembershipID string, interceptors ...clientv2.RequestInterceptor) (*RemoveUserFromOrg, error) {
	vars := map[string]any{
		"deleteOrgMembershipId": deleteOrgMembershipID,
	}

	var res RemoveUserFromOrg
	if err := c.Client.Post(ctx, "RemoveUserFromOrg", RemoveUserFromOrgDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateUserRoleInOrgDocument = `mutation UpdateUserRoleInOrg ($updateOrgMemberId: ID!, $input: UpdateOrgMembershipInput!) {
	updateOrgMembership(id: $updateOrgMemberId, input: $input) {
		orgMembership {
			id
			role
			userID
			organizationID
		}
	}
}
`

func (c *Client) UpdateUserRoleInOrg(ctx context.Context, updateOrgMemberID string, input UpdateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUserRoleInOrg, error) {
	vars := map[string]any{
		"updateOrgMemberId": updateOrgMemberID,
		"input":             input,
	}

	var res UpdateUserRoleInOrg
	if err := c.Client.Post(ctx, "UpdateUserRoleInOrg", UpdateUserRoleInOrgDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrgMembershipHistoriesDocument = `query GetAllOrgMembershipHistories {
	orgMembershipHistories {
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				organizationID
				ref
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetAllOrgMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrgMembershipHistories, error) {
	vars := map[string]any{}

	var res GetAllOrgMembershipHistories
	if err := c.Client.Post(ctx, "GetAllOrgMembershipHistories", GetAllOrgMembershipHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrgMembershipHistoriesDocument = `query GetOrgMembershipHistories ($where: OrgMembershipHistoryWhereInput) {
	orgMembershipHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				organizationID
				ref
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetOrgMembershipHistories(ctx context.Context, where *OrgMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgMembershipHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOrgMembershipHistories
	if err := c.Client.Post(ctx, "GetOrgMembershipHistories", GetOrgMembershipHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVPersonalAccessTokenDocument = `mutation CreateBulkCSVPersonalAccessToken ($input: Upload!) {
	createBulkCSVPersonalAccessToken(input: $input) {
		personalAccessTokens {
			description
			expiresAt
			id
			lastUsedAt
			name
			scopes
			token
			updatedAt
			updatedBy
			organizations {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVPersonalAccessToken(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVPersonalAccessToken, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVPersonalAccessToken
	if err := c.Client.Post(ctx, "CreateBulkCSVPersonalAccessToken", CreateBulkCSVPersonalAccessTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkPersonalAccessTokenDocument = `mutation CreateBulkPersonalAccessToken ($input: [CreatePersonalAccessTokenInput!]) {
	createBulkPersonalAccessToken(input: $input) {
		personalAccessTokens {
			description
			expiresAt
			id
			lastUsedAt
			name
			scopes
			token
			updatedAt
			updatedBy
			organizations {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateBulkPersonalAccessToken(ctx context.Context, input []*CreatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkPersonalAccessToken, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkPersonalAccessToken
	if err := c.Client.Post(ctx, "CreateBulkPersonalAccessToken", CreateBulkPersonalAccessTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreatePersonalAccessTokenDocument = `mutation CreatePersonalAccessToken ($input: CreatePersonalAccessTokenInput!) {
	createPersonalAccessToken(input: $input) {
		personalAccessToken {
			description
			expiresAt
			id
			lastUsedAt
			name
			scopes
			token
			updatedAt
			updatedBy
			organizations {
				id
				name
			}
			owner {
				id
			}
		}
	}
}
`

func (c *Client) CreatePersonalAccessToken(ctx context.Context, input CreatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreatePersonalAccessToken, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreatePersonalAccessToken
	if err := c.Client.Post(ctx, "CreatePersonalAccessToken", CreatePersonalAccessTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeletePersonalAccessTokenDocument = `mutation DeletePersonalAccessToken ($deletePersonalAccessTokenId: ID!) {
	deletePersonalAccessToken(id: $deletePersonalAccessTokenId) {
		deletedID
	}
}
`

func (c *Client) DeletePersonalAccessToken(ctx context.Context, deletePersonalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*DeletePersonalAccessToken, error) {
	vars := map[string]any{
		"deletePersonalAccessTokenId": deletePersonalAccessTokenID,
	}

	var res DeletePersonalAccessToken
	if err := c.Client.Post(ctx, "DeletePersonalAccessToken", DeletePersonalAccessTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllPersonalAccessTokensDocument = `query GetAllPersonalAccessTokens {
	personalAccessTokens {
		edges {
			node {
				description
				expiresAt
				id
				lastUsedAt
				name
				scopes
				token
				updatedAt
				updatedBy
				organizations {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetAllPersonalAccessTokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllPersonalAccessTokens, error) {
	vars := map[string]any{}

	var res GetAllPersonalAccessTokens
	if err := c.Client.Post(ctx, "GetAllPersonalAccessTokens", GetAllPersonalAccessTokensDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetPersonalAccessTokenByIDDocument = `query GetPersonalAccessTokenByID ($personalAccessTokenId: ID!) {
	personalAccessToken(id: $personalAccessTokenId) {
		description
		expiresAt
		id
		lastUsedAt
		name
		scopes
		token
		updatedAt
		updatedBy
		organizations {
			id
			name
		}
	}
}
`

func (c *Client) GetPersonalAccessTokenByID(ctx context.Context, personalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*GetPersonalAccessTokenByID, error) {
	vars := map[string]any{
		"personalAccessTokenId": personalAccessTokenID,
	}

	var res GetPersonalAccessTokenByID
	if err := c.Client.Post(ctx, "GetPersonalAccessTokenByID", GetPersonalAccessTokenByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdatePersonalAccessTokenDocument = `mutation UpdatePersonalAccessToken ($updatePersonalAccessTokenId: ID!, $input: UpdatePersonalAccessTokenInput!) {
	updatePersonalAccessToken(id: $updatePersonalAccessTokenId, input: $input) {
		personalAccessToken {
			description
			expiresAt
			id
			lastUsedAt
			name
			scopes
			token
			updatedAt
			updatedBy
			organizations {
				id
				name
			}
			owner {
				id
			}
		}
	}
}
`

func (c *Client) UpdatePersonalAccessToken(ctx context.Context, updatePersonalAccessTokenID string, input UpdatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*UpdatePersonalAccessToken, error) {
	vars := map[string]any{
		"updatePersonalAccessTokenId": updatePersonalAccessTokenID,
		"input":                       input,
	}

	var res UpdatePersonalAccessToken
	if err := c.Client.Post(ctx, "UpdatePersonalAccessToken", UpdatePersonalAccessTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVProcedureDocument = `mutation CreateBulkCSVProcedure ($input: Upload!) {
	createBulkCSVProcedure(input: $input) {
		procedures {
			background
			createdAt
			createdBy
			description
			details
			id
			name
			procedureType
			purposeAndScope
			satisfies
			status
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) CreateBulkCSVProcedure(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVProcedure, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVProcedure
	if err := c.Client.Post(ctx, "CreateBulkCSVProcedure", CreateBulkCSVProcedureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkProcedureDocument = `mutation CreateBulkProcedure ($input: [CreateProcedureInput!]) {
	createBulkProcedure(input: $input) {
		procedures {
			background
			createdAt
			createdBy
			description
			details
			id
			name
			procedureType
			purposeAndScope
			satisfies
			status
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) CreateBulkProcedure(ctx context.Context, input []*CreateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkProcedure, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkProcedure
	if err := c.Client.Post(ctx, "CreateBulkProcedure", CreateBulkProcedureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateProcedureDocument = `mutation CreateProcedure ($input: CreateProcedureInput!) {
	createProcedure(input: $input) {
		procedure {
			background
			createdAt
			createdBy
			description
			details
			id
			name
			procedureType
			purposeAndScope
			satisfies
			status
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) CreateProcedure(ctx context.Context, input CreateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*CreateProcedure, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateProcedure
	if err := c.Client.Post(ctx, "CreateProcedure", CreateProcedureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteProcedureDocument = `mutation DeleteProcedure ($deleteProcedureId: ID!) {
	deleteProcedure(id: $deleteProcedureId) {
		deletedID
	}
}
`

func (c *Client) DeleteProcedure(ctx context.Context, deleteProcedureID string, interceptors ...clientv2.RequestInterceptor) (*DeleteProcedure, error) {
	vars := map[string]any{
		"deleteProcedureId": deleteProcedureID,
	}

	var res DeleteProcedure
	if err := c.Client.Post(ctx, "DeleteProcedure", DeleteProcedureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllProceduresDocument = `query GetAllProcedures {
	procedures {
		edges {
			node {
				background
				createdAt
				createdBy
				description
				details
				id
				name
				procedureType
				purposeAndScope
				satisfies
				status
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetAllProcedures(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProcedures, error) {
	vars := map[string]any{}

	var res GetAllProcedures
	if err := c.Client.Post(ctx, "GetAllProcedures", GetAllProceduresDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProcedureByIDDocument = `query GetProcedureByID ($procedureId: ID!) {
	procedure(id: $procedureId) {
		background
		createdAt
		createdBy
		description
		details
		id
		name
		procedureType
		purposeAndScope
		satisfies
		status
		tags
		updatedAt
		updatedBy
		version
	}
}
`

func (c *Client) GetProcedureByID(ctx context.Context, procedureID string, interceptors ...clientv2.RequestInterceptor) (*GetProcedureByID, error) {
	vars := map[string]any{
		"procedureId": procedureID,
	}

	var res GetProcedureByID
	if err := c.Client.Post(ctx, "GetProcedureByID", GetProcedureByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProceduresDocument = `query GetProcedures ($where: ProcedureWhereInput) {
	procedures(where: $where) {
		edges {
			node {
				background
				createdAt
				createdBy
				description
				details
				id
				name
				procedureType
				purposeAndScope
				satisfies
				status
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetProcedures(ctx context.Context, where *ProcedureWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProcedures, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetProcedures
	if err := c.Client.Post(ctx, "GetProcedures", GetProceduresDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateProcedureDocument = `mutation UpdateProcedure ($updateProcedureId: ID!, $input: UpdateProcedureInput!) {
	updateProcedure(id: $updateProcedureId, input: $input) {
		procedure {
			background
			createdAt
			createdBy
			description
			details
			id
			name
			procedureType
			purposeAndScope
			satisfies
			status
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) UpdateProcedure(ctx context.Context, updateProcedureID string, input UpdateProcedureInput, interceptors ...clientv2.RequestInterceptor) (*UpdateProcedure, error) {
	vars := map[string]any{
		"updateProcedureId": updateProcedureID,
		"input":             input,
	}

	var res UpdateProcedure
	if err := c.Client.Post(ctx, "UpdateProcedure", UpdateProcedureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllProcedureHistoriesDocument = `query GetAllProcedureHistories {
	procedureHistories {
		edges {
			node {
				background
				createdAt
				createdBy
				description
				details
				historyTime
				id
				name
				operation
				procedureType
				purposeAndScope
				ref
				satisfies
				status
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetAllProcedureHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProcedureHistories, error) {
	vars := map[string]any{}

	var res GetAllProcedureHistories
	if err := c.Client.Post(ctx, "GetAllProcedureHistories", GetAllProcedureHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProcedureHistoriesDocument = `query GetProcedureHistories ($where: ProcedureHistoryWhereInput) {
	procedureHistories(where: $where) {
		edges {
			node {
				background
				createdAt
				createdBy
				description
				details
				historyTime
				id
				name
				operation
				procedureType
				purposeAndScope
				ref
				satisfies
				status
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetProcedureHistories(ctx context.Context, where *ProcedureHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProcedureHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetProcedureHistories
	if err := c.Client.Post(ctx, "GetProcedureHistories", GetProcedureHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVProgramDocument = `mutation CreateBulkCSVProgram ($input: Upload!) {
	createBulkCSVProgram(input: $input) {
		programs {
			auditorReadComments
			auditorReady
			auditorWriteComments
			createdAt
			createdBy
			description
			endDate
			id
			name
			organizationID
			startDate
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVProgram(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVProgram, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVProgram
	if err := c.Client.Post(ctx, "CreateBulkCSVProgram", CreateBulkCSVProgramDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkProgramDocument = `mutation CreateBulkProgram ($input: [CreateProgramInput!]) {
	createBulkProgram(input: $input) {
		programs {
			auditorReadComments
			auditorReady
			auditorWriteComments
			createdAt
			createdBy
			description
			endDate
			id
			name
			organizationID
			startDate
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkProgram(ctx context.Context, input []*CreateProgramInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkProgram, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkProgram
	if err := c.Client.Post(ctx, "CreateBulkProgram", CreateBulkProgramDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateProgramDocument = `mutation CreateProgram ($input: CreateProgramInput!) {
	createProgram(input: $input) {
		program {
			auditorReadComments
			auditorReady
			auditorWriteComments
			createdAt
			createdBy
			description
			endDate
			id
			name
			organizationID
			startDate
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateProgram(ctx context.Context, input CreateProgramInput, interceptors ...clientv2.RequestInterceptor) (*CreateProgram, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateProgram
	if err := c.Client.Post(ctx, "CreateProgram", CreateProgramDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteProgramDocument = `mutation DeleteProgram ($deleteProgramId: ID!) {
	deleteProgram(id: $deleteProgramId) {
		deletedID
	}
}
`

func (c *Client) DeleteProgram(ctx context.Context, deleteProgramID string, interceptors ...clientv2.RequestInterceptor) (*DeleteProgram, error) {
	vars := map[string]any{
		"deleteProgramId": deleteProgramID,
	}

	var res DeleteProgram
	if err := c.Client.Post(ctx, "DeleteProgram", DeleteProgramDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllProgramsDocument = `query GetAllPrograms {
	programs {
		edges {
			node {
				auditorReadComments
				auditorReady
				auditorWriteComments
				createdAt
				createdBy
				description
				endDate
				id
				name
				organizationID
				startDate
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllPrograms(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllPrograms, error) {
	vars := map[string]any{}

	var res GetAllPrograms
	if err := c.Client.Post(ctx, "GetAllPrograms", GetAllProgramsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProgramByIDDocument = `query GetProgramByID ($programId: ID!) {
	program(id: $programId) {
		auditorReadComments
		auditorReady
		auditorWriteComments
		createdAt
		createdBy
		description
		endDate
		id
		name
		organizationID
		startDate
		status
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetProgramByID(ctx context.Context, programID string, interceptors ...clientv2.RequestInterceptor) (*GetProgramByID, error) {
	vars := map[string]any{
		"programId": programID,
	}

	var res GetProgramByID
	if err := c.Client.Post(ctx, "GetProgramByID", GetProgramByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProgramsDocument = `query GetPrograms ($where: ProgramWhereInput) {
	programs(where: $where) {
		edges {
			node {
				auditorReadComments
				auditorReady
				auditorWriteComments
				createdAt
				createdBy
				description
				endDate
				id
				name
				organizationID
				startDate
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetPrograms(ctx context.Context, where *ProgramWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetPrograms, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetPrograms
	if err := c.Client.Post(ctx, "GetPrograms", GetProgramsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateProgramDocument = `mutation UpdateProgram ($updateProgramId: ID!, $input: UpdateProgramInput!) {
	updateProgram(id: $updateProgramId, input: $input) {
		program {
			auditorReadComments
			auditorReady
			auditorWriteComments
			createdAt
			createdBy
			description
			endDate
			id
			name
			organizationID
			startDate
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateProgram(ctx context.Context, updateProgramID string, input UpdateProgramInput, interceptors ...clientv2.RequestInterceptor) (*UpdateProgram, error) {
	vars := map[string]any{
		"updateProgramId": updateProgramID,
		"input":           input,
	}

	var res UpdateProgram
	if err := c.Client.Post(ctx, "UpdateProgram", UpdateProgramDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllProgramHistoriesDocument = `query GetAllProgramHistories {
	programHistories {
		edges {
			node {
				auditorReadComments
				auditorReady
				auditorWriteComments
				createdAt
				createdBy
				description
				endDate
				historyTime
				id
				name
				operation
				organizationID
				ref
				startDate
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllProgramHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProgramHistories, error) {
	vars := map[string]any{}

	var res GetAllProgramHistories
	if err := c.Client.Post(ctx, "GetAllProgramHistories", GetAllProgramHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProgramHistoriesDocument = `query GetProgramHistories ($where: ProgramHistoryWhereInput) {
	programHistories(where: $where) {
		edges {
			node {
				auditorReadComments
				auditorReady
				auditorWriteComments
				createdAt
				createdBy
				description
				endDate
				historyTime
				id
				name
				operation
				organizationID
				ref
				startDate
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetProgramHistories(ctx context.Context, where *ProgramHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProgramHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetProgramHistories
	if err := c.Client.Post(ctx, "GetProgramHistories", GetProgramHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVProgramMembershipDocument = `mutation CreateBulkCSVProgramMembership ($input: Upload!) {
	createBulkCSVProgramMembership(input: $input) {
		programMemberships {
			createdAt
			createdBy
			id
			programID
			role
			updatedAt
			updatedBy
			userID
		}
	}
}
`

func (c *Client) CreateBulkCSVProgramMembership(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVProgramMembership, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVProgramMembership
	if err := c.Client.Post(ctx, "CreateBulkCSVProgramMembership", CreateBulkCSVProgramMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkProgramMembershipDocument = `mutation CreateBulkProgramMembership ($input: [CreateProgramMembershipInput!]) {
	createBulkProgramMembership(input: $input) {
		programMemberships {
			createdAt
			createdBy
			id
			programID
			role
			updatedAt
			updatedBy
			userID
		}
	}
}
`

func (c *Client) CreateBulkProgramMembership(ctx context.Context, input []*CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkProgramMembership, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkProgramMembership
	if err := c.Client.Post(ctx, "CreateBulkProgramMembership", CreateBulkProgramMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateProgramMembershipDocument = `mutation CreateProgramMembership ($input: CreateProgramMembershipInput!) {
	createProgramMembership(input: $input) {
		programMembership {
			createdAt
			createdBy
			id
			programID
			role
			updatedAt
			updatedBy
			userID
		}
	}
}
`

func (c *Client) CreateProgramMembership(ctx context.Context, input CreateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateProgramMembership, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateProgramMembership
	if err := c.Client.Post(ctx, "CreateProgramMembership", CreateProgramMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteProgramMembershipDocument = `mutation DeleteProgramMembership ($deleteProgramMembershipId: ID!) {
	deleteProgramMembership(id: $deleteProgramMembershipId) {
		deletedID
	}
}
`

func (c *Client) DeleteProgramMembership(ctx context.Context, deleteProgramMembershipID string, interceptors ...clientv2.RequestInterceptor) (*DeleteProgramMembership, error) {
	vars := map[string]any{
		"deleteProgramMembershipId": deleteProgramMembershipID,
	}

	var res DeleteProgramMembership
	if err := c.Client.Post(ctx, "DeleteProgramMembership", DeleteProgramMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllProgramMembershipsDocument = `query GetAllProgramMemberships {
	programMemberships {
		edges {
			node {
				createdAt
				createdBy
				id
				programID
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetAllProgramMemberships(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProgramMemberships, error) {
	vars := map[string]any{}

	var res GetAllProgramMemberships
	if err := c.Client.Post(ctx, "GetAllProgramMemberships", GetAllProgramMembershipsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProgramMembershipByIDDocument = `query GetProgramMembershipByID ($programMembershipId: ID!) {
	programMembership(id: $programMembershipId) {
		createdAt
		createdBy
		id
		programID
		role
		updatedAt
		updatedBy
		userID
	}
}
`

func (c *Client) GetProgramMembershipByID(ctx context.Context, programMembershipID string, interceptors ...clientv2.RequestInterceptor) (*GetProgramMembershipByID, error) {
	vars := map[string]any{
		"programMembershipId": programMembershipID,
	}

	var res GetProgramMembershipByID
	if err := c.Client.Post(ctx, "GetProgramMembershipByID", GetProgramMembershipByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProgramMembershipsDocument = `query GetProgramMemberships ($where: ProgramMembershipWhereInput) {
	programMemberships(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				id
				programID
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetProgramMemberships(ctx context.Context, where *ProgramMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProgramMemberships, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetProgramMemberships
	if err := c.Client.Post(ctx, "GetProgramMemberships", GetProgramMembershipsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateProgramMembershipDocument = `mutation UpdateProgramMembership ($updateProgramMembershipId: ID!, $input: UpdateProgramMembershipInput!) {
	updateProgramMembership(id: $updateProgramMembershipId, input: $input) {
		programMembership {
			createdAt
			createdBy
			id
			programID
			role
			updatedAt
			updatedBy
			userID
		}
	}
}
`

func (c *Client) UpdateProgramMembership(ctx context.Context, updateProgramMembershipID string, input UpdateProgramMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateProgramMembership, error) {
	vars := map[string]any{
		"updateProgramMembershipId": updateProgramMembershipID,
		"input":                     input,
	}

	var res UpdateProgramMembership
	if err := c.Client.Post(ctx, "UpdateProgramMembership", UpdateProgramMembershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllProgramMembershipHistoriesDocument = `query GetAllProgramMembershipHistories {
	programMembershipHistories {
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				programID
				ref
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetAllProgramMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllProgramMembershipHistories, error) {
	vars := map[string]any{}

	var res GetAllProgramMembershipHistories
	if err := c.Client.Post(ctx, "GetAllProgramMembershipHistories", GetAllProgramMembershipHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProgramMembershipHistoriesDocument = `query GetProgramMembershipHistories ($where: ProgramMembershipHistoryWhereInput) {
	programMembershipHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				programID
				ref
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetProgramMembershipHistories(ctx context.Context, where *ProgramMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetProgramMembershipHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetProgramMembershipHistories
	if err := c.Client.Post(ctx, "GetProgramMembershipHistories", GetProgramMembershipHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVRiskDocument = `mutation CreateBulkCSVRisk ($input: Upload!) {
	createBulkCSVRisk(input: $input) {
		risks {
			businessCosts
			createdAt
			createdBy
			description
			details
			id
			impact
			likelihood
			mitigation
			name
			riskType
			satisfies
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVRisk(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVRisk, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVRisk
	if err := c.Client.Post(ctx, "CreateBulkCSVRisk", CreateBulkCSVRiskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkRiskDocument = `mutation CreateBulkRisk ($input: [CreateRiskInput!]) {
	createBulkRisk(input: $input) {
		risks {
			businessCosts
			createdAt
			createdBy
			description
			details
			id
			impact
			likelihood
			mitigation
			name
			riskType
			satisfies
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkRisk(ctx context.Context, input []*CreateRiskInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkRisk, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkRisk
	if err := c.Client.Post(ctx, "CreateBulkRisk", CreateBulkRiskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateRiskDocument = `mutation CreateRisk ($input: CreateRiskInput!) {
	createRisk(input: $input) {
		risk {
			businessCosts
			createdAt
			createdBy
			description
			details
			id
			impact
			likelihood
			mitigation
			name
			riskType
			satisfies
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateRisk(ctx context.Context, input CreateRiskInput, interceptors ...clientv2.RequestInterceptor) (*CreateRisk, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateRisk
	if err := c.Client.Post(ctx, "CreateRisk", CreateRiskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteRiskDocument = `mutation DeleteRisk ($deleteRiskId: ID!) {
	deleteRisk(id: $deleteRiskId) {
		deletedID
	}
}
`

func (c *Client) DeleteRisk(ctx context.Context, deleteRiskID string, interceptors ...clientv2.RequestInterceptor) (*DeleteRisk, error) {
	vars := map[string]any{
		"deleteRiskId": deleteRiskID,
	}

	var res DeleteRisk
	if err := c.Client.Post(ctx, "DeleteRisk", DeleteRiskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllRisksDocument = `query GetAllRisks {
	risks {
		edges {
			node {
				businessCosts
				createdAt
				createdBy
				description
				details
				id
				impact
				likelihood
				mitigation
				name
				riskType
				satisfies
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllRisks(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllRisks, error) {
	vars := map[string]any{}

	var res GetAllRisks
	if err := c.Client.Post(ctx, "GetAllRisks", GetAllRisksDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetRiskByIDDocument = `query GetRiskByID ($riskId: ID!) {
	risk(id: $riskId) {
		businessCosts
		createdAt
		createdBy
		description
		details
		id
		impact
		likelihood
		mitigation
		name
		riskType
		satisfies
		status
		tags
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetRiskByID(ctx context.Context, riskID string, interceptors ...clientv2.RequestInterceptor) (*GetRiskByID, error) {
	vars := map[string]any{
		"riskId": riskID,
	}

	var res GetRiskByID
	if err := c.Client.Post(ctx, "GetRiskByID", GetRiskByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetRisksDocument = `query GetRisks ($where: RiskWhereInput) {
	risks(where: $where) {
		edges {
			node {
				businessCosts
				createdAt
				createdBy
				description
				details
				id
				impact
				likelihood
				mitigation
				name
				riskType
				satisfies
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetRisks(ctx context.Context, where *RiskWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetRisks, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetRisks
	if err := c.Client.Post(ctx, "GetRisks", GetRisksDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateRiskDocument = `mutation UpdateRisk ($updateRiskId: ID!, $input: UpdateRiskInput!) {
	updateRisk(id: $updateRiskId, input: $input) {
		risk {
			businessCosts
			createdAt
			createdBy
			description
			details
			id
			impact
			likelihood
			mitigation
			name
			riskType
			satisfies
			status
			tags
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateRisk(ctx context.Context, updateRiskID string, input UpdateRiskInput, interceptors ...clientv2.RequestInterceptor) (*UpdateRisk, error) {
	vars := map[string]any{
		"updateRiskId": updateRiskID,
		"input":        input,
	}

	var res UpdateRisk
	if err := c.Client.Post(ctx, "UpdateRisk", UpdateRiskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllRiskHistoriesDocument = `query GetAllRiskHistories {
	riskHistories {
		edges {
			node {
				businessCosts
				createdAt
				createdBy
				description
				details
				historyTime
				id
				impact
				likelihood
				mitigation
				name
				operation
				ref
				riskType
				satisfies
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllRiskHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllRiskHistories, error) {
	vars := map[string]any{}

	var res GetAllRiskHistories
	if err := c.Client.Post(ctx, "GetAllRiskHistories", GetAllRiskHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetRiskHistoriesDocument = `query GetRiskHistories ($where: RiskHistoryWhereInput) {
	riskHistories(where: $where) {
		edges {
			node {
				businessCosts
				createdAt
				createdBy
				description
				details
				historyTime
				id
				impact
				likelihood
				mitigation
				name
				operation
				ref
				riskType
				satisfies
				status
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetRiskHistories(ctx context.Context, where *RiskHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetRiskHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetRiskHistories
	if err := c.Client.Post(ctx, "GetRiskHistories", GetRiskHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GlobalSearchDocument = `query GlobalSearch ($query: String!) {
	search(query: $query) {
		nodes {
			... on APITokenSearchResult {
				apiTokens {
					id
					tags
				}
			}
			... on ActionPlanSearchResult {
				actionPlans {
					id
					tags
				}
			}
			... on ContactSearchResult {
				contacts {
					fullName
					id
					tags
				}
			}
			... on ControlSearchResult {
				controls {
					id
					tags
				}
			}
			... on ControlObjectiveSearchResult {
				controlObjectives {
					id
					tags
				}
			}
			... on DocumentDataSearchResult {
				documentData {
					id
					tags
				}
			}
			... on EntitlementSearchResult {
				entitlements {
					id
					tags
				}
			}
			... on EntitlementPlanSearchResult {
				entitlementPlans {
					id
					tags
				}
			}
			... on EntitlementPlanFeatureSearchResult {
				entitlementPlanFeatures {
					id
					tags
				}
			}
			... on EntitySearchResult {
				entities {
					description
					displayName
					id
					name
					tags
				}
			}
			... on EntityTypeSearchResult {
				entityTypes {
					id
					tags
				}
			}
			... on EventSearchResult {
				events {
					id
					tags
				}
			}
			... on FeatureSearchResult {
				features {
					id
					tags
				}
			}
			... on FileSearchResult {
				files {
					id
					tags
				}
			}
			... on GroupSearchResult {
				groups {
					displayName
					id
					name
					tags
				}
			}
			... on GroupSettingSearchResult {
				groupSettings {
					id
					tags
				}
			}
			... on IntegrationSearchResult {
				integrations {
					id
					tags
				}
			}
			... on InternalPolicySearchResult {
				internalPolicies {
					id
					tags
				}
			}
			... on NarrativeSearchResult {
				narratives {
					id
					tags
				}
			}
			... on OauthProviderSearchResult {
				oauthProviders {
					id
					tags
				}
			}
			... on OhAuthTooTokenSearchResult {
				ohAuthTooTokens {
					id
					tags
				}
			}
			... on OrganizationSearchResult {
				organizations {
					displayName
					id
					name
					tags
				}
			}
			... on OrganizationSettingSearchResult {
				organizationSettings {
					id
					tags
				}
			}
			... on PersonalAccessTokenSearchResult {
				personalAccessTokens {
					id
					tags
				}
			}
			... on ProcedureSearchResult {
				procedures {
					id
					tags
				}
			}
			... on ProgramSearchResult {
				programs {
					id
					tags
				}
			}
			... on RiskSearchResult {
				risks {
					id
					tags
				}
			}
			... on StandardSearchResult {
				standards {
					id
					tags
				}
			}
			... on SubcontrolSearchResult {
				subcontrols {
					id
					tags
				}
			}
			... on SubscriberSearchResult {
				subscribers {
					email
					id
					tags
				}
			}
			... on TFASettingSearchResult {
				tFASettings {
					id
					tags
				}
			}
			... on TaskSearchResult {
				tasks {
					id
					tags
				}
			}
			... on TemplateSearchResult {
				templates {
					id
					jsonconfig
					name
					tags
				}
			}
			... on UserSearchResult {
				users {
					id
					tags
				}
			}
			... on UserSettingSearchResult {
				userSettings {
					id
					tags
				}
			}
			... on WebhookSearchResult {
				webhooks {
					id
					tags
				}
			}
		}
	}
}
`

func (c *Client) GlobalSearch(ctx context.Context, query string, interceptors ...clientv2.RequestInterceptor) (*GlobalSearch, error) {
	vars := map[string]any{
		"query": query,
	}

	var res GlobalSearch
	if err := c.Client.Post(ctx, "GlobalSearch", GlobalSearchDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVStandardDocument = `mutation CreateBulkCSVStandard ($input: Upload!) {
	createBulkCSVStandard(input: $input) {
		standards {
			background
			createdAt
			createdBy
			description
			details
			family
			id
			name
			purposeAndScope
			satisfies
			standardType
			status
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) CreateBulkCSVStandard(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVStandard, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVStandard
	if err := c.Client.Post(ctx, "CreateBulkCSVStandard", CreateBulkCSVStandardDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkStandardDocument = `mutation CreateBulkStandard ($input: [CreateStandardInput!]) {
	createBulkStandard(input: $input) {
		standards {
			background
			createdAt
			createdBy
			description
			details
			family
			id
			name
			purposeAndScope
			satisfies
			standardType
			status
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) CreateBulkStandard(ctx context.Context, input []*CreateStandardInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkStandard, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkStandard
	if err := c.Client.Post(ctx, "CreateBulkStandard", CreateBulkStandardDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateStandardDocument = `mutation CreateStandard ($input: CreateStandardInput!) {
	createStandard(input: $input) {
		standard {
			background
			createdAt
			createdBy
			description
			details
			family
			id
			name
			purposeAndScope
			satisfies
			standardType
			status
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) CreateStandard(ctx context.Context, input CreateStandardInput, interceptors ...clientv2.RequestInterceptor) (*CreateStandard, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateStandard
	if err := c.Client.Post(ctx, "CreateStandard", CreateStandardDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteStandardDocument = `mutation DeleteStandard ($deleteStandardId: ID!) {
	deleteStandard(id: $deleteStandardId) {
		deletedID
	}
}
`

func (c *Client) DeleteStandard(ctx context.Context, deleteStandardID string, interceptors ...clientv2.RequestInterceptor) (*DeleteStandard, error) {
	vars := map[string]any{
		"deleteStandardId": deleteStandardID,
	}

	var res DeleteStandard
	if err := c.Client.Post(ctx, "DeleteStandard", DeleteStandardDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllStandardsDocument = `query GetAllStandards {
	standards {
		edges {
			node {
				background
				createdAt
				createdBy
				description
				details
				family
				id
				name
				purposeAndScope
				satisfies
				standardType
				status
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetAllStandards(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllStandards, error) {
	vars := map[string]any{}

	var res GetAllStandards
	if err := c.Client.Post(ctx, "GetAllStandards", GetAllStandardsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetStandardByIDDocument = `query GetStandardByID ($standardId: ID!) {
	standard(id: $standardId) {
		background
		createdAt
		createdBy
		description
		details
		family
		id
		name
		purposeAndScope
		satisfies
		standardType
		status
		tags
		updatedAt
		updatedBy
		version
	}
}
`

func (c *Client) GetStandardByID(ctx context.Context, standardID string, interceptors ...clientv2.RequestInterceptor) (*GetStandardByID, error) {
	vars := map[string]any{
		"standardId": standardID,
	}

	var res GetStandardByID
	if err := c.Client.Post(ctx, "GetStandardByID", GetStandardByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetStandardsDocument = `query GetStandards ($where: StandardWhereInput) {
	standards(where: $where) {
		edges {
			node {
				background
				createdAt
				createdBy
				description
				details
				family
				id
				name
				purposeAndScope
				satisfies
				standardType
				status
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetStandards(ctx context.Context, where *StandardWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetStandards, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetStandards
	if err := c.Client.Post(ctx, "GetStandards", GetStandardsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateStandardDocument = `mutation UpdateStandard ($updateStandardId: ID!, $input: UpdateStandardInput!) {
	updateStandard(id: $updateStandardId, input: $input) {
		standard {
			background
			createdAt
			createdBy
			description
			details
			family
			id
			name
			purposeAndScope
			satisfies
			standardType
			status
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) UpdateStandard(ctx context.Context, updateStandardID string, input UpdateStandardInput, interceptors ...clientv2.RequestInterceptor) (*UpdateStandard, error) {
	vars := map[string]any{
		"updateStandardId": updateStandardID,
		"input":            input,
	}

	var res UpdateStandard
	if err := c.Client.Post(ctx, "UpdateStandard", UpdateStandardDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllStandardHistoriesDocument = `query GetAllStandardHistories {
	standardHistories {
		edges {
			node {
				background
				createdAt
				createdBy
				description
				details
				family
				historyTime
				id
				name
				operation
				purposeAndScope
				ref
				satisfies
				standardType
				status
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetAllStandardHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllStandardHistories, error) {
	vars := map[string]any{}

	var res GetAllStandardHistories
	if err := c.Client.Post(ctx, "GetAllStandardHistories", GetAllStandardHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetStandardHistoriesDocument = `query GetStandardHistories ($where: StandardHistoryWhereInput) {
	standardHistories(where: $where) {
		edges {
			node {
				background
				createdAt
				createdBy
				description
				details
				family
				historyTime
				id
				name
				operation
				purposeAndScope
				ref
				satisfies
				standardType
				status
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetStandardHistories(ctx context.Context, where *StandardHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetStandardHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetStandardHistories
	if err := c.Client.Post(ctx, "GetStandardHistories", GetStandardHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVSubcontrolDocument = `mutation CreateBulkCSVSubcontrol ($input: Upload!) {
	createBulkCSVSubcontrol(input: $input) {
		subcontrols {
			class
			createdAt
			createdBy
			description
			details
			family
			id
			implementationDate
			implementationEvidence
			implementationStatus
			implementationVerification
			implementationVerificationDate
			mappedFrameworks
			name
			source
			status
			subcontrolNumber
			subcontrolType
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) CreateBulkCSVSubcontrol(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVSubcontrol, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVSubcontrol
	if err := c.Client.Post(ctx, "CreateBulkCSVSubcontrol", CreateBulkCSVSubcontrolDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkSubcontrolDocument = `mutation CreateBulkSubcontrol ($input: [CreateSubcontrolInput!]) {
	createBulkSubcontrol(input: $input) {
		subcontrols {
			class
			createdAt
			createdBy
			description
			details
			family
			id
			implementationDate
			implementationEvidence
			implementationStatus
			implementationVerification
			implementationVerificationDate
			mappedFrameworks
			name
			source
			status
			subcontrolNumber
			subcontrolType
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) CreateBulkSubcontrol(ctx context.Context, input []*CreateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkSubcontrol, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkSubcontrol
	if err := c.Client.Post(ctx, "CreateBulkSubcontrol", CreateBulkSubcontrolDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateSubcontrolDocument = `mutation CreateSubcontrol ($input: CreateSubcontrolInput!) {
	createSubcontrol(input: $input) {
		subcontrol {
			class
			createdAt
			createdBy
			description
			details
			family
			id
			implementationDate
			implementationEvidence
			implementationStatus
			implementationVerification
			implementationVerificationDate
			mappedFrameworks
			name
			source
			status
			subcontrolNumber
			subcontrolType
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) CreateSubcontrol(ctx context.Context, input CreateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*CreateSubcontrol, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateSubcontrol
	if err := c.Client.Post(ctx, "CreateSubcontrol", CreateSubcontrolDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteSubcontrolDocument = `mutation DeleteSubcontrol ($deleteSubcontrolId: ID!) {
	deleteSubcontrol(id: $deleteSubcontrolId) {
		deletedID
	}
}
`

func (c *Client) DeleteSubcontrol(ctx context.Context, deleteSubcontrolID string, interceptors ...clientv2.RequestInterceptor) (*DeleteSubcontrol, error) {
	vars := map[string]any{
		"deleteSubcontrolId": deleteSubcontrolID,
	}

	var res DeleteSubcontrol
	if err := c.Client.Post(ctx, "DeleteSubcontrol", DeleteSubcontrolDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllSubcontrolsDocument = `query GetAllSubcontrols {
	subcontrols {
		edges {
			node {
				class
				createdAt
				createdBy
				description
				details
				family
				id
				implementationDate
				implementationEvidence
				implementationStatus
				implementationVerification
				implementationVerificationDate
				mappedFrameworks
				name
				source
				status
				subcontrolNumber
				subcontrolType
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetAllSubcontrols(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllSubcontrols, error) {
	vars := map[string]any{}

	var res GetAllSubcontrols
	if err := c.Client.Post(ctx, "GetAllSubcontrols", GetAllSubcontrolsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSubcontrolByIDDocument = `query GetSubcontrolByID ($subcontrolId: ID!) {
	subcontrol(id: $subcontrolId) {
		class
		createdAt
		createdBy
		description
		details
		family
		id
		implementationDate
		implementationEvidence
		implementationStatus
		implementationVerification
		implementationVerificationDate
		mappedFrameworks
		name
		source
		status
		subcontrolNumber
		subcontrolType
		tags
		updatedAt
		updatedBy
		version
	}
}
`

func (c *Client) GetSubcontrolByID(ctx context.Context, subcontrolID string, interceptors ...clientv2.RequestInterceptor) (*GetSubcontrolByID, error) {
	vars := map[string]any{
		"subcontrolId": subcontrolID,
	}

	var res GetSubcontrolByID
	if err := c.Client.Post(ctx, "GetSubcontrolByID", GetSubcontrolByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSubcontrolsDocument = `query GetSubcontrols ($where: SubcontrolWhereInput) {
	subcontrols(where: $where) {
		edges {
			node {
				class
				createdAt
				createdBy
				description
				details
				family
				id
				implementationDate
				implementationEvidence
				implementationStatus
				implementationVerification
				implementationVerificationDate
				mappedFrameworks
				name
				source
				status
				subcontrolNumber
				subcontrolType
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetSubcontrols(ctx context.Context, where *SubcontrolWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetSubcontrols, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetSubcontrols
	if err := c.Client.Post(ctx, "GetSubcontrols", GetSubcontrolsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateSubcontrolDocument = `mutation UpdateSubcontrol ($updateSubcontrolId: ID!, $input: UpdateSubcontrolInput!) {
	updateSubcontrol(id: $updateSubcontrolId, input: $input) {
		subcontrol {
			class
			createdAt
			createdBy
			description
			details
			family
			id
			implementationDate
			implementationEvidence
			implementationStatus
			implementationVerification
			implementationVerificationDate
			mappedFrameworks
			name
			source
			status
			subcontrolNumber
			subcontrolType
			tags
			updatedAt
			updatedBy
			version
		}
	}
}
`

func (c *Client) UpdateSubcontrol(ctx context.Context, updateSubcontrolID string, input UpdateSubcontrolInput, interceptors ...clientv2.RequestInterceptor) (*UpdateSubcontrol, error) {
	vars := map[string]any{
		"updateSubcontrolId": updateSubcontrolID,
		"input":              input,
	}

	var res UpdateSubcontrol
	if err := c.Client.Post(ctx, "UpdateSubcontrol", UpdateSubcontrolDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllSubcontrolHistoriesDocument = `query GetAllSubcontrolHistories {
	subcontrolHistories {
		edges {
			node {
				class
				createdAt
				createdBy
				description
				details
				family
				historyTime
				id
				implementationDate
				implementationEvidence
				implementationStatus
				implementationVerification
				implementationVerificationDate
				mappedFrameworks
				name
				operation
				ref
				source
				status
				subcontrolNumber
				subcontrolType
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetAllSubcontrolHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllSubcontrolHistories, error) {
	vars := map[string]any{}

	var res GetAllSubcontrolHistories
	if err := c.Client.Post(ctx, "GetAllSubcontrolHistories", GetAllSubcontrolHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSubcontrolHistoriesDocument = `query GetSubcontrolHistories ($where: SubcontrolHistoryWhereInput) {
	subcontrolHistories(where: $where) {
		edges {
			node {
				class
				createdAt
				createdBy
				description
				details
				family
				historyTime
				id
				implementationDate
				implementationEvidence
				implementationStatus
				implementationVerification
				implementationVerificationDate
				mappedFrameworks
				name
				operation
				ref
				source
				status
				subcontrolNumber
				subcontrolType
				tags
				updatedAt
				updatedBy
				version
			}
		}
	}
}
`

func (c *Client) GetSubcontrolHistories(ctx context.Context, where *SubcontrolHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetSubcontrolHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetSubcontrolHistories
	if err := c.Client.Post(ctx, "GetSubcontrolHistories", GetSubcontrolHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVSubscriberDocument = `mutation CreateBulkCSVSubscriber ($input: Upload!) {
	createBulkCSVSubscriber(input: $input) {
		subscribers {
			active
			email
			id
			verifiedEmail
		}
	}
}
`

func (c *Client) CreateBulkCSVSubscriber(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVSubscriber, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVSubscriber
	if err := c.Client.Post(ctx, "CreateBulkCSVSubscriber", CreateBulkCSVSubscriberDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkSubscriberDocument = `mutation CreateBulkSubscriber ($input: [CreateSubscriberInput!]) {
	createBulkSubscriber(input: $input) {
		subscribers {
			active
			email
			id
			verifiedEmail
		}
	}
}
`

func (c *Client) CreateBulkSubscriber(ctx context.Context, input []*CreateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkSubscriber, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkSubscriber
	if err := c.Client.Post(ctx, "CreateBulkSubscriber", CreateBulkSubscriberDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateSubscriberDocument = `mutation CreateSubscriber ($input: CreateSubscriberInput!) {
	createSubscriber(input: $input) {
		subscriber {
			active
			createdAt
			createdBy
			email
			id
			updatedAt
			updatedBy
			verifiedEmail
		}
	}
}
`

func (c *Client) CreateSubscriber(ctx context.Context, input CreateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*CreateSubscriber, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateSubscriber
	if err := c.Client.Post(ctx, "CreateSubscriber", CreateSubscriberDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteSubscriberDocument = `mutation DeleteSubscriber ($deleteSubscriberEmail: String!, $subscriberOrganization: ID) {
	deleteSubscriber(email: $deleteSubscriberEmail, ownerID: $subscriberOrganization) {
		email
	}
}
`

func (c *Client) DeleteSubscriber(ctx context.Context, deleteSubscriberEmail string, subscriberOrganization *string, interceptors ...clientv2.RequestInterceptor) (*DeleteSubscriber, error) {
	vars := map[string]any{
		"deleteSubscriberEmail":  deleteSubscriberEmail,
		"subscriberOrganization": subscriberOrganization,
	}

	var res DeleteSubscriber
	if err := c.Client.Post(ctx, "DeleteSubscriber", DeleteSubscriberDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllSubscribersDocument = `query GetAllSubscribers {
	subscribers {
		edges {
			node {
				active
				email
				id
				ownerID
				verifiedEmail
			}
		}
	}
}
`

func (c *Client) GetAllSubscribers(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllSubscribers, error) {
	vars := map[string]any{}

	var res GetAllSubscribers
	if err := c.Client.Post(ctx, "GetAllSubscribers", GetAllSubscribersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSubscriberByEmailDocument = `query GetSubscriberByEmail ($email: String!) {
	subscriber(email: $email) {
		active
		email
		id
		ownerID
		verifiedEmail
	}
}
`

func (c *Client) GetSubscriberByEmail(ctx context.Context, email string, interceptors ...clientv2.RequestInterceptor) (*GetSubscriberByEmail, error) {
	vars := map[string]any{
		"email": email,
	}

	var res GetSubscriberByEmail
	if err := c.Client.Post(ctx, "GetSubscriberByEmail", GetSubscriberByEmailDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSubscribersDocument = `query GetSubscribers ($where: SubscriberWhereInput) {
	subscribers(where: $where) {
		edges {
			node {
				active
				email
				id
				ownerID
				verifiedEmail
			}
		}
	}
}
`

func (c *Client) GetSubscribers(ctx context.Context, where *SubscriberWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetSubscribers, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetSubscribers
	if err := c.Client.Post(ctx, "GetSubscribers", GetSubscribersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateSubscriberDocument = `mutation UpdateSubscriber ($email: String!, $input: UpdateSubscriberInput!) {
	updateSubscriber(email: $email, input: $input) {
		subscriber {
			active
			createdAt
			createdBy
			email
			id
			phoneNumber
			updatedAt
			updatedBy
			verifiedEmail
			verifiedPhone
		}
	}
}
`

func (c *Client) UpdateSubscriber(ctx context.Context, email string, input UpdateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*UpdateSubscriber, error) {
	vars := map[string]any{
		"email": email,
		"input": input,
	}

	var res UpdateSubscriber
	if err := c.Client.Post(ctx, "UpdateSubscriber", UpdateSubscriberDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVTaskDocument = `mutation CreateBulkCSVTask ($input: Upload!) {
	createBulkCSVTask(input: $input) {
		tasks {
			assignee {
				id
				firstName
				lastName
			}
			assigner {
				id
				firstName
				lastName
			}
			completed
			createdAt
			createdBy
			description
			details
			due
			id
			status
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkCSVTask(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVTask, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVTask
	if err := c.Client.Post(ctx, "CreateBulkCSVTask", CreateBulkCSVTaskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkTaskDocument = `mutation CreateBulkTask ($input: [CreateTaskInput!]) {
	createBulkTask(input: $input) {
		tasks {
			assignee {
				id
				firstName
				lastName
			}
			assigner {
				id
				firstName
				lastName
			}
			completed
			createdAt
			createdBy
			description
			details
			due
			id
			status
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateBulkTask(ctx context.Context, input []*CreateTaskInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkTask, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkTask
	if err := c.Client.Post(ctx, "CreateBulkTask", CreateBulkTaskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateTaskDocument = `mutation CreateTask ($input: CreateTaskInput!) {
	createTask(input: $input) {
		task {
			assignee {
				id
				firstName
				lastName
			}
			assigner {
				id
				firstName
				lastName
			}
			completed
			createdAt
			createdBy
			description
			details
			due
			id
			status
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateTask(ctx context.Context, input CreateTaskInput, interceptors ...clientv2.RequestInterceptor) (*CreateTask, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateTask
	if err := c.Client.Post(ctx, "CreateTask", CreateTaskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteTaskDocument = `mutation DeleteTask ($deleteTaskId: ID!) {
	deleteTask(id: $deleteTaskId) {
		deletedID
	}
}
`

func (c *Client) DeleteTask(ctx context.Context, deleteTaskID string, interceptors ...clientv2.RequestInterceptor) (*DeleteTask, error) {
	vars := map[string]any{
		"deleteTaskId": deleteTaskID,
	}

	var res DeleteTask
	if err := c.Client.Post(ctx, "DeleteTask", DeleteTaskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTasksDocument = `query GetAllTasks {
	tasks {
		edges {
			node {
				assignee {
					id
					firstName
					lastName
				}
				assigner {
					id
					firstName
					lastName
				}
				organization {
					id
					name
				}
				completed
				createdAt
				createdBy
				description
				details
				due
				id
				status
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllTasks(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTasks, error) {
	vars := map[string]any{}

	var res GetAllTasks
	if err := c.Client.Post(ctx, "GetAllTasks", GetAllTasksDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTaskByIDDocument = `query GetTaskByID ($taskId: ID!) {
	task(id: $taskId) {
		assignee {
			id
			firstName
			lastName
		}
		assigner {
			id
			firstName
			lastName
		}
		organization {
			id
			name
		}
		completed
		createdAt
		createdBy
		description
		details
		due
		id
		status
		tags
		title
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetTaskByID(ctx context.Context, taskID string, interceptors ...clientv2.RequestInterceptor) (*GetTaskByID, error) {
	vars := map[string]any{
		"taskId": taskID,
	}

	var res GetTaskByID
	if err := c.Client.Post(ctx, "GetTaskByID", GetTaskByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTasksDocument = `query GetTasks ($where: TaskWhereInput) {
	tasks(where: $where) {
		edges {
			node {
				assignee {
					id
					firstName
					lastName
				}
				assigner {
					id
					firstName
					lastName
				}
				completed
				createdAt
				createdBy
				description
				details
				due
				id
				status
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetTasks(ctx context.Context, where *TaskWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTasks, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetTasks
	if err := c.Client.Post(ctx, "GetTasks", GetTasksDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateTaskDocument = `mutation UpdateTask ($updateTaskId: ID!, $input: UpdateTaskInput!) {
	updateTask(id: $updateTaskId, input: $input) {
		task {
			assignee {
				id
				firstName
				lastName
			}
			assigner {
				id
				firstName
				lastName
			}
			completed
			createdAt
			createdBy
			description
			details
			due
			id
			status
			tags
			title
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateTask(ctx context.Context, updateTaskID string, input UpdateTaskInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTask, error) {
	vars := map[string]any{
		"updateTaskId": updateTaskID,
		"input":        input,
	}

	var res UpdateTask
	if err := c.Client.Post(ctx, "UpdateTask", UpdateTaskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTaskHistoriesDocument = `query GetAllTaskHistories {
	taskHistories {
		edges {
			node {
				completed
				createdAt
				createdBy
				description
				details
				due
				historyTime
				id
				operation
				ref
				status
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllTaskHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTaskHistories, error) {
	vars := map[string]any{}

	var res GetAllTaskHistories
	if err := c.Client.Post(ctx, "GetAllTaskHistories", GetAllTaskHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTaskHistoriesDocument = `query GetTaskHistories ($where: TaskHistoryWhereInput) {
	taskHistories(where: $where) {
		edges {
			node {
				completed
				createdAt
				createdBy
				description
				details
				due
				historyTime
				id
				operation
				ref
				status
				tags
				title
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetTaskHistories(ctx context.Context, where *TaskHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTaskHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetTaskHistories
	if err := c.Client.Post(ctx, "GetTaskHistories", GetTaskHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVTemplateDocument = `mutation CreateBulkCSVTemplate ($input: Upload!) {
	createBulkCSVTemplate(input: $input) {
		templates {
			description
			id
			jsonconfig
			name
			uischema
			owner {
				id
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVTemplate(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVTemplate, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVTemplate
	if err := c.Client.Post(ctx, "CreateBulkCSVTemplate", CreateBulkCSVTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkTemplateDocument = `mutation CreateBulkTemplate ($input: [CreateTemplateInput!]) {
	createBulkTemplate(input: $input) {
		templates {
			description
			id
			jsonconfig
			name
			uischema
			owner {
				id
			}
		}
	}
}
`

func (c *Client) CreateBulkTemplate(ctx context.Context, input []*CreateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkTemplate, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkTemplate
	if err := c.Client.Post(ctx, "CreateBulkTemplate", CreateBulkTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateTemplateDocument = `mutation CreateTemplate ($input: CreateTemplateInput!) {
	createTemplate(input: $input) {
		template {
			description
			id
			jsonconfig
			name
			uischema
			owner {
				id
			}
		}
	}
}
`

func (c *Client) CreateTemplate(ctx context.Context, input CreateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*CreateTemplate, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateTemplate
	if err := c.Client.Post(ctx, "CreateTemplate", CreateTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTemplatesDocument = `query GetAllTemplates {
	templates {
		edges {
			node {
				createdAt
				createdBy
				description
				id
				jsonconfig
				name
				uischema
				updatedAt
				updatedBy
				owner {
					id
				}
			}
		}
	}
}
`

func (c *Client) GetAllTemplates(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTemplates, error) {
	vars := map[string]any{}

	var res GetAllTemplates
	if err := c.Client.Post(ctx, "GetAllTemplates", GetAllTemplatesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTemplateByIDDocument = `query GetTemplateByID ($getTemplateId: ID!) {
	template(id: $getTemplateId) {
		createdAt
		createdBy
		description
		id
		jsonconfig
		name
		uischema
		updatedAt
		updatedBy
		owner {
			id
		}
	}
}
`

func (c *Client) GetTemplateByID(ctx context.Context, getTemplateID string, interceptors ...clientv2.RequestInterceptor) (*GetTemplateByID, error) {
	vars := map[string]any{
		"getTemplateId": getTemplateID,
	}

	var res GetTemplateByID
	if err := c.Client.Post(ctx, "GetTemplateByID", GetTemplateByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateTemplateDocument = `mutation UpdateTemplate ($updateTemplateId: ID!, $input: UpdateTemplateInput!) {
	updateTemplate(id: $updateTemplateId, input: $input) {
		template {
			createdAt
			createdBy
			description
			id
			jsonconfig
			name
			uischema
			updatedAt
			updatedBy
			owner {
				id
			}
		}
	}
}
`

func (c *Client) UpdateTemplate(ctx context.Context, updateTemplateID string, input UpdateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTemplate, error) {
	vars := map[string]any{
		"updateTemplateId": updateTemplateID,
		"input":            input,
	}

	var res UpdateTemplate
	if err := c.Client.Post(ctx, "UpdateTemplate", UpdateTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTemplateHistoriesDocument = `query GetAllTemplateHistories {
	templateHistories {
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				jsonconfig
				name
				operation
				ownerID
				ref
				tags
				templateType
				uischema
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllTemplateHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTemplateHistories, error) {
	vars := map[string]any{}

	var res GetAllTemplateHistories
	if err := c.Client.Post(ctx, "GetAllTemplateHistories", GetAllTemplateHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTemplateHistoriesDocument = `query GetTemplateHistories ($where: TemplateHistoryWhereInput) {
	templateHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				jsonconfig
				name
				operation
				ownerID
				ref
				tags
				templateType
				uischema
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetTemplateHistories(ctx context.Context, where *TemplateHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTemplateHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetTemplateHistories
	if err := c.Client.Post(ctx, "GetTemplateHistories", GetTemplateHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateTFASettingDocument = `mutation CreateTFASetting ($input: CreateTFASettingInput!) {
	createTFASetting(input: $input) {
		tfaSetting {
			recoveryCodes
			totpAllowed
			verified
			owner {
				id
			}
		}
	}
}
`

func (c *Client) CreateTFASetting(ctx context.Context, input CreateTFASettingInput, interceptors ...clientv2.RequestInterceptor) (*CreateTFASetting, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateTFASetting
	if err := c.Client.Post(ctx, "CreateTFASetting", CreateTFASettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTFASettingsDocument = `query GetAllTFASettings {
	tfaSettings {
		edges {
			node {
				recoveryCodes
				totpAllowed
				verified
				owner {
					id
				}
			}
		}
	}
}
`

func (c *Client) GetAllTFASettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTFASettings, error) {
	vars := map[string]any{}

	var res GetAllTFASettings
	if err := c.Client.Post(ctx, "GetAllTFASettings", GetAllTFASettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTFASettingDocument = `query GetTFASetting {
	tfaSetting {
		recoveryCodes
		totpAllowed
		verified
		owner {
			id
		}
	}
}
`

func (c *Client) GetTFASetting(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetTFASetting, error) {
	vars := map[string]any{}

	var res GetTFASetting
	if err := c.Client.Post(ctx, "GetTFASetting", GetTFASettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateTFASettingDocument = `mutation UpdateTFASetting ($input: UpdateTFASettingInput!) {
	updateTFASetting(input: $input) {
		tfaSetting {
			recoveryCodes
			totpAllowed
			verified
		}
	}
}
`

func (c *Client) UpdateTFASetting(ctx context.Context, input UpdateTFASettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTFASetting, error) {
	vars := map[string]any{
		"input": input,
	}

	var res UpdateTFASetting
	if err := c.Client.Post(ctx, "UpdateTFASetting", UpdateTFASettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateUserDocument = `mutation CreateUser ($input: CreateUserInput!, $avatarFile: Upload) {
	createUser(input: $input, avatarFile: $avatarFile) {
		user {
			authProvider
			avatarLocalFile
			avatarRemoteURL
			avatarLocalFileID
			displayName
			email
			firstName
			id
			lastName
			sub
			tags
			orgMemberships {
				id
				organizationID
			}
			groupMemberships {
				id
				groupID
			}
			setting {
				defaultOrg {
					id
					name
					personalOrg
				}
				createdAt
				createdBy
				emailConfirmed
				locked
				silencedAt
				status
				suspendedAt
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) CreateUser(ctx context.Context, input CreateUserInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateUser, error) {
	vars := map[string]any{
		"input":      input,
		"avatarFile": avatarFile,
	}

	var res CreateUser
	if err := c.Client.Post(ctx, "CreateUser", CreateUserDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteUserDocument = `mutation DeleteUser ($deleteUserId: ID!) {
	deleteUser(id: $deleteUserId) {
		deletedID
	}
}
`

func (c *Client) DeleteUser(ctx context.Context, deleteUserID string, interceptors ...clientv2.RequestInterceptor) (*DeleteUser, error) {
	vars := map[string]any{
		"deleteUserId": deleteUserID,
	}

	var res DeleteUser
	if err := c.Client.Post(ctx, "DeleteUser", DeleteUserDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllUsersDocument = `query GetAllUsers {
	users {
		edges {
			node {
				authProvider
				avatarLocalFile
				avatarRemoteURL
				avatarLocalFileID
				displayName
				email
				firstName
				id
				lastName
				lastSeen
				sub
				tags
				setting {
					defaultOrg {
						id
						name
						personalOrg
					}
					createdAt
					createdBy
					emailConfirmed
					locked
					silencedAt
					status
					suspendedAt
					tags
					updatedAt
					updatedBy
				}
				createdAt
				createdBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllUsers(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUsers, error) {
	vars := map[string]any{}

	var res GetAllUsers
	if err := c.Client.Post(ctx, "GetAllUsers", GetAllUsersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserByIDDocument = `query GetUserByID ($userId: ID!) {
	user(id: $userId) {
		authProvider
		avatarLocalFile
		avatarRemoteURL
		avatarLocalFileID
		displayName
		email
		firstName
		id
		lastName
		lastSeen
		sub
		tags
		setting {
			defaultOrg {
				id
				name
				personalOrg
			}
			createdAt
			createdBy
			emailConfirmed
			locked
			silencedAt
			status
			suspendedAt
			tags
			updatedAt
			updatedBy
		}
		organizations {
			id
			name
			personalOrg
			members {
				id
				role
			}
		}
		updatedAt
		updatedBy
		createdAt
		createdBy
	}
}
`

func (c *Client) GetUserByID(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor) (*GetUserByID, error) {
	vars := map[string]any{
		"userId": userID,
	}

	var res GetUserByID
	if err := c.Client.Post(ctx, "GetUserByID", GetUserByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserByIDWithOrgsDocument = `query GetUserByIDWithOrgs ($userId: ID!) {
	user(id: $userId) {
		authProvider
		avatarLocalFile
		avatarRemoteURL
		avatarLocalFileID
		displayName
		email
		firstName
		id
		lastName
		lastSeen
		sub
		tags
		setting {
			defaultOrg {
				id
				name
				personalOrg
			}
			createdAt
			createdBy
			emailConfirmed
			locked
			silencedAt
			status
			suspendedAt
			tags
			updatedAt
			updatedBy
		}
		orgMemberships {
			id
			role
			user {
				firstName
				lastName
			}
		}
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetUserByIDWithOrgs(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor) (*GetUserByIDWithOrgs, error) {
	vars := map[string]any{
		"userId": userID,
	}

	var res GetUserByIDWithOrgs
	if err := c.Client.Post(ctx, "GetUserByIDWithOrgs", GetUserByIDWithOrgsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateUserDocument = `mutation UpdateUser ($updateUserId: ID!, $input: UpdateUserInput!, $avatarFile: Upload) {
	updateUser(id: $updateUserId, input: $input, avatarFile: $avatarFile) {
		user {
			authProvider
			avatarLocalFile
			avatarRemoteURL
			avatarLocalFileID
			displayName
			email
			firstName
			id
			lastName
			sub
			tags
			groupMemberships {
				id
			}
			orgMemberships {
				id
			}
			setting {
				defaultOrg {
					id
					name
					personalOrg
				}
				createdAt
				createdBy
				emailConfirmed
				locked
				silencedAt
				status
				suspendedAt
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) UpdateUser(ctx context.Context, updateUserID string, input UpdateUserInput, avatarFile *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UpdateUser, error) {
	vars := map[string]any{
		"updateUserId": updateUserID,
		"input":        input,
		"avatarFile":   avatarFile,
	}

	var res UpdateUser
	if err := c.Client.Post(ctx, "UpdateUser", UpdateUserDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllUserHistoriesDocument = `query GetAllUserHistories {
	userHistories {
		edges {
			node {
				authProvider
				avatarLocalFile
				avatarRemoteURL
				avatarUpdatedAt
				createdAt
				createdBy
				displayName
				email
				firstName
				historyTime
				id
				lastName
				lastSeen
				operation
				ref
				role
				sub
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllUserHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserHistories, error) {
	vars := map[string]any{}

	var res GetAllUserHistories
	if err := c.Client.Post(ctx, "GetAllUserHistories", GetAllUserHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserHistoriesDocument = `query GetUserHistories ($where: UserHistoryWhereInput) {
	userHistories(where: $where) {
		edges {
			node {
				authProvider
				avatarLocalFile
				avatarRemoteURL
				avatarUpdatedAt
				createdAt
				createdBy
				displayName
				email
				firstName
				historyTime
				id
				lastName
				lastSeen
				operation
				ref
				role
				sub
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetUserHistories(ctx context.Context, where *UserHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetUserHistories
	if err := c.Client.Post(ctx, "GetUserHistories", GetUserHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllUserSettingsDocument = `query GetAllUserSettings {
	userSettings {
		edges {
			node {
				id
				silencedAt
				status
				defaultOrg {
					id
					name
					personalOrg
				}
				tags
				locked
				isTfaEnabled
				emailConfirmed
				createdAt
				createdBy
				deletedAt
				deletedBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllUserSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserSettings, error) {
	vars := map[string]any{}

	var res GetAllUserSettings
	if err := c.Client.Post(ctx, "GetAllUserSettings", GetAllUserSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserSettingByIDDocument = `query GetUserSettingByID ($userSettingId: ID!) {
	userSetting(id: $userSettingId) {
		id
		silencedAt
		status
		defaultOrg {
			id
			name
			personalOrg
		}
		tags
		locked
		isTfaEnabled
		emailConfirmed
		createdAt
		createdBy
		deletedAt
		deletedBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetUserSettingByID(ctx context.Context, userSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetUserSettingByID, error) {
	vars := map[string]any{
		"userSettingId": userSettingID,
	}

	var res GetUserSettingByID
	if err := c.Client.Post(ctx, "GetUserSettingByID", GetUserSettingByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserSettingsDocument = `query GetUserSettings ($where: UserSettingWhereInput!) {
	userSettings(where: $where) {
		edges {
			node {
				id
				silencedAt
				status
				defaultOrg {
					id
					name
					personalOrg
				}
				tags
				locked
				isTfaEnabled
				emailConfirmed
				createdAt
				createdBy
				deletedAt
				deletedBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetUserSettings(ctx context.Context, where UserSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserSettings, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetUserSettings
	if err := c.Client.Post(ctx, "GetUserSettings", GetUserSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateUserSettingDocument = `mutation UpdateUserSetting ($updateUserSettingId: ID!, $input: UpdateUserSettingInput!) {
	updateUserSetting(id: $updateUserSettingId, input: $input) {
		userSetting {
			id
			silencedAt
			status
			defaultOrg {
				id
				name
				personalOrg
			}
			tags
			locked
			isTfaEnabled
			emailConfirmed
			createdAt
			createdBy
			deletedAt
			deletedBy
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateUserSetting(ctx context.Context, updateUserSettingID string, input UpdateUserSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUserSetting, error) {
	vars := map[string]any{
		"updateUserSettingId": updateUserSettingID,
		"input":               input,
	}

	var res UpdateUserSetting
	if err := c.Client.Post(ctx, "UpdateUserSetting", UpdateUserSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllUserSettingHistoriesDocument = `query GetAllUserSettingHistories {
	userSettingHistories {
		edges {
			node {
				createdAt
				createdBy
				emailConfirmed
				historyTime
				id
				isTfaEnabled
				isWebauthnAllowed
				locked
				operation
				ref
				silencedAt
				status
				suspendedAt
				tags
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetAllUserSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserSettingHistories, error) {
	vars := map[string]any{}

	var res GetAllUserSettingHistories
	if err := c.Client.Post(ctx, "GetAllUserSettingHistories", GetAllUserSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserSettingHistoriesDocument = `query GetUserSettingHistories ($where: UserSettingHistoryWhereInput) {
	userSettingHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				emailConfirmed
				historyTime
				id
				isTfaEnabled
				isWebauthnAllowed
				locked
				operation
				ref
				silencedAt
				status
				suspendedAt
				tags
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetUserSettingHistories(ctx context.Context, where *UserSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserSettingHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetUserSettingHistories
	if err := c.Client.Post(ctx, "GetUserSettingHistories", GetUserSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetWebhookByIDDocument = `query GetWebhookByID ($webhookId: ID!) {
	webhook(id: $webhookId) {
		createdAt
		createdBy
		description
		destinationURL
		enabled
		failures
		id
		lastError
		lastResponse
		name
		ownerID
		updatedAt
		updatedBy
		events {
			id
		}
	}
}
`

func (c *Client) GetWebhookByID(ctx context.Context, webhookID string, interceptors ...clientv2.RequestInterceptor) (*GetWebhookByID, error) {
	vars := map[string]any{
		"webhookId": webhookID,
	}

	var res GetWebhookByID
	if err := c.Client.Post(ctx, "GetWebhookByID", GetWebhookByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllWebhooksDocument = `query GetAllWebhooks {
	webhooks {
		edges {
			node {
				createdAt
				createdBy
				description
				destinationURL
				enabled
				failures
				id
				lastError
				lastResponse
				name
				ownerID
				updatedAt
				updatedBy
				events {
					id
				}
			}
		}
	}
}
`

func (c *Client) GetAllWebhooks(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllWebhooks, error) {
	vars := map[string]any{}

	var res GetAllWebhooks
	if err := c.Client.Post(ctx, "GetAllWebhooks", GetAllWebhooksDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateWebhookDocument = `mutation CreateWebhook ($input: CreateWebhookInput!) {
	createWebhook(input: $input) {
		webhook {
			description
			destinationURL
			enabled
			failures
			id
			lastError
			lastResponse
			name
			ownerID
			events {
				id
			}
		}
	}
}
`

func (c *Client) CreateWebhook(ctx context.Context, input CreateWebhookInput, interceptors ...clientv2.RequestInterceptor) (*CreateWebhook, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateWebhook
	if err := c.Client.Post(ctx, "CreateWebhook", CreateWebhookDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkWebhookDocument = `mutation CreateBulkWebhook ($input: [CreateWebhookInput!]) {
	createBulkWebhook(input: $input) {
		webhooks {
			description
			destinationURL
			enabled
			failures
			id
			lastError
			lastResponse
			name
			ownerID
		}
	}
}
`

func (c *Client) CreateBulkWebhook(ctx context.Context, input []*CreateWebhookInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkWebhook, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkWebhook
	if err := c.Client.Post(ctx, "CreateBulkWebhook", CreateBulkWebhookDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVWebhookDocument = `mutation CreateBulkCSVWebhook ($input: Upload!) {
	createBulkCSVWebhook(input: $input) {
		webhooks {
			description
			destinationURL
			enabled
			failures
			id
			lastError
			lastResponse
			name
			ownerID
		}
	}
}
`

func (c *Client) CreateBulkCSVWebhook(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVWebhook, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVWebhook
	if err := c.Client.Post(ctx, "CreateBulkCSVWebhook", CreateBulkCSVWebhookDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateWebhookDocument = `mutation UpdateWebhook ($updateWebhookId: ID!, $input: UpdateWebhookInput!) {
	updateWebhook(id: $updateWebhookId, input: $input) {
		webhook {
			createdAt
			createdBy
			description
			destinationURL
			enabled
			failures
			id
			lastError
			lastResponse
			name
			ownerID
			updatedAt
			updatedBy
			events {
				id
			}
		}
	}
}
`

func (c *Client) UpdateWebhook(ctx context.Context, updateWebhookID string, input UpdateWebhookInput, interceptors ...clientv2.RequestInterceptor) (*UpdateWebhook, error) {
	vars := map[string]any{
		"updateWebhookId": updateWebhookID,
		"input":           input,
	}

	var res UpdateWebhook
	if err := c.Client.Post(ctx, "UpdateWebhook", UpdateWebhookDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteWebhookDocument = `mutation DeleteWebhook ($deleteWebhookId: ID!) {
	deleteWebhook(id: $deleteWebhookId) {
		deletedID
	}
}
`

func (c *Client) DeleteWebhook(ctx context.Context, deleteWebhookID string, interceptors ...clientv2.RequestInterceptor) (*DeleteWebhook, error) {
	vars := map[string]any{
		"deleteWebhookId": deleteWebhookID,
	}

	var res DeleteWebhook
	if err := c.Client.Post(ctx, "DeleteWebhook", DeleteWebhookDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllWebhookHistoriesDocument = `query GetAllWebhookHistories {
	webhookHistories {
		edges {
			node {
				createdAt
				createdBy
				description
				destinationURL
				enabled
				failures
				historyTime
				id
				lastError
				lastResponse
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllWebhookHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllWebhookHistories, error) {
	vars := map[string]any{}

	var res GetAllWebhookHistories
	if err := c.Client.Post(ctx, "GetAllWebhookHistories", GetAllWebhookHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetWebhookHistoriesDocument = `query GetWebhookHistories ($where: WebhookHistoryWhereInput) {
	webhookHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				destinationURL
				enabled
				failures
				historyTime
				id
				lastError
				lastResponse
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetWebhookHistories(ctx context.Context, where *WebhookHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetWebhookHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetWebhookHistories
	if err := c.Client.Post(ctx, "GetWebhookHistories", GetWebhookHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	CreateBulkCSVActionPlanDocument:               "CreateBulkCSVActionPlan",
	CreateBulkActionPlanDocument:                  "CreateBulkActionPlan",
	CreateActionPlanDocument:                      "CreateActionPlan",
	DeleteActionPlanDocument:                      "DeleteActionPlan",
	GetAllActionPlansDocument:                     "GetAllActionPlans",
	GetActionPlanByIDDocument:                     "GetActionPlanByID",
	GetActionPlansDocument:                        "GetActionPlans",
	UpdateActionPlanDocument:                      "UpdateActionPlan",
	GetAllActionPlanHistoriesDocument:             "GetAllActionPlanHistories",
	GetActionPlanHistoriesDocument:                "GetActionPlanHistories",
	AdminSearchDocument:                           "AdminSearch",
	CreateAPITokenDocument:                        "CreateAPIToken",
	UpdateAPITokenDocument:                        "UpdateAPIToken",
	GetAllAPITokensDocument:                       "GetAllAPITokens",
	GetAPITokenByIDDocument:                       "GetAPITokenByID",
	DeleteAPITokenDocument:                        "DeleteAPIToken",
	CreateBulkContactDocument:                     "CreateBulkContact",
	CreateBulkCSVContactDocument:                  "CreateBulkCSVContact",
	CreateContactDocument:                         "CreateContact",
	DeleteContactDocument:                         "DeleteContact",
	GetAllContactsDocument:                        "GetAllContacts",
	GetContactByIDDocument:                        "GetContactByID",
	GetContactsDocument:                           "GetContacts",
	UpdateContactDocument:                         "UpdateContact",
	GetAllContactHistoriesDocument:                "GetAllContactHistories",
	GetContactHistoriesDocument:                   "GetContactHistories",
	CreateBulkCSVControlDocument:                  "CreateBulkCSVControl",
	CreateBulkControlDocument:                     "CreateBulkControl",
	CreateControlDocument:                         "CreateControl",
	DeleteControlDocument:                         "DeleteControl",
	GetAllControlsDocument:                        "GetAllControls",
	GetControlByIDDocument:                        "GetControlByID",
	GetControlsDocument:                           "GetControls",
	UpdateControlDocument:                         "UpdateControl",
	GetAllControlHistoriesDocument:                "GetAllControlHistories",
	GetControlHistoriesDocument:                   "GetControlHistories",
	CreateBulkCSVControlObjectiveDocument:         "CreateBulkCSVControlObjective",
	CreateBulkControlObjectiveDocument:            "CreateBulkControlObjective",
	CreateControlObjectiveDocument:                "CreateControlObjective",
	DeleteControlObjectiveDocument:                "DeleteControlObjective",
	GetAllControlObjectivesDocument:               "GetAllControlObjectives",
	GetControlObjectiveByIDDocument:               "GetControlObjectiveByID",
	GetControlObjectivesDocument:                  "GetControlObjectives",
	UpdateControlObjectiveDocument:                "UpdateControlObjective",
	GetAllControlObjectiveHistoriesDocument:       "GetAllControlObjectiveHistories",
	GetControlObjectiveHistoriesDocument:          "GetControlObjectiveHistories",
	CreateDocumentDataDocument:                    "CreateDocumentData",
	DeleteDocumentDataDocument:                    "DeleteDocumentData",
	GetDocumentDataByIDDocument:                   "GetDocumentDataByID",
	UpdateDocumentDataDocument:                    "UpdateDocumentData",
	GetAllDocumentDataHistoriesDocument:           "GetAllDocumentDataHistories",
	GetDocumentDataHistoriesDocument:              "GetDocumentDataHistories",
	CreateBulkCSVEntitlementDocument:              "CreateBulkCSVEntitlement",
	CreateBulkEntitlementDocument:                 "CreateBulkEntitlement",
	CreateEntitlementDocument:                     "CreateEntitlement",
	DeleteEntitlementDocument:                     "DeleteEntitlement",
	GetAllEntitlementsDocument:                    "GetAllEntitlements",
	GetEntitlementByIDDocument:                    "GetEntitlementByID",
	GetEntitlementsDocument:                       "GetEntitlements",
	UpdateEntitlementDocument:                     "UpdateEntitlement",
	GetAllEntitlementHistoriesDocument:            "GetAllEntitlementHistories",
	GetEntitlementHistoriesDocument:               "GetEntitlementHistories",
	CreateBulkCSVEntitlementPlanDocument:          "CreateBulkCSVEntitlementPlan",
	CreateBulkEntitlementPlanDocument:             "CreateBulkEntitlementPlan",
	CreateEntitlementPlanDocument:                 "CreateEntitlementPlan",
	DeleteEntitlementPlanDocument:                 "DeleteEntitlementPlan",
	GetAllEntitlementPlansDocument:                "GetAllEntitlementPlans",
	GetEntitlementPlanByIDDocument:                "GetEntitlementPlanByID",
	GetEntitlementPlansDocument:                   "GetEntitlementPlans",
	UpdateEntitlementPlanDocument:                 "UpdateEntitlementPlan",
	CreateBulkCSVEntitlementPlanFeatureDocument:   "CreateBulkCSVEntitlementPlanFeature",
	CreateBulkEntitlementPlanFeatureDocument:      "CreateBulkEntitlementPlanFeature",
	CreateEntitlementPlanFeatureDocument:          "CreateEntitlementPlanFeature",
	DeleteEntitlementPlanFeatureDocument:          "DeleteEntitlementPlanFeature",
	GetAllEntitlementPlanFeaturesDocument:         "GetAllEntitlementPlanFeatures",
	GetEntitlementPlanFeatureByIDDocument:         "GetEntitlementPlanFeatureByID",
	GetEntitlementPlanFeaturesDocument:            "GetEntitlementPlanFeatures",
	UpdateEntitlementPlanFeatureDocument:          "UpdateEntitlementPlanFeature",
	GetAllEntitlementPlanFeatureHistoriesDocument: "GetAllEntitlementPlanFeatureHistories",
	GetEntitlementPlanFeatureHistoriesDocument:    "GetEntitlementPlanFeatureHistories",
	GetAllEntitlementPlanHistoriesDocument:        "GetAllEntitlementPlanHistories",
	GetEntitlementPlanHistoriesDocument:           "GetEntitlementPlanHistories",
	CreateBulkCSVEntityDocument:                   "CreateBulkCSVEntity",
	CreateBulkEntityDocument:                      "CreateBulkEntity",
	CreateEntityDocument:                          "CreateEntity",
	DeleteEntityDocument:                          "DeleteEntity",
	GetAllEntitiesDocument:                        "GetAllEntities",
	GetEntitiesDocument:                           "GetEntities",
	GetEntityByIDDocument:                         "GetEntityByID",
	UpdateEntityDocument:                          "UpdateEntity",
	GetAllEntityHistoriesDocument:                 "GetAllEntityHistories",
	GetEntityHistoriesDocument:                    "GetEntityHistories",
	CreateBulkCSVEntityTypeDocument:               "CreateBulkCSVEntityType",
	CreateBulkEntityTypeDocument:                  "CreateBulkEntityType",
	CreateEntityTypeDocument:                      "CreateEntityType",
	DeleteEntityTypeDocument:                      "DeleteEntityType",
	GetAllEntityTypesDocument:                     "GetAllEntityTypes",
	GetEntityTypeByIDDocument:                     "GetEntityTypeByID",
	GetEntityTypesDocument:                        "GetEntityTypes",
	UpdateEntityTypeDocument:                      "UpdateEntityType",
	GetAllEntityTypeHistoriesDocument:             "GetAllEntityTypeHistories",
	GetEntityTypeHistoriesDocument:                "GetEntityTypeHistories",
	CreateBulkCSVEventDocument:                    "CreateBulkCSVEvent",
	CreateBulkEventDocument:                       "CreateBulkEvent",
	CreateEventDocument:                           "CreateEvent",
	DeleteEventDocument:                           "DeleteEvent",
	GetAllEventsDocument:                          "GetAllEvents",
	GetEventByIDDocument:                          "GetEventByID",
	GetEventsDocument:                             "GetEvents",
	UpdateEventDocument:                           "UpdateEvent",
	GetAllEventHistoriesDocument:                  "GetAllEventHistories",
	GetEventHistoriesDocument:                     "GetEventHistories",
	CreateBulkCSVFeatureDocument:                  "CreateBulkCSVFeature",
	CreateBulkFeatureDocument:                     "CreateBulkFeature",
	CreateFeatureDocument:                         "CreateFeature",
	DeleteFeatureDocument:                         "DeleteFeature",
	GetAllFeaturesDocument:                        "GetAllFeatures",
	GetFeatureByIDDocument:                        "GetFeatureByID",
	GetFeaturesDocument:                           "GetFeatures",
	UpdateFeatureDocument:                         "UpdateFeature",
	GetAllFeatureHistoriesDocument:                "GetAllFeatureHistories",
	GetFeatureHistoriesDocument:                   "GetFeatureHistories",
	DeleteFileDocument:                            "DeleteFile",
	GetAllFilesDocument:                           "GetAllFiles",
	GetFileByIDDocument:                           "GetFileByID",
	GetFilesDocument:                              "GetFiles",
	GetAllFileHistoriesDocument:                   "GetAllFileHistories",
	GetFileHistoriesDocument:                      "GetFileHistories",
	CreateBulkCSVGroupDocument:                    "CreateBulkCSVGroup",
	CreateBulkGroupDocument:                       "CreateBulkGroup",
	CreateGroupDocument:                           "CreateGroup",
	DeleteGroupDocument:                           "DeleteGroup",
	GetAllGroupsDocument:                          "GetAllGroups",
	GetGroupByIDDocument:                          "GetGroupByID",
	GetGroupsDocument:                             "GetGroups",
	UpdateGroupDocument:                           "UpdateGroup",
	GetAllGroupHistoriesDocument:                  "GetAllGroupHistories",
	GetGroupHistoriesDocument:                     "GetGroupHistories",
	AddUserToGroupWithRoleDocument:                "AddUserToGroupWithRole",
	CreateBulkCSVGroupMembersDocument:             "CreateBulkCSVGroupMembers",
	CreateBulkGroupMembersDocument:                "CreateBulkGroupMembers",
	GetGroupMembersByGroupIDDocument:              "GetGroupMembersByGroupID",
	RemoveUserFromGroupDocument:                   "RemoveUserFromGroup",
	UpdateUserRoleInGroupDocument:                 "UpdateUserRoleInGroup",
	GetAllGroupMembershipHistoriesDocument:        "GetAllGroupMembershipHistories",
	GetGroupMembershipHistoriesDocument:           "GetGroupMembershipHistories",
	GetAllGroupSettingsDocument:                   "GetAllGroupSettings",
	GetGroupSettingByIDDocument:                   "GetGroupSettingByID",
	GetGroupSettingsDocument:                      "GetGroupSettings",
	UpdateGroupSettingDocument:                    "UpdateGroupSetting",
	GetAllGroupSettingHistoriesDocument:           "GetAllGroupSettingHistories",
	GetGroupSettingHistoriesDocument:              "GetGroupSettingHistories",
	CreateBulkCSVHushDocument:                     "CreateBulkCSVHush",
	CreateBulkHushDocument:                        "CreateBulkHush",
	CreateHushDocument:                            "CreateHush",
	GetAllHushesDocument:                          "GetAllHushes",
	GetHushByIDDocument:                           "GetHushByID",
	GetHushesDocument:                             "GetHushes",
	UpdateHushDocument:                            "UpdateHush",
	GetAllHushHistoriesDocument:                   "GetAllHushHistories",
	GetHushHistoriesDocument:                      "GetHushHistories",
	CreateBulkCSVIntegrationDocument:              "CreateBulkCSVIntegration",
	CreateBulkIntegrationDocument:                 "CreateBulkIntegration",
	CreateIntegrationDocument:                     "CreateIntegration",
	DeleteIntegrationDocument:                     "DeleteIntegration",
	GetAllIntegrationsDocument:                    "GetAllIntegrations",
	GetIntegrationByIDDocument:                    "GetIntegrationByID",
	GetIntegrationsDocument:                       "GetIntegrations",
	UpdateIntegrationDocument:                     "UpdateIntegration",
	GetAllIntegrationHistoriesDocument:            "GetAllIntegrationHistories",
	GetIntegrationHistoriesDocument:               "GetIntegrationHistories",
	CreateBulkCSVInternalPolicyDocument:           "CreateBulkCSVInternalPolicy",
	CreateBulkInternalPolicyDocument:              "CreateBulkInternalPolicy",
	CreateInternalPolicyDocument:                  "CreateInternalPolicy",
	DeleteInternalPolicyDocument:                  "DeleteInternalPolicy",
	GetAllInternalPoliciesDocument:                "GetAllInternalPolicies",
	GetInternalPolicyByIDDocument:                 "GetInternalPolicyByID",
	GetInternalPoliciesDocument:                   "GetInternalPolicies",
	UpdateInternalPolicyDocument:                  "UpdateInternalPolicy",
	GetAllInternalPolicyHistoriesDocument:         "GetAllInternalPolicyHistories",
	GetInternalPolicyHistoriesDocument:            "GetInternalPolicyHistories",
	CreateBulkCSVInviteDocument:                   "CreateBulkCSVInvite",
	CreateBulkInviteDocument:                      "CreateBulkInvite",
	CreateInviteDocument:                          "CreateInvite",
	DeleteInviteDocument:                          "DeleteInvite",
	GetInviteByIDDocument:                         "GetInviteByID",
	GetAllInvitesDocument:                         "GetAllInvites",
	InvitesByOrgIDDocument:                        "InvitesByOrgID",
	CreateBulkCSVNarrativeDocument:                "CreateBulkCSVNarrative",
	CreateBulkNarrativeDocument:                   "CreateBulkNarrative",
	CreateNarrativeDocument:                       "CreateNarrative",
	DeleteNarrativeDocument:                       "DeleteNarrative",
	GetAllNarrativesDocument:                      "GetAllNarratives",
	GetNarrativeByIDDocument:                      "GetNarrativeByID",
	GetNarrativesDocument:                         "GetNarratives",
	UpdateNarrativeDocument:                       "UpdateNarrative",
	GetAllNarrativeHistoriesDocument:              "GetAllNarrativeHistories",
	GetNarrativeHistoriesDocument:                 "GetNarrativeHistories",
	GetAllNoteHistoriesDocument:                   "GetAllNoteHistories",
	GetNoteHistoriesDocument:                      "GetNoteHistories",
	GetAllOauthProviderHistoriesDocument:          "GetAllOauthProviderHistories",
	GetOauthProviderHistoriesDocument:             "GetOauthProviderHistories",
	CreateBulkCSVOhAuthTooTokenDocument:           "CreateBulkCSVOhAuthTooToken",
	CreateBulkOhAuthTooTokenDocument:              "CreateBulkOhAuthTooToken",
	CreateOhAuthTooTokenDocument:                  "CreateOhAuthTooToken",
	DeleteOhAuthTooTokenDocument:                  "DeleteOhAuthTooToken",
	GetOhAuthTooTokensDocument:                    "GetOhAuthTooTokens",
	UpdateOhAuthTooTokenDocument:                  "UpdateOhAuthTooToken",
	CreateBulkCSVOrganizationDocument:             "CreateBulkCSVOrganization",
	CreateBulkOrganizationDocument:                "CreateBulkOrganization",
	CreateOrganizationDocument:                    "CreateOrganization",
	DeleteOrganizationDocument:                    "DeleteOrganization",
	GetAllOrganizationsDocument:                   "GetAllOrganizations",
	GetOrganizationByIDDocument:                   "GetOrganizationByID",
	GetOrganizationsDocument:                      "GetOrganizations",
	UpdateOrganizationDocument:                    "UpdateOrganization",
	GetAllOrganizationHistoriesDocument:           "GetAllOrganizationHistories",
	GetOrganizationHistoriesDocument:              "GetOrganizationHistories",
	GetAllOrganizationSettingsDocument:            "GetAllOrganizationSettings",
	GetOrganizationSettingByIDDocument:            "GetOrganizationSettingByID",
	GetOrganizationSettingsDocument:               "GetOrganizationSettings",
	UpdateOrganizationSettingDocument:             "UpdateOrganizationSetting",
	GetAllOrganizationSettingHistoriesDocument:    "GetAllOrganizationSettingHistories",
	GetOrganizationSettingHistoriesDocument:       "GetOrganizationSettingHistories",
	AddUserToOrgWithRoleDocument:                  "AddUserToOrgWithRole",
	CreateBulkCSVOrgMembersDocument:               "CreateBulkCSVOrgMembers",
	CreateBulkOrgMembersDocument:                  "CreateBulkOrgMembers",
	GetOrgMembersByOrgIDDocument:                  "GetOrgMembersByOrgID",
	RemoveUserFromOrgDocument:                     "RemoveUserFromOrg",
	UpdateUserRoleInOrgDocument:                   "UpdateUserRoleInOrg",
	GetAllOrgMembershipHistoriesDocument:          "GetAllOrgMembershipHistories",
	GetOrgMembershipHistoriesDocument:             "GetOrgMembershipHistories",
	CreateBulkCSVPersonalAccessTokenDocument:      "CreateBulkCSVPersonalAccessToken",
	CreateBulkPersonalAccessTokenDocument:         "CreateBulkPersonalAccessToken",
	CreatePersonalAccessTokenDocument:             "CreatePersonalAccessToken",
	DeletePersonalAccessTokenDocument:             "DeletePersonalAccessToken",
	GetAllPersonalAccessTokensDocument:            "GetAllPersonalAccessTokens",
	GetPersonalAccessTokenByIDDocument:            "GetPersonalAccessTokenByID",
	UpdatePersonalAccessTokenDocument:             "UpdatePersonalAccessToken",
	CreateBulkCSVProcedureDocument:                "CreateBulkCSVProcedure",
	CreateBulkProcedureDocument:                   "CreateBulkProcedure",
	CreateProcedureDocument:                       "CreateProcedure",
	DeleteProcedureDocument:                       "DeleteProcedure",
	GetAllProceduresDocument:                      "GetAllProcedures",
	GetProcedureByIDDocument:                      "GetProcedureByID",
	GetProceduresDocument:                         "GetProcedures",
	UpdateProcedureDocument:                       "UpdateProcedure",
	GetAllProcedureHistoriesDocument:              "GetAllProcedureHistories",
	GetProcedureHistoriesDocument:                 "GetProcedureHistories",
	CreateBulkCSVProgramDocument:                  "CreateBulkCSVProgram",
	CreateBulkProgramDocument:                     "CreateBulkProgram",
	CreateProgramDocument:                         "CreateProgram",
	DeleteProgramDocument:                         "DeleteProgram",
	GetAllProgramsDocument:                        "GetAllPrograms",
	GetProgramByIDDocument:                        "GetProgramByID",
	GetProgramsDocument:                           "GetPrograms",
	UpdateProgramDocument:                         "UpdateProgram",
	GetAllProgramHistoriesDocument:                "GetAllProgramHistories",
	GetProgramHistoriesDocument:                   "GetProgramHistories",
	CreateBulkCSVProgramMembershipDocument:        "CreateBulkCSVProgramMembership",
	CreateBulkProgramMembershipDocument:           "CreateBulkProgramMembership",
	CreateProgramMembershipDocument:               "CreateProgramMembership",
	DeleteProgramMembershipDocument:               "DeleteProgramMembership",
	GetAllProgramMembershipsDocument:              "GetAllProgramMemberships",
	GetProgramMembershipByIDDocument:              "GetProgramMembershipByID",
	GetProgramMembershipsDocument:                 "GetProgramMemberships",
	UpdateProgramMembershipDocument:               "UpdateProgramMembership",
	GetAllProgramMembershipHistoriesDocument:      "GetAllProgramMembershipHistories",
	GetProgramMembershipHistoriesDocument:         "GetProgramMembershipHistories",
	CreateBulkCSVRiskDocument:                     "CreateBulkCSVRisk",
	CreateBulkRiskDocument:                        "CreateBulkRisk",
	CreateRiskDocument:                            "CreateRisk",
	DeleteRiskDocument:                            "DeleteRisk",
	GetAllRisksDocument:                           "GetAllRisks",
	GetRiskByIDDocument:                           "GetRiskByID",
	GetRisksDocument:                              "GetRisks",
	UpdateRiskDocument:                            "UpdateRisk",
	GetAllRiskHistoriesDocument:                   "GetAllRiskHistories",
	GetRiskHistoriesDocument:                      "GetRiskHistories",
	GlobalSearchDocument:                          "GlobalSearch",
	CreateBulkCSVStandardDocument:                 "CreateBulkCSVStandard",
	CreateBulkStandardDocument:                    "CreateBulkStandard",
	CreateStandardDocument:                        "CreateStandard",
	DeleteStandardDocument:                        "DeleteStandard",
	GetAllStandardsDocument:                       "GetAllStandards",
	GetStandardByIDDocument:                       "GetStandardByID",
	GetStandardsDocument:                          "GetStandards",
	UpdateStandardDocument:                        "UpdateStandard",
	GetAllStandardHistoriesDocument:               "GetAllStandardHistories",
	GetStandardHistoriesDocument:                  "GetStandardHistories",
	CreateBulkCSVSubcontrolDocument:               "CreateBulkCSVSubcontrol",
	CreateBulkSubcontrolDocument:                  "CreateBulkSubcontrol",
	CreateSubcontrolDocument:                      "CreateSubcontrol",
	DeleteSubcontrolDocument:                      "DeleteSubcontrol",
	GetAllSubcontrolsDocument:                     "GetAllSubcontrols",
	GetSubcontrolByIDDocument:                     "GetSubcontrolByID",
	GetSubcontrolsDocument:                        "GetSubcontrols",
	UpdateSubcontrolDocument:                      "UpdateSubcontrol",
	GetAllSubcontrolHistoriesDocument:             "GetAllSubcontrolHistories",
	GetSubcontrolHistoriesDocument:                "GetSubcontrolHistories",
	CreateBulkCSVSubscriberDocument:               "CreateBulkCSVSubscriber",
	CreateBulkSubscriberDocument:                  "CreateBulkSubscriber",
	CreateSubscriberDocument:                      "CreateSubscriber",
	DeleteSubscriberDocument:                      "DeleteSubscriber",
	GetAllSubscribersDocument:                     "GetAllSubscribers",
	GetSubscriberByEmailDocument:                  "GetSubscriberByEmail",
	GetSubscribersDocument:                        "GetSubscribers",
	UpdateSubscriberDocument:                      "UpdateSubscriber",
	CreateBulkCSVTaskDocument:                     "CreateBulkCSVTask",
	CreateBulkTaskDocument:                        "CreateBulkTask",
	CreateTaskDocument:                            "CreateTask",
	DeleteTaskDocument:                            "DeleteTask",
	GetAllTasksDocument:                           "GetAllTasks",
	GetTaskByIDDocument:                           "GetTaskByID",
	GetTasksDocument:                              "GetTasks",
	UpdateTaskDocument:                            "UpdateTask",
	GetAllTaskHistoriesDocument:                   "GetAllTaskHistories",
	GetTaskHistoriesDocument:                      "GetTaskHistories",
	CreateBulkCSVTemplateDocument:                 "CreateBulkCSVTemplate",
	CreateBulkTemplateDocument:                    "CreateBulkTemplate",
	CreateTemplateDocument:                        "CreateTemplate",
	GetAllTemplatesDocument:                       "GetAllTemplates",
	GetTemplateByIDDocument:                       "GetTemplateByID",
	UpdateTemplateDocument:                        "UpdateTemplate",
	GetAllTemplateHistoriesDocument:               "GetAllTemplateHistories",
	GetTemplateHistoriesDocument:                  "GetTemplateHistories",
	CreateTFASettingDocument:                      "CreateTFASetting",
	GetAllTFASettingsDocument:                     "GetAllTFASettings",
	GetTFASettingDocument:                         "GetTFASetting",
	UpdateTFASettingDocument:                      "UpdateTFASetting",
	CreateUserDocument:                            "CreateUser",
	DeleteUserDocument:                            "DeleteUser",
	GetAllUsersDocument:                           "GetAllUsers",
	GetUserByIDDocument:                           "GetUserByID",
	GetUserByIDWithOrgsDocument:                   "GetUserByIDWithOrgs",
	UpdateUserDocument:                            "UpdateUser",
	GetAllUserHistoriesDocument:                   "GetAllUserHistories",
	GetUserHistoriesDocument:                      "GetUserHistories",
	GetAllUserSettingsDocument:                    "GetAllUserSettings",
	GetUserSettingByIDDocument:                    "GetUserSettingByID",
	GetUserSettingsDocument:                       "GetUserSettings",
	UpdateUserSettingDocument:                     "UpdateUserSetting",
	GetAllUserSettingHistoriesDocument:            "GetAllUserSettingHistories",
	GetUserSettingHistoriesDocument:               "GetUserSettingHistories",
	GetWebhookByIDDocument:                        "GetWebhookByID",
	GetAllWebhooksDocument:                        "GetAllWebhooks",
	CreateWebhookDocument:                         "CreateWebhook",
	CreateBulkWebhookDocument:                     "CreateBulkWebhook",
	CreateBulkCSVWebhookDocument:                  "CreateBulkCSVWebhook",
	UpdateWebhookDocument:                         "UpdateWebhook",
	DeleteWebhookDocument:                         "DeleteWebhook",
	GetAllWebhookHistoriesDocument:                "GetAllWebhookHistories",
	GetWebhookHistoriesDocument:                   "GetWebhookHistories",
}
