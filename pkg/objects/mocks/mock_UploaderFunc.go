// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	objects "github.com/theopenlane/core/pkg/objects"
)

// MockUploaderFunc is an autogenerated mock type for the UploaderFunc type
type MockUploaderFunc struct {
	mock.Mock
}

type MockUploaderFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUploaderFunc) EXPECT() *MockUploaderFunc_Expecter {
	return &MockUploaderFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, u, files
func (_m *MockUploaderFunc) Execute(ctx context.Context, u *objects.Objects, files []objects.FileUpload) ([]objects.File, error) {
	ret := _m.Called(ctx, u, files)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 []objects.File
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *objects.Objects, []objects.FileUpload) ([]objects.File, error)); ok {
		return rf(ctx, u, files)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *objects.Objects, []objects.FileUpload) []objects.File); ok {
		r0 = rf(ctx, u, files)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]objects.File)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *objects.Objects, []objects.FileUpload) error); ok {
		r1 = rf(ctx, u, files)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUploaderFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockUploaderFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - u *objects.Objects
//   - files []objects.FileUpload
func (_e *MockUploaderFunc_Expecter) Execute(ctx interface{}, u interface{}, files interface{}) *MockUploaderFunc_Execute_Call {
	return &MockUploaderFunc_Execute_Call{Call: _e.mock.On("Execute", ctx, u, files)}
}

func (_c *MockUploaderFunc_Execute_Call) Run(run func(ctx context.Context, u *objects.Objects, files []objects.FileUpload)) *MockUploaderFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*objects.Objects), args[2].([]objects.FileUpload))
	})
	return _c
}

func (_c *MockUploaderFunc_Execute_Call) Return(_a0 []objects.File, _a1 error) *MockUploaderFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUploaderFunc_Execute_Call) RunAndReturn(run func(context.Context, *objects.Objects, []objects.FileUpload) ([]objects.File, error)) *MockUploaderFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUploaderFunc creates a new instance of MockUploaderFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUploaderFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUploaderFunc {
	mock := &MockUploaderFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
