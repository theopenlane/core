// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"io"
	"time"

	mock "github.com/stretchr/testify/mock"
	"github.com/theopenlane/core/pkg/objects/storage/types"
)

// NewMockProvider creates a new instance of MockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvider {
	mock := &MockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

type MockProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvider) EXPECT() *MockProvider_Expecter {
	return &MockProvider_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockProvider
func (_mock *MockProvider) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProvider_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockProvider_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockProvider_Expecter) Close() *MockProvider_Close_Call {
	return &MockProvider_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockProvider_Close_Call) Run(run func()) *MockProvider_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProvider_Close_Call) Return(err error) *MockProvider_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProvider_Close_Call) RunAndReturn(run func() error) *MockProvider_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockProvider
func (_mock *MockProvider) Delete(ctx context.Context, key string) error {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProvider_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProvider_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockProvider_Expecter) Delete(ctx interface{}, key interface{}) *MockProvider_Delete_Call {
	return &MockProvider_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *MockProvider_Delete_Call) Run(run func(ctx context.Context, key string)) *MockProvider_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProvider_Delete_Call) Return(err error) *MockProvider_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProvider_Delete_Call) RunAndReturn(run func(ctx context.Context, key string) error) *MockProvider_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Download provides a mock function for the type MockProvider
func (_mock *MockProvider) Download(ctx context.Context, opts *storagetypes.DownloadFileOptions) (*storagetypes.DownloadFileMetadata, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Download")
	}

	var r0 *storagetypes.DownloadFileMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *storagetypes.DownloadFileOptions) (*storagetypes.DownloadFileMetadata, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *storagetypes.DownloadFileOptions) *storagetypes.DownloadFileMetadata); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagetypes.DownloadFileMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *storagetypes.DownloadFileOptions) error); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProvider_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type MockProvider_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *storagetypes.DownloadFileOptions
func (_e *MockProvider_Expecter) Download(ctx interface{}, opts interface{}) *MockProvider_Download_Call {
	return &MockProvider_Download_Call{Call: _e.mock.On("Download", ctx, opts)}
}

func (_c *MockProvider_Download_Call) Run(run func(ctx context.Context, opts *storagetypes.DownloadFileOptions)) *MockProvider_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *storagetypes.DownloadFileOptions
		if args[1] != nil {
			arg1 = args[1].(*storagetypes.DownloadFileOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProvider_Download_Call) Return(downloadFileMetadata *storagetypes.DownloadFileMetadata, err error) *MockProvider_Download_Call {
	_c.Call.Return(downloadFileMetadata, err)
	return _c
}

func (_c *MockProvider_Download_Call) RunAndReturn(run func(ctx context.Context, opts *storagetypes.DownloadFileOptions) (*storagetypes.DownloadFileMetadata, error)) *MockProvider_Download_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockProvider
func (_mock *MockProvider) Exists(ctx context.Context, key string) (bool, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProvider_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockProvider_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockProvider_Expecter) Exists(ctx interface{}, key interface{}) *MockProvider_Exists_Call {
	return &MockProvider_Exists_Call{Call: _e.mock.On("Exists", ctx, key)}
}

func (_c *MockProvider_Exists_Call) Run(run func(ctx context.Context, key string)) *MockProvider_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProvider_Exists_Call) Return(b bool, err error) *MockProvider_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockProvider_Exists_Call) RunAndReturn(run func(ctx context.Context, key string) (bool, error)) *MockProvider_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// GetPresignedURL provides a mock function for the type MockProvider
func (_mock *MockProvider) GetPresignedURL(key string, expires time.Duration) (string, error) {
	ret := _mock.Called(key, expires)

	if len(ret) == 0 {
		panic("no return value specified for GetPresignedURL")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, time.Duration) (string, error)); ok {
		return returnFunc(key, expires)
	}
	if returnFunc, ok := ret.Get(0).(func(string, time.Duration) string); ok {
		r0 = returnFunc(key, expires)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, time.Duration) error); ok {
		r1 = returnFunc(key, expires)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProvider_GetPresignedURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPresignedURL'
type MockProvider_GetPresignedURL_Call struct {
	*mock.Call
}

// GetPresignedURL is a helper method to define mock.On call
//   - key string
//   - expires time.Duration
func (_e *MockProvider_Expecter) GetPresignedURL(key interface{}, expires interface{}) *MockProvider_GetPresignedURL_Call {
	return &MockProvider_GetPresignedURL_Call{Call: _e.mock.On("GetPresignedURL", key, expires)}
}

func (_c *MockProvider_GetPresignedURL_Call) Run(run func(key string, expires time.Duration)) *MockProvider_GetPresignedURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 time.Duration
		if args[1] != nil {
			arg1 = args[1].(time.Duration)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProvider_GetPresignedURL_Call) Return(s string, err error) *MockProvider_GetPresignedURL_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockProvider_GetPresignedURL_Call) RunAndReturn(run func(key string, expires time.Duration) (string, error)) *MockProvider_GetPresignedURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetScheme provides a mock function for the type MockProvider
func (_mock *MockProvider) GetScheme() *string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetScheme")
	}

	var r0 *string
	if returnFunc, ok := ret.Get(0).(func() *string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	return r0
}

// MockProvider_GetScheme_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScheme'
type MockProvider_GetScheme_Call struct {
	*mock.Call
}

// GetScheme is a helper method to define mock.On call
func (_e *MockProvider_Expecter) GetScheme() *MockProvider_GetScheme_Call {
	return &MockProvider_GetScheme_Call{Call: _e.mock.On("GetScheme")}
}

func (_c *MockProvider_GetScheme_Call) Run(run func()) *MockProvider_GetScheme_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProvider_GetScheme_Call) Return(s *string) *MockProvider_GetScheme_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockProvider_GetScheme_Call) RunAndReturn(run func() *string) *MockProvider_GetScheme_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function for the type MockProvider
func (_mock *MockProvider) Upload(ctx context.Context, reader io.Reader, opts *storagetypes.UploadFileOptions) (*storagetypes.UploadedFileMetadata, error) {
	ret := _mock.Called(ctx, reader, opts)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 *storagetypes.UploadedFileMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, io.Reader, *storagetypes.UploadFileOptions) (*storagetypes.UploadedFileMetadata, error)); ok {
		return returnFunc(ctx, reader, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, io.Reader, *storagetypes.UploadFileOptions) *storagetypes.UploadedFileMetadata); ok {
		r0 = returnFunc(ctx, reader, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagetypes.UploadedFileMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, io.Reader, *storagetypes.UploadFileOptions) error); ok {
		r1 = returnFunc(ctx, reader, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProvider_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockProvider_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - ctx context.Context
//   - reader io.Reader
//   - opts *storagetypes.UploadFileOptions
func (_e *MockProvider_Expecter) Upload(ctx interface{}, reader interface{}, opts interface{}) *MockProvider_Upload_Call {
	return &MockProvider_Upload_Call{Call: _e.mock.On("Upload", ctx, reader, opts)}
}

func (_c *MockProvider_Upload_Call) Run(run func(ctx context.Context, reader io.Reader, opts *storagetypes.UploadFileOptions)) *MockProvider_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 io.Reader
		if args[1] != nil {
			arg1 = args[1].(io.Reader)
		}
		var arg2 *storagetypes.UploadFileOptions
		if args[2] != nil {
			arg2 = args[2].(*storagetypes.UploadFileOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockProvider_Upload_Call) Return(uploadedFileMetadata *storagetypes.UploadedFileMetadata, err error) *MockProvider_Upload_Call {
	_c.Call.Return(uploadedFileMetadata, err)
	return _c
}

func (_c *MockProvider_Upload_Call) RunAndReturn(run func(ctx context.Context, reader io.Reader, opts *storagetypes.UploadFileOptions) (*storagetypes.UploadedFileMetadata, error)) *MockProvider_Upload_Call {
	_c.Call.Return(run)
	return _c
}
