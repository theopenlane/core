// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	objects "github.com/theopenlane/core/pkg/objects"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockStorage) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockStorage_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockStorage_Expecter) Close() *MockStorage_Close_Call {
	return &MockStorage_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockStorage_Close_Call) Run(run func()) *MockStorage_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorage_Close_Call) Return(_a0 error) *MockStorage_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Close_Call) RunAndReturn(run func() error) *MockStorage_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Download provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockStorage) Download(_a0 context.Context, _a1 string, _a2 *objects.DownloadFileOptions) (*objects.DownloadFileMetadata, io.ReadCloser, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Download")
	}

	var r0 *objects.DownloadFileMetadata
	var r1 io.ReadCloser
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *objects.DownloadFileOptions) (*objects.DownloadFileMetadata, io.ReadCloser, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *objects.DownloadFileOptions) *objects.DownloadFileMetadata); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*objects.DownloadFileMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *objects.DownloadFileOptions) io.ReadCloser); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *objects.DownloadFileOptions) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockStorage_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type MockStorage_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 *objects.DownloadFileOptions
func (_e *MockStorage_Expecter) Download(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockStorage_Download_Call {
	return &MockStorage_Download_Call{Call: _e.mock.On("Download", _a0, _a1, _a2)}
}

func (_c *MockStorage_Download_Call) Run(run func(_a0 context.Context, _a1 string, _a2 *objects.DownloadFileOptions)) *MockStorage_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*objects.DownloadFileOptions))
	})
	return _c
}

func (_c *MockStorage_Download_Call) Return(_a0 *objects.DownloadFileMetadata, _a1 io.ReadCloser, _a2 error) *MockStorage_Download_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockStorage_Download_Call) RunAndReturn(run func(context.Context, string, *objects.DownloadFileOptions) (*objects.DownloadFileMetadata, io.ReadCloser, error)) *MockStorage_Download_Call {
	_c.Call.Return(run)
	return _c
}

// GetPresignedURL provides a mock function with given fields: _a0, _a1
func (_m *MockStorage) GetPresignedURL(_a0 context.Context, _a1 string) (string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPresignedURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GetPresignedURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPresignedURL'
type MockStorage_GetPresignedURL_Call struct {
	*mock.Call
}

// GetPresignedURL is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockStorage_Expecter) GetPresignedURL(_a0 interface{}, _a1 interface{}) *MockStorage_GetPresignedURL_Call {
	return &MockStorage_GetPresignedURL_Call{Call: _e.mock.On("GetPresignedURL", _a0, _a1)}
}

func (_c *MockStorage_GetPresignedURL_Call) Run(run func(_a0 context.Context, _a1 string)) *MockStorage_GetPresignedURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_GetPresignedURL_Call) Return(_a0 string, _a1 error) *MockStorage_GetPresignedURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GetPresignedURL_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockStorage_GetPresignedURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetScheme provides a mock function with given fields:
func (_m *MockStorage) GetScheme() *string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetScheme")
	}

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// MockStorage_GetScheme_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScheme'
type MockStorage_GetScheme_Call struct {
	*mock.Call
}

// GetScheme is a helper method to define mock.On call
func (_e *MockStorage_Expecter) GetScheme() *MockStorage_GetScheme_Call {
	return &MockStorage_GetScheme_Call{Call: _e.mock.On("GetScheme")}
}

func (_c *MockStorage_GetScheme_Call) Run(run func()) *MockStorage_GetScheme_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorage_GetScheme_Call) Return(_a0 *string) *MockStorage_GetScheme_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_GetScheme_Call) RunAndReturn(run func() *string) *MockStorage_GetScheme_Call {
	_c.Call.Return(run)
	return _c
}

// ManagerUpload provides a mock function with given fields: _a0, _a1
func (_m *MockStorage) ManagerUpload(_a0 context.Context, _a1 [][]byte) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ManagerUpload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_ManagerUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ManagerUpload'
type MockStorage_ManagerUpload_Call struct {
	*mock.Call
}

// ManagerUpload is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 [][]byte
func (_e *MockStorage_Expecter) ManagerUpload(_a0 interface{}, _a1 interface{}) *MockStorage_ManagerUpload_Call {
	return &MockStorage_ManagerUpload_Call{Call: _e.mock.On("ManagerUpload", _a0, _a1)}
}

func (_c *MockStorage_ManagerUpload_Call) Run(run func(_a0 context.Context, _a1 [][]byte)) *MockStorage_ManagerUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([][]byte))
	})
	return _c
}

func (_c *MockStorage_ManagerUpload_Call) Return(_a0 error) *MockStorage_ManagerUpload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_ManagerUpload_Call) RunAndReturn(run func(context.Context, [][]byte) error) *MockStorage_ManagerUpload_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockStorage) Upload(_a0 context.Context, _a1 io.Reader, _a2 *objects.UploadFileOptions) (*objects.UploadedFileMetadata, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 *objects.UploadedFileMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, *objects.UploadFileOptions) (*objects.UploadedFileMetadata, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, *objects.UploadFileOptions) *objects.UploadedFileMetadata); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*objects.UploadedFileMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, io.Reader, *objects.UploadFileOptions) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockStorage_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 io.Reader
//   - _a2 *objects.UploadFileOptions
func (_e *MockStorage_Expecter) Upload(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockStorage_Upload_Call {
	return &MockStorage_Upload_Call{Call: _e.mock.On("Upload", _a0, _a1, _a2)}
}

func (_c *MockStorage_Upload_Call) Run(run func(_a0 context.Context, _a1 io.Reader, _a2 *objects.UploadFileOptions)) *MockStorage_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(io.Reader), args[2].(*objects.UploadFileOptions))
	})
	return _c
}

func (_c *MockStorage_Upload_Call) Return(_a0 *objects.UploadedFileMetadata, _a1 error) *MockStorage_Upload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_Upload_Call) RunAndReturn(run func(context.Context, io.Reader, *objects.UploadFileOptions) (*objects.UploadedFileMetadata, error)) *MockStorage_Upload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
