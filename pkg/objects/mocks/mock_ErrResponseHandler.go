// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockErrResponseHandler is an autogenerated mock type for the ErrResponseHandler type
type MockErrResponseHandler struct {
	mock.Mock
}

type MockErrResponseHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockErrResponseHandler) EXPECT() *MockErrResponseHandler_Expecter {
	return &MockErrResponseHandler_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: err, statusCode
func (_m *MockErrResponseHandler) Execute(err error, statusCode int) http.HandlerFunc {
	ret := _m.Called(err, statusCode)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 http.HandlerFunc
	if rf, ok := ret.Get(0).(func(error, int) http.HandlerFunc); ok {
		r0 = rf(err, statusCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.HandlerFunc)
		}
	}

	return r0
}

// MockErrResponseHandler_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockErrResponseHandler_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - err error
//   - statusCode int
func (_e *MockErrResponseHandler_Expecter) Execute(err interface{}, statusCode interface{}) *MockErrResponseHandler_Execute_Call {
	return &MockErrResponseHandler_Execute_Call{Call: _e.mock.On("Execute", err, statusCode)}
}

func (_c *MockErrResponseHandler_Execute_Call) Run(run func(err error, statusCode int)) *MockErrResponseHandler_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error), args[1].(int))
	})
	return _c
}

func (_c *MockErrResponseHandler_Execute_Call) Return(_a0 http.HandlerFunc) *MockErrResponseHandler_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockErrResponseHandler_Execute_Call) RunAndReturn(run func(error, int) http.HandlerFunc) *MockErrResponseHandler_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockErrResponseHandler creates a new instance of MockErrResponseHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockErrResponseHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockErrResponseHandler {
	mock := &MockErrResponseHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
