// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockNameGeneratorFunc is an autogenerated mock type for the NameGeneratorFunc type
type MockNameGeneratorFunc struct {
	mock.Mock
}

type MockNameGeneratorFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNameGeneratorFunc) EXPECT() *MockNameGeneratorFunc_Expecter {
	return &MockNameGeneratorFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: s
func (_m *MockNameGeneratorFunc) Execute(s string) string {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockNameGeneratorFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockNameGeneratorFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - s string
func (_e *MockNameGeneratorFunc_Expecter) Execute(s interface{}) *MockNameGeneratorFunc_Execute_Call {
	return &MockNameGeneratorFunc_Execute_Call{Call: _e.mock.On("Execute", s)}
}

func (_c *MockNameGeneratorFunc_Execute_Call) Run(run func(s string)) *MockNameGeneratorFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockNameGeneratorFunc_Execute_Call) Return(_a0 string) *MockNameGeneratorFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNameGeneratorFunc_Execute_Call) RunAndReturn(run func(string) string) *MockNameGeneratorFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNameGeneratorFunc creates a new instance of MockNameGeneratorFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNameGeneratorFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNameGeneratorFunc {
	mock := &MockNameGeneratorFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
