// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"io"

	mock "github.com/stretchr/testify/mock"
	"github.com/theopenlane/core/pkg/objects/storage"
)

// NewMockMutation creates a new instance of MockMutation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMutation(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMutation {
	mock := &MockMutation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMutation is an autogenerated mock type for the Mutation type
type MockMutation struct {
	mock.Mock
}

type MockMutation_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMutation) EXPECT() *MockMutation_Expecter {
	return &MockMutation_Expecter{mock: &_m.Mock}
}

// ID provides a mock function for the type MockMutation
func (_mock *MockMutation) ID() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMutation_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockMutation_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockMutation_Expecter) ID() *MockMutation_ID_Call {
	return &MockMutation_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockMutation_ID_Call) Run(run func()) *MockMutation_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMutation_ID_Call) Return(s string, err error) *MockMutation_ID_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockMutation_ID_Call) RunAndReturn(run func() (string, error)) *MockMutation_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function for the type MockMutation
func (_mock *MockMutation) Type() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockMutation_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockMutation_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockMutation_Expecter) Type() *MockMutation_Type_Call {
	return &MockMutation_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockMutation_Type_Call) Run(run func()) *MockMutation_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMutation_Type_Call) Return(s string) *MockMutation_Type_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockMutation_Type_Call) RunAndReturn(run func() string) *MockMutation_Type_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFileSource creates a new instance of MockFileSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileSource {
	mock := &MockFileSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFileSource is an autogenerated mock type for the FileSource type
type MockFileSource struct {
	mock.Mock
}

type MockFileSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileSource) EXPECT() *MockFileSource_Expecter {
	return &MockFileSource_Expecter{mock: &_m.Mock}
}

// NewMockFileUploader creates a new instance of MockFileUploader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileUploader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileUploader {
	mock := &MockFileUploader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFileUploader is an autogenerated mock type for the FileUploader type
type MockFileUploader struct {
	mock.Mock
}

type MockFileUploader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileUploader) EXPECT() *MockFileUploader_Expecter {
	return &MockFileUploader_Expecter{mock: &_m.Mock}
}

// Upload provides a mock function for the type MockFileUploader
func (_mock *MockFileUploader) Upload(ctx context.Context, reader io.Reader, opts *storage.UploadOptions) (*storage.File, error) {
	ret := _mock.Called(ctx, reader, opts)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 *storage.File
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, io.Reader, *storage.UploadOptions) (*storage.File, error)); ok {
		return returnFunc(ctx, reader, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, io.Reader, *storage.UploadOptions) *storage.File); ok {
		r0 = returnFunc(ctx, reader, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.File)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, io.Reader, *storage.UploadOptions) error); ok {
		r1 = returnFunc(ctx, reader, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileUploader_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockFileUploader_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - ctx context.Context
//   - reader io.Reader
//   - opts *storage.UploadOptions
func (_e *MockFileUploader_Expecter) Upload(ctx interface{}, reader interface{}, opts interface{}) *MockFileUploader_Upload_Call {
	return &MockFileUploader_Upload_Call{Call: _e.mock.On("Upload", ctx, reader, opts)}
}

func (_c *MockFileUploader_Upload_Call) Run(run func(ctx context.Context, reader io.Reader, opts *storage.UploadOptions)) *MockFileUploader_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 io.Reader
		if args[1] != nil {
			arg1 = args[1].(io.Reader)
		}
		var arg2 *storage.UploadOptions
		if args[2] != nil {
			arg2 = args[2].(*storage.UploadOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFileUploader_Upload_Call) Return(file *storage.File, err error) *MockFileUploader_Upload_Call {
	_c.Call.Return(file, err)
	return _c
}

func (_c *MockFileUploader_Upload_Call) RunAndReturn(run func(ctx context.Context, reader io.Reader, opts *storage.UploadOptions) (*storage.File, error)) *MockFileUploader_Upload_Call {
	_c.Call.Return(run)
	return _c
}
