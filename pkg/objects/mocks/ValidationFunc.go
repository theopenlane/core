// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	objects "github.com/theopenlane/core/pkg/objects"
)

// ValidationFunc is an autogenerated mock type for the ValidationFunc type
type ValidationFunc struct {
	mock.Mock
}

type ValidationFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *ValidationFunc) EXPECT() *ValidationFunc_Expecter {
	return &ValidationFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: f
func (_m *ValidationFunc) Execute(f objects.File) error {
	ret := _m.Called(f)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(objects.File) error); ok {
		r0 = rf(f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidationFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type ValidationFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - f objects.File
func (_e *ValidationFunc_Expecter) Execute(f interface{}) *ValidationFunc_Execute_Call {
	return &ValidationFunc_Execute_Call{Call: _e.mock.On("Execute", f)}
}

func (_c *ValidationFunc_Execute_Call) Run(run func(f objects.File)) *ValidationFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(objects.File))
	})
	return _c
}

func (_c *ValidationFunc_Execute_Call) Return(_a0 error) *ValidationFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ValidationFunc_Execute_Call) RunAndReturn(run func(objects.File) error) *ValidationFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewValidationFunc creates a new instance of ValidationFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValidationFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *ValidationFunc {
	mock := &ValidationFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
