// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	echox "github.com/theopenlane/echox"
)

// BindFunc is an autogenerated mock type for the BindFunc type
type BindFunc struct {
	mock.Mock
}

type BindFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *BindFunc) EXPECT() *BindFunc_Expecter {
	return &BindFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *BindFunc) Execute(_a0 echox.Context, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echox.Context, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BindFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type BindFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 echox.Context
//   - _a1 interface{}
func (_e *BindFunc_Expecter) Execute(_a0 interface{}, _a1 interface{}) *BindFunc_Execute_Call {
	return &BindFunc_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1)}
}

func (_c *BindFunc_Execute_Call) Run(run func(_a0 echox.Context, _a1 interface{})) *BindFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echox.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *BindFunc_Execute_Call) Return(_a0 error) *BindFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BindFunc_Execute_Call) RunAndReturn(run func(echox.Context, interface{}) error) *BindFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewBindFunc creates a new instance of BindFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBindFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *BindFunc {
	mock := &BindFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
