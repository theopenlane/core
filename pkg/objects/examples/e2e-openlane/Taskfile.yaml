version: '3'

env:
  OPENLANE_OBJECTSTORAGE_PROVIDER: '{{ .OPENLANE_OBJECTSTORAGE_PROVIDER | default "disk" }}'
  OPENLANE_OBJECTSTORAGE_DEFAULTBUCKET: '{{ .OPENLANE_OBJECTSTORAGE_DEFAULTBUCKET | default "./tmp/file_uploads" }}'
  OPENLANE_OBJECTSTORAGE_ACCESSKEY: '{{ .OPENLANE_OBJECTSTORAGE_ACCESSKEY | default "admin" }}'
  OPENLANE_OBJECTSTORAGE_SECRETKEY: '{{ .OPENLANE_OBJECTSTORAGE_SECRETKEY | default "adminsecretpassword" }}'
  OPENLANE_OBJECTSTORAGE_REGION: '{{ .OPENLANE_OBJECTSTORAGE_REGION | default "us-east-1" }}'
  OPENLANE_OBJECTSTORAGE_ENDPOINT: '{{ .OPENLANE_OBJECTSTORAGE_ENDPOINT | default "http://localhost:19000" }}'
  OPENLANE_OBJECTSTORAGE_USEPATHSTYLE: '{{ .OPENLANE_OBJECTSTORAGE_USEPATHSTYLE | default "true" }}'

vars:
  BIN_DIR: bin
  MAIN_BIN: bin/e2e-openlane
  SETUP_BIN: bin/setup
  TAGS: examples

tasks:
  default:
    desc: Build and run the e2e example against a local Openlane deployment
    cmds:
      - task: run

  build:
    desc: Build binaries for setup and the main example
    cmds:
      - mkdir -p {{.BIN_DIR}}
      - go build -tags {{.TAGS}} -o {{.SETUP_BIN}} ./setup
      - go build -tags {{.TAGS}} -o {{.MAIN_BIN}} .

  setup:
    desc: Bootstrap benchmark credentials and token
    deps:
      - build
    cmds:
      - ./{{.SETUP_BIN}}
      - |
        if ! grep -qxF '.benchmark-token' .gitignore 2>/dev/null; then
          echo '.benchmark-token' >> .gitignore;
        fi
      - |
        if ! grep -qxF '.benchmark-org-id' .gitignore 2>/dev/null; then
          echo '.benchmark-org-id' >> .gitignore;
        fi

  setup:storage:disk:
    desc: Prepare local disk storage
    cmds:
      - mkdir -p ./tmp/file_uploads

  setup:storage:minio:
    desc: Launch MinIO for S3-compatible storage
    cmds:
      - docker-compose up -d minio
      - sleep 3

  run:
    desc: Execute the e2e workflow using the generated token
    deps:
      - setup
    cmds:
      - ./{{.MAIN_BIN}} -token="$(cat .benchmark-token)" {{.CLI_ARGS}}

  run-with-file:
    desc: Execute the workflow with a specific evidence file
    deps:
      - setup
    cmds:
      - ./{{.MAIN_BIN}} -token="$(cat .benchmark-token)" -file={{.FILE}} {{.CLI_ARGS}}

  benchmark:
    desc: Run all benchmarks
    deps:
      - setup
    cmds:
      - go test -tags {{.TAGS}} -bench=. -benchmem -benchtime=10s .

  benchmark-basic:
    desc: Benchmark basic evidence creation without files
    deps:
      - setup
    cmds:
      - go test -tags {{.TAGS}} -bench=BenchmarkEvidenceCreationBasic -benchmem -benchtime=30s .

  benchmark-with-file:
    desc: Benchmark evidence creation with file upload
    deps:
      - setup
    cmds:
      - go test -tags {{.TAGS}} -bench=BenchmarkEvidenceCreationWithFile -benchmem -benchtime=30s .

  benchmark-concurrent:
    desc: Benchmark concurrent evidence creation
    deps:
      - setup
    cmds:
      - go test -tags {{.TAGS}} -bench=BenchmarkEvidenceCreationConcurrent -benchmem -benchtime=30s .

  benchmark-multiple-files:
    desc: Benchmark evidence creation with multiple files
    deps:
      - setup
    cmds:
      - go test -tags {{.TAGS}} -bench=BenchmarkEvidenceCreationWithMultipleFiles -benchmem -benchtime=30s .

  benchmark-large-file:
    desc: Benchmark evidence creation with large files
    deps:
      - setup
    cmds:
      - go test -tags {{.TAGS}} -bench=BenchmarkEvidenceCreationLargeFile -benchmem -benchtime=30s .

  benchmark-client-init:
    desc: Benchmark client initialization overhead
    deps:
      - setup
    cmds:
      - go test -tags {{.TAGS}} -bench=BenchmarkClientInitialization -benchmem -benchtime=30s .

  benchmark-upload-creation:
    desc: Benchmark upload file creation overhead (no auth required)
    cmds:
      - go test -tags {{.TAGS}} -bench=BenchmarkUploadFileCreation -benchmem -benchtime=30s .

  benchmark-memory:
    desc: Benchmark memory allocation patterns
    deps:
      - setup
    cmds:
      - go test -tags {{.TAGS}} -bench=BenchmarkMemoryAllocation -benchmem -benchtime=30s .

  benchmark-metadata:
    desc: Benchmark evidence creation with full metadata
    deps:
      - setup
    cmds:
      - go test -tags {{.TAGS}} -bench=BenchmarkEvidenceCreationWithMetadata -benchmem -benchtime=30s .

  benchmark-quick:
    desc: Quick benchmark run for development
    deps:
      - setup
    cmds:
      - go test -tags {{.TAGS}} -bench=. -benchmem -benchtime=3s .

  profile-cpu:
    desc: CPU profiling for evidence creation
    deps:
      - setup
    cmds:
      - go test -tags {{.TAGS}} -bench=BenchmarkEvidenceCreationConcurrent -cpuprofile=cpu.prof -benchtime=30s .
      - go tool pprof -http=:8080 cpu.prof

  profile-mem:
    desc: Memory profiling for evidence creation
    deps:
      - setup
    cmds:
      - go test -tags {{.TAGS}} -bench=BenchmarkMemoryAllocation -memprofile=mem.prof -benchtime=30s .
      - go tool pprof -http=:8080 mem.prof

  teardown:
    desc: Remove authentication artifacts
    cmds:
      - rm -f .benchmark-token .benchmark-org-id

  teardown:storage:
    desc: Stop storage services and clean directories
    cmds:
      - docker-compose down -v || true
      - rm -rf tmp

  clean:
    desc: Remove build artifacts and generated files
    cmds:
      - task: teardown
      - task: teardown:storage
      - rm -f cpu.prof mem.prof
      - rm -rf {{.BIN_DIR}}

  build-only:
    desc: Build binaries without running anything
    cmds:
      - task: build

  test:
    desc: Run example tests with the examples build tag
    cmds:
      - go test -tags {{.TAGS}} -v .
