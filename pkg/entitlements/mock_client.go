// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package entitlements is a generated GoMock package.
package entitlements

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	stripe "github.com/stripe/stripe-go/v81"
	customer "github.com/stripe/stripe-go/v81/customer"
	subscription "github.com/stripe/stripe-go/v81/subscription"
)

// MockStripeClientInterface is a mock of StripeClientInterface interface.
type MockStripeClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStripeClientInterfaceMockRecorder
}

// MockStripeClientInterfaceMockRecorder is the mock recorder for MockStripeClientInterface.
type MockStripeClientInterfaceMockRecorder struct {
	mock *MockStripeClientInterface
}

// NewMockStripeClientInterface creates a new mock instance.
func NewMockStripeClientInterface(ctrl *gomock.Controller) *MockStripeClientInterface {
	mock := &MockStripeClientInterface{ctrl: ctrl}
	mock.recorder = &MockStripeClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStripeClientInterface) EXPECT() *MockStripeClientInterfaceMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockStripeClientInterface) CreateCustomer(params *stripe.CustomerParams) (*stripe.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", params)
	ret0, _ := ret[0].(*stripe.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockStripeClientInterfaceMockRecorder) CreateCustomer(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockStripeClientInterface)(nil).CreateCustomer), params)
}

// CreateSubscription mocks base method.
func (m *MockStripeClientInterface) CreateSubscription(params *stripe.SubscriptionParams) (*stripe.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", params)
	ret0, _ := ret[0].(*stripe.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockStripeClientInterfaceMockRecorder) CreateSubscription(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockStripeClientInterface)(nil).CreateSubscription), params)
}

// GetCustomer mocks base method.
func (m *MockStripeClientInterface) GetCustomer(id string, params *stripe.CustomerParams) (*stripe.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomer", id, params)
	ret0, _ := ret[0].(*stripe.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomer indicates an expected call of GetCustomer.
func (mr *MockStripeClientInterfaceMockRecorder) GetCustomer(id, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomer", reflect.TypeOf((*MockStripeClientInterface)(nil).GetCustomer), id, params)
}

// GetSubscription mocks base method.
func (m *MockStripeClientInterface) GetSubscription(id string, params *stripe.SubscriptionParams) (*stripe.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", id, params)
	ret0, _ := ret[0].(*stripe.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockStripeClientInterfaceMockRecorder) GetSubscription(id, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockStripeClientInterface)(nil).GetSubscription), id, params)
}

// ListCustomers mocks base method.
func (m *MockStripeClientInterface) ListCustomers(params *stripe.CustomerListParams) *customer.Iter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomers", params)
	ret0, _ := ret[0].(*customer.Iter)
	return ret0
}

// ListCustomers indicates an expected call of ListCustomers.
func (mr *MockStripeClientInterfaceMockRecorder) ListCustomers(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomers", reflect.TypeOf((*MockStripeClientInterface)(nil).ListCustomers), params)
}

// ListSubscriptions mocks base method.
func (m *MockStripeClientInterface) ListSubscriptions(params *stripe.SubscriptionListParams) *subscription.Iter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptions", params)
	ret0, _ := ret[0].(*subscription.Iter)
	return ret0
}

// ListSubscriptions indicates an expected call of ListSubscriptions.
func (mr *MockStripeClientInterfaceMockRecorder) ListSubscriptions(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptions", reflect.TypeOf((*MockStripeClientInterface)(nil).ListSubscriptions), params)
}

// UpdateCustomer mocks base method.
func (m *MockStripeClientInterface) UpdateCustomer(id string, params *stripe.CustomerParams) (*stripe.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomer", id, params)
	ret0, _ := ret[0].(*stripe.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomer indicates an expected call of UpdateCustomer.
func (mr *MockStripeClientInterfaceMockRecorder) UpdateCustomer(id, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomer", reflect.TypeOf((*MockStripeClientInterface)(nil).UpdateCustomer), id, params)
}

// UpdateSubscription mocks base method.
func (m *MockStripeClientInterface) UpdateSubscription(id string, params *stripe.SubscriptionParams) (*stripe.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", id, params)
	ret0, _ := ret[0].(*stripe.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockStripeClientInterfaceMockRecorder) UpdateSubscription(id, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockStripeClientInterface)(nil).UpdateSubscription), id, params)
}
