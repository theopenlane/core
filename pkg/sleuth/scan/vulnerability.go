package scan

import (
	"bufio"
	"bytes"
	"context"
	"encoding/json"
	"os"
	"os/exec"
	"strings"
)

// Vulnerability represents a discovered vulnerability in a scan report.
type Vulnerability struct {
	CVEID       string  `json:"cve_id"`
	Description string  `json:"description,omitempty"`
	CVSSVector  string  `json:"cvss_vector,omitempty"`
	CVSSVersion string  `json:"cvss_version,omitempty"`
	Score       float64 `json:"score,omitempty"`
	Reference   string  `json:"reference,omitempty"`
}

// VulnerabilityReport aggregates vulnerabilities discovered for a domain.
type VulnerabilityReport struct {
	Vulnerabilities []Vulnerability `json:"vulnerabilities,omitempty"`
}

// ScanVulnerabilities performs a vulnerability scan against a domain.
// This is a stubbed implementation returning example data.
func ScanVulnerabilities(ctx context.Context, domain string) (VulnerabilityReport, error) {
	var report VulnerabilityReport

	args := []string{"-u", domain, "-json"}
	if tmplDir := os.Getenv("NUCLEI_TEMPLATE_DIR"); tmplDir != "" {
		args = append(args, "-t", tmplDir)
	}

	cmd := exec.CommandContext(ctx, "nuclei", args...)
	var buf bytes.Buffer
	cmd.Stdout = &buf
	if err := cmd.Run(); err != nil {
		return report, err
	}

	scanner := bufio.NewScanner(&buf)
	for scanner.Scan() {
		line := scanner.Bytes()
		if len(bytes.TrimSpace(line)) == 0 {
			continue
		}
		var res struct {
			Info struct {
				Description    string   `json:"description"`
				Reference      []string `json:"reference"`
				Classification struct {
					CVEID      string  `json:"cve-id"`
					CVSSScore  float64 `json:"cvss-score"`
					CVSSVector string  `json:"cvss-metrics"`
				} `json:"classification"`
			} `json:"info"`
		}
		if err := json.Unmarshal(line, &res); err != nil {
			continue
		}

		ref := ""
		if len(res.Info.Reference) > 0 {
			ref = res.Info.Reference[0]
		}

		vuln := Vulnerability{
			CVEID:       strings.TrimSpace(res.Info.Classification.CVEID),
			Description: res.Info.Description,
			CVSSVector:  res.Info.Classification.CVSSVector,
			Score:       res.Info.Classification.CVSSScore,
			Reference:   ref,
		}
		if vuln.CVSSVector != "" {
			vuln.CVSSVersion = "3.1"
		}
		report.Vulnerabilities = append(report.Vulnerabilities, vuln)
	}

	return report, scanner.Err()
}
