package enums

import (
	"fmt"
	"io"
	"strings"
)

// {{ .Name }} is a custom type representing the various states of {{ .Name | ToCamel }}.
type {{ .Name }} string

var (
{{- range .Values }}
	// {{ $.Name }}{{ . | ToCamel }} indicates the {{ lowerToSentence . }}.
	{{ $.Name }}{{ . | ToCamel }} {{ $.Name }} = "{{ . }}"
{{- end }}
	// {{ $.Name }}Invalid is used when an unknown or unsupported value is provided.
	{{ $.Name }}Invalid {{ $.Name }} = "{{ .Name | ToUpper }}_INVALID"
)

// Values returns a slice of strings representing all valid {{ .Name }} values.
func ({{ .Name }}) Values() []string {
	return []string{
	{{- range .Values }}
		string({{ $.Name }}{{ . | ToCamel }}),
	{{- end }}
	}
}

// String returns the string representation of the {{ .Name }} value.
func (r {{ .Name }}) String() string {
	return string(r)
}

// To{{ .Name }} converts a string to its corresponding {{ .Name }} enum value.
func To{{ .Name }}(r string) *{{ .Name }} {
	switch strings.ToUpper(r) {
	{{- range .Values }}
	case {{ $.Name }}{{ . | ToCamel }}.String():
		return &{{ $.Name }}{{ . | ToCamel }}
	{{- end }}
	default:
		return &{{ $.Name }}Invalid
	}
}

// MarshalGQL implements the gqlgen Marshaler interface.
func (r {{ .Name }}) MarshalGQL(w io.Writer) {
	_, _ = w.Write([]byte(`"` + r.String() + `"`))
}

// UnmarshalGQL implements the gqlgen Unmarshaler interface.
func (r *{{ .Name }}) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("wrong type for {{ .Name }}, got: %T", v)  //nolint:err113
	}

	*r = {{ .Name }}(str)

	return nil
}
